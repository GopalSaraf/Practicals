// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC18F25Q43_H_
#define _PIC18F25Q43_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC18F25Q43
 */
#ifndef _XC_H_
#warning Header file pic18f25q43.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Interrupt Source IRQ numbers
 */

// Software Interrupt
#define                                 IRQ_SWINT           0
// HLVD Interrupt
#define                                 IRQ_HLVD            1
// Oscillator Failure Interrupt
#define                                 IRQ_OSF             2
// Clock Switch Interrupt
#define                                 IRQ_CSW             3
// CLC1 Interrupt
#define                                 IRQ_CLC1            5
// Interrupt on change
#define                                 IRQ_IOC             7
// External Interrupt 0
#define                                 IRQ_INT0            8
// ZCD Interrupt
#define                                 IRQ_ZCD             9
// ADC Interrupt
#define                                 IRQ_AD              10
// Active Clock Tuning Interrupt
#define                                 IRQ_ACT             11
// Comparator 1 Interrupt
#define                                 IRQ_CMP1            12
// SMT1 Interrupt
#define                                 IRQ_SMT1            13
// SMT1 Period acqusition Interrupt
#define                                 IRQ_SMT1PRA         14
// SMT1 Pulse width acqusition Interrupt
#define                                 IRQ_SMT1PRW         15
// ADC Treshold Interrupt
#define                                 IRQ_ADT             16
// DMA1 Source count Interrupt
#define                                 IRQ_DMA1SCNT        20
// DMA1 Destination count Interrupt
#define                                 IRQ_DMA1DCNT        21
// DMA1 Overflow Interrupt
#define                                 IRQ_DMA1OR          22
// DMA1 Abort Interrupt
#define                                 IRQ_DMA1A           23
// SPI1 Receive Interrupt
#define                                 IRQ_SPI1RX          24
// SPI1 Transmit Interrupt
#define                                 IRQ_SPI1TX          25
// SPI1 Interrupt
#define                                 IRQ_SPI1            26
// Timer2 Interrupt
#define                                 IRQ_TMR2            27
// Timer1 Interrupt
#define                                 IRQ_TMR1            28
// Timer1 Gate Interrupt
#define                                 IRQ_TMR1G           29
// CCP1 Interrupt
#define                                 IRQ_CCP1            30
// Timer0 Interrupt
#define                                 IRQ_TMR0            31
// UART1 Receive Interrupt
#define                                 IRQ_U1RX            32
// UART1 Transmit Interrupt
#define                                 IRQ_U1TX            33
// UART1 Error Interrupt
#define                                 IRQ_U1E             34
// UART1 Interrupt
#define                                 IRQ_U1              35
// PWM1 Period Interrupt
#define                                 IRQ_PWM1PR          38
// PWM1 Interrupt
#define                                 IRQ_PWM1            39
// SPI2 Receive Interrupt
#define                                 IRQ_SPI2RX          40
// SPI2 Transmit Interrupt
#define                                 IRQ_SPI2TX          41
// SPI2 Interrupt
#define                                 IRQ_SPI2            42
// Timer3 Interrupt
#define                                 IRQ_TMR3            44
// Timer3 Gate Interrupt
#define                                 IRQ_TMR3G           45
// PWM2 Period Interrupt
#define                                 IRQ_PWM2PR          46
// PWM2 Interrupt
#define                                 IRQ_PWM2            47
// External Interrupt 1
#define                                 IRQ_INT1            48
// CLC2 Interrupt
#define                                 IRQ_CLC2            49
// CWG1 Interrupt
#define                                 IRQ_CWG1            50
// NCO1 Interrupt
#define                                 IRQ_NCO1            51
// DMA2 Source count Interrupt
#define                                 IRQ_DMA2SCNT        52
// DMA2 Destination count Interrupt
#define                                 IRQ_DMA2DCNT        53
// DMA2 Overflow Interrupt
#define                                 IRQ_DMA2OR          54
// DMA2 Abort Interrupt
#define                                 IRQ_DMA2A           55
// I2C1 Receive Interrupt
#define                                 IRQ_I2C1RX          56
// I2C1 Transmit Interrupt
#define                                 IRQ_I2C1TX          57
// I2C1 Interrupt
#define                                 IRQ_I2C1            58
// I2C1 Error Interrupt
#define                                 IRQ_I2C1E           59
// CLC3 Interrupt
#define                                 IRQ_CLC3            61
// PWM3 Period Interrupt
#define                                 IRQ_PWM3PR          62
// PWM3 Interrupt
#define                                 IRQ_PWM3            63
// UART2 Receive Interrupt
#define                                 IRQ_U2RX            64
// UART2 Transmit Interrupt
#define                                 IRQ_U2TX            65
// UART2 Error Interrupt
#define                                 IRQ_U2E             66
// UART2 Interrupt
#define                                 IRQ_U2              67
// Timer5 Interrupt
#define                                 IRQ_TMR5            68
// Timer5 Gate Interrupt
#define                                 IRQ_TMR5G           69
// CCP2 Interrupt
#define                                 IRQ_CCP2            70
// Scanner Interrupt
#define                                 IRQ_SCAN            71
// UART3 Receive Interrupt
#define                                 IRQ_U3RX            72
// UART3 Transmit Interrupt
#define                                 IRQ_U3TX            73
// UART3 Error Interrupt
#define                                 IRQ_U3E             74
// UART3 Interrupt
#define                                 IRQ_U3              75
// CLC4 Interrupt
#define                                 IRQ_CLC4            77
// External Interrupt 2
#define                                 IRQ_INT2            80
// CLC5 Interrupt
#define                                 IRQ_CLC5            81
// CWG2 Interrupt
#define                                 IRQ_CWG2            82
// NCO2 Interrupt
#define                                 IRQ_NCO2            83
// DMA3 Source count Interrupt
#define                                 IRQ_DMA3SCNT        84
// DMA3 Destination count Interrupt
#define                                 IRQ_DMA3DCNT        85
// DMA3 Overflow Interrupt
#define                                 IRQ_DMA3OR          86
// DMA3 Abort Interrupt
#define                                 IRQ_DMA3A           87
// CCP3 Interrupt
#define                                 IRQ_CCP3            88
// CLC6 Interrupt
#define                                 IRQ_CLC6            89
// CWG3 Interrupt
#define                                 IRQ_CWG3            90
// Timer4 Interrupt
#define                                 IRQ_TMR4            91
// DMA4 Source count Interrupt
#define                                 IRQ_DMA4SCNT        92
// DMA4 Destination count Interrupt
#define                                 IRQ_DMA4DCNT        93
// DMA4 Overflow Interrupt
#define                                 IRQ_DMA4OR          94
// DMA4 Abort Interrupt
#define                                 IRQ_DMA4A           95
// UART4 Receive Interrupt
#define                                 IRQ_U4RX            96
// UART4 Transmit Interrupt
#define                                 IRQ_U4TX            97
// UART4 Error Interrupt
#define                                 IRQ_U4E             98
// UART4 Interrupt
#define                                 IRQ_U4              99
// DMA5 Source count Interrupt
#define                                 IRQ_DMA5SCNT        100
// DMA5 Destination count Interrupt
#define                                 IRQ_DMA5DCNT        101
// DMA5 Overflow Interrupt
#define                                 IRQ_DMA5OR          102
// DMA5 Abort Interrupt
#define                                 IRQ_DMA5A           103
// UART5 Receive Interrupt
#define                                 IRQ_U5RX            104
// UART5 Transmit Interrupt
#define                                 IRQ_U5TX            105
// UART5 Error Interrupt
#define                                 IRQ_U5E             106
// UART5 Interrupt
#define                                 IRQ_U5              107
// DMA6 Source count Interrupt
#define                                 IRQ_DMA6SCNT        108
// DMA6 Destination count Interrupt
#define                                 IRQ_DMA6DCNT        109
// DMA6 Overflow Interrupt
#define                                 IRQ_DMA6OR          110
// DMA6 Abort Interrupt
#define                                 IRQ_DMA6A           111
// CLC7 Interrupt
#define                                 IRQ_CLC7            113
// Comparator 2 Interrupt
#define                                 IRQ_CMP2            114
// NCO3 Interrupt
#define                                 IRQ_NCO3            115
// NVM Interrupt
#define                                 IRQ_NVM             120
// CLC8 Interrupt
#define                                 IRQ_CLC8            121
// CRC Interrupt
#define                                 IRQ_CRC             122
// Timer6 Interrupt
#define                                 IRQ_TMR6            123
/*
 * Device Information Area (DIA) Table
 */

#define DIA_MUI                                             0x2C0000
#define DIA_MUI0                                            0x2C0000
#define DIA_MUI1                                            0x2C0002
#define DIA_MUI2                                            0x2C0004
#define DIA_MUI3                                            0x2C0006
#define DIA_MUI4                                            0x2C0008
#define DIA_MUI5                                            0x2C000A
#define DIA_MUI6                                            0x2C000C
#define DIA_MUI7                                            0x2C000E
#define DIA_MUI8                                            0x2C0010
#define DIA_MUI9                                            0x2C0012

#define DIA_EUI                                             0x2C0014
#define DIA_EUI0                                            0x2C0014
#define DIA_EUI1                                            0x2C0016
#define DIA_EUI2                                            0x2C0018
#define DIA_EUI3                                            0x2C001A
#define DIA_EUI4                                            0x2C001C
#define DIA_EUI5                                            0x2C001E
#define DIA_EUI6                                            0x2C0020
#define DIA_EUI7                                            0x2C0022

#define DIA_TSLR                                            0x2C0024
#define DIA_TSLR1                                           0x2C0024
#define DIA_TSLR2                                           0x2C0026
#define DIA_TSLR3                                           0x2C0028

#define DIA_TSHR                                            0x2C002A
#define DIA_TSHR1                                           0x2C002A
#define DIA_TSHR2                                           0x2C002C
#define DIA_TSHR3                                           0x2C002E

#define DIA_FVRA                                            0x2C0030
#define DIA_FVRA1X                                          0x2C0030
#define DIA_FVRA2X                                          0x2C0032
#define DIA_FVRA4X                                          0x2C0034

#define DIA_FVRC                                            0x2C0036
#define DIA_FVRC1X                                          0x2C0036
#define DIA_FVRC2X                                          0x2C0038
#define DIA_FVRC4X                                          0x2C003A

/*
 * Device Configuration Information (DCI) Table
 */

#define DCI_ERSIZ                                           0x3C0000
#define DCI_WLSIZ                                           0x3C0002
#define DCI_URSIZ                                           0x3C0004
#define DCI_EESIZ                                           0x3C0006
#define DCI_PCNT                                            0x3C0008

/*
 * Register Definitions
 */

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0x039);
#ifndef _LIB_BUILD
asm("CLKRCON equ 039h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DIV                    :3;
        unsigned DC                     :2;
        unsigned                        :2;
        unsigned EN                     :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned DIV0                   :1;
        unsigned DIV1                   :1;
        unsigned DIV2                   :1;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0x039);
// bitfield macros
#define _CLKRCON_DIV_POSN                                   0x0
#define _CLKRCON_DIV_POSITION                               0x0
#define _CLKRCON_DIV_SIZE                                   0x3
#define _CLKRCON_DIV_LENGTH                                 0x3
#define _CLKRCON_DIV_MASK                                   0x7
#define _CLKRCON_DC_POSN                                    0x3
#define _CLKRCON_DC_POSITION                                0x3
#define _CLKRCON_DC_SIZE                                    0x2
#define _CLKRCON_DC_LENGTH                                  0x2
#define _CLKRCON_DC_MASK                                    0x18
#define _CLKRCON_EN_POSN                                    0x7
#define _CLKRCON_EN_POSITION                                0x7
#define _CLKRCON_EN_SIZE                                    0x1
#define _CLKRCON_EN_LENGTH                                  0x1
#define _CLKRCON_EN_MASK                                    0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_DIV0_POSN                                  0x0
#define _CLKRCON_DIV0_POSITION                              0x0
#define _CLKRCON_DIV0_SIZE                                  0x1
#define _CLKRCON_DIV0_LENGTH                                0x1
#define _CLKRCON_DIV0_MASK                                  0x1
#define _CLKRCON_DIV1_POSN                                  0x1
#define _CLKRCON_DIV1_POSITION                              0x1
#define _CLKRCON_DIV1_SIZE                                  0x1
#define _CLKRCON_DIV1_LENGTH                                0x1
#define _CLKRCON_DIV1_MASK                                  0x2
#define _CLKRCON_DIV2_POSN                                  0x2
#define _CLKRCON_DIV2_POSITION                              0x2
#define _CLKRCON_DIV2_SIZE                                  0x1
#define _CLKRCON_DIV2_LENGTH                                0x1
#define _CLKRCON_DIV2_MASK                                  0x4
#define _CLKRCON_DC0_POSN                                   0x3
#define _CLKRCON_DC0_POSITION                               0x3
#define _CLKRCON_DC0_SIZE                                   0x1
#define _CLKRCON_DC0_LENGTH                                 0x1
#define _CLKRCON_DC0_MASK                                   0x8
#define _CLKRCON_DC1_POSN                                   0x4
#define _CLKRCON_DC1_POSITION                               0x4
#define _CLKRCON_DC1_SIZE                                   0x1
#define _CLKRCON_DC1_LENGTH                                 0x1
#define _CLKRCON_DC1_MASK                                   0x10

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0x03A);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 03Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
        unsigned CLKRCLK3               :1;
        unsigned CLKRCLK4               :1;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0x03A);
// bitfield macros
#define _CLKRCLK_CLK_POSN                                   0x0
#define _CLKRCLK_CLK_POSITION                               0x0
#define _CLKRCLK_CLK_SIZE                                   0x8
#define _CLKRCLK_CLK_LENGTH                                 0x8
#define _CLKRCLK_CLK_MASK                                   0xFF
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLKRCLK3_POSN                              0x3
#define _CLKRCLK_CLKRCLK3_POSITION                          0x3
#define _CLKRCLK_CLKRCLK3_SIZE                              0x1
#define _CLKRCLK_CLKRCLK3_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK3_MASK                              0x8
#define _CLKRCLK_CLKRCLK4_POSN                              0x4
#define _CLKRCLK_CLKRCLK4_POSITION                          0x4
#define _CLKRCLK_CLKRCLK4_SIZE                              0x1
#define _CLKRCLK_CLKRCLK4_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK4_MASK                              0x10
#define _CLKRCLK_CLK0_POSN                                  0x0
#define _CLKRCLK_CLK0_POSITION                              0x0
#define _CLKRCLK_CLK0_SIZE                                  0x1
#define _CLKRCLK_CLK0_LENGTH                                0x1
#define _CLKRCLK_CLK0_MASK                                  0x1
#define _CLKRCLK_CLK1_POSN                                  0x1
#define _CLKRCLK_CLK1_POSITION                              0x1
#define _CLKRCLK_CLK1_SIZE                                  0x1
#define _CLKRCLK_CLK1_LENGTH                                0x1
#define _CLKRCLK_CLK1_MASK                                  0x2
#define _CLKRCLK_CLK2_POSN                                  0x2
#define _CLKRCLK_CLK2_POSITION                              0x2
#define _CLKRCLK_CLK2_SIZE                                  0x1
#define _CLKRCLK_CLK2_LENGTH                                0x1
#define _CLKRCLK_CLK2_MASK                                  0x4
#define _CLKRCLK_CLK3_POSN                                  0x3
#define _CLKRCLK_CLK3_POSITION                              0x3
#define _CLKRCLK_CLK3_SIZE                                  0x1
#define _CLKRCLK_CLK3_LENGTH                                0x1
#define _CLKRCLK_CLK3_MASK                                  0x8
#define _CLKRCLK_CLK4_POSN                                  0x4
#define _CLKRCLK_CLK4_POSITION                              0x4
#define _CLKRCLK_CLK4_SIZE                                  0x1
#define _CLKRCLK_CLK4_LENGTH                                0x1
#define _CLKRCLK_CLK4_MASK                                  0x10

// Register: NVMCON0
#define NVMCON0 NVMCON0
extern volatile unsigned char           NVMCON0             __at(0x040);
#ifndef _LIB_BUILD
asm("NVMCON0 equ 040h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
    };
    struct {
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned nDONE                  :1;
    };
    struct {
        unsigned NVMGO                  :1;
    };
} NVMCON0bits_t;
extern volatile NVMCON0bits_t NVMCON0bits __at(0x040);
// bitfield macros
#define _NVMCON0_GO_POSN                                    0x0
#define _NVMCON0_GO_POSITION                                0x0
#define _NVMCON0_GO_SIZE                                    0x1
#define _NVMCON0_GO_LENGTH                                  0x1
#define _NVMCON0_GO_MASK                                    0x1
#define _NVMCON0_NOT_DONE_POSN                              0x0
#define _NVMCON0_NOT_DONE_POSITION                          0x0
#define _NVMCON0_NOT_DONE_SIZE                              0x1
#define _NVMCON0_NOT_DONE_LENGTH                            0x1
#define _NVMCON0_NOT_DONE_MASK                              0x1
#define _NVMCON0_nDONE_POSN                                 0x0
#define _NVMCON0_nDONE_POSITION                             0x0
#define _NVMCON0_nDONE_SIZE                                 0x1
#define _NVMCON0_nDONE_LENGTH                               0x1
#define _NVMCON0_nDONE_MASK                                 0x1
#define _NVMCON0_NVMGO_POSN                                 0x0
#define _NVMCON0_NVMGO_POSITION                             0x0
#define _NVMCON0_NVMGO_SIZE                                 0x1
#define _NVMCON0_NVMGO_LENGTH                               0x1
#define _NVMCON0_NVMGO_MASK                                 0x1

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x041);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 041h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CMD                    :3;
        unsigned                        :4;
        unsigned WRERR                  :1;
    };
    struct {
        unsigned NVMCMD                 :3;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x041);
// bitfield macros
#define _NVMCON1_CMD_POSN                                   0x0
#define _NVMCON1_CMD_POSITION                               0x0
#define _NVMCON1_CMD_SIZE                                   0x3
#define _NVMCON1_CMD_LENGTH                                 0x3
#define _NVMCON1_CMD_MASK                                   0x7
#define _NVMCON1_WRERR_POSN                                 0x7
#define _NVMCON1_WRERR_POSITION                             0x7
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x80
#define _NVMCON1_NVMCMD_POSN                                0x0
#define _NVMCON1_NVMCMD_POSITION                            0x0
#define _NVMCON1_NVMCMD_SIZE                                0x3
#define _NVMCON1_NVMCMD_LENGTH                              0x3
#define _NVMCON1_NVMCMD_MASK                                0x7

// Register: NVMLOCK
#define NVMLOCK NVMLOCK
extern volatile unsigned char           NVMLOCK             __at(0x042);
#ifndef _LIB_BUILD
asm("NVMLOCK equ 042h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LOCK                   :8;
    };
} NVMLOCKbits_t;
extern volatile NVMLOCKbits_t NVMLOCKbits __at(0x042);
// bitfield macros
#define _NVMLOCK_LOCK_POSN                                  0x0
#define _NVMLOCK_LOCK_POSITION                              0x0
#define _NVMLOCK_LOCK_SIZE                                  0x8
#define _NVMLOCK_LOCK_LENGTH                                0x8
#define _NVMLOCK_LOCK_MASK                                  0xFF

// Register: NVMADR
#define NVMADR NVMADR
#ifndef __CCI__
extern volatile __uint24                NVMADR              __at(0x043);
#endif
#ifndef _LIB_BUILD
asm("NVMADR equ 043h");
#endif

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x043);
#ifndef _LIB_BUILD
asm("NVMADRL equ 043h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRL                :8;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x043);
// bitfield macros
#define _NVMADRL_NVMADRL_POSN                               0x0
#define _NVMADRL_NVMADRL_POSITION                           0x0
#define _NVMADRL_NVMADRL_SIZE                               0x8
#define _NVMADRL_NVMADRL_LENGTH                             0x8
#define _NVMADRL_NVMADRL_MASK                               0xFF
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x044);
#ifndef _LIB_BUILD
asm("NVMADRH equ 044h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRH                :8;
    };
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
        unsigned NVMADR15               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x044);
// bitfield macros
#define _NVMADRH_NVMADRH_POSN                               0x0
#define _NVMADRH_NVMADRH_POSITION                           0x0
#define _NVMADRH_NVMADRH_SIZE                               0x8
#define _NVMADRH_NVMADRH_LENGTH                             0x8
#define _NVMADRH_NVMADRH_MASK                               0xFF
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40
#define _NVMADRH_NVMADR15_POSN                              0x7
#define _NVMADRH_NVMADR15_POSITION                          0x7
#define _NVMADRH_NVMADR15_SIZE                              0x1
#define _NVMADRH_NVMADR15_LENGTH                            0x1
#define _NVMADRH_NVMADR15_MASK                              0x80

// Register: NVMADRU
#define NVMADRU NVMADRU
extern volatile unsigned char           NVMADRU             __at(0x045);
#ifndef _LIB_BUILD
asm("NVMADRU equ 045h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRU                :6;
    };
    struct {
        unsigned NVMADR16               :1;
        unsigned NVMADR17               :1;
        unsigned NVMADR18               :1;
        unsigned NVMADR19               :1;
        unsigned NVMADR20               :1;
        unsigned NVMADR21               :1;
    };
} NVMADRUbits_t;
extern volatile NVMADRUbits_t NVMADRUbits __at(0x045);
// bitfield macros
#define _NVMADRU_NVMADRU_POSN                               0x0
#define _NVMADRU_NVMADRU_POSITION                           0x0
#define _NVMADRU_NVMADRU_SIZE                               0x6
#define _NVMADRU_NVMADRU_LENGTH                             0x6
#define _NVMADRU_NVMADRU_MASK                               0x3F
#define _NVMADRU_NVMADR16_POSN                              0x0
#define _NVMADRU_NVMADR16_POSITION                          0x0
#define _NVMADRU_NVMADR16_SIZE                              0x1
#define _NVMADRU_NVMADR16_LENGTH                            0x1
#define _NVMADRU_NVMADR16_MASK                              0x1
#define _NVMADRU_NVMADR17_POSN                              0x1
#define _NVMADRU_NVMADR17_POSITION                          0x1
#define _NVMADRU_NVMADR17_SIZE                              0x1
#define _NVMADRU_NVMADR17_LENGTH                            0x1
#define _NVMADRU_NVMADR17_MASK                              0x2
#define _NVMADRU_NVMADR18_POSN                              0x2
#define _NVMADRU_NVMADR18_POSITION                          0x2
#define _NVMADRU_NVMADR18_SIZE                              0x1
#define _NVMADRU_NVMADR18_LENGTH                            0x1
#define _NVMADRU_NVMADR18_MASK                              0x4
#define _NVMADRU_NVMADR19_POSN                              0x3
#define _NVMADRU_NVMADR19_POSITION                          0x3
#define _NVMADRU_NVMADR19_SIZE                              0x1
#define _NVMADRU_NVMADR19_LENGTH                            0x1
#define _NVMADRU_NVMADR19_MASK                              0x8
#define _NVMADRU_NVMADR20_POSN                              0x4
#define _NVMADRU_NVMADR20_POSITION                          0x4
#define _NVMADRU_NVMADR20_SIZE                              0x1
#define _NVMADRU_NVMADR20_LENGTH                            0x1
#define _NVMADRU_NVMADR20_MASK                              0x10
#define _NVMADRU_NVMADR21_POSN                              0x5
#define _NVMADRU_NVMADR21_POSITION                          0x5
#define _NVMADRU_NVMADR21_SIZE                              0x1
#define _NVMADRU_NVMADR21_LENGTH                            0x1
#define _NVMADRU_NVMADR21_MASK                              0x20

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned short          NVMDAT              __at(0x046);
#ifndef _LIB_BUILD
asm("NVMDAT equ 046h");
#endif

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x046);
#ifndef _LIB_BUILD
asm("NVMDATL equ 046h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATL                :8;
    };
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x046);
// bitfield macros
#define _NVMDATL_NVMDATL_POSN                               0x0
#define _NVMDATL_NVMDATL_POSITION                           0x0
#define _NVMDATL_NVMDATL_SIZE                               0x8
#define _NVMDATL_NVMDATL_LENGTH                             0x8
#define _NVMDATL_NVMDATL_MASK                               0xFF
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x047);
#ifndef _LIB_BUILD
asm("NVMDATH equ 047h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATH                :8;
    };
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
        unsigned NVMDAT14               :1;
        unsigned NVMDAT15               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x047);
// bitfield macros
#define _NVMDATH_NVMDATH_POSN                               0x0
#define _NVMDATH_NVMDATH_POSITION                           0x0
#define _NVMDATH_NVMDATH_SIZE                               0x8
#define _NVMDATH_NVMDATH_LENGTH                             0x8
#define _NVMDATH_NVMDATH_MASK                               0xFF
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20
#define _NVMDATH_NVMDAT14_POSN                              0x6
#define _NVMDATH_NVMDAT14_POSITION                          0x6
#define _NVMDATH_NVMDAT14_SIZE                              0x1
#define _NVMDATH_NVMDAT14_LENGTH                            0x1
#define _NVMDATH_NVMDAT14_MASK                              0x40
#define _NVMDATH_NVMDAT15_POSN                              0x7
#define _NVMDATH_NVMDAT15_POSITION                          0x7
#define _NVMDATH_NVMDAT15_SIZE                              0x1
#define _NVMDATH_NVMDAT15_LENGTH                            0x1
#define _NVMDATH_NVMDAT15_MASK                              0x80

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x048);
#ifndef _LIB_BUILD
asm("VREGCON equ 048h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREGPM                 :2;
        unsigned                        :2;
        unsigned PMSYS                  :2;
    };
    struct {
        unsigned VREGPM0                :1;
        unsigned VREGPM1                :1;
        unsigned                        :2;
        unsigned PMSYS0                 :1;
        unsigned PMSYS1                 :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x048);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x0
#define _VREGCON_VREGPM_POSITION                            0x0
#define _VREGCON_VREGPM_SIZE                                0x2
#define _VREGCON_VREGPM_LENGTH                              0x2
#define _VREGCON_VREGPM_MASK                                0x3
#define _VREGCON_PMSYS_POSN                                 0x4
#define _VREGCON_PMSYS_POSITION                             0x4
#define _VREGCON_PMSYS_SIZE                                 0x2
#define _VREGCON_PMSYS_LENGTH                               0x2
#define _VREGCON_PMSYS_MASK                                 0x30
#define _VREGCON_VREGPM0_POSN                               0x0
#define _VREGCON_VREGPM0_POSITION                           0x0
#define _VREGCON_VREGPM0_SIZE                               0x1
#define _VREGCON_VREGPM0_LENGTH                             0x1
#define _VREGCON_VREGPM0_MASK                               0x1
#define _VREGCON_VREGPM1_POSN                               0x1
#define _VREGCON_VREGPM1_POSITION                           0x1
#define _VREGCON_VREGPM1_SIZE                               0x1
#define _VREGCON_VREGPM1_LENGTH                             0x1
#define _VREGCON_VREGPM1_MASK                               0x2
#define _VREGCON_PMSYS0_POSN                                0x4
#define _VREGCON_PMSYS0_POSITION                            0x4
#define _VREGCON_PMSYS0_SIZE                                0x1
#define _VREGCON_PMSYS0_LENGTH                              0x1
#define _VREGCON_PMSYS0_MASK                                0x10
#define _VREGCON_PMSYS1_POSN                                0x5
#define _VREGCON_PMSYS1_POSITION                            0x5
#define _VREGCON_PMSYS1_SIZE                                0x1
#define _VREGCON_PMSYS1_LENGTH                              0x1
#define _VREGCON_PMSYS1_MASK                                0x20

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x049);
#ifndef _LIB_BUILD
asm("BORCON equ 049h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x049);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: HLVDCON0
#define HLVDCON0 HLVDCON0
extern volatile unsigned char           HLVDCON0            __at(0x04A);
#ifndef _LIB_BUILD
asm("HLVDCON0 equ 04Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTL                   :1;
        unsigned INTH                   :1;
        unsigned                        :2;
        unsigned RDY                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned HLVDINTL               :1;
        unsigned HLVDINTH               :1;
        unsigned                        :2;
        unsigned HLVDRDY                :1;
        unsigned HLVDOUT                :1;
        unsigned                        :1;
        unsigned HLVDEN                 :1;
    };
} HLVDCON0bits_t;
extern volatile HLVDCON0bits_t HLVDCON0bits __at(0x04A);
// bitfield macros
#define _HLVDCON0_INTL_POSN                                 0x0
#define _HLVDCON0_INTL_POSITION                             0x0
#define _HLVDCON0_INTL_SIZE                                 0x1
#define _HLVDCON0_INTL_LENGTH                               0x1
#define _HLVDCON0_INTL_MASK                                 0x1
#define _HLVDCON0_INTH_POSN                                 0x1
#define _HLVDCON0_INTH_POSITION                             0x1
#define _HLVDCON0_INTH_SIZE                                 0x1
#define _HLVDCON0_INTH_LENGTH                               0x1
#define _HLVDCON0_INTH_MASK                                 0x2
#define _HLVDCON0_RDY_POSN                                  0x4
#define _HLVDCON0_RDY_POSITION                              0x4
#define _HLVDCON0_RDY_SIZE                                  0x1
#define _HLVDCON0_RDY_LENGTH                                0x1
#define _HLVDCON0_RDY_MASK                                  0x10
#define _HLVDCON0_OUT_POSN                                  0x5
#define _HLVDCON0_OUT_POSITION                              0x5
#define _HLVDCON0_OUT_SIZE                                  0x1
#define _HLVDCON0_OUT_LENGTH                                0x1
#define _HLVDCON0_OUT_MASK                                  0x20
#define _HLVDCON0_EN_POSN                                   0x7
#define _HLVDCON0_EN_POSITION                               0x7
#define _HLVDCON0_EN_SIZE                                   0x1
#define _HLVDCON0_EN_LENGTH                                 0x1
#define _HLVDCON0_EN_MASK                                   0x80
#define _HLVDCON0_HLVDINTL_POSN                             0x0
#define _HLVDCON0_HLVDINTL_POSITION                         0x0
#define _HLVDCON0_HLVDINTL_SIZE                             0x1
#define _HLVDCON0_HLVDINTL_LENGTH                           0x1
#define _HLVDCON0_HLVDINTL_MASK                             0x1
#define _HLVDCON0_HLVDINTH_POSN                             0x1
#define _HLVDCON0_HLVDINTH_POSITION                         0x1
#define _HLVDCON0_HLVDINTH_SIZE                             0x1
#define _HLVDCON0_HLVDINTH_LENGTH                           0x1
#define _HLVDCON0_HLVDINTH_MASK                             0x2
#define _HLVDCON0_HLVDRDY_POSN                              0x4
#define _HLVDCON0_HLVDRDY_POSITION                          0x4
#define _HLVDCON0_HLVDRDY_SIZE                              0x1
#define _HLVDCON0_HLVDRDY_LENGTH                            0x1
#define _HLVDCON0_HLVDRDY_MASK                              0x10
#define _HLVDCON0_HLVDOUT_POSN                              0x5
#define _HLVDCON0_HLVDOUT_POSITION                          0x5
#define _HLVDCON0_HLVDOUT_SIZE                              0x1
#define _HLVDCON0_HLVDOUT_LENGTH                            0x1
#define _HLVDCON0_HLVDOUT_MASK                              0x20
#define _HLVDCON0_HLVDEN_POSN                               0x7
#define _HLVDCON0_HLVDEN_POSITION                           0x7
#define _HLVDCON0_HLVDEN_SIZE                               0x1
#define _HLVDCON0_HLVDEN_LENGTH                             0x1
#define _HLVDCON0_HLVDEN_MASK                               0x80

// Register: HLVDCON1
#define HLVDCON1 HLVDCON1
extern volatile unsigned char           HLVDCON1            __at(0x04B);
#ifndef _LIB_BUILD
asm("HLVDCON1 equ 04Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEL                    :4;
    };
    struct {
        unsigned SEL0                   :1;
        unsigned SEL1                   :1;
        unsigned SEL2                   :1;
        unsigned SEL3                   :1;
    };
    struct {
        unsigned HLVDSEL0               :1;
        unsigned HLVDSEL1               :1;
        unsigned HLVDSEL2               :1;
        unsigned HLVDSEL3               :1;
    };
} HLVDCON1bits_t;
extern volatile HLVDCON1bits_t HLVDCON1bits __at(0x04B);
// bitfield macros
#define _HLVDCON1_SEL_POSN                                  0x0
#define _HLVDCON1_SEL_POSITION                              0x0
#define _HLVDCON1_SEL_SIZE                                  0x4
#define _HLVDCON1_SEL_LENGTH                                0x4
#define _HLVDCON1_SEL_MASK                                  0xF
#define _HLVDCON1_SEL0_POSN                                 0x0
#define _HLVDCON1_SEL0_POSITION                             0x0
#define _HLVDCON1_SEL0_SIZE                                 0x1
#define _HLVDCON1_SEL0_LENGTH                               0x1
#define _HLVDCON1_SEL0_MASK                                 0x1
#define _HLVDCON1_SEL1_POSN                                 0x1
#define _HLVDCON1_SEL1_POSITION                             0x1
#define _HLVDCON1_SEL1_SIZE                                 0x1
#define _HLVDCON1_SEL1_LENGTH                               0x1
#define _HLVDCON1_SEL1_MASK                                 0x2
#define _HLVDCON1_SEL2_POSN                                 0x2
#define _HLVDCON1_SEL2_POSITION                             0x2
#define _HLVDCON1_SEL2_SIZE                                 0x1
#define _HLVDCON1_SEL2_LENGTH                               0x1
#define _HLVDCON1_SEL2_MASK                                 0x4
#define _HLVDCON1_SEL3_POSN                                 0x3
#define _HLVDCON1_SEL3_POSITION                             0x3
#define _HLVDCON1_SEL3_SIZE                                 0x1
#define _HLVDCON1_SEL3_LENGTH                               0x1
#define _HLVDCON1_SEL3_MASK                                 0x8
#define _HLVDCON1_HLVDSEL0_POSN                             0x0
#define _HLVDCON1_HLVDSEL0_POSITION                         0x0
#define _HLVDCON1_HLVDSEL0_SIZE                             0x1
#define _HLVDCON1_HLVDSEL0_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL0_MASK                             0x1
#define _HLVDCON1_HLVDSEL1_POSN                             0x1
#define _HLVDCON1_HLVDSEL1_POSITION                         0x1
#define _HLVDCON1_HLVDSEL1_SIZE                             0x1
#define _HLVDCON1_HLVDSEL1_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL1_MASK                             0x2
#define _HLVDCON1_HLVDSEL2_POSN                             0x2
#define _HLVDCON1_HLVDSEL2_POSITION                         0x2
#define _HLVDCON1_HLVDSEL2_SIZE                             0x1
#define _HLVDCON1_HLVDSEL2_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL2_MASK                             0x4
#define _HLVDCON1_HLVDSEL3_POSN                             0x3
#define _HLVDCON1_HLVDSEL3_POSITION                         0x3
#define _HLVDCON1_HLVDSEL3_SIZE                             0x1
#define _HLVDCON1_HLVDSEL3_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL3_MASK                             0x8

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0x04C);
#ifndef _LIB_BUILD
asm("ZCDCON equ 04Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned SEN                    :1;
    };
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0x04C);
// bitfield macros
#define _ZCDCON_INTN_POSN                                   0x0
#define _ZCDCON_INTN_POSITION                               0x0
#define _ZCDCON_INTN_SIZE                                   0x1
#define _ZCDCON_INTN_LENGTH                                 0x1
#define _ZCDCON_INTN_MASK                                   0x1
#define _ZCDCON_INTP_POSN                                   0x1
#define _ZCDCON_INTP_POSITION                               0x1
#define _ZCDCON_INTP_SIZE                                   0x1
#define _ZCDCON_INTP_LENGTH                                 0x1
#define _ZCDCON_INTP_MASK                                   0x2
#define _ZCDCON_POL_POSN                                    0x4
#define _ZCDCON_POL_POSITION                                0x4
#define _ZCDCON_POL_SIZE                                    0x1
#define _ZCDCON_POL_LENGTH                                  0x1
#define _ZCDCON_POL_MASK                                    0x10
#define _ZCDCON_OUT_POSN                                    0x5
#define _ZCDCON_OUT_POSITION                                0x5
#define _ZCDCON_OUT_SIZE                                    0x1
#define _ZCDCON_OUT_LENGTH                                  0x1
#define _ZCDCON_OUT_MASK                                    0x20
#define _ZCDCON_SEN_POSN                                    0x7
#define _ZCDCON_SEN_POSITION                                0x7
#define _ZCDCON_SEN_SIZE                                    0x1
#define _ZCDCON_SEN_LENGTH                                  0x1
#define _ZCDCON_SEN_MASK                                    0x80
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x060);
#ifndef _LIB_BUILD
asm("PMD0 equ 060h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned                        :1;
        unsigned SCANMD                 :1;
        unsigned CRCMD                  :1;
        unsigned HLVDMD                 :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x060);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_CLKRMD_POSN                                   0x1
#define _PMD0_CLKRMD_POSITION                               0x1
#define _PMD0_CLKRMD_SIZE                                   0x1
#define _PMD0_CLKRMD_LENGTH                                 0x1
#define _PMD0_CLKRMD_MASK                                   0x2
#define _PMD0_SCANMD_POSN                                   0x3
#define _PMD0_SCANMD_POSITION                               0x3
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x4
#define _PMD0_CRCMD_POSITION                                0x4
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x10
#define _PMD0_HLVDMD_POSN                                   0x5
#define _PMD0_HLVDMD_POSITION                               0x5
#define _PMD0_HLVDMD_SIZE                                   0x1
#define _PMD0_HLVDMD_LENGTH                                 0x1
#define _PMD0_HLVDMD_MASK                                   0x20
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x061);
#ifndef _LIB_BUILD
asm("PMD1 equ 061h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned TMR5MD                 :1;
        unsigned TMR6MD                 :1;
        unsigned SMT1MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x061);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR3MD_POSN                                   0x3
#define _PMD1_TMR3MD_POSITION                               0x3
#define _PMD1_TMR3MD_SIZE                                   0x1
#define _PMD1_TMR3MD_LENGTH                                 0x1
#define _PMD1_TMR3MD_MASK                                   0x8
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10
#define _PMD1_TMR5MD_POSN                                   0x5
#define _PMD1_TMR5MD_POSITION                               0x5
#define _PMD1_TMR5MD_SIZE                                   0x1
#define _PMD1_TMR5MD_LENGTH                                 0x1
#define _PMD1_TMR5MD_MASK                                   0x20
#define _PMD1_TMR6MD_POSN                                   0x6
#define _PMD1_TMR6MD_POSITION                               0x6
#define _PMD1_TMR6MD_SIZE                                   0x1
#define _PMD1_TMR6MD_LENGTH                                 0x1
#define _PMD1_TMR6MD_MASK                                   0x40
#define _PMD1_SMT1MD_POSN                                   0x7
#define _PMD1_SMT1MD_POSITION                               0x7
#define _PMD1_SMT1MD_SIZE                                   0x1
#define _PMD1_SMT1MD_LENGTH                                 0x1
#define _PMD1_SMT1MD_MASK                                   0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x063);
#ifndef _LIB_BUILD
asm("PMD3 equ 063h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CM1MD                  :1;
        unsigned CM2MD                  :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DAC1MD                 :1;
        unsigned ACTMD                  :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x063);
// bitfield macros
#define _PMD3_ZCDMD_POSN                                    0x0
#define _PMD3_ZCDMD_POSITION                                0x0
#define _PMD3_ZCDMD_SIZE                                    0x1
#define _PMD3_ZCDMD_LENGTH                                  0x1
#define _PMD3_ZCDMD_MASK                                    0x1
#define _PMD3_CM1MD_POSN                                    0x1
#define _PMD3_CM1MD_POSITION                                0x1
#define _PMD3_CM1MD_SIZE                                    0x1
#define _PMD3_CM1MD_LENGTH                                  0x1
#define _PMD3_CM1MD_MASK                                    0x2
#define _PMD3_CM2MD_POSN                                    0x2
#define _PMD3_CM2MD_POSITION                                0x2
#define _PMD3_CM2MD_SIZE                                    0x1
#define _PMD3_CM2MD_LENGTH                                  0x1
#define _PMD3_CM2MD_MASK                                    0x4
#define _PMD3_ADCMD_POSN                                    0x5
#define _PMD3_ADCMD_POSITION                                0x5
#define _PMD3_ADCMD_SIZE                                    0x1
#define _PMD3_ADCMD_LENGTH                                  0x1
#define _PMD3_ADCMD_MASK                                    0x20
#define _PMD3_DAC1MD_POSN                                   0x6
#define _PMD3_DAC1MD_POSITION                               0x6
#define _PMD3_DAC1MD_SIZE                                   0x1
#define _PMD3_DAC1MD_LENGTH                                 0x1
#define _PMD3_DAC1MD_MASK                                   0x40
#define _PMD3_ACTMD_POSN                                    0x7
#define _PMD3_ACTMD_POSITION                                0x7
#define _PMD3_ACTMD_SIZE                                    0x1
#define _PMD3_ACTMD_LENGTH                                  0x1
#define _PMD3_ACTMD_MASK                                    0x80

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x064);
#ifndef _LIB_BUILD
asm("PMD4 equ 064h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCO1MD                 :1;
        unsigned NCO2MD                 :1;
        unsigned NCO3MD                 :1;
        unsigned DSM1MD                 :1;
        unsigned CWG1MD                 :1;
        unsigned CWG2MD                 :1;
        unsigned CWG3MD                 :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x064);
// bitfield macros
#define _PMD4_NCO1MD_POSN                                   0x0
#define _PMD4_NCO1MD_POSITION                               0x0
#define _PMD4_NCO1MD_SIZE                                   0x1
#define _PMD4_NCO1MD_LENGTH                                 0x1
#define _PMD4_NCO1MD_MASK                                   0x1
#define _PMD4_NCO2MD_POSN                                   0x1
#define _PMD4_NCO2MD_POSITION                               0x1
#define _PMD4_NCO2MD_SIZE                                   0x1
#define _PMD4_NCO2MD_LENGTH                                 0x1
#define _PMD4_NCO2MD_MASK                                   0x2
#define _PMD4_NCO3MD_POSN                                   0x2
#define _PMD4_NCO3MD_POSITION                               0x2
#define _PMD4_NCO3MD_SIZE                                   0x1
#define _PMD4_NCO3MD_LENGTH                                 0x1
#define _PMD4_NCO3MD_MASK                                   0x4
#define _PMD4_DSM1MD_POSN                                   0x3
#define _PMD4_DSM1MD_POSITION                               0x3
#define _PMD4_DSM1MD_SIZE                                   0x1
#define _PMD4_DSM1MD_LENGTH                                 0x1
#define _PMD4_DSM1MD_MASK                                   0x8
#define _PMD4_CWG1MD_POSN                                   0x4
#define _PMD4_CWG1MD_POSITION                               0x4
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x10
#define _PMD4_CWG2MD_POSN                                   0x5
#define _PMD4_CWG2MD_POSITION                               0x5
#define _PMD4_CWG2MD_SIZE                                   0x1
#define _PMD4_CWG2MD_LENGTH                                 0x1
#define _PMD4_CWG2MD_MASK                                   0x20
#define _PMD4_CWG3MD_POSN                                   0x6
#define _PMD4_CWG3MD_POSITION                               0x6
#define _PMD4_CWG3MD_SIZE                                   0x1
#define _PMD4_CWG3MD_LENGTH                                 0x1
#define _PMD4_CWG3MD_MASK                                   0x40

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x065);
#ifndef _LIB_BUILD
asm("PMD5 equ 065h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned CCP3MD                 :1;
        unsigned                        :1;
        unsigned PWM1MD                 :1;
        unsigned PWM2MD                 :1;
        unsigned PWM3MD                 :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x065);
// bitfield macros
#define _PMD5_CCP1MD_POSN                                   0x0
#define _PMD5_CCP1MD_POSITION                               0x0
#define _PMD5_CCP1MD_SIZE                                   0x1
#define _PMD5_CCP1MD_LENGTH                                 0x1
#define _PMD5_CCP1MD_MASK                                   0x1
#define _PMD5_CCP2MD_POSN                                   0x1
#define _PMD5_CCP2MD_POSITION                               0x1
#define _PMD5_CCP2MD_SIZE                                   0x1
#define _PMD5_CCP2MD_LENGTH                                 0x1
#define _PMD5_CCP2MD_MASK                                   0x2
#define _PMD5_CCP3MD_POSN                                   0x2
#define _PMD5_CCP3MD_POSITION                               0x2
#define _PMD5_CCP3MD_SIZE                                   0x1
#define _PMD5_CCP3MD_LENGTH                                 0x1
#define _PMD5_CCP3MD_MASK                                   0x4
#define _PMD5_PWM1MD_POSN                                   0x4
#define _PMD5_PWM1MD_POSITION                               0x4
#define _PMD5_PWM1MD_SIZE                                   0x1
#define _PMD5_PWM1MD_LENGTH                                 0x1
#define _PMD5_PWM1MD_MASK                                   0x10
#define _PMD5_PWM2MD_POSN                                   0x5
#define _PMD5_PWM2MD_POSITION                               0x5
#define _PMD5_PWM2MD_SIZE                                   0x1
#define _PMD5_PWM2MD_LENGTH                                 0x1
#define _PMD5_PWM2MD_MASK                                   0x20
#define _PMD5_PWM3MD_POSN                                   0x6
#define _PMD5_PWM3MD_POSITION                               0x6
#define _PMD5_PWM3MD_SIZE                                   0x1
#define _PMD5_PWM3MD_LENGTH                                 0x1
#define _PMD5_PWM3MD_MASK                                   0x40

// Register: PMD6
#define PMD6 PMD6
extern volatile unsigned char           PMD6                __at(0x066);
#ifndef _LIB_BUILD
asm("PMD6 equ 066h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1MD                 :1;
        unsigned SPI1MD                 :1;
        unsigned SPI2MD                 :1;
        unsigned U1MD                   :1;
        unsigned U2MD                   :1;
        unsigned U3MD                   :1;
        unsigned U4MD                   :1;
        unsigned U5MD                   :1;
    };
} PMD6bits_t;
extern volatile PMD6bits_t PMD6bits __at(0x066);
// bitfield macros
#define _PMD6_I2C1MD_POSN                                   0x0
#define _PMD6_I2C1MD_POSITION                               0x0
#define _PMD6_I2C1MD_SIZE                                   0x1
#define _PMD6_I2C1MD_LENGTH                                 0x1
#define _PMD6_I2C1MD_MASK                                   0x1
#define _PMD6_SPI1MD_POSN                                   0x1
#define _PMD6_SPI1MD_POSITION                               0x1
#define _PMD6_SPI1MD_SIZE                                   0x1
#define _PMD6_SPI1MD_LENGTH                                 0x1
#define _PMD6_SPI1MD_MASK                                   0x2
#define _PMD6_SPI2MD_POSN                                   0x2
#define _PMD6_SPI2MD_POSITION                               0x2
#define _PMD6_SPI2MD_SIZE                                   0x1
#define _PMD6_SPI2MD_LENGTH                                 0x1
#define _PMD6_SPI2MD_MASK                                   0x4
#define _PMD6_U1MD_POSN                                     0x3
#define _PMD6_U1MD_POSITION                                 0x3
#define _PMD6_U1MD_SIZE                                     0x1
#define _PMD6_U1MD_LENGTH                                   0x1
#define _PMD6_U1MD_MASK                                     0x8
#define _PMD6_U2MD_POSN                                     0x4
#define _PMD6_U2MD_POSITION                                 0x4
#define _PMD6_U2MD_SIZE                                     0x1
#define _PMD6_U2MD_LENGTH                                   0x1
#define _PMD6_U2MD_MASK                                     0x10
#define _PMD6_U3MD_POSN                                     0x5
#define _PMD6_U3MD_POSITION                                 0x5
#define _PMD6_U3MD_SIZE                                     0x1
#define _PMD6_U3MD_LENGTH                                   0x1
#define _PMD6_U3MD_MASK                                     0x20
#define _PMD6_U4MD_POSN                                     0x6
#define _PMD6_U4MD_POSITION                                 0x6
#define _PMD6_U4MD_SIZE                                     0x1
#define _PMD6_U4MD_LENGTH                                   0x1
#define _PMD6_U4MD_MASK                                     0x40
#define _PMD6_U5MD_POSN                                     0x7
#define _PMD6_U5MD_POSITION                                 0x7
#define _PMD6_U5MD_SIZE                                     0x1
#define _PMD6_U5MD_LENGTH                                   0x1
#define _PMD6_U5MD_MASK                                     0x80

// Register: PMD7
#define PMD7 PMD7
extern volatile unsigned char           PMD7                __at(0x067);
#ifndef _LIB_BUILD
asm("PMD7 equ 067h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
        unsigned CLC5MD                 :1;
        unsigned CLC6MD                 :1;
        unsigned CLC7MD                 :1;
        unsigned CLC8MD                 :1;
    };
} PMD7bits_t;
extern volatile PMD7bits_t PMD7bits __at(0x067);
// bitfield macros
#define _PMD7_CLC1MD_POSN                                   0x0
#define _PMD7_CLC1MD_POSITION                               0x0
#define _PMD7_CLC1MD_SIZE                                   0x1
#define _PMD7_CLC1MD_LENGTH                                 0x1
#define _PMD7_CLC1MD_MASK                                   0x1
#define _PMD7_CLC2MD_POSN                                   0x1
#define _PMD7_CLC2MD_POSITION                               0x1
#define _PMD7_CLC2MD_SIZE                                   0x1
#define _PMD7_CLC2MD_LENGTH                                 0x1
#define _PMD7_CLC2MD_MASK                                   0x2
#define _PMD7_CLC3MD_POSN                                   0x2
#define _PMD7_CLC3MD_POSITION                               0x2
#define _PMD7_CLC3MD_SIZE                                   0x1
#define _PMD7_CLC3MD_LENGTH                                 0x1
#define _PMD7_CLC3MD_MASK                                   0x4
#define _PMD7_CLC4MD_POSN                                   0x3
#define _PMD7_CLC4MD_POSITION                               0x3
#define _PMD7_CLC4MD_SIZE                                   0x1
#define _PMD7_CLC4MD_LENGTH                                 0x1
#define _PMD7_CLC4MD_MASK                                   0x8
#define _PMD7_CLC5MD_POSN                                   0x4
#define _PMD7_CLC5MD_POSITION                               0x4
#define _PMD7_CLC5MD_SIZE                                   0x1
#define _PMD7_CLC5MD_LENGTH                                 0x1
#define _PMD7_CLC5MD_MASK                                   0x10
#define _PMD7_CLC6MD_POSN                                   0x5
#define _PMD7_CLC6MD_POSITION                               0x5
#define _PMD7_CLC6MD_SIZE                                   0x1
#define _PMD7_CLC6MD_LENGTH                                 0x1
#define _PMD7_CLC6MD_MASK                                   0x20
#define _PMD7_CLC7MD_POSN                                   0x6
#define _PMD7_CLC7MD_POSITION                               0x6
#define _PMD7_CLC7MD_SIZE                                   0x1
#define _PMD7_CLC7MD_LENGTH                                 0x1
#define _PMD7_CLC7MD_MASK                                   0x40
#define _PMD7_CLC8MD_POSN                                   0x7
#define _PMD7_CLC8MD_POSITION                               0x7
#define _PMD7_CLC8MD_SIZE                                   0x1
#define _PMD7_CLC8MD_LENGTH                                 0x1
#define _PMD7_CLC8MD_MASK                                   0x80

// Register: PMD8
#define PMD8 PMD8
extern volatile unsigned char           PMD8                __at(0x068);
#ifndef _LIB_BUILD
asm("PMD8 equ 068h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1MD                 :1;
        unsigned DMA2MD                 :1;
        unsigned DMA3MD                 :1;
        unsigned DMA4MD                 :1;
        unsigned DMA5MD                 :1;
        unsigned DMA6MD                 :1;
    };
} PMD8bits_t;
extern volatile PMD8bits_t PMD8bits __at(0x068);
// bitfield macros
#define _PMD8_DMA1MD_POSN                                   0x0
#define _PMD8_DMA1MD_POSITION                               0x0
#define _PMD8_DMA1MD_SIZE                                   0x1
#define _PMD8_DMA1MD_LENGTH                                 0x1
#define _PMD8_DMA1MD_MASK                                   0x1
#define _PMD8_DMA2MD_POSN                                   0x1
#define _PMD8_DMA2MD_POSITION                               0x1
#define _PMD8_DMA2MD_SIZE                                   0x1
#define _PMD8_DMA2MD_LENGTH                                 0x1
#define _PMD8_DMA2MD_MASK                                   0x2
#define _PMD8_DMA3MD_POSN                                   0x2
#define _PMD8_DMA3MD_POSITION                               0x2
#define _PMD8_DMA3MD_SIZE                                   0x1
#define _PMD8_DMA3MD_LENGTH                                 0x1
#define _PMD8_DMA3MD_MASK                                   0x4
#define _PMD8_DMA4MD_POSN                                   0x3
#define _PMD8_DMA4MD_POSITION                               0x3
#define _PMD8_DMA4MD_SIZE                                   0x1
#define _PMD8_DMA4MD_LENGTH                                 0x1
#define _PMD8_DMA4MD_MASK                                   0x8
#define _PMD8_DMA5MD_POSN                                   0x4
#define _PMD8_DMA5MD_POSITION                               0x4
#define _PMD8_DMA5MD_SIZE                                   0x1
#define _PMD8_DMA5MD_LENGTH                                 0x1
#define _PMD8_DMA5MD_MASK                                   0x10
#define _PMD8_DMA6MD_POSN                                   0x5
#define _PMD8_DMA6MD_POSITION                               0x5
#define _PMD8_DMA6MD_SIZE                                   0x1
#define _PMD8_DMA6MD_LENGTH                                 0x1
#define _PMD8_DMA6MD_MASK                                   0x20

// Register: MD1CON0
#define MD1CON0 MD1CON0
extern volatile unsigned char           MD1CON0             __at(0x06A);
#ifndef _LIB_BUILD
asm("MD1CON0 equ 06Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIT                    :1;
        unsigned                        :3;
        unsigned OPOL                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MD1BIT                 :1;
        unsigned                        :3;
        unsigned MD1OPOL                :1;
        unsigned MD1OUT                 :1;
        unsigned                        :1;
        unsigned MD1EN                  :1;
    };
} MD1CON0bits_t;
extern volatile MD1CON0bits_t MD1CON0bits __at(0x06A);
// bitfield macros
#define _MD1CON0_BIT_POSN                                   0x0
#define _MD1CON0_BIT_POSITION                               0x0
#define _MD1CON0_BIT_SIZE                                   0x1
#define _MD1CON0_BIT_LENGTH                                 0x1
#define _MD1CON0_BIT_MASK                                   0x1
#define _MD1CON0_OPOL_POSN                                  0x4
#define _MD1CON0_OPOL_POSITION                              0x4
#define _MD1CON0_OPOL_SIZE                                  0x1
#define _MD1CON0_OPOL_LENGTH                                0x1
#define _MD1CON0_OPOL_MASK                                  0x10
#define _MD1CON0_OUT_POSN                                   0x5
#define _MD1CON0_OUT_POSITION                               0x5
#define _MD1CON0_OUT_SIZE                                   0x1
#define _MD1CON0_OUT_LENGTH                                 0x1
#define _MD1CON0_OUT_MASK                                   0x20
#define _MD1CON0_EN_POSN                                    0x7
#define _MD1CON0_EN_POSITION                                0x7
#define _MD1CON0_EN_SIZE                                    0x1
#define _MD1CON0_EN_LENGTH                                  0x1
#define _MD1CON0_EN_MASK                                    0x80
#define _MD1CON0_MD1BIT_POSN                                0x0
#define _MD1CON0_MD1BIT_POSITION                            0x0
#define _MD1CON0_MD1BIT_SIZE                                0x1
#define _MD1CON0_MD1BIT_LENGTH                              0x1
#define _MD1CON0_MD1BIT_MASK                                0x1
#define _MD1CON0_MD1OPOL_POSN                               0x4
#define _MD1CON0_MD1OPOL_POSITION                           0x4
#define _MD1CON0_MD1OPOL_SIZE                               0x1
#define _MD1CON0_MD1OPOL_LENGTH                             0x1
#define _MD1CON0_MD1OPOL_MASK                               0x10
#define _MD1CON0_MD1OUT_POSN                                0x5
#define _MD1CON0_MD1OUT_POSITION                            0x5
#define _MD1CON0_MD1OUT_SIZE                                0x1
#define _MD1CON0_MD1OUT_LENGTH                              0x1
#define _MD1CON0_MD1OUT_MASK                                0x20
#define _MD1CON0_MD1EN_POSN                                 0x7
#define _MD1CON0_MD1EN_POSITION                             0x7
#define _MD1CON0_MD1EN_SIZE                                 0x1
#define _MD1CON0_MD1EN_LENGTH                               0x1
#define _MD1CON0_MD1EN_MASK                                 0x80

// Register: MD1CON1
#define MD1CON1 MD1CON1
extern volatile unsigned char           MD1CON1             __at(0x06B);
#ifndef _LIB_BUILD
asm("MD1CON1 equ 06Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLSYNC                 :1;
        unsigned CLPOL                  :1;
        unsigned                        :2;
        unsigned CHSYNC                 :1;
        unsigned CHPOL                  :1;
    };
    struct {
        unsigned MD1CLSYNC              :1;
        unsigned MD1CLPOL               :1;
        unsigned                        :2;
        unsigned MD1CHSYNC              :1;
        unsigned MD1CHPOL               :1;
    };
} MD1CON1bits_t;
extern volatile MD1CON1bits_t MD1CON1bits __at(0x06B);
// bitfield macros
#define _MD1CON1_CLSYNC_POSN                                0x0
#define _MD1CON1_CLSYNC_POSITION                            0x0
#define _MD1CON1_CLSYNC_SIZE                                0x1
#define _MD1CON1_CLSYNC_LENGTH                              0x1
#define _MD1CON1_CLSYNC_MASK                                0x1
#define _MD1CON1_CLPOL_POSN                                 0x1
#define _MD1CON1_CLPOL_POSITION                             0x1
#define _MD1CON1_CLPOL_SIZE                                 0x1
#define _MD1CON1_CLPOL_LENGTH                               0x1
#define _MD1CON1_CLPOL_MASK                                 0x2
#define _MD1CON1_CHSYNC_POSN                                0x4
#define _MD1CON1_CHSYNC_POSITION                            0x4
#define _MD1CON1_CHSYNC_SIZE                                0x1
#define _MD1CON1_CHSYNC_LENGTH                              0x1
#define _MD1CON1_CHSYNC_MASK                                0x10
#define _MD1CON1_CHPOL_POSN                                 0x5
#define _MD1CON1_CHPOL_POSITION                             0x5
#define _MD1CON1_CHPOL_SIZE                                 0x1
#define _MD1CON1_CHPOL_LENGTH                               0x1
#define _MD1CON1_CHPOL_MASK                                 0x20
#define _MD1CON1_MD1CLSYNC_POSN                             0x0
#define _MD1CON1_MD1CLSYNC_POSITION                         0x0
#define _MD1CON1_MD1CLSYNC_SIZE                             0x1
#define _MD1CON1_MD1CLSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CLSYNC_MASK                             0x1
#define _MD1CON1_MD1CLPOL_POSN                              0x1
#define _MD1CON1_MD1CLPOL_POSITION                          0x1
#define _MD1CON1_MD1CLPOL_SIZE                              0x1
#define _MD1CON1_MD1CLPOL_LENGTH                            0x1
#define _MD1CON1_MD1CLPOL_MASK                              0x2
#define _MD1CON1_MD1CHSYNC_POSN                             0x4
#define _MD1CON1_MD1CHSYNC_POSITION                         0x4
#define _MD1CON1_MD1CHSYNC_SIZE                             0x1
#define _MD1CON1_MD1CHSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CHSYNC_MASK                             0x10
#define _MD1CON1_MD1CHPOL_POSN                              0x5
#define _MD1CON1_MD1CHPOL_POSITION                          0x5
#define _MD1CON1_MD1CHPOL_SIZE                              0x1
#define _MD1CON1_MD1CHPOL_LENGTH                            0x1
#define _MD1CON1_MD1CHPOL_MASK                              0x20

// Register: MD1SRC
#define MD1SRC MD1SRC
extern volatile unsigned char           MD1SRC              __at(0x06C);
#ifndef _LIB_BUILD
asm("MD1SRC equ 06Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MS                     :8;
    };
    struct {
        unsigned MS0                    :1;
        unsigned MS1                    :1;
        unsigned MS2                    :1;
        unsigned MS3                    :1;
        unsigned MS4                    :1;
        unsigned MS5                    :1;
    };
    struct {
        unsigned MD1MS                  :8;
    };
    struct {
        unsigned MD1MS0                 :1;
        unsigned MD1MS1                 :1;
        unsigned MD1MS2                 :1;
        unsigned MD1MS3                 :1;
        unsigned MD1MS4                 :1;
        unsigned MD1MS5                 :1;
    };
} MD1SRCbits_t;
extern volatile MD1SRCbits_t MD1SRCbits __at(0x06C);
// bitfield macros
#define _MD1SRC_MS_POSN                                     0x0
#define _MD1SRC_MS_POSITION                                 0x0
#define _MD1SRC_MS_SIZE                                     0x8
#define _MD1SRC_MS_LENGTH                                   0x8
#define _MD1SRC_MS_MASK                                     0xFF
#define _MD1SRC_MS0_POSN                                    0x0
#define _MD1SRC_MS0_POSITION                                0x0
#define _MD1SRC_MS0_SIZE                                    0x1
#define _MD1SRC_MS0_LENGTH                                  0x1
#define _MD1SRC_MS0_MASK                                    0x1
#define _MD1SRC_MS1_POSN                                    0x1
#define _MD1SRC_MS1_POSITION                                0x1
#define _MD1SRC_MS1_SIZE                                    0x1
#define _MD1SRC_MS1_LENGTH                                  0x1
#define _MD1SRC_MS1_MASK                                    0x2
#define _MD1SRC_MS2_POSN                                    0x2
#define _MD1SRC_MS2_POSITION                                0x2
#define _MD1SRC_MS2_SIZE                                    0x1
#define _MD1SRC_MS2_LENGTH                                  0x1
#define _MD1SRC_MS2_MASK                                    0x4
#define _MD1SRC_MS3_POSN                                    0x3
#define _MD1SRC_MS3_POSITION                                0x3
#define _MD1SRC_MS3_SIZE                                    0x1
#define _MD1SRC_MS3_LENGTH                                  0x1
#define _MD1SRC_MS3_MASK                                    0x8
#define _MD1SRC_MS4_POSN                                    0x4
#define _MD1SRC_MS4_POSITION                                0x4
#define _MD1SRC_MS4_SIZE                                    0x1
#define _MD1SRC_MS4_LENGTH                                  0x1
#define _MD1SRC_MS4_MASK                                    0x10
#define _MD1SRC_MS5_POSN                                    0x5
#define _MD1SRC_MS5_POSITION                                0x5
#define _MD1SRC_MS5_SIZE                                    0x1
#define _MD1SRC_MS5_LENGTH                                  0x1
#define _MD1SRC_MS5_MASK                                    0x20
#define _MD1SRC_MD1MS_POSN                                  0x0
#define _MD1SRC_MD1MS_POSITION                              0x0
#define _MD1SRC_MD1MS_SIZE                                  0x8
#define _MD1SRC_MD1MS_LENGTH                                0x8
#define _MD1SRC_MD1MS_MASK                                  0xFF
#define _MD1SRC_MD1MS0_POSN                                 0x0
#define _MD1SRC_MD1MS0_POSITION                             0x0
#define _MD1SRC_MD1MS0_SIZE                                 0x1
#define _MD1SRC_MD1MS0_LENGTH                               0x1
#define _MD1SRC_MD1MS0_MASK                                 0x1
#define _MD1SRC_MD1MS1_POSN                                 0x1
#define _MD1SRC_MD1MS1_POSITION                             0x1
#define _MD1SRC_MD1MS1_SIZE                                 0x1
#define _MD1SRC_MD1MS1_LENGTH                               0x1
#define _MD1SRC_MD1MS1_MASK                                 0x2
#define _MD1SRC_MD1MS2_POSN                                 0x2
#define _MD1SRC_MD1MS2_POSITION                             0x2
#define _MD1SRC_MD1MS2_SIZE                                 0x1
#define _MD1SRC_MD1MS2_LENGTH                               0x1
#define _MD1SRC_MD1MS2_MASK                                 0x4
#define _MD1SRC_MD1MS3_POSN                                 0x3
#define _MD1SRC_MD1MS3_POSITION                             0x3
#define _MD1SRC_MD1MS3_SIZE                                 0x1
#define _MD1SRC_MD1MS3_LENGTH                               0x1
#define _MD1SRC_MD1MS3_MASK                                 0x8
#define _MD1SRC_MD1MS4_POSN                                 0x4
#define _MD1SRC_MD1MS4_POSITION                             0x4
#define _MD1SRC_MD1MS4_SIZE                                 0x1
#define _MD1SRC_MD1MS4_LENGTH                               0x1
#define _MD1SRC_MD1MS4_MASK                                 0x10
#define _MD1SRC_MD1MS5_POSN                                 0x5
#define _MD1SRC_MD1MS5_POSITION                             0x5
#define _MD1SRC_MD1MS5_SIZE                                 0x1
#define _MD1SRC_MD1MS5_LENGTH                               0x1
#define _MD1SRC_MD1MS5_MASK                                 0x20

// Register: MD1CARL
#define MD1CARL MD1CARL
extern volatile unsigned char           MD1CARL             __at(0x06D);
#ifndef _LIB_BUILD
asm("MD1CARL equ 06Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CL                     :8;
    };
    struct {
        unsigned CL0                    :1;
        unsigned CL1                    :1;
        unsigned CL2                    :1;
        unsigned CL3                    :1;
        unsigned CL4                    :1;
    };
    struct {
        unsigned MD1CL                  :8;
    };
    struct {
        unsigned MD1CL0                 :1;
        unsigned MD1CL1                 :1;
        unsigned MD1CL2                 :1;
        unsigned MD1CL3                 :1;
        unsigned MD1CL4                 :1;
    };
} MD1CARLbits_t;
extern volatile MD1CARLbits_t MD1CARLbits __at(0x06D);
// bitfield macros
#define _MD1CARL_CL_POSN                                    0x0
#define _MD1CARL_CL_POSITION                                0x0
#define _MD1CARL_CL_SIZE                                    0x8
#define _MD1CARL_CL_LENGTH                                  0x8
#define _MD1CARL_CL_MASK                                    0xFF
#define _MD1CARL_CL0_POSN                                   0x0
#define _MD1CARL_CL0_POSITION                               0x0
#define _MD1CARL_CL0_SIZE                                   0x1
#define _MD1CARL_CL0_LENGTH                                 0x1
#define _MD1CARL_CL0_MASK                                   0x1
#define _MD1CARL_CL1_POSN                                   0x1
#define _MD1CARL_CL1_POSITION                               0x1
#define _MD1CARL_CL1_SIZE                                   0x1
#define _MD1CARL_CL1_LENGTH                                 0x1
#define _MD1CARL_CL1_MASK                                   0x2
#define _MD1CARL_CL2_POSN                                   0x2
#define _MD1CARL_CL2_POSITION                               0x2
#define _MD1CARL_CL2_SIZE                                   0x1
#define _MD1CARL_CL2_LENGTH                                 0x1
#define _MD1CARL_CL2_MASK                                   0x4
#define _MD1CARL_CL3_POSN                                   0x3
#define _MD1CARL_CL3_POSITION                               0x3
#define _MD1CARL_CL3_SIZE                                   0x1
#define _MD1CARL_CL3_LENGTH                                 0x1
#define _MD1CARL_CL3_MASK                                   0x8
#define _MD1CARL_CL4_POSN                                   0x4
#define _MD1CARL_CL4_POSITION                               0x4
#define _MD1CARL_CL4_SIZE                                   0x1
#define _MD1CARL_CL4_LENGTH                                 0x1
#define _MD1CARL_CL4_MASK                                   0x10
#define _MD1CARL_MD1CL_POSN                                 0x0
#define _MD1CARL_MD1CL_POSITION                             0x0
#define _MD1CARL_MD1CL_SIZE                                 0x8
#define _MD1CARL_MD1CL_LENGTH                               0x8
#define _MD1CARL_MD1CL_MASK                                 0xFF
#define _MD1CARL_MD1CL0_POSN                                0x0
#define _MD1CARL_MD1CL0_POSITION                            0x0
#define _MD1CARL_MD1CL0_SIZE                                0x1
#define _MD1CARL_MD1CL0_LENGTH                              0x1
#define _MD1CARL_MD1CL0_MASK                                0x1
#define _MD1CARL_MD1CL1_POSN                                0x1
#define _MD1CARL_MD1CL1_POSITION                            0x1
#define _MD1CARL_MD1CL1_SIZE                                0x1
#define _MD1CARL_MD1CL1_LENGTH                              0x1
#define _MD1CARL_MD1CL1_MASK                                0x2
#define _MD1CARL_MD1CL2_POSN                                0x2
#define _MD1CARL_MD1CL2_POSITION                            0x2
#define _MD1CARL_MD1CL2_SIZE                                0x1
#define _MD1CARL_MD1CL2_LENGTH                              0x1
#define _MD1CARL_MD1CL2_MASK                                0x4
#define _MD1CARL_MD1CL3_POSN                                0x3
#define _MD1CARL_MD1CL3_POSITION                            0x3
#define _MD1CARL_MD1CL3_SIZE                                0x1
#define _MD1CARL_MD1CL3_LENGTH                              0x1
#define _MD1CARL_MD1CL3_MASK                                0x8
#define _MD1CARL_MD1CL4_POSN                                0x4
#define _MD1CARL_MD1CL4_POSITION                            0x4
#define _MD1CARL_MD1CL4_SIZE                                0x1
#define _MD1CARL_MD1CL4_LENGTH                              0x1
#define _MD1CARL_MD1CL4_MASK                                0x10

// Register: MD1CARH
#define MD1CARH MD1CARH
extern volatile unsigned char           MD1CARH             __at(0x06E);
#ifndef _LIB_BUILD
asm("MD1CARH equ 06Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH                     :8;
    };
    struct {
        unsigned CH0                    :1;
        unsigned CH1                    :1;
        unsigned CH2                    :1;
        unsigned CH3                    :1;
        unsigned CH4                    :1;
        unsigned CH5                    :1;
        unsigned CH6                    :1;
        unsigned CH7                    :1;
    };
    struct {
        unsigned MD1CH                  :8;
    };
    struct {
        unsigned MD1CH0                 :1;
        unsigned MD1CH1                 :1;
        unsigned MD1CH2                 :1;
        unsigned MD1CH3                 :1;
        unsigned MD1CH4                 :1;
        unsigned MD1CH5                 :1;
        unsigned MD1CH6                 :1;
        unsigned MD1CH7                 :1;
    };
} MD1CARHbits_t;
extern volatile MD1CARHbits_t MD1CARHbits __at(0x06E);
// bitfield macros
#define _MD1CARH_CH_POSN                                    0x0
#define _MD1CARH_CH_POSITION                                0x0
#define _MD1CARH_CH_SIZE                                    0x8
#define _MD1CARH_CH_LENGTH                                  0x8
#define _MD1CARH_CH_MASK                                    0xFF
#define _MD1CARH_CH0_POSN                                   0x0
#define _MD1CARH_CH0_POSITION                               0x0
#define _MD1CARH_CH0_SIZE                                   0x1
#define _MD1CARH_CH0_LENGTH                                 0x1
#define _MD1CARH_CH0_MASK                                   0x1
#define _MD1CARH_CH1_POSN                                   0x1
#define _MD1CARH_CH1_POSITION                               0x1
#define _MD1CARH_CH1_SIZE                                   0x1
#define _MD1CARH_CH1_LENGTH                                 0x1
#define _MD1CARH_CH1_MASK                                   0x2
#define _MD1CARH_CH2_POSN                                   0x2
#define _MD1CARH_CH2_POSITION                               0x2
#define _MD1CARH_CH2_SIZE                                   0x1
#define _MD1CARH_CH2_LENGTH                                 0x1
#define _MD1CARH_CH2_MASK                                   0x4
#define _MD1CARH_CH3_POSN                                   0x3
#define _MD1CARH_CH3_POSITION                               0x3
#define _MD1CARH_CH3_SIZE                                   0x1
#define _MD1CARH_CH3_LENGTH                                 0x1
#define _MD1CARH_CH3_MASK                                   0x8
#define _MD1CARH_CH4_POSN                                   0x4
#define _MD1CARH_CH4_POSITION                               0x4
#define _MD1CARH_CH4_SIZE                                   0x1
#define _MD1CARH_CH4_LENGTH                                 0x1
#define _MD1CARH_CH4_MASK                                   0x10
#define _MD1CARH_CH5_POSN                                   0x5
#define _MD1CARH_CH5_POSITION                               0x5
#define _MD1CARH_CH5_SIZE                                   0x1
#define _MD1CARH_CH5_LENGTH                                 0x1
#define _MD1CARH_CH5_MASK                                   0x20
#define _MD1CARH_CH6_POSN                                   0x6
#define _MD1CARH_CH6_POSITION                               0x6
#define _MD1CARH_CH6_SIZE                                   0x1
#define _MD1CARH_CH6_LENGTH                                 0x1
#define _MD1CARH_CH6_MASK                                   0x40
#define _MD1CARH_CH7_POSN                                   0x7
#define _MD1CARH_CH7_POSITION                               0x7
#define _MD1CARH_CH7_SIZE                                   0x1
#define _MD1CARH_CH7_LENGTH                                 0x1
#define _MD1CARH_CH7_MASK                                   0x80
#define _MD1CARH_MD1CH_POSN                                 0x0
#define _MD1CARH_MD1CH_POSITION                             0x0
#define _MD1CARH_MD1CH_SIZE                                 0x8
#define _MD1CARH_MD1CH_LENGTH                               0x8
#define _MD1CARH_MD1CH_MASK                                 0xFF
#define _MD1CARH_MD1CH0_POSN                                0x0
#define _MD1CARH_MD1CH0_POSITION                            0x0
#define _MD1CARH_MD1CH0_SIZE                                0x1
#define _MD1CARH_MD1CH0_LENGTH                              0x1
#define _MD1CARH_MD1CH0_MASK                                0x1
#define _MD1CARH_MD1CH1_POSN                                0x1
#define _MD1CARH_MD1CH1_POSITION                            0x1
#define _MD1CARH_MD1CH1_SIZE                                0x1
#define _MD1CARH_MD1CH1_LENGTH                              0x1
#define _MD1CARH_MD1CH1_MASK                                0x2
#define _MD1CARH_MD1CH2_POSN                                0x2
#define _MD1CARH_MD1CH2_POSITION                            0x2
#define _MD1CARH_MD1CH2_SIZE                                0x1
#define _MD1CARH_MD1CH2_LENGTH                              0x1
#define _MD1CARH_MD1CH2_MASK                                0x4
#define _MD1CARH_MD1CH3_POSN                                0x3
#define _MD1CARH_MD1CH3_POSITION                            0x3
#define _MD1CARH_MD1CH3_SIZE                                0x1
#define _MD1CARH_MD1CH3_LENGTH                              0x1
#define _MD1CARH_MD1CH3_MASK                                0x8
#define _MD1CARH_MD1CH4_POSN                                0x4
#define _MD1CARH_MD1CH4_POSITION                            0x4
#define _MD1CARH_MD1CH4_SIZE                                0x1
#define _MD1CARH_MD1CH4_LENGTH                              0x1
#define _MD1CARH_MD1CH4_MASK                                0x10
#define _MD1CARH_MD1CH5_POSN                                0x5
#define _MD1CARH_MD1CH5_POSITION                            0x5
#define _MD1CARH_MD1CH5_SIZE                                0x1
#define _MD1CARH_MD1CH5_LENGTH                              0x1
#define _MD1CARH_MD1CH5_MASK                                0x20
#define _MD1CARH_MD1CH6_POSN                                0x6
#define _MD1CARH_MD1CH6_POSITION                            0x6
#define _MD1CARH_MD1CH6_SIZE                                0x1
#define _MD1CARH_MD1CH6_LENGTH                              0x1
#define _MD1CARH_MD1CH6_MASK                                0x40
#define _MD1CARH_MD1CH7_POSN                                0x7
#define _MD1CARH_MD1CH7_POSITION                            0x7
#define _MD1CARH_MD1CH7_SIZE                                0x1
#define _MD1CARH_MD1CH7_LENGTH                              0x1
#define _MD1CARH_MD1CH7_MASK                                0x80

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x06F);
#ifndef _LIB_BUILD
asm("CMOUT equ 06Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x06F);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x070);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 070h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned                        :2;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1EN                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x070);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_EN_POSN                                    0x7
#define _CM1CON0_EN_POSITION                                0x7
#define _CM1CON0_EN_SIZE                                    0x1
#define _CM1CON0_EN_LENGTH                                  0x1
#define _CM1CON0_EN_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1EN_POSN                                  0x7
#define _CM1CON0_C1EN_POSITION                              0x7
#define _CM1CON0_C1EN_SIZE                                  0x1
#define _CM1CON0_C1EN_LENGTH                                0x1
#define _CM1CON0_C1EN_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x071);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 071h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x071);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NCH
#define CM1NCH CM1NCH
extern volatile unsigned char           CM1NCH              __at(0x072);
#ifndef _LIB_BUILD
asm("CM1NCH equ 072h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NCHbits_t;
extern volatile CM1NCHbits_t CM1NCHbits __at(0x072);
// bitfield macros
#define _CM1NCH_NCH_POSN                                    0x0
#define _CM1NCH_NCH_POSITION                                0x0
#define _CM1NCH_NCH_SIZE                                    0x3
#define _CM1NCH_NCH_LENGTH                                  0x3
#define _CM1NCH_NCH_MASK                                    0x7
#define _CM1NCH_NCH0_POSN                                   0x0
#define _CM1NCH_NCH0_POSITION                               0x0
#define _CM1NCH_NCH0_SIZE                                   0x1
#define _CM1NCH_NCH0_LENGTH                                 0x1
#define _CM1NCH_NCH0_MASK                                   0x1
#define _CM1NCH_NCH1_POSN                                   0x1
#define _CM1NCH_NCH1_POSITION                               0x1
#define _CM1NCH_NCH1_SIZE                                   0x1
#define _CM1NCH_NCH1_LENGTH                                 0x1
#define _CM1NCH_NCH1_MASK                                   0x2
#define _CM1NCH_NCH2_POSN                                   0x2
#define _CM1NCH_NCH2_POSITION                               0x2
#define _CM1NCH_NCH2_SIZE                                   0x1
#define _CM1NCH_NCH2_LENGTH                                 0x1
#define _CM1NCH_NCH2_MASK                                   0x4
#define _CM1NCH_C1NCH0_POSN                                 0x0
#define _CM1NCH_C1NCH0_POSITION                             0x0
#define _CM1NCH_C1NCH0_SIZE                                 0x1
#define _CM1NCH_C1NCH0_LENGTH                               0x1
#define _CM1NCH_C1NCH0_MASK                                 0x1
#define _CM1NCH_C1NCH1_POSN                                 0x1
#define _CM1NCH_C1NCH1_POSITION                             0x1
#define _CM1NCH_C1NCH1_SIZE                                 0x1
#define _CM1NCH_C1NCH1_LENGTH                               0x1
#define _CM1NCH_C1NCH1_MASK                                 0x2
#define _CM1NCH_C1NCH2_POSN                                 0x2
#define _CM1NCH_C1NCH2_POSITION                             0x2
#define _CM1NCH_C1NCH2_SIZE                                 0x1
#define _CM1NCH_C1NCH2_LENGTH                               0x1
#define _CM1NCH_C1NCH2_MASK                                 0x4

// Register: CM1PCH
#define CM1PCH CM1PCH
extern volatile unsigned char           CM1PCH              __at(0x073);
#ifndef _LIB_BUILD
asm("CM1PCH equ 073h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PCHbits_t;
extern volatile CM1PCHbits_t CM1PCHbits __at(0x073);
// bitfield macros
#define _CM1PCH_PCH_POSN                                    0x0
#define _CM1PCH_PCH_POSITION                                0x0
#define _CM1PCH_PCH_SIZE                                    0x3
#define _CM1PCH_PCH_LENGTH                                  0x3
#define _CM1PCH_PCH_MASK                                    0x7
#define _CM1PCH_PCH0_POSN                                   0x0
#define _CM1PCH_PCH0_POSITION                               0x0
#define _CM1PCH_PCH0_SIZE                                   0x1
#define _CM1PCH_PCH0_LENGTH                                 0x1
#define _CM1PCH_PCH0_MASK                                   0x1
#define _CM1PCH_PCH1_POSN                                   0x1
#define _CM1PCH_PCH1_POSITION                               0x1
#define _CM1PCH_PCH1_SIZE                                   0x1
#define _CM1PCH_PCH1_LENGTH                                 0x1
#define _CM1PCH_PCH1_MASK                                   0x2
#define _CM1PCH_PCH2_POSN                                   0x2
#define _CM1PCH_PCH2_POSITION                               0x2
#define _CM1PCH_PCH2_SIZE                                   0x1
#define _CM1PCH_PCH2_LENGTH                                 0x1
#define _CM1PCH_PCH2_MASK                                   0x4
#define _CM1PCH_C1PCH0_POSN                                 0x0
#define _CM1PCH_C1PCH0_POSITION                             0x0
#define _CM1PCH_C1PCH0_SIZE                                 0x1
#define _CM1PCH_C1PCH0_LENGTH                               0x1
#define _CM1PCH_C1PCH0_MASK                                 0x1
#define _CM1PCH_C1PCH1_POSN                                 0x1
#define _CM1PCH_C1PCH1_POSITION                             0x1
#define _CM1PCH_C1PCH1_SIZE                                 0x1
#define _CM1PCH_C1PCH1_LENGTH                               0x1
#define _CM1PCH_C1PCH1_MASK                                 0x2
#define _CM1PCH_C1PCH2_POSN                                 0x2
#define _CM1PCH_C1PCH2_POSITION                             0x2
#define _CM1PCH_C1PCH2_SIZE                                 0x1
#define _CM1PCH_C1PCH2_LENGTH                               0x1
#define _CM1PCH_C1PCH2_MASK                                 0x4

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x074);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 074h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned                        :2;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2EN                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x074);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_EN_POSN                                    0x7
#define _CM2CON0_EN_POSITION                                0x7
#define _CM2CON0_EN_SIZE                                    0x1
#define _CM2CON0_EN_LENGTH                                  0x1
#define _CM2CON0_EN_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2EN_POSN                                  0x7
#define _CM2CON0_C2EN_POSITION                              0x7
#define _CM2CON0_C2EN_SIZE                                  0x1
#define _CM2CON0_C2EN_LENGTH                                0x1
#define _CM2CON0_C2EN_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x075);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 075h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x075);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NCH
#define CM2NCH CM2NCH
extern volatile unsigned char           CM2NCH              __at(0x076);
#ifndef _LIB_BUILD
asm("CM2NCH equ 076h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NCHbits_t;
extern volatile CM2NCHbits_t CM2NCHbits __at(0x076);
// bitfield macros
#define _CM2NCH_NCH_POSN                                    0x0
#define _CM2NCH_NCH_POSITION                                0x0
#define _CM2NCH_NCH_SIZE                                    0x3
#define _CM2NCH_NCH_LENGTH                                  0x3
#define _CM2NCH_NCH_MASK                                    0x7
#define _CM2NCH_NCH0_POSN                                   0x0
#define _CM2NCH_NCH0_POSITION                               0x0
#define _CM2NCH_NCH0_SIZE                                   0x1
#define _CM2NCH_NCH0_LENGTH                                 0x1
#define _CM2NCH_NCH0_MASK                                   0x1
#define _CM2NCH_NCH1_POSN                                   0x1
#define _CM2NCH_NCH1_POSITION                               0x1
#define _CM2NCH_NCH1_SIZE                                   0x1
#define _CM2NCH_NCH1_LENGTH                                 0x1
#define _CM2NCH_NCH1_MASK                                   0x2
#define _CM2NCH_NCH2_POSN                                   0x2
#define _CM2NCH_NCH2_POSITION                               0x2
#define _CM2NCH_NCH2_SIZE                                   0x1
#define _CM2NCH_NCH2_LENGTH                                 0x1
#define _CM2NCH_NCH2_MASK                                   0x4
#define _CM2NCH_C2NCH0_POSN                                 0x0
#define _CM2NCH_C2NCH0_POSITION                             0x0
#define _CM2NCH_C2NCH0_SIZE                                 0x1
#define _CM2NCH_C2NCH0_LENGTH                               0x1
#define _CM2NCH_C2NCH0_MASK                                 0x1
#define _CM2NCH_C2NCH1_POSN                                 0x1
#define _CM2NCH_C2NCH1_POSITION                             0x1
#define _CM2NCH_C2NCH1_SIZE                                 0x1
#define _CM2NCH_C2NCH1_LENGTH                               0x1
#define _CM2NCH_C2NCH1_MASK                                 0x2
#define _CM2NCH_C2NCH2_POSN                                 0x2
#define _CM2NCH_C2NCH2_POSITION                             0x2
#define _CM2NCH_C2NCH2_SIZE                                 0x1
#define _CM2NCH_C2NCH2_LENGTH                               0x1
#define _CM2NCH_C2NCH2_MASK                                 0x4

// Register: CM2PCH
#define CM2PCH CM2PCH
extern volatile unsigned char           CM2PCH              __at(0x077);
#ifndef _LIB_BUILD
asm("CM2PCH equ 077h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PCHbits_t;
extern volatile CM2PCHbits_t CM2PCHbits __at(0x077);
// bitfield macros
#define _CM2PCH_PCH_POSN                                    0x0
#define _CM2PCH_PCH_POSITION                                0x0
#define _CM2PCH_PCH_SIZE                                    0x3
#define _CM2PCH_PCH_LENGTH                                  0x3
#define _CM2PCH_PCH_MASK                                    0x7
#define _CM2PCH_PCH0_POSN                                   0x0
#define _CM2PCH_PCH0_POSITION                               0x0
#define _CM2PCH_PCH0_SIZE                                   0x1
#define _CM2PCH_PCH0_LENGTH                                 0x1
#define _CM2PCH_PCH0_MASK                                   0x1
#define _CM2PCH_PCH1_POSN                                   0x1
#define _CM2PCH_PCH1_POSITION                               0x1
#define _CM2PCH_PCH1_SIZE                                   0x1
#define _CM2PCH_PCH1_LENGTH                                 0x1
#define _CM2PCH_PCH1_MASK                                   0x2
#define _CM2PCH_PCH2_POSN                                   0x2
#define _CM2PCH_PCH2_POSITION                               0x2
#define _CM2PCH_PCH2_SIZE                                   0x1
#define _CM2PCH_PCH2_LENGTH                                 0x1
#define _CM2PCH_PCH2_MASK                                   0x4
#define _CM2PCH_C2PCH0_POSN                                 0x0
#define _CM2PCH_C2PCH0_POSITION                             0x0
#define _CM2PCH_C2PCH0_SIZE                                 0x1
#define _CM2PCH_C2PCH0_LENGTH                               0x1
#define _CM2PCH_C2PCH0_MASK                                 0x1
#define _CM2PCH_C2PCH1_POSN                                 0x1
#define _CM2PCH_C2PCH1_POSITION                             0x1
#define _CM2PCH_C2PCH1_SIZE                                 0x1
#define _CM2PCH_C2PCH1_LENGTH                               0x1
#define _CM2PCH_C2PCH1_MASK                                 0x2
#define _CM2PCH_C2PCH2_POSN                                 0x2
#define _CM2PCH_C2PCH2_POSITION                             0x2
#define _CM2PCH_C2PCH2_SIZE                                 0x1
#define _CM2PCH_C2PCH2_LENGTH                               0x1
#define _CM2PCH_C2PCH2_MASK                                 0x4

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x078);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 078h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned PS                     :5;
    };
    struct {
        unsigned SWDTEN                 :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned WDTSEN                 :1;
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned PS3                    :1;
        unsigned PS4                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x078);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_PS_POSN                                    0x1
#define _WDTCON0_PS_POSITION                                0x1
#define _WDTCON0_PS_SIZE                                    0x5
#define _WDTCON0_PS_LENGTH                                  0x5
#define _WDTCON0_PS_MASK                                    0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_PS0_POSN                                   0x1
#define _WDTCON0_PS0_POSITION                               0x1
#define _WDTCON0_PS0_SIZE                                   0x1
#define _WDTCON0_PS0_LENGTH                                 0x1
#define _WDTCON0_PS0_MASK                                   0x2
#define _WDTCON0_PS1_POSN                                   0x2
#define _WDTCON0_PS1_POSITION                               0x2
#define _WDTCON0_PS1_SIZE                                   0x1
#define _WDTCON0_PS1_LENGTH                                 0x1
#define _WDTCON0_PS1_MASK                                   0x4
#define _WDTCON0_PS2_POSN                                   0x3
#define _WDTCON0_PS2_POSITION                               0x3
#define _WDTCON0_PS2_SIZE                                   0x1
#define _WDTCON0_PS2_LENGTH                                 0x1
#define _WDTCON0_PS2_MASK                                   0x8
#define _WDTCON0_PS3_POSN                                   0x4
#define _WDTCON0_PS3_POSITION                               0x4
#define _WDTCON0_PS3_SIZE                                   0x1
#define _WDTCON0_PS3_LENGTH                                 0x1
#define _WDTCON0_PS3_MASK                                   0x10
#define _WDTCON0_PS4_POSN                                   0x5
#define _WDTCON0_PS4_POSITION                               0x5
#define _WDTCON0_PS4_SIZE                                   0x1
#define _WDTCON0_PS4_LENGTH                                 0x1
#define _WDTCON0_PS4_MASK                                   0x20
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x079);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 079h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WDTWINDOW              :3;
        unsigned                        :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x079);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_CS_POSN                                    0x4
#define _WDTCON1_CS_POSITION                                0x4
#define _WDTCON1_CS_SIZE                                    0x3
#define _WDTCON1_CS_LENGTH                                  0x3
#define _WDTCON1_CS_MASK                                    0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_CS0_POSN                                   0x4
#define _WDTCON1_CS0_POSITION                               0x4
#define _WDTCON1_CS0_SIZE                                   0x1
#define _WDTCON1_CS0_LENGTH                                 0x1
#define _WDTCON1_CS0_MASK                                   0x10
#define _WDTCON1_CS1_POSN                                   0x5
#define _WDTCON1_CS1_POSITION                               0x5
#define _WDTCON1_CS1_SIZE                                   0x1
#define _WDTCON1_CS1_LENGTH                                 0x1
#define _WDTCON1_CS1_MASK                                   0x20
#define _WDTCON1_CS2_POSN                                   0x6
#define _WDTCON1_CS2_POSITION                               0x6
#define _WDTCON1_CS2_SIZE                                   0x1
#define _WDTCON1_CS2_LENGTH                                 0x1
#define _WDTCON1_CS2_MASK                                   0x40
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPS
#define WDTPS WDTPS
extern volatile unsigned short          WDTPS               __at(0x07A);
#ifndef _LIB_BUILD
asm("WDTPS equ 07Ah");
#endif

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x07A);
#ifndef _LIB_BUILD
asm("WDTPSL equ 07Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTL                 :8;
    };
    struct {
        unsigned WDTPSCNTL              :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x07A);
// bitfield macros
#define _WDTPSL_PSCNTL_POSN                                 0x0
#define _WDTPSL_PSCNTL_POSITION                             0x0
#define _WDTPSL_PSCNTL_SIZE                                 0x8
#define _WDTPSL_PSCNTL_LENGTH                               0x8
#define _WDTPSL_PSCNTL_MASK                                 0xFF
#define _WDTPSL_WDTPSCNTL_POSN                              0x0
#define _WDTPSL_WDTPSCNTL_POSITION                          0x0
#define _WDTPSL_WDTPSCNTL_SIZE                              0x8
#define _WDTPSL_WDTPSCNTL_LENGTH                            0x8
#define _WDTPSL_WDTPSCNTL_MASK                              0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x07B);
#ifndef _LIB_BUILD
asm("WDTPSH equ 07Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTH                 :8;
    };
    struct {
        unsigned WDTPSCNTH              :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x07B);
// bitfield macros
#define _WDTPSH_PSCNTH_POSN                                 0x0
#define _WDTPSH_PSCNTH_POSITION                             0x0
#define _WDTPSH_PSCNTH_SIZE                                 0x8
#define _WDTPSH_PSCNTH_LENGTH                               0x8
#define _WDTPSH_PSCNTH_MASK                                 0xFF
#define _WDTPSH_WDTPSCNTH_POSN                              0x0
#define _WDTPSH_WDTPSCNTH_POSITION                          0x0
#define _WDTPSH_WDTPSCNTH_SIZE                              0x8
#define _WDTPSH_WDTPSCNTH_LENGTH                            0x8
#define _WDTPSH_WDTPSCNTH_MASK                              0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x07C);
#ifndef _LIB_BUILD
asm("WDTTMR equ 07Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned TMR                    :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
    struct {
        unsigned                        :3;
        unsigned WDTTMR                 :5;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x07C);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_TMR_POSN                                    0x3
#define _WDTTMR_TMR_POSITION                                0x3
#define _WDTTMR_TMR_SIZE                                    0x5
#define _WDTTMR_TMR_LENGTH                                  0x5
#define _WDTTMR_TMR_MASK                                    0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8

// Register: DAC1DAT
#define DAC1DAT DAC1DAT
extern volatile unsigned char           DAC1DAT             __at(0x07D);
#ifndef _LIB_BUILD
asm("DAC1DAT equ 07Dh");
#endif

// Register: DAC1DATL
#define DAC1DATL DAC1DATL
extern volatile unsigned char           DAC1DATL            __at(0x07D);
#ifndef _LIB_BUILD
asm("DAC1DATL equ 07Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :8;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
        unsigned DAC1R5                 :1;
        unsigned DAC1R6                 :1;
        unsigned DAC1R7                 :1;
    };
    struct {
        unsigned DAC1RL                 :8;
    };
} DAC1DATLbits_t;
extern volatile DAC1DATLbits_t DAC1DATLbits __at(0x07D);
// bitfield macros
#define _DAC1DATL_DAC1R_POSN                                0x0
#define _DAC1DATL_DAC1R_POSITION                            0x0
#define _DAC1DATL_DAC1R_SIZE                                0x8
#define _DAC1DATL_DAC1R_LENGTH                              0x8
#define _DAC1DATL_DAC1R_MASK                                0xFF
#define _DAC1DATL_DAC1R0_POSN                               0x0
#define _DAC1DATL_DAC1R0_POSITION                           0x0
#define _DAC1DATL_DAC1R0_SIZE                               0x1
#define _DAC1DATL_DAC1R0_LENGTH                             0x1
#define _DAC1DATL_DAC1R0_MASK                               0x1
#define _DAC1DATL_DAC1R1_POSN                               0x1
#define _DAC1DATL_DAC1R1_POSITION                           0x1
#define _DAC1DATL_DAC1R1_SIZE                               0x1
#define _DAC1DATL_DAC1R1_LENGTH                             0x1
#define _DAC1DATL_DAC1R1_MASK                               0x2
#define _DAC1DATL_DAC1R2_POSN                               0x2
#define _DAC1DATL_DAC1R2_POSITION                           0x2
#define _DAC1DATL_DAC1R2_SIZE                               0x1
#define _DAC1DATL_DAC1R2_LENGTH                             0x1
#define _DAC1DATL_DAC1R2_MASK                               0x4
#define _DAC1DATL_DAC1R3_POSN                               0x3
#define _DAC1DATL_DAC1R3_POSITION                           0x3
#define _DAC1DATL_DAC1R3_SIZE                               0x1
#define _DAC1DATL_DAC1R3_LENGTH                             0x1
#define _DAC1DATL_DAC1R3_MASK                               0x8
#define _DAC1DATL_DAC1R4_POSN                               0x4
#define _DAC1DATL_DAC1R4_POSITION                           0x4
#define _DAC1DATL_DAC1R4_SIZE                               0x1
#define _DAC1DATL_DAC1R4_LENGTH                             0x1
#define _DAC1DATL_DAC1R4_MASK                               0x10
#define _DAC1DATL_DAC1R5_POSN                               0x5
#define _DAC1DATL_DAC1R5_POSITION                           0x5
#define _DAC1DATL_DAC1R5_SIZE                               0x1
#define _DAC1DATL_DAC1R5_LENGTH                             0x1
#define _DAC1DATL_DAC1R5_MASK                               0x20
#define _DAC1DATL_DAC1R6_POSN                               0x6
#define _DAC1DATL_DAC1R6_POSITION                           0x6
#define _DAC1DATL_DAC1R6_SIZE                               0x1
#define _DAC1DATL_DAC1R6_LENGTH                             0x1
#define _DAC1DATL_DAC1R6_MASK                               0x40
#define _DAC1DATL_DAC1R7_POSN                               0x7
#define _DAC1DATL_DAC1R7_POSITION                           0x7
#define _DAC1DATL_DAC1R7_SIZE                               0x1
#define _DAC1DATL_DAC1R7_LENGTH                             0x1
#define _DAC1DATL_DAC1R7_MASK                               0x80
#define _DAC1DATL_DAC1RL_POSN                               0x0
#define _DAC1DATL_DAC1RL_POSITION                           0x0
#define _DAC1DATL_DAC1RL_SIZE                               0x8
#define _DAC1DATL_DAC1RL_LENGTH                             0x8
#define _DAC1DATL_DAC1RL_MASK                               0xFF

// Register: DAC1CON
#define DAC1CON DAC1CON
extern volatile unsigned char           DAC1CON             __at(0x07F);
#ifndef _LIB_BUILD
asm("DAC1CON equ 07Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :2;
        unsigned PSS                    :2;
        unsigned OE                     :3;
        unsigned EN                     :1;
    };
    struct {
        unsigned DAC1NSS                :2;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE                 :3;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned NSS0                   :1;
        unsigned                        :1;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
        unsigned OE0                    :1;
        unsigned OE1                    :1;
    };
} DAC1CONbits_t;
extern volatile DAC1CONbits_t DAC1CONbits __at(0x07F);
// bitfield macros
#define _DAC1CON_NSS_POSN                                   0x0
#define _DAC1CON_NSS_POSITION                               0x0
#define _DAC1CON_NSS_SIZE                                   0x2
#define _DAC1CON_NSS_LENGTH                                 0x2
#define _DAC1CON_NSS_MASK                                   0x3
#define _DAC1CON_PSS_POSN                                   0x2
#define _DAC1CON_PSS_POSITION                               0x2
#define _DAC1CON_PSS_SIZE                                   0x2
#define _DAC1CON_PSS_LENGTH                                 0x2
#define _DAC1CON_PSS_MASK                                   0xC
#define _DAC1CON_OE_POSN                                    0x4
#define _DAC1CON_OE_POSITION                                0x4
#define _DAC1CON_OE_SIZE                                    0x3
#define _DAC1CON_OE_LENGTH                                  0x3
#define _DAC1CON_OE_MASK                                    0x70
#define _DAC1CON_EN_POSN                                    0x7
#define _DAC1CON_EN_POSITION                                0x7
#define _DAC1CON_EN_SIZE                                    0x1
#define _DAC1CON_EN_LENGTH                                  0x1
#define _DAC1CON_EN_MASK                                    0x80
#define _DAC1CON_DAC1NSS_POSN                               0x0
#define _DAC1CON_DAC1NSS_POSITION                           0x0
#define _DAC1CON_DAC1NSS_SIZE                               0x2
#define _DAC1CON_DAC1NSS_LENGTH                             0x2
#define _DAC1CON_DAC1NSS_MASK                               0x3
#define _DAC1CON_DAC1PSS0_POSN                              0x2
#define _DAC1CON_DAC1PSS0_POSITION                          0x2
#define _DAC1CON_DAC1PSS0_SIZE                              0x1
#define _DAC1CON_DAC1PSS0_LENGTH                            0x1
#define _DAC1CON_DAC1PSS0_MASK                              0x4
#define _DAC1CON_DAC1PSS1_POSN                              0x3
#define _DAC1CON_DAC1PSS1_POSITION                          0x3
#define _DAC1CON_DAC1PSS1_SIZE                              0x1
#define _DAC1CON_DAC1PSS1_LENGTH                            0x1
#define _DAC1CON_DAC1PSS1_MASK                              0x8
#define _DAC1CON_DAC1OE_POSN                                0x4
#define _DAC1CON_DAC1OE_POSITION                            0x4
#define _DAC1CON_DAC1OE_SIZE                                0x3
#define _DAC1CON_DAC1OE_LENGTH                              0x3
#define _DAC1CON_DAC1OE_MASK                                0x70
#define _DAC1CON_DAC1EN_POSN                                0x7
#define _DAC1CON_DAC1EN_POSITION                            0x7
#define _DAC1CON_DAC1EN_SIZE                                0x1
#define _DAC1CON_DAC1EN_LENGTH                              0x1
#define _DAC1CON_DAC1EN_MASK                                0x80
#define _DAC1CON_NSS0_POSN                                  0x0
#define _DAC1CON_NSS0_POSITION                              0x0
#define _DAC1CON_NSS0_SIZE                                  0x1
#define _DAC1CON_NSS0_LENGTH                                0x1
#define _DAC1CON_NSS0_MASK                                  0x1
#define _DAC1CON_PSS0_POSN                                  0x2
#define _DAC1CON_PSS0_POSITION                              0x2
#define _DAC1CON_PSS0_SIZE                                  0x1
#define _DAC1CON_PSS0_LENGTH                                0x1
#define _DAC1CON_PSS0_MASK                                  0x4
#define _DAC1CON_PSS1_POSN                                  0x3
#define _DAC1CON_PSS1_POSITION                              0x3
#define _DAC1CON_PSS1_SIZE                                  0x1
#define _DAC1CON_PSS1_LENGTH                                0x1
#define _DAC1CON_PSS1_MASK                                  0x8
#define _DAC1CON_OE0_POSN                                   0x4
#define _DAC1CON_OE0_POSITION                               0x4
#define _DAC1CON_OE0_SIZE                                   0x1
#define _DAC1CON_OE0_LENGTH                                 0x1
#define _DAC1CON_OE0_MASK                                   0x10
#define _DAC1CON_OE1_POSN                                   0x5
#define _DAC1CON_OE1_POSITION                               0x5
#define _DAC1CON_OE1_SIZE                                   0x1
#define _DAC1CON_OE1_LENGTH                                 0x1
#define _DAC1CON_OE1_MASK                                   0x20

// Register: SPI1RXB
#define SPI1RXB SPI1RXB
extern volatile unsigned char           SPI1RXB             __at(0x080);
#ifndef _LIB_BUILD
asm("SPI1RXB equ 080h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
    struct {
        unsigned RXB0                   :1;
        unsigned RXB1                   :1;
        unsigned RXB2                   :1;
        unsigned RXB3                   :1;
        unsigned RXB4                   :1;
        unsigned RXB5                   :1;
        unsigned RXB6                   :1;
        unsigned RXB7                   :1;
    };
} SPI1RXBbits_t;
extern volatile SPI1RXBbits_t SPI1RXBbits __at(0x080);
// bitfield macros
#define _SPI1RXB_RXB_POSN                                   0x0
#define _SPI1RXB_RXB_POSITION                               0x0
#define _SPI1RXB_RXB_SIZE                                   0x8
#define _SPI1RXB_RXB_LENGTH                                 0x8
#define _SPI1RXB_RXB_MASK                                   0xFF
#define _SPI1RXB_RXB0_POSN                                  0x0
#define _SPI1RXB_RXB0_POSITION                              0x0
#define _SPI1RXB_RXB0_SIZE                                  0x1
#define _SPI1RXB_RXB0_LENGTH                                0x1
#define _SPI1RXB_RXB0_MASK                                  0x1
#define _SPI1RXB_RXB1_POSN                                  0x1
#define _SPI1RXB_RXB1_POSITION                              0x1
#define _SPI1RXB_RXB1_SIZE                                  0x1
#define _SPI1RXB_RXB1_LENGTH                                0x1
#define _SPI1RXB_RXB1_MASK                                  0x2
#define _SPI1RXB_RXB2_POSN                                  0x2
#define _SPI1RXB_RXB2_POSITION                              0x2
#define _SPI1RXB_RXB2_SIZE                                  0x1
#define _SPI1RXB_RXB2_LENGTH                                0x1
#define _SPI1RXB_RXB2_MASK                                  0x4
#define _SPI1RXB_RXB3_POSN                                  0x3
#define _SPI1RXB_RXB3_POSITION                              0x3
#define _SPI1RXB_RXB3_SIZE                                  0x1
#define _SPI1RXB_RXB3_LENGTH                                0x1
#define _SPI1RXB_RXB3_MASK                                  0x8
#define _SPI1RXB_RXB4_POSN                                  0x4
#define _SPI1RXB_RXB4_POSITION                              0x4
#define _SPI1RXB_RXB4_SIZE                                  0x1
#define _SPI1RXB_RXB4_LENGTH                                0x1
#define _SPI1RXB_RXB4_MASK                                  0x10
#define _SPI1RXB_RXB5_POSN                                  0x5
#define _SPI1RXB_RXB5_POSITION                              0x5
#define _SPI1RXB_RXB5_SIZE                                  0x1
#define _SPI1RXB_RXB5_LENGTH                                0x1
#define _SPI1RXB_RXB5_MASK                                  0x20
#define _SPI1RXB_RXB6_POSN                                  0x6
#define _SPI1RXB_RXB6_POSITION                              0x6
#define _SPI1RXB_RXB6_SIZE                                  0x1
#define _SPI1RXB_RXB6_LENGTH                                0x1
#define _SPI1RXB_RXB6_MASK                                  0x40
#define _SPI1RXB_RXB7_POSN                                  0x7
#define _SPI1RXB_RXB7_POSITION                              0x7
#define _SPI1RXB_RXB7_SIZE                                  0x1
#define _SPI1RXB_RXB7_LENGTH                                0x1
#define _SPI1RXB_RXB7_MASK                                  0x80

// Register: SPI1TXB
#define SPI1TXB SPI1TXB
extern volatile unsigned char           SPI1TXB             __at(0x081);
#ifndef _LIB_BUILD
asm("SPI1TXB equ 081h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
    struct {
        unsigned TXB0                   :1;
        unsigned TXB1                   :1;
        unsigned TXB2                   :1;
        unsigned TXB3                   :1;
        unsigned TXB4                   :1;
        unsigned TXB5                   :1;
        unsigned TXB6                   :1;
        unsigned TXB7                   :1;
    };
} SPI1TXBbits_t;
extern volatile SPI1TXBbits_t SPI1TXBbits __at(0x081);
// bitfield macros
#define _SPI1TXB_TXB_POSN                                   0x0
#define _SPI1TXB_TXB_POSITION                               0x0
#define _SPI1TXB_TXB_SIZE                                   0x8
#define _SPI1TXB_TXB_LENGTH                                 0x8
#define _SPI1TXB_TXB_MASK                                   0xFF
#define _SPI1TXB_TXB0_POSN                                  0x0
#define _SPI1TXB_TXB0_POSITION                              0x0
#define _SPI1TXB_TXB0_SIZE                                  0x1
#define _SPI1TXB_TXB0_LENGTH                                0x1
#define _SPI1TXB_TXB0_MASK                                  0x1
#define _SPI1TXB_TXB1_POSN                                  0x1
#define _SPI1TXB_TXB1_POSITION                              0x1
#define _SPI1TXB_TXB1_SIZE                                  0x1
#define _SPI1TXB_TXB1_LENGTH                                0x1
#define _SPI1TXB_TXB1_MASK                                  0x2
#define _SPI1TXB_TXB2_POSN                                  0x2
#define _SPI1TXB_TXB2_POSITION                              0x2
#define _SPI1TXB_TXB2_SIZE                                  0x1
#define _SPI1TXB_TXB2_LENGTH                                0x1
#define _SPI1TXB_TXB2_MASK                                  0x4
#define _SPI1TXB_TXB3_POSN                                  0x3
#define _SPI1TXB_TXB3_POSITION                              0x3
#define _SPI1TXB_TXB3_SIZE                                  0x1
#define _SPI1TXB_TXB3_LENGTH                                0x1
#define _SPI1TXB_TXB3_MASK                                  0x8
#define _SPI1TXB_TXB4_POSN                                  0x4
#define _SPI1TXB_TXB4_POSITION                              0x4
#define _SPI1TXB_TXB4_SIZE                                  0x1
#define _SPI1TXB_TXB4_LENGTH                                0x1
#define _SPI1TXB_TXB4_MASK                                  0x10
#define _SPI1TXB_TXB5_POSN                                  0x5
#define _SPI1TXB_TXB5_POSITION                              0x5
#define _SPI1TXB_TXB5_SIZE                                  0x1
#define _SPI1TXB_TXB5_LENGTH                                0x1
#define _SPI1TXB_TXB5_MASK                                  0x20
#define _SPI1TXB_TXB6_POSN                                  0x6
#define _SPI1TXB_TXB6_POSITION                              0x6
#define _SPI1TXB_TXB6_SIZE                                  0x1
#define _SPI1TXB_TXB6_LENGTH                                0x1
#define _SPI1TXB_TXB6_MASK                                  0x40
#define _SPI1TXB_TXB7_POSN                                  0x7
#define _SPI1TXB_TXB7_POSITION                              0x7
#define _SPI1TXB_TXB7_SIZE                                  0x1
#define _SPI1TXB_TXB7_LENGTH                                0x1
#define _SPI1TXB_TXB7_MASK                                  0x80

// Register: SPI1TCNT
#define SPI1TCNT SPI1TCNT
extern volatile unsigned short          SPI1TCNT            __at(0x082);
#ifndef _LIB_BUILD
asm("SPI1TCNT equ 082h");
#endif

// Register: SPI1TCNTL
#define SPI1TCNTL SPI1TCNTL
extern volatile unsigned char           SPI1TCNTL           __at(0x082);
#ifndef _LIB_BUILD
asm("SPI1TCNTL equ 082h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTL                  :8;
    };
} SPI1TCNTLbits_t;
extern volatile SPI1TCNTLbits_t SPI1TCNTLbits __at(0x082);
// bitfield macros
#define _SPI1TCNTL_TCNTL_POSN                               0x0
#define _SPI1TCNTL_TCNTL_POSITION                           0x0
#define _SPI1TCNTL_TCNTL_SIZE                               0x8
#define _SPI1TCNTL_TCNTL_LENGTH                             0x8
#define _SPI1TCNTL_TCNTL_MASK                               0xFF

// Register: SPI1TCNTH
#define SPI1TCNTH SPI1TCNTH
extern volatile unsigned char           SPI1TCNTH           __at(0x083);
#ifndef _LIB_BUILD
asm("SPI1TCNTH equ 083h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTH                  :3;
    };
} SPI1TCNTHbits_t;
extern volatile SPI1TCNTHbits_t SPI1TCNTHbits __at(0x083);
// bitfield macros
#define _SPI1TCNTH_TCNTH_POSN                               0x0
#define _SPI1TCNTH_TCNTH_POSITION                           0x0
#define _SPI1TCNTH_TCNTH_SIZE                               0x3
#define _SPI1TCNTH_TCNTH_LENGTH                             0x3
#define _SPI1TCNTH_TCNTH_MASK                               0x7

// Register: SPI1CON0
#define SPI1CON0 SPI1CON0
extern volatile unsigned char           SPI1CON0            __at(0x084);
#ifndef _LIB_BUILD
asm("SPI1CON0 equ 084h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BMODE                  :1;
        unsigned MST                    :1;
        unsigned LSBF                   :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
    struct {
        unsigned SPI1BMODE              :1;
        unsigned SPI1MST                :1;
        unsigned SPI1LSBF               :1;
        unsigned                        :4;
        unsigned SPI1SPIEN              :1;
    };
} SPI1CON0bits_t;
extern volatile SPI1CON0bits_t SPI1CON0bits __at(0x084);
// bitfield macros
#define _SPI1CON0_BMODE_POSN                                0x0
#define _SPI1CON0_BMODE_POSITION                            0x0
#define _SPI1CON0_BMODE_SIZE                                0x1
#define _SPI1CON0_BMODE_LENGTH                              0x1
#define _SPI1CON0_BMODE_MASK                                0x1
#define _SPI1CON0_MST_POSN                                  0x1
#define _SPI1CON0_MST_POSITION                              0x1
#define _SPI1CON0_MST_SIZE                                  0x1
#define _SPI1CON0_MST_LENGTH                                0x1
#define _SPI1CON0_MST_MASK                                  0x2
#define _SPI1CON0_LSBF_POSN                                 0x2
#define _SPI1CON0_LSBF_POSITION                             0x2
#define _SPI1CON0_LSBF_SIZE                                 0x1
#define _SPI1CON0_LSBF_LENGTH                               0x1
#define _SPI1CON0_LSBF_MASK                                 0x4
#define _SPI1CON0_EN_POSN                                   0x7
#define _SPI1CON0_EN_POSITION                               0x7
#define _SPI1CON0_EN_SIZE                                   0x1
#define _SPI1CON0_EN_LENGTH                                 0x1
#define _SPI1CON0_EN_MASK                                   0x80
#define _SPI1CON0_SPI1BMODE_POSN                            0x0
#define _SPI1CON0_SPI1BMODE_POSITION                        0x0
#define _SPI1CON0_SPI1BMODE_SIZE                            0x1
#define _SPI1CON0_SPI1BMODE_LENGTH                          0x1
#define _SPI1CON0_SPI1BMODE_MASK                            0x1
#define _SPI1CON0_SPI1MST_POSN                              0x1
#define _SPI1CON0_SPI1MST_POSITION                          0x1
#define _SPI1CON0_SPI1MST_SIZE                              0x1
#define _SPI1CON0_SPI1MST_LENGTH                            0x1
#define _SPI1CON0_SPI1MST_MASK                              0x2
#define _SPI1CON0_SPI1LSBF_POSN                             0x2
#define _SPI1CON0_SPI1LSBF_POSITION                         0x2
#define _SPI1CON0_SPI1LSBF_SIZE                             0x1
#define _SPI1CON0_SPI1LSBF_LENGTH                           0x1
#define _SPI1CON0_SPI1LSBF_MASK                             0x4
#define _SPI1CON0_SPI1SPIEN_POSN                            0x7
#define _SPI1CON0_SPI1SPIEN_POSITION                        0x7
#define _SPI1CON0_SPI1SPIEN_SIZE                            0x1
#define _SPI1CON0_SPI1SPIEN_LENGTH                          0x1
#define _SPI1CON0_SPI1SPIEN_MASK                            0x80

// Register: SPI1CON1
#define SPI1CON1 SPI1CON1
extern volatile unsigned char           SPI1CON1            __at(0x085);
#ifndef _LIB_BUILD
asm("SPI1CON1 equ 085h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDOP                   :1;
        unsigned SDIP                   :1;
        unsigned SSP                    :1;
        unsigned                        :1;
        unsigned FST                    :1;
        unsigned CKP                    :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned SPI1SDOP               :1;
        unsigned SPI1SDIP               :1;
        unsigned SPI1SSP                :1;
        unsigned                        :1;
        unsigned SPI1FST                :1;
        unsigned SPI1CKP                :1;
        unsigned SPI1CKE                :1;
        unsigned SPI1SMP                :1;
    };
} SPI1CON1bits_t;
extern volatile SPI1CON1bits_t SPI1CON1bits __at(0x085);
// bitfield macros
#define _SPI1CON1_SDOP_POSN                                 0x0
#define _SPI1CON1_SDOP_POSITION                             0x0
#define _SPI1CON1_SDOP_SIZE                                 0x1
#define _SPI1CON1_SDOP_LENGTH                               0x1
#define _SPI1CON1_SDOP_MASK                                 0x1
#define _SPI1CON1_SDIP_POSN                                 0x1
#define _SPI1CON1_SDIP_POSITION                             0x1
#define _SPI1CON1_SDIP_SIZE                                 0x1
#define _SPI1CON1_SDIP_LENGTH                               0x1
#define _SPI1CON1_SDIP_MASK                                 0x2
#define _SPI1CON1_SSP_POSN                                  0x2
#define _SPI1CON1_SSP_POSITION                              0x2
#define _SPI1CON1_SSP_SIZE                                  0x1
#define _SPI1CON1_SSP_LENGTH                                0x1
#define _SPI1CON1_SSP_MASK                                  0x4
#define _SPI1CON1_FST_POSN                                  0x4
#define _SPI1CON1_FST_POSITION                              0x4
#define _SPI1CON1_FST_SIZE                                  0x1
#define _SPI1CON1_FST_LENGTH                                0x1
#define _SPI1CON1_FST_MASK                                  0x10
#define _SPI1CON1_CKP_POSN                                  0x5
#define _SPI1CON1_CKP_POSITION                              0x5
#define _SPI1CON1_CKP_SIZE                                  0x1
#define _SPI1CON1_CKP_LENGTH                                0x1
#define _SPI1CON1_CKP_MASK                                  0x20
#define _SPI1CON1_CKE_POSN                                  0x6
#define _SPI1CON1_CKE_POSITION                              0x6
#define _SPI1CON1_CKE_SIZE                                  0x1
#define _SPI1CON1_CKE_LENGTH                                0x1
#define _SPI1CON1_CKE_MASK                                  0x40
#define _SPI1CON1_SMP_POSN                                  0x7
#define _SPI1CON1_SMP_POSITION                              0x7
#define _SPI1CON1_SMP_SIZE                                  0x1
#define _SPI1CON1_SMP_LENGTH                                0x1
#define _SPI1CON1_SMP_MASK                                  0x80
#define _SPI1CON1_SPI1SDOP_POSN                             0x0
#define _SPI1CON1_SPI1SDOP_POSITION                         0x0
#define _SPI1CON1_SPI1SDOP_SIZE                             0x1
#define _SPI1CON1_SPI1SDOP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDOP_MASK                             0x1
#define _SPI1CON1_SPI1SDIP_POSN                             0x1
#define _SPI1CON1_SPI1SDIP_POSITION                         0x1
#define _SPI1CON1_SPI1SDIP_SIZE                             0x1
#define _SPI1CON1_SPI1SDIP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDIP_MASK                             0x2
#define _SPI1CON1_SPI1SSP_POSN                              0x2
#define _SPI1CON1_SPI1SSP_POSITION                          0x2
#define _SPI1CON1_SPI1SSP_SIZE                              0x1
#define _SPI1CON1_SPI1SSP_LENGTH                            0x1
#define _SPI1CON1_SPI1SSP_MASK                              0x4
#define _SPI1CON1_SPI1FST_POSN                              0x4
#define _SPI1CON1_SPI1FST_POSITION                          0x4
#define _SPI1CON1_SPI1FST_SIZE                              0x1
#define _SPI1CON1_SPI1FST_LENGTH                            0x1
#define _SPI1CON1_SPI1FST_MASK                              0x10
#define _SPI1CON1_SPI1CKP_POSN                              0x5
#define _SPI1CON1_SPI1CKP_POSITION                          0x5
#define _SPI1CON1_SPI1CKP_SIZE                              0x1
#define _SPI1CON1_SPI1CKP_LENGTH                            0x1
#define _SPI1CON1_SPI1CKP_MASK                              0x20
#define _SPI1CON1_SPI1CKE_POSN                              0x6
#define _SPI1CON1_SPI1CKE_POSITION                          0x6
#define _SPI1CON1_SPI1CKE_SIZE                              0x1
#define _SPI1CON1_SPI1CKE_LENGTH                            0x1
#define _SPI1CON1_SPI1CKE_MASK                              0x40
#define _SPI1CON1_SPI1SMP_POSN                              0x7
#define _SPI1CON1_SPI1SMP_POSITION                          0x7
#define _SPI1CON1_SPI1SMP_SIZE                              0x1
#define _SPI1CON1_SPI1SMP_LENGTH                            0x1
#define _SPI1CON1_SPI1SMP_MASK                              0x80

// Register: SPI1CON2
#define SPI1CON2 SPI1CON2
extern volatile unsigned char           SPI1CON2            __at(0x086);
#ifndef _LIB_BUILD
asm("SPI1CON2 equ 086h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXR                    :1;
        unsigned TXR                    :1;
        unsigned SSET                   :1;
        unsigned                        :3;
        unsigned SSFLT                  :1;
        unsigned BUSY                   :1;
    };
    struct {
        unsigned SPI1RXR                :1;
        unsigned SPI1TXR                :1;
        unsigned SPI1SSET               :1;
        unsigned                        :3;
        unsigned SPI1SSFLT              :1;
        unsigned SPI1BUSY               :1;
    };
} SPI1CON2bits_t;
extern volatile SPI1CON2bits_t SPI1CON2bits __at(0x086);
// bitfield macros
#define _SPI1CON2_RXR_POSN                                  0x0
#define _SPI1CON2_RXR_POSITION                              0x0
#define _SPI1CON2_RXR_SIZE                                  0x1
#define _SPI1CON2_RXR_LENGTH                                0x1
#define _SPI1CON2_RXR_MASK                                  0x1
#define _SPI1CON2_TXR_POSN                                  0x1
#define _SPI1CON2_TXR_POSITION                              0x1
#define _SPI1CON2_TXR_SIZE                                  0x1
#define _SPI1CON2_TXR_LENGTH                                0x1
#define _SPI1CON2_TXR_MASK                                  0x2
#define _SPI1CON2_SSET_POSN                                 0x2
#define _SPI1CON2_SSET_POSITION                             0x2
#define _SPI1CON2_SSET_SIZE                                 0x1
#define _SPI1CON2_SSET_LENGTH                               0x1
#define _SPI1CON2_SSET_MASK                                 0x4
#define _SPI1CON2_SSFLT_POSN                                0x6
#define _SPI1CON2_SSFLT_POSITION                            0x6
#define _SPI1CON2_SSFLT_SIZE                                0x1
#define _SPI1CON2_SSFLT_LENGTH                              0x1
#define _SPI1CON2_SSFLT_MASK                                0x40
#define _SPI1CON2_BUSY_POSN                                 0x7
#define _SPI1CON2_BUSY_POSITION                             0x7
#define _SPI1CON2_BUSY_SIZE                                 0x1
#define _SPI1CON2_BUSY_LENGTH                               0x1
#define _SPI1CON2_BUSY_MASK                                 0x80
#define _SPI1CON2_SPI1RXR_POSN                              0x0
#define _SPI1CON2_SPI1RXR_POSITION                          0x0
#define _SPI1CON2_SPI1RXR_SIZE                              0x1
#define _SPI1CON2_SPI1RXR_LENGTH                            0x1
#define _SPI1CON2_SPI1RXR_MASK                              0x1
#define _SPI1CON2_SPI1TXR_POSN                              0x1
#define _SPI1CON2_SPI1TXR_POSITION                          0x1
#define _SPI1CON2_SPI1TXR_SIZE                              0x1
#define _SPI1CON2_SPI1TXR_LENGTH                            0x1
#define _SPI1CON2_SPI1TXR_MASK                              0x2
#define _SPI1CON2_SPI1SSET_POSN                             0x2
#define _SPI1CON2_SPI1SSET_POSITION                         0x2
#define _SPI1CON2_SPI1SSET_SIZE                             0x1
#define _SPI1CON2_SPI1SSET_LENGTH                           0x1
#define _SPI1CON2_SPI1SSET_MASK                             0x4
#define _SPI1CON2_SPI1SSFLT_POSN                            0x6
#define _SPI1CON2_SPI1SSFLT_POSITION                        0x6
#define _SPI1CON2_SPI1SSFLT_SIZE                            0x1
#define _SPI1CON2_SPI1SSFLT_LENGTH                          0x1
#define _SPI1CON2_SPI1SSFLT_MASK                            0x40
#define _SPI1CON2_SPI1BUSY_POSN                             0x7
#define _SPI1CON2_SPI1BUSY_POSITION                         0x7
#define _SPI1CON2_SPI1BUSY_SIZE                             0x1
#define _SPI1CON2_SPI1BUSY_LENGTH                           0x1
#define _SPI1CON2_SPI1BUSY_MASK                             0x80

// Register: SPI1STATUS
#define SPI1STATUS SPI1STATUS
extern volatile unsigned char           SPI1STATUS          __at(0x087);
#ifndef _LIB_BUILD
asm("SPI1STATUS equ 087h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
    struct {
        unsigned SPI1RXBF               :1;
        unsigned                        :1;
        unsigned SPI1CLRBF              :1;
        unsigned SPI1RXRE               :1;
        unsigned                        :1;
        unsigned SPI1TXBE               :1;
        unsigned                        :1;
        unsigned SPI1TXWE               :1;
    };
} SPI1STATUSbits_t;
extern volatile SPI1STATUSbits_t SPI1STATUSbits __at(0x087);
// bitfield macros
#define _SPI1STATUS_RXBF_POSN                               0x0
#define _SPI1STATUS_RXBF_POSITION                           0x0
#define _SPI1STATUS_RXBF_SIZE                               0x1
#define _SPI1STATUS_RXBF_LENGTH                             0x1
#define _SPI1STATUS_RXBF_MASK                               0x1
#define _SPI1STATUS_CLRBF_POSN                              0x2
#define _SPI1STATUS_CLRBF_POSITION                          0x2
#define _SPI1STATUS_CLRBF_SIZE                              0x1
#define _SPI1STATUS_CLRBF_LENGTH                            0x1
#define _SPI1STATUS_CLRBF_MASK                              0x4
#define _SPI1STATUS_RXRE_POSN                               0x3
#define _SPI1STATUS_RXRE_POSITION                           0x3
#define _SPI1STATUS_RXRE_SIZE                               0x1
#define _SPI1STATUS_RXRE_LENGTH                             0x1
#define _SPI1STATUS_RXRE_MASK                               0x8
#define _SPI1STATUS_TXBE_POSN                               0x5
#define _SPI1STATUS_TXBE_POSITION                           0x5
#define _SPI1STATUS_TXBE_SIZE                               0x1
#define _SPI1STATUS_TXBE_LENGTH                             0x1
#define _SPI1STATUS_TXBE_MASK                               0x20
#define _SPI1STATUS_TXWE_POSN                               0x7
#define _SPI1STATUS_TXWE_POSITION                           0x7
#define _SPI1STATUS_TXWE_SIZE                               0x1
#define _SPI1STATUS_TXWE_LENGTH                             0x1
#define _SPI1STATUS_TXWE_MASK                               0x80
#define _SPI1STATUS_SPI1RXBF_POSN                           0x0
#define _SPI1STATUS_SPI1RXBF_POSITION                       0x0
#define _SPI1STATUS_SPI1RXBF_SIZE                           0x1
#define _SPI1STATUS_SPI1RXBF_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXBF_MASK                           0x1
#define _SPI1STATUS_SPI1CLRBF_POSN                          0x2
#define _SPI1STATUS_SPI1CLRBF_POSITION                      0x2
#define _SPI1STATUS_SPI1CLRBF_SIZE                          0x1
#define _SPI1STATUS_SPI1CLRBF_LENGTH                        0x1
#define _SPI1STATUS_SPI1CLRBF_MASK                          0x4
#define _SPI1STATUS_SPI1RXRE_POSN                           0x3
#define _SPI1STATUS_SPI1RXRE_POSITION                       0x3
#define _SPI1STATUS_SPI1RXRE_SIZE                           0x1
#define _SPI1STATUS_SPI1RXRE_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXRE_MASK                           0x8
#define _SPI1STATUS_SPI1TXBE_POSN                           0x5
#define _SPI1STATUS_SPI1TXBE_POSITION                       0x5
#define _SPI1STATUS_SPI1TXBE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXBE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXBE_MASK                           0x20
#define _SPI1STATUS_SPI1TXWE_POSN                           0x7
#define _SPI1STATUS_SPI1TXWE_POSITION                       0x7
#define _SPI1STATUS_SPI1TXWE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXWE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXWE_MASK                           0x80

// Register: SPI1TWIDTH
#define SPI1TWIDTH SPI1TWIDTH
extern volatile unsigned char           SPI1TWIDTH          __at(0x088);
#ifndef _LIB_BUILD
asm("SPI1TWIDTH equ 088h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TWIDTH                 :3;
    };
    struct {
        unsigned TWIDTH0                :1;
        unsigned TWIDTH1                :1;
        unsigned TWIDTH2                :1;
    };
} SPI1TWIDTHbits_t;
extern volatile SPI1TWIDTHbits_t SPI1TWIDTHbits __at(0x088);
// bitfield macros
#define _SPI1TWIDTH_TWIDTH_POSN                             0x0
#define _SPI1TWIDTH_TWIDTH_POSITION                         0x0
#define _SPI1TWIDTH_TWIDTH_SIZE                             0x3
#define _SPI1TWIDTH_TWIDTH_LENGTH                           0x3
#define _SPI1TWIDTH_TWIDTH_MASK                             0x7
#define _SPI1TWIDTH_TWIDTH0_POSN                            0x0
#define _SPI1TWIDTH_TWIDTH0_POSITION                        0x0
#define _SPI1TWIDTH_TWIDTH0_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH0_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH0_MASK                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSN                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSITION                        0x1
#define _SPI1TWIDTH_TWIDTH1_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH1_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH1_MASK                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSN                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSITION                        0x2
#define _SPI1TWIDTH_TWIDTH2_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH2_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH2_MASK                            0x4

// Register: SPI1BAUD
#define SPI1BAUD SPI1BAUD
extern volatile unsigned char           SPI1BAUD            __at(0x089);
#ifndef _LIB_BUILD
asm("SPI1BAUD equ 089h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAUD                   :8;
    };
    struct {
        unsigned BAUD0                  :1;
        unsigned BAUD1                  :1;
        unsigned BAUD2                  :1;
        unsigned BAUD3                  :1;
        unsigned BAUD4                  :1;
        unsigned BAUD5                  :1;
        unsigned BAUD6                  :1;
        unsigned BAUD7                  :1;
    };
} SPI1BAUDbits_t;
extern volatile SPI1BAUDbits_t SPI1BAUDbits __at(0x089);
// bitfield macros
#define _SPI1BAUD_BAUD_POSN                                 0x0
#define _SPI1BAUD_BAUD_POSITION                             0x0
#define _SPI1BAUD_BAUD_SIZE                                 0x8
#define _SPI1BAUD_BAUD_LENGTH                               0x8
#define _SPI1BAUD_BAUD_MASK                                 0xFF
#define _SPI1BAUD_BAUD0_POSN                                0x0
#define _SPI1BAUD_BAUD0_POSITION                            0x0
#define _SPI1BAUD_BAUD0_SIZE                                0x1
#define _SPI1BAUD_BAUD0_LENGTH                              0x1
#define _SPI1BAUD_BAUD0_MASK                                0x1
#define _SPI1BAUD_BAUD1_POSN                                0x1
#define _SPI1BAUD_BAUD1_POSITION                            0x1
#define _SPI1BAUD_BAUD1_SIZE                                0x1
#define _SPI1BAUD_BAUD1_LENGTH                              0x1
#define _SPI1BAUD_BAUD1_MASK                                0x2
#define _SPI1BAUD_BAUD2_POSN                                0x2
#define _SPI1BAUD_BAUD2_POSITION                            0x2
#define _SPI1BAUD_BAUD2_SIZE                                0x1
#define _SPI1BAUD_BAUD2_LENGTH                              0x1
#define _SPI1BAUD_BAUD2_MASK                                0x4
#define _SPI1BAUD_BAUD3_POSN                                0x3
#define _SPI1BAUD_BAUD3_POSITION                            0x3
#define _SPI1BAUD_BAUD3_SIZE                                0x1
#define _SPI1BAUD_BAUD3_LENGTH                              0x1
#define _SPI1BAUD_BAUD3_MASK                                0x8
#define _SPI1BAUD_BAUD4_POSN                                0x4
#define _SPI1BAUD_BAUD4_POSITION                            0x4
#define _SPI1BAUD_BAUD4_SIZE                                0x1
#define _SPI1BAUD_BAUD4_LENGTH                              0x1
#define _SPI1BAUD_BAUD4_MASK                                0x10
#define _SPI1BAUD_BAUD5_POSN                                0x5
#define _SPI1BAUD_BAUD5_POSITION                            0x5
#define _SPI1BAUD_BAUD5_SIZE                                0x1
#define _SPI1BAUD_BAUD5_LENGTH                              0x1
#define _SPI1BAUD_BAUD5_MASK                                0x20
#define _SPI1BAUD_BAUD6_POSN                                0x6
#define _SPI1BAUD_BAUD6_POSITION                            0x6
#define _SPI1BAUD_BAUD6_SIZE                                0x1
#define _SPI1BAUD_BAUD6_LENGTH                              0x1
#define _SPI1BAUD_BAUD6_MASK                                0x40
#define _SPI1BAUD_BAUD7_POSN                                0x7
#define _SPI1BAUD_BAUD7_POSITION                            0x7
#define _SPI1BAUD_BAUD7_SIZE                                0x1
#define _SPI1BAUD_BAUD7_LENGTH                              0x1
#define _SPI1BAUD_BAUD7_MASK                                0x80

// Register: SPI1INTF
#define SPI1INTF SPI1INTF
extern volatile unsigned char           SPI1INTF            __at(0x08A);
#ifndef _LIB_BUILD
asm("SPI1INTF equ 08Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIF                  :1;
        unsigned RXOIF                  :1;
        unsigned                        :1;
        unsigned EOSIF                  :1;
        unsigned SOSIF                  :1;
        unsigned TCZIF                  :1;
        unsigned SRMTIF                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIF              :1;
        unsigned SPI1RXOIF              :1;
        unsigned                        :1;
        unsigned SPI1EOSIF              :1;
        unsigned SPI1SOSIF              :1;
        unsigned SPI1TCZIF              :1;
        unsigned SPI1SRMTIF             :1;
    };
} SPI1INTFbits_t;
extern volatile SPI1INTFbits_t SPI1INTFbits __at(0x08A);
// bitfield macros
#define _SPI1INTF_TXUIF_POSN                                0x1
#define _SPI1INTF_TXUIF_POSITION                            0x1
#define _SPI1INTF_TXUIF_SIZE                                0x1
#define _SPI1INTF_TXUIF_LENGTH                              0x1
#define _SPI1INTF_TXUIF_MASK                                0x2
#define _SPI1INTF_RXOIF_POSN                                0x2
#define _SPI1INTF_RXOIF_POSITION                            0x2
#define _SPI1INTF_RXOIF_SIZE                                0x1
#define _SPI1INTF_RXOIF_LENGTH                              0x1
#define _SPI1INTF_RXOIF_MASK                                0x4
#define _SPI1INTF_EOSIF_POSN                                0x4
#define _SPI1INTF_EOSIF_POSITION                            0x4
#define _SPI1INTF_EOSIF_SIZE                                0x1
#define _SPI1INTF_EOSIF_LENGTH                              0x1
#define _SPI1INTF_EOSIF_MASK                                0x10
#define _SPI1INTF_SOSIF_POSN                                0x5
#define _SPI1INTF_SOSIF_POSITION                            0x5
#define _SPI1INTF_SOSIF_SIZE                                0x1
#define _SPI1INTF_SOSIF_LENGTH                              0x1
#define _SPI1INTF_SOSIF_MASK                                0x20
#define _SPI1INTF_TCZIF_POSN                                0x6
#define _SPI1INTF_TCZIF_POSITION                            0x6
#define _SPI1INTF_TCZIF_SIZE                                0x1
#define _SPI1INTF_TCZIF_LENGTH                              0x1
#define _SPI1INTF_TCZIF_MASK                                0x40
#define _SPI1INTF_SRMTIF_POSN                               0x7
#define _SPI1INTF_SRMTIF_POSITION                           0x7
#define _SPI1INTF_SRMTIF_SIZE                               0x1
#define _SPI1INTF_SRMTIF_LENGTH                             0x1
#define _SPI1INTF_SRMTIF_MASK                               0x80
#define _SPI1INTF_SPI1TXUIF_POSN                            0x1
#define _SPI1INTF_SPI1TXUIF_POSITION                        0x1
#define _SPI1INTF_SPI1TXUIF_SIZE                            0x1
#define _SPI1INTF_SPI1TXUIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TXUIF_MASK                            0x2
#define _SPI1INTF_SPI1RXOIF_POSN                            0x2
#define _SPI1INTF_SPI1RXOIF_POSITION                        0x2
#define _SPI1INTF_SPI1RXOIF_SIZE                            0x1
#define _SPI1INTF_SPI1RXOIF_LENGTH                          0x1
#define _SPI1INTF_SPI1RXOIF_MASK                            0x4
#define _SPI1INTF_SPI1EOSIF_POSN                            0x4
#define _SPI1INTF_SPI1EOSIF_POSITION                        0x4
#define _SPI1INTF_SPI1EOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1EOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1EOSIF_MASK                            0x10
#define _SPI1INTF_SPI1SOSIF_POSN                            0x5
#define _SPI1INTF_SPI1SOSIF_POSITION                        0x5
#define _SPI1INTF_SPI1SOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1SOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1SOSIF_MASK                            0x20
#define _SPI1INTF_SPI1TCZIF_POSN                            0x6
#define _SPI1INTF_SPI1TCZIF_POSITION                        0x6
#define _SPI1INTF_SPI1TCZIF_SIZE                            0x1
#define _SPI1INTF_SPI1TCZIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TCZIF_MASK                            0x40
#define _SPI1INTF_SPI1SRMTIF_POSN                           0x7
#define _SPI1INTF_SPI1SRMTIF_POSITION                       0x7
#define _SPI1INTF_SPI1SRMTIF_SIZE                           0x1
#define _SPI1INTF_SPI1SRMTIF_LENGTH                         0x1
#define _SPI1INTF_SPI1SRMTIF_MASK                           0x80

// Register: SPI1INTE
#define SPI1INTE SPI1INTE
extern volatile unsigned char           SPI1INTE            __at(0x08B);
#ifndef _LIB_BUILD
asm("SPI1INTE equ 08Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIE                  :1;
        unsigned RXOIE                  :1;
        unsigned                        :1;
        unsigned EOSIE                  :1;
        unsigned SOSIE                  :1;
        unsigned TCZIE                  :1;
        unsigned SRMTIE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIE              :1;
        unsigned SPI1RXOIE              :1;
        unsigned                        :1;
        unsigned SPI1EOSIE              :1;
        unsigned SPI1SOSIE              :1;
        unsigned SPI1TCZIE              :1;
        unsigned SPI1SRMTIE             :1;
    };
} SPI1INTEbits_t;
extern volatile SPI1INTEbits_t SPI1INTEbits __at(0x08B);
// bitfield macros
#define _SPI1INTE_TXUIE_POSN                                0x1
#define _SPI1INTE_TXUIE_POSITION                            0x1
#define _SPI1INTE_TXUIE_SIZE                                0x1
#define _SPI1INTE_TXUIE_LENGTH                              0x1
#define _SPI1INTE_TXUIE_MASK                                0x2
#define _SPI1INTE_RXOIE_POSN                                0x2
#define _SPI1INTE_RXOIE_POSITION                            0x2
#define _SPI1INTE_RXOIE_SIZE                                0x1
#define _SPI1INTE_RXOIE_LENGTH                              0x1
#define _SPI1INTE_RXOIE_MASK                                0x4
#define _SPI1INTE_EOSIE_POSN                                0x4
#define _SPI1INTE_EOSIE_POSITION                            0x4
#define _SPI1INTE_EOSIE_SIZE                                0x1
#define _SPI1INTE_EOSIE_LENGTH                              0x1
#define _SPI1INTE_EOSIE_MASK                                0x10
#define _SPI1INTE_SOSIE_POSN                                0x5
#define _SPI1INTE_SOSIE_POSITION                            0x5
#define _SPI1INTE_SOSIE_SIZE                                0x1
#define _SPI1INTE_SOSIE_LENGTH                              0x1
#define _SPI1INTE_SOSIE_MASK                                0x20
#define _SPI1INTE_TCZIE_POSN                                0x6
#define _SPI1INTE_TCZIE_POSITION                            0x6
#define _SPI1INTE_TCZIE_SIZE                                0x1
#define _SPI1INTE_TCZIE_LENGTH                              0x1
#define _SPI1INTE_TCZIE_MASK                                0x40
#define _SPI1INTE_SRMTIE_POSN                               0x7
#define _SPI1INTE_SRMTIE_POSITION                           0x7
#define _SPI1INTE_SRMTIE_SIZE                               0x1
#define _SPI1INTE_SRMTIE_LENGTH                             0x1
#define _SPI1INTE_SRMTIE_MASK                               0x80
#define _SPI1INTE_SPI1TXUIE_POSN                            0x1
#define _SPI1INTE_SPI1TXUIE_POSITION                        0x1
#define _SPI1INTE_SPI1TXUIE_SIZE                            0x1
#define _SPI1INTE_SPI1TXUIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TXUIE_MASK                            0x2
#define _SPI1INTE_SPI1RXOIE_POSN                            0x2
#define _SPI1INTE_SPI1RXOIE_POSITION                        0x2
#define _SPI1INTE_SPI1RXOIE_SIZE                            0x1
#define _SPI1INTE_SPI1RXOIE_LENGTH                          0x1
#define _SPI1INTE_SPI1RXOIE_MASK                            0x4
#define _SPI1INTE_SPI1EOSIE_POSN                            0x4
#define _SPI1INTE_SPI1EOSIE_POSITION                        0x4
#define _SPI1INTE_SPI1EOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1EOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1EOSIE_MASK                            0x10
#define _SPI1INTE_SPI1SOSIE_POSN                            0x5
#define _SPI1INTE_SPI1SOSIE_POSITION                        0x5
#define _SPI1INTE_SPI1SOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1SOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1SOSIE_MASK                            0x20
#define _SPI1INTE_SPI1TCZIE_POSN                            0x6
#define _SPI1INTE_SPI1TCZIE_POSITION                        0x6
#define _SPI1INTE_SPI1TCZIE_SIZE                            0x1
#define _SPI1INTE_SPI1TCZIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TCZIE_MASK                            0x40
#define _SPI1INTE_SPI1SRMTIE_POSN                           0x7
#define _SPI1INTE_SPI1SRMTIE_POSITION                       0x7
#define _SPI1INTE_SPI1SRMTIE_SIZE                           0x1
#define _SPI1INTE_SPI1SRMTIE_LENGTH                         0x1
#define _SPI1INTE_SPI1SRMTIE_MASK                           0x80

// Register: SPI1CLK
#define SPI1CLK SPI1CLK
extern volatile unsigned char           SPI1CLK             __at(0x08C);
#ifndef _LIB_BUILD
asm("SPI1CLK equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKSEL                 :8;
    };
    struct {
        unsigned CLKSEL0                :1;
        unsigned CLKSEL1                :1;
        unsigned CLKSEL2                :1;
        unsigned CLKSEL3                :1;
        unsigned CLKSEL4                :1;
    };
    struct {
        unsigned SPI1CLKSEL             :8;
    };
    struct {
        unsigned SPI1CLKSEL0            :1;
        unsigned SPI1CLKSEL1            :1;
        unsigned SPI1CLKSEL2            :1;
        unsigned SPI1CLKSEL3            :1;
        unsigned SPI1CLKSEL4            :1;
    };
} SPI1CLKbits_t;
extern volatile SPI1CLKbits_t SPI1CLKbits __at(0x08C);
// bitfield macros
#define _SPI1CLK_CLKSEL_POSN                                0x0
#define _SPI1CLK_CLKSEL_POSITION                            0x0
#define _SPI1CLK_CLKSEL_SIZE                                0x8
#define _SPI1CLK_CLKSEL_LENGTH                              0x8
#define _SPI1CLK_CLKSEL_MASK                                0xFF
#define _SPI1CLK_CLKSEL0_POSN                               0x0
#define _SPI1CLK_CLKSEL0_POSITION                           0x0
#define _SPI1CLK_CLKSEL0_SIZE                               0x1
#define _SPI1CLK_CLKSEL0_LENGTH                             0x1
#define _SPI1CLK_CLKSEL0_MASK                               0x1
#define _SPI1CLK_CLKSEL1_POSN                               0x1
#define _SPI1CLK_CLKSEL1_POSITION                           0x1
#define _SPI1CLK_CLKSEL1_SIZE                               0x1
#define _SPI1CLK_CLKSEL1_LENGTH                             0x1
#define _SPI1CLK_CLKSEL1_MASK                               0x2
#define _SPI1CLK_CLKSEL2_POSN                               0x2
#define _SPI1CLK_CLKSEL2_POSITION                           0x2
#define _SPI1CLK_CLKSEL2_SIZE                               0x1
#define _SPI1CLK_CLKSEL2_LENGTH                             0x1
#define _SPI1CLK_CLKSEL2_MASK                               0x4
#define _SPI1CLK_CLKSEL3_POSN                               0x3
#define _SPI1CLK_CLKSEL3_POSITION                           0x3
#define _SPI1CLK_CLKSEL3_SIZE                               0x1
#define _SPI1CLK_CLKSEL3_LENGTH                             0x1
#define _SPI1CLK_CLKSEL3_MASK                               0x8
#define _SPI1CLK_CLKSEL4_POSN                               0x4
#define _SPI1CLK_CLKSEL4_POSITION                           0x4
#define _SPI1CLK_CLKSEL4_SIZE                               0x1
#define _SPI1CLK_CLKSEL4_LENGTH                             0x1
#define _SPI1CLK_CLKSEL4_MASK                               0x10
#define _SPI1CLK_SPI1CLKSEL_POSN                            0x0
#define _SPI1CLK_SPI1CLKSEL_POSITION                        0x0
#define _SPI1CLK_SPI1CLKSEL_SIZE                            0x8
#define _SPI1CLK_SPI1CLKSEL_LENGTH                          0x8
#define _SPI1CLK_SPI1CLKSEL_MASK                            0xFF
#define _SPI1CLK_SPI1CLKSEL0_POSN                           0x0
#define _SPI1CLK_SPI1CLKSEL0_POSITION                       0x0
#define _SPI1CLK_SPI1CLKSEL0_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL0_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL0_MASK                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSN                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSITION                       0x1
#define _SPI1CLK_SPI1CLKSEL1_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL1_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL1_MASK                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSN                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSITION                       0x2
#define _SPI1CLK_SPI1CLKSEL2_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL2_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL2_MASK                           0x4
#define _SPI1CLK_SPI1CLKSEL3_POSN                           0x3
#define _SPI1CLK_SPI1CLKSEL3_POSITION                       0x3
#define _SPI1CLK_SPI1CLKSEL3_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL3_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL3_MASK                           0x8
#define _SPI1CLK_SPI1CLKSEL4_POSN                           0x4
#define _SPI1CLK_SPI1CLKSEL4_POSITION                       0x4
#define _SPI1CLK_SPI1CLKSEL4_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL4_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL4_MASK                           0x10

// Register: SPI2RXB
#define SPI2RXB SPI2RXB
extern volatile unsigned char           SPI2RXB             __at(0x08D);
#ifndef _LIB_BUILD
asm("SPI2RXB equ 08Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
    struct {
        unsigned RXB0                   :1;
        unsigned RXB1                   :1;
        unsigned RXB2                   :1;
        unsigned RXB3                   :1;
        unsigned RXB4                   :1;
        unsigned RXB5                   :1;
        unsigned RXB6                   :1;
        unsigned RXB7                   :1;
    };
} SPI2RXBbits_t;
extern volatile SPI2RXBbits_t SPI2RXBbits __at(0x08D);
// bitfield macros
#define _SPI2RXB_RXB_POSN                                   0x0
#define _SPI2RXB_RXB_POSITION                               0x0
#define _SPI2RXB_RXB_SIZE                                   0x8
#define _SPI2RXB_RXB_LENGTH                                 0x8
#define _SPI2RXB_RXB_MASK                                   0xFF
#define _SPI2RXB_RXB0_POSN                                  0x0
#define _SPI2RXB_RXB0_POSITION                              0x0
#define _SPI2RXB_RXB0_SIZE                                  0x1
#define _SPI2RXB_RXB0_LENGTH                                0x1
#define _SPI2RXB_RXB0_MASK                                  0x1
#define _SPI2RXB_RXB1_POSN                                  0x1
#define _SPI2RXB_RXB1_POSITION                              0x1
#define _SPI2RXB_RXB1_SIZE                                  0x1
#define _SPI2RXB_RXB1_LENGTH                                0x1
#define _SPI2RXB_RXB1_MASK                                  0x2
#define _SPI2RXB_RXB2_POSN                                  0x2
#define _SPI2RXB_RXB2_POSITION                              0x2
#define _SPI2RXB_RXB2_SIZE                                  0x1
#define _SPI2RXB_RXB2_LENGTH                                0x1
#define _SPI2RXB_RXB2_MASK                                  0x4
#define _SPI2RXB_RXB3_POSN                                  0x3
#define _SPI2RXB_RXB3_POSITION                              0x3
#define _SPI2RXB_RXB3_SIZE                                  0x1
#define _SPI2RXB_RXB3_LENGTH                                0x1
#define _SPI2RXB_RXB3_MASK                                  0x8
#define _SPI2RXB_RXB4_POSN                                  0x4
#define _SPI2RXB_RXB4_POSITION                              0x4
#define _SPI2RXB_RXB4_SIZE                                  0x1
#define _SPI2RXB_RXB4_LENGTH                                0x1
#define _SPI2RXB_RXB4_MASK                                  0x10
#define _SPI2RXB_RXB5_POSN                                  0x5
#define _SPI2RXB_RXB5_POSITION                              0x5
#define _SPI2RXB_RXB5_SIZE                                  0x1
#define _SPI2RXB_RXB5_LENGTH                                0x1
#define _SPI2RXB_RXB5_MASK                                  0x20
#define _SPI2RXB_RXB6_POSN                                  0x6
#define _SPI2RXB_RXB6_POSITION                              0x6
#define _SPI2RXB_RXB6_SIZE                                  0x1
#define _SPI2RXB_RXB6_LENGTH                                0x1
#define _SPI2RXB_RXB6_MASK                                  0x40
#define _SPI2RXB_RXB7_POSN                                  0x7
#define _SPI2RXB_RXB7_POSITION                              0x7
#define _SPI2RXB_RXB7_SIZE                                  0x1
#define _SPI2RXB_RXB7_LENGTH                                0x1
#define _SPI2RXB_RXB7_MASK                                  0x80

// Register: SPI2TXB
#define SPI2TXB SPI2TXB
extern volatile unsigned char           SPI2TXB             __at(0x08E);
#ifndef _LIB_BUILD
asm("SPI2TXB equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
    struct {
        unsigned TXB0                   :1;
        unsigned TXB1                   :1;
        unsigned TXB2                   :1;
        unsigned TXB3                   :1;
        unsigned TXB4                   :1;
        unsigned TXB5                   :1;
        unsigned TXB6                   :1;
        unsigned TXB7                   :1;
    };
} SPI2TXBbits_t;
extern volatile SPI2TXBbits_t SPI2TXBbits __at(0x08E);
// bitfield macros
#define _SPI2TXB_TXB_POSN                                   0x0
#define _SPI2TXB_TXB_POSITION                               0x0
#define _SPI2TXB_TXB_SIZE                                   0x8
#define _SPI2TXB_TXB_LENGTH                                 0x8
#define _SPI2TXB_TXB_MASK                                   0xFF
#define _SPI2TXB_TXB0_POSN                                  0x0
#define _SPI2TXB_TXB0_POSITION                              0x0
#define _SPI2TXB_TXB0_SIZE                                  0x1
#define _SPI2TXB_TXB0_LENGTH                                0x1
#define _SPI2TXB_TXB0_MASK                                  0x1
#define _SPI2TXB_TXB1_POSN                                  0x1
#define _SPI2TXB_TXB1_POSITION                              0x1
#define _SPI2TXB_TXB1_SIZE                                  0x1
#define _SPI2TXB_TXB1_LENGTH                                0x1
#define _SPI2TXB_TXB1_MASK                                  0x2
#define _SPI2TXB_TXB2_POSN                                  0x2
#define _SPI2TXB_TXB2_POSITION                              0x2
#define _SPI2TXB_TXB2_SIZE                                  0x1
#define _SPI2TXB_TXB2_LENGTH                                0x1
#define _SPI2TXB_TXB2_MASK                                  0x4
#define _SPI2TXB_TXB3_POSN                                  0x3
#define _SPI2TXB_TXB3_POSITION                              0x3
#define _SPI2TXB_TXB3_SIZE                                  0x1
#define _SPI2TXB_TXB3_LENGTH                                0x1
#define _SPI2TXB_TXB3_MASK                                  0x8
#define _SPI2TXB_TXB4_POSN                                  0x4
#define _SPI2TXB_TXB4_POSITION                              0x4
#define _SPI2TXB_TXB4_SIZE                                  0x1
#define _SPI2TXB_TXB4_LENGTH                                0x1
#define _SPI2TXB_TXB4_MASK                                  0x10
#define _SPI2TXB_TXB5_POSN                                  0x5
#define _SPI2TXB_TXB5_POSITION                              0x5
#define _SPI2TXB_TXB5_SIZE                                  0x1
#define _SPI2TXB_TXB5_LENGTH                                0x1
#define _SPI2TXB_TXB5_MASK                                  0x20
#define _SPI2TXB_TXB6_POSN                                  0x6
#define _SPI2TXB_TXB6_POSITION                              0x6
#define _SPI2TXB_TXB6_SIZE                                  0x1
#define _SPI2TXB_TXB6_LENGTH                                0x1
#define _SPI2TXB_TXB6_MASK                                  0x40
#define _SPI2TXB_TXB7_POSN                                  0x7
#define _SPI2TXB_TXB7_POSITION                              0x7
#define _SPI2TXB_TXB7_SIZE                                  0x1
#define _SPI2TXB_TXB7_LENGTH                                0x1
#define _SPI2TXB_TXB7_MASK                                  0x80

// Register: SPI2TCNT
#define SPI2TCNT SPI2TCNT
extern volatile unsigned short          SPI2TCNT            __at(0x08F);
#ifndef _LIB_BUILD
asm("SPI2TCNT equ 08Fh");
#endif

// Register: SPI2TCNTL
#define SPI2TCNTL SPI2TCNTL
extern volatile unsigned char           SPI2TCNTL           __at(0x08F);
#ifndef _LIB_BUILD
asm("SPI2TCNTL equ 08Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTL                  :8;
    };
} SPI2TCNTLbits_t;
extern volatile SPI2TCNTLbits_t SPI2TCNTLbits __at(0x08F);
// bitfield macros
#define _SPI2TCNTL_TCNTL_POSN                               0x0
#define _SPI2TCNTL_TCNTL_POSITION                           0x0
#define _SPI2TCNTL_TCNTL_SIZE                               0x8
#define _SPI2TCNTL_TCNTL_LENGTH                             0x8
#define _SPI2TCNTL_TCNTL_MASK                               0xFF

// Register: SPI2TCNTH
#define SPI2TCNTH SPI2TCNTH
extern volatile unsigned char           SPI2TCNTH           __at(0x090);
#ifndef _LIB_BUILD
asm("SPI2TCNTH equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTH                  :3;
    };
} SPI2TCNTHbits_t;
extern volatile SPI2TCNTHbits_t SPI2TCNTHbits __at(0x090);
// bitfield macros
#define _SPI2TCNTH_TCNTH_POSN                               0x0
#define _SPI2TCNTH_TCNTH_POSITION                           0x0
#define _SPI2TCNTH_TCNTH_SIZE                               0x3
#define _SPI2TCNTH_TCNTH_LENGTH                             0x3
#define _SPI2TCNTH_TCNTH_MASK                               0x7

// Register: SPI2CON0
#define SPI2CON0 SPI2CON0
extern volatile unsigned char           SPI2CON0            __at(0x091);
#ifndef _LIB_BUILD
asm("SPI2CON0 equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BMODE                  :1;
        unsigned MST                    :1;
        unsigned LSBF                   :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
    struct {
        unsigned SPI2BMODE              :1;
        unsigned SPI2MST                :1;
        unsigned SPI2LSBF               :1;
        unsigned                        :4;
        unsigned SPI2SPIEN              :1;
    };
} SPI2CON0bits_t;
extern volatile SPI2CON0bits_t SPI2CON0bits __at(0x091);
// bitfield macros
#define _SPI2CON0_BMODE_POSN                                0x0
#define _SPI2CON0_BMODE_POSITION                            0x0
#define _SPI2CON0_BMODE_SIZE                                0x1
#define _SPI2CON0_BMODE_LENGTH                              0x1
#define _SPI2CON0_BMODE_MASK                                0x1
#define _SPI2CON0_MST_POSN                                  0x1
#define _SPI2CON0_MST_POSITION                              0x1
#define _SPI2CON0_MST_SIZE                                  0x1
#define _SPI2CON0_MST_LENGTH                                0x1
#define _SPI2CON0_MST_MASK                                  0x2
#define _SPI2CON0_LSBF_POSN                                 0x2
#define _SPI2CON0_LSBF_POSITION                             0x2
#define _SPI2CON0_LSBF_SIZE                                 0x1
#define _SPI2CON0_LSBF_LENGTH                               0x1
#define _SPI2CON0_LSBF_MASK                                 0x4
#define _SPI2CON0_EN_POSN                                   0x7
#define _SPI2CON0_EN_POSITION                               0x7
#define _SPI2CON0_EN_SIZE                                   0x1
#define _SPI2CON0_EN_LENGTH                                 0x1
#define _SPI2CON0_EN_MASK                                   0x80
#define _SPI2CON0_SPI2BMODE_POSN                            0x0
#define _SPI2CON0_SPI2BMODE_POSITION                        0x0
#define _SPI2CON0_SPI2BMODE_SIZE                            0x1
#define _SPI2CON0_SPI2BMODE_LENGTH                          0x1
#define _SPI2CON0_SPI2BMODE_MASK                            0x1
#define _SPI2CON0_SPI2MST_POSN                              0x1
#define _SPI2CON0_SPI2MST_POSITION                          0x1
#define _SPI2CON0_SPI2MST_SIZE                              0x1
#define _SPI2CON0_SPI2MST_LENGTH                            0x1
#define _SPI2CON0_SPI2MST_MASK                              0x2
#define _SPI2CON0_SPI2LSBF_POSN                             0x2
#define _SPI2CON0_SPI2LSBF_POSITION                         0x2
#define _SPI2CON0_SPI2LSBF_SIZE                             0x1
#define _SPI2CON0_SPI2LSBF_LENGTH                           0x1
#define _SPI2CON0_SPI2LSBF_MASK                             0x4
#define _SPI2CON0_SPI2SPIEN_POSN                            0x7
#define _SPI2CON0_SPI2SPIEN_POSITION                        0x7
#define _SPI2CON0_SPI2SPIEN_SIZE                            0x1
#define _SPI2CON0_SPI2SPIEN_LENGTH                          0x1
#define _SPI2CON0_SPI2SPIEN_MASK                            0x80

// Register: SPI2CON1
#define SPI2CON1 SPI2CON1
extern volatile unsigned char           SPI2CON1            __at(0x092);
#ifndef _LIB_BUILD
asm("SPI2CON1 equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDOP                   :1;
        unsigned SDIP                   :1;
        unsigned SSP                    :1;
        unsigned                        :1;
        unsigned FST                    :1;
        unsigned CKP                    :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned SPI2SDOP               :1;
        unsigned SPI2SDIP               :1;
        unsigned SPI2SSP                :1;
        unsigned                        :1;
        unsigned SPI2FST                :1;
        unsigned SPI2CKP                :1;
        unsigned SPI2CKE                :1;
        unsigned SPI2SMP                :1;
    };
} SPI2CON1bits_t;
extern volatile SPI2CON1bits_t SPI2CON1bits __at(0x092);
// bitfield macros
#define _SPI2CON1_SDOP_POSN                                 0x0
#define _SPI2CON1_SDOP_POSITION                             0x0
#define _SPI2CON1_SDOP_SIZE                                 0x1
#define _SPI2CON1_SDOP_LENGTH                               0x1
#define _SPI2CON1_SDOP_MASK                                 0x1
#define _SPI2CON1_SDIP_POSN                                 0x1
#define _SPI2CON1_SDIP_POSITION                             0x1
#define _SPI2CON1_SDIP_SIZE                                 0x1
#define _SPI2CON1_SDIP_LENGTH                               0x1
#define _SPI2CON1_SDIP_MASK                                 0x2
#define _SPI2CON1_SSP_POSN                                  0x2
#define _SPI2CON1_SSP_POSITION                              0x2
#define _SPI2CON1_SSP_SIZE                                  0x1
#define _SPI2CON1_SSP_LENGTH                                0x1
#define _SPI2CON1_SSP_MASK                                  0x4
#define _SPI2CON1_FST_POSN                                  0x4
#define _SPI2CON1_FST_POSITION                              0x4
#define _SPI2CON1_FST_SIZE                                  0x1
#define _SPI2CON1_FST_LENGTH                                0x1
#define _SPI2CON1_FST_MASK                                  0x10
#define _SPI2CON1_CKP_POSN                                  0x5
#define _SPI2CON1_CKP_POSITION                              0x5
#define _SPI2CON1_CKP_SIZE                                  0x1
#define _SPI2CON1_CKP_LENGTH                                0x1
#define _SPI2CON1_CKP_MASK                                  0x20
#define _SPI2CON1_CKE_POSN                                  0x6
#define _SPI2CON1_CKE_POSITION                              0x6
#define _SPI2CON1_CKE_SIZE                                  0x1
#define _SPI2CON1_CKE_LENGTH                                0x1
#define _SPI2CON1_CKE_MASK                                  0x40
#define _SPI2CON1_SMP_POSN                                  0x7
#define _SPI2CON1_SMP_POSITION                              0x7
#define _SPI2CON1_SMP_SIZE                                  0x1
#define _SPI2CON1_SMP_LENGTH                                0x1
#define _SPI2CON1_SMP_MASK                                  0x80
#define _SPI2CON1_SPI2SDOP_POSN                             0x0
#define _SPI2CON1_SPI2SDOP_POSITION                         0x0
#define _SPI2CON1_SPI2SDOP_SIZE                             0x1
#define _SPI2CON1_SPI2SDOP_LENGTH                           0x1
#define _SPI2CON1_SPI2SDOP_MASK                             0x1
#define _SPI2CON1_SPI2SDIP_POSN                             0x1
#define _SPI2CON1_SPI2SDIP_POSITION                         0x1
#define _SPI2CON1_SPI2SDIP_SIZE                             0x1
#define _SPI2CON1_SPI2SDIP_LENGTH                           0x1
#define _SPI2CON1_SPI2SDIP_MASK                             0x2
#define _SPI2CON1_SPI2SSP_POSN                              0x2
#define _SPI2CON1_SPI2SSP_POSITION                          0x2
#define _SPI2CON1_SPI2SSP_SIZE                              0x1
#define _SPI2CON1_SPI2SSP_LENGTH                            0x1
#define _SPI2CON1_SPI2SSP_MASK                              0x4
#define _SPI2CON1_SPI2FST_POSN                              0x4
#define _SPI2CON1_SPI2FST_POSITION                          0x4
#define _SPI2CON1_SPI2FST_SIZE                              0x1
#define _SPI2CON1_SPI2FST_LENGTH                            0x1
#define _SPI2CON1_SPI2FST_MASK                              0x10
#define _SPI2CON1_SPI2CKP_POSN                              0x5
#define _SPI2CON1_SPI2CKP_POSITION                          0x5
#define _SPI2CON1_SPI2CKP_SIZE                              0x1
#define _SPI2CON1_SPI2CKP_LENGTH                            0x1
#define _SPI2CON1_SPI2CKP_MASK                              0x20
#define _SPI2CON1_SPI2CKE_POSN                              0x6
#define _SPI2CON1_SPI2CKE_POSITION                          0x6
#define _SPI2CON1_SPI2CKE_SIZE                              0x1
#define _SPI2CON1_SPI2CKE_LENGTH                            0x1
#define _SPI2CON1_SPI2CKE_MASK                              0x40
#define _SPI2CON1_SPI2SMP_POSN                              0x7
#define _SPI2CON1_SPI2SMP_POSITION                          0x7
#define _SPI2CON1_SPI2SMP_SIZE                              0x1
#define _SPI2CON1_SPI2SMP_LENGTH                            0x1
#define _SPI2CON1_SPI2SMP_MASK                              0x80

// Register: SPI2CON2
#define SPI2CON2 SPI2CON2
extern volatile unsigned char           SPI2CON2            __at(0x093);
#ifndef _LIB_BUILD
asm("SPI2CON2 equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXR                    :1;
        unsigned TXR                    :1;
        unsigned SSET                   :1;
        unsigned                        :3;
        unsigned SSFLT                  :1;
        unsigned BUSY                   :1;
    };
    struct {
        unsigned SPI2RXR                :1;
        unsigned SPI2TXR                :1;
        unsigned SPI2SSET               :1;
        unsigned                        :3;
        unsigned SPI2SSFLT              :1;
        unsigned SPI2BUSY               :1;
    };
} SPI2CON2bits_t;
extern volatile SPI2CON2bits_t SPI2CON2bits __at(0x093);
// bitfield macros
#define _SPI2CON2_RXR_POSN                                  0x0
#define _SPI2CON2_RXR_POSITION                              0x0
#define _SPI2CON2_RXR_SIZE                                  0x1
#define _SPI2CON2_RXR_LENGTH                                0x1
#define _SPI2CON2_RXR_MASK                                  0x1
#define _SPI2CON2_TXR_POSN                                  0x1
#define _SPI2CON2_TXR_POSITION                              0x1
#define _SPI2CON2_TXR_SIZE                                  0x1
#define _SPI2CON2_TXR_LENGTH                                0x1
#define _SPI2CON2_TXR_MASK                                  0x2
#define _SPI2CON2_SSET_POSN                                 0x2
#define _SPI2CON2_SSET_POSITION                             0x2
#define _SPI2CON2_SSET_SIZE                                 0x1
#define _SPI2CON2_SSET_LENGTH                               0x1
#define _SPI2CON2_SSET_MASK                                 0x4
#define _SPI2CON2_SSFLT_POSN                                0x6
#define _SPI2CON2_SSFLT_POSITION                            0x6
#define _SPI2CON2_SSFLT_SIZE                                0x1
#define _SPI2CON2_SSFLT_LENGTH                              0x1
#define _SPI2CON2_SSFLT_MASK                                0x40
#define _SPI2CON2_BUSY_POSN                                 0x7
#define _SPI2CON2_BUSY_POSITION                             0x7
#define _SPI2CON2_BUSY_SIZE                                 0x1
#define _SPI2CON2_BUSY_LENGTH                               0x1
#define _SPI2CON2_BUSY_MASK                                 0x80
#define _SPI2CON2_SPI2RXR_POSN                              0x0
#define _SPI2CON2_SPI2RXR_POSITION                          0x0
#define _SPI2CON2_SPI2RXR_SIZE                              0x1
#define _SPI2CON2_SPI2RXR_LENGTH                            0x1
#define _SPI2CON2_SPI2RXR_MASK                              0x1
#define _SPI2CON2_SPI2TXR_POSN                              0x1
#define _SPI2CON2_SPI2TXR_POSITION                          0x1
#define _SPI2CON2_SPI2TXR_SIZE                              0x1
#define _SPI2CON2_SPI2TXR_LENGTH                            0x1
#define _SPI2CON2_SPI2TXR_MASK                              0x2
#define _SPI2CON2_SPI2SSET_POSN                             0x2
#define _SPI2CON2_SPI2SSET_POSITION                         0x2
#define _SPI2CON2_SPI2SSET_SIZE                             0x1
#define _SPI2CON2_SPI2SSET_LENGTH                           0x1
#define _SPI2CON2_SPI2SSET_MASK                             0x4
#define _SPI2CON2_SPI2SSFLT_POSN                            0x6
#define _SPI2CON2_SPI2SSFLT_POSITION                        0x6
#define _SPI2CON2_SPI2SSFLT_SIZE                            0x1
#define _SPI2CON2_SPI2SSFLT_LENGTH                          0x1
#define _SPI2CON2_SPI2SSFLT_MASK                            0x40
#define _SPI2CON2_SPI2BUSY_POSN                             0x7
#define _SPI2CON2_SPI2BUSY_POSITION                         0x7
#define _SPI2CON2_SPI2BUSY_SIZE                             0x1
#define _SPI2CON2_SPI2BUSY_LENGTH                           0x1
#define _SPI2CON2_SPI2BUSY_MASK                             0x80

// Register: SPI2STATUS
#define SPI2STATUS SPI2STATUS
extern volatile unsigned char           SPI2STATUS          __at(0x094);
#ifndef _LIB_BUILD
asm("SPI2STATUS equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
    struct {
        unsigned SPI2RXBF               :1;
        unsigned                        :1;
        unsigned SPI2CLRBF              :1;
        unsigned SPI2RXRE               :1;
        unsigned                        :1;
        unsigned SPI2TXBE               :1;
        unsigned                        :1;
        unsigned SPI2TXWE               :1;
    };
} SPI2STATUSbits_t;
extern volatile SPI2STATUSbits_t SPI2STATUSbits __at(0x094);
// bitfield macros
#define _SPI2STATUS_RXBF_POSN                               0x0
#define _SPI2STATUS_RXBF_POSITION                           0x0
#define _SPI2STATUS_RXBF_SIZE                               0x1
#define _SPI2STATUS_RXBF_LENGTH                             0x1
#define _SPI2STATUS_RXBF_MASK                               0x1
#define _SPI2STATUS_CLRBF_POSN                              0x2
#define _SPI2STATUS_CLRBF_POSITION                          0x2
#define _SPI2STATUS_CLRBF_SIZE                              0x1
#define _SPI2STATUS_CLRBF_LENGTH                            0x1
#define _SPI2STATUS_CLRBF_MASK                              0x4
#define _SPI2STATUS_RXRE_POSN                               0x3
#define _SPI2STATUS_RXRE_POSITION                           0x3
#define _SPI2STATUS_RXRE_SIZE                               0x1
#define _SPI2STATUS_RXRE_LENGTH                             0x1
#define _SPI2STATUS_RXRE_MASK                               0x8
#define _SPI2STATUS_TXBE_POSN                               0x5
#define _SPI2STATUS_TXBE_POSITION                           0x5
#define _SPI2STATUS_TXBE_SIZE                               0x1
#define _SPI2STATUS_TXBE_LENGTH                             0x1
#define _SPI2STATUS_TXBE_MASK                               0x20
#define _SPI2STATUS_TXWE_POSN                               0x7
#define _SPI2STATUS_TXWE_POSITION                           0x7
#define _SPI2STATUS_TXWE_SIZE                               0x1
#define _SPI2STATUS_TXWE_LENGTH                             0x1
#define _SPI2STATUS_TXWE_MASK                               0x80
#define _SPI2STATUS_SPI2RXBF_POSN                           0x0
#define _SPI2STATUS_SPI2RXBF_POSITION                       0x0
#define _SPI2STATUS_SPI2RXBF_SIZE                           0x1
#define _SPI2STATUS_SPI2RXBF_LENGTH                         0x1
#define _SPI2STATUS_SPI2RXBF_MASK                           0x1
#define _SPI2STATUS_SPI2CLRBF_POSN                          0x2
#define _SPI2STATUS_SPI2CLRBF_POSITION                      0x2
#define _SPI2STATUS_SPI2CLRBF_SIZE                          0x1
#define _SPI2STATUS_SPI2CLRBF_LENGTH                        0x1
#define _SPI2STATUS_SPI2CLRBF_MASK                          0x4
#define _SPI2STATUS_SPI2RXRE_POSN                           0x3
#define _SPI2STATUS_SPI2RXRE_POSITION                       0x3
#define _SPI2STATUS_SPI2RXRE_SIZE                           0x1
#define _SPI2STATUS_SPI2RXRE_LENGTH                         0x1
#define _SPI2STATUS_SPI2RXRE_MASK                           0x8
#define _SPI2STATUS_SPI2TXBE_POSN                           0x5
#define _SPI2STATUS_SPI2TXBE_POSITION                       0x5
#define _SPI2STATUS_SPI2TXBE_SIZE                           0x1
#define _SPI2STATUS_SPI2TXBE_LENGTH                         0x1
#define _SPI2STATUS_SPI2TXBE_MASK                           0x20
#define _SPI2STATUS_SPI2TXWE_POSN                           0x7
#define _SPI2STATUS_SPI2TXWE_POSITION                       0x7
#define _SPI2STATUS_SPI2TXWE_SIZE                           0x1
#define _SPI2STATUS_SPI2TXWE_LENGTH                         0x1
#define _SPI2STATUS_SPI2TXWE_MASK                           0x80

// Register: SPI2TWIDTH
#define SPI2TWIDTH SPI2TWIDTH
extern volatile unsigned char           SPI2TWIDTH          __at(0x095);
#ifndef _LIB_BUILD
asm("SPI2TWIDTH equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TWIDTH                 :3;
    };
    struct {
        unsigned TWIDTH0                :1;
        unsigned TWIDTH1                :1;
        unsigned TWIDTH2                :1;
    };
} SPI2TWIDTHbits_t;
extern volatile SPI2TWIDTHbits_t SPI2TWIDTHbits __at(0x095);
// bitfield macros
#define _SPI2TWIDTH_TWIDTH_POSN                             0x0
#define _SPI2TWIDTH_TWIDTH_POSITION                         0x0
#define _SPI2TWIDTH_TWIDTH_SIZE                             0x3
#define _SPI2TWIDTH_TWIDTH_LENGTH                           0x3
#define _SPI2TWIDTH_TWIDTH_MASK                             0x7
#define _SPI2TWIDTH_TWIDTH0_POSN                            0x0
#define _SPI2TWIDTH_TWIDTH0_POSITION                        0x0
#define _SPI2TWIDTH_TWIDTH0_SIZE                            0x1
#define _SPI2TWIDTH_TWIDTH0_LENGTH                          0x1
#define _SPI2TWIDTH_TWIDTH0_MASK                            0x1
#define _SPI2TWIDTH_TWIDTH1_POSN                            0x1
#define _SPI2TWIDTH_TWIDTH1_POSITION                        0x1
#define _SPI2TWIDTH_TWIDTH1_SIZE                            0x1
#define _SPI2TWIDTH_TWIDTH1_LENGTH                          0x1
#define _SPI2TWIDTH_TWIDTH1_MASK                            0x2
#define _SPI2TWIDTH_TWIDTH2_POSN                            0x2
#define _SPI2TWIDTH_TWIDTH2_POSITION                        0x2
#define _SPI2TWIDTH_TWIDTH2_SIZE                            0x1
#define _SPI2TWIDTH_TWIDTH2_LENGTH                          0x1
#define _SPI2TWIDTH_TWIDTH2_MASK                            0x4

// Register: SPI2BAUD
#define SPI2BAUD SPI2BAUD
extern volatile unsigned char           SPI2BAUD            __at(0x096);
#ifndef _LIB_BUILD
asm("SPI2BAUD equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAUD                   :8;
    };
    struct {
        unsigned BAUD0                  :1;
        unsigned BAUD1                  :1;
        unsigned BAUD2                  :1;
        unsigned BAUD3                  :1;
        unsigned BAUD4                  :1;
        unsigned BAUD5                  :1;
        unsigned BAUD6                  :1;
        unsigned BAUD7                  :1;
    };
} SPI2BAUDbits_t;
extern volatile SPI2BAUDbits_t SPI2BAUDbits __at(0x096);
// bitfield macros
#define _SPI2BAUD_BAUD_POSN                                 0x0
#define _SPI2BAUD_BAUD_POSITION                             0x0
#define _SPI2BAUD_BAUD_SIZE                                 0x8
#define _SPI2BAUD_BAUD_LENGTH                               0x8
#define _SPI2BAUD_BAUD_MASK                                 0xFF
#define _SPI2BAUD_BAUD0_POSN                                0x0
#define _SPI2BAUD_BAUD0_POSITION                            0x0
#define _SPI2BAUD_BAUD0_SIZE                                0x1
#define _SPI2BAUD_BAUD0_LENGTH                              0x1
#define _SPI2BAUD_BAUD0_MASK                                0x1
#define _SPI2BAUD_BAUD1_POSN                                0x1
#define _SPI2BAUD_BAUD1_POSITION                            0x1
#define _SPI2BAUD_BAUD1_SIZE                                0x1
#define _SPI2BAUD_BAUD1_LENGTH                              0x1
#define _SPI2BAUD_BAUD1_MASK                                0x2
#define _SPI2BAUD_BAUD2_POSN                                0x2
#define _SPI2BAUD_BAUD2_POSITION                            0x2
#define _SPI2BAUD_BAUD2_SIZE                                0x1
#define _SPI2BAUD_BAUD2_LENGTH                              0x1
#define _SPI2BAUD_BAUD2_MASK                                0x4
#define _SPI2BAUD_BAUD3_POSN                                0x3
#define _SPI2BAUD_BAUD3_POSITION                            0x3
#define _SPI2BAUD_BAUD3_SIZE                                0x1
#define _SPI2BAUD_BAUD3_LENGTH                              0x1
#define _SPI2BAUD_BAUD3_MASK                                0x8
#define _SPI2BAUD_BAUD4_POSN                                0x4
#define _SPI2BAUD_BAUD4_POSITION                            0x4
#define _SPI2BAUD_BAUD4_SIZE                                0x1
#define _SPI2BAUD_BAUD4_LENGTH                              0x1
#define _SPI2BAUD_BAUD4_MASK                                0x10
#define _SPI2BAUD_BAUD5_POSN                                0x5
#define _SPI2BAUD_BAUD5_POSITION                            0x5
#define _SPI2BAUD_BAUD5_SIZE                                0x1
#define _SPI2BAUD_BAUD5_LENGTH                              0x1
#define _SPI2BAUD_BAUD5_MASK                                0x20
#define _SPI2BAUD_BAUD6_POSN                                0x6
#define _SPI2BAUD_BAUD6_POSITION                            0x6
#define _SPI2BAUD_BAUD6_SIZE                                0x1
#define _SPI2BAUD_BAUD6_LENGTH                              0x1
#define _SPI2BAUD_BAUD6_MASK                                0x40
#define _SPI2BAUD_BAUD7_POSN                                0x7
#define _SPI2BAUD_BAUD7_POSITION                            0x7
#define _SPI2BAUD_BAUD7_SIZE                                0x1
#define _SPI2BAUD_BAUD7_LENGTH                              0x1
#define _SPI2BAUD_BAUD7_MASK                                0x80

// Register: SPI2INTF
#define SPI2INTF SPI2INTF
extern volatile unsigned char           SPI2INTF            __at(0x097);
#ifndef _LIB_BUILD
asm("SPI2INTF equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIF                  :1;
        unsigned RXOIF                  :1;
        unsigned                        :1;
        unsigned EOSIF                  :1;
        unsigned SOSIF                  :1;
        unsigned TCZIF                  :1;
        unsigned SRMTIF                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI2TXUIF              :1;
        unsigned SPI2RXOIF              :1;
        unsigned                        :1;
        unsigned SPI2EOSIF              :1;
        unsigned SPI2SOSIF              :1;
        unsigned SPI2TCZIF              :1;
        unsigned SPI2SRMTIF             :1;
    };
} SPI2INTFbits_t;
extern volatile SPI2INTFbits_t SPI2INTFbits __at(0x097);
// bitfield macros
#define _SPI2INTF_TXUIF_POSN                                0x1
#define _SPI2INTF_TXUIF_POSITION                            0x1
#define _SPI2INTF_TXUIF_SIZE                                0x1
#define _SPI2INTF_TXUIF_LENGTH                              0x1
#define _SPI2INTF_TXUIF_MASK                                0x2
#define _SPI2INTF_RXOIF_POSN                                0x2
#define _SPI2INTF_RXOIF_POSITION                            0x2
#define _SPI2INTF_RXOIF_SIZE                                0x1
#define _SPI2INTF_RXOIF_LENGTH                              0x1
#define _SPI2INTF_RXOIF_MASK                                0x4
#define _SPI2INTF_EOSIF_POSN                                0x4
#define _SPI2INTF_EOSIF_POSITION                            0x4
#define _SPI2INTF_EOSIF_SIZE                                0x1
#define _SPI2INTF_EOSIF_LENGTH                              0x1
#define _SPI2INTF_EOSIF_MASK                                0x10
#define _SPI2INTF_SOSIF_POSN                                0x5
#define _SPI2INTF_SOSIF_POSITION                            0x5
#define _SPI2INTF_SOSIF_SIZE                                0x1
#define _SPI2INTF_SOSIF_LENGTH                              0x1
#define _SPI2INTF_SOSIF_MASK                                0x20
#define _SPI2INTF_TCZIF_POSN                                0x6
#define _SPI2INTF_TCZIF_POSITION                            0x6
#define _SPI2INTF_TCZIF_SIZE                                0x1
#define _SPI2INTF_TCZIF_LENGTH                              0x1
#define _SPI2INTF_TCZIF_MASK                                0x40
#define _SPI2INTF_SRMTIF_POSN                               0x7
#define _SPI2INTF_SRMTIF_POSITION                           0x7
#define _SPI2INTF_SRMTIF_SIZE                               0x1
#define _SPI2INTF_SRMTIF_LENGTH                             0x1
#define _SPI2INTF_SRMTIF_MASK                               0x80
#define _SPI2INTF_SPI2TXUIF_POSN                            0x1
#define _SPI2INTF_SPI2TXUIF_POSITION                        0x1
#define _SPI2INTF_SPI2TXUIF_SIZE                            0x1
#define _SPI2INTF_SPI2TXUIF_LENGTH                          0x1
#define _SPI2INTF_SPI2TXUIF_MASK                            0x2
#define _SPI2INTF_SPI2RXOIF_POSN                            0x2
#define _SPI2INTF_SPI2RXOIF_POSITION                        0x2
#define _SPI2INTF_SPI2RXOIF_SIZE                            0x1
#define _SPI2INTF_SPI2RXOIF_LENGTH                          0x1
#define _SPI2INTF_SPI2RXOIF_MASK                            0x4
#define _SPI2INTF_SPI2EOSIF_POSN                            0x4
#define _SPI2INTF_SPI2EOSIF_POSITION                        0x4
#define _SPI2INTF_SPI2EOSIF_SIZE                            0x1
#define _SPI2INTF_SPI2EOSIF_LENGTH                          0x1
#define _SPI2INTF_SPI2EOSIF_MASK                            0x10
#define _SPI2INTF_SPI2SOSIF_POSN                            0x5
#define _SPI2INTF_SPI2SOSIF_POSITION                        0x5
#define _SPI2INTF_SPI2SOSIF_SIZE                            0x1
#define _SPI2INTF_SPI2SOSIF_LENGTH                          0x1
#define _SPI2INTF_SPI2SOSIF_MASK                            0x20
#define _SPI2INTF_SPI2TCZIF_POSN                            0x6
#define _SPI2INTF_SPI2TCZIF_POSITION                        0x6
#define _SPI2INTF_SPI2TCZIF_SIZE                            0x1
#define _SPI2INTF_SPI2TCZIF_LENGTH                          0x1
#define _SPI2INTF_SPI2TCZIF_MASK                            0x40
#define _SPI2INTF_SPI2SRMTIF_POSN                           0x7
#define _SPI2INTF_SPI2SRMTIF_POSITION                       0x7
#define _SPI2INTF_SPI2SRMTIF_SIZE                           0x1
#define _SPI2INTF_SPI2SRMTIF_LENGTH                         0x1
#define _SPI2INTF_SPI2SRMTIF_MASK                           0x80

// Register: SPI2INTE
#define SPI2INTE SPI2INTE
extern volatile unsigned char           SPI2INTE            __at(0x098);
#ifndef _LIB_BUILD
asm("SPI2INTE equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIE                  :1;
        unsigned RXOIE                  :1;
        unsigned                        :1;
        unsigned EOSIE                  :1;
        unsigned SOSIE                  :1;
        unsigned TCZIE                  :1;
        unsigned SRMTIE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI2TXUIE              :1;
        unsigned SPI2RXOIE              :1;
        unsigned                        :1;
        unsigned SPI2EOSIE              :1;
        unsigned SPI2SOSIE              :1;
        unsigned SPI2TCZIE              :1;
        unsigned SPI2SRMTIE             :1;
    };
} SPI2INTEbits_t;
extern volatile SPI2INTEbits_t SPI2INTEbits __at(0x098);
// bitfield macros
#define _SPI2INTE_TXUIE_POSN                                0x1
#define _SPI2INTE_TXUIE_POSITION                            0x1
#define _SPI2INTE_TXUIE_SIZE                                0x1
#define _SPI2INTE_TXUIE_LENGTH                              0x1
#define _SPI2INTE_TXUIE_MASK                                0x2
#define _SPI2INTE_RXOIE_POSN                                0x2
#define _SPI2INTE_RXOIE_POSITION                            0x2
#define _SPI2INTE_RXOIE_SIZE                                0x1
#define _SPI2INTE_RXOIE_LENGTH                              0x1
#define _SPI2INTE_RXOIE_MASK                                0x4
#define _SPI2INTE_EOSIE_POSN                                0x4
#define _SPI2INTE_EOSIE_POSITION                            0x4
#define _SPI2INTE_EOSIE_SIZE                                0x1
#define _SPI2INTE_EOSIE_LENGTH                              0x1
#define _SPI2INTE_EOSIE_MASK                                0x10
#define _SPI2INTE_SOSIE_POSN                                0x5
#define _SPI2INTE_SOSIE_POSITION                            0x5
#define _SPI2INTE_SOSIE_SIZE                                0x1
#define _SPI2INTE_SOSIE_LENGTH                              0x1
#define _SPI2INTE_SOSIE_MASK                                0x20
#define _SPI2INTE_TCZIE_POSN                                0x6
#define _SPI2INTE_TCZIE_POSITION                            0x6
#define _SPI2INTE_TCZIE_SIZE                                0x1
#define _SPI2INTE_TCZIE_LENGTH                              0x1
#define _SPI2INTE_TCZIE_MASK                                0x40
#define _SPI2INTE_SRMTIE_POSN                               0x7
#define _SPI2INTE_SRMTIE_POSITION                           0x7
#define _SPI2INTE_SRMTIE_SIZE                               0x1
#define _SPI2INTE_SRMTIE_LENGTH                             0x1
#define _SPI2INTE_SRMTIE_MASK                               0x80
#define _SPI2INTE_SPI2TXUIE_POSN                            0x1
#define _SPI2INTE_SPI2TXUIE_POSITION                        0x1
#define _SPI2INTE_SPI2TXUIE_SIZE                            0x1
#define _SPI2INTE_SPI2TXUIE_LENGTH                          0x1
#define _SPI2INTE_SPI2TXUIE_MASK                            0x2
#define _SPI2INTE_SPI2RXOIE_POSN                            0x2
#define _SPI2INTE_SPI2RXOIE_POSITION                        0x2
#define _SPI2INTE_SPI2RXOIE_SIZE                            0x1
#define _SPI2INTE_SPI2RXOIE_LENGTH                          0x1
#define _SPI2INTE_SPI2RXOIE_MASK                            0x4
#define _SPI2INTE_SPI2EOSIE_POSN                            0x4
#define _SPI2INTE_SPI2EOSIE_POSITION                        0x4
#define _SPI2INTE_SPI2EOSIE_SIZE                            0x1
#define _SPI2INTE_SPI2EOSIE_LENGTH                          0x1
#define _SPI2INTE_SPI2EOSIE_MASK                            0x10
#define _SPI2INTE_SPI2SOSIE_POSN                            0x5
#define _SPI2INTE_SPI2SOSIE_POSITION                        0x5
#define _SPI2INTE_SPI2SOSIE_SIZE                            0x1
#define _SPI2INTE_SPI2SOSIE_LENGTH                          0x1
#define _SPI2INTE_SPI2SOSIE_MASK                            0x20
#define _SPI2INTE_SPI2TCZIE_POSN                            0x6
#define _SPI2INTE_SPI2TCZIE_POSITION                        0x6
#define _SPI2INTE_SPI2TCZIE_SIZE                            0x1
#define _SPI2INTE_SPI2TCZIE_LENGTH                          0x1
#define _SPI2INTE_SPI2TCZIE_MASK                            0x40
#define _SPI2INTE_SPI2SRMTIE_POSN                           0x7
#define _SPI2INTE_SPI2SRMTIE_POSITION                       0x7
#define _SPI2INTE_SPI2SRMTIE_SIZE                           0x1
#define _SPI2INTE_SPI2SRMTIE_LENGTH                         0x1
#define _SPI2INTE_SPI2SRMTIE_MASK                           0x80

// Register: SPI2CLK
#define SPI2CLK SPI2CLK
extern volatile unsigned char           SPI2CLK             __at(0x099);
#ifndef _LIB_BUILD
asm("SPI2CLK equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKSEL                 :8;
    };
    struct {
        unsigned CLKSEL0                :1;
        unsigned CLKSEL1                :1;
        unsigned CLKSEL2                :1;
        unsigned CLKSEL3                :1;
        unsigned CLKSEL4                :1;
    };
    struct {
        unsigned SPI2CLKSEL             :8;
    };
    struct {
        unsigned SPI2CLKSEL0            :1;
        unsigned SPI2CLKSEL1            :1;
        unsigned SPI2CLKSEL2            :1;
        unsigned SPI2CLKSEL3            :1;
        unsigned SPI2CLKSEL4            :1;
    };
} SPI2CLKbits_t;
extern volatile SPI2CLKbits_t SPI2CLKbits __at(0x099);
// bitfield macros
#define _SPI2CLK_CLKSEL_POSN                                0x0
#define _SPI2CLK_CLKSEL_POSITION                            0x0
#define _SPI2CLK_CLKSEL_SIZE                                0x8
#define _SPI2CLK_CLKSEL_LENGTH                              0x8
#define _SPI2CLK_CLKSEL_MASK                                0xFF
#define _SPI2CLK_CLKSEL0_POSN                               0x0
#define _SPI2CLK_CLKSEL0_POSITION                           0x0
#define _SPI2CLK_CLKSEL0_SIZE                               0x1
#define _SPI2CLK_CLKSEL0_LENGTH                             0x1
#define _SPI2CLK_CLKSEL0_MASK                               0x1
#define _SPI2CLK_CLKSEL1_POSN                               0x1
#define _SPI2CLK_CLKSEL1_POSITION                           0x1
#define _SPI2CLK_CLKSEL1_SIZE                               0x1
#define _SPI2CLK_CLKSEL1_LENGTH                             0x1
#define _SPI2CLK_CLKSEL1_MASK                               0x2
#define _SPI2CLK_CLKSEL2_POSN                               0x2
#define _SPI2CLK_CLKSEL2_POSITION                           0x2
#define _SPI2CLK_CLKSEL2_SIZE                               0x1
#define _SPI2CLK_CLKSEL2_LENGTH                             0x1
#define _SPI2CLK_CLKSEL2_MASK                               0x4
#define _SPI2CLK_CLKSEL3_POSN                               0x3
#define _SPI2CLK_CLKSEL3_POSITION                           0x3
#define _SPI2CLK_CLKSEL3_SIZE                               0x1
#define _SPI2CLK_CLKSEL3_LENGTH                             0x1
#define _SPI2CLK_CLKSEL3_MASK                               0x8
#define _SPI2CLK_CLKSEL4_POSN                               0x4
#define _SPI2CLK_CLKSEL4_POSITION                           0x4
#define _SPI2CLK_CLKSEL4_SIZE                               0x1
#define _SPI2CLK_CLKSEL4_LENGTH                             0x1
#define _SPI2CLK_CLKSEL4_MASK                               0x10
#define _SPI2CLK_SPI2CLKSEL_POSN                            0x0
#define _SPI2CLK_SPI2CLKSEL_POSITION                        0x0
#define _SPI2CLK_SPI2CLKSEL_SIZE                            0x8
#define _SPI2CLK_SPI2CLKSEL_LENGTH                          0x8
#define _SPI2CLK_SPI2CLKSEL_MASK                            0xFF
#define _SPI2CLK_SPI2CLKSEL0_POSN                           0x0
#define _SPI2CLK_SPI2CLKSEL0_POSITION                       0x0
#define _SPI2CLK_SPI2CLKSEL0_SIZE                           0x1
#define _SPI2CLK_SPI2CLKSEL0_LENGTH                         0x1
#define _SPI2CLK_SPI2CLKSEL0_MASK                           0x1
#define _SPI2CLK_SPI2CLKSEL1_POSN                           0x1
#define _SPI2CLK_SPI2CLKSEL1_POSITION                       0x1
#define _SPI2CLK_SPI2CLKSEL1_SIZE                           0x1
#define _SPI2CLK_SPI2CLKSEL1_LENGTH                         0x1
#define _SPI2CLK_SPI2CLKSEL1_MASK                           0x2
#define _SPI2CLK_SPI2CLKSEL2_POSN                           0x2
#define _SPI2CLK_SPI2CLKSEL2_POSITION                       0x2
#define _SPI2CLK_SPI2CLKSEL2_SIZE                           0x1
#define _SPI2CLK_SPI2CLKSEL2_LENGTH                         0x1
#define _SPI2CLK_SPI2CLKSEL2_MASK                           0x4
#define _SPI2CLK_SPI2CLKSEL3_POSN                           0x3
#define _SPI2CLK_SPI2CLKSEL3_POSITION                       0x3
#define _SPI2CLK_SPI2CLKSEL3_SIZE                           0x1
#define _SPI2CLK_SPI2CLKSEL3_LENGTH                         0x1
#define _SPI2CLK_SPI2CLKSEL3_MASK                           0x8
#define _SPI2CLK_SPI2CLKSEL4_POSN                           0x4
#define _SPI2CLK_SPI2CLKSEL4_POSITION                       0x4
#define _SPI2CLK_SPI2CLKSEL4_SIZE                           0x1
#define _SPI2CLK_SPI2CLKSEL4_LENGTH                         0x1
#define _SPI2CLK_SPI2CLKSEL4_MASK                           0x10

// Register: ACTCON
#define ACTCON ACTCON
extern volatile unsigned char           ACTCON              __at(0x0AC);
#ifndef _LIB_BUILD
asm("ACTCON equ 0ACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ORS                    :1;
        unsigned                        :1;
        unsigned LOCK                   :1;
        unsigned                        :2;
        unsigned UD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :1;
        unsigned ACTORS                 :1;
        unsigned                        :1;
        unsigned ACTLOCK                :1;
        unsigned                        :2;
        unsigned ACTUD                  :1;
        unsigned ACTEN                  :1;
    };
} ACTCONbits_t;
extern volatile ACTCONbits_t ACTCONbits __at(0x0AC);
// bitfield macros
#define _ACTCON_ORS_POSN                                    0x1
#define _ACTCON_ORS_POSITION                                0x1
#define _ACTCON_ORS_SIZE                                    0x1
#define _ACTCON_ORS_LENGTH                                  0x1
#define _ACTCON_ORS_MASK                                    0x2
#define _ACTCON_LOCK_POSN                                   0x3
#define _ACTCON_LOCK_POSITION                               0x3
#define _ACTCON_LOCK_SIZE                                   0x1
#define _ACTCON_LOCK_LENGTH                                 0x1
#define _ACTCON_LOCK_MASK                                   0x8
#define _ACTCON_UD_POSN                                     0x6
#define _ACTCON_UD_POSITION                                 0x6
#define _ACTCON_UD_SIZE                                     0x1
#define _ACTCON_UD_LENGTH                                   0x1
#define _ACTCON_UD_MASK                                     0x40
#define _ACTCON_EN_POSN                                     0x7
#define _ACTCON_EN_POSITION                                 0x7
#define _ACTCON_EN_SIZE                                     0x1
#define _ACTCON_EN_LENGTH                                   0x1
#define _ACTCON_EN_MASK                                     0x80
#define _ACTCON_ACTORS_POSN                                 0x1
#define _ACTCON_ACTORS_POSITION                             0x1
#define _ACTCON_ACTORS_SIZE                                 0x1
#define _ACTCON_ACTORS_LENGTH                               0x1
#define _ACTCON_ACTORS_MASK                                 0x2
#define _ACTCON_ACTLOCK_POSN                                0x3
#define _ACTCON_ACTLOCK_POSITION                            0x3
#define _ACTCON_ACTLOCK_SIZE                                0x1
#define _ACTCON_ACTLOCK_LENGTH                              0x1
#define _ACTCON_ACTLOCK_MASK                                0x8
#define _ACTCON_ACTUD_POSN                                  0x6
#define _ACTCON_ACTUD_POSITION                              0x6
#define _ACTCON_ACTUD_SIZE                                  0x1
#define _ACTCON_ACTUD_LENGTH                                0x1
#define _ACTCON_ACTUD_MASK                                  0x40
#define _ACTCON_ACTEN_POSN                                  0x7
#define _ACTCON_ACTEN_POSITION                              0x7
#define _ACTCON_ACTEN_SIZE                                  0x1
#define _ACTCON_ACTEN_LENGTH                                0x1
#define _ACTCON_ACTEN_MASK                                  0x80

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x0AD);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 0ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x0AD);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x0AE);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 0AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x0AE);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x0AF);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 0AFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x0AF);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x0B0);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0B0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x0B0);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x0B1);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0B1h");
#endif
// aliases
extern volatile unsigned char           OSCFREQ             __at(0x0B1);
#ifndef _LIB_BUILD
asm("OSCFREQ equ 0B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x0B1);
// bitfield macros
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x4
#define _OSCFRQ_HFFRQ_LENGTH                                0x4
#define _OSCFRQ_HFFRQ_MASK                                  0xF
#define _OSCFRQ_FRQ0_POSN                                   0x0
#define _OSCFRQ_FRQ0_POSITION                               0x0
#define _OSCFRQ_FRQ0_SIZE                                   0x1
#define _OSCFRQ_FRQ0_LENGTH                                 0x1
#define _OSCFRQ_FRQ0_MASK                                   0x1
#define _OSCFRQ_FRQ1_POSN                                   0x1
#define _OSCFRQ_FRQ1_POSITION                               0x1
#define _OSCFRQ_FRQ1_SIZE                                   0x1
#define _OSCFRQ_FRQ1_LENGTH                                 0x1
#define _OSCFRQ_FRQ1_MASK                                   0x2
#define _OSCFRQ_FRQ2_POSN                                   0x2
#define _OSCFRQ_FRQ2_POSITION                               0x2
#define _OSCFRQ_FRQ2_SIZE                                   0x1
#define _OSCFRQ_FRQ2_LENGTH                                 0x1
#define _OSCFRQ_FRQ2_MASK                                   0x4
#define _OSCFRQ_FRQ3_POSN                                   0x3
#define _OSCFRQ_FRQ3_POSITION                               0x3
#define _OSCFRQ_FRQ3_SIZE                                   0x1
#define _OSCFRQ_FRQ3_LENGTH                                 0x1
#define _OSCFRQ_FRQ3_MASK                                   0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
} OSCFREQbits_t;
extern volatile OSCFREQbits_t OSCFREQbits __at(0x0B1);
// bitfield macros
#define _OSCFREQ_HFFRQ_POSN                                 0x0
#define _OSCFREQ_HFFRQ_POSITION                             0x0
#define _OSCFREQ_HFFRQ_SIZE                                 0x4
#define _OSCFREQ_HFFRQ_LENGTH                               0x4
#define _OSCFREQ_HFFRQ_MASK                                 0xF
#define _OSCFREQ_FRQ0_POSN                                  0x0
#define _OSCFREQ_FRQ0_POSITION                              0x0
#define _OSCFREQ_FRQ0_SIZE                                  0x1
#define _OSCFREQ_FRQ0_LENGTH                                0x1
#define _OSCFREQ_FRQ0_MASK                                  0x1
#define _OSCFREQ_FRQ1_POSN                                  0x1
#define _OSCFREQ_FRQ1_POSITION                              0x1
#define _OSCFREQ_FRQ1_SIZE                                  0x1
#define _OSCFREQ_FRQ1_LENGTH                                0x1
#define _OSCFREQ_FRQ1_MASK                                  0x2
#define _OSCFREQ_FRQ2_POSN                                  0x2
#define _OSCFREQ_FRQ2_POSITION                              0x2
#define _OSCFREQ_FRQ2_SIZE                                  0x1
#define _OSCFREQ_FRQ2_LENGTH                                0x1
#define _OSCFREQ_FRQ2_MASK                                  0x4
#define _OSCFREQ_FRQ3_POSN                                  0x3
#define _OSCFREQ_FRQ3_POSITION                              0x3
#define _OSCFREQ_FRQ3_SIZE                                  0x1
#define _OSCFREQ_FRQ3_LENGTH                                0x1
#define _OSCFREQ_FRQ3_MASK                                  0x8

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x0B2);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0B2h");
#endif
// aliases
extern volatile unsigned char           OSCSTAT1            __at(0x0B2);
#ifndef _LIB_BUILD
asm("OSCSTAT1 equ 0B2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x0B2);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTAT1bits_t;
extern volatile OSCSTAT1bits_t OSCSTAT1bits __at(0x0B2);
// bitfield macros
#define _OSCSTAT1_PLLR_POSN                                 0x0
#define _OSCSTAT1_PLLR_POSITION                             0x0
#define _OSCSTAT1_PLLR_SIZE                                 0x1
#define _OSCSTAT1_PLLR_LENGTH                               0x1
#define _OSCSTAT1_PLLR_MASK                                 0x1
#define _OSCSTAT1_ADOR_POSN                                 0x2
#define _OSCSTAT1_ADOR_POSITION                             0x2
#define _OSCSTAT1_ADOR_SIZE                                 0x1
#define _OSCSTAT1_ADOR_LENGTH                               0x1
#define _OSCSTAT1_ADOR_MASK                                 0x4
#define _OSCSTAT1_SOR_POSN                                  0x3
#define _OSCSTAT1_SOR_POSITION                              0x3
#define _OSCSTAT1_SOR_SIZE                                  0x1
#define _OSCSTAT1_SOR_LENGTH                                0x1
#define _OSCSTAT1_SOR_MASK                                  0x8
#define _OSCSTAT1_LFOR_POSN                                 0x4
#define _OSCSTAT1_LFOR_POSITION                             0x4
#define _OSCSTAT1_LFOR_SIZE                                 0x1
#define _OSCSTAT1_LFOR_LENGTH                               0x1
#define _OSCSTAT1_LFOR_MASK                                 0x10
#define _OSCSTAT1_MFOR_POSN                                 0x5
#define _OSCSTAT1_MFOR_POSITION                             0x5
#define _OSCSTAT1_MFOR_SIZE                                 0x1
#define _OSCSTAT1_MFOR_LENGTH                               0x1
#define _OSCSTAT1_MFOR_MASK                                 0x20
#define _OSCSTAT1_HFOR_POSN                                 0x6
#define _OSCSTAT1_HFOR_POSITION                             0x6
#define _OSCSTAT1_HFOR_SIZE                                 0x1
#define _OSCSTAT1_HFOR_LENGTH                               0x1
#define _OSCSTAT1_HFOR_MASK                                 0x40
#define _OSCSTAT1_EXTOR_POSN                                0x7
#define _OSCSTAT1_EXTOR_POSITION                            0x7
#define _OSCSTAT1_EXTOR_SIZE                                0x1
#define _OSCSTAT1_EXTOR_LENGTH                              0x1
#define _OSCSTAT1_EXTOR_MASK                                0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x0B3);
#ifndef _LIB_BUILD
asm("OSCEN equ 0B3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLEN                  :1;
        unsigned                        :1;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x0B3);
// bitfield macros
#define _OSCEN_PLLEN_POSN                                   0x0
#define _OSCEN_PLLEN_POSITION                               0x0
#define _OSCEN_PLLEN_SIZE                                   0x1
#define _OSCEN_PLLEN_LENGTH                                 0x1
#define _OSCEN_PLLEN_MASK                                   0x1
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: PRLOCK
#define PRLOCK PRLOCK
extern volatile unsigned char           PRLOCK              __at(0x0B4);
#ifndef _LIB_BUILD
asm("PRLOCK equ 0B4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRLOCKED               :1;
    };
} PRLOCKbits_t;
extern volatile PRLOCKbits_t PRLOCKbits __at(0x0B4);
// bitfield macros
#define _PRLOCK_PRLOCKED_POSN                               0x0
#define _PRLOCK_PRLOCKED_POSITION                           0x0
#define _PRLOCK_PRLOCKED_SIZE                               0x1
#define _PRLOCK_PRLOCKED_LENGTH                             0x1
#define _PRLOCK_PRLOCKED_MASK                               0x1

// Register: SCANPR
#define SCANPR SCANPR
extern volatile unsigned char           SCANPR              __at(0x0B5);
#ifndef _LIB_BUILD
asm("SCANPR equ 0B5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned SCANPR                 :3;
    };
    struct {
        unsigned SCANPR0                :1;
        unsigned SCANPR1                :1;
        unsigned SCANPR2                :1;
    };
} SCANPRbits_t;
extern volatile SCANPRbits_t SCANPRbits __at(0x0B5);
// bitfield macros
#define _SCANPR_PR_POSN                                     0x0
#define _SCANPR_PR_POSITION                                 0x0
#define _SCANPR_PR_SIZE                                     0x3
#define _SCANPR_PR_LENGTH                                   0x3
#define _SCANPR_PR_MASK                                     0x7
#define _SCANPR_PR0_POSN                                    0x0
#define _SCANPR_PR0_POSITION                                0x0
#define _SCANPR_PR0_SIZE                                    0x1
#define _SCANPR_PR0_LENGTH                                  0x1
#define _SCANPR_PR0_MASK                                    0x1
#define _SCANPR_PR1_POSN                                    0x1
#define _SCANPR_PR1_POSITION                                0x1
#define _SCANPR_PR1_SIZE                                    0x1
#define _SCANPR_PR1_LENGTH                                  0x1
#define _SCANPR_PR1_MASK                                    0x2
#define _SCANPR_PR2_POSN                                    0x2
#define _SCANPR_PR2_POSITION                                0x2
#define _SCANPR_PR2_SIZE                                    0x1
#define _SCANPR_PR2_LENGTH                                  0x1
#define _SCANPR_PR2_MASK                                    0x4
#define _SCANPR_SCANPR_POSN                                 0x0
#define _SCANPR_SCANPR_POSITION                             0x0
#define _SCANPR_SCANPR_SIZE                                 0x3
#define _SCANPR_SCANPR_LENGTH                               0x3
#define _SCANPR_SCANPR_MASK                                 0x7
#define _SCANPR_SCANPR0_POSN                                0x0
#define _SCANPR_SCANPR0_POSITION                            0x0
#define _SCANPR_SCANPR0_SIZE                                0x1
#define _SCANPR_SCANPR0_LENGTH                              0x1
#define _SCANPR_SCANPR0_MASK                                0x1
#define _SCANPR_SCANPR1_POSN                                0x1
#define _SCANPR_SCANPR1_POSITION                            0x1
#define _SCANPR_SCANPR1_SIZE                                0x1
#define _SCANPR_SCANPR1_LENGTH                              0x1
#define _SCANPR_SCANPR1_MASK                                0x2
#define _SCANPR_SCANPR2_POSN                                0x2
#define _SCANPR_SCANPR2_POSITION                            0x2
#define _SCANPR_SCANPR2_SIZE                                0x1
#define _SCANPR_SCANPR2_LENGTH                              0x1
#define _SCANPR_SCANPR2_MASK                                0x4

// Register: DMA1PR
#define DMA1PR DMA1PR
extern volatile unsigned char           DMA1PR              __at(0x0B6);
#ifndef _LIB_BUILD
asm("DMA1PR equ 0B6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA1PR                 :3;
    };
    struct {
        unsigned DMA1PR0                :1;
        unsigned DMA1PR1                :1;
        unsigned DMA1PR2                :1;
    };
} DMA1PRbits_t;
extern volatile DMA1PRbits_t DMA1PRbits __at(0x0B6);
// bitfield macros
#define _DMA1PR_PR_POSN                                     0x0
#define _DMA1PR_PR_POSITION                                 0x0
#define _DMA1PR_PR_SIZE                                     0x3
#define _DMA1PR_PR_LENGTH                                   0x3
#define _DMA1PR_PR_MASK                                     0x7
#define _DMA1PR_PR0_POSN                                    0x0
#define _DMA1PR_PR0_POSITION                                0x0
#define _DMA1PR_PR0_SIZE                                    0x1
#define _DMA1PR_PR0_LENGTH                                  0x1
#define _DMA1PR_PR0_MASK                                    0x1
#define _DMA1PR_PR1_POSN                                    0x1
#define _DMA1PR_PR1_POSITION                                0x1
#define _DMA1PR_PR1_SIZE                                    0x1
#define _DMA1PR_PR1_LENGTH                                  0x1
#define _DMA1PR_PR1_MASK                                    0x2
#define _DMA1PR_PR2_POSN                                    0x2
#define _DMA1PR_PR2_POSITION                                0x2
#define _DMA1PR_PR2_SIZE                                    0x1
#define _DMA1PR_PR2_LENGTH                                  0x1
#define _DMA1PR_PR2_MASK                                    0x4
#define _DMA1PR_DMA1PR_POSN                                 0x0
#define _DMA1PR_DMA1PR_POSITION                             0x0
#define _DMA1PR_DMA1PR_SIZE                                 0x3
#define _DMA1PR_DMA1PR_LENGTH                               0x3
#define _DMA1PR_DMA1PR_MASK                                 0x7
#define _DMA1PR_DMA1PR0_POSN                                0x0
#define _DMA1PR_DMA1PR0_POSITION                            0x0
#define _DMA1PR_DMA1PR0_SIZE                                0x1
#define _DMA1PR_DMA1PR0_LENGTH                              0x1
#define _DMA1PR_DMA1PR0_MASK                                0x1
#define _DMA1PR_DMA1PR1_POSN                                0x1
#define _DMA1PR_DMA1PR1_POSITION                            0x1
#define _DMA1PR_DMA1PR1_SIZE                                0x1
#define _DMA1PR_DMA1PR1_LENGTH                              0x1
#define _DMA1PR_DMA1PR1_MASK                                0x2
#define _DMA1PR_DMA1PR2_POSN                                0x2
#define _DMA1PR_DMA1PR2_POSITION                            0x2
#define _DMA1PR_DMA1PR2_SIZE                                0x1
#define _DMA1PR_DMA1PR2_LENGTH                              0x1
#define _DMA1PR_DMA1PR2_MASK                                0x4

// Register: DMA2PR
#define DMA2PR DMA2PR
extern volatile unsigned char           DMA2PR              __at(0x0B7);
#ifndef _LIB_BUILD
asm("DMA2PR equ 0B7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA2PR                 :3;
    };
    struct {
        unsigned DMA2PR0                :1;
        unsigned DMA2PR1                :1;
        unsigned DMA2PR2                :1;
    };
} DMA2PRbits_t;
extern volatile DMA2PRbits_t DMA2PRbits __at(0x0B7);
// bitfield macros
#define _DMA2PR_PR_POSN                                     0x0
#define _DMA2PR_PR_POSITION                                 0x0
#define _DMA2PR_PR_SIZE                                     0x3
#define _DMA2PR_PR_LENGTH                                   0x3
#define _DMA2PR_PR_MASK                                     0x7
#define _DMA2PR_PR0_POSN                                    0x0
#define _DMA2PR_PR0_POSITION                                0x0
#define _DMA2PR_PR0_SIZE                                    0x1
#define _DMA2PR_PR0_LENGTH                                  0x1
#define _DMA2PR_PR0_MASK                                    0x1
#define _DMA2PR_PR1_POSN                                    0x1
#define _DMA2PR_PR1_POSITION                                0x1
#define _DMA2PR_PR1_SIZE                                    0x1
#define _DMA2PR_PR1_LENGTH                                  0x1
#define _DMA2PR_PR1_MASK                                    0x2
#define _DMA2PR_PR2_POSN                                    0x2
#define _DMA2PR_PR2_POSITION                                0x2
#define _DMA2PR_PR2_SIZE                                    0x1
#define _DMA2PR_PR2_LENGTH                                  0x1
#define _DMA2PR_PR2_MASK                                    0x4
#define _DMA2PR_DMA2PR_POSN                                 0x0
#define _DMA2PR_DMA2PR_POSITION                             0x0
#define _DMA2PR_DMA2PR_SIZE                                 0x3
#define _DMA2PR_DMA2PR_LENGTH                               0x3
#define _DMA2PR_DMA2PR_MASK                                 0x7
#define _DMA2PR_DMA2PR0_POSN                                0x0
#define _DMA2PR_DMA2PR0_POSITION                            0x0
#define _DMA2PR_DMA2PR0_SIZE                                0x1
#define _DMA2PR_DMA2PR0_LENGTH                              0x1
#define _DMA2PR_DMA2PR0_MASK                                0x1
#define _DMA2PR_DMA2PR1_POSN                                0x1
#define _DMA2PR_DMA2PR1_POSITION                            0x1
#define _DMA2PR_DMA2PR1_SIZE                                0x1
#define _DMA2PR_DMA2PR1_LENGTH                              0x1
#define _DMA2PR_DMA2PR1_MASK                                0x2
#define _DMA2PR_DMA2PR2_POSN                                0x2
#define _DMA2PR_DMA2PR2_POSITION                            0x2
#define _DMA2PR_DMA2PR2_SIZE                                0x1
#define _DMA2PR_DMA2PR2_LENGTH                              0x1
#define _DMA2PR_DMA2PR2_MASK                                0x4

// Register: DMA3PR
#define DMA3PR DMA3PR
extern volatile unsigned char           DMA3PR              __at(0x0B8);
#ifndef _LIB_BUILD
asm("DMA3PR equ 0B8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA3PR                 :3;
    };
    struct {
        unsigned DMA3PR0                :1;
        unsigned DMA3PR1                :1;
        unsigned DMA3PR2                :1;
    };
} DMA3PRbits_t;
extern volatile DMA3PRbits_t DMA3PRbits __at(0x0B8);
// bitfield macros
#define _DMA3PR_PR_POSN                                     0x0
#define _DMA3PR_PR_POSITION                                 0x0
#define _DMA3PR_PR_SIZE                                     0x3
#define _DMA3PR_PR_LENGTH                                   0x3
#define _DMA3PR_PR_MASK                                     0x7
#define _DMA3PR_PR0_POSN                                    0x0
#define _DMA3PR_PR0_POSITION                                0x0
#define _DMA3PR_PR0_SIZE                                    0x1
#define _DMA3PR_PR0_LENGTH                                  0x1
#define _DMA3PR_PR0_MASK                                    0x1
#define _DMA3PR_PR1_POSN                                    0x1
#define _DMA3PR_PR1_POSITION                                0x1
#define _DMA3PR_PR1_SIZE                                    0x1
#define _DMA3PR_PR1_LENGTH                                  0x1
#define _DMA3PR_PR1_MASK                                    0x2
#define _DMA3PR_PR2_POSN                                    0x2
#define _DMA3PR_PR2_POSITION                                0x2
#define _DMA3PR_PR2_SIZE                                    0x1
#define _DMA3PR_PR2_LENGTH                                  0x1
#define _DMA3PR_PR2_MASK                                    0x4
#define _DMA3PR_DMA3PR_POSN                                 0x0
#define _DMA3PR_DMA3PR_POSITION                             0x0
#define _DMA3PR_DMA3PR_SIZE                                 0x3
#define _DMA3PR_DMA3PR_LENGTH                               0x3
#define _DMA3PR_DMA3PR_MASK                                 0x7
#define _DMA3PR_DMA3PR0_POSN                                0x0
#define _DMA3PR_DMA3PR0_POSITION                            0x0
#define _DMA3PR_DMA3PR0_SIZE                                0x1
#define _DMA3PR_DMA3PR0_LENGTH                              0x1
#define _DMA3PR_DMA3PR0_MASK                                0x1
#define _DMA3PR_DMA3PR1_POSN                                0x1
#define _DMA3PR_DMA3PR1_POSITION                            0x1
#define _DMA3PR_DMA3PR1_SIZE                                0x1
#define _DMA3PR_DMA3PR1_LENGTH                              0x1
#define _DMA3PR_DMA3PR1_MASK                                0x2
#define _DMA3PR_DMA3PR2_POSN                                0x2
#define _DMA3PR_DMA3PR2_POSITION                            0x2
#define _DMA3PR_DMA3PR2_SIZE                                0x1
#define _DMA3PR_DMA3PR2_LENGTH                              0x1
#define _DMA3PR_DMA3PR2_MASK                                0x4

// Register: DMA4PR
#define DMA4PR DMA4PR
extern volatile unsigned char           DMA4PR              __at(0x0B9);
#ifndef _LIB_BUILD
asm("DMA4PR equ 0B9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA4PR                 :3;
    };
    struct {
        unsigned DMA4PR0                :1;
        unsigned DMA4PR1                :1;
        unsigned DMA4PR2                :1;
    };
} DMA4PRbits_t;
extern volatile DMA4PRbits_t DMA4PRbits __at(0x0B9);
// bitfield macros
#define _DMA4PR_PR_POSN                                     0x0
#define _DMA4PR_PR_POSITION                                 0x0
#define _DMA4PR_PR_SIZE                                     0x3
#define _DMA4PR_PR_LENGTH                                   0x3
#define _DMA4PR_PR_MASK                                     0x7
#define _DMA4PR_PR0_POSN                                    0x0
#define _DMA4PR_PR0_POSITION                                0x0
#define _DMA4PR_PR0_SIZE                                    0x1
#define _DMA4PR_PR0_LENGTH                                  0x1
#define _DMA4PR_PR0_MASK                                    0x1
#define _DMA4PR_PR1_POSN                                    0x1
#define _DMA4PR_PR1_POSITION                                0x1
#define _DMA4PR_PR1_SIZE                                    0x1
#define _DMA4PR_PR1_LENGTH                                  0x1
#define _DMA4PR_PR1_MASK                                    0x2
#define _DMA4PR_PR2_POSN                                    0x2
#define _DMA4PR_PR2_POSITION                                0x2
#define _DMA4PR_PR2_SIZE                                    0x1
#define _DMA4PR_PR2_LENGTH                                  0x1
#define _DMA4PR_PR2_MASK                                    0x4
#define _DMA4PR_DMA4PR_POSN                                 0x0
#define _DMA4PR_DMA4PR_POSITION                             0x0
#define _DMA4PR_DMA4PR_SIZE                                 0x3
#define _DMA4PR_DMA4PR_LENGTH                               0x3
#define _DMA4PR_DMA4PR_MASK                                 0x7
#define _DMA4PR_DMA4PR0_POSN                                0x0
#define _DMA4PR_DMA4PR0_POSITION                            0x0
#define _DMA4PR_DMA4PR0_SIZE                                0x1
#define _DMA4PR_DMA4PR0_LENGTH                              0x1
#define _DMA4PR_DMA4PR0_MASK                                0x1
#define _DMA4PR_DMA4PR1_POSN                                0x1
#define _DMA4PR_DMA4PR1_POSITION                            0x1
#define _DMA4PR_DMA4PR1_SIZE                                0x1
#define _DMA4PR_DMA4PR1_LENGTH                              0x1
#define _DMA4PR_DMA4PR1_MASK                                0x2
#define _DMA4PR_DMA4PR2_POSN                                0x2
#define _DMA4PR_DMA4PR2_POSITION                            0x2
#define _DMA4PR_DMA4PR2_SIZE                                0x1
#define _DMA4PR_DMA4PR2_LENGTH                              0x1
#define _DMA4PR_DMA4PR2_MASK                                0x4

// Register: DMA5PR
#define DMA5PR DMA5PR
extern volatile unsigned char           DMA5PR              __at(0x0BA);
#ifndef _LIB_BUILD
asm("DMA5PR equ 0BAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA5PR                 :3;
    };
    struct {
        unsigned DMA5PR0                :1;
        unsigned DMA5PR1                :1;
        unsigned DMA5PR2                :1;
    };
} DMA5PRbits_t;
extern volatile DMA5PRbits_t DMA5PRbits __at(0x0BA);
// bitfield macros
#define _DMA5PR_PR_POSN                                     0x0
#define _DMA5PR_PR_POSITION                                 0x0
#define _DMA5PR_PR_SIZE                                     0x3
#define _DMA5PR_PR_LENGTH                                   0x3
#define _DMA5PR_PR_MASK                                     0x7
#define _DMA5PR_PR0_POSN                                    0x0
#define _DMA5PR_PR0_POSITION                                0x0
#define _DMA5PR_PR0_SIZE                                    0x1
#define _DMA5PR_PR0_LENGTH                                  0x1
#define _DMA5PR_PR0_MASK                                    0x1
#define _DMA5PR_PR1_POSN                                    0x1
#define _DMA5PR_PR1_POSITION                                0x1
#define _DMA5PR_PR1_SIZE                                    0x1
#define _DMA5PR_PR1_LENGTH                                  0x1
#define _DMA5PR_PR1_MASK                                    0x2
#define _DMA5PR_PR2_POSN                                    0x2
#define _DMA5PR_PR2_POSITION                                0x2
#define _DMA5PR_PR2_SIZE                                    0x1
#define _DMA5PR_PR2_LENGTH                                  0x1
#define _DMA5PR_PR2_MASK                                    0x4
#define _DMA5PR_DMA5PR_POSN                                 0x0
#define _DMA5PR_DMA5PR_POSITION                             0x0
#define _DMA5PR_DMA5PR_SIZE                                 0x3
#define _DMA5PR_DMA5PR_LENGTH                               0x3
#define _DMA5PR_DMA5PR_MASK                                 0x7
#define _DMA5PR_DMA5PR0_POSN                                0x0
#define _DMA5PR_DMA5PR0_POSITION                            0x0
#define _DMA5PR_DMA5PR0_SIZE                                0x1
#define _DMA5PR_DMA5PR0_LENGTH                              0x1
#define _DMA5PR_DMA5PR0_MASK                                0x1
#define _DMA5PR_DMA5PR1_POSN                                0x1
#define _DMA5PR_DMA5PR1_POSITION                            0x1
#define _DMA5PR_DMA5PR1_SIZE                                0x1
#define _DMA5PR_DMA5PR1_LENGTH                              0x1
#define _DMA5PR_DMA5PR1_MASK                                0x2
#define _DMA5PR_DMA5PR2_POSN                                0x2
#define _DMA5PR_DMA5PR2_POSITION                            0x2
#define _DMA5PR_DMA5PR2_SIZE                                0x1
#define _DMA5PR_DMA5PR2_LENGTH                              0x1
#define _DMA5PR_DMA5PR2_MASK                                0x4

// Register: DMA6PR
#define DMA6PR DMA6PR
extern volatile unsigned char           DMA6PR              __at(0x0BB);
#ifndef _LIB_BUILD
asm("DMA6PR equ 0BBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA6PR                 :3;
    };
    struct {
        unsigned DMA6PR0                :1;
        unsigned DMA6PR1                :1;
        unsigned DMA6PR2                :1;
    };
} DMA6PRbits_t;
extern volatile DMA6PRbits_t DMA6PRbits __at(0x0BB);
// bitfield macros
#define _DMA6PR_PR_POSN                                     0x0
#define _DMA6PR_PR_POSITION                                 0x0
#define _DMA6PR_PR_SIZE                                     0x3
#define _DMA6PR_PR_LENGTH                                   0x3
#define _DMA6PR_PR_MASK                                     0x7
#define _DMA6PR_PR0_POSN                                    0x0
#define _DMA6PR_PR0_POSITION                                0x0
#define _DMA6PR_PR0_SIZE                                    0x1
#define _DMA6PR_PR0_LENGTH                                  0x1
#define _DMA6PR_PR0_MASK                                    0x1
#define _DMA6PR_PR1_POSN                                    0x1
#define _DMA6PR_PR1_POSITION                                0x1
#define _DMA6PR_PR1_SIZE                                    0x1
#define _DMA6PR_PR1_LENGTH                                  0x1
#define _DMA6PR_PR1_MASK                                    0x2
#define _DMA6PR_PR2_POSN                                    0x2
#define _DMA6PR_PR2_POSITION                                0x2
#define _DMA6PR_PR2_SIZE                                    0x1
#define _DMA6PR_PR2_LENGTH                                  0x1
#define _DMA6PR_PR2_MASK                                    0x4
#define _DMA6PR_DMA6PR_POSN                                 0x0
#define _DMA6PR_DMA6PR_POSITION                             0x0
#define _DMA6PR_DMA6PR_SIZE                                 0x3
#define _DMA6PR_DMA6PR_LENGTH                               0x3
#define _DMA6PR_DMA6PR_MASK                                 0x7
#define _DMA6PR_DMA6PR0_POSN                                0x0
#define _DMA6PR_DMA6PR0_POSITION                            0x0
#define _DMA6PR_DMA6PR0_SIZE                                0x1
#define _DMA6PR_DMA6PR0_LENGTH                              0x1
#define _DMA6PR_DMA6PR0_MASK                                0x1
#define _DMA6PR_DMA6PR1_POSN                                0x1
#define _DMA6PR_DMA6PR1_POSITION                            0x1
#define _DMA6PR_DMA6PR1_SIZE                                0x1
#define _DMA6PR_DMA6PR1_LENGTH                              0x1
#define _DMA6PR_DMA6PR1_MASK                                0x2
#define _DMA6PR_DMA6PR2_POSN                                0x2
#define _DMA6PR_DMA6PR2_POSITION                            0x2
#define _DMA6PR_DMA6PR2_SIZE                                0x1
#define _DMA6PR_DMA6PR2_LENGTH                              0x1
#define _DMA6PR_DMA6PR2_MASK                                0x4

// Register: MAINPR
#define MAINPR MAINPR
extern volatile unsigned char           MAINPR              __at(0x0BE);
#ifndef _LIB_BUILD
asm("MAINPR equ 0BEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned MAINPR                 :3;
    };
    struct {
        unsigned MAINPR0                :1;
        unsigned MAINPR1                :1;
        unsigned MAINPR2                :1;
    };
} MAINPRbits_t;
extern volatile MAINPRbits_t MAINPRbits __at(0x0BE);
// bitfield macros
#define _MAINPR_PR_POSN                                     0x0
#define _MAINPR_PR_POSITION                                 0x0
#define _MAINPR_PR_SIZE                                     0x3
#define _MAINPR_PR_LENGTH                                   0x3
#define _MAINPR_PR_MASK                                     0x7
#define _MAINPR_PR0_POSN                                    0x0
#define _MAINPR_PR0_POSITION                                0x0
#define _MAINPR_PR0_SIZE                                    0x1
#define _MAINPR_PR0_LENGTH                                  0x1
#define _MAINPR_PR0_MASK                                    0x1
#define _MAINPR_PR1_POSN                                    0x1
#define _MAINPR_PR1_POSITION                                0x1
#define _MAINPR_PR1_SIZE                                    0x1
#define _MAINPR_PR1_LENGTH                                  0x1
#define _MAINPR_PR1_MASK                                    0x2
#define _MAINPR_PR2_POSN                                    0x2
#define _MAINPR_PR2_POSITION                                0x2
#define _MAINPR_PR2_SIZE                                    0x1
#define _MAINPR_PR2_LENGTH                                  0x1
#define _MAINPR_PR2_MASK                                    0x4
#define _MAINPR_MAINPR_POSN                                 0x0
#define _MAINPR_MAINPR_POSITION                             0x0
#define _MAINPR_MAINPR_SIZE                                 0x3
#define _MAINPR_MAINPR_LENGTH                               0x3
#define _MAINPR_MAINPR_MASK                                 0x7
#define _MAINPR_MAINPR0_POSN                                0x0
#define _MAINPR_MAINPR0_POSITION                            0x0
#define _MAINPR_MAINPR0_SIZE                                0x1
#define _MAINPR_MAINPR0_LENGTH                              0x1
#define _MAINPR_MAINPR0_MASK                                0x1
#define _MAINPR_MAINPR1_POSN                                0x1
#define _MAINPR_MAINPR1_POSITION                            0x1
#define _MAINPR_MAINPR1_SIZE                                0x1
#define _MAINPR_MAINPR1_LENGTH                              0x1
#define _MAINPR_MAINPR1_MASK                                0x2
#define _MAINPR_MAINPR2_POSN                                0x2
#define _MAINPR_MAINPR2_POSITION                            0x2
#define _MAINPR_MAINPR2_SIZE                                0x1
#define _MAINPR_MAINPR2_LENGTH                              0x1
#define _MAINPR_MAINPR2_MASK                                0x4

// Register: ISRPR
#define ISRPR ISRPR
extern volatile unsigned char           ISRPR               __at(0x0BF);
#ifndef _LIB_BUILD
asm("ISRPR equ 0BFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned ISRPR                  :3;
    };
    struct {
        unsigned ISRPR0                 :1;
        unsigned ISRPR1                 :1;
        unsigned ISRPR2                 :1;
    };
} ISRPRbits_t;
extern volatile ISRPRbits_t ISRPRbits __at(0x0BF);
// bitfield macros
#define _ISRPR_PR_POSN                                      0x0
#define _ISRPR_PR_POSITION                                  0x0
#define _ISRPR_PR_SIZE                                      0x3
#define _ISRPR_PR_LENGTH                                    0x3
#define _ISRPR_PR_MASK                                      0x7
#define _ISRPR_PR0_POSN                                     0x0
#define _ISRPR_PR0_POSITION                                 0x0
#define _ISRPR_PR0_SIZE                                     0x1
#define _ISRPR_PR0_LENGTH                                   0x1
#define _ISRPR_PR0_MASK                                     0x1
#define _ISRPR_PR1_POSN                                     0x1
#define _ISRPR_PR1_POSITION                                 0x1
#define _ISRPR_PR1_SIZE                                     0x1
#define _ISRPR_PR1_LENGTH                                   0x1
#define _ISRPR_PR1_MASK                                     0x2
#define _ISRPR_PR2_POSN                                     0x2
#define _ISRPR_PR2_POSITION                                 0x2
#define _ISRPR_PR2_SIZE                                     0x1
#define _ISRPR_PR2_LENGTH                                   0x1
#define _ISRPR_PR2_MASK                                     0x4
#define _ISRPR_ISRPR_POSN                                   0x0
#define _ISRPR_ISRPR_POSITION                               0x0
#define _ISRPR_ISRPR_SIZE                                   0x3
#define _ISRPR_ISRPR_LENGTH                                 0x3
#define _ISRPR_ISRPR_MASK                                   0x7
#define _ISRPR_ISRPR0_POSN                                  0x0
#define _ISRPR_ISRPR0_POSITION                              0x0
#define _ISRPR_ISRPR0_SIZE                                  0x1
#define _ISRPR_ISRPR0_LENGTH                                0x1
#define _ISRPR_ISRPR0_MASK                                  0x1
#define _ISRPR_ISRPR1_POSN                                  0x1
#define _ISRPR_ISRPR1_POSITION                              0x1
#define _ISRPR_ISRPR1_SIZE                                  0x1
#define _ISRPR_ISRPR1_LENGTH                                0x1
#define _ISRPR_ISRPR1_MASK                                  0x2
#define _ISRPR_ISRPR2_POSN                                  0x2
#define _ISRPR_ISRPR2_POSITION                              0x2
#define _ISRPR_ISRPR2_SIZE                                  0x1
#define _ISRPR_ISRPR2_LENGTH                                0x1
#define _ISRPR_ISRPR2_MASK                                  0x4

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x0D4);
#ifndef _LIB_BUILD
asm("CLCDATA equ 0D4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1OUT                :1;
        unsigned CLC2OUT                :1;
        unsigned CLC3OUT                :1;
        unsigned CLC4OUT                :1;
        unsigned CLC5OUT                :1;
        unsigned CLC6OUT                :1;
        unsigned CLC7OUT                :1;
        unsigned CLC8OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x0D4);
// bitfield macros
#define _CLCDATA_CLC1OUT_POSN                               0x0
#define _CLCDATA_CLC1OUT_POSITION                           0x0
#define _CLCDATA_CLC1OUT_SIZE                               0x1
#define _CLCDATA_CLC1OUT_LENGTH                             0x1
#define _CLCDATA_CLC1OUT_MASK                               0x1
#define _CLCDATA_CLC2OUT_POSN                               0x1
#define _CLCDATA_CLC2OUT_POSITION                           0x1
#define _CLCDATA_CLC2OUT_SIZE                               0x1
#define _CLCDATA_CLC2OUT_LENGTH                             0x1
#define _CLCDATA_CLC2OUT_MASK                               0x2
#define _CLCDATA_CLC3OUT_POSN                               0x2
#define _CLCDATA_CLC3OUT_POSITION                           0x2
#define _CLCDATA_CLC3OUT_SIZE                               0x1
#define _CLCDATA_CLC3OUT_LENGTH                             0x1
#define _CLCDATA_CLC3OUT_MASK                               0x4
#define _CLCDATA_CLC4OUT_POSN                               0x3
#define _CLCDATA_CLC4OUT_POSITION                           0x3
#define _CLCDATA_CLC4OUT_SIZE                               0x1
#define _CLCDATA_CLC4OUT_LENGTH                             0x1
#define _CLCDATA_CLC4OUT_MASK                               0x8
#define _CLCDATA_CLC5OUT_POSN                               0x4
#define _CLCDATA_CLC5OUT_POSITION                           0x4
#define _CLCDATA_CLC5OUT_SIZE                               0x1
#define _CLCDATA_CLC5OUT_LENGTH                             0x1
#define _CLCDATA_CLC5OUT_MASK                               0x10
#define _CLCDATA_CLC6OUT_POSN                               0x5
#define _CLCDATA_CLC6OUT_POSITION                           0x5
#define _CLCDATA_CLC6OUT_SIZE                               0x1
#define _CLCDATA_CLC6OUT_LENGTH                             0x1
#define _CLCDATA_CLC6OUT_MASK                               0x20
#define _CLCDATA_CLC7OUT_POSN                               0x6
#define _CLCDATA_CLC7OUT_POSITION                           0x6
#define _CLCDATA_CLC7OUT_SIZE                               0x1
#define _CLCDATA_CLC7OUT_LENGTH                             0x1
#define _CLCDATA_CLC7OUT_MASK                               0x40
#define _CLCDATA_CLC8OUT_POSN                               0x7
#define _CLCDATA_CLC8OUT_POSITION                           0x7
#define _CLCDATA_CLC8OUT_SIZE                               0x1
#define _CLCDATA_CLC8OUT_LENGTH                             0x1
#define _CLCDATA_CLC8OUT_MASK                               0x80

// Register: CLCSELECT
#define CLCSELECT CLCSELECT
extern volatile unsigned char           CLCSELECT           __at(0x0D5);
#ifndef _LIB_BUILD
asm("CLCSELECT equ 0D5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLCT                   :8;
    };
    struct {
        unsigned SLCT0                  :1;
        unsigned SLCT1                  :1;
        unsigned SLCT2                  :1;
    };
} CLCSELECTbits_t;
extern volatile CLCSELECTbits_t CLCSELECTbits __at(0x0D5);
// bitfield macros
#define _CLCSELECT_SLCT_POSN                                0x0
#define _CLCSELECT_SLCT_POSITION                            0x0
#define _CLCSELECT_SLCT_SIZE                                0x8
#define _CLCSELECT_SLCT_LENGTH                              0x8
#define _CLCSELECT_SLCT_MASK                                0xFF
#define _CLCSELECT_SLCT0_POSN                               0x0
#define _CLCSELECT_SLCT0_POSITION                           0x0
#define _CLCSELECT_SLCT0_SIZE                               0x1
#define _CLCSELECT_SLCT0_LENGTH                             0x1
#define _CLCSELECT_SLCT0_MASK                               0x1
#define _CLCSELECT_SLCT1_POSN                               0x1
#define _CLCSELECT_SLCT1_POSITION                           0x1
#define _CLCSELECT_SLCT1_SIZE                               0x1
#define _CLCSELECT_SLCT1_LENGTH                             0x1
#define _CLCSELECT_SLCT1_MASK                               0x2
#define _CLCSELECT_SLCT2_POSN                               0x2
#define _CLCSELECT_SLCT2_POSITION                           0x2
#define _CLCSELECT_SLCT2_SIZE                               0x1
#define _CLCSELECT_SLCT2_LENGTH                             0x1
#define _CLCSELECT_SLCT2_MASK                               0x4

// Register: CLCnCON
#define CLCnCON CLCnCON
extern volatile unsigned char           CLCnCON             __at(0x0D6);
#ifndef _LIB_BUILD
asm("CLCnCON equ 0D6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLCnCONbits_t;
extern volatile CLCnCONbits_t CLCnCONbits __at(0x0D6);
// bitfield macros
#define _CLCnCON_MODE_POSN                                  0x0
#define _CLCnCON_MODE_POSITION                              0x0
#define _CLCnCON_MODE_SIZE                                  0x3
#define _CLCnCON_MODE_LENGTH                                0x3
#define _CLCnCON_MODE_MASK                                  0x7
#define _CLCnCON_INTN_POSN                                  0x3
#define _CLCnCON_INTN_POSITION                              0x3
#define _CLCnCON_INTN_SIZE                                  0x1
#define _CLCnCON_INTN_LENGTH                                0x1
#define _CLCnCON_INTN_MASK                                  0x8
#define _CLCnCON_INTP_POSN                                  0x4
#define _CLCnCON_INTP_POSITION                              0x4
#define _CLCnCON_INTP_SIZE                                  0x1
#define _CLCnCON_INTP_LENGTH                                0x1
#define _CLCnCON_INTP_MASK                                  0x10
#define _CLCnCON_OUT_POSN                                   0x5
#define _CLCnCON_OUT_POSITION                               0x5
#define _CLCnCON_OUT_SIZE                                   0x1
#define _CLCnCON_OUT_LENGTH                                 0x1
#define _CLCnCON_OUT_MASK                                   0x20
#define _CLCnCON_OE_POSN                                    0x6
#define _CLCnCON_OE_POSITION                                0x6
#define _CLCnCON_OE_SIZE                                    0x1
#define _CLCnCON_OE_LENGTH                                  0x1
#define _CLCnCON_OE_MASK                                    0x40
#define _CLCnCON_EN_POSN                                    0x7
#define _CLCnCON_EN_POSITION                                0x7
#define _CLCnCON_EN_SIZE                                    0x1
#define _CLCnCON_EN_LENGTH                                  0x1
#define _CLCnCON_EN_MASK                                    0x80
#define _CLCnCON_MODE0_POSN                                 0x0
#define _CLCnCON_MODE0_POSITION                             0x0
#define _CLCnCON_MODE0_SIZE                                 0x1
#define _CLCnCON_MODE0_LENGTH                               0x1
#define _CLCnCON_MODE0_MASK                                 0x1
#define _CLCnCON_MODE1_POSN                                 0x1
#define _CLCnCON_MODE1_POSITION                             0x1
#define _CLCnCON_MODE1_SIZE                                 0x1
#define _CLCnCON_MODE1_LENGTH                               0x1
#define _CLCnCON_MODE1_MASK                                 0x2
#define _CLCnCON_MODE2_POSN                                 0x2
#define _CLCnCON_MODE2_POSITION                             0x2
#define _CLCnCON_MODE2_SIZE                                 0x1
#define _CLCnCON_MODE2_LENGTH                               0x1
#define _CLCnCON_MODE2_MASK                                 0x4

// Register: CLCnPOL
#define CLCnPOL CLCnPOL
extern volatile unsigned char           CLCnPOL             __at(0x0D7);
#ifndef _LIB_BUILD
asm("CLCnPOL equ 0D7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLCnPOLbits_t;
extern volatile CLCnPOLbits_t CLCnPOLbits __at(0x0D7);
// bitfield macros
#define _CLCnPOL_G1POL_POSN                                 0x0
#define _CLCnPOL_G1POL_POSITION                             0x0
#define _CLCnPOL_G1POL_SIZE                                 0x1
#define _CLCnPOL_G1POL_LENGTH                               0x1
#define _CLCnPOL_G1POL_MASK                                 0x1
#define _CLCnPOL_G2POL_POSN                                 0x1
#define _CLCnPOL_G2POL_POSITION                             0x1
#define _CLCnPOL_G2POL_SIZE                                 0x1
#define _CLCnPOL_G2POL_LENGTH                               0x1
#define _CLCnPOL_G2POL_MASK                                 0x2
#define _CLCnPOL_G3POL_POSN                                 0x2
#define _CLCnPOL_G3POL_POSITION                             0x2
#define _CLCnPOL_G3POL_SIZE                                 0x1
#define _CLCnPOL_G3POL_LENGTH                               0x1
#define _CLCnPOL_G3POL_MASK                                 0x4
#define _CLCnPOL_G4POL_POSN                                 0x3
#define _CLCnPOL_G4POL_POSITION                             0x3
#define _CLCnPOL_G4POL_SIZE                                 0x1
#define _CLCnPOL_G4POL_LENGTH                               0x1
#define _CLCnPOL_G4POL_MASK                                 0x8
#define _CLCnPOL_POL_POSN                                   0x7
#define _CLCnPOL_POL_POSITION                               0x7
#define _CLCnPOL_POL_SIZE                                   0x1
#define _CLCnPOL_POL_LENGTH                                 0x1
#define _CLCnPOL_POL_MASK                                   0x80

// Register: CLCnSEL0
#define CLCnSEL0 CLCnSEL0
extern volatile unsigned char           CLCnSEL0            __at(0x0D8);
#ifndef _LIB_BUILD
asm("CLCnSEL0 equ 0D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
} CLCnSEL0bits_t;
extern volatile CLCnSEL0bits_t CLCnSEL0bits __at(0x0D8);
// bitfield macros
#define _CLCnSEL0_D1S_POSN                                  0x0
#define _CLCnSEL0_D1S_POSITION                              0x0
#define _CLCnSEL0_D1S_SIZE                                  0x8
#define _CLCnSEL0_D1S_LENGTH                                0x8
#define _CLCnSEL0_D1S_MASK                                  0xFF
#define _CLCnSEL0_D1S0_POSN                                 0x0
#define _CLCnSEL0_D1S0_POSITION                             0x0
#define _CLCnSEL0_D1S0_SIZE                                 0x1
#define _CLCnSEL0_D1S0_LENGTH                               0x1
#define _CLCnSEL0_D1S0_MASK                                 0x1
#define _CLCnSEL0_D1S1_POSN                                 0x1
#define _CLCnSEL0_D1S1_POSITION                             0x1
#define _CLCnSEL0_D1S1_SIZE                                 0x1
#define _CLCnSEL0_D1S1_LENGTH                               0x1
#define _CLCnSEL0_D1S1_MASK                                 0x2
#define _CLCnSEL0_D1S2_POSN                                 0x2
#define _CLCnSEL0_D1S2_POSITION                             0x2
#define _CLCnSEL0_D1S2_SIZE                                 0x1
#define _CLCnSEL0_D1S2_LENGTH                               0x1
#define _CLCnSEL0_D1S2_MASK                                 0x4
#define _CLCnSEL0_D1S3_POSN                                 0x3
#define _CLCnSEL0_D1S3_POSITION                             0x3
#define _CLCnSEL0_D1S3_SIZE                                 0x1
#define _CLCnSEL0_D1S3_LENGTH                               0x1
#define _CLCnSEL0_D1S3_MASK                                 0x8
#define _CLCnSEL0_D1S4_POSN                                 0x4
#define _CLCnSEL0_D1S4_POSITION                             0x4
#define _CLCnSEL0_D1S4_SIZE                                 0x1
#define _CLCnSEL0_D1S4_LENGTH                               0x1
#define _CLCnSEL0_D1S4_MASK                                 0x10
#define _CLCnSEL0_D1S5_POSN                                 0x5
#define _CLCnSEL0_D1S5_POSITION                             0x5
#define _CLCnSEL0_D1S5_SIZE                                 0x1
#define _CLCnSEL0_D1S5_LENGTH                               0x1
#define _CLCnSEL0_D1S5_MASK                                 0x20
#define _CLCnSEL0_D1S6_POSN                                 0x6
#define _CLCnSEL0_D1S6_POSITION                             0x6
#define _CLCnSEL0_D1S6_SIZE                                 0x1
#define _CLCnSEL0_D1S6_LENGTH                               0x1
#define _CLCnSEL0_D1S6_MASK                                 0x40
#define _CLCnSEL0_D1S7_POSN                                 0x7
#define _CLCnSEL0_D1S7_POSITION                             0x7
#define _CLCnSEL0_D1S7_SIZE                                 0x1
#define _CLCnSEL0_D1S7_LENGTH                               0x1
#define _CLCnSEL0_D1S7_MASK                                 0x80

// Register: CLCnSEL1
#define CLCnSEL1 CLCnSEL1
extern volatile unsigned char           CLCnSEL1            __at(0x0D9);
#ifndef _LIB_BUILD
asm("CLCnSEL1 equ 0D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
} CLCnSEL1bits_t;
extern volatile CLCnSEL1bits_t CLCnSEL1bits __at(0x0D9);
// bitfield macros
#define _CLCnSEL1_D2S_POSN                                  0x0
#define _CLCnSEL1_D2S_POSITION                              0x0
#define _CLCnSEL1_D2S_SIZE                                  0x8
#define _CLCnSEL1_D2S_LENGTH                                0x8
#define _CLCnSEL1_D2S_MASK                                  0xFF
#define _CLCnSEL1_D2S0_POSN                                 0x0
#define _CLCnSEL1_D2S0_POSITION                             0x0
#define _CLCnSEL1_D2S0_SIZE                                 0x1
#define _CLCnSEL1_D2S0_LENGTH                               0x1
#define _CLCnSEL1_D2S0_MASK                                 0x1
#define _CLCnSEL1_D2S1_POSN                                 0x1
#define _CLCnSEL1_D2S1_POSITION                             0x1
#define _CLCnSEL1_D2S1_SIZE                                 0x1
#define _CLCnSEL1_D2S1_LENGTH                               0x1
#define _CLCnSEL1_D2S1_MASK                                 0x2
#define _CLCnSEL1_D2S2_POSN                                 0x2
#define _CLCnSEL1_D2S2_POSITION                             0x2
#define _CLCnSEL1_D2S2_SIZE                                 0x1
#define _CLCnSEL1_D2S2_LENGTH                               0x1
#define _CLCnSEL1_D2S2_MASK                                 0x4
#define _CLCnSEL1_D2S3_POSN                                 0x3
#define _CLCnSEL1_D2S3_POSITION                             0x3
#define _CLCnSEL1_D2S3_SIZE                                 0x1
#define _CLCnSEL1_D2S3_LENGTH                               0x1
#define _CLCnSEL1_D2S3_MASK                                 0x8
#define _CLCnSEL1_D2S4_POSN                                 0x4
#define _CLCnSEL1_D2S4_POSITION                             0x4
#define _CLCnSEL1_D2S4_SIZE                                 0x1
#define _CLCnSEL1_D2S4_LENGTH                               0x1
#define _CLCnSEL1_D2S4_MASK                                 0x10
#define _CLCnSEL1_D2S5_POSN                                 0x5
#define _CLCnSEL1_D2S5_POSITION                             0x5
#define _CLCnSEL1_D2S5_SIZE                                 0x1
#define _CLCnSEL1_D2S5_LENGTH                               0x1
#define _CLCnSEL1_D2S5_MASK                                 0x20
#define _CLCnSEL1_D2S6_POSN                                 0x6
#define _CLCnSEL1_D2S6_POSITION                             0x6
#define _CLCnSEL1_D2S6_SIZE                                 0x1
#define _CLCnSEL1_D2S6_LENGTH                               0x1
#define _CLCnSEL1_D2S6_MASK                                 0x40
#define _CLCnSEL1_D2S7_POSN                                 0x7
#define _CLCnSEL1_D2S7_POSITION                             0x7
#define _CLCnSEL1_D2S7_SIZE                                 0x1
#define _CLCnSEL1_D2S7_LENGTH                               0x1
#define _CLCnSEL1_D2S7_MASK                                 0x80

// Register: CLCnSEL2
#define CLCnSEL2 CLCnSEL2
extern volatile unsigned char           CLCnSEL2            __at(0x0DA);
#ifndef _LIB_BUILD
asm("CLCnSEL2 equ 0DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
} CLCnSEL2bits_t;
extern volatile CLCnSEL2bits_t CLCnSEL2bits __at(0x0DA);
// bitfield macros
#define _CLCnSEL2_D3S_POSN                                  0x0
#define _CLCnSEL2_D3S_POSITION                              0x0
#define _CLCnSEL2_D3S_SIZE                                  0x8
#define _CLCnSEL2_D3S_LENGTH                                0x8
#define _CLCnSEL2_D3S_MASK                                  0xFF
#define _CLCnSEL2_D3S0_POSN                                 0x0
#define _CLCnSEL2_D3S0_POSITION                             0x0
#define _CLCnSEL2_D3S0_SIZE                                 0x1
#define _CLCnSEL2_D3S0_LENGTH                               0x1
#define _CLCnSEL2_D3S0_MASK                                 0x1
#define _CLCnSEL2_D3S1_POSN                                 0x1
#define _CLCnSEL2_D3S1_POSITION                             0x1
#define _CLCnSEL2_D3S1_SIZE                                 0x1
#define _CLCnSEL2_D3S1_LENGTH                               0x1
#define _CLCnSEL2_D3S1_MASK                                 0x2
#define _CLCnSEL2_D3S2_POSN                                 0x2
#define _CLCnSEL2_D3S2_POSITION                             0x2
#define _CLCnSEL2_D3S2_SIZE                                 0x1
#define _CLCnSEL2_D3S2_LENGTH                               0x1
#define _CLCnSEL2_D3S2_MASK                                 0x4
#define _CLCnSEL2_D3S3_POSN                                 0x3
#define _CLCnSEL2_D3S3_POSITION                             0x3
#define _CLCnSEL2_D3S3_SIZE                                 0x1
#define _CLCnSEL2_D3S3_LENGTH                               0x1
#define _CLCnSEL2_D3S3_MASK                                 0x8
#define _CLCnSEL2_D3S4_POSN                                 0x4
#define _CLCnSEL2_D3S4_POSITION                             0x4
#define _CLCnSEL2_D3S4_SIZE                                 0x1
#define _CLCnSEL2_D3S4_LENGTH                               0x1
#define _CLCnSEL2_D3S4_MASK                                 0x10
#define _CLCnSEL2_D3S5_POSN                                 0x5
#define _CLCnSEL2_D3S5_POSITION                             0x5
#define _CLCnSEL2_D3S5_SIZE                                 0x1
#define _CLCnSEL2_D3S5_LENGTH                               0x1
#define _CLCnSEL2_D3S5_MASK                                 0x20
#define _CLCnSEL2_D3S6_POSN                                 0x6
#define _CLCnSEL2_D3S6_POSITION                             0x6
#define _CLCnSEL2_D3S6_SIZE                                 0x1
#define _CLCnSEL2_D3S6_LENGTH                               0x1
#define _CLCnSEL2_D3S6_MASK                                 0x40
#define _CLCnSEL2_D3S7_POSN                                 0x7
#define _CLCnSEL2_D3S7_POSITION                             0x7
#define _CLCnSEL2_D3S7_SIZE                                 0x1
#define _CLCnSEL2_D3S7_LENGTH                               0x1
#define _CLCnSEL2_D3S7_MASK                                 0x80

// Register: CLCnSEL3
#define CLCnSEL3 CLCnSEL3
extern volatile unsigned char           CLCnSEL3            __at(0x0DB);
#ifndef _LIB_BUILD
asm("CLCnSEL3 equ 0DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
} CLCnSEL3bits_t;
extern volatile CLCnSEL3bits_t CLCnSEL3bits __at(0x0DB);
// bitfield macros
#define _CLCnSEL3_D4S_POSN                                  0x0
#define _CLCnSEL3_D4S_POSITION                              0x0
#define _CLCnSEL3_D4S_SIZE                                  0x8
#define _CLCnSEL3_D4S_LENGTH                                0x8
#define _CLCnSEL3_D4S_MASK                                  0xFF
#define _CLCnSEL3_D4S0_POSN                                 0x0
#define _CLCnSEL3_D4S0_POSITION                             0x0
#define _CLCnSEL3_D4S0_SIZE                                 0x1
#define _CLCnSEL3_D4S0_LENGTH                               0x1
#define _CLCnSEL3_D4S0_MASK                                 0x1
#define _CLCnSEL3_D4S1_POSN                                 0x1
#define _CLCnSEL3_D4S1_POSITION                             0x1
#define _CLCnSEL3_D4S1_SIZE                                 0x1
#define _CLCnSEL3_D4S1_LENGTH                               0x1
#define _CLCnSEL3_D4S1_MASK                                 0x2
#define _CLCnSEL3_D4S2_POSN                                 0x2
#define _CLCnSEL3_D4S2_POSITION                             0x2
#define _CLCnSEL3_D4S2_SIZE                                 0x1
#define _CLCnSEL3_D4S2_LENGTH                               0x1
#define _CLCnSEL3_D4S2_MASK                                 0x4
#define _CLCnSEL3_D4S3_POSN                                 0x3
#define _CLCnSEL3_D4S3_POSITION                             0x3
#define _CLCnSEL3_D4S3_SIZE                                 0x1
#define _CLCnSEL3_D4S3_LENGTH                               0x1
#define _CLCnSEL3_D4S3_MASK                                 0x8
#define _CLCnSEL3_D4S4_POSN                                 0x4
#define _CLCnSEL3_D4S4_POSITION                             0x4
#define _CLCnSEL3_D4S4_SIZE                                 0x1
#define _CLCnSEL3_D4S4_LENGTH                               0x1
#define _CLCnSEL3_D4S4_MASK                                 0x10
#define _CLCnSEL3_D4S5_POSN                                 0x5
#define _CLCnSEL3_D4S5_POSITION                             0x5
#define _CLCnSEL3_D4S5_SIZE                                 0x1
#define _CLCnSEL3_D4S5_LENGTH                               0x1
#define _CLCnSEL3_D4S5_MASK                                 0x20
#define _CLCnSEL3_D4S6_POSN                                 0x6
#define _CLCnSEL3_D4S6_POSITION                             0x6
#define _CLCnSEL3_D4S6_SIZE                                 0x1
#define _CLCnSEL3_D4S6_LENGTH                               0x1
#define _CLCnSEL3_D4S6_MASK                                 0x40
#define _CLCnSEL3_D4S7_POSN                                 0x7
#define _CLCnSEL3_D4S7_POSITION                             0x7
#define _CLCnSEL3_D4S7_SIZE                                 0x1
#define _CLCnSEL3_D4S7_LENGTH                               0x1
#define _CLCnSEL3_D4S7_MASK                                 0x80

// Register: CLCnGLS0
#define CLCnGLS0 CLCnGLS0
extern volatile unsigned char           CLCnGLS0            __at(0x0DC);
#ifndef _LIB_BUILD
asm("CLCnGLS0 equ 0DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
} CLCnGLS0bits_t;
extern volatile CLCnGLS0bits_t CLCnGLS0bits __at(0x0DC);
// bitfield macros
#define _CLCnGLS0_G1D1N_POSN                                0x0
#define _CLCnGLS0_G1D1N_POSITION                            0x0
#define _CLCnGLS0_G1D1N_SIZE                                0x1
#define _CLCnGLS0_G1D1N_LENGTH                              0x1
#define _CLCnGLS0_G1D1N_MASK                                0x1
#define _CLCnGLS0_G1D1T_POSN                                0x1
#define _CLCnGLS0_G1D1T_POSITION                            0x1
#define _CLCnGLS0_G1D1T_SIZE                                0x1
#define _CLCnGLS0_G1D1T_LENGTH                              0x1
#define _CLCnGLS0_G1D1T_MASK                                0x2
#define _CLCnGLS0_G1D2N_POSN                                0x2
#define _CLCnGLS0_G1D2N_POSITION                            0x2
#define _CLCnGLS0_G1D2N_SIZE                                0x1
#define _CLCnGLS0_G1D2N_LENGTH                              0x1
#define _CLCnGLS0_G1D2N_MASK                                0x4
#define _CLCnGLS0_G1D2T_POSN                                0x3
#define _CLCnGLS0_G1D2T_POSITION                            0x3
#define _CLCnGLS0_G1D2T_SIZE                                0x1
#define _CLCnGLS0_G1D2T_LENGTH                              0x1
#define _CLCnGLS0_G1D2T_MASK                                0x8
#define _CLCnGLS0_G1D3N_POSN                                0x4
#define _CLCnGLS0_G1D3N_POSITION                            0x4
#define _CLCnGLS0_G1D3N_SIZE                                0x1
#define _CLCnGLS0_G1D3N_LENGTH                              0x1
#define _CLCnGLS0_G1D3N_MASK                                0x10
#define _CLCnGLS0_G1D3T_POSN                                0x5
#define _CLCnGLS0_G1D3T_POSITION                            0x5
#define _CLCnGLS0_G1D3T_SIZE                                0x1
#define _CLCnGLS0_G1D3T_LENGTH                              0x1
#define _CLCnGLS0_G1D3T_MASK                                0x20
#define _CLCnGLS0_G1D4N_POSN                                0x6
#define _CLCnGLS0_G1D4N_POSITION                            0x6
#define _CLCnGLS0_G1D4N_SIZE                                0x1
#define _CLCnGLS0_G1D4N_LENGTH                              0x1
#define _CLCnGLS0_G1D4N_MASK                                0x40
#define _CLCnGLS0_G1D4T_POSN                                0x7
#define _CLCnGLS0_G1D4T_POSITION                            0x7
#define _CLCnGLS0_G1D4T_SIZE                                0x1
#define _CLCnGLS0_G1D4T_LENGTH                              0x1
#define _CLCnGLS0_G1D4T_MASK                                0x80

// Register: CLCnGLS1
#define CLCnGLS1 CLCnGLS1
extern volatile unsigned char           CLCnGLS1            __at(0x0DD);
#ifndef _LIB_BUILD
asm("CLCnGLS1 equ 0DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
} CLCnGLS1bits_t;
extern volatile CLCnGLS1bits_t CLCnGLS1bits __at(0x0DD);
// bitfield macros
#define _CLCnGLS1_G2D1N_POSN                                0x0
#define _CLCnGLS1_G2D1N_POSITION                            0x0
#define _CLCnGLS1_G2D1N_SIZE                                0x1
#define _CLCnGLS1_G2D1N_LENGTH                              0x1
#define _CLCnGLS1_G2D1N_MASK                                0x1
#define _CLCnGLS1_G2D1T_POSN                                0x1
#define _CLCnGLS1_G2D1T_POSITION                            0x1
#define _CLCnGLS1_G2D1T_SIZE                                0x1
#define _CLCnGLS1_G2D1T_LENGTH                              0x1
#define _CLCnGLS1_G2D1T_MASK                                0x2
#define _CLCnGLS1_G2D2N_POSN                                0x2
#define _CLCnGLS1_G2D2N_POSITION                            0x2
#define _CLCnGLS1_G2D2N_SIZE                                0x1
#define _CLCnGLS1_G2D2N_LENGTH                              0x1
#define _CLCnGLS1_G2D2N_MASK                                0x4
#define _CLCnGLS1_G2D2T_POSN                                0x3
#define _CLCnGLS1_G2D2T_POSITION                            0x3
#define _CLCnGLS1_G2D2T_SIZE                                0x1
#define _CLCnGLS1_G2D2T_LENGTH                              0x1
#define _CLCnGLS1_G2D2T_MASK                                0x8
#define _CLCnGLS1_G2D3N_POSN                                0x4
#define _CLCnGLS1_G2D3N_POSITION                            0x4
#define _CLCnGLS1_G2D3N_SIZE                                0x1
#define _CLCnGLS1_G2D3N_LENGTH                              0x1
#define _CLCnGLS1_G2D3N_MASK                                0x10
#define _CLCnGLS1_G2D3T_POSN                                0x5
#define _CLCnGLS1_G2D3T_POSITION                            0x5
#define _CLCnGLS1_G2D3T_SIZE                                0x1
#define _CLCnGLS1_G2D3T_LENGTH                              0x1
#define _CLCnGLS1_G2D3T_MASK                                0x20
#define _CLCnGLS1_G2D4N_POSN                                0x6
#define _CLCnGLS1_G2D4N_POSITION                            0x6
#define _CLCnGLS1_G2D4N_SIZE                                0x1
#define _CLCnGLS1_G2D4N_LENGTH                              0x1
#define _CLCnGLS1_G2D4N_MASK                                0x40
#define _CLCnGLS1_G2D4T_POSN                                0x7
#define _CLCnGLS1_G2D4T_POSITION                            0x7
#define _CLCnGLS1_G2D4T_SIZE                                0x1
#define _CLCnGLS1_G2D4T_LENGTH                              0x1
#define _CLCnGLS1_G2D4T_MASK                                0x80

// Register: CLCnGLS2
#define CLCnGLS2 CLCnGLS2
extern volatile unsigned char           CLCnGLS2            __at(0x0DE);
#ifndef _LIB_BUILD
asm("CLCnGLS2 equ 0DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
} CLCnGLS2bits_t;
extern volatile CLCnGLS2bits_t CLCnGLS2bits __at(0x0DE);
// bitfield macros
#define _CLCnGLS2_G3D1N_POSN                                0x0
#define _CLCnGLS2_G3D1N_POSITION                            0x0
#define _CLCnGLS2_G3D1N_SIZE                                0x1
#define _CLCnGLS2_G3D1N_LENGTH                              0x1
#define _CLCnGLS2_G3D1N_MASK                                0x1
#define _CLCnGLS2_G3D1T_POSN                                0x1
#define _CLCnGLS2_G3D1T_POSITION                            0x1
#define _CLCnGLS2_G3D1T_SIZE                                0x1
#define _CLCnGLS2_G3D1T_LENGTH                              0x1
#define _CLCnGLS2_G3D1T_MASK                                0x2
#define _CLCnGLS2_G3D2N_POSN                                0x2
#define _CLCnGLS2_G3D2N_POSITION                            0x2
#define _CLCnGLS2_G3D2N_SIZE                                0x1
#define _CLCnGLS2_G3D2N_LENGTH                              0x1
#define _CLCnGLS2_G3D2N_MASK                                0x4
#define _CLCnGLS2_G3D2T_POSN                                0x3
#define _CLCnGLS2_G3D2T_POSITION                            0x3
#define _CLCnGLS2_G3D2T_SIZE                                0x1
#define _CLCnGLS2_G3D2T_LENGTH                              0x1
#define _CLCnGLS2_G3D2T_MASK                                0x8
#define _CLCnGLS2_G3D3N_POSN                                0x4
#define _CLCnGLS2_G3D3N_POSITION                            0x4
#define _CLCnGLS2_G3D3N_SIZE                                0x1
#define _CLCnGLS2_G3D3N_LENGTH                              0x1
#define _CLCnGLS2_G3D3N_MASK                                0x10
#define _CLCnGLS2_G3D3T_POSN                                0x5
#define _CLCnGLS2_G3D3T_POSITION                            0x5
#define _CLCnGLS2_G3D3T_SIZE                                0x1
#define _CLCnGLS2_G3D3T_LENGTH                              0x1
#define _CLCnGLS2_G3D3T_MASK                                0x20
#define _CLCnGLS2_G3D4N_POSN                                0x6
#define _CLCnGLS2_G3D4N_POSITION                            0x6
#define _CLCnGLS2_G3D4N_SIZE                                0x1
#define _CLCnGLS2_G3D4N_LENGTH                              0x1
#define _CLCnGLS2_G3D4N_MASK                                0x40
#define _CLCnGLS2_G3D4T_POSN                                0x7
#define _CLCnGLS2_G3D4T_POSITION                            0x7
#define _CLCnGLS2_G3D4T_SIZE                                0x1
#define _CLCnGLS2_G3D4T_LENGTH                              0x1
#define _CLCnGLS2_G3D4T_MASK                                0x80

// Register: CLCnGLS3
#define CLCnGLS3 CLCnGLS3
extern volatile unsigned char           CLCnGLS3            __at(0x0DF);
#ifndef _LIB_BUILD
asm("CLCnGLS3 equ 0DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLCnGLS3bits_t;
extern volatile CLCnGLS3bits_t CLCnGLS3bits __at(0x0DF);
// bitfield macros
#define _CLCnGLS3_G4D1N_POSN                                0x0
#define _CLCnGLS3_G4D1N_POSITION                            0x0
#define _CLCnGLS3_G4D1N_SIZE                                0x1
#define _CLCnGLS3_G4D1N_LENGTH                              0x1
#define _CLCnGLS3_G4D1N_MASK                                0x1
#define _CLCnGLS3_G4D1T_POSN                                0x1
#define _CLCnGLS3_G4D1T_POSITION                            0x1
#define _CLCnGLS3_G4D1T_SIZE                                0x1
#define _CLCnGLS3_G4D1T_LENGTH                              0x1
#define _CLCnGLS3_G4D1T_MASK                                0x2
#define _CLCnGLS3_G4D2N_POSN                                0x2
#define _CLCnGLS3_G4D2N_POSITION                            0x2
#define _CLCnGLS3_G4D2N_SIZE                                0x1
#define _CLCnGLS3_G4D2N_LENGTH                              0x1
#define _CLCnGLS3_G4D2N_MASK                                0x4
#define _CLCnGLS3_G4D2T_POSN                                0x3
#define _CLCnGLS3_G4D2T_POSITION                            0x3
#define _CLCnGLS3_G4D2T_SIZE                                0x1
#define _CLCnGLS3_G4D2T_LENGTH                              0x1
#define _CLCnGLS3_G4D2T_MASK                                0x8
#define _CLCnGLS3_G4D3N_POSN                                0x4
#define _CLCnGLS3_G4D3N_POSITION                            0x4
#define _CLCnGLS3_G4D3N_SIZE                                0x1
#define _CLCnGLS3_G4D3N_LENGTH                              0x1
#define _CLCnGLS3_G4D3N_MASK                                0x10
#define _CLCnGLS3_G4D3T_POSN                                0x5
#define _CLCnGLS3_G4D3T_POSITION                            0x5
#define _CLCnGLS3_G4D3T_SIZE                                0x1
#define _CLCnGLS3_G4D3T_LENGTH                              0x1
#define _CLCnGLS3_G4D3T_MASK                                0x20
#define _CLCnGLS3_G4D4N_POSN                                0x6
#define _CLCnGLS3_G4D4N_POSITION                            0x6
#define _CLCnGLS3_G4D4N_SIZE                                0x1
#define _CLCnGLS3_G4D4N_LENGTH                              0x1
#define _CLCnGLS3_G4D4N_MASK                                0x40
#define _CLCnGLS3_G4D4T_POSN                                0x7
#define _CLCnGLS3_G4D4T_POSITION                            0x7
#define _CLCnGLS3_G4D4T_SIZE                                0x1
#define _CLCnGLS3_G4D4T_LENGTH                              0x1
#define _CLCnGLS3_G4D4T_MASK                                0x80

// Register: DMASELECT
#define DMASELECT DMASELECT
extern volatile unsigned char           DMASELECT           __at(0x0E8);
#ifndef _LIB_BUILD
asm("DMASELECT equ 0E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLCT                   :8;
    };
    struct {
        unsigned SLCT0                  :1;
        unsigned SLCT1                  :1;
        unsigned SLCT2                  :1;
    };
} DMASELECTbits_t;
extern volatile DMASELECTbits_t DMASELECTbits __at(0x0E8);
// bitfield macros
#define _DMASELECT_SLCT_POSN                                0x0
#define _DMASELECT_SLCT_POSITION                            0x0
#define _DMASELECT_SLCT_SIZE                                0x8
#define _DMASELECT_SLCT_LENGTH                              0x8
#define _DMASELECT_SLCT_MASK                                0xFF
#define _DMASELECT_SLCT0_POSN                               0x0
#define _DMASELECT_SLCT0_POSITION                           0x0
#define _DMASELECT_SLCT0_SIZE                               0x1
#define _DMASELECT_SLCT0_LENGTH                             0x1
#define _DMASELECT_SLCT0_MASK                               0x1
#define _DMASELECT_SLCT1_POSN                               0x1
#define _DMASELECT_SLCT1_POSITION                           0x1
#define _DMASELECT_SLCT1_SIZE                               0x1
#define _DMASELECT_SLCT1_LENGTH                             0x1
#define _DMASELECT_SLCT1_MASK                               0x2
#define _DMASELECT_SLCT2_POSN                               0x2
#define _DMASELECT_SLCT2_POSITION                           0x2
#define _DMASELECT_SLCT2_SIZE                               0x1
#define _DMASELECT_SLCT2_LENGTH                             0x1
#define _DMASELECT_SLCT2_MASK                               0x4

// Register: DMAnBUF
#define DMAnBUF DMAnBUF
extern volatile unsigned char           DMAnBUF             __at(0x0E9);
#ifndef _LIB_BUILD
asm("DMAnBUF equ 0E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
} DMAnBUFbits_t;
extern volatile DMAnBUFbits_t DMAnBUFbits __at(0x0E9);
// bitfield macros
#define _DMAnBUF_BUF_POSN                                   0x0
#define _DMAnBUF_BUF_POSITION                               0x0
#define _DMAnBUF_BUF_SIZE                                   0x8
#define _DMAnBUF_BUF_LENGTH                                 0x8
#define _DMAnBUF_BUF_MASK                                   0xFF
#define _DMAnBUF_BUF0_POSN                                  0x0
#define _DMAnBUF_BUF0_POSITION                              0x0
#define _DMAnBUF_BUF0_SIZE                                  0x1
#define _DMAnBUF_BUF0_LENGTH                                0x1
#define _DMAnBUF_BUF0_MASK                                  0x1
#define _DMAnBUF_BUF1_POSN                                  0x1
#define _DMAnBUF_BUF1_POSITION                              0x1
#define _DMAnBUF_BUF1_SIZE                                  0x1
#define _DMAnBUF_BUF1_LENGTH                                0x1
#define _DMAnBUF_BUF1_MASK                                  0x2
#define _DMAnBUF_BUF2_POSN                                  0x2
#define _DMAnBUF_BUF2_POSITION                              0x2
#define _DMAnBUF_BUF2_SIZE                                  0x1
#define _DMAnBUF_BUF2_LENGTH                                0x1
#define _DMAnBUF_BUF2_MASK                                  0x4
#define _DMAnBUF_BUF3_POSN                                  0x3
#define _DMAnBUF_BUF3_POSITION                              0x3
#define _DMAnBUF_BUF3_SIZE                                  0x1
#define _DMAnBUF_BUF3_LENGTH                                0x1
#define _DMAnBUF_BUF3_MASK                                  0x8
#define _DMAnBUF_BUF4_POSN                                  0x4
#define _DMAnBUF_BUF4_POSITION                              0x4
#define _DMAnBUF_BUF4_SIZE                                  0x1
#define _DMAnBUF_BUF4_LENGTH                                0x1
#define _DMAnBUF_BUF4_MASK                                  0x10
#define _DMAnBUF_BUF5_POSN                                  0x5
#define _DMAnBUF_BUF5_POSITION                              0x5
#define _DMAnBUF_BUF5_SIZE                                  0x1
#define _DMAnBUF_BUF5_LENGTH                                0x1
#define _DMAnBUF_BUF5_MASK                                  0x20
#define _DMAnBUF_BUF6_POSN                                  0x6
#define _DMAnBUF_BUF6_POSITION                              0x6
#define _DMAnBUF_BUF6_SIZE                                  0x1
#define _DMAnBUF_BUF6_LENGTH                                0x1
#define _DMAnBUF_BUF6_MASK                                  0x40
#define _DMAnBUF_BUF7_POSN                                  0x7
#define _DMAnBUF_BUF7_POSITION                              0x7
#define _DMAnBUF_BUF7_SIZE                                  0x1
#define _DMAnBUF_BUF7_LENGTH                                0x1
#define _DMAnBUF_BUF7_MASK                                  0x80

// Register: DMAnDCNT
#define DMAnDCNT DMAnDCNT
extern volatile unsigned short          DMAnDCNT            __at(0x0EA);
#ifndef _LIB_BUILD
asm("DMAnDCNT equ 0EAh");
#endif

// Register: DMAnDCNTL
#define DMAnDCNTL DMAnDCNTL
extern volatile unsigned char           DMAnDCNTL           __at(0x0EA);
#ifndef _LIB_BUILD
asm("DMAnDCNTL equ 0EAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT0                  :1;
        unsigned DCNT1                  :1;
        unsigned DCNT2                  :1;
        unsigned DCNT3                  :1;
        unsigned DCNT4                  :1;
        unsigned DCNT5                  :1;
        unsigned DCNT6                  :1;
        unsigned DCNT7                  :1;
    };
} DMAnDCNTLbits_t;
extern volatile DMAnDCNTLbits_t DMAnDCNTLbits __at(0x0EA);
// bitfield macros
#define _DMAnDCNTL_DCNT_POSN                                0x0
#define _DMAnDCNTL_DCNT_POSITION                            0x0
#define _DMAnDCNTL_DCNT_SIZE                                0x8
#define _DMAnDCNTL_DCNT_LENGTH                              0x8
#define _DMAnDCNTL_DCNT_MASK                                0xFF
#define _DMAnDCNTL_DCNT0_POSN                               0x0
#define _DMAnDCNTL_DCNT0_POSITION                           0x0
#define _DMAnDCNTL_DCNT0_SIZE                               0x1
#define _DMAnDCNTL_DCNT0_LENGTH                             0x1
#define _DMAnDCNTL_DCNT0_MASK                               0x1
#define _DMAnDCNTL_DCNT1_POSN                               0x1
#define _DMAnDCNTL_DCNT1_POSITION                           0x1
#define _DMAnDCNTL_DCNT1_SIZE                               0x1
#define _DMAnDCNTL_DCNT1_LENGTH                             0x1
#define _DMAnDCNTL_DCNT1_MASK                               0x2
#define _DMAnDCNTL_DCNT2_POSN                               0x2
#define _DMAnDCNTL_DCNT2_POSITION                           0x2
#define _DMAnDCNTL_DCNT2_SIZE                               0x1
#define _DMAnDCNTL_DCNT2_LENGTH                             0x1
#define _DMAnDCNTL_DCNT2_MASK                               0x4
#define _DMAnDCNTL_DCNT3_POSN                               0x3
#define _DMAnDCNTL_DCNT3_POSITION                           0x3
#define _DMAnDCNTL_DCNT3_SIZE                               0x1
#define _DMAnDCNTL_DCNT3_LENGTH                             0x1
#define _DMAnDCNTL_DCNT3_MASK                               0x8
#define _DMAnDCNTL_DCNT4_POSN                               0x4
#define _DMAnDCNTL_DCNT4_POSITION                           0x4
#define _DMAnDCNTL_DCNT4_SIZE                               0x1
#define _DMAnDCNTL_DCNT4_LENGTH                             0x1
#define _DMAnDCNTL_DCNT4_MASK                               0x10
#define _DMAnDCNTL_DCNT5_POSN                               0x5
#define _DMAnDCNTL_DCNT5_POSITION                           0x5
#define _DMAnDCNTL_DCNT5_SIZE                               0x1
#define _DMAnDCNTL_DCNT5_LENGTH                             0x1
#define _DMAnDCNTL_DCNT5_MASK                               0x20
#define _DMAnDCNTL_DCNT6_POSN                               0x6
#define _DMAnDCNTL_DCNT6_POSITION                           0x6
#define _DMAnDCNTL_DCNT6_SIZE                               0x1
#define _DMAnDCNTL_DCNT6_LENGTH                             0x1
#define _DMAnDCNTL_DCNT6_MASK                               0x40
#define _DMAnDCNTL_DCNT7_POSN                               0x7
#define _DMAnDCNTL_DCNT7_POSITION                           0x7
#define _DMAnDCNTL_DCNT7_SIZE                               0x1
#define _DMAnDCNTL_DCNT7_LENGTH                             0x1
#define _DMAnDCNTL_DCNT7_MASK                               0x80

// Register: DMAnDCNTH
#define DMAnDCNTH DMAnDCNTH
extern volatile unsigned char           DMAnDCNTH           __at(0x0EB);
#ifndef _LIB_BUILD
asm("DMAnDCNTH equ 0EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT8                  :1;
        unsigned DCNT9                  :1;
        unsigned DCNT10                 :1;
        unsigned DCNT11                 :1;
    };
} DMAnDCNTHbits_t;
extern volatile DMAnDCNTHbits_t DMAnDCNTHbits __at(0x0EB);
// bitfield macros
#define _DMAnDCNTH_DCNT_POSN                                0x0
#define _DMAnDCNTH_DCNT_POSITION                            0x0
#define _DMAnDCNTH_DCNT_SIZE                                0x8
#define _DMAnDCNTH_DCNT_LENGTH                              0x8
#define _DMAnDCNTH_DCNT_MASK                                0xFF
#define _DMAnDCNTH_DCNT8_POSN                               0x0
#define _DMAnDCNTH_DCNT8_POSITION                           0x0
#define _DMAnDCNTH_DCNT8_SIZE                               0x1
#define _DMAnDCNTH_DCNT8_LENGTH                             0x1
#define _DMAnDCNTH_DCNT8_MASK                               0x1
#define _DMAnDCNTH_DCNT9_POSN                               0x1
#define _DMAnDCNTH_DCNT9_POSITION                           0x1
#define _DMAnDCNTH_DCNT9_SIZE                               0x1
#define _DMAnDCNTH_DCNT9_LENGTH                             0x1
#define _DMAnDCNTH_DCNT9_MASK                               0x2
#define _DMAnDCNTH_DCNT10_POSN                              0x2
#define _DMAnDCNTH_DCNT10_POSITION                          0x2
#define _DMAnDCNTH_DCNT10_SIZE                              0x1
#define _DMAnDCNTH_DCNT10_LENGTH                            0x1
#define _DMAnDCNTH_DCNT10_MASK                              0x4
#define _DMAnDCNTH_DCNT11_POSN                              0x3
#define _DMAnDCNTH_DCNT11_POSITION                          0x3
#define _DMAnDCNTH_DCNT11_SIZE                              0x1
#define _DMAnDCNTH_DCNT11_LENGTH                            0x1
#define _DMAnDCNTH_DCNT11_MASK                              0x8

// Register: DMAnDPTR
#define DMAnDPTR DMAnDPTR
extern volatile unsigned short          DMAnDPTR            __at(0x0EC);
#ifndef _LIB_BUILD
asm("DMAnDPTR equ 0ECh");
#endif

// Register: DMAnDPTRL
#define DMAnDPTRL DMAnDPTRL
extern volatile unsigned char           DMAnDPTRL           __at(0x0EC);
#ifndef _LIB_BUILD
asm("DMAnDPTRL equ 0ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR0                  :1;
        unsigned DPTR1                  :1;
        unsigned DPTR2                  :1;
        unsigned DPTR3                  :1;
        unsigned DPTR4                  :1;
        unsigned DPTR5                  :1;
        unsigned DPTR6                  :1;
        unsigned DPTR7                  :1;
    };
} DMAnDPTRLbits_t;
extern volatile DMAnDPTRLbits_t DMAnDPTRLbits __at(0x0EC);
// bitfield macros
#define _DMAnDPTRL_DPTR_POSN                                0x0
#define _DMAnDPTRL_DPTR_POSITION                            0x0
#define _DMAnDPTRL_DPTR_SIZE                                0x8
#define _DMAnDPTRL_DPTR_LENGTH                              0x8
#define _DMAnDPTRL_DPTR_MASK                                0xFF
#define _DMAnDPTRL_DPTR0_POSN                               0x0
#define _DMAnDPTRL_DPTR0_POSITION                           0x0
#define _DMAnDPTRL_DPTR0_SIZE                               0x1
#define _DMAnDPTRL_DPTR0_LENGTH                             0x1
#define _DMAnDPTRL_DPTR0_MASK                               0x1
#define _DMAnDPTRL_DPTR1_POSN                               0x1
#define _DMAnDPTRL_DPTR1_POSITION                           0x1
#define _DMAnDPTRL_DPTR1_SIZE                               0x1
#define _DMAnDPTRL_DPTR1_LENGTH                             0x1
#define _DMAnDPTRL_DPTR1_MASK                               0x2
#define _DMAnDPTRL_DPTR2_POSN                               0x2
#define _DMAnDPTRL_DPTR2_POSITION                           0x2
#define _DMAnDPTRL_DPTR2_SIZE                               0x1
#define _DMAnDPTRL_DPTR2_LENGTH                             0x1
#define _DMAnDPTRL_DPTR2_MASK                               0x4
#define _DMAnDPTRL_DPTR3_POSN                               0x3
#define _DMAnDPTRL_DPTR3_POSITION                           0x3
#define _DMAnDPTRL_DPTR3_SIZE                               0x1
#define _DMAnDPTRL_DPTR3_LENGTH                             0x1
#define _DMAnDPTRL_DPTR3_MASK                               0x8
#define _DMAnDPTRL_DPTR4_POSN                               0x4
#define _DMAnDPTRL_DPTR4_POSITION                           0x4
#define _DMAnDPTRL_DPTR4_SIZE                               0x1
#define _DMAnDPTRL_DPTR4_LENGTH                             0x1
#define _DMAnDPTRL_DPTR4_MASK                               0x10
#define _DMAnDPTRL_DPTR5_POSN                               0x5
#define _DMAnDPTRL_DPTR5_POSITION                           0x5
#define _DMAnDPTRL_DPTR5_SIZE                               0x1
#define _DMAnDPTRL_DPTR5_LENGTH                             0x1
#define _DMAnDPTRL_DPTR5_MASK                               0x20
#define _DMAnDPTRL_DPTR6_POSN                               0x6
#define _DMAnDPTRL_DPTR6_POSITION                           0x6
#define _DMAnDPTRL_DPTR6_SIZE                               0x1
#define _DMAnDPTRL_DPTR6_LENGTH                             0x1
#define _DMAnDPTRL_DPTR6_MASK                               0x40
#define _DMAnDPTRL_DPTR7_POSN                               0x7
#define _DMAnDPTRL_DPTR7_POSITION                           0x7
#define _DMAnDPTRL_DPTR7_SIZE                               0x1
#define _DMAnDPTRL_DPTR7_LENGTH                             0x1
#define _DMAnDPTRL_DPTR7_MASK                               0x80

// Register: DMAnDPTRH
#define DMAnDPTRH DMAnDPTRH
extern volatile unsigned char           DMAnDPTRH           __at(0x0ED);
#ifndef _LIB_BUILD
asm("DMAnDPTRH equ 0EDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR8                  :1;
        unsigned DPTR9                  :1;
        unsigned DPTR10                 :1;
        unsigned DPTR11                 :1;
        unsigned DPTR12                 :1;
        unsigned DPTR13                 :1;
        unsigned DPTR14                 :1;
        unsigned DPTR15                 :1;
    };
} DMAnDPTRHbits_t;
extern volatile DMAnDPTRHbits_t DMAnDPTRHbits __at(0x0ED);
// bitfield macros
#define _DMAnDPTRH_DPTR_POSN                                0x0
#define _DMAnDPTRH_DPTR_POSITION                            0x0
#define _DMAnDPTRH_DPTR_SIZE                                0x8
#define _DMAnDPTRH_DPTR_LENGTH                              0x8
#define _DMAnDPTRH_DPTR_MASK                                0xFF
#define _DMAnDPTRH_DPTR8_POSN                               0x0
#define _DMAnDPTRH_DPTR8_POSITION                           0x0
#define _DMAnDPTRH_DPTR8_SIZE                               0x1
#define _DMAnDPTRH_DPTR8_LENGTH                             0x1
#define _DMAnDPTRH_DPTR8_MASK                               0x1
#define _DMAnDPTRH_DPTR9_POSN                               0x1
#define _DMAnDPTRH_DPTR9_POSITION                           0x1
#define _DMAnDPTRH_DPTR9_SIZE                               0x1
#define _DMAnDPTRH_DPTR9_LENGTH                             0x1
#define _DMAnDPTRH_DPTR9_MASK                               0x2
#define _DMAnDPTRH_DPTR10_POSN                              0x2
#define _DMAnDPTRH_DPTR10_POSITION                          0x2
#define _DMAnDPTRH_DPTR10_SIZE                              0x1
#define _DMAnDPTRH_DPTR10_LENGTH                            0x1
#define _DMAnDPTRH_DPTR10_MASK                              0x4
#define _DMAnDPTRH_DPTR11_POSN                              0x3
#define _DMAnDPTRH_DPTR11_POSITION                          0x3
#define _DMAnDPTRH_DPTR11_SIZE                              0x1
#define _DMAnDPTRH_DPTR11_LENGTH                            0x1
#define _DMAnDPTRH_DPTR11_MASK                              0x8
#define _DMAnDPTRH_DPTR12_POSN                              0x4
#define _DMAnDPTRH_DPTR12_POSITION                          0x4
#define _DMAnDPTRH_DPTR12_SIZE                              0x1
#define _DMAnDPTRH_DPTR12_LENGTH                            0x1
#define _DMAnDPTRH_DPTR12_MASK                              0x10
#define _DMAnDPTRH_DPTR13_POSN                              0x5
#define _DMAnDPTRH_DPTR13_POSITION                          0x5
#define _DMAnDPTRH_DPTR13_SIZE                              0x1
#define _DMAnDPTRH_DPTR13_LENGTH                            0x1
#define _DMAnDPTRH_DPTR13_MASK                              0x20
#define _DMAnDPTRH_DPTR14_POSN                              0x6
#define _DMAnDPTRH_DPTR14_POSITION                          0x6
#define _DMAnDPTRH_DPTR14_SIZE                              0x1
#define _DMAnDPTRH_DPTR14_LENGTH                            0x1
#define _DMAnDPTRH_DPTR14_MASK                              0x40
#define _DMAnDPTRH_DPTR15_POSN                              0x7
#define _DMAnDPTRH_DPTR15_POSITION                          0x7
#define _DMAnDPTRH_DPTR15_SIZE                              0x1
#define _DMAnDPTRH_DPTR15_LENGTH                            0x1
#define _DMAnDPTRH_DPTR15_MASK                              0x80

// Register: DMAnDSZ
#define DMAnDSZ DMAnDSZ
extern volatile unsigned short          DMAnDSZ             __at(0x0EE);
#ifndef _LIB_BUILD
asm("DMAnDSZ equ 0EEh");
#endif

// Register: DMAnDSZL
#define DMAnDSZL DMAnDSZL
extern volatile unsigned char           DMAnDSZL            __at(0x0EE);
#ifndef _LIB_BUILD
asm("DMAnDSZL equ 0EEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DSZ0                   :1;
        unsigned DSZ1                   :1;
        unsigned DSZ2                   :1;
        unsigned DSZ3                   :1;
        unsigned DSZ4                   :1;
        unsigned DSZ5                   :1;
        unsigned DSZ6                   :1;
        unsigned DSZ7                   :1;
    };
} DMAnDSZLbits_t;
extern volatile DMAnDSZLbits_t DMAnDSZLbits __at(0x0EE);
// bitfield macros
#define _DMAnDSZL_DSZ_POSN                                  0x0
#define _DMAnDSZL_DSZ_POSITION                              0x0
#define _DMAnDSZL_DSZ_SIZE                                  0x8
#define _DMAnDSZL_DSZ_LENGTH                                0x8
#define _DMAnDSZL_DSZ_MASK                                  0xFF
#define _DMAnDSZL_DSZ0_POSN                                 0x0
#define _DMAnDSZL_DSZ0_POSITION                             0x0
#define _DMAnDSZL_DSZ0_SIZE                                 0x1
#define _DMAnDSZL_DSZ0_LENGTH                               0x1
#define _DMAnDSZL_DSZ0_MASK                                 0x1
#define _DMAnDSZL_DSZ1_POSN                                 0x1
#define _DMAnDSZL_DSZ1_POSITION                             0x1
#define _DMAnDSZL_DSZ1_SIZE                                 0x1
#define _DMAnDSZL_DSZ1_LENGTH                               0x1
#define _DMAnDSZL_DSZ1_MASK                                 0x2
#define _DMAnDSZL_DSZ2_POSN                                 0x2
#define _DMAnDSZL_DSZ2_POSITION                             0x2
#define _DMAnDSZL_DSZ2_SIZE                                 0x1
#define _DMAnDSZL_DSZ2_LENGTH                               0x1
#define _DMAnDSZL_DSZ2_MASK                                 0x4
#define _DMAnDSZL_DSZ3_POSN                                 0x3
#define _DMAnDSZL_DSZ3_POSITION                             0x3
#define _DMAnDSZL_DSZ3_SIZE                                 0x1
#define _DMAnDSZL_DSZ3_LENGTH                               0x1
#define _DMAnDSZL_DSZ3_MASK                                 0x8
#define _DMAnDSZL_DSZ4_POSN                                 0x4
#define _DMAnDSZL_DSZ4_POSITION                             0x4
#define _DMAnDSZL_DSZ4_SIZE                                 0x1
#define _DMAnDSZL_DSZ4_LENGTH                               0x1
#define _DMAnDSZL_DSZ4_MASK                                 0x10
#define _DMAnDSZL_DSZ5_POSN                                 0x5
#define _DMAnDSZL_DSZ5_POSITION                             0x5
#define _DMAnDSZL_DSZ5_SIZE                                 0x1
#define _DMAnDSZL_DSZ5_LENGTH                               0x1
#define _DMAnDSZL_DSZ5_MASK                                 0x20
#define _DMAnDSZL_DSZ6_POSN                                 0x6
#define _DMAnDSZL_DSZ6_POSITION                             0x6
#define _DMAnDSZL_DSZ6_SIZE                                 0x1
#define _DMAnDSZL_DSZ6_LENGTH                               0x1
#define _DMAnDSZL_DSZ6_MASK                                 0x40
#define _DMAnDSZL_DSZ7_POSN                                 0x7
#define _DMAnDSZL_DSZ7_POSITION                             0x7
#define _DMAnDSZL_DSZ7_SIZE                                 0x1
#define _DMAnDSZL_DSZ7_LENGTH                               0x1
#define _DMAnDSZL_DSZ7_MASK                                 0x80

// Register: DMAnDSZH
#define DMAnDSZH DMAnDSZH
extern volatile unsigned char           DMAnDSZH            __at(0x0EF);
#ifndef _LIB_BUILD
asm("DMAnDSZH equ 0EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DSZ8                   :1;
        unsigned DSZ9                   :1;
        unsigned DSZ10                  :1;
        unsigned DSZ11                  :1;
    };
} DMAnDSZHbits_t;
extern volatile DMAnDSZHbits_t DMAnDSZHbits __at(0x0EF);
// bitfield macros
#define _DMAnDSZH_DSZ_POSN                                  0x0
#define _DMAnDSZH_DSZ_POSITION                              0x0
#define _DMAnDSZH_DSZ_SIZE                                  0x8
#define _DMAnDSZH_DSZ_LENGTH                                0x8
#define _DMAnDSZH_DSZ_MASK                                  0xFF
#define _DMAnDSZH_DSZ8_POSN                                 0x0
#define _DMAnDSZH_DSZ8_POSITION                             0x0
#define _DMAnDSZH_DSZ8_SIZE                                 0x1
#define _DMAnDSZH_DSZ8_LENGTH                               0x1
#define _DMAnDSZH_DSZ8_MASK                                 0x1
#define _DMAnDSZH_DSZ9_POSN                                 0x1
#define _DMAnDSZH_DSZ9_POSITION                             0x1
#define _DMAnDSZH_DSZ9_SIZE                                 0x1
#define _DMAnDSZH_DSZ9_LENGTH                               0x1
#define _DMAnDSZH_DSZ9_MASK                                 0x2
#define _DMAnDSZH_DSZ10_POSN                                0x2
#define _DMAnDSZH_DSZ10_POSITION                            0x2
#define _DMAnDSZH_DSZ10_SIZE                                0x1
#define _DMAnDSZH_DSZ10_LENGTH                              0x1
#define _DMAnDSZH_DSZ10_MASK                                0x4
#define _DMAnDSZH_DSZ11_POSN                                0x3
#define _DMAnDSZH_DSZ11_POSITION                            0x3
#define _DMAnDSZH_DSZ11_SIZE                                0x1
#define _DMAnDSZH_DSZ11_LENGTH                              0x1
#define _DMAnDSZH_DSZ11_MASK                                0x8

// Register: DMAnDSA
#define DMAnDSA DMAnDSA
extern volatile unsigned short          DMAnDSA             __at(0x0F0);
#ifndef _LIB_BUILD
asm("DMAnDSA equ 0F0h");
#endif

// Register: DMAnDSAL
#define DMAnDSAL DMAnDSAL
extern volatile unsigned char           DMAnDSAL            __at(0x0F0);
#ifndef _LIB_BUILD
asm("DMAnDSAL equ 0F0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA0                   :1;
        unsigned DSA1                   :1;
        unsigned DSA2                   :1;
        unsigned DSA3                   :1;
        unsigned DSA4                   :1;
        unsigned DSA5                   :1;
        unsigned DSA6                   :1;
        unsigned DSA7                   :1;
    };
} DMAnDSALbits_t;
extern volatile DMAnDSALbits_t DMAnDSALbits __at(0x0F0);
// bitfield macros
#define _DMAnDSAL_DSA_POSN                                  0x0
#define _DMAnDSAL_DSA_POSITION                              0x0
#define _DMAnDSAL_DSA_SIZE                                  0x8
#define _DMAnDSAL_DSA_LENGTH                                0x8
#define _DMAnDSAL_DSA_MASK                                  0xFF
#define _DMAnDSAL_DSA0_POSN                                 0x0
#define _DMAnDSAL_DSA0_POSITION                             0x0
#define _DMAnDSAL_DSA0_SIZE                                 0x1
#define _DMAnDSAL_DSA0_LENGTH                               0x1
#define _DMAnDSAL_DSA0_MASK                                 0x1
#define _DMAnDSAL_DSA1_POSN                                 0x1
#define _DMAnDSAL_DSA1_POSITION                             0x1
#define _DMAnDSAL_DSA1_SIZE                                 0x1
#define _DMAnDSAL_DSA1_LENGTH                               0x1
#define _DMAnDSAL_DSA1_MASK                                 0x2
#define _DMAnDSAL_DSA2_POSN                                 0x2
#define _DMAnDSAL_DSA2_POSITION                             0x2
#define _DMAnDSAL_DSA2_SIZE                                 0x1
#define _DMAnDSAL_DSA2_LENGTH                               0x1
#define _DMAnDSAL_DSA2_MASK                                 0x4
#define _DMAnDSAL_DSA3_POSN                                 0x3
#define _DMAnDSAL_DSA3_POSITION                             0x3
#define _DMAnDSAL_DSA3_SIZE                                 0x1
#define _DMAnDSAL_DSA3_LENGTH                               0x1
#define _DMAnDSAL_DSA3_MASK                                 0x8
#define _DMAnDSAL_DSA4_POSN                                 0x4
#define _DMAnDSAL_DSA4_POSITION                             0x4
#define _DMAnDSAL_DSA4_SIZE                                 0x1
#define _DMAnDSAL_DSA4_LENGTH                               0x1
#define _DMAnDSAL_DSA4_MASK                                 0x10
#define _DMAnDSAL_DSA5_POSN                                 0x5
#define _DMAnDSAL_DSA5_POSITION                             0x5
#define _DMAnDSAL_DSA5_SIZE                                 0x1
#define _DMAnDSAL_DSA5_LENGTH                               0x1
#define _DMAnDSAL_DSA5_MASK                                 0x20
#define _DMAnDSAL_DSA6_POSN                                 0x6
#define _DMAnDSAL_DSA6_POSITION                             0x6
#define _DMAnDSAL_DSA6_SIZE                                 0x1
#define _DMAnDSAL_DSA6_LENGTH                               0x1
#define _DMAnDSAL_DSA6_MASK                                 0x40
#define _DMAnDSAL_DSA7_POSN                                 0x7
#define _DMAnDSAL_DSA7_POSITION                             0x7
#define _DMAnDSAL_DSA7_SIZE                                 0x1
#define _DMAnDSAL_DSA7_LENGTH                               0x1
#define _DMAnDSAL_DSA7_MASK                                 0x80

// Register: DMAnDSAH
#define DMAnDSAH DMAnDSAH
extern volatile unsigned char           DMAnDSAH            __at(0x0F1);
#ifndef _LIB_BUILD
asm("DMAnDSAH equ 0F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA8                   :1;
        unsigned DSA9                   :1;
        unsigned DSA10                  :1;
        unsigned DSA11                  :1;
        unsigned DSA12                  :1;
        unsigned DSA13                  :1;
        unsigned DSA14                  :1;
        unsigned DSA15                  :1;
    };
} DMAnDSAHbits_t;
extern volatile DMAnDSAHbits_t DMAnDSAHbits __at(0x0F1);
// bitfield macros
#define _DMAnDSAH_DSA_POSN                                  0x0
#define _DMAnDSAH_DSA_POSITION                              0x0
#define _DMAnDSAH_DSA_SIZE                                  0x8
#define _DMAnDSAH_DSA_LENGTH                                0x8
#define _DMAnDSAH_DSA_MASK                                  0xFF
#define _DMAnDSAH_DSA8_POSN                                 0x0
#define _DMAnDSAH_DSA8_POSITION                             0x0
#define _DMAnDSAH_DSA8_SIZE                                 0x1
#define _DMAnDSAH_DSA8_LENGTH                               0x1
#define _DMAnDSAH_DSA8_MASK                                 0x1
#define _DMAnDSAH_DSA9_POSN                                 0x1
#define _DMAnDSAH_DSA9_POSITION                             0x1
#define _DMAnDSAH_DSA9_SIZE                                 0x1
#define _DMAnDSAH_DSA9_LENGTH                               0x1
#define _DMAnDSAH_DSA9_MASK                                 0x2
#define _DMAnDSAH_DSA10_POSN                                0x2
#define _DMAnDSAH_DSA10_POSITION                            0x2
#define _DMAnDSAH_DSA10_SIZE                                0x1
#define _DMAnDSAH_DSA10_LENGTH                              0x1
#define _DMAnDSAH_DSA10_MASK                                0x4
#define _DMAnDSAH_DSA11_POSN                                0x3
#define _DMAnDSAH_DSA11_POSITION                            0x3
#define _DMAnDSAH_DSA11_SIZE                                0x1
#define _DMAnDSAH_DSA11_LENGTH                              0x1
#define _DMAnDSAH_DSA11_MASK                                0x8
#define _DMAnDSAH_DSA12_POSN                                0x4
#define _DMAnDSAH_DSA12_POSITION                            0x4
#define _DMAnDSAH_DSA12_SIZE                                0x1
#define _DMAnDSAH_DSA12_LENGTH                              0x1
#define _DMAnDSAH_DSA12_MASK                                0x10
#define _DMAnDSAH_DSA13_POSN                                0x5
#define _DMAnDSAH_DSA13_POSITION                            0x5
#define _DMAnDSAH_DSA13_SIZE                                0x1
#define _DMAnDSAH_DSA13_LENGTH                              0x1
#define _DMAnDSAH_DSA13_MASK                                0x20
#define _DMAnDSAH_DSA14_POSN                                0x6
#define _DMAnDSAH_DSA14_POSITION                            0x6
#define _DMAnDSAH_DSA14_SIZE                                0x1
#define _DMAnDSAH_DSA14_LENGTH                              0x1
#define _DMAnDSAH_DSA14_MASK                                0x40
#define _DMAnDSAH_DSA15_POSN                                0x7
#define _DMAnDSAH_DSA15_POSITION                            0x7
#define _DMAnDSAH_DSA15_SIZE                                0x1
#define _DMAnDSAH_DSA15_LENGTH                              0x1
#define _DMAnDSAH_DSA15_MASK                                0x80

// Register: DMAnSCNT
#define DMAnSCNT DMAnSCNT
extern volatile unsigned short          DMAnSCNT            __at(0x0F2);
#ifndef _LIB_BUILD
asm("DMAnSCNT equ 0F2h");
#endif

// Register: DMAnSCNTL
#define DMAnSCNTL DMAnSCNTL
extern volatile unsigned char           DMAnSCNTL           __at(0x0F2);
#ifndef _LIB_BUILD
asm("DMAnSCNTL equ 0F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT0                  :1;
        unsigned SCNT1                  :1;
        unsigned SCNT2                  :1;
        unsigned SCNT3                  :1;
        unsigned SCNT4                  :1;
        unsigned SCNT5                  :1;
        unsigned SCNT6                  :1;
        unsigned SCNT7                  :1;
    };
} DMAnSCNTLbits_t;
extern volatile DMAnSCNTLbits_t DMAnSCNTLbits __at(0x0F2);
// bitfield macros
#define _DMAnSCNTL_SCNT_POSN                                0x0
#define _DMAnSCNTL_SCNT_POSITION                            0x0
#define _DMAnSCNTL_SCNT_SIZE                                0x8
#define _DMAnSCNTL_SCNT_LENGTH                              0x8
#define _DMAnSCNTL_SCNT_MASK                                0xFF
#define _DMAnSCNTL_SCNT0_POSN                               0x0
#define _DMAnSCNTL_SCNT0_POSITION                           0x0
#define _DMAnSCNTL_SCNT0_SIZE                               0x1
#define _DMAnSCNTL_SCNT0_LENGTH                             0x1
#define _DMAnSCNTL_SCNT0_MASK                               0x1
#define _DMAnSCNTL_SCNT1_POSN                               0x1
#define _DMAnSCNTL_SCNT1_POSITION                           0x1
#define _DMAnSCNTL_SCNT1_SIZE                               0x1
#define _DMAnSCNTL_SCNT1_LENGTH                             0x1
#define _DMAnSCNTL_SCNT1_MASK                               0x2
#define _DMAnSCNTL_SCNT2_POSN                               0x2
#define _DMAnSCNTL_SCNT2_POSITION                           0x2
#define _DMAnSCNTL_SCNT2_SIZE                               0x1
#define _DMAnSCNTL_SCNT2_LENGTH                             0x1
#define _DMAnSCNTL_SCNT2_MASK                               0x4
#define _DMAnSCNTL_SCNT3_POSN                               0x3
#define _DMAnSCNTL_SCNT3_POSITION                           0x3
#define _DMAnSCNTL_SCNT3_SIZE                               0x1
#define _DMAnSCNTL_SCNT3_LENGTH                             0x1
#define _DMAnSCNTL_SCNT3_MASK                               0x8
#define _DMAnSCNTL_SCNT4_POSN                               0x4
#define _DMAnSCNTL_SCNT4_POSITION                           0x4
#define _DMAnSCNTL_SCNT4_SIZE                               0x1
#define _DMAnSCNTL_SCNT4_LENGTH                             0x1
#define _DMAnSCNTL_SCNT4_MASK                               0x10
#define _DMAnSCNTL_SCNT5_POSN                               0x5
#define _DMAnSCNTL_SCNT5_POSITION                           0x5
#define _DMAnSCNTL_SCNT5_SIZE                               0x1
#define _DMAnSCNTL_SCNT5_LENGTH                             0x1
#define _DMAnSCNTL_SCNT5_MASK                               0x20
#define _DMAnSCNTL_SCNT6_POSN                               0x6
#define _DMAnSCNTL_SCNT6_POSITION                           0x6
#define _DMAnSCNTL_SCNT6_SIZE                               0x1
#define _DMAnSCNTL_SCNT6_LENGTH                             0x1
#define _DMAnSCNTL_SCNT6_MASK                               0x40
#define _DMAnSCNTL_SCNT7_POSN                               0x7
#define _DMAnSCNTL_SCNT7_POSITION                           0x7
#define _DMAnSCNTL_SCNT7_SIZE                               0x1
#define _DMAnSCNTL_SCNT7_LENGTH                             0x1
#define _DMAnSCNTL_SCNT7_MASK                               0x80

// Register: DMAnSCNTH
#define DMAnSCNTH DMAnSCNTH
extern volatile unsigned char           DMAnSCNTH           __at(0x0F3);
#ifndef _LIB_BUILD
asm("DMAnSCNTH equ 0F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT8                  :1;
        unsigned SCNT9                  :1;
        unsigned SCNT10                 :1;
        unsigned SCNT11                 :1;
    };
} DMAnSCNTHbits_t;
extern volatile DMAnSCNTHbits_t DMAnSCNTHbits __at(0x0F3);
// bitfield macros
#define _DMAnSCNTH_SCNT_POSN                                0x0
#define _DMAnSCNTH_SCNT_POSITION                            0x0
#define _DMAnSCNTH_SCNT_SIZE                                0x8
#define _DMAnSCNTH_SCNT_LENGTH                              0x8
#define _DMAnSCNTH_SCNT_MASK                                0xFF
#define _DMAnSCNTH_SCNT8_POSN                               0x0
#define _DMAnSCNTH_SCNT8_POSITION                           0x0
#define _DMAnSCNTH_SCNT8_SIZE                               0x1
#define _DMAnSCNTH_SCNT8_LENGTH                             0x1
#define _DMAnSCNTH_SCNT8_MASK                               0x1
#define _DMAnSCNTH_SCNT9_POSN                               0x1
#define _DMAnSCNTH_SCNT9_POSITION                           0x1
#define _DMAnSCNTH_SCNT9_SIZE                               0x1
#define _DMAnSCNTH_SCNT9_LENGTH                             0x1
#define _DMAnSCNTH_SCNT9_MASK                               0x2
#define _DMAnSCNTH_SCNT10_POSN                              0x2
#define _DMAnSCNTH_SCNT10_POSITION                          0x2
#define _DMAnSCNTH_SCNT10_SIZE                              0x1
#define _DMAnSCNTH_SCNT10_LENGTH                            0x1
#define _DMAnSCNTH_SCNT10_MASK                              0x4
#define _DMAnSCNTH_SCNT11_POSN                              0x3
#define _DMAnSCNTH_SCNT11_POSITION                          0x3
#define _DMAnSCNTH_SCNT11_SIZE                              0x1
#define _DMAnSCNTH_SCNT11_LENGTH                            0x1
#define _DMAnSCNTH_SCNT11_MASK                              0x8

// Register: DMAnSPTR
#define DMAnSPTR DMAnSPTR
#ifndef __CCI__
extern volatile __uint24                DMAnSPTR            __at(0x0F4);
#endif
#ifndef _LIB_BUILD
asm("DMAnSPTR equ 0F4h");
#endif

// Register: DMAnSPTRL
#define DMAnSPTRL DMAnSPTRL
extern volatile unsigned char           DMAnSPTRL           __at(0x0F4);
#ifndef _LIB_BUILD
asm("DMAnSPTRL equ 0F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR0                  :1;
        unsigned SPTR1                  :1;
        unsigned SPTR2                  :1;
        unsigned SPTR3                  :1;
        unsigned SPTR4                  :1;
        unsigned SPTR5                  :1;
        unsigned SPTR6                  :1;
        unsigned SPTR7                  :1;
    };
} DMAnSPTRLbits_t;
extern volatile DMAnSPTRLbits_t DMAnSPTRLbits __at(0x0F4);
// bitfield macros
#define _DMAnSPTRL_SPTR_POSN                                0x0
#define _DMAnSPTRL_SPTR_POSITION                            0x0
#define _DMAnSPTRL_SPTR_SIZE                                0x8
#define _DMAnSPTRL_SPTR_LENGTH                              0x8
#define _DMAnSPTRL_SPTR_MASK                                0xFF
#define _DMAnSPTRL_SPTR0_POSN                               0x0
#define _DMAnSPTRL_SPTR0_POSITION                           0x0
#define _DMAnSPTRL_SPTR0_SIZE                               0x1
#define _DMAnSPTRL_SPTR0_LENGTH                             0x1
#define _DMAnSPTRL_SPTR0_MASK                               0x1
#define _DMAnSPTRL_SPTR1_POSN                               0x1
#define _DMAnSPTRL_SPTR1_POSITION                           0x1
#define _DMAnSPTRL_SPTR1_SIZE                               0x1
#define _DMAnSPTRL_SPTR1_LENGTH                             0x1
#define _DMAnSPTRL_SPTR1_MASK                               0x2
#define _DMAnSPTRL_SPTR2_POSN                               0x2
#define _DMAnSPTRL_SPTR2_POSITION                           0x2
#define _DMAnSPTRL_SPTR2_SIZE                               0x1
#define _DMAnSPTRL_SPTR2_LENGTH                             0x1
#define _DMAnSPTRL_SPTR2_MASK                               0x4
#define _DMAnSPTRL_SPTR3_POSN                               0x3
#define _DMAnSPTRL_SPTR3_POSITION                           0x3
#define _DMAnSPTRL_SPTR3_SIZE                               0x1
#define _DMAnSPTRL_SPTR3_LENGTH                             0x1
#define _DMAnSPTRL_SPTR3_MASK                               0x8
#define _DMAnSPTRL_SPTR4_POSN                               0x4
#define _DMAnSPTRL_SPTR4_POSITION                           0x4
#define _DMAnSPTRL_SPTR4_SIZE                               0x1
#define _DMAnSPTRL_SPTR4_LENGTH                             0x1
#define _DMAnSPTRL_SPTR4_MASK                               0x10
#define _DMAnSPTRL_SPTR5_POSN                               0x5
#define _DMAnSPTRL_SPTR5_POSITION                           0x5
#define _DMAnSPTRL_SPTR5_SIZE                               0x1
#define _DMAnSPTRL_SPTR5_LENGTH                             0x1
#define _DMAnSPTRL_SPTR5_MASK                               0x20
#define _DMAnSPTRL_SPTR6_POSN                               0x6
#define _DMAnSPTRL_SPTR6_POSITION                           0x6
#define _DMAnSPTRL_SPTR6_SIZE                               0x1
#define _DMAnSPTRL_SPTR6_LENGTH                             0x1
#define _DMAnSPTRL_SPTR6_MASK                               0x40
#define _DMAnSPTRL_SPTR7_POSN                               0x7
#define _DMAnSPTRL_SPTR7_POSITION                           0x7
#define _DMAnSPTRL_SPTR7_SIZE                               0x1
#define _DMAnSPTRL_SPTR7_LENGTH                             0x1
#define _DMAnSPTRL_SPTR7_MASK                               0x80

// Register: DMAnSPTRH
#define DMAnSPTRH DMAnSPTRH
extern volatile unsigned char           DMAnSPTRH           __at(0x0F5);
#ifndef _LIB_BUILD
asm("DMAnSPTRH equ 0F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR8                  :1;
        unsigned SPTR9                  :1;
        unsigned SPTR10                 :1;
        unsigned SPTR11                 :1;
        unsigned SPTR12                 :1;
        unsigned SPTR13                 :1;
        unsigned SPTR14                 :1;
        unsigned SPTR15                 :1;
    };
} DMAnSPTRHbits_t;
extern volatile DMAnSPTRHbits_t DMAnSPTRHbits __at(0x0F5);
// bitfield macros
#define _DMAnSPTRH_SPTR_POSN                                0x0
#define _DMAnSPTRH_SPTR_POSITION                            0x0
#define _DMAnSPTRH_SPTR_SIZE                                0x8
#define _DMAnSPTRH_SPTR_LENGTH                              0x8
#define _DMAnSPTRH_SPTR_MASK                                0xFF
#define _DMAnSPTRH_SPTR8_POSN                               0x0
#define _DMAnSPTRH_SPTR8_POSITION                           0x0
#define _DMAnSPTRH_SPTR8_SIZE                               0x1
#define _DMAnSPTRH_SPTR8_LENGTH                             0x1
#define _DMAnSPTRH_SPTR8_MASK                               0x1
#define _DMAnSPTRH_SPTR9_POSN                               0x1
#define _DMAnSPTRH_SPTR9_POSITION                           0x1
#define _DMAnSPTRH_SPTR9_SIZE                               0x1
#define _DMAnSPTRH_SPTR9_LENGTH                             0x1
#define _DMAnSPTRH_SPTR9_MASK                               0x2
#define _DMAnSPTRH_SPTR10_POSN                              0x2
#define _DMAnSPTRH_SPTR10_POSITION                          0x2
#define _DMAnSPTRH_SPTR10_SIZE                              0x1
#define _DMAnSPTRH_SPTR10_LENGTH                            0x1
#define _DMAnSPTRH_SPTR10_MASK                              0x4
#define _DMAnSPTRH_SPTR11_POSN                              0x3
#define _DMAnSPTRH_SPTR11_POSITION                          0x3
#define _DMAnSPTRH_SPTR11_SIZE                              0x1
#define _DMAnSPTRH_SPTR11_LENGTH                            0x1
#define _DMAnSPTRH_SPTR11_MASK                              0x8
#define _DMAnSPTRH_SPTR12_POSN                              0x4
#define _DMAnSPTRH_SPTR12_POSITION                          0x4
#define _DMAnSPTRH_SPTR12_SIZE                              0x1
#define _DMAnSPTRH_SPTR12_LENGTH                            0x1
#define _DMAnSPTRH_SPTR12_MASK                              0x10
#define _DMAnSPTRH_SPTR13_POSN                              0x5
#define _DMAnSPTRH_SPTR13_POSITION                          0x5
#define _DMAnSPTRH_SPTR13_SIZE                              0x1
#define _DMAnSPTRH_SPTR13_LENGTH                            0x1
#define _DMAnSPTRH_SPTR13_MASK                              0x20
#define _DMAnSPTRH_SPTR14_POSN                              0x6
#define _DMAnSPTRH_SPTR14_POSITION                          0x6
#define _DMAnSPTRH_SPTR14_SIZE                              0x1
#define _DMAnSPTRH_SPTR14_LENGTH                            0x1
#define _DMAnSPTRH_SPTR14_MASK                              0x40
#define _DMAnSPTRH_SPTR15_POSN                              0x7
#define _DMAnSPTRH_SPTR15_POSITION                          0x7
#define _DMAnSPTRH_SPTR15_SIZE                              0x1
#define _DMAnSPTRH_SPTR15_LENGTH                            0x1
#define _DMAnSPTRH_SPTR15_MASK                              0x80

// Register: DMAnSPTRU
#define DMAnSPTRU DMAnSPTRU
extern volatile unsigned char           DMAnSPTRU           __at(0x0F6);
#ifndef _LIB_BUILD
asm("DMAnSPTRU equ 0F6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR16                 :1;
        unsigned SPTR17                 :1;
        unsigned SPTR18                 :1;
        unsigned SPTR19                 :1;
        unsigned SPTR20                 :1;
        unsigned SPTR21                 :1;
    };
} DMAnSPTRUbits_t;
extern volatile DMAnSPTRUbits_t DMAnSPTRUbits __at(0x0F6);
// bitfield macros
#define _DMAnSPTRU_SPTR_POSN                                0x0
#define _DMAnSPTRU_SPTR_POSITION                            0x0
#define _DMAnSPTRU_SPTR_SIZE                                0x8
#define _DMAnSPTRU_SPTR_LENGTH                              0x8
#define _DMAnSPTRU_SPTR_MASK                                0xFF
#define _DMAnSPTRU_SPTR16_POSN                              0x0
#define _DMAnSPTRU_SPTR16_POSITION                          0x0
#define _DMAnSPTRU_SPTR16_SIZE                              0x1
#define _DMAnSPTRU_SPTR16_LENGTH                            0x1
#define _DMAnSPTRU_SPTR16_MASK                              0x1
#define _DMAnSPTRU_SPTR17_POSN                              0x1
#define _DMAnSPTRU_SPTR17_POSITION                          0x1
#define _DMAnSPTRU_SPTR17_SIZE                              0x1
#define _DMAnSPTRU_SPTR17_LENGTH                            0x1
#define _DMAnSPTRU_SPTR17_MASK                              0x2
#define _DMAnSPTRU_SPTR18_POSN                              0x2
#define _DMAnSPTRU_SPTR18_POSITION                          0x2
#define _DMAnSPTRU_SPTR18_SIZE                              0x1
#define _DMAnSPTRU_SPTR18_LENGTH                            0x1
#define _DMAnSPTRU_SPTR18_MASK                              0x4
#define _DMAnSPTRU_SPTR19_POSN                              0x3
#define _DMAnSPTRU_SPTR19_POSITION                          0x3
#define _DMAnSPTRU_SPTR19_SIZE                              0x1
#define _DMAnSPTRU_SPTR19_LENGTH                            0x1
#define _DMAnSPTRU_SPTR19_MASK                              0x8
#define _DMAnSPTRU_SPTR20_POSN                              0x4
#define _DMAnSPTRU_SPTR20_POSITION                          0x4
#define _DMAnSPTRU_SPTR20_SIZE                              0x1
#define _DMAnSPTRU_SPTR20_LENGTH                            0x1
#define _DMAnSPTRU_SPTR20_MASK                              0x10
#define _DMAnSPTRU_SPTR21_POSN                              0x5
#define _DMAnSPTRU_SPTR21_POSITION                          0x5
#define _DMAnSPTRU_SPTR21_SIZE                              0x1
#define _DMAnSPTRU_SPTR21_LENGTH                            0x1
#define _DMAnSPTRU_SPTR21_MASK                              0x20

// Register: DMAnSSZ
#define DMAnSSZ DMAnSSZ
extern volatile unsigned short          DMAnSSZ             __at(0x0F7);
#ifndef _LIB_BUILD
asm("DMAnSSZ equ 0F7h");
#endif

// Register: DMAnSSZL
#define DMAnSSZL DMAnSSZL
extern volatile unsigned char           DMAnSSZL            __at(0x0F7);
#ifndef _LIB_BUILD
asm("DMAnSSZL equ 0F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned SSZ0                   :1;
        unsigned SSZ1                   :1;
        unsigned SSZ2                   :1;
        unsigned SSZ3                   :1;
        unsigned SSZ4                   :1;
        unsigned SSZ5                   :1;
        unsigned SSZ6                   :1;
        unsigned SSZ7                   :1;
    };
} DMAnSSZLbits_t;
extern volatile DMAnSSZLbits_t DMAnSSZLbits __at(0x0F7);
// bitfield macros
#define _DMAnSSZL_SSZ_POSN                                  0x0
#define _DMAnSSZL_SSZ_POSITION                              0x0
#define _DMAnSSZL_SSZ_SIZE                                  0x8
#define _DMAnSSZL_SSZ_LENGTH                                0x8
#define _DMAnSSZL_SSZ_MASK                                  0xFF
#define _DMAnSSZL_SSZ0_POSN                                 0x0
#define _DMAnSSZL_SSZ0_POSITION                             0x0
#define _DMAnSSZL_SSZ0_SIZE                                 0x1
#define _DMAnSSZL_SSZ0_LENGTH                               0x1
#define _DMAnSSZL_SSZ0_MASK                                 0x1
#define _DMAnSSZL_SSZ1_POSN                                 0x1
#define _DMAnSSZL_SSZ1_POSITION                             0x1
#define _DMAnSSZL_SSZ1_SIZE                                 0x1
#define _DMAnSSZL_SSZ1_LENGTH                               0x1
#define _DMAnSSZL_SSZ1_MASK                                 0x2
#define _DMAnSSZL_SSZ2_POSN                                 0x2
#define _DMAnSSZL_SSZ2_POSITION                             0x2
#define _DMAnSSZL_SSZ2_SIZE                                 0x1
#define _DMAnSSZL_SSZ2_LENGTH                               0x1
#define _DMAnSSZL_SSZ2_MASK                                 0x4
#define _DMAnSSZL_SSZ3_POSN                                 0x3
#define _DMAnSSZL_SSZ3_POSITION                             0x3
#define _DMAnSSZL_SSZ3_SIZE                                 0x1
#define _DMAnSSZL_SSZ3_LENGTH                               0x1
#define _DMAnSSZL_SSZ3_MASK                                 0x8
#define _DMAnSSZL_SSZ4_POSN                                 0x4
#define _DMAnSSZL_SSZ4_POSITION                             0x4
#define _DMAnSSZL_SSZ4_SIZE                                 0x1
#define _DMAnSSZL_SSZ4_LENGTH                               0x1
#define _DMAnSSZL_SSZ4_MASK                                 0x10
#define _DMAnSSZL_SSZ5_POSN                                 0x5
#define _DMAnSSZL_SSZ5_POSITION                             0x5
#define _DMAnSSZL_SSZ5_SIZE                                 0x1
#define _DMAnSSZL_SSZ5_LENGTH                               0x1
#define _DMAnSSZL_SSZ5_MASK                                 0x20
#define _DMAnSSZL_SSZ6_POSN                                 0x6
#define _DMAnSSZL_SSZ6_POSITION                             0x6
#define _DMAnSSZL_SSZ6_SIZE                                 0x1
#define _DMAnSSZL_SSZ6_LENGTH                               0x1
#define _DMAnSSZL_SSZ6_MASK                                 0x40
#define _DMAnSSZL_SSZ7_POSN                                 0x7
#define _DMAnSSZL_SSZ7_POSITION                             0x7
#define _DMAnSSZL_SSZ7_SIZE                                 0x1
#define _DMAnSSZL_SSZ7_LENGTH                               0x1
#define _DMAnSSZL_SSZ7_MASK                                 0x80

// Register: DMAnSSZH
#define DMAnSSZH DMAnSSZH
extern volatile unsigned char           DMAnSSZH            __at(0x0F8);
#ifndef _LIB_BUILD
asm("DMAnSSZH equ 0F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned SSZ8                   :1;
        unsigned SSZ9                   :1;
        unsigned SSZ10                  :1;
        unsigned SSZ11                  :1;
    };
} DMAnSSZHbits_t;
extern volatile DMAnSSZHbits_t DMAnSSZHbits __at(0x0F8);
// bitfield macros
#define _DMAnSSZH_SSZ_POSN                                  0x0
#define _DMAnSSZH_SSZ_POSITION                              0x0
#define _DMAnSSZH_SSZ_SIZE                                  0x8
#define _DMAnSSZH_SSZ_LENGTH                                0x8
#define _DMAnSSZH_SSZ_MASK                                  0xFF
#define _DMAnSSZH_SSZ8_POSN                                 0x0
#define _DMAnSSZH_SSZ8_POSITION                             0x0
#define _DMAnSSZH_SSZ8_SIZE                                 0x1
#define _DMAnSSZH_SSZ8_LENGTH                               0x1
#define _DMAnSSZH_SSZ8_MASK                                 0x1
#define _DMAnSSZH_SSZ9_POSN                                 0x1
#define _DMAnSSZH_SSZ9_POSITION                             0x1
#define _DMAnSSZH_SSZ9_SIZE                                 0x1
#define _DMAnSSZH_SSZ9_LENGTH                               0x1
#define _DMAnSSZH_SSZ9_MASK                                 0x2
#define _DMAnSSZH_SSZ10_POSN                                0x2
#define _DMAnSSZH_SSZ10_POSITION                            0x2
#define _DMAnSSZH_SSZ10_SIZE                                0x1
#define _DMAnSSZH_SSZ10_LENGTH                              0x1
#define _DMAnSSZH_SSZ10_MASK                                0x4
#define _DMAnSSZH_SSZ11_POSN                                0x3
#define _DMAnSSZH_SSZ11_POSITION                            0x3
#define _DMAnSSZH_SSZ11_SIZE                                0x1
#define _DMAnSSZH_SSZ11_LENGTH                              0x1
#define _DMAnSSZH_SSZ11_MASK                                0x8

// Register: DMAnSSA
#define DMAnSSA DMAnSSA
#ifndef __CCI__
extern volatile __uint24                DMAnSSA             __at(0x0F9);
#endif
#ifndef _LIB_BUILD
asm("DMAnSSA equ 0F9h");
#endif

// Register: DMAnSSAL
#define DMAnSSAL DMAnSSAL
extern volatile unsigned char           DMAnSSAL            __at(0x0F9);
#ifndef _LIB_BUILD
asm("DMAnSSAL equ 0F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA0                   :1;
        unsigned SSA1                   :1;
        unsigned SSA2                   :1;
        unsigned SSA3                   :1;
        unsigned SSA4                   :1;
        unsigned SSA5                   :1;
        unsigned SSA6                   :1;
        unsigned SSA7                   :1;
    };
} DMAnSSALbits_t;
extern volatile DMAnSSALbits_t DMAnSSALbits __at(0x0F9);
// bitfield macros
#define _DMAnSSAL_SSA_POSN                                  0x0
#define _DMAnSSAL_SSA_POSITION                              0x0
#define _DMAnSSAL_SSA_SIZE                                  0x8
#define _DMAnSSAL_SSA_LENGTH                                0x8
#define _DMAnSSAL_SSA_MASK                                  0xFF
#define _DMAnSSAL_SSA0_POSN                                 0x0
#define _DMAnSSAL_SSA0_POSITION                             0x0
#define _DMAnSSAL_SSA0_SIZE                                 0x1
#define _DMAnSSAL_SSA0_LENGTH                               0x1
#define _DMAnSSAL_SSA0_MASK                                 0x1
#define _DMAnSSAL_SSA1_POSN                                 0x1
#define _DMAnSSAL_SSA1_POSITION                             0x1
#define _DMAnSSAL_SSA1_SIZE                                 0x1
#define _DMAnSSAL_SSA1_LENGTH                               0x1
#define _DMAnSSAL_SSA1_MASK                                 0x2
#define _DMAnSSAL_SSA2_POSN                                 0x2
#define _DMAnSSAL_SSA2_POSITION                             0x2
#define _DMAnSSAL_SSA2_SIZE                                 0x1
#define _DMAnSSAL_SSA2_LENGTH                               0x1
#define _DMAnSSAL_SSA2_MASK                                 0x4
#define _DMAnSSAL_SSA3_POSN                                 0x3
#define _DMAnSSAL_SSA3_POSITION                             0x3
#define _DMAnSSAL_SSA3_SIZE                                 0x1
#define _DMAnSSAL_SSA3_LENGTH                               0x1
#define _DMAnSSAL_SSA3_MASK                                 0x8
#define _DMAnSSAL_SSA4_POSN                                 0x4
#define _DMAnSSAL_SSA4_POSITION                             0x4
#define _DMAnSSAL_SSA4_SIZE                                 0x1
#define _DMAnSSAL_SSA4_LENGTH                               0x1
#define _DMAnSSAL_SSA4_MASK                                 0x10
#define _DMAnSSAL_SSA5_POSN                                 0x5
#define _DMAnSSAL_SSA5_POSITION                             0x5
#define _DMAnSSAL_SSA5_SIZE                                 0x1
#define _DMAnSSAL_SSA5_LENGTH                               0x1
#define _DMAnSSAL_SSA5_MASK                                 0x20
#define _DMAnSSAL_SSA6_POSN                                 0x6
#define _DMAnSSAL_SSA6_POSITION                             0x6
#define _DMAnSSAL_SSA6_SIZE                                 0x1
#define _DMAnSSAL_SSA6_LENGTH                               0x1
#define _DMAnSSAL_SSA6_MASK                                 0x40
#define _DMAnSSAL_SSA7_POSN                                 0x7
#define _DMAnSSAL_SSA7_POSITION                             0x7
#define _DMAnSSAL_SSA7_SIZE                                 0x1
#define _DMAnSSAL_SSA7_LENGTH                               0x1
#define _DMAnSSAL_SSA7_MASK                                 0x80

// Register: DMAnSSAH
#define DMAnSSAH DMAnSSAH
extern volatile unsigned char           DMAnSSAH            __at(0x0FA);
#ifndef _LIB_BUILD
asm("DMAnSSAH equ 0FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA8                   :1;
        unsigned SSA9                   :1;
        unsigned SSA10                  :1;
        unsigned SSA11                  :1;
        unsigned SSA12                  :1;
        unsigned SSA13                  :1;
        unsigned SSA14                  :1;
        unsigned SSA15                  :1;
    };
} DMAnSSAHbits_t;
extern volatile DMAnSSAHbits_t DMAnSSAHbits __at(0x0FA);
// bitfield macros
#define _DMAnSSAH_SSA_POSN                                  0x0
#define _DMAnSSAH_SSA_POSITION                              0x0
#define _DMAnSSAH_SSA_SIZE                                  0x8
#define _DMAnSSAH_SSA_LENGTH                                0x8
#define _DMAnSSAH_SSA_MASK                                  0xFF
#define _DMAnSSAH_SSA8_POSN                                 0x0
#define _DMAnSSAH_SSA8_POSITION                             0x0
#define _DMAnSSAH_SSA8_SIZE                                 0x1
#define _DMAnSSAH_SSA8_LENGTH                               0x1
#define _DMAnSSAH_SSA8_MASK                                 0x1
#define _DMAnSSAH_SSA9_POSN                                 0x1
#define _DMAnSSAH_SSA9_POSITION                             0x1
#define _DMAnSSAH_SSA9_SIZE                                 0x1
#define _DMAnSSAH_SSA9_LENGTH                               0x1
#define _DMAnSSAH_SSA9_MASK                                 0x2
#define _DMAnSSAH_SSA10_POSN                                0x2
#define _DMAnSSAH_SSA10_POSITION                            0x2
#define _DMAnSSAH_SSA10_SIZE                                0x1
#define _DMAnSSAH_SSA10_LENGTH                              0x1
#define _DMAnSSAH_SSA10_MASK                                0x4
#define _DMAnSSAH_SSA11_POSN                                0x3
#define _DMAnSSAH_SSA11_POSITION                            0x3
#define _DMAnSSAH_SSA11_SIZE                                0x1
#define _DMAnSSAH_SSA11_LENGTH                              0x1
#define _DMAnSSAH_SSA11_MASK                                0x8
#define _DMAnSSAH_SSA12_POSN                                0x4
#define _DMAnSSAH_SSA12_POSITION                            0x4
#define _DMAnSSAH_SSA12_SIZE                                0x1
#define _DMAnSSAH_SSA12_LENGTH                              0x1
#define _DMAnSSAH_SSA12_MASK                                0x10
#define _DMAnSSAH_SSA13_POSN                                0x5
#define _DMAnSSAH_SSA13_POSITION                            0x5
#define _DMAnSSAH_SSA13_SIZE                                0x1
#define _DMAnSSAH_SSA13_LENGTH                              0x1
#define _DMAnSSAH_SSA13_MASK                                0x20
#define _DMAnSSAH_SSA14_POSN                                0x6
#define _DMAnSSAH_SSA14_POSITION                            0x6
#define _DMAnSSAH_SSA14_SIZE                                0x1
#define _DMAnSSAH_SSA14_LENGTH                              0x1
#define _DMAnSSAH_SSA14_MASK                                0x40
#define _DMAnSSAH_SSA15_POSN                                0x7
#define _DMAnSSAH_SSA15_POSITION                            0x7
#define _DMAnSSAH_SSA15_SIZE                                0x1
#define _DMAnSSAH_SSA15_LENGTH                              0x1
#define _DMAnSSAH_SSA15_MASK                                0x80

// Register: DMAnSSAU
#define DMAnSSAU DMAnSSAU
extern volatile unsigned char           DMAnSSAU            __at(0x0FB);
#ifndef _LIB_BUILD
asm("DMAnSSAU equ 0FBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA16                  :1;
        unsigned SSA17                  :1;
        unsigned SSA18                  :1;
        unsigned SSA19                  :1;
        unsigned SSA20                  :1;
        unsigned SSA21                  :1;
    };
} DMAnSSAUbits_t;
extern volatile DMAnSSAUbits_t DMAnSSAUbits __at(0x0FB);
// bitfield macros
#define _DMAnSSAU_SSA_POSN                                  0x0
#define _DMAnSSAU_SSA_POSITION                              0x0
#define _DMAnSSAU_SSA_SIZE                                  0x8
#define _DMAnSSAU_SSA_LENGTH                                0x8
#define _DMAnSSAU_SSA_MASK                                  0xFF
#define _DMAnSSAU_SSA16_POSN                                0x0
#define _DMAnSSAU_SSA16_POSITION                            0x0
#define _DMAnSSAU_SSA16_SIZE                                0x1
#define _DMAnSSAU_SSA16_LENGTH                              0x1
#define _DMAnSSAU_SSA16_MASK                                0x1
#define _DMAnSSAU_SSA17_POSN                                0x1
#define _DMAnSSAU_SSA17_POSITION                            0x1
#define _DMAnSSAU_SSA17_SIZE                                0x1
#define _DMAnSSAU_SSA17_LENGTH                              0x1
#define _DMAnSSAU_SSA17_MASK                                0x2
#define _DMAnSSAU_SSA18_POSN                                0x2
#define _DMAnSSAU_SSA18_POSITION                            0x2
#define _DMAnSSAU_SSA18_SIZE                                0x1
#define _DMAnSSAU_SSA18_LENGTH                              0x1
#define _DMAnSSAU_SSA18_MASK                                0x4
#define _DMAnSSAU_SSA19_POSN                                0x3
#define _DMAnSSAU_SSA19_POSITION                            0x3
#define _DMAnSSAU_SSA19_SIZE                                0x1
#define _DMAnSSAU_SSA19_LENGTH                              0x1
#define _DMAnSSAU_SSA19_MASK                                0x8
#define _DMAnSSAU_SSA20_POSN                                0x4
#define _DMAnSSAU_SSA20_POSITION                            0x4
#define _DMAnSSAU_SSA20_SIZE                                0x1
#define _DMAnSSAU_SSA20_LENGTH                              0x1
#define _DMAnSSAU_SSA20_MASK                                0x10
#define _DMAnSSAU_SSA21_POSN                                0x5
#define _DMAnSSAU_SSA21_POSITION                            0x5
#define _DMAnSSAU_SSA21_SIZE                                0x1
#define _DMAnSSAU_SSA21_LENGTH                              0x1
#define _DMAnSSAU_SSA21_MASK                                0x20

// Register: DMAnCON0
#define DMAnCON0 DMAnCON0
extern volatile unsigned char           DMAnCON0            __at(0x0FC);
#ifndef _LIB_BUILD
asm("DMAnCON0 equ 0FCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XIP                    :1;
        unsigned                        :1;
        unsigned AIRQEN                 :1;
        unsigned                        :2;
        unsigned DGO                    :1;
        unsigned SIRQEN                 :1;
        unsigned EN                     :1;
    };
} DMAnCON0bits_t;
extern volatile DMAnCON0bits_t DMAnCON0bits __at(0x0FC);
// bitfield macros
#define _DMAnCON0_XIP_POSN                                  0x0
#define _DMAnCON0_XIP_POSITION                              0x0
#define _DMAnCON0_XIP_SIZE                                  0x1
#define _DMAnCON0_XIP_LENGTH                                0x1
#define _DMAnCON0_XIP_MASK                                  0x1
#define _DMAnCON0_AIRQEN_POSN                               0x2
#define _DMAnCON0_AIRQEN_POSITION                           0x2
#define _DMAnCON0_AIRQEN_SIZE                               0x1
#define _DMAnCON0_AIRQEN_LENGTH                             0x1
#define _DMAnCON0_AIRQEN_MASK                               0x4
#define _DMAnCON0_DGO_POSN                                  0x5
#define _DMAnCON0_DGO_POSITION                              0x5
#define _DMAnCON0_DGO_SIZE                                  0x1
#define _DMAnCON0_DGO_LENGTH                                0x1
#define _DMAnCON0_DGO_MASK                                  0x20
#define _DMAnCON0_SIRQEN_POSN                               0x6
#define _DMAnCON0_SIRQEN_POSITION                           0x6
#define _DMAnCON0_SIRQEN_SIZE                               0x1
#define _DMAnCON0_SIRQEN_LENGTH                             0x1
#define _DMAnCON0_SIRQEN_MASK                               0x40
#define _DMAnCON0_EN_POSN                                   0x7
#define _DMAnCON0_EN_POSITION                               0x7
#define _DMAnCON0_EN_SIZE                                   0x1
#define _DMAnCON0_EN_LENGTH                                 0x1
#define _DMAnCON0_EN_MASK                                   0x80

// Register: DMAnCON1
#define DMAnCON1 DMAnCON1
extern volatile unsigned char           DMAnCON1            __at(0x0FD);
#ifndef _LIB_BUILD
asm("DMAnCON1 equ 0FDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSTP                   :1;
        unsigned SMODE                  :2;
        unsigned SMR                    :2;
        unsigned DSTP                   :1;
        unsigned DMODE                  :2;
    };
} DMAnCON1bits_t;
extern volatile DMAnCON1bits_t DMAnCON1bits __at(0x0FD);
// bitfield macros
#define _DMAnCON1_SSTP_POSN                                 0x0
#define _DMAnCON1_SSTP_POSITION                             0x0
#define _DMAnCON1_SSTP_SIZE                                 0x1
#define _DMAnCON1_SSTP_LENGTH                               0x1
#define _DMAnCON1_SSTP_MASK                                 0x1
#define _DMAnCON1_SMODE_POSN                                0x1
#define _DMAnCON1_SMODE_POSITION                            0x1
#define _DMAnCON1_SMODE_SIZE                                0x2
#define _DMAnCON1_SMODE_LENGTH                              0x2
#define _DMAnCON1_SMODE_MASK                                0x6
#define _DMAnCON1_SMR_POSN                                  0x3
#define _DMAnCON1_SMR_POSITION                              0x3
#define _DMAnCON1_SMR_SIZE                                  0x2
#define _DMAnCON1_SMR_LENGTH                                0x2
#define _DMAnCON1_SMR_MASK                                  0x18
#define _DMAnCON1_DSTP_POSN                                 0x5
#define _DMAnCON1_DSTP_POSITION                             0x5
#define _DMAnCON1_DSTP_SIZE                                 0x1
#define _DMAnCON1_DSTP_LENGTH                               0x1
#define _DMAnCON1_DSTP_MASK                                 0x20
#define _DMAnCON1_DMODE_POSN                                0x6
#define _DMAnCON1_DMODE_POSITION                            0x6
#define _DMAnCON1_DMODE_SIZE                                0x2
#define _DMAnCON1_DMODE_LENGTH                              0x2
#define _DMAnCON1_DMODE_MASK                                0xC0

// Register: DMAnAIRQ
#define DMAnAIRQ DMAnAIRQ
extern volatile unsigned char           DMAnAIRQ            __at(0x0FE);
#ifndef _LIB_BUILD
asm("DMAnAIRQ equ 0FEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AIRQ                   :8;
    };
    struct {
        unsigned AIRQ0                  :1;
        unsigned AIRQ1                  :1;
        unsigned AIRQ2                  :1;
        unsigned AIRQ3                  :1;
        unsigned AIRQ4                  :1;
        unsigned AIRQ5                  :1;
        unsigned AIRQ6                  :1;
        unsigned AIRQ7                  :1;
    };
} DMAnAIRQbits_t;
extern volatile DMAnAIRQbits_t DMAnAIRQbits __at(0x0FE);
// bitfield macros
#define _DMAnAIRQ_AIRQ_POSN                                 0x0
#define _DMAnAIRQ_AIRQ_POSITION                             0x0
#define _DMAnAIRQ_AIRQ_SIZE                                 0x8
#define _DMAnAIRQ_AIRQ_LENGTH                               0x8
#define _DMAnAIRQ_AIRQ_MASK                                 0xFF
#define _DMAnAIRQ_AIRQ0_POSN                                0x0
#define _DMAnAIRQ_AIRQ0_POSITION                            0x0
#define _DMAnAIRQ_AIRQ0_SIZE                                0x1
#define _DMAnAIRQ_AIRQ0_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ0_MASK                                0x1
#define _DMAnAIRQ_AIRQ1_POSN                                0x1
#define _DMAnAIRQ_AIRQ1_POSITION                            0x1
#define _DMAnAIRQ_AIRQ1_SIZE                                0x1
#define _DMAnAIRQ_AIRQ1_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ1_MASK                                0x2
#define _DMAnAIRQ_AIRQ2_POSN                                0x2
#define _DMAnAIRQ_AIRQ2_POSITION                            0x2
#define _DMAnAIRQ_AIRQ2_SIZE                                0x1
#define _DMAnAIRQ_AIRQ2_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ2_MASK                                0x4
#define _DMAnAIRQ_AIRQ3_POSN                                0x3
#define _DMAnAIRQ_AIRQ3_POSITION                            0x3
#define _DMAnAIRQ_AIRQ3_SIZE                                0x1
#define _DMAnAIRQ_AIRQ3_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ3_MASK                                0x8
#define _DMAnAIRQ_AIRQ4_POSN                                0x4
#define _DMAnAIRQ_AIRQ4_POSITION                            0x4
#define _DMAnAIRQ_AIRQ4_SIZE                                0x1
#define _DMAnAIRQ_AIRQ4_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ4_MASK                                0x10
#define _DMAnAIRQ_AIRQ5_POSN                                0x5
#define _DMAnAIRQ_AIRQ5_POSITION                            0x5
#define _DMAnAIRQ_AIRQ5_SIZE                                0x1
#define _DMAnAIRQ_AIRQ5_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ5_MASK                                0x20
#define _DMAnAIRQ_AIRQ6_POSN                                0x6
#define _DMAnAIRQ_AIRQ6_POSITION                            0x6
#define _DMAnAIRQ_AIRQ6_SIZE                                0x1
#define _DMAnAIRQ_AIRQ6_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ6_MASK                                0x40
#define _DMAnAIRQ_AIRQ7_POSN                                0x7
#define _DMAnAIRQ_AIRQ7_POSITION                            0x7
#define _DMAnAIRQ_AIRQ7_SIZE                                0x1
#define _DMAnAIRQ_AIRQ7_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ7_MASK                                0x80

// Register: DMAnSIRQ
#define DMAnSIRQ DMAnSIRQ
extern volatile unsigned char           DMAnSIRQ            __at(0x0FF);
#ifndef _LIB_BUILD
asm("DMAnSIRQ equ 0FFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SIRQ                   :8;
    };
    struct {
        unsigned SIRQ0                  :1;
        unsigned SIRQ1                  :1;
        unsigned SIRQ2                  :1;
        unsigned SIRQ3                  :1;
        unsigned SIRQ4                  :1;
        unsigned SIRQ5                  :1;
        unsigned SIRQ6                  :1;
        unsigned SIRQ7                  :1;
    };
} DMAnSIRQbits_t;
extern volatile DMAnSIRQbits_t DMAnSIRQbits __at(0x0FF);
// bitfield macros
#define _DMAnSIRQ_SIRQ_POSN                                 0x0
#define _DMAnSIRQ_SIRQ_POSITION                             0x0
#define _DMAnSIRQ_SIRQ_SIZE                                 0x8
#define _DMAnSIRQ_SIRQ_LENGTH                               0x8
#define _DMAnSIRQ_SIRQ_MASK                                 0xFF
#define _DMAnSIRQ_SIRQ0_POSN                                0x0
#define _DMAnSIRQ_SIRQ0_POSITION                            0x0
#define _DMAnSIRQ_SIRQ0_SIZE                                0x1
#define _DMAnSIRQ_SIRQ0_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ0_MASK                                0x1
#define _DMAnSIRQ_SIRQ1_POSN                                0x1
#define _DMAnSIRQ_SIRQ1_POSITION                            0x1
#define _DMAnSIRQ_SIRQ1_SIZE                                0x1
#define _DMAnSIRQ_SIRQ1_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ1_MASK                                0x2
#define _DMAnSIRQ_SIRQ2_POSN                                0x2
#define _DMAnSIRQ_SIRQ2_POSITION                            0x2
#define _DMAnSIRQ_SIRQ2_SIZE                                0x1
#define _DMAnSIRQ_SIRQ2_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ2_MASK                                0x4
#define _DMAnSIRQ_SIRQ3_POSN                                0x3
#define _DMAnSIRQ_SIRQ3_POSITION                            0x3
#define _DMAnSIRQ_SIRQ3_SIZE                                0x1
#define _DMAnSIRQ_SIRQ3_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ3_MASK                                0x8
#define _DMAnSIRQ_SIRQ4_POSN                                0x4
#define _DMAnSIRQ_SIRQ4_POSITION                            0x4
#define _DMAnSIRQ_SIRQ4_SIZE                                0x1
#define _DMAnSIRQ_SIRQ4_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ4_MASK                                0x10
#define _DMAnSIRQ_SIRQ5_POSN                                0x5
#define _DMAnSIRQ_SIRQ5_POSITION                            0x5
#define _DMAnSIRQ_SIRQ5_SIZE                                0x1
#define _DMAnSIRQ_SIRQ5_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ5_MASK                                0x20
#define _DMAnSIRQ_SIRQ6_POSN                                0x6
#define _DMAnSIRQ_SIRQ6_POSITION                            0x6
#define _DMAnSIRQ_SIRQ6_SIZE                                0x1
#define _DMAnSIRQ_SIRQ6_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ6_MASK                                0x40
#define _DMAnSIRQ_SIRQ7_POSN                                0x7
#define _DMAnSIRQ_SIRQ7_POSITION                            0x7
#define _DMAnSIRQ_SIRQ7_SIZE                                0x1
#define _DMAnSIRQ_SIRQ7_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ7_MASK                                0x80

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x200);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0200h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x200);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x201);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0201h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
        unsigned RA0PPS5                :1;
        unsigned RA0PPS6                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x201);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10
#define _RA0PPS_RA0PPS5_POSN                                0x5
#define _RA0PPS_RA0PPS5_POSITION                            0x5
#define _RA0PPS_RA0PPS5_SIZE                                0x1
#define _RA0PPS_RA0PPS5_LENGTH                              0x1
#define _RA0PPS_RA0PPS5_MASK                                0x20
#define _RA0PPS_RA0PPS6_POSN                                0x6
#define _RA0PPS_RA0PPS6_POSITION                            0x6
#define _RA0PPS_RA0PPS6_SIZE                                0x1
#define _RA0PPS_RA0PPS6_LENGTH                              0x1
#define _RA0PPS_RA0PPS6_MASK                                0x40

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x202);
#ifndef _LIB_BUILD
asm("RA1PPS equ 0202h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
        unsigned RA1PPS5                :1;
        unsigned RA1PPS6                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x202);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10
#define _RA1PPS_RA1PPS5_POSN                                0x5
#define _RA1PPS_RA1PPS5_POSITION                            0x5
#define _RA1PPS_RA1PPS5_SIZE                                0x1
#define _RA1PPS_RA1PPS5_LENGTH                              0x1
#define _RA1PPS_RA1PPS5_MASK                                0x20
#define _RA1PPS_RA1PPS6_POSN                                0x6
#define _RA1PPS_RA1PPS6_POSITION                            0x6
#define _RA1PPS_RA1PPS6_SIZE                                0x1
#define _RA1PPS_RA1PPS6_LENGTH                              0x1
#define _RA1PPS_RA1PPS6_MASK                                0x40

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x203);
#ifndef _LIB_BUILD
asm("RA2PPS equ 0203h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
        unsigned RA2PPS5                :1;
        unsigned RA2PPS6                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x203);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10
#define _RA2PPS_RA2PPS5_POSN                                0x5
#define _RA2PPS_RA2PPS5_POSITION                            0x5
#define _RA2PPS_RA2PPS5_SIZE                                0x1
#define _RA2PPS_RA2PPS5_LENGTH                              0x1
#define _RA2PPS_RA2PPS5_MASK                                0x20
#define _RA2PPS_RA2PPS6_POSN                                0x6
#define _RA2PPS_RA2PPS6_POSITION                            0x6
#define _RA2PPS_RA2PPS6_SIZE                                0x1
#define _RA2PPS_RA2PPS6_LENGTH                              0x1
#define _RA2PPS_RA2PPS6_MASK                                0x40

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0x204);
#ifndef _LIB_BUILD
asm("RA3PPS equ 0204h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
        unsigned RA3PPS5                :1;
        unsigned RA3PPS6                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0x204);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10
#define _RA3PPS_RA3PPS5_POSN                                0x5
#define _RA3PPS_RA3PPS5_POSITION                            0x5
#define _RA3PPS_RA3PPS5_SIZE                                0x1
#define _RA3PPS_RA3PPS5_LENGTH                              0x1
#define _RA3PPS_RA3PPS5_MASK                                0x20
#define _RA3PPS_RA3PPS6_POSN                                0x6
#define _RA3PPS_RA3PPS6_POSITION                            0x6
#define _RA3PPS_RA3PPS6_SIZE                                0x1
#define _RA3PPS_RA3PPS6_LENGTH                              0x1
#define _RA3PPS_RA3PPS6_MASK                                0x40

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x205);
#ifndef _LIB_BUILD
asm("RA4PPS equ 0205h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
        unsigned RA4PPS5                :1;
        unsigned RA4PPS6                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x205);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10
#define _RA4PPS_RA4PPS5_POSN                                0x5
#define _RA4PPS_RA4PPS5_POSITION                            0x5
#define _RA4PPS_RA4PPS5_SIZE                                0x1
#define _RA4PPS_RA4PPS5_LENGTH                              0x1
#define _RA4PPS_RA4PPS5_MASK                                0x20
#define _RA4PPS_RA4PPS6_POSN                                0x6
#define _RA4PPS_RA4PPS6_POSITION                            0x6
#define _RA4PPS_RA4PPS6_SIZE                                0x1
#define _RA4PPS_RA4PPS6_LENGTH                              0x1
#define _RA4PPS_RA4PPS6_MASK                                0x40

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x206);
#ifndef _LIB_BUILD
asm("RA5PPS equ 0206h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
        unsigned RA5PPS5                :1;
        unsigned RA5PPS6                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x206);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10
#define _RA5PPS_RA5PPS5_POSN                                0x5
#define _RA5PPS_RA5PPS5_POSITION                            0x5
#define _RA5PPS_RA5PPS5_SIZE                                0x1
#define _RA5PPS_RA5PPS5_LENGTH                              0x1
#define _RA5PPS_RA5PPS5_MASK                                0x20
#define _RA5PPS_RA5PPS6_POSN                                0x6
#define _RA5PPS_RA5PPS6_POSITION                            0x6
#define _RA5PPS_RA5PPS6_SIZE                                0x1
#define _RA5PPS_RA5PPS6_LENGTH                              0x1
#define _RA5PPS_RA5PPS6_MASK                                0x40

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0x207);
#ifndef _LIB_BUILD
asm("RA6PPS equ 0207h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
        unsigned RA6PPS5                :1;
        unsigned RA6PPS6                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0x207);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10
#define _RA6PPS_RA6PPS5_POSN                                0x5
#define _RA6PPS_RA6PPS5_POSITION                            0x5
#define _RA6PPS_RA6PPS5_SIZE                                0x1
#define _RA6PPS_RA6PPS5_LENGTH                              0x1
#define _RA6PPS_RA6PPS5_MASK                                0x20
#define _RA6PPS_RA6PPS6_POSN                                0x6
#define _RA6PPS_RA6PPS6_POSITION                            0x6
#define _RA6PPS_RA6PPS6_SIZE                                0x1
#define _RA6PPS_RA6PPS6_LENGTH                              0x1
#define _RA6PPS_RA6PPS6_MASK                                0x40

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0x208);
#ifndef _LIB_BUILD
asm("RA7PPS equ 0208h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
        unsigned RA7PPS5                :1;
        unsigned RA7PPS6                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0x208);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10
#define _RA7PPS_RA7PPS5_POSN                                0x5
#define _RA7PPS_RA7PPS5_POSITION                            0x5
#define _RA7PPS_RA7PPS5_SIZE                                0x1
#define _RA7PPS_RA7PPS5_LENGTH                              0x1
#define _RA7PPS_RA7PPS5_MASK                                0x20
#define _RA7PPS_RA7PPS6_POSN                                0x6
#define _RA7PPS_RA7PPS6_POSITION                            0x6
#define _RA7PPS_RA7PPS6_SIZE                                0x1
#define _RA7PPS_RA7PPS6_LENGTH                              0x1
#define _RA7PPS_RA7PPS6_MASK                                0x40

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0x209);
#ifndef _LIB_BUILD
asm("RB0PPS equ 0209h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
        unsigned RB0PPS5                :1;
        unsigned RB0PPS6                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0x209);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10
#define _RB0PPS_RB0PPS5_POSN                                0x5
#define _RB0PPS_RB0PPS5_POSITION                            0x5
#define _RB0PPS_RB0PPS5_SIZE                                0x1
#define _RB0PPS_RB0PPS5_LENGTH                              0x1
#define _RB0PPS_RB0PPS5_MASK                                0x20
#define _RB0PPS_RB0PPS6_POSN                                0x6
#define _RB0PPS_RB0PPS6_POSITION                            0x6
#define _RB0PPS_RB0PPS6_SIZE                                0x1
#define _RB0PPS_RB0PPS6_LENGTH                              0x1
#define _RB0PPS_RB0PPS6_MASK                                0x40

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0x20A);
#ifndef _LIB_BUILD
asm("RB1PPS equ 020Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
        unsigned RB1PPS5                :1;
        unsigned RB1PPS6                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0x20A);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10
#define _RB1PPS_RB1PPS5_POSN                                0x5
#define _RB1PPS_RB1PPS5_POSITION                            0x5
#define _RB1PPS_RB1PPS5_SIZE                                0x1
#define _RB1PPS_RB1PPS5_LENGTH                              0x1
#define _RB1PPS_RB1PPS5_MASK                                0x20
#define _RB1PPS_RB1PPS6_POSN                                0x6
#define _RB1PPS_RB1PPS6_POSITION                            0x6
#define _RB1PPS_RB1PPS6_SIZE                                0x1
#define _RB1PPS_RB1PPS6_LENGTH                              0x1
#define _RB1PPS_RB1PPS6_MASK                                0x40

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0x20B);
#ifndef _LIB_BUILD
asm("RB2PPS equ 020Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
        unsigned RB2PPS5                :1;
        unsigned RB2PPS6                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0x20B);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10
#define _RB2PPS_RB2PPS5_POSN                                0x5
#define _RB2PPS_RB2PPS5_POSITION                            0x5
#define _RB2PPS_RB2PPS5_SIZE                                0x1
#define _RB2PPS_RB2PPS5_LENGTH                              0x1
#define _RB2PPS_RB2PPS5_MASK                                0x20
#define _RB2PPS_RB2PPS6_POSN                                0x6
#define _RB2PPS_RB2PPS6_POSITION                            0x6
#define _RB2PPS_RB2PPS6_SIZE                                0x1
#define _RB2PPS_RB2PPS6_LENGTH                              0x1
#define _RB2PPS_RB2PPS6_MASK                                0x40

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0x20C);
#ifndef _LIB_BUILD
asm("RB3PPS equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
        unsigned RB3PPS5                :1;
        unsigned RB3PPS6                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0x20C);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10
#define _RB3PPS_RB3PPS5_POSN                                0x5
#define _RB3PPS_RB3PPS5_POSITION                            0x5
#define _RB3PPS_RB3PPS5_SIZE                                0x1
#define _RB3PPS_RB3PPS5_LENGTH                              0x1
#define _RB3PPS_RB3PPS5_MASK                                0x20
#define _RB3PPS_RB3PPS6_POSN                                0x6
#define _RB3PPS_RB3PPS6_POSITION                            0x6
#define _RB3PPS_RB3PPS6_SIZE                                0x1
#define _RB3PPS_RB3PPS6_LENGTH                              0x1
#define _RB3PPS_RB3PPS6_MASK                                0x40

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0x20D);
#ifndef _LIB_BUILD
asm("RB4PPS equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
        unsigned RB4PPS5                :1;
        unsigned RB4PPS6                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0x20D);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10
#define _RB4PPS_RB4PPS5_POSN                                0x5
#define _RB4PPS_RB4PPS5_POSITION                            0x5
#define _RB4PPS_RB4PPS5_SIZE                                0x1
#define _RB4PPS_RB4PPS5_LENGTH                              0x1
#define _RB4PPS_RB4PPS5_MASK                                0x20
#define _RB4PPS_RB4PPS6_POSN                                0x6
#define _RB4PPS_RB4PPS6_POSITION                            0x6
#define _RB4PPS_RB4PPS6_SIZE                                0x1
#define _RB4PPS_RB4PPS6_LENGTH                              0x1
#define _RB4PPS_RB4PPS6_MASK                                0x40

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0x20E);
#ifndef _LIB_BUILD
asm("RB5PPS equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
        unsigned RB5PPS5                :1;
        unsigned RB5PPS6                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0x20E);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10
#define _RB5PPS_RB5PPS5_POSN                                0x5
#define _RB5PPS_RB5PPS5_POSITION                            0x5
#define _RB5PPS_RB5PPS5_SIZE                                0x1
#define _RB5PPS_RB5PPS5_LENGTH                              0x1
#define _RB5PPS_RB5PPS5_MASK                                0x20
#define _RB5PPS_RB5PPS6_POSN                                0x6
#define _RB5PPS_RB5PPS6_POSITION                            0x6
#define _RB5PPS_RB5PPS6_SIZE                                0x1
#define _RB5PPS_RB5PPS6_LENGTH                              0x1
#define _RB5PPS_RB5PPS6_MASK                                0x40

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0x20F);
#ifndef _LIB_BUILD
asm("RB6PPS equ 020Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
        unsigned RB6PPS5                :1;
        unsigned RB6PPS6                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0x20F);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10
#define _RB6PPS_RB6PPS5_POSN                                0x5
#define _RB6PPS_RB6PPS5_POSITION                            0x5
#define _RB6PPS_RB6PPS5_SIZE                                0x1
#define _RB6PPS_RB6PPS5_LENGTH                              0x1
#define _RB6PPS_RB6PPS5_MASK                                0x20
#define _RB6PPS_RB6PPS6_POSN                                0x6
#define _RB6PPS_RB6PPS6_POSITION                            0x6
#define _RB6PPS_RB6PPS6_SIZE                                0x1
#define _RB6PPS_RB6PPS6_LENGTH                              0x1
#define _RB6PPS_RB6PPS6_MASK                                0x40

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0x210);
#ifndef _LIB_BUILD
asm("RB7PPS equ 0210h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
        unsigned RB7PPS5                :1;
        unsigned RB7PPS6                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0x210);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10
#define _RB7PPS_RB7PPS5_POSN                                0x5
#define _RB7PPS_RB7PPS5_POSITION                            0x5
#define _RB7PPS_RB7PPS5_SIZE                                0x1
#define _RB7PPS_RB7PPS5_LENGTH                              0x1
#define _RB7PPS_RB7PPS5_MASK                                0x20
#define _RB7PPS_RB7PPS6_POSN                                0x6
#define _RB7PPS_RB7PPS6_POSITION                            0x6
#define _RB7PPS_RB7PPS6_SIZE                                0x1
#define _RB7PPS_RB7PPS6_LENGTH                              0x1
#define _RB7PPS_RB7PPS6_MASK                                0x40

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x211);
#ifndef _LIB_BUILD
asm("RC0PPS equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
        unsigned RC0PPS5                :1;
        unsigned RC0PPS6                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x211);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10
#define _RC0PPS_RC0PPS5_POSN                                0x5
#define _RC0PPS_RC0PPS5_POSITION                            0x5
#define _RC0PPS_RC0PPS5_SIZE                                0x1
#define _RC0PPS_RC0PPS5_LENGTH                              0x1
#define _RC0PPS_RC0PPS5_MASK                                0x20
#define _RC0PPS_RC0PPS6_POSN                                0x6
#define _RC0PPS_RC0PPS6_POSITION                            0x6
#define _RC0PPS_RC0PPS6_SIZE                                0x1
#define _RC0PPS_RC0PPS6_LENGTH                              0x1
#define _RC0PPS_RC0PPS6_MASK                                0x40

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x212);
#ifndef _LIB_BUILD
asm("RC1PPS equ 0212h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
        unsigned RC1PPS5                :1;
        unsigned RC1PPS6                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x212);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10
#define _RC1PPS_RC1PPS5_POSN                                0x5
#define _RC1PPS_RC1PPS5_POSITION                            0x5
#define _RC1PPS_RC1PPS5_SIZE                                0x1
#define _RC1PPS_RC1PPS5_LENGTH                              0x1
#define _RC1PPS_RC1PPS5_MASK                                0x20
#define _RC1PPS_RC1PPS6_POSN                                0x6
#define _RC1PPS_RC1PPS6_POSITION                            0x6
#define _RC1PPS_RC1PPS6_SIZE                                0x1
#define _RC1PPS_RC1PPS6_LENGTH                              0x1
#define _RC1PPS_RC1PPS6_MASK                                0x40

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x213);
#ifndef _LIB_BUILD
asm("RC2PPS equ 0213h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
        unsigned RC2PPS5                :1;
        unsigned RC2PPS6                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x213);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10
#define _RC2PPS_RC2PPS5_POSN                                0x5
#define _RC2PPS_RC2PPS5_POSITION                            0x5
#define _RC2PPS_RC2PPS5_SIZE                                0x1
#define _RC2PPS_RC2PPS5_LENGTH                              0x1
#define _RC2PPS_RC2PPS5_MASK                                0x20
#define _RC2PPS_RC2PPS6_POSN                                0x6
#define _RC2PPS_RC2PPS6_POSITION                            0x6
#define _RC2PPS_RC2PPS6_SIZE                                0x1
#define _RC2PPS_RC2PPS6_LENGTH                              0x1
#define _RC2PPS_RC2PPS6_MASK                                0x40

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x214);
#ifndef _LIB_BUILD
asm("RC3PPS equ 0214h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
        unsigned RC3PPS5                :1;
        unsigned RC3PPS6                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x214);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10
#define _RC3PPS_RC3PPS5_POSN                                0x5
#define _RC3PPS_RC3PPS5_POSITION                            0x5
#define _RC3PPS_RC3PPS5_SIZE                                0x1
#define _RC3PPS_RC3PPS5_LENGTH                              0x1
#define _RC3PPS_RC3PPS5_MASK                                0x20
#define _RC3PPS_RC3PPS6_POSN                                0x6
#define _RC3PPS_RC3PPS6_POSITION                            0x6
#define _RC3PPS_RC3PPS6_SIZE                                0x1
#define _RC3PPS_RC3PPS6_LENGTH                              0x1
#define _RC3PPS_RC3PPS6_MASK                                0x40

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x215);
#ifndef _LIB_BUILD
asm("RC4PPS equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
        unsigned RC4PPS5                :1;
        unsigned RC4PPS6                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x215);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10
#define _RC4PPS_RC4PPS5_POSN                                0x5
#define _RC4PPS_RC4PPS5_POSITION                            0x5
#define _RC4PPS_RC4PPS5_SIZE                                0x1
#define _RC4PPS_RC4PPS5_LENGTH                              0x1
#define _RC4PPS_RC4PPS5_MASK                                0x20
#define _RC4PPS_RC4PPS6_POSN                                0x6
#define _RC4PPS_RC4PPS6_POSITION                            0x6
#define _RC4PPS_RC4PPS6_SIZE                                0x1
#define _RC4PPS_RC4PPS6_LENGTH                              0x1
#define _RC4PPS_RC4PPS6_MASK                                0x40

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x216);
#ifndef _LIB_BUILD
asm("RC5PPS equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
        unsigned RC5PPS5                :1;
        unsigned RC5PPS6                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x216);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10
#define _RC5PPS_RC5PPS5_POSN                                0x5
#define _RC5PPS_RC5PPS5_POSITION                            0x5
#define _RC5PPS_RC5PPS5_SIZE                                0x1
#define _RC5PPS_RC5PPS5_LENGTH                              0x1
#define _RC5PPS_RC5PPS5_MASK                                0x20
#define _RC5PPS_RC5PPS6_POSN                                0x6
#define _RC5PPS_RC5PPS6_POSITION                            0x6
#define _RC5PPS_RC5PPS6_SIZE                                0x1
#define _RC5PPS_RC5PPS6_LENGTH                              0x1
#define _RC5PPS_RC5PPS6_MASK                                0x40

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0x217);
#ifndef _LIB_BUILD
asm("RC6PPS equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
        unsigned RC6PPS5                :1;
        unsigned RC6PPS6                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0x217);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10
#define _RC6PPS_RC6PPS5_POSN                                0x5
#define _RC6PPS_RC6PPS5_POSITION                            0x5
#define _RC6PPS_RC6PPS5_SIZE                                0x1
#define _RC6PPS_RC6PPS5_LENGTH                              0x1
#define _RC6PPS_RC6PPS5_MASK                                0x20
#define _RC6PPS_RC6PPS6_POSN                                0x6
#define _RC6PPS_RC6PPS6_POSITION                            0x6
#define _RC6PPS_RC6PPS6_SIZE                                0x1
#define _RC6PPS_RC6PPS6_LENGTH                              0x1
#define _RC6PPS_RC6PPS6_MASK                                0x40

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0x218);
#ifndef _LIB_BUILD
asm("RC7PPS equ 0218h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
        unsigned RC7PPS5                :1;
        unsigned RC7PPS6                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0x218);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10
#define _RC7PPS_RC7PPS5_POSN                                0x5
#define _RC7PPS_RC7PPS5_POSITION                            0x5
#define _RC7PPS_RC7PPS5_SIZE                                0x1
#define _RC7PPS_RC7PPS5_LENGTH                              0x1
#define _RC7PPS_RC7PPS5_MASK                                0x20
#define _RC7PPS_RC7PPS6_POSN                                0x6
#define _RC7PPS_RC7PPS6_POSITION                            0x6
#define _RC7PPS_RC7PPS6_SIZE                                0x1
#define _RC7PPS_RC7PPS6_LENGTH                              0x1
#define _RC7PPS_RC7PPS6_MASK                                0x40

// Register: INT0PPS
#define INT0PPS INT0PPS
extern volatile unsigned char           INT0PPS             __at(0x23E);
#ifndef _LIB_BUILD
asm("INT0PPS equ 023Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :1;
    };
    struct {
        unsigned INT0PPS0               :1;
        unsigned INT0PPS1               :1;
        unsigned INT0PPS2               :1;
        unsigned INT0PPS3               :1;
    };
    struct {
        unsigned INT0PPS                :4;
    };
} INT0PPSbits_t;
extern volatile INT0PPSbits_t INT0PPSbits __at(0x23E);
// bitfield macros
#define _INT0PPS_PIN_POSN                                   0x0
#define _INT0PPS_PIN_POSITION                               0x0
#define _INT0PPS_PIN_SIZE                                   0x3
#define _INT0PPS_PIN_LENGTH                                 0x3
#define _INT0PPS_PIN_MASK                                   0x7
#define _INT0PPS_PORT_POSN                                  0x3
#define _INT0PPS_PORT_POSITION                              0x3
#define _INT0PPS_PORT_SIZE                                  0x1
#define _INT0PPS_PORT_LENGTH                                0x1
#define _INT0PPS_PORT_MASK                                  0x8
#define _INT0PPS_INT0PPS0_POSN                              0x0
#define _INT0PPS_INT0PPS0_POSITION                          0x0
#define _INT0PPS_INT0PPS0_SIZE                              0x1
#define _INT0PPS_INT0PPS0_LENGTH                            0x1
#define _INT0PPS_INT0PPS0_MASK                              0x1
#define _INT0PPS_INT0PPS1_POSN                              0x1
#define _INT0PPS_INT0PPS1_POSITION                          0x1
#define _INT0PPS_INT0PPS1_SIZE                              0x1
#define _INT0PPS_INT0PPS1_LENGTH                            0x1
#define _INT0PPS_INT0PPS1_MASK                              0x2
#define _INT0PPS_INT0PPS2_POSN                              0x2
#define _INT0PPS_INT0PPS2_POSITION                          0x2
#define _INT0PPS_INT0PPS2_SIZE                              0x1
#define _INT0PPS_INT0PPS2_LENGTH                            0x1
#define _INT0PPS_INT0PPS2_MASK                              0x4
#define _INT0PPS_INT0PPS3_POSN                              0x3
#define _INT0PPS_INT0PPS3_POSITION                          0x3
#define _INT0PPS_INT0PPS3_SIZE                              0x1
#define _INT0PPS_INT0PPS3_LENGTH                            0x1
#define _INT0PPS_INT0PPS3_MASK                              0x8
#define _INT0PPS_INT0PPS_POSN                               0x0
#define _INT0PPS_INT0PPS_POSITION                           0x0
#define _INT0PPS_INT0PPS_SIZE                               0x4
#define _INT0PPS_INT0PPS_LENGTH                             0x4
#define _INT0PPS_INT0PPS_MASK                               0xF

// Register: INT1PPS
#define INT1PPS INT1PPS
extern volatile unsigned char           INT1PPS             __at(0x23F);
#ifndef _LIB_BUILD
asm("INT1PPS equ 023Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned INT1PPS0               :1;
        unsigned INT1PPS1               :1;
        unsigned INT1PPS2               :1;
        unsigned INT1PPS3               :1;
        unsigned INT1PPS4               :1;
    };
    struct {
        unsigned INT1PPS                :5;
    };
} INT1PPSbits_t;
extern volatile INT1PPSbits_t INT1PPSbits __at(0x23F);
// bitfield macros
#define _INT1PPS_PIN_POSN                                   0x0
#define _INT1PPS_PIN_POSITION                               0x0
#define _INT1PPS_PIN_SIZE                                   0x3
#define _INT1PPS_PIN_LENGTH                                 0x3
#define _INT1PPS_PIN_MASK                                   0x7
#define _INT1PPS_PORT_POSN                                  0x3
#define _INT1PPS_PORT_POSITION                              0x3
#define _INT1PPS_PORT_SIZE                                  0x2
#define _INT1PPS_PORT_LENGTH                                0x2
#define _INT1PPS_PORT_MASK                                  0x18
#define _INT1PPS_INT1PPS0_POSN                              0x0
#define _INT1PPS_INT1PPS0_POSITION                          0x0
#define _INT1PPS_INT1PPS0_SIZE                              0x1
#define _INT1PPS_INT1PPS0_LENGTH                            0x1
#define _INT1PPS_INT1PPS0_MASK                              0x1
#define _INT1PPS_INT1PPS1_POSN                              0x1
#define _INT1PPS_INT1PPS1_POSITION                          0x1
#define _INT1PPS_INT1PPS1_SIZE                              0x1
#define _INT1PPS_INT1PPS1_LENGTH                            0x1
#define _INT1PPS_INT1PPS1_MASK                              0x2
#define _INT1PPS_INT1PPS2_POSN                              0x2
#define _INT1PPS_INT1PPS2_POSITION                          0x2
#define _INT1PPS_INT1PPS2_SIZE                              0x1
#define _INT1PPS_INT1PPS2_LENGTH                            0x1
#define _INT1PPS_INT1PPS2_MASK                              0x4
#define _INT1PPS_INT1PPS3_POSN                              0x3
#define _INT1PPS_INT1PPS3_POSITION                          0x3
#define _INT1PPS_INT1PPS3_SIZE                              0x1
#define _INT1PPS_INT1PPS3_LENGTH                            0x1
#define _INT1PPS_INT1PPS3_MASK                              0x8
#define _INT1PPS_INT1PPS4_POSN                              0x4
#define _INT1PPS_INT1PPS4_POSITION                          0x4
#define _INT1PPS_INT1PPS4_SIZE                              0x1
#define _INT1PPS_INT1PPS4_LENGTH                            0x1
#define _INT1PPS_INT1PPS4_MASK                              0x10
#define _INT1PPS_INT1PPS_POSN                               0x0
#define _INT1PPS_INT1PPS_POSITION                           0x0
#define _INT1PPS_INT1PPS_SIZE                               0x5
#define _INT1PPS_INT1PPS_LENGTH                             0x5
#define _INT1PPS_INT1PPS_MASK                               0x1F

// Register: INT2PPS
#define INT2PPS INT2PPS
extern volatile unsigned char           INT2PPS             __at(0x240);
#ifndef _LIB_BUILD
asm("INT2PPS equ 0240h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned INT2PPS0               :1;
        unsigned INT2PPS1               :1;
        unsigned INT2PPS2               :1;
        unsigned INT2PPS3               :1;
        unsigned INT2PPS4               :1;
        unsigned INT2PPS5               :1;
    };
    struct {
        unsigned INT2PPS                :6;
    };
} INT2PPSbits_t;
extern volatile INT2PPSbits_t INT2PPSbits __at(0x240);
// bitfield macros
#define _INT2PPS_PIN_POSN                                   0x0
#define _INT2PPS_PIN_POSITION                               0x0
#define _INT2PPS_PIN_SIZE                                   0x3
#define _INT2PPS_PIN_LENGTH                                 0x3
#define _INT2PPS_PIN_MASK                                   0x7
#define _INT2PPS_PORT_POSN                                  0x3
#define _INT2PPS_PORT_POSITION                              0x3
#define _INT2PPS_PORT_SIZE                                  0x3
#define _INT2PPS_PORT_LENGTH                                0x3
#define _INT2PPS_PORT_MASK                                  0x38
#define _INT2PPS_INT2PPS0_POSN                              0x0
#define _INT2PPS_INT2PPS0_POSITION                          0x0
#define _INT2PPS_INT2PPS0_SIZE                              0x1
#define _INT2PPS_INT2PPS0_LENGTH                            0x1
#define _INT2PPS_INT2PPS0_MASK                              0x1
#define _INT2PPS_INT2PPS1_POSN                              0x1
#define _INT2PPS_INT2PPS1_POSITION                          0x1
#define _INT2PPS_INT2PPS1_SIZE                              0x1
#define _INT2PPS_INT2PPS1_LENGTH                            0x1
#define _INT2PPS_INT2PPS1_MASK                              0x2
#define _INT2PPS_INT2PPS2_POSN                              0x2
#define _INT2PPS_INT2PPS2_POSITION                          0x2
#define _INT2PPS_INT2PPS2_SIZE                              0x1
#define _INT2PPS_INT2PPS2_LENGTH                            0x1
#define _INT2PPS_INT2PPS2_MASK                              0x4
#define _INT2PPS_INT2PPS3_POSN                              0x3
#define _INT2PPS_INT2PPS3_POSITION                          0x3
#define _INT2PPS_INT2PPS3_SIZE                              0x1
#define _INT2PPS_INT2PPS3_LENGTH                            0x1
#define _INT2PPS_INT2PPS3_MASK                              0x8
#define _INT2PPS_INT2PPS4_POSN                              0x4
#define _INT2PPS_INT2PPS4_POSITION                          0x4
#define _INT2PPS_INT2PPS4_SIZE                              0x1
#define _INT2PPS_INT2PPS4_LENGTH                            0x1
#define _INT2PPS_INT2PPS4_MASK                              0x10
#define _INT2PPS_INT2PPS5_POSN                              0x5
#define _INT2PPS_INT2PPS5_POSITION                          0x5
#define _INT2PPS_INT2PPS5_SIZE                              0x1
#define _INT2PPS_INT2PPS5_LENGTH                            0x1
#define _INT2PPS_INT2PPS5_MASK                              0x20
#define _INT2PPS_INT2PPS_POSN                               0x0
#define _INT2PPS_INT2PPS_POSITION                           0x0
#define _INT2PPS_INT2PPS_SIZE                               0x6
#define _INT2PPS_INT2PPS_LENGTH                             0x6
#define _INT2PPS_INT2PPS_MASK                               0x3F

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x241);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0241h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned T0CKIPPS               :6;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
        unsigned T0CKIPPS5              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x241);
// bitfield macros
#define _T0CKIPPS_PIN_POSN                                  0x0
#define _T0CKIPPS_PIN_POSITION                              0x0
#define _T0CKIPPS_PIN_SIZE                                  0x3
#define _T0CKIPPS_PIN_LENGTH                                0x3
#define _T0CKIPPS_PIN_MASK                                  0x7
#define _T0CKIPPS_PORT_POSN                                 0x3
#define _T0CKIPPS_PORT_POSITION                             0x3
#define _T0CKIPPS_PORT_SIZE                                 0x3
#define _T0CKIPPS_PORT_LENGTH                               0x3
#define _T0CKIPPS_PORT_MASK                                 0x38
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x6
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x6
#define _T0CKIPPS_T0CKIPPS_MASK                             0x3F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10
#define _T0CKIPPS_T0CKIPPS5_POSN                            0x5
#define _T0CKIPPS_T0CKIPPS5_POSITION                        0x5
#define _T0CKIPPS_T0CKIPPS5_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS5_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS5_MASK                            0x20

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x242);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0242h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
        unsigned T1CKIPPS5              :1;
    };
    struct {
        unsigned T1CKIPPS               :6;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x242);
// bitfield macros
#define _T1CKIPPS_PIN_POSN                                  0x0
#define _T1CKIPPS_PIN_POSITION                              0x0
#define _T1CKIPPS_PIN_SIZE                                  0x3
#define _T1CKIPPS_PIN_LENGTH                                0x3
#define _T1CKIPPS_PIN_MASK                                  0x7
#define _T1CKIPPS_PORT_POSN                                 0x3
#define _T1CKIPPS_PORT_POSITION                             0x3
#define _T1CKIPPS_PORT_SIZE                                 0x3
#define _T1CKIPPS_PORT_LENGTH                               0x3
#define _T1CKIPPS_PORT_MASK                                 0x38
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10
#define _T1CKIPPS_T1CKIPPS5_POSN                            0x5
#define _T1CKIPPS_T1CKIPPS5_POSITION                        0x5
#define _T1CKIPPS_T1CKIPPS5_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS5_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS5_MASK                            0x20
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x6
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x6
#define _T1CKIPPS_T1CKIPPS_MASK                             0x3F

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x243);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0243h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
    struct {
        unsigned T1GPPS                 :5;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x243);
// bitfield macros
#define _T1GPPS_PIN_POSN                                    0x0
#define _T1GPPS_PIN_POSITION                                0x0
#define _T1GPPS_PIN_SIZE                                    0x3
#define _T1GPPS_PIN_LENGTH                                  0x3
#define _T1GPPS_PIN_MASK                                    0x7
#define _T1GPPS_PORT_POSN                                   0x3
#define _T1GPPS_PORT_POSITION                               0x3
#define _T1GPPS_PORT_SIZE                                   0x2
#define _T1GPPS_PORT_LENGTH                                 0x2
#define _T1GPPS_PORT_MASK                                   0x18
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0x244);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 0244h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned T3CKIPPS0              :1;
        unsigned T3CKIPPS1              :1;
        unsigned T3CKIPPS2              :1;
        unsigned T3CKIPPS3              :1;
        unsigned T3CKIPPS4              :1;
        unsigned T3CKIPPS5              :1;
    };
    struct {
        unsigned T3CKIPPS               :6;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0x244);
// bitfield macros
#define _T3CKIPPS_PIN_POSN                                  0x0
#define _T3CKIPPS_PIN_POSITION                              0x0
#define _T3CKIPPS_PIN_SIZE                                  0x3
#define _T3CKIPPS_PIN_LENGTH                                0x3
#define _T3CKIPPS_PIN_MASK                                  0x7
#define _T3CKIPPS_PORT_POSN                                 0x3
#define _T3CKIPPS_PORT_POSITION                             0x3
#define _T3CKIPPS_PORT_SIZE                                 0x3
#define _T3CKIPPS_PORT_LENGTH                               0x3
#define _T3CKIPPS_PORT_MASK                                 0x38
#define _T3CKIPPS_T3CKIPPS0_POSN                            0x0
#define _T3CKIPPS_T3CKIPPS0_POSITION                        0x0
#define _T3CKIPPS_T3CKIPPS0_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS0_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS0_MASK                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSN                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSITION                        0x1
#define _T3CKIPPS_T3CKIPPS1_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS1_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS1_MASK                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSN                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSITION                        0x2
#define _T3CKIPPS_T3CKIPPS2_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS2_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS2_MASK                            0x4
#define _T3CKIPPS_T3CKIPPS3_POSN                            0x3
#define _T3CKIPPS_T3CKIPPS3_POSITION                        0x3
#define _T3CKIPPS_T3CKIPPS3_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS3_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS3_MASK                            0x8
#define _T3CKIPPS_T3CKIPPS4_POSN                            0x4
#define _T3CKIPPS_T3CKIPPS4_POSITION                        0x4
#define _T3CKIPPS_T3CKIPPS4_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS4_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS4_MASK                            0x10
#define _T3CKIPPS_T3CKIPPS5_POSN                            0x5
#define _T3CKIPPS_T3CKIPPS5_POSITION                        0x5
#define _T3CKIPPS_T3CKIPPS5_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS5_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS5_MASK                            0x20
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x6
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x6
#define _T3CKIPPS_T3CKIPPS_MASK                             0x3F

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0x245);
#ifndef _LIB_BUILD
asm("T3GPPS equ 0245h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T3GPPS0                :1;
        unsigned T3GPPS1                :1;
        unsigned T3GPPS2                :1;
        unsigned T3GPPS3                :1;
        unsigned T3GPPS4                :1;
    };
    struct {
        unsigned T3GPPS                 :5;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0x245);
// bitfield macros
#define _T3GPPS_PIN_POSN                                    0x0
#define _T3GPPS_PIN_POSITION                                0x0
#define _T3GPPS_PIN_SIZE                                    0x3
#define _T3GPPS_PIN_LENGTH                                  0x3
#define _T3GPPS_PIN_MASK                                    0x7
#define _T3GPPS_PORT_POSN                                   0x3
#define _T3GPPS_PORT_POSITION                               0x3
#define _T3GPPS_PORT_SIZE                                   0x2
#define _T3GPPS_PORT_LENGTH                                 0x2
#define _T3GPPS_PORT_MASK                                   0x18
#define _T3GPPS_T3GPPS0_POSN                                0x0
#define _T3GPPS_T3GPPS0_POSITION                            0x0
#define _T3GPPS_T3GPPS0_SIZE                                0x1
#define _T3GPPS_T3GPPS0_LENGTH                              0x1
#define _T3GPPS_T3GPPS0_MASK                                0x1
#define _T3GPPS_T3GPPS1_POSN                                0x1
#define _T3GPPS_T3GPPS1_POSITION                            0x1
#define _T3GPPS_T3GPPS1_SIZE                                0x1
#define _T3GPPS_T3GPPS1_LENGTH                              0x1
#define _T3GPPS_T3GPPS1_MASK                                0x2
#define _T3GPPS_T3GPPS2_POSN                                0x2
#define _T3GPPS_T3GPPS2_POSITION                            0x2
#define _T3GPPS_T3GPPS2_SIZE                                0x1
#define _T3GPPS_T3GPPS2_LENGTH                              0x1
#define _T3GPPS_T3GPPS2_MASK                                0x4
#define _T3GPPS_T3GPPS3_POSN                                0x3
#define _T3GPPS_T3GPPS3_POSITION                            0x3
#define _T3GPPS_T3GPPS3_SIZE                                0x1
#define _T3GPPS_T3GPPS3_LENGTH                              0x1
#define _T3GPPS_T3GPPS3_MASK                                0x8
#define _T3GPPS_T3GPPS4_POSN                                0x4
#define _T3GPPS_T3GPPS4_POSITION                            0x4
#define _T3GPPS_T3GPPS4_SIZE                                0x1
#define _T3GPPS_T3GPPS4_LENGTH                              0x1
#define _T3GPPS_T3GPPS4_MASK                                0x10
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0x246);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 0246h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned T5CKIPPS0              :1;
        unsigned T5CKIPPS1              :1;
        unsigned T5CKIPPS2              :1;
        unsigned T5CKIPPS3              :1;
        unsigned T5CKIPPS4              :1;
        unsigned T5CKIPPS5              :1;
    };
    struct {
        unsigned T5CKIPPS               :6;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0x246);
// bitfield macros
#define _T5CKIPPS_PIN_POSN                                  0x0
#define _T5CKIPPS_PIN_POSITION                              0x0
#define _T5CKIPPS_PIN_SIZE                                  0x3
#define _T5CKIPPS_PIN_LENGTH                                0x3
#define _T5CKIPPS_PIN_MASK                                  0x7
#define _T5CKIPPS_PORT_POSN                                 0x3
#define _T5CKIPPS_PORT_POSITION                             0x3
#define _T5CKIPPS_PORT_SIZE                                 0x3
#define _T5CKIPPS_PORT_LENGTH                               0x3
#define _T5CKIPPS_PORT_MASK                                 0x38
#define _T5CKIPPS_T5CKIPPS0_POSN                            0x0
#define _T5CKIPPS_T5CKIPPS0_POSITION                        0x0
#define _T5CKIPPS_T5CKIPPS0_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS0_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS0_MASK                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSN                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSITION                        0x1
#define _T5CKIPPS_T5CKIPPS1_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS1_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS1_MASK                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSN                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSITION                        0x2
#define _T5CKIPPS_T5CKIPPS2_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS2_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS2_MASK                            0x4
#define _T5CKIPPS_T5CKIPPS3_POSN                            0x3
#define _T5CKIPPS_T5CKIPPS3_POSITION                        0x3
#define _T5CKIPPS_T5CKIPPS3_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS3_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS3_MASK                            0x8
#define _T5CKIPPS_T5CKIPPS4_POSN                            0x4
#define _T5CKIPPS_T5CKIPPS4_POSITION                        0x4
#define _T5CKIPPS_T5CKIPPS4_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS4_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS4_MASK                            0x10
#define _T5CKIPPS_T5CKIPPS5_POSN                            0x5
#define _T5CKIPPS_T5CKIPPS5_POSITION                        0x5
#define _T5CKIPPS_T5CKIPPS5_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS5_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS5_MASK                            0x20
#define _T5CKIPPS_T5CKIPPS_POSN                             0x0
#define _T5CKIPPS_T5CKIPPS_POSITION                         0x0
#define _T5CKIPPS_T5CKIPPS_SIZE                             0x6
#define _T5CKIPPS_T5CKIPPS_LENGTH                           0x6
#define _T5CKIPPS_T5CKIPPS_MASK                             0x3F

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0x247);
#ifndef _LIB_BUILD
asm("T5GPPS equ 0247h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T5GPPS0                :1;
        unsigned T5GPPS1                :1;
        unsigned T5GPPS2                :1;
        unsigned T5GPPS3                :1;
        unsigned T5GPPS4                :1;
    };
    struct {
        unsigned T5GPPS                 :5;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0x247);
// bitfield macros
#define _T5GPPS_PIN_POSN                                    0x0
#define _T5GPPS_PIN_POSITION                                0x0
#define _T5GPPS_PIN_SIZE                                    0x3
#define _T5GPPS_PIN_LENGTH                                  0x3
#define _T5GPPS_PIN_MASK                                    0x7
#define _T5GPPS_PORT_POSN                                   0x3
#define _T5GPPS_PORT_POSITION                               0x3
#define _T5GPPS_PORT_SIZE                                   0x2
#define _T5GPPS_PORT_LENGTH                                 0x2
#define _T5GPPS_PORT_MASK                                   0x18
#define _T5GPPS_T5GPPS0_POSN                                0x0
#define _T5GPPS_T5GPPS0_POSITION                            0x0
#define _T5GPPS_T5GPPS0_SIZE                                0x1
#define _T5GPPS_T5GPPS0_LENGTH                              0x1
#define _T5GPPS_T5GPPS0_MASK                                0x1
#define _T5GPPS_T5GPPS1_POSN                                0x1
#define _T5GPPS_T5GPPS1_POSITION                            0x1
#define _T5GPPS_T5GPPS1_SIZE                                0x1
#define _T5GPPS_T5GPPS1_LENGTH                              0x1
#define _T5GPPS_T5GPPS1_MASK                                0x2
#define _T5GPPS_T5GPPS2_POSN                                0x2
#define _T5GPPS_T5GPPS2_POSITION                            0x2
#define _T5GPPS_T5GPPS2_SIZE                                0x1
#define _T5GPPS_T5GPPS2_LENGTH                              0x1
#define _T5GPPS_T5GPPS2_MASK                                0x4
#define _T5GPPS_T5GPPS3_POSN                                0x3
#define _T5GPPS_T5GPPS3_POSITION                            0x3
#define _T5GPPS_T5GPPS3_SIZE                                0x1
#define _T5GPPS_T5GPPS3_LENGTH                              0x1
#define _T5GPPS_T5GPPS3_MASK                                0x8
#define _T5GPPS_T5GPPS4_POSN                                0x4
#define _T5GPPS_T5GPPS4_POSITION                            0x4
#define _T5GPPS_T5GPPS4_SIZE                                0x1
#define _T5GPPS_T5GPPS4_LENGTH                              0x1
#define _T5GPPS_T5GPPS4_MASK                                0x10
#define _T5GPPS_T5GPPS_POSN                                 0x0
#define _T5GPPS_T5GPPS_POSITION                             0x0
#define _T5GPPS_T5GPPS_SIZE                                 0x5
#define _T5GPPS_T5GPPS_LENGTH                               0x5
#define _T5GPPS_T5GPPS_MASK                                 0x1F

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x248);
#ifndef _LIB_BUILD
asm("T2INPPS equ 0248h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
    };
    struct {
        unsigned T2INPPS                :5;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x248);
// bitfield macros
#define _T2INPPS_PIN_POSN                                   0x0
#define _T2INPPS_PIN_POSITION                               0x0
#define _T2INPPS_PIN_SIZE                                   0x3
#define _T2INPPS_PIN_LENGTH                                 0x3
#define _T2INPPS_PIN_MASK                                   0x7
#define _T2INPPS_PORT_POSN                                  0x3
#define _T2INPPS_PORT_POSITION                              0x3
#define _T2INPPS_PORT_SIZE                                  0x2
#define _T2INPPS_PORT_LENGTH                                0x2
#define _T2INPPS_PORT_MASK                                  0x18
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0x249);
#ifndef _LIB_BUILD
asm("T4INPPS equ 0249h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T4INPPS0               :1;
        unsigned T4INPPS1               :1;
        unsigned T4INPPS2               :1;
        unsigned T4INPPS3               :1;
        unsigned T4INPPS4               :1;
    };
    struct {
        unsigned T4INPPS                :5;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0x249);
// bitfield macros
#define _T4INPPS_PIN_POSN                                   0x0
#define _T4INPPS_PIN_POSITION                               0x0
#define _T4INPPS_PIN_SIZE                                   0x3
#define _T4INPPS_PIN_LENGTH                                 0x3
#define _T4INPPS_PIN_MASK                                   0x7
#define _T4INPPS_PORT_POSN                                  0x3
#define _T4INPPS_PORT_POSITION                              0x3
#define _T4INPPS_PORT_SIZE                                  0x2
#define _T4INPPS_PORT_LENGTH                                0x2
#define _T4INPPS_PORT_MASK                                  0x18
#define _T4INPPS_T4INPPS0_POSN                              0x0
#define _T4INPPS_T4INPPS0_POSITION                          0x0
#define _T4INPPS_T4INPPS0_SIZE                              0x1
#define _T4INPPS_T4INPPS0_LENGTH                            0x1
#define _T4INPPS_T4INPPS0_MASK                              0x1
#define _T4INPPS_T4INPPS1_POSN                              0x1
#define _T4INPPS_T4INPPS1_POSITION                          0x1
#define _T4INPPS_T4INPPS1_SIZE                              0x1
#define _T4INPPS_T4INPPS1_LENGTH                            0x1
#define _T4INPPS_T4INPPS1_MASK                              0x2
#define _T4INPPS_T4INPPS2_POSN                              0x2
#define _T4INPPS_T4INPPS2_POSITION                          0x2
#define _T4INPPS_T4INPPS2_SIZE                              0x1
#define _T4INPPS_T4INPPS2_LENGTH                            0x1
#define _T4INPPS_T4INPPS2_MASK                              0x4
#define _T4INPPS_T4INPPS3_POSN                              0x3
#define _T4INPPS_T4INPPS3_POSITION                          0x3
#define _T4INPPS_T4INPPS3_SIZE                              0x1
#define _T4INPPS_T4INPPS3_LENGTH                            0x1
#define _T4INPPS_T4INPPS3_MASK                              0x8
#define _T4INPPS_T4INPPS4_POSN                              0x4
#define _T4INPPS_T4INPPS4_POSITION                          0x4
#define _T4INPPS_T4INPPS4_SIZE                              0x1
#define _T4INPPS_T4INPPS4_LENGTH                            0x1
#define _T4INPPS_T4INPPS4_MASK                              0x10
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x5
#define _T4INPPS_T4INPPS_LENGTH                             0x5
#define _T4INPPS_T4INPPS_MASK                               0x1F

// Register: T6INPPS
#define T6INPPS T6INPPS
extern volatile unsigned char           T6INPPS             __at(0x24A);
#ifndef _LIB_BUILD
asm("T6INPPS equ 024Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T6INPPS0               :1;
        unsigned T6INPPS1               :1;
        unsigned T6INPPS2               :1;
        unsigned T6INPPS3               :1;
        unsigned T6INPPS4               :1;
    };
    struct {
        unsigned T6INPPS                :5;
    };
} T6INPPSbits_t;
extern volatile T6INPPSbits_t T6INPPSbits __at(0x24A);
// bitfield macros
#define _T6INPPS_PIN_POSN                                   0x0
#define _T6INPPS_PIN_POSITION                               0x0
#define _T6INPPS_PIN_SIZE                                   0x3
#define _T6INPPS_PIN_LENGTH                                 0x3
#define _T6INPPS_PIN_MASK                                   0x7
#define _T6INPPS_PORT_POSN                                  0x3
#define _T6INPPS_PORT_POSITION                              0x3
#define _T6INPPS_PORT_SIZE                                  0x2
#define _T6INPPS_PORT_LENGTH                                0x2
#define _T6INPPS_PORT_MASK                                  0x18
#define _T6INPPS_T6INPPS0_POSN                              0x0
#define _T6INPPS_T6INPPS0_POSITION                          0x0
#define _T6INPPS_T6INPPS0_SIZE                              0x1
#define _T6INPPS_T6INPPS0_LENGTH                            0x1
#define _T6INPPS_T6INPPS0_MASK                              0x1
#define _T6INPPS_T6INPPS1_POSN                              0x1
#define _T6INPPS_T6INPPS1_POSITION                          0x1
#define _T6INPPS_T6INPPS1_SIZE                              0x1
#define _T6INPPS_T6INPPS1_LENGTH                            0x1
#define _T6INPPS_T6INPPS1_MASK                              0x2
#define _T6INPPS_T6INPPS2_POSN                              0x2
#define _T6INPPS_T6INPPS2_POSITION                          0x2
#define _T6INPPS_T6INPPS2_SIZE                              0x1
#define _T6INPPS_T6INPPS2_LENGTH                            0x1
#define _T6INPPS_T6INPPS2_MASK                              0x4
#define _T6INPPS_T6INPPS3_POSN                              0x3
#define _T6INPPS_T6INPPS3_POSITION                          0x3
#define _T6INPPS_T6INPPS3_SIZE                              0x1
#define _T6INPPS_T6INPPS3_LENGTH                            0x1
#define _T6INPPS_T6INPPS3_MASK                              0x8
#define _T6INPPS_T6INPPS4_POSN                              0x4
#define _T6INPPS_T6INPPS4_POSITION                          0x4
#define _T6INPPS_T6INPPS4_SIZE                              0x1
#define _T6INPPS_T6INPPS4_LENGTH                            0x1
#define _T6INPPS_T6INPPS4_MASK                              0x10
#define _T6INPPS_T6INPPS_POSN                               0x0
#define _T6INPPS_T6INPPS_POSITION                           0x0
#define _T6INPPS_T6INPPS_SIZE                               0x5
#define _T6INPPS_T6INPPS_LENGTH                             0x5
#define _T6INPPS_T6INPPS_MASK                               0x1F

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x24F);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 024Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
        unsigned CCP1PPS5               :1;
    };
    struct {
        unsigned CCP1PPS                :6;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x24F);
// bitfield macros
#define _CCP1PPS_PIN_POSN                                   0x0
#define _CCP1PPS_PIN_POSITION                               0x0
#define _CCP1PPS_PIN_SIZE                                   0x3
#define _CCP1PPS_PIN_LENGTH                                 0x3
#define _CCP1PPS_PIN_MASK                                   0x7
#define _CCP1PPS_PORT_POSN                                  0x3
#define _CCP1PPS_PORT_POSITION                              0x3
#define _CCP1PPS_PORT_SIZE                                  0x3
#define _CCP1PPS_PORT_LENGTH                                0x3
#define _CCP1PPS_PORT_MASK                                  0x38
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10
#define _CCP1PPS_CCP1PPS5_POSN                              0x5
#define _CCP1PPS_CCP1PPS5_POSITION                          0x5
#define _CCP1PPS_CCP1PPS5_SIZE                              0x1
#define _CCP1PPS_CCP1PPS5_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS5_MASK                              0x20
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x6
#define _CCP1PPS_CCP1PPS_LENGTH                             0x6
#define _CCP1PPS_CCP1PPS_MASK                               0x3F

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x250);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 0250h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
        unsigned CCP2PPS5               :1;
    };
    struct {
        unsigned CCP2PPS                :6;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x250);
// bitfield macros
#define _CCP2PPS_PIN_POSN                                   0x0
#define _CCP2PPS_PIN_POSITION                               0x0
#define _CCP2PPS_PIN_SIZE                                   0x3
#define _CCP2PPS_PIN_LENGTH                                 0x3
#define _CCP2PPS_PIN_MASK                                   0x7
#define _CCP2PPS_PORT_POSN                                  0x3
#define _CCP2PPS_PORT_POSITION                              0x3
#define _CCP2PPS_PORT_SIZE                                  0x3
#define _CCP2PPS_PORT_LENGTH                                0x3
#define _CCP2PPS_PORT_MASK                                  0x38
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10
#define _CCP2PPS_CCP2PPS5_POSN                              0x5
#define _CCP2PPS_CCP2PPS5_POSITION                          0x5
#define _CCP2PPS_CCP2PPS5_SIZE                              0x1
#define _CCP2PPS_CCP2PPS5_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS5_MASK                              0x20
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x6
#define _CCP2PPS_CCP2PPS_LENGTH                             0x6
#define _CCP2PPS_CCP2PPS_MASK                               0x3F

// Register: CCP3PPS
#define CCP3PPS CCP3PPS
extern volatile unsigned char           CCP3PPS             __at(0x251);
#ifndef _LIB_BUILD
asm("CCP3PPS equ 0251h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CCP3PPS0               :1;
        unsigned CCP3PPS1               :1;
        unsigned CCP3PPS2               :1;
        unsigned CCP3PPS3               :1;
        unsigned CCP3PPS4               :1;
    };
    struct {
        unsigned CCP3PPS                :5;
    };
} CCP3PPSbits_t;
extern volatile CCP3PPSbits_t CCP3PPSbits __at(0x251);
// bitfield macros
#define _CCP3PPS_PIN_POSN                                   0x0
#define _CCP3PPS_PIN_POSITION                               0x0
#define _CCP3PPS_PIN_SIZE                                   0x3
#define _CCP3PPS_PIN_LENGTH                                 0x3
#define _CCP3PPS_PIN_MASK                                   0x7
#define _CCP3PPS_PORT_POSN                                  0x3
#define _CCP3PPS_PORT_POSITION                              0x3
#define _CCP3PPS_PORT_SIZE                                  0x2
#define _CCP3PPS_PORT_LENGTH                                0x2
#define _CCP3PPS_PORT_MASK                                  0x18
#define _CCP3PPS_CCP3PPS0_POSN                              0x0
#define _CCP3PPS_CCP3PPS0_POSITION                          0x0
#define _CCP3PPS_CCP3PPS0_SIZE                              0x1
#define _CCP3PPS_CCP3PPS0_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS0_MASK                              0x1
#define _CCP3PPS_CCP3PPS1_POSN                              0x1
#define _CCP3PPS_CCP3PPS1_POSITION                          0x1
#define _CCP3PPS_CCP3PPS1_SIZE                              0x1
#define _CCP3PPS_CCP3PPS1_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS1_MASK                              0x2
#define _CCP3PPS_CCP3PPS2_POSN                              0x2
#define _CCP3PPS_CCP3PPS2_POSITION                          0x2
#define _CCP3PPS_CCP3PPS2_SIZE                              0x1
#define _CCP3PPS_CCP3PPS2_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS2_MASK                              0x4
#define _CCP3PPS_CCP3PPS3_POSN                              0x3
#define _CCP3PPS_CCP3PPS3_POSITION                          0x3
#define _CCP3PPS_CCP3PPS3_SIZE                              0x1
#define _CCP3PPS_CCP3PPS3_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS3_MASK                              0x8
#define _CCP3PPS_CCP3PPS4_POSN                              0x4
#define _CCP3PPS_CCP3PPS4_POSITION                          0x4
#define _CCP3PPS_CCP3PPS4_SIZE                              0x1
#define _CCP3PPS_CCP3PPS4_LENGTH                            0x1
#define _CCP3PPS_CCP3PPS4_MASK                              0x10
#define _CCP3PPS_CCP3PPS_POSN                               0x0
#define _CCP3PPS_CCP3PPS_POSITION                           0x0
#define _CCP3PPS_CCP3PPS_SIZE                               0x5
#define _CCP3PPS_CCP3PPS_LENGTH                             0x5
#define _CCP3PPS_CCP3PPS_MASK                               0x1F

// Register: PWM1ERSPPS
#define PWM1ERSPPS PWM1ERSPPS
extern volatile unsigned char           PWM1ERSPPS          __at(0x253);
#ifndef _LIB_BUILD
asm("PWM1ERSPPS equ 0253h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned PWM1ERSPPS             :5;
    };
    struct {
        unsigned PWM1ERSPPS0            :1;
        unsigned PWM1ERSPPS1            :1;
        unsigned PWM1ERSPPS2            :1;
        unsigned PWM1ERSPPS3            :1;
        unsigned PWM1ERSPPS4            :1;
    };
} PWM1ERSPPSbits_t;
extern volatile PWM1ERSPPSbits_t PWM1ERSPPSbits __at(0x253);
// bitfield macros
#define _PWM1ERSPPS_PIN_POSN                                0x0
#define _PWM1ERSPPS_PIN_POSITION                            0x0
#define _PWM1ERSPPS_PIN_SIZE                                0x3
#define _PWM1ERSPPS_PIN_LENGTH                              0x3
#define _PWM1ERSPPS_PIN_MASK                                0x7
#define _PWM1ERSPPS_PORT_POSN                               0x3
#define _PWM1ERSPPS_PORT_POSITION                           0x3
#define _PWM1ERSPPS_PORT_SIZE                               0x2
#define _PWM1ERSPPS_PORT_LENGTH                             0x2
#define _PWM1ERSPPS_PORT_MASK                               0x18
#define _PWM1ERSPPS_PWM1ERSPPS_POSN                         0x0
#define _PWM1ERSPPS_PWM1ERSPPS_POSITION                     0x0
#define _PWM1ERSPPS_PWM1ERSPPS_SIZE                         0x5
#define _PWM1ERSPPS_PWM1ERSPPS_LENGTH                       0x5
#define _PWM1ERSPPS_PWM1ERSPPS_MASK                         0x1F
#define _PWM1ERSPPS_PWM1ERSPPS0_POSN                        0x0
#define _PWM1ERSPPS_PWM1ERSPPS0_POSITION                    0x0
#define _PWM1ERSPPS_PWM1ERSPPS0_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS0_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS0_MASK                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_POSN                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_POSITION                    0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_MASK                        0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_POSN                        0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_POSITION                    0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS2_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS2_MASK                        0x4
#define _PWM1ERSPPS_PWM1ERSPPS3_POSN                        0x3
#define _PWM1ERSPPS_PWM1ERSPPS3_POSITION                    0x3
#define _PWM1ERSPPS_PWM1ERSPPS3_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS3_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS3_MASK                        0x8
#define _PWM1ERSPPS_PWM1ERSPPS4_POSN                        0x4
#define _PWM1ERSPPS_PWM1ERSPPS4_POSITION                    0x4
#define _PWM1ERSPPS_PWM1ERSPPS4_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS4_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS4_MASK                        0x10

// Register: PWM2ERSPPS
#define PWM2ERSPPS PWM2ERSPPS
extern volatile unsigned char           PWM2ERSPPS          __at(0x254);
#ifndef _LIB_BUILD
asm("PWM2ERSPPS equ 0254h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned PWM2ERSPPS             :6;
    };
    struct {
        unsigned PWM2ERSPPS0            :1;
        unsigned PWM2ERSPPS1            :1;
        unsigned PWM2ERSPPS2            :1;
        unsigned PWM2ERSPPS3            :1;
        unsigned PWM2ERSPPS4            :1;
        unsigned PWM2ERSPPS5            :1;
    };
} PWM2ERSPPSbits_t;
extern volatile PWM2ERSPPSbits_t PWM2ERSPPSbits __at(0x254);
// bitfield macros
#define _PWM2ERSPPS_PIN_POSN                                0x0
#define _PWM2ERSPPS_PIN_POSITION                            0x0
#define _PWM2ERSPPS_PIN_SIZE                                0x3
#define _PWM2ERSPPS_PIN_LENGTH                              0x3
#define _PWM2ERSPPS_PIN_MASK                                0x7
#define _PWM2ERSPPS_PORT_POSN                               0x3
#define _PWM2ERSPPS_PORT_POSITION                           0x3
#define _PWM2ERSPPS_PORT_SIZE                               0x3
#define _PWM2ERSPPS_PORT_LENGTH                             0x3
#define _PWM2ERSPPS_PORT_MASK                               0x38
#define _PWM2ERSPPS_PWM2ERSPPS_POSN                         0x0
#define _PWM2ERSPPS_PWM2ERSPPS_POSITION                     0x0
#define _PWM2ERSPPS_PWM2ERSPPS_SIZE                         0x6
#define _PWM2ERSPPS_PWM2ERSPPS_LENGTH                       0x6
#define _PWM2ERSPPS_PWM2ERSPPS_MASK                         0x3F
#define _PWM2ERSPPS_PWM2ERSPPS0_POSN                        0x0
#define _PWM2ERSPPS_PWM2ERSPPS0_POSITION                    0x0
#define _PWM2ERSPPS_PWM2ERSPPS0_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS0_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS0_MASK                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_POSN                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_POSITION                    0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_MASK                        0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_POSN                        0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_POSITION                    0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS2_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS2_MASK                        0x4
#define _PWM2ERSPPS_PWM2ERSPPS3_POSN                        0x3
#define _PWM2ERSPPS_PWM2ERSPPS3_POSITION                    0x3
#define _PWM2ERSPPS_PWM2ERSPPS3_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS3_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS3_MASK                        0x8
#define _PWM2ERSPPS_PWM2ERSPPS4_POSN                        0x4
#define _PWM2ERSPPS_PWM2ERSPPS4_POSITION                    0x4
#define _PWM2ERSPPS_PWM2ERSPPS4_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS4_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS4_MASK                        0x10
#define _PWM2ERSPPS_PWM2ERSPPS5_POSN                        0x5
#define _PWM2ERSPPS_PWM2ERSPPS5_POSITION                    0x5
#define _PWM2ERSPPS_PWM2ERSPPS5_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS5_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS5_MASK                        0x20

// Register: PWM3ERSPPS
#define PWM3ERSPPS PWM3ERSPPS
extern volatile unsigned char           PWM3ERSPPS          __at(0x255);
#ifndef _LIB_BUILD
asm("PWM3ERSPPS equ 0255h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned PWM3ERSPPS             :5;
    };
    struct {
        unsigned PWM3ERSPPS0            :1;
        unsigned PWM3ERSPPS1            :1;
        unsigned PWM3ERSPPS2            :1;
        unsigned PWM3ERSPPS3            :1;
        unsigned PWM3ERSPPS4            :1;
    };
} PWM3ERSPPSbits_t;
extern volatile PWM3ERSPPSbits_t PWM3ERSPPSbits __at(0x255);
// bitfield macros
#define _PWM3ERSPPS_PIN_POSN                                0x0
#define _PWM3ERSPPS_PIN_POSITION                            0x0
#define _PWM3ERSPPS_PIN_SIZE                                0x3
#define _PWM3ERSPPS_PIN_LENGTH                              0x3
#define _PWM3ERSPPS_PIN_MASK                                0x7
#define _PWM3ERSPPS_PORT_POSN                               0x3
#define _PWM3ERSPPS_PORT_POSITION                           0x3
#define _PWM3ERSPPS_PORT_SIZE                               0x2
#define _PWM3ERSPPS_PORT_LENGTH                             0x2
#define _PWM3ERSPPS_PORT_MASK                               0x18
#define _PWM3ERSPPS_PWM3ERSPPS_POSN                         0x0
#define _PWM3ERSPPS_PWM3ERSPPS_POSITION                     0x0
#define _PWM3ERSPPS_PWM3ERSPPS_SIZE                         0x5
#define _PWM3ERSPPS_PWM3ERSPPS_LENGTH                       0x5
#define _PWM3ERSPPS_PWM3ERSPPS_MASK                         0x1F
#define _PWM3ERSPPS_PWM3ERSPPS0_POSN                        0x0
#define _PWM3ERSPPS_PWM3ERSPPS0_POSITION                    0x0
#define _PWM3ERSPPS_PWM3ERSPPS0_SIZE                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS0_LENGTH                      0x1
#define _PWM3ERSPPS_PWM3ERSPPS0_MASK                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS1_POSN                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS1_POSITION                    0x1
#define _PWM3ERSPPS_PWM3ERSPPS1_SIZE                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS1_LENGTH                      0x1
#define _PWM3ERSPPS_PWM3ERSPPS1_MASK                        0x2
#define _PWM3ERSPPS_PWM3ERSPPS2_POSN                        0x2
#define _PWM3ERSPPS_PWM3ERSPPS2_POSITION                    0x2
#define _PWM3ERSPPS_PWM3ERSPPS2_SIZE                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS2_LENGTH                      0x1
#define _PWM3ERSPPS_PWM3ERSPPS2_MASK                        0x4
#define _PWM3ERSPPS_PWM3ERSPPS3_POSN                        0x3
#define _PWM3ERSPPS_PWM3ERSPPS3_POSITION                    0x3
#define _PWM3ERSPPS_PWM3ERSPPS3_SIZE                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS3_LENGTH                      0x1
#define _PWM3ERSPPS_PWM3ERSPPS3_MASK                        0x8
#define _PWM3ERSPPS_PWM3ERSPPS4_POSN                        0x4
#define _PWM3ERSPPS_PWM3ERSPPS4_POSITION                    0x4
#define _PWM3ERSPPS_PWM3ERSPPS4_SIZE                        0x1
#define _PWM3ERSPPS_PWM3ERSPPS4_LENGTH                      0x1
#define _PWM3ERSPPS_PWM3ERSPPS4_MASK                        0x10

// Register: PWMIN0PPS
#define PWMIN0PPS PWMIN0PPS
extern volatile unsigned char           PWMIN0PPS           __at(0x257);
#ifndef _LIB_BUILD
asm("PWMIN0PPS equ 0257h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned PWMIN0PPS              :6;
    };
    struct {
        unsigned PWMIN0PPS0             :1;
        unsigned PWMIN0PPS1             :1;
        unsigned PWMIN0PPS2             :1;
        unsigned PWMIN0PPS3             :1;
        unsigned PWMIN0PPS4             :1;
        unsigned PWMIN0PPS5             :1;
    };
} PWMIN0PPSbits_t;
extern volatile PWMIN0PPSbits_t PWMIN0PPSbits __at(0x257);
// bitfield macros
#define _PWMIN0PPS_PIN_POSN                                 0x0
#define _PWMIN0PPS_PIN_POSITION                             0x0
#define _PWMIN0PPS_PIN_SIZE                                 0x3
#define _PWMIN0PPS_PIN_LENGTH                               0x3
#define _PWMIN0PPS_PIN_MASK                                 0x7
#define _PWMIN0PPS_PORT_POSN                                0x3
#define _PWMIN0PPS_PORT_POSITION                            0x3
#define _PWMIN0PPS_PORT_SIZE                                0x3
#define _PWMIN0PPS_PORT_LENGTH                              0x3
#define _PWMIN0PPS_PORT_MASK                                0x38
#define _PWMIN0PPS_PWMIN0PPS_POSN                           0x0
#define _PWMIN0PPS_PWMIN0PPS_POSITION                       0x0
#define _PWMIN0PPS_PWMIN0PPS_SIZE                           0x6
#define _PWMIN0PPS_PWMIN0PPS_LENGTH                         0x6
#define _PWMIN0PPS_PWMIN0PPS_MASK                           0x3F
#define _PWMIN0PPS_PWMIN0PPS0_POSN                          0x0
#define _PWMIN0PPS_PWMIN0PPS0_POSITION                      0x0
#define _PWMIN0PPS_PWMIN0PPS0_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS0_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS0_MASK                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_POSN                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_POSITION                      0x1
#define _PWMIN0PPS_PWMIN0PPS1_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS1_MASK                          0x2
#define _PWMIN0PPS_PWMIN0PPS2_POSN                          0x2
#define _PWMIN0PPS_PWMIN0PPS2_POSITION                      0x2
#define _PWMIN0PPS_PWMIN0PPS2_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS2_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS2_MASK                          0x4
#define _PWMIN0PPS_PWMIN0PPS3_POSN                          0x3
#define _PWMIN0PPS_PWMIN0PPS3_POSITION                      0x3
#define _PWMIN0PPS_PWMIN0PPS3_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS3_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS3_MASK                          0x8
#define _PWMIN0PPS_PWMIN0PPS4_POSN                          0x4
#define _PWMIN0PPS_PWMIN0PPS4_POSITION                      0x4
#define _PWMIN0PPS_PWMIN0PPS4_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS4_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS4_MASK                          0x10
#define _PWMIN0PPS_PWMIN0PPS5_POSN                          0x5
#define _PWMIN0PPS_PWMIN0PPS5_POSITION                      0x5
#define _PWMIN0PPS_PWMIN0PPS5_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS5_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS5_MASK                          0x20

// Register: PWMIN1PPS
#define PWMIN1PPS PWMIN1PPS
extern volatile unsigned char           PWMIN1PPS           __at(0x258);
#ifndef _LIB_BUILD
asm("PWMIN1PPS equ 0258h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned PWMIN1PPS              :6;
    };
    struct {
        unsigned PWMIN1PPS0             :1;
        unsigned PWMIN1PPS1             :1;
        unsigned PWMIN1PPS2             :1;
        unsigned PWMIN1PPS3             :1;
        unsigned PWMIN1PPS4             :1;
        unsigned PWMIN1PPS5             :1;
    };
} PWMIN1PPSbits_t;
extern volatile PWMIN1PPSbits_t PWMIN1PPSbits __at(0x258);
// bitfield macros
#define _PWMIN1PPS_PIN_POSN                                 0x0
#define _PWMIN1PPS_PIN_POSITION                             0x0
#define _PWMIN1PPS_PIN_SIZE                                 0x3
#define _PWMIN1PPS_PIN_LENGTH                               0x3
#define _PWMIN1PPS_PIN_MASK                                 0x7
#define _PWMIN1PPS_PORT_POSN                                0x3
#define _PWMIN1PPS_PORT_POSITION                            0x3
#define _PWMIN1PPS_PORT_SIZE                                0x3
#define _PWMIN1PPS_PORT_LENGTH                              0x3
#define _PWMIN1PPS_PORT_MASK                                0x38
#define _PWMIN1PPS_PWMIN1PPS_POSN                           0x0
#define _PWMIN1PPS_PWMIN1PPS_POSITION                       0x0
#define _PWMIN1PPS_PWMIN1PPS_SIZE                           0x6
#define _PWMIN1PPS_PWMIN1PPS_LENGTH                         0x6
#define _PWMIN1PPS_PWMIN1PPS_MASK                           0x3F
#define _PWMIN1PPS_PWMIN1PPS0_POSN                          0x0
#define _PWMIN1PPS_PWMIN1PPS0_POSITION                      0x0
#define _PWMIN1PPS_PWMIN1PPS0_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS0_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS0_MASK                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_POSN                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_POSITION                      0x1
#define _PWMIN1PPS_PWMIN1PPS1_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS1_MASK                          0x2
#define _PWMIN1PPS_PWMIN1PPS2_POSN                          0x2
#define _PWMIN1PPS_PWMIN1PPS2_POSITION                      0x2
#define _PWMIN1PPS_PWMIN1PPS2_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS2_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS2_MASK                          0x4
#define _PWMIN1PPS_PWMIN1PPS3_POSN                          0x3
#define _PWMIN1PPS_PWMIN1PPS3_POSITION                      0x3
#define _PWMIN1PPS_PWMIN1PPS3_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS3_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS3_MASK                          0x8
#define _PWMIN1PPS_PWMIN1PPS4_POSN                          0x4
#define _PWMIN1PPS_PWMIN1PPS4_POSITION                      0x4
#define _PWMIN1PPS_PWMIN1PPS4_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS4_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS4_MASK                          0x10
#define _PWMIN1PPS_PWMIN1PPS5_POSN                          0x5
#define _PWMIN1PPS_PWMIN1PPS5_POSITION                      0x5
#define _PWMIN1PPS_PWMIN1PPS5_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS5_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS5_MASK                          0x20

// Register: SMT1WINPPS
#define SMT1WINPPS SMT1WINPPS
extern volatile unsigned char           SMT1WINPPS          __at(0x259);
#ifndef _LIB_BUILD
asm("SMT1WINPPS equ 0259h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned SMT1WINPPS             :6;
    };
    struct {
        unsigned SMT1WINPPS0            :1;
        unsigned SMT1WINPPS1            :1;
        unsigned SMT1WINPPS2            :1;
        unsigned SMT1WINPPS3            :1;
        unsigned SMT1WINPPS4            :1;
        unsigned SMT1WINPPS5            :1;
    };
} SMT1WINPPSbits_t;
extern volatile SMT1WINPPSbits_t SMT1WINPPSbits __at(0x259);
// bitfield macros
#define _SMT1WINPPS_PIN_POSN                                0x0
#define _SMT1WINPPS_PIN_POSITION                            0x0
#define _SMT1WINPPS_PIN_SIZE                                0x3
#define _SMT1WINPPS_PIN_LENGTH                              0x3
#define _SMT1WINPPS_PIN_MASK                                0x7
#define _SMT1WINPPS_PORT_POSN                               0x3
#define _SMT1WINPPS_PORT_POSITION                           0x3
#define _SMT1WINPPS_PORT_SIZE                               0x3
#define _SMT1WINPPS_PORT_LENGTH                             0x3
#define _SMT1WINPPS_PORT_MASK                               0x38
#define _SMT1WINPPS_SMT1WINPPS_POSN                         0x0
#define _SMT1WINPPS_SMT1WINPPS_POSITION                     0x0
#define _SMT1WINPPS_SMT1WINPPS_SIZE                         0x6
#define _SMT1WINPPS_SMT1WINPPS_LENGTH                       0x6
#define _SMT1WINPPS_SMT1WINPPS_MASK                         0x3F
#define _SMT1WINPPS_SMT1WINPPS0_POSN                        0x0
#define _SMT1WINPPS_SMT1WINPPS0_POSITION                    0x0
#define _SMT1WINPPS_SMT1WINPPS0_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS0_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS0_MASK                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_POSN                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_POSITION                    0x1
#define _SMT1WINPPS_SMT1WINPPS1_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS1_MASK                        0x2
#define _SMT1WINPPS_SMT1WINPPS2_POSN                        0x2
#define _SMT1WINPPS_SMT1WINPPS2_POSITION                    0x2
#define _SMT1WINPPS_SMT1WINPPS2_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS2_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS2_MASK                        0x4
#define _SMT1WINPPS_SMT1WINPPS3_POSN                        0x3
#define _SMT1WINPPS_SMT1WINPPS3_POSITION                    0x3
#define _SMT1WINPPS_SMT1WINPPS3_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS3_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS3_MASK                        0x8
#define _SMT1WINPPS_SMT1WINPPS4_POSN                        0x4
#define _SMT1WINPPS_SMT1WINPPS4_POSITION                    0x4
#define _SMT1WINPPS_SMT1WINPPS4_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS4_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS4_MASK                        0x10
#define _SMT1WINPPS_SMT1WINPPS5_POSN                        0x5
#define _SMT1WINPPS_SMT1WINPPS5_POSITION                    0x5
#define _SMT1WINPPS_SMT1WINPPS5_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS5_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS5_MASK                        0x20

// Register: SMT1SIGPPS
#define SMT1SIGPPS SMT1SIGPPS
extern volatile unsigned char           SMT1SIGPPS          __at(0x25A);
#ifndef _LIB_BUILD
asm("SMT1SIGPPS equ 025Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned SMT1SIGPPS             :6;
    };
    struct {
        unsigned SMT1SIGPPS0            :1;
        unsigned SMT1SIGPPS1            :1;
        unsigned SMT1SIGPPS2            :1;
        unsigned SMT1SIGPPS3            :1;
        unsigned SMT1SIGPPS4            :1;
        unsigned SMT1SIGPPS5            :1;
    };
} SMT1SIGPPSbits_t;
extern volatile SMT1SIGPPSbits_t SMT1SIGPPSbits __at(0x25A);
// bitfield macros
#define _SMT1SIGPPS_PIN_POSN                                0x0
#define _SMT1SIGPPS_PIN_POSITION                            0x0
#define _SMT1SIGPPS_PIN_SIZE                                0x3
#define _SMT1SIGPPS_PIN_LENGTH                              0x3
#define _SMT1SIGPPS_PIN_MASK                                0x7
#define _SMT1SIGPPS_PORT_POSN                               0x3
#define _SMT1SIGPPS_PORT_POSITION                           0x3
#define _SMT1SIGPPS_PORT_SIZE                               0x3
#define _SMT1SIGPPS_PORT_LENGTH                             0x3
#define _SMT1SIGPPS_PORT_MASK                               0x38
#define _SMT1SIGPPS_SMT1SIGPPS_POSN                         0x0
#define _SMT1SIGPPS_SMT1SIGPPS_POSITION                     0x0
#define _SMT1SIGPPS_SMT1SIGPPS_SIZE                         0x6
#define _SMT1SIGPPS_SMT1SIGPPS_LENGTH                       0x6
#define _SMT1SIGPPS_SMT1SIGPPS_MASK                         0x3F
#define _SMT1SIGPPS_SMT1SIGPPS0_POSN                        0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_POSITION                    0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_MASK                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSN                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSITION                    0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_MASK                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSN                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSITION                    0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_MASK                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS3_POSN                        0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_POSITION                    0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_MASK                        0x8
#define _SMT1SIGPPS_SMT1SIGPPS4_POSN                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_POSITION                    0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_MASK                        0x10
#define _SMT1SIGPPS_SMT1SIGPPS5_POSN                        0x5
#define _SMT1SIGPPS_SMT1SIGPPS5_POSITION                    0x5
#define _SMT1SIGPPS_SMT1SIGPPS5_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS5_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS5_MASK                        0x20

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0x25B);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 025Bh");
#endif
// aliases
extern volatile unsigned char           CWG1INPPS           __at(0x25B);
#ifndef _LIB_BUILD
asm("CWG1INPPS equ 025Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0x25B);
// bitfield macros
#define _CWG1PPS_PIN_POSN                                   0x0
#define _CWG1PPS_PIN_POSITION                               0x0
#define _CWG1PPS_PIN_SIZE                                   0x3
#define _CWG1PPS_PIN_LENGTH                                 0x3
#define _CWG1PPS_PIN_MASK                                   0x7
#define _CWG1PPS_PORT_POSN                                  0x3
#define _CWG1PPS_PORT_POSITION                              0x3
#define _CWG1PPS_PORT_SIZE                                  0x2
#define _CWG1PPS_PORT_LENGTH                                0x2
#define _CWG1PPS_PORT_MASK                                  0x18
#define _CWG1PPS_CWGINPPS0_POSN                             0x0
#define _CWG1PPS_CWGINPPS0_POSITION                         0x0
#define _CWG1PPS_CWGINPPS0_SIZE                             0x1
#define _CWG1PPS_CWGINPPS0_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS0_MASK                             0x1
#define _CWG1PPS_CWGINPPS1_POSN                             0x1
#define _CWG1PPS_CWGINPPS1_POSITION                         0x1
#define _CWG1PPS_CWGINPPS1_SIZE                             0x1
#define _CWG1PPS_CWGINPPS1_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS1_MASK                             0x2
#define _CWG1PPS_CWGINPPS2_POSN                             0x2
#define _CWG1PPS_CWGINPPS2_POSITION                         0x2
#define _CWG1PPS_CWGINPPS2_SIZE                             0x1
#define _CWG1PPS_CWGINPPS2_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS2_MASK                             0x4
#define _CWG1PPS_CWGINPPS3_POSN                             0x3
#define _CWG1PPS_CWGINPPS3_POSITION                         0x3
#define _CWG1PPS_CWGINPPS3_SIZE                             0x1
#define _CWG1PPS_CWGINPPS3_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS3_MASK                             0x8
#define _CWG1PPS_CWGINPPS4_POSN                             0x4
#define _CWG1PPS_CWGINPPS4_POSITION                         0x4
#define _CWG1PPS_CWGINPPS4_SIZE                             0x1
#define _CWG1PPS_CWGINPPS4_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS4_MASK                             0x10
#define _CWG1PPS_CWG1INPPS_POSN                             0x0
#define _CWG1PPS_CWG1INPPS_POSITION                         0x0
#define _CWG1PPS_CWG1INPPS_SIZE                             0x5
#define _CWG1PPS_CWG1INPPS_LENGTH                           0x5
#define _CWG1PPS_CWG1INPPS_MASK                             0x1F
#define _CWG1PPS_CWG1INPPS0_POSN                            0x0
#define _CWG1PPS_CWG1INPPS0_POSITION                        0x0
#define _CWG1PPS_CWG1INPPS0_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS0_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS0_MASK                            0x1
#define _CWG1PPS_CWG1INPPS1_POSN                            0x1
#define _CWG1PPS_CWG1INPPS1_POSITION                        0x1
#define _CWG1PPS_CWG1INPPS1_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS1_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS1_MASK                            0x2
#define _CWG1PPS_CWG1INPPS2_POSN                            0x2
#define _CWG1PPS_CWG1INPPS2_POSITION                        0x2
#define _CWG1PPS_CWG1INPPS2_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS2_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS2_MASK                            0x4
#define _CWG1PPS_CWG1INPPS3_POSN                            0x3
#define _CWG1PPS_CWG1INPPS3_POSITION                        0x3
#define _CWG1PPS_CWG1INPPS3_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS3_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS3_MASK                            0x8
#define _CWG1PPS_CWG1INPPS4_POSN                            0x4
#define _CWG1PPS_CWG1INPPS4_POSITION                        0x4
#define _CWG1PPS_CWG1INPPS4_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS4_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS4_MASK                            0x10
#define _CWG1PPS_CWGINPPS_POSN                              0x0
#define _CWG1PPS_CWGINPPS_POSITION                          0x0
#define _CWG1PPS_CWGINPPS_SIZE                              0x5
#define _CWG1PPS_CWGINPPS_LENGTH                            0x5
#define _CWG1PPS_CWGINPPS_MASK                              0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG1INPPSbits_t;
extern volatile CWG1INPPSbits_t CWG1INPPSbits __at(0x25B);
// bitfield macros
#define _CWG1INPPS_PIN_POSN                                 0x0
#define _CWG1INPPS_PIN_POSITION                             0x0
#define _CWG1INPPS_PIN_SIZE                                 0x3
#define _CWG1INPPS_PIN_LENGTH                               0x3
#define _CWG1INPPS_PIN_MASK                                 0x7
#define _CWG1INPPS_PORT_POSN                                0x3
#define _CWG1INPPS_PORT_POSITION                            0x3
#define _CWG1INPPS_PORT_SIZE                                0x2
#define _CWG1INPPS_PORT_LENGTH                              0x2
#define _CWG1INPPS_PORT_MASK                                0x18
#define _CWG1INPPS_CWGINPPS0_POSN                           0x0
#define _CWG1INPPS_CWGINPPS0_POSITION                       0x0
#define _CWG1INPPS_CWGINPPS0_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS0_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS0_MASK                           0x1
#define _CWG1INPPS_CWGINPPS1_POSN                           0x1
#define _CWG1INPPS_CWGINPPS1_POSITION                       0x1
#define _CWG1INPPS_CWGINPPS1_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS1_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS1_MASK                           0x2
#define _CWG1INPPS_CWGINPPS2_POSN                           0x2
#define _CWG1INPPS_CWGINPPS2_POSITION                       0x2
#define _CWG1INPPS_CWGINPPS2_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS2_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS2_MASK                           0x4
#define _CWG1INPPS_CWGINPPS3_POSN                           0x3
#define _CWG1INPPS_CWGINPPS3_POSITION                       0x3
#define _CWG1INPPS_CWGINPPS3_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS3_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS3_MASK                           0x8
#define _CWG1INPPS_CWGINPPS4_POSN                           0x4
#define _CWG1INPPS_CWGINPPS4_POSITION                       0x4
#define _CWG1INPPS_CWGINPPS4_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS4_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS4_MASK                           0x10
#define _CWG1INPPS_CWG1INPPS_POSN                           0x0
#define _CWG1INPPS_CWG1INPPS_POSITION                       0x0
#define _CWG1INPPS_CWG1INPPS_SIZE                           0x5
#define _CWG1INPPS_CWG1INPPS_LENGTH                         0x5
#define _CWG1INPPS_CWG1INPPS_MASK                           0x1F
#define _CWG1INPPS_CWG1INPPS0_POSN                          0x0
#define _CWG1INPPS_CWG1INPPS0_POSITION                      0x0
#define _CWG1INPPS_CWG1INPPS0_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS0_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS0_MASK                          0x1
#define _CWG1INPPS_CWG1INPPS1_POSN                          0x1
#define _CWG1INPPS_CWG1INPPS1_POSITION                      0x1
#define _CWG1INPPS_CWG1INPPS1_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS1_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS1_MASK                          0x2
#define _CWG1INPPS_CWG1INPPS2_POSN                          0x2
#define _CWG1INPPS_CWG1INPPS2_POSITION                      0x2
#define _CWG1INPPS_CWG1INPPS2_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS2_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS2_MASK                          0x4
#define _CWG1INPPS_CWG1INPPS3_POSN                          0x3
#define _CWG1INPPS_CWG1INPPS3_POSITION                      0x3
#define _CWG1INPPS_CWG1INPPS3_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS3_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS3_MASK                          0x8
#define _CWG1INPPS_CWG1INPPS4_POSN                          0x4
#define _CWG1INPPS_CWG1INPPS4_POSITION                      0x4
#define _CWG1INPPS_CWG1INPPS4_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS4_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS4_MASK                          0x10
#define _CWG1INPPS_CWGINPPS_POSN                            0x0
#define _CWG1INPPS_CWGINPPS_POSITION                        0x0
#define _CWG1INPPS_CWGINPPS_SIZE                            0x5
#define _CWG1INPPS_CWGINPPS_LENGTH                          0x5
#define _CWG1INPPS_CWGINPPS_MASK                            0x1F

// Register: CWG2PPS
#define CWG2PPS CWG2PPS
extern volatile unsigned char           CWG2PPS             __at(0x25C);
#ifndef _LIB_BUILD
asm("CWG2PPS equ 025Ch");
#endif
// aliases
extern volatile unsigned char           CWG2INPPS           __at(0x25C);
#ifndef _LIB_BUILD
asm("CWG2INPPS equ 025Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG2INPPS              :5;
    };
    struct {
        unsigned CWG2INPPS0             :1;
        unsigned CWG2INPPS1             :1;
        unsigned CWG2INPPS2             :1;
        unsigned CWG2INPPS3             :1;
        unsigned CWG2INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG2PPSbits_t;
extern volatile CWG2PPSbits_t CWG2PPSbits __at(0x25C);
// bitfield macros
#define _CWG2PPS_PIN_POSN                                   0x0
#define _CWG2PPS_PIN_POSITION                               0x0
#define _CWG2PPS_PIN_SIZE                                   0x3
#define _CWG2PPS_PIN_LENGTH                                 0x3
#define _CWG2PPS_PIN_MASK                                   0x7
#define _CWG2PPS_PORT_POSN                                  0x3
#define _CWG2PPS_PORT_POSITION                              0x3
#define _CWG2PPS_PORT_SIZE                                  0x2
#define _CWG2PPS_PORT_LENGTH                                0x2
#define _CWG2PPS_PORT_MASK                                  0x18
#define _CWG2PPS_CWGINPPS0_POSN                             0x0
#define _CWG2PPS_CWGINPPS0_POSITION                         0x0
#define _CWG2PPS_CWGINPPS0_SIZE                             0x1
#define _CWG2PPS_CWGINPPS0_LENGTH                           0x1
#define _CWG2PPS_CWGINPPS0_MASK                             0x1
#define _CWG2PPS_CWGINPPS1_POSN                             0x1
#define _CWG2PPS_CWGINPPS1_POSITION                         0x1
#define _CWG2PPS_CWGINPPS1_SIZE                             0x1
#define _CWG2PPS_CWGINPPS1_LENGTH                           0x1
#define _CWG2PPS_CWGINPPS1_MASK                             0x2
#define _CWG2PPS_CWGINPPS2_POSN                             0x2
#define _CWG2PPS_CWGINPPS2_POSITION                         0x2
#define _CWG2PPS_CWGINPPS2_SIZE                             0x1
#define _CWG2PPS_CWGINPPS2_LENGTH                           0x1
#define _CWG2PPS_CWGINPPS2_MASK                             0x4
#define _CWG2PPS_CWGINPPS3_POSN                             0x3
#define _CWG2PPS_CWGINPPS3_POSITION                         0x3
#define _CWG2PPS_CWGINPPS3_SIZE                             0x1
#define _CWG2PPS_CWGINPPS3_LENGTH                           0x1
#define _CWG2PPS_CWGINPPS3_MASK                             0x8
#define _CWG2PPS_CWGINPPS4_POSN                             0x4
#define _CWG2PPS_CWGINPPS4_POSITION                         0x4
#define _CWG2PPS_CWGINPPS4_SIZE                             0x1
#define _CWG2PPS_CWGINPPS4_LENGTH                           0x1
#define _CWG2PPS_CWGINPPS4_MASK                             0x10
#define _CWG2PPS_CWG2INPPS_POSN                             0x0
#define _CWG2PPS_CWG2INPPS_POSITION                         0x0
#define _CWG2PPS_CWG2INPPS_SIZE                             0x5
#define _CWG2PPS_CWG2INPPS_LENGTH                           0x5
#define _CWG2PPS_CWG2INPPS_MASK                             0x1F
#define _CWG2PPS_CWG2INPPS0_POSN                            0x0
#define _CWG2PPS_CWG2INPPS0_POSITION                        0x0
#define _CWG2PPS_CWG2INPPS0_SIZE                            0x1
#define _CWG2PPS_CWG2INPPS0_LENGTH                          0x1
#define _CWG2PPS_CWG2INPPS0_MASK                            0x1
#define _CWG2PPS_CWG2INPPS1_POSN                            0x1
#define _CWG2PPS_CWG2INPPS1_POSITION                        0x1
#define _CWG2PPS_CWG2INPPS1_SIZE                            0x1
#define _CWG2PPS_CWG2INPPS1_LENGTH                          0x1
#define _CWG2PPS_CWG2INPPS1_MASK                            0x2
#define _CWG2PPS_CWG2INPPS2_POSN                            0x2
#define _CWG2PPS_CWG2INPPS2_POSITION                        0x2
#define _CWG2PPS_CWG2INPPS2_SIZE                            0x1
#define _CWG2PPS_CWG2INPPS2_LENGTH                          0x1
#define _CWG2PPS_CWG2INPPS2_MASK                            0x4
#define _CWG2PPS_CWG2INPPS3_POSN                            0x3
#define _CWG2PPS_CWG2INPPS3_POSITION                        0x3
#define _CWG2PPS_CWG2INPPS3_SIZE                            0x1
#define _CWG2PPS_CWG2INPPS3_LENGTH                          0x1
#define _CWG2PPS_CWG2INPPS3_MASK                            0x8
#define _CWG2PPS_CWG2INPPS4_POSN                            0x4
#define _CWG2PPS_CWG2INPPS4_POSITION                        0x4
#define _CWG2PPS_CWG2INPPS4_SIZE                            0x1
#define _CWG2PPS_CWG2INPPS4_LENGTH                          0x1
#define _CWG2PPS_CWG2INPPS4_MASK                            0x10
#define _CWG2PPS_CWGINPPS_POSN                              0x0
#define _CWG2PPS_CWGINPPS_POSITION                          0x0
#define _CWG2PPS_CWGINPPS_SIZE                              0x5
#define _CWG2PPS_CWGINPPS_LENGTH                            0x5
#define _CWG2PPS_CWGINPPS_MASK                              0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG2INPPS              :5;
    };
    struct {
        unsigned CWG2INPPS0             :1;
        unsigned CWG2INPPS1             :1;
        unsigned CWG2INPPS2             :1;
        unsigned CWG2INPPS3             :1;
        unsigned CWG2INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG2INPPSbits_t;
extern volatile CWG2INPPSbits_t CWG2INPPSbits __at(0x25C);
// bitfield macros
#define _CWG2INPPS_PIN_POSN                                 0x0
#define _CWG2INPPS_PIN_POSITION                             0x0
#define _CWG2INPPS_PIN_SIZE                                 0x3
#define _CWG2INPPS_PIN_LENGTH                               0x3
#define _CWG2INPPS_PIN_MASK                                 0x7
#define _CWG2INPPS_PORT_POSN                                0x3
#define _CWG2INPPS_PORT_POSITION                            0x3
#define _CWG2INPPS_PORT_SIZE                                0x2
#define _CWG2INPPS_PORT_LENGTH                              0x2
#define _CWG2INPPS_PORT_MASK                                0x18
#define _CWG2INPPS_CWGINPPS0_POSN                           0x0
#define _CWG2INPPS_CWGINPPS0_POSITION                       0x0
#define _CWG2INPPS_CWGINPPS0_SIZE                           0x1
#define _CWG2INPPS_CWGINPPS0_LENGTH                         0x1
#define _CWG2INPPS_CWGINPPS0_MASK                           0x1
#define _CWG2INPPS_CWGINPPS1_POSN                           0x1
#define _CWG2INPPS_CWGINPPS1_POSITION                       0x1
#define _CWG2INPPS_CWGINPPS1_SIZE                           0x1
#define _CWG2INPPS_CWGINPPS1_LENGTH                         0x1
#define _CWG2INPPS_CWGINPPS1_MASK                           0x2
#define _CWG2INPPS_CWGINPPS2_POSN                           0x2
#define _CWG2INPPS_CWGINPPS2_POSITION                       0x2
#define _CWG2INPPS_CWGINPPS2_SIZE                           0x1
#define _CWG2INPPS_CWGINPPS2_LENGTH                         0x1
#define _CWG2INPPS_CWGINPPS2_MASK                           0x4
#define _CWG2INPPS_CWGINPPS3_POSN                           0x3
#define _CWG2INPPS_CWGINPPS3_POSITION                       0x3
#define _CWG2INPPS_CWGINPPS3_SIZE                           0x1
#define _CWG2INPPS_CWGINPPS3_LENGTH                         0x1
#define _CWG2INPPS_CWGINPPS3_MASK                           0x8
#define _CWG2INPPS_CWGINPPS4_POSN                           0x4
#define _CWG2INPPS_CWGINPPS4_POSITION                       0x4
#define _CWG2INPPS_CWGINPPS4_SIZE                           0x1
#define _CWG2INPPS_CWGINPPS4_LENGTH                         0x1
#define _CWG2INPPS_CWGINPPS4_MASK                           0x10
#define _CWG2INPPS_CWG2INPPS_POSN                           0x0
#define _CWG2INPPS_CWG2INPPS_POSITION                       0x0
#define _CWG2INPPS_CWG2INPPS_SIZE                           0x5
#define _CWG2INPPS_CWG2INPPS_LENGTH                         0x5
#define _CWG2INPPS_CWG2INPPS_MASK                           0x1F
#define _CWG2INPPS_CWG2INPPS0_POSN                          0x0
#define _CWG2INPPS_CWG2INPPS0_POSITION                      0x0
#define _CWG2INPPS_CWG2INPPS0_SIZE                          0x1
#define _CWG2INPPS_CWG2INPPS0_LENGTH                        0x1
#define _CWG2INPPS_CWG2INPPS0_MASK                          0x1
#define _CWG2INPPS_CWG2INPPS1_POSN                          0x1
#define _CWG2INPPS_CWG2INPPS1_POSITION                      0x1
#define _CWG2INPPS_CWG2INPPS1_SIZE                          0x1
#define _CWG2INPPS_CWG2INPPS1_LENGTH                        0x1
#define _CWG2INPPS_CWG2INPPS1_MASK                          0x2
#define _CWG2INPPS_CWG2INPPS2_POSN                          0x2
#define _CWG2INPPS_CWG2INPPS2_POSITION                      0x2
#define _CWG2INPPS_CWG2INPPS2_SIZE                          0x1
#define _CWG2INPPS_CWG2INPPS2_LENGTH                        0x1
#define _CWG2INPPS_CWG2INPPS2_MASK                          0x4
#define _CWG2INPPS_CWG2INPPS3_POSN                          0x3
#define _CWG2INPPS_CWG2INPPS3_POSITION                      0x3
#define _CWG2INPPS_CWG2INPPS3_SIZE                          0x1
#define _CWG2INPPS_CWG2INPPS3_LENGTH                        0x1
#define _CWG2INPPS_CWG2INPPS3_MASK                          0x8
#define _CWG2INPPS_CWG2INPPS4_POSN                          0x4
#define _CWG2INPPS_CWG2INPPS4_POSITION                      0x4
#define _CWG2INPPS_CWG2INPPS4_SIZE                          0x1
#define _CWG2INPPS_CWG2INPPS4_LENGTH                        0x1
#define _CWG2INPPS_CWG2INPPS4_MASK                          0x10
#define _CWG2INPPS_CWGINPPS_POSN                            0x0
#define _CWG2INPPS_CWGINPPS_POSITION                        0x0
#define _CWG2INPPS_CWGINPPS_SIZE                            0x5
#define _CWG2INPPS_CWGINPPS_LENGTH                          0x5
#define _CWG2INPPS_CWGINPPS_MASK                            0x1F

// Register: CWG3PPS
#define CWG3PPS CWG3PPS
extern volatile unsigned char           CWG3PPS             __at(0x25D);
#ifndef _LIB_BUILD
asm("CWG3PPS equ 025Dh");
#endif
// aliases
extern volatile unsigned char           CWG3INPPS           __at(0x25D);
#ifndef _LIB_BUILD
asm("CWG3INPPS equ 025Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG3INPPS              :5;
    };
    struct {
        unsigned CWG3INPPS0             :1;
        unsigned CWG3INPPS1             :1;
        unsigned CWG3INPPS2             :1;
        unsigned CWG3INPPS3             :1;
        unsigned CWG3INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG3PPSbits_t;
extern volatile CWG3PPSbits_t CWG3PPSbits __at(0x25D);
// bitfield macros
#define _CWG3PPS_PIN_POSN                                   0x0
#define _CWG3PPS_PIN_POSITION                               0x0
#define _CWG3PPS_PIN_SIZE                                   0x3
#define _CWG3PPS_PIN_LENGTH                                 0x3
#define _CWG3PPS_PIN_MASK                                   0x7
#define _CWG3PPS_PORT_POSN                                  0x3
#define _CWG3PPS_PORT_POSITION                              0x3
#define _CWG3PPS_PORT_SIZE                                  0x2
#define _CWG3PPS_PORT_LENGTH                                0x2
#define _CWG3PPS_PORT_MASK                                  0x18
#define _CWG3PPS_CWGINPPS0_POSN                             0x0
#define _CWG3PPS_CWGINPPS0_POSITION                         0x0
#define _CWG3PPS_CWGINPPS0_SIZE                             0x1
#define _CWG3PPS_CWGINPPS0_LENGTH                           0x1
#define _CWG3PPS_CWGINPPS0_MASK                             0x1
#define _CWG3PPS_CWGINPPS1_POSN                             0x1
#define _CWG3PPS_CWGINPPS1_POSITION                         0x1
#define _CWG3PPS_CWGINPPS1_SIZE                             0x1
#define _CWG3PPS_CWGINPPS1_LENGTH                           0x1
#define _CWG3PPS_CWGINPPS1_MASK                             0x2
#define _CWG3PPS_CWGINPPS2_POSN                             0x2
#define _CWG3PPS_CWGINPPS2_POSITION                         0x2
#define _CWG3PPS_CWGINPPS2_SIZE                             0x1
#define _CWG3PPS_CWGINPPS2_LENGTH                           0x1
#define _CWG3PPS_CWGINPPS2_MASK                             0x4
#define _CWG3PPS_CWGINPPS3_POSN                             0x3
#define _CWG3PPS_CWGINPPS3_POSITION                         0x3
#define _CWG3PPS_CWGINPPS3_SIZE                             0x1
#define _CWG3PPS_CWGINPPS3_LENGTH                           0x1
#define _CWG3PPS_CWGINPPS3_MASK                             0x8
#define _CWG3PPS_CWGINPPS4_POSN                             0x4
#define _CWG3PPS_CWGINPPS4_POSITION                         0x4
#define _CWG3PPS_CWGINPPS4_SIZE                             0x1
#define _CWG3PPS_CWGINPPS4_LENGTH                           0x1
#define _CWG3PPS_CWGINPPS4_MASK                             0x10
#define _CWG3PPS_CWG3INPPS_POSN                             0x0
#define _CWG3PPS_CWG3INPPS_POSITION                         0x0
#define _CWG3PPS_CWG3INPPS_SIZE                             0x5
#define _CWG3PPS_CWG3INPPS_LENGTH                           0x5
#define _CWG3PPS_CWG3INPPS_MASK                             0x1F
#define _CWG3PPS_CWG3INPPS0_POSN                            0x0
#define _CWG3PPS_CWG3INPPS0_POSITION                        0x0
#define _CWG3PPS_CWG3INPPS0_SIZE                            0x1
#define _CWG3PPS_CWG3INPPS0_LENGTH                          0x1
#define _CWG3PPS_CWG3INPPS0_MASK                            0x1
#define _CWG3PPS_CWG3INPPS1_POSN                            0x1
#define _CWG3PPS_CWG3INPPS1_POSITION                        0x1
#define _CWG3PPS_CWG3INPPS1_SIZE                            0x1
#define _CWG3PPS_CWG3INPPS1_LENGTH                          0x1
#define _CWG3PPS_CWG3INPPS1_MASK                            0x2
#define _CWG3PPS_CWG3INPPS2_POSN                            0x2
#define _CWG3PPS_CWG3INPPS2_POSITION                        0x2
#define _CWG3PPS_CWG3INPPS2_SIZE                            0x1
#define _CWG3PPS_CWG3INPPS2_LENGTH                          0x1
#define _CWG3PPS_CWG3INPPS2_MASK                            0x4
#define _CWG3PPS_CWG3INPPS3_POSN                            0x3
#define _CWG3PPS_CWG3INPPS3_POSITION                        0x3
#define _CWG3PPS_CWG3INPPS3_SIZE                            0x1
#define _CWG3PPS_CWG3INPPS3_LENGTH                          0x1
#define _CWG3PPS_CWG3INPPS3_MASK                            0x8
#define _CWG3PPS_CWG3INPPS4_POSN                            0x4
#define _CWG3PPS_CWG3INPPS4_POSITION                        0x4
#define _CWG3PPS_CWG3INPPS4_SIZE                            0x1
#define _CWG3PPS_CWG3INPPS4_LENGTH                          0x1
#define _CWG3PPS_CWG3INPPS4_MASK                            0x10
#define _CWG3PPS_CWGINPPS_POSN                              0x0
#define _CWG3PPS_CWGINPPS_POSITION                          0x0
#define _CWG3PPS_CWGINPPS_SIZE                              0x5
#define _CWG3PPS_CWGINPPS_LENGTH                            0x5
#define _CWG3PPS_CWGINPPS_MASK                              0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG3INPPS              :5;
    };
    struct {
        unsigned CWG3INPPS0             :1;
        unsigned CWG3INPPS1             :1;
        unsigned CWG3INPPS2             :1;
        unsigned CWG3INPPS3             :1;
        unsigned CWG3INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG3INPPSbits_t;
extern volatile CWG3INPPSbits_t CWG3INPPSbits __at(0x25D);
// bitfield macros
#define _CWG3INPPS_PIN_POSN                                 0x0
#define _CWG3INPPS_PIN_POSITION                             0x0
#define _CWG3INPPS_PIN_SIZE                                 0x3
#define _CWG3INPPS_PIN_LENGTH                               0x3
#define _CWG3INPPS_PIN_MASK                                 0x7
#define _CWG3INPPS_PORT_POSN                                0x3
#define _CWG3INPPS_PORT_POSITION                            0x3
#define _CWG3INPPS_PORT_SIZE                                0x2
#define _CWG3INPPS_PORT_LENGTH                              0x2
#define _CWG3INPPS_PORT_MASK                                0x18
#define _CWG3INPPS_CWGINPPS0_POSN                           0x0
#define _CWG3INPPS_CWGINPPS0_POSITION                       0x0
#define _CWG3INPPS_CWGINPPS0_SIZE                           0x1
#define _CWG3INPPS_CWGINPPS0_LENGTH                         0x1
#define _CWG3INPPS_CWGINPPS0_MASK                           0x1
#define _CWG3INPPS_CWGINPPS1_POSN                           0x1
#define _CWG3INPPS_CWGINPPS1_POSITION                       0x1
#define _CWG3INPPS_CWGINPPS1_SIZE                           0x1
#define _CWG3INPPS_CWGINPPS1_LENGTH                         0x1
#define _CWG3INPPS_CWGINPPS1_MASK                           0x2
#define _CWG3INPPS_CWGINPPS2_POSN                           0x2
#define _CWG3INPPS_CWGINPPS2_POSITION                       0x2
#define _CWG3INPPS_CWGINPPS2_SIZE                           0x1
#define _CWG3INPPS_CWGINPPS2_LENGTH                         0x1
#define _CWG3INPPS_CWGINPPS2_MASK                           0x4
#define _CWG3INPPS_CWGINPPS3_POSN                           0x3
#define _CWG3INPPS_CWGINPPS3_POSITION                       0x3
#define _CWG3INPPS_CWGINPPS3_SIZE                           0x1
#define _CWG3INPPS_CWGINPPS3_LENGTH                         0x1
#define _CWG3INPPS_CWGINPPS3_MASK                           0x8
#define _CWG3INPPS_CWGINPPS4_POSN                           0x4
#define _CWG3INPPS_CWGINPPS4_POSITION                       0x4
#define _CWG3INPPS_CWGINPPS4_SIZE                           0x1
#define _CWG3INPPS_CWGINPPS4_LENGTH                         0x1
#define _CWG3INPPS_CWGINPPS4_MASK                           0x10
#define _CWG3INPPS_CWG3INPPS_POSN                           0x0
#define _CWG3INPPS_CWG3INPPS_POSITION                       0x0
#define _CWG3INPPS_CWG3INPPS_SIZE                           0x5
#define _CWG3INPPS_CWG3INPPS_LENGTH                         0x5
#define _CWG3INPPS_CWG3INPPS_MASK                           0x1F
#define _CWG3INPPS_CWG3INPPS0_POSN                          0x0
#define _CWG3INPPS_CWG3INPPS0_POSITION                      0x0
#define _CWG3INPPS_CWG3INPPS0_SIZE                          0x1
#define _CWG3INPPS_CWG3INPPS0_LENGTH                        0x1
#define _CWG3INPPS_CWG3INPPS0_MASK                          0x1
#define _CWG3INPPS_CWG3INPPS1_POSN                          0x1
#define _CWG3INPPS_CWG3INPPS1_POSITION                      0x1
#define _CWG3INPPS_CWG3INPPS1_SIZE                          0x1
#define _CWG3INPPS_CWG3INPPS1_LENGTH                        0x1
#define _CWG3INPPS_CWG3INPPS1_MASK                          0x2
#define _CWG3INPPS_CWG3INPPS2_POSN                          0x2
#define _CWG3INPPS_CWG3INPPS2_POSITION                      0x2
#define _CWG3INPPS_CWG3INPPS2_SIZE                          0x1
#define _CWG3INPPS_CWG3INPPS2_LENGTH                        0x1
#define _CWG3INPPS_CWG3INPPS2_MASK                          0x4
#define _CWG3INPPS_CWG3INPPS3_POSN                          0x3
#define _CWG3INPPS_CWG3INPPS3_POSITION                      0x3
#define _CWG3INPPS_CWG3INPPS3_SIZE                          0x1
#define _CWG3INPPS_CWG3INPPS3_LENGTH                        0x1
#define _CWG3INPPS_CWG3INPPS3_MASK                          0x8
#define _CWG3INPPS_CWG3INPPS4_POSN                          0x4
#define _CWG3INPPS_CWG3INPPS4_POSITION                      0x4
#define _CWG3INPPS_CWG3INPPS4_SIZE                          0x1
#define _CWG3INPPS_CWG3INPPS4_LENGTH                        0x1
#define _CWG3INPPS_CWG3INPPS4_MASK                          0x10
#define _CWG3INPPS_CWGINPPS_POSN                            0x0
#define _CWG3INPPS_CWGINPPS_POSITION                        0x0
#define _CWG3INPPS_CWGINPPS_SIZE                            0x5
#define _CWG3INPPS_CWGINPPS_LENGTH                          0x5
#define _CWG3INPPS_CWGINPPS_MASK                            0x1F

// Register: MD1CARLPPS
#define MD1CARLPPS MD1CARLPPS
extern volatile unsigned char           MD1CARLPPS          __at(0x25E);
#ifndef _LIB_BUILD
asm("MD1CARLPPS equ 025Eh");
#endif
// aliases
extern volatile unsigned char           MDCARLPPS           __at(0x25E);
#ifndef _LIB_BUILD
asm("MDCARLPPS equ 025Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARLPPS0             :1;
        unsigned MDCARLPPS1             :1;
        unsigned MDCARLPPS2             :1;
        unsigned MDCARLPPS3             :1;
        unsigned MDCARLPPS4             :1;
    };
    struct {
        unsigned MDCARLPPS              :5;
    };
} MD1CARLPPSbits_t;
extern volatile MD1CARLPPSbits_t MD1CARLPPSbits __at(0x25E);
// bitfield macros
#define _MD1CARLPPS_PIN_POSN                                0x0
#define _MD1CARLPPS_PIN_POSITION                            0x0
#define _MD1CARLPPS_PIN_SIZE                                0x3
#define _MD1CARLPPS_PIN_LENGTH                              0x3
#define _MD1CARLPPS_PIN_MASK                                0x7
#define _MD1CARLPPS_PORT_POSN                               0x3
#define _MD1CARLPPS_PORT_POSITION                           0x3
#define _MD1CARLPPS_PORT_SIZE                               0x2
#define _MD1CARLPPS_PORT_LENGTH                             0x2
#define _MD1CARLPPS_PORT_MASK                               0x18
#define _MD1CARLPPS_MDCARLPPS0_POSN                         0x0
#define _MD1CARLPPS_MDCARLPPS0_POSITION                     0x0
#define _MD1CARLPPS_MDCARLPPS0_SIZE                         0x1
#define _MD1CARLPPS_MDCARLPPS0_LENGTH                       0x1
#define _MD1CARLPPS_MDCARLPPS0_MASK                         0x1
#define _MD1CARLPPS_MDCARLPPS1_POSN                         0x1
#define _MD1CARLPPS_MDCARLPPS1_POSITION                     0x1
#define _MD1CARLPPS_MDCARLPPS1_SIZE                         0x1
#define _MD1CARLPPS_MDCARLPPS1_LENGTH                       0x1
#define _MD1CARLPPS_MDCARLPPS1_MASK                         0x2
#define _MD1CARLPPS_MDCARLPPS2_POSN                         0x2
#define _MD1CARLPPS_MDCARLPPS2_POSITION                     0x2
#define _MD1CARLPPS_MDCARLPPS2_SIZE                         0x1
#define _MD1CARLPPS_MDCARLPPS2_LENGTH                       0x1
#define _MD1CARLPPS_MDCARLPPS2_MASK                         0x4
#define _MD1CARLPPS_MDCARLPPS3_POSN                         0x3
#define _MD1CARLPPS_MDCARLPPS3_POSITION                     0x3
#define _MD1CARLPPS_MDCARLPPS3_SIZE                         0x1
#define _MD1CARLPPS_MDCARLPPS3_LENGTH                       0x1
#define _MD1CARLPPS_MDCARLPPS3_MASK                         0x8
#define _MD1CARLPPS_MDCARLPPS4_POSN                         0x4
#define _MD1CARLPPS_MDCARLPPS4_POSITION                     0x4
#define _MD1CARLPPS_MDCARLPPS4_SIZE                         0x1
#define _MD1CARLPPS_MDCARLPPS4_LENGTH                       0x1
#define _MD1CARLPPS_MDCARLPPS4_MASK                         0x10
#define _MD1CARLPPS_MDCARLPPS_POSN                          0x0
#define _MD1CARLPPS_MDCARLPPS_POSITION                      0x0
#define _MD1CARLPPS_MDCARLPPS_SIZE                          0x5
#define _MD1CARLPPS_MDCARLPPS_LENGTH                        0x5
#define _MD1CARLPPS_MDCARLPPS_MASK                          0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARLPPS0             :1;
        unsigned MDCARLPPS1             :1;
        unsigned MDCARLPPS2             :1;
        unsigned MDCARLPPS3             :1;
        unsigned MDCARLPPS4             :1;
    };
    struct {
        unsigned MDCARLPPS              :5;
    };
} MDCARLPPSbits_t;
extern volatile MDCARLPPSbits_t MDCARLPPSbits __at(0x25E);
// bitfield macros
#define _MDCARLPPS_PIN_POSN                                 0x0
#define _MDCARLPPS_PIN_POSITION                             0x0
#define _MDCARLPPS_PIN_SIZE                                 0x3
#define _MDCARLPPS_PIN_LENGTH                               0x3
#define _MDCARLPPS_PIN_MASK                                 0x7
#define _MDCARLPPS_PORT_POSN                                0x3
#define _MDCARLPPS_PORT_POSITION                            0x3
#define _MDCARLPPS_PORT_SIZE                                0x2
#define _MDCARLPPS_PORT_LENGTH                              0x2
#define _MDCARLPPS_PORT_MASK                                0x18
#define _MDCARLPPS_MDCARLPPS0_POSN                          0x0
#define _MDCARLPPS_MDCARLPPS0_POSITION                      0x0
#define _MDCARLPPS_MDCARLPPS0_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS0_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS0_MASK                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSN                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSITION                      0x1
#define _MDCARLPPS_MDCARLPPS1_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS1_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS1_MASK                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSN                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSITION                      0x2
#define _MDCARLPPS_MDCARLPPS2_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS2_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS2_MASK                          0x4
#define _MDCARLPPS_MDCARLPPS3_POSN                          0x3
#define _MDCARLPPS_MDCARLPPS3_POSITION                      0x3
#define _MDCARLPPS_MDCARLPPS3_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS3_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS3_MASK                          0x8
#define _MDCARLPPS_MDCARLPPS4_POSN                          0x4
#define _MDCARLPPS_MDCARLPPS4_POSITION                      0x4
#define _MDCARLPPS_MDCARLPPS4_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS4_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS4_MASK                          0x10
#define _MDCARLPPS_MDCARLPPS_POSN                           0x0
#define _MDCARLPPS_MDCARLPPS_POSITION                       0x0
#define _MDCARLPPS_MDCARLPPS_SIZE                           0x5
#define _MDCARLPPS_MDCARLPPS_LENGTH                         0x5
#define _MDCARLPPS_MDCARLPPS_MASK                           0x1F

// Register: MD1CARHPPS
#define MD1CARHPPS MD1CARHPPS
extern volatile unsigned char           MD1CARHPPS          __at(0x25F);
#ifndef _LIB_BUILD
asm("MD1CARHPPS equ 025Fh");
#endif
// aliases
extern volatile unsigned char           MDCARHPPS           __at(0x25F);
#ifndef _LIB_BUILD
asm("MDCARHPPS equ 025Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARHPPS0             :1;
        unsigned MDCARHPPS1             :1;
        unsigned MDCARHPPS2             :1;
        unsigned MDCARHPPS3             :1;
        unsigned MDCARHPPS4             :1;
    };
    struct {
        unsigned MDCARHPPS              :5;
    };
} MD1CARHPPSbits_t;
extern volatile MD1CARHPPSbits_t MD1CARHPPSbits __at(0x25F);
// bitfield macros
#define _MD1CARHPPS_PIN_POSN                                0x0
#define _MD1CARHPPS_PIN_POSITION                            0x0
#define _MD1CARHPPS_PIN_SIZE                                0x3
#define _MD1CARHPPS_PIN_LENGTH                              0x3
#define _MD1CARHPPS_PIN_MASK                                0x7
#define _MD1CARHPPS_PORT_POSN                               0x3
#define _MD1CARHPPS_PORT_POSITION                           0x3
#define _MD1CARHPPS_PORT_SIZE                               0x2
#define _MD1CARHPPS_PORT_LENGTH                             0x2
#define _MD1CARHPPS_PORT_MASK                               0x18
#define _MD1CARHPPS_MDCARHPPS0_POSN                         0x0
#define _MD1CARHPPS_MDCARHPPS0_POSITION                     0x0
#define _MD1CARHPPS_MDCARHPPS0_SIZE                         0x1
#define _MD1CARHPPS_MDCARHPPS0_LENGTH                       0x1
#define _MD1CARHPPS_MDCARHPPS0_MASK                         0x1
#define _MD1CARHPPS_MDCARHPPS1_POSN                         0x1
#define _MD1CARHPPS_MDCARHPPS1_POSITION                     0x1
#define _MD1CARHPPS_MDCARHPPS1_SIZE                         0x1
#define _MD1CARHPPS_MDCARHPPS1_LENGTH                       0x1
#define _MD1CARHPPS_MDCARHPPS1_MASK                         0x2
#define _MD1CARHPPS_MDCARHPPS2_POSN                         0x2
#define _MD1CARHPPS_MDCARHPPS2_POSITION                     0x2
#define _MD1CARHPPS_MDCARHPPS2_SIZE                         0x1
#define _MD1CARHPPS_MDCARHPPS2_LENGTH                       0x1
#define _MD1CARHPPS_MDCARHPPS2_MASK                         0x4
#define _MD1CARHPPS_MDCARHPPS3_POSN                         0x3
#define _MD1CARHPPS_MDCARHPPS3_POSITION                     0x3
#define _MD1CARHPPS_MDCARHPPS3_SIZE                         0x1
#define _MD1CARHPPS_MDCARHPPS3_LENGTH                       0x1
#define _MD1CARHPPS_MDCARHPPS3_MASK                         0x8
#define _MD1CARHPPS_MDCARHPPS4_POSN                         0x4
#define _MD1CARHPPS_MDCARHPPS4_POSITION                     0x4
#define _MD1CARHPPS_MDCARHPPS4_SIZE                         0x1
#define _MD1CARHPPS_MDCARHPPS4_LENGTH                       0x1
#define _MD1CARHPPS_MDCARHPPS4_MASK                         0x10
#define _MD1CARHPPS_MDCARHPPS_POSN                          0x0
#define _MD1CARHPPS_MDCARHPPS_POSITION                      0x0
#define _MD1CARHPPS_MDCARHPPS_SIZE                          0x5
#define _MD1CARHPPS_MDCARHPPS_LENGTH                        0x5
#define _MD1CARHPPS_MDCARHPPS_MASK                          0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARHPPS0             :1;
        unsigned MDCARHPPS1             :1;
        unsigned MDCARHPPS2             :1;
        unsigned MDCARHPPS3             :1;
        unsigned MDCARHPPS4             :1;
    };
    struct {
        unsigned MDCARHPPS              :5;
    };
} MDCARHPPSbits_t;
extern volatile MDCARHPPSbits_t MDCARHPPSbits __at(0x25F);
// bitfield macros
#define _MDCARHPPS_PIN_POSN                                 0x0
#define _MDCARHPPS_PIN_POSITION                             0x0
#define _MDCARHPPS_PIN_SIZE                                 0x3
#define _MDCARHPPS_PIN_LENGTH                               0x3
#define _MDCARHPPS_PIN_MASK                                 0x7
#define _MDCARHPPS_PORT_POSN                                0x3
#define _MDCARHPPS_PORT_POSITION                            0x3
#define _MDCARHPPS_PORT_SIZE                                0x2
#define _MDCARHPPS_PORT_LENGTH                              0x2
#define _MDCARHPPS_PORT_MASK                                0x18
#define _MDCARHPPS_MDCARHPPS0_POSN                          0x0
#define _MDCARHPPS_MDCARHPPS0_POSITION                      0x0
#define _MDCARHPPS_MDCARHPPS0_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS0_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS0_MASK                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSN                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSITION                      0x1
#define _MDCARHPPS_MDCARHPPS1_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS1_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS1_MASK                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSN                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSITION                      0x2
#define _MDCARHPPS_MDCARHPPS2_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS2_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS2_MASK                          0x4
#define _MDCARHPPS_MDCARHPPS3_POSN                          0x3
#define _MDCARHPPS_MDCARHPPS3_POSITION                      0x3
#define _MDCARHPPS_MDCARHPPS3_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS3_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS3_MASK                          0x8
#define _MDCARHPPS_MDCARHPPS4_POSN                          0x4
#define _MDCARHPPS_MDCARHPPS4_POSITION                      0x4
#define _MDCARHPPS_MDCARHPPS4_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS4_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS4_MASK                          0x10
#define _MDCARHPPS_MDCARHPPS_POSN                           0x0
#define _MDCARHPPS_MDCARHPPS_POSITION                       0x0
#define _MDCARHPPS_MDCARHPPS_SIZE                           0x5
#define _MDCARHPPS_MDCARHPPS_LENGTH                         0x5
#define _MDCARHPPS_MDCARHPPS_MASK                           0x1F

// Register: MD1SRCPPS
#define MD1SRCPPS MD1SRCPPS
extern volatile unsigned char           MD1SRCPPS           __at(0x260);
#ifndef _LIB_BUILD
asm("MD1SRCPPS equ 0260h");
#endif
// aliases
extern volatile unsigned char           MDSRCPPS            __at(0x260);
#ifndef _LIB_BUILD
asm("MDSRCPPS equ 0260h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDSRCPPS0              :1;
        unsigned MDSRCPPS1              :1;
        unsigned MDSRCPPS2              :1;
        unsigned MDSRCPPS3              :1;
        unsigned MDSRCPPS4              :1;
    };
    struct {
        unsigned MDSRCPPS               :5;
    };
} MD1SRCPPSbits_t;
extern volatile MD1SRCPPSbits_t MD1SRCPPSbits __at(0x260);
// bitfield macros
#define _MD1SRCPPS_PIN_POSN                                 0x0
#define _MD1SRCPPS_PIN_POSITION                             0x0
#define _MD1SRCPPS_PIN_SIZE                                 0x3
#define _MD1SRCPPS_PIN_LENGTH                               0x3
#define _MD1SRCPPS_PIN_MASK                                 0x7
#define _MD1SRCPPS_PORT_POSN                                0x3
#define _MD1SRCPPS_PORT_POSITION                            0x3
#define _MD1SRCPPS_PORT_SIZE                                0x2
#define _MD1SRCPPS_PORT_LENGTH                              0x2
#define _MD1SRCPPS_PORT_MASK                                0x18
#define _MD1SRCPPS_MDSRCPPS0_POSN                           0x0
#define _MD1SRCPPS_MDSRCPPS0_POSITION                       0x0
#define _MD1SRCPPS_MDSRCPPS0_SIZE                           0x1
#define _MD1SRCPPS_MDSRCPPS0_LENGTH                         0x1
#define _MD1SRCPPS_MDSRCPPS0_MASK                           0x1
#define _MD1SRCPPS_MDSRCPPS1_POSN                           0x1
#define _MD1SRCPPS_MDSRCPPS1_POSITION                       0x1
#define _MD1SRCPPS_MDSRCPPS1_SIZE                           0x1
#define _MD1SRCPPS_MDSRCPPS1_LENGTH                         0x1
#define _MD1SRCPPS_MDSRCPPS1_MASK                           0x2
#define _MD1SRCPPS_MDSRCPPS2_POSN                           0x2
#define _MD1SRCPPS_MDSRCPPS2_POSITION                       0x2
#define _MD1SRCPPS_MDSRCPPS2_SIZE                           0x1
#define _MD1SRCPPS_MDSRCPPS2_LENGTH                         0x1
#define _MD1SRCPPS_MDSRCPPS2_MASK                           0x4
#define _MD1SRCPPS_MDSRCPPS3_POSN                           0x3
#define _MD1SRCPPS_MDSRCPPS3_POSITION                       0x3
#define _MD1SRCPPS_MDSRCPPS3_SIZE                           0x1
#define _MD1SRCPPS_MDSRCPPS3_LENGTH                         0x1
#define _MD1SRCPPS_MDSRCPPS3_MASK                           0x8
#define _MD1SRCPPS_MDSRCPPS4_POSN                           0x4
#define _MD1SRCPPS_MDSRCPPS4_POSITION                       0x4
#define _MD1SRCPPS_MDSRCPPS4_SIZE                           0x1
#define _MD1SRCPPS_MDSRCPPS4_LENGTH                         0x1
#define _MD1SRCPPS_MDSRCPPS4_MASK                           0x10
#define _MD1SRCPPS_MDSRCPPS_POSN                            0x0
#define _MD1SRCPPS_MDSRCPPS_POSITION                        0x0
#define _MD1SRCPPS_MDSRCPPS_SIZE                            0x5
#define _MD1SRCPPS_MDSRCPPS_LENGTH                          0x5
#define _MD1SRCPPS_MDSRCPPS_MASK                            0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDSRCPPS0              :1;
        unsigned MDSRCPPS1              :1;
        unsigned MDSRCPPS2              :1;
        unsigned MDSRCPPS3              :1;
        unsigned MDSRCPPS4              :1;
    };
    struct {
        unsigned MDSRCPPS               :5;
    };
} MDSRCPPSbits_t;
extern volatile MDSRCPPSbits_t MDSRCPPSbits __at(0x260);
// bitfield macros
#define _MDSRCPPS_PIN_POSN                                  0x0
#define _MDSRCPPS_PIN_POSITION                              0x0
#define _MDSRCPPS_PIN_SIZE                                  0x3
#define _MDSRCPPS_PIN_LENGTH                                0x3
#define _MDSRCPPS_PIN_MASK                                  0x7
#define _MDSRCPPS_PORT_POSN                                 0x3
#define _MDSRCPPS_PORT_POSITION                             0x3
#define _MDSRCPPS_PORT_SIZE                                 0x2
#define _MDSRCPPS_PORT_LENGTH                               0x2
#define _MDSRCPPS_PORT_MASK                                 0x18
#define _MDSRCPPS_MDSRCPPS0_POSN                            0x0
#define _MDSRCPPS_MDSRCPPS0_POSITION                        0x0
#define _MDSRCPPS_MDSRCPPS0_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS0_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS0_MASK                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSN                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSITION                        0x1
#define _MDSRCPPS_MDSRCPPS1_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS1_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS1_MASK                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSN                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSITION                        0x2
#define _MDSRCPPS_MDSRCPPS2_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS2_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS2_MASK                            0x4
#define _MDSRCPPS_MDSRCPPS3_POSN                            0x3
#define _MDSRCPPS_MDSRCPPS3_POSITION                        0x3
#define _MDSRCPPS_MDSRCPPS3_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS3_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS3_MASK                            0x8
#define _MDSRCPPS_MDSRCPPS4_POSN                            0x4
#define _MDSRCPPS_MDSRCPPS4_POSITION                        0x4
#define _MDSRCPPS_MDSRCPPS4_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS4_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS4_MASK                            0x10
#define _MDSRCPPS_MDSRCPPS_POSN                             0x0
#define _MDSRCPPS_MDSRCPPS_POSITION                         0x0
#define _MDSRCPPS_MDSRCPPS_SIZE                             0x5
#define _MDSRCPPS_MDSRCPPS_LENGTH                           0x5
#define _MDSRCPPS_MDSRCPPS_MASK                             0x1F

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x261);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 0261h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
    struct {
        unsigned CLCIN0PPS              :5;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x261);
// bitfield macros
#define _CLCIN0PPS_PIN_POSN                                 0x0
#define _CLCIN0PPS_PIN_POSITION                             0x0
#define _CLCIN0PPS_PIN_SIZE                                 0x3
#define _CLCIN0PPS_PIN_LENGTH                               0x3
#define _CLCIN0PPS_PIN_MASK                                 0x7
#define _CLCIN0PPS_PORT_POSN                                0x3
#define _CLCIN0PPS_PORT_POSITION                            0x3
#define _CLCIN0PPS_PORT_SIZE                                0x2
#define _CLCIN0PPS_PORT_LENGTH                              0x2
#define _CLCIN0PPS_PORT_MASK                                0x18
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x262);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 0262h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
    struct {
        unsigned CLCIN1PPS              :5;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x262);
// bitfield macros
#define _CLCIN1PPS_PIN_POSN                                 0x0
#define _CLCIN1PPS_PIN_POSITION                             0x0
#define _CLCIN1PPS_PIN_SIZE                                 0x3
#define _CLCIN1PPS_PIN_LENGTH                               0x3
#define _CLCIN1PPS_PIN_MASK                                 0x7
#define _CLCIN1PPS_PORT_POSN                                0x3
#define _CLCIN1PPS_PORT_POSITION                            0x3
#define _CLCIN1PPS_PORT_SIZE                                0x2
#define _CLCIN1PPS_PORT_LENGTH                              0x2
#define _CLCIN1PPS_PORT_MASK                                0x18
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x263);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 0263h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
    struct {
        unsigned CLCIN2PPS              :5;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x263);
// bitfield macros
#define _CLCIN2PPS_PIN_POSN                                 0x0
#define _CLCIN2PPS_PIN_POSITION                             0x0
#define _CLCIN2PPS_PIN_SIZE                                 0x3
#define _CLCIN2PPS_PIN_LENGTH                               0x3
#define _CLCIN2PPS_PIN_MASK                                 0x7
#define _CLCIN2PPS_PORT_POSN                                0x3
#define _CLCIN2PPS_PORT_POSITION                            0x3
#define _CLCIN2PPS_PORT_SIZE                                0x2
#define _CLCIN2PPS_PORT_LENGTH                              0x2
#define _CLCIN2PPS_PORT_MASK                                0x18
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x264);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 0264h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
    struct {
        unsigned CLCIN3PPS              :5;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x264);
// bitfield macros
#define _CLCIN3PPS_PIN_POSN                                 0x0
#define _CLCIN3PPS_PIN_POSITION                             0x0
#define _CLCIN3PPS_PIN_SIZE                                 0x3
#define _CLCIN3PPS_PIN_LENGTH                               0x3
#define _CLCIN3PPS_PIN_MASK                                 0x7
#define _CLCIN3PPS_PORT_POSN                                0x3
#define _CLCIN3PPS_PORT_POSITION                            0x3
#define _CLCIN3PPS_PORT_SIZE                                0x2
#define _CLCIN3PPS_PORT_LENGTH                              0x2
#define _CLCIN3PPS_PORT_MASK                                0x18
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F

// Register: CLCIN4PPS
#define CLCIN4PPS CLCIN4PPS
extern volatile unsigned char           CLCIN4PPS           __at(0x265);
#ifndef _LIB_BUILD
asm("CLCIN4PPS equ 0265h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN4PPS0             :1;
        unsigned CLCIN4PPS1             :1;
        unsigned CLCIN4PPS2             :1;
        unsigned CLCIN4PPS3             :1;
        unsigned CLCIN4PPS4             :1;
    };
    struct {
        unsigned CLCIN4PPS              :5;
    };
} CLCIN4PPSbits_t;
extern volatile CLCIN4PPSbits_t CLCIN4PPSbits __at(0x265);
// bitfield macros
#define _CLCIN4PPS_PIN_POSN                                 0x0
#define _CLCIN4PPS_PIN_POSITION                             0x0
#define _CLCIN4PPS_PIN_SIZE                                 0x3
#define _CLCIN4PPS_PIN_LENGTH                               0x3
#define _CLCIN4PPS_PIN_MASK                                 0x7
#define _CLCIN4PPS_PORT_POSN                                0x3
#define _CLCIN4PPS_PORT_POSITION                            0x3
#define _CLCIN4PPS_PORT_SIZE                                0x2
#define _CLCIN4PPS_PORT_LENGTH                              0x2
#define _CLCIN4PPS_PORT_MASK                                0x18
#define _CLCIN4PPS_CLCIN4PPS0_POSN                          0x0
#define _CLCIN4PPS_CLCIN4PPS0_POSITION                      0x0
#define _CLCIN4PPS_CLCIN4PPS0_SIZE                          0x1
#define _CLCIN4PPS_CLCIN4PPS0_LENGTH                        0x1
#define _CLCIN4PPS_CLCIN4PPS0_MASK                          0x1
#define _CLCIN4PPS_CLCIN4PPS1_POSN                          0x1
#define _CLCIN4PPS_CLCIN4PPS1_POSITION                      0x1
#define _CLCIN4PPS_CLCIN4PPS1_SIZE                          0x1
#define _CLCIN4PPS_CLCIN4PPS1_LENGTH                        0x1
#define _CLCIN4PPS_CLCIN4PPS1_MASK                          0x2
#define _CLCIN4PPS_CLCIN4PPS2_POSN                          0x2
#define _CLCIN4PPS_CLCIN4PPS2_POSITION                      0x2
#define _CLCIN4PPS_CLCIN4PPS2_SIZE                          0x1
#define _CLCIN4PPS_CLCIN4PPS2_LENGTH                        0x1
#define _CLCIN4PPS_CLCIN4PPS2_MASK                          0x4
#define _CLCIN4PPS_CLCIN4PPS3_POSN                          0x3
#define _CLCIN4PPS_CLCIN4PPS3_POSITION                      0x3
#define _CLCIN4PPS_CLCIN4PPS3_SIZE                          0x1
#define _CLCIN4PPS_CLCIN4PPS3_LENGTH                        0x1
#define _CLCIN4PPS_CLCIN4PPS3_MASK                          0x8
#define _CLCIN4PPS_CLCIN4PPS4_POSN                          0x4
#define _CLCIN4PPS_CLCIN4PPS4_POSITION                      0x4
#define _CLCIN4PPS_CLCIN4PPS4_SIZE                          0x1
#define _CLCIN4PPS_CLCIN4PPS4_LENGTH                        0x1
#define _CLCIN4PPS_CLCIN4PPS4_MASK                          0x10
#define _CLCIN4PPS_CLCIN4PPS_POSN                           0x0
#define _CLCIN4PPS_CLCIN4PPS_POSITION                       0x0
#define _CLCIN4PPS_CLCIN4PPS_SIZE                           0x5
#define _CLCIN4PPS_CLCIN4PPS_LENGTH                         0x5
#define _CLCIN4PPS_CLCIN4PPS_MASK                           0x1F

// Register: CLCIN5PPS
#define CLCIN5PPS CLCIN5PPS
extern volatile unsigned char           CLCIN5PPS           __at(0x266);
#ifndef _LIB_BUILD
asm("CLCIN5PPS equ 0266h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN5PPS0             :1;
        unsigned CLCIN5PPS1             :1;
        unsigned CLCIN5PPS2             :1;
        unsigned CLCIN5PPS3             :1;
        unsigned CLCIN5PPS4             :1;
    };
    struct {
        unsigned CLCIN5PPS              :5;
    };
} CLCIN5PPSbits_t;
extern volatile CLCIN5PPSbits_t CLCIN5PPSbits __at(0x266);
// bitfield macros
#define _CLCIN5PPS_PIN_POSN                                 0x0
#define _CLCIN5PPS_PIN_POSITION                             0x0
#define _CLCIN5PPS_PIN_SIZE                                 0x3
#define _CLCIN5PPS_PIN_LENGTH                               0x3
#define _CLCIN5PPS_PIN_MASK                                 0x7
#define _CLCIN5PPS_PORT_POSN                                0x3
#define _CLCIN5PPS_PORT_POSITION                            0x3
#define _CLCIN5PPS_PORT_SIZE                                0x2
#define _CLCIN5PPS_PORT_LENGTH                              0x2
#define _CLCIN5PPS_PORT_MASK                                0x18
#define _CLCIN5PPS_CLCIN5PPS0_POSN                          0x0
#define _CLCIN5PPS_CLCIN5PPS0_POSITION                      0x0
#define _CLCIN5PPS_CLCIN5PPS0_SIZE                          0x1
#define _CLCIN5PPS_CLCIN5PPS0_LENGTH                        0x1
#define _CLCIN5PPS_CLCIN5PPS0_MASK                          0x1
#define _CLCIN5PPS_CLCIN5PPS1_POSN                          0x1
#define _CLCIN5PPS_CLCIN5PPS1_POSITION                      0x1
#define _CLCIN5PPS_CLCIN5PPS1_SIZE                          0x1
#define _CLCIN5PPS_CLCIN5PPS1_LENGTH                        0x1
#define _CLCIN5PPS_CLCIN5PPS1_MASK                          0x2
#define _CLCIN5PPS_CLCIN5PPS2_POSN                          0x2
#define _CLCIN5PPS_CLCIN5PPS2_POSITION                      0x2
#define _CLCIN5PPS_CLCIN5PPS2_SIZE                          0x1
#define _CLCIN5PPS_CLCIN5PPS2_LENGTH                        0x1
#define _CLCIN5PPS_CLCIN5PPS2_MASK                          0x4
#define _CLCIN5PPS_CLCIN5PPS3_POSN                          0x3
#define _CLCIN5PPS_CLCIN5PPS3_POSITION                      0x3
#define _CLCIN5PPS_CLCIN5PPS3_SIZE                          0x1
#define _CLCIN5PPS_CLCIN5PPS3_LENGTH                        0x1
#define _CLCIN5PPS_CLCIN5PPS3_MASK                          0x8
#define _CLCIN5PPS_CLCIN5PPS4_POSN                          0x4
#define _CLCIN5PPS_CLCIN5PPS4_POSITION                      0x4
#define _CLCIN5PPS_CLCIN5PPS4_SIZE                          0x1
#define _CLCIN5PPS_CLCIN5PPS4_LENGTH                        0x1
#define _CLCIN5PPS_CLCIN5PPS4_MASK                          0x10
#define _CLCIN5PPS_CLCIN5PPS_POSN                           0x0
#define _CLCIN5PPS_CLCIN5PPS_POSITION                       0x0
#define _CLCIN5PPS_CLCIN5PPS_SIZE                           0x5
#define _CLCIN5PPS_CLCIN5PPS_LENGTH                         0x5
#define _CLCIN5PPS_CLCIN5PPS_MASK                           0x1F

// Register: CLCIN6PPS
#define CLCIN6PPS CLCIN6PPS
extern volatile unsigned char           CLCIN6PPS           __at(0x267);
#ifndef _LIB_BUILD
asm("CLCIN6PPS equ 0267h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN6PPS0             :1;
        unsigned CLCIN6PPS1             :1;
        unsigned CLCIN6PPS2             :1;
        unsigned CLCIN6PPS3             :1;
        unsigned CLCIN6PPS4             :1;
    };
    struct {
        unsigned CLCIN6PPS              :5;
    };
} CLCIN6PPSbits_t;
extern volatile CLCIN6PPSbits_t CLCIN6PPSbits __at(0x267);
// bitfield macros
#define _CLCIN6PPS_PIN_POSN                                 0x0
#define _CLCIN6PPS_PIN_POSITION                             0x0
#define _CLCIN6PPS_PIN_SIZE                                 0x3
#define _CLCIN6PPS_PIN_LENGTH                               0x3
#define _CLCIN6PPS_PIN_MASK                                 0x7
#define _CLCIN6PPS_PORT_POSN                                0x3
#define _CLCIN6PPS_PORT_POSITION                            0x3
#define _CLCIN6PPS_PORT_SIZE                                0x2
#define _CLCIN6PPS_PORT_LENGTH                              0x2
#define _CLCIN6PPS_PORT_MASK                                0x18
#define _CLCIN6PPS_CLCIN6PPS0_POSN                          0x0
#define _CLCIN6PPS_CLCIN6PPS0_POSITION                      0x0
#define _CLCIN6PPS_CLCIN6PPS0_SIZE                          0x1
#define _CLCIN6PPS_CLCIN6PPS0_LENGTH                        0x1
#define _CLCIN6PPS_CLCIN6PPS0_MASK                          0x1
#define _CLCIN6PPS_CLCIN6PPS1_POSN                          0x1
#define _CLCIN6PPS_CLCIN6PPS1_POSITION                      0x1
#define _CLCIN6PPS_CLCIN6PPS1_SIZE                          0x1
#define _CLCIN6PPS_CLCIN6PPS1_LENGTH                        0x1
#define _CLCIN6PPS_CLCIN6PPS1_MASK                          0x2
#define _CLCIN6PPS_CLCIN6PPS2_POSN                          0x2
#define _CLCIN6PPS_CLCIN6PPS2_POSITION                      0x2
#define _CLCIN6PPS_CLCIN6PPS2_SIZE                          0x1
#define _CLCIN6PPS_CLCIN6PPS2_LENGTH                        0x1
#define _CLCIN6PPS_CLCIN6PPS2_MASK                          0x4
#define _CLCIN6PPS_CLCIN6PPS3_POSN                          0x3
#define _CLCIN6PPS_CLCIN6PPS3_POSITION                      0x3
#define _CLCIN6PPS_CLCIN6PPS3_SIZE                          0x1
#define _CLCIN6PPS_CLCIN6PPS3_LENGTH                        0x1
#define _CLCIN6PPS_CLCIN6PPS3_MASK                          0x8
#define _CLCIN6PPS_CLCIN6PPS4_POSN                          0x4
#define _CLCIN6PPS_CLCIN6PPS4_POSITION                      0x4
#define _CLCIN6PPS_CLCIN6PPS4_SIZE                          0x1
#define _CLCIN6PPS_CLCIN6PPS4_LENGTH                        0x1
#define _CLCIN6PPS_CLCIN6PPS4_MASK                          0x10
#define _CLCIN6PPS_CLCIN6PPS_POSN                           0x0
#define _CLCIN6PPS_CLCIN6PPS_POSITION                       0x0
#define _CLCIN6PPS_CLCIN6PPS_SIZE                           0x5
#define _CLCIN6PPS_CLCIN6PPS_LENGTH                         0x5
#define _CLCIN6PPS_CLCIN6PPS_MASK                           0x1F

// Register: CLCIN7PPS
#define CLCIN7PPS CLCIN7PPS
extern volatile unsigned char           CLCIN7PPS           __at(0x268);
#ifndef _LIB_BUILD
asm("CLCIN7PPS equ 0268h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CLCIN7PPS0             :1;
        unsigned CLCIN7PPS1             :1;
        unsigned CLCIN7PPS2             :1;
        unsigned CLCIN7PPS3             :1;
        unsigned CLCIN7PPS4             :1;
    };
    struct {
        unsigned CLCIN7PPS              :5;
    };
} CLCIN7PPSbits_t;
extern volatile CLCIN7PPSbits_t CLCIN7PPSbits __at(0x268);
// bitfield macros
#define _CLCIN7PPS_PIN_POSN                                 0x0
#define _CLCIN7PPS_PIN_POSITION                             0x0
#define _CLCIN7PPS_PIN_SIZE                                 0x3
#define _CLCIN7PPS_PIN_LENGTH                               0x3
#define _CLCIN7PPS_PIN_MASK                                 0x7
#define _CLCIN7PPS_PORT_POSN                                0x3
#define _CLCIN7PPS_PORT_POSITION                            0x3
#define _CLCIN7PPS_PORT_SIZE                                0x2
#define _CLCIN7PPS_PORT_LENGTH                              0x2
#define _CLCIN7PPS_PORT_MASK                                0x18
#define _CLCIN7PPS_CLCIN7PPS0_POSN                          0x0
#define _CLCIN7PPS_CLCIN7PPS0_POSITION                      0x0
#define _CLCIN7PPS_CLCIN7PPS0_SIZE                          0x1
#define _CLCIN7PPS_CLCIN7PPS0_LENGTH                        0x1
#define _CLCIN7PPS_CLCIN7PPS0_MASK                          0x1
#define _CLCIN7PPS_CLCIN7PPS1_POSN                          0x1
#define _CLCIN7PPS_CLCIN7PPS1_POSITION                      0x1
#define _CLCIN7PPS_CLCIN7PPS1_SIZE                          0x1
#define _CLCIN7PPS_CLCIN7PPS1_LENGTH                        0x1
#define _CLCIN7PPS_CLCIN7PPS1_MASK                          0x2
#define _CLCIN7PPS_CLCIN7PPS2_POSN                          0x2
#define _CLCIN7PPS_CLCIN7PPS2_POSITION                      0x2
#define _CLCIN7PPS_CLCIN7PPS2_SIZE                          0x1
#define _CLCIN7PPS_CLCIN7PPS2_LENGTH                        0x1
#define _CLCIN7PPS_CLCIN7PPS2_MASK                          0x4
#define _CLCIN7PPS_CLCIN7PPS3_POSN                          0x3
#define _CLCIN7PPS_CLCIN7PPS3_POSITION                      0x3
#define _CLCIN7PPS_CLCIN7PPS3_SIZE                          0x1
#define _CLCIN7PPS_CLCIN7PPS3_LENGTH                        0x1
#define _CLCIN7PPS_CLCIN7PPS3_MASK                          0x8
#define _CLCIN7PPS_CLCIN7PPS4_POSN                          0x4
#define _CLCIN7PPS_CLCIN7PPS4_POSITION                      0x4
#define _CLCIN7PPS_CLCIN7PPS4_SIZE                          0x1
#define _CLCIN7PPS_CLCIN7PPS4_LENGTH                        0x1
#define _CLCIN7PPS_CLCIN7PPS4_MASK                          0x10
#define _CLCIN7PPS_CLCIN7PPS_POSN                           0x0
#define _CLCIN7PPS_CLCIN7PPS_POSITION                       0x0
#define _CLCIN7PPS_CLCIN7PPS_SIZE                           0x5
#define _CLCIN7PPS_CLCIN7PPS_LENGTH                         0x5
#define _CLCIN7PPS_CLCIN7PPS_MASK                           0x1F

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x269);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 0269h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned ADACTPPS0              :1;
        unsigned ADACTPPS1              :1;
        unsigned ADACTPPS2              :1;
        unsigned ADACTPPS3              :1;
        unsigned ADACTPPS4              :1;
    };
    struct {
        unsigned ADACTPPS               :5;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x269);
// bitfield macros
#define _ADACTPPS_PIN_POSN                                  0x0
#define _ADACTPPS_PIN_POSITION                              0x0
#define _ADACTPPS_PIN_SIZE                                  0x3
#define _ADACTPPS_PIN_LENGTH                                0x3
#define _ADACTPPS_PIN_MASK                                  0x7
#define _ADACTPPS_PORT_POSN                                 0x3
#define _ADACTPPS_PORT_POSITION                             0x3
#define _ADACTPPS_PORT_SIZE                                 0x2
#define _ADACTPPS_PORT_LENGTH                               0x2
#define _ADACTPPS_PORT_MASK                                 0x18
#define _ADACTPPS_ADACTPPS0_POSN                            0x0
#define _ADACTPPS_ADACTPPS0_POSITION                        0x0
#define _ADACTPPS_ADACTPPS0_SIZE                            0x1
#define _ADACTPPS_ADACTPPS0_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS0_MASK                            0x1
#define _ADACTPPS_ADACTPPS1_POSN                            0x1
#define _ADACTPPS_ADACTPPS1_POSITION                        0x1
#define _ADACTPPS_ADACTPPS1_SIZE                            0x1
#define _ADACTPPS_ADACTPPS1_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS1_MASK                            0x2
#define _ADACTPPS_ADACTPPS2_POSN                            0x2
#define _ADACTPPS_ADACTPPS2_POSITION                        0x2
#define _ADACTPPS_ADACTPPS2_SIZE                            0x1
#define _ADACTPPS_ADACTPPS2_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS2_MASK                            0x4
#define _ADACTPPS_ADACTPPS3_POSN                            0x3
#define _ADACTPPS_ADACTPPS3_POSITION                        0x3
#define _ADACTPPS_ADACTPPS3_SIZE                            0x1
#define _ADACTPPS_ADACTPPS3_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS3_MASK                            0x8
#define _ADACTPPS_ADACTPPS4_POSN                            0x4
#define _ADACTPPS_ADACTPPS4_POSITION                        0x4
#define _ADACTPPS_ADACTPPS4_SIZE                            0x1
#define _ADACTPPS_ADACTPPS4_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS4_MASK                            0x10
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x5
#define _ADACTPPS_ADACTPPS_LENGTH                           0x5
#define _ADACTPPS_ADACTPPS_MASK                             0x1F

// Register: SPI1SCKPPS
#define SPI1SCKPPS SPI1SCKPPS
extern volatile unsigned char           SPI1SCKPPS          __at(0x26A);
#ifndef _LIB_BUILD
asm("SPI1SCKPPS equ 026Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI1SCKPPS             :5;
    };
    struct {
        unsigned SPI1SCKPPS0            :1;
        unsigned SPI1SCKPPS1            :1;
        unsigned SPI1SCKPPS2            :1;
        unsigned SPI1SCKPPS3            :1;
        unsigned SPI1SCKPPS4            :1;
    };
} SPI1SCKPPSbits_t;
extern volatile SPI1SCKPPSbits_t SPI1SCKPPSbits __at(0x26A);
// bitfield macros
#define _SPI1SCKPPS_PIN_POSN                                0x0
#define _SPI1SCKPPS_PIN_POSITION                            0x0
#define _SPI1SCKPPS_PIN_SIZE                                0x3
#define _SPI1SCKPPS_PIN_LENGTH                              0x3
#define _SPI1SCKPPS_PIN_MASK                                0x7
#define _SPI1SCKPPS_PORT_POSN                               0x3
#define _SPI1SCKPPS_PORT_POSITION                           0x3
#define _SPI1SCKPPS_PORT_SIZE                               0x2
#define _SPI1SCKPPS_PORT_LENGTH                             0x2
#define _SPI1SCKPPS_PORT_MASK                               0x18
#define _SPI1SCKPPS_SPI1SCKPPS_POSN                         0x0
#define _SPI1SCKPPS_SPI1SCKPPS_POSITION                     0x0
#define _SPI1SCKPPS_SPI1SCKPPS_SIZE                         0x5
#define _SPI1SCKPPS_SPI1SCKPPS_LENGTH                       0x5
#define _SPI1SCKPPS_SPI1SCKPPS_MASK                         0x1F
#define _SPI1SCKPPS_SPI1SCKPPS0_POSN                        0x0
#define _SPI1SCKPPS_SPI1SCKPPS0_POSITION                    0x0
#define _SPI1SCKPPS_SPI1SCKPPS0_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS0_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS0_MASK                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_POSN                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_POSITION                    0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_MASK                        0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_POSN                        0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_POSITION                    0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS2_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS2_MASK                        0x4
#define _SPI1SCKPPS_SPI1SCKPPS3_POSN                        0x3
#define _SPI1SCKPPS_SPI1SCKPPS3_POSITION                    0x3
#define _SPI1SCKPPS_SPI1SCKPPS3_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS3_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS3_MASK                        0x8
#define _SPI1SCKPPS_SPI1SCKPPS4_POSN                        0x4
#define _SPI1SCKPPS_SPI1SCKPPS4_POSITION                    0x4
#define _SPI1SCKPPS_SPI1SCKPPS4_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS4_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS4_MASK                        0x10

// Register: SPI1SDIPPS
#define SPI1SDIPPS SPI1SDIPPS
extern volatile unsigned char           SPI1SDIPPS          __at(0x26B);
#ifndef _LIB_BUILD
asm("SPI1SDIPPS equ 026Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI1SDIPPS             :5;
    };
    struct {
        unsigned SPI1SDIPPS0            :1;
        unsigned SPI1SDIPPS1            :1;
        unsigned SPI1SDIPPS2            :1;
        unsigned SPI1SDIPPS3            :1;
        unsigned SPI1SDIPPS4            :1;
    };
} SPI1SDIPPSbits_t;
extern volatile SPI1SDIPPSbits_t SPI1SDIPPSbits __at(0x26B);
// bitfield macros
#define _SPI1SDIPPS_PIN_POSN                                0x0
#define _SPI1SDIPPS_PIN_POSITION                            0x0
#define _SPI1SDIPPS_PIN_SIZE                                0x3
#define _SPI1SDIPPS_PIN_LENGTH                              0x3
#define _SPI1SDIPPS_PIN_MASK                                0x7
#define _SPI1SDIPPS_PORT_POSN                               0x3
#define _SPI1SDIPPS_PORT_POSITION                           0x3
#define _SPI1SDIPPS_PORT_SIZE                               0x2
#define _SPI1SDIPPS_PORT_LENGTH                             0x2
#define _SPI1SDIPPS_PORT_MASK                               0x18
#define _SPI1SDIPPS_SPI1SDIPPS_POSN                         0x0
#define _SPI1SDIPPS_SPI1SDIPPS_POSITION                     0x0
#define _SPI1SDIPPS_SPI1SDIPPS_SIZE                         0x5
#define _SPI1SDIPPS_SPI1SDIPPS_LENGTH                       0x5
#define _SPI1SDIPPS_SPI1SDIPPS_MASK                         0x1F
#define _SPI1SDIPPS_SPI1SDIPPS0_POSN                        0x0
#define _SPI1SDIPPS_SPI1SDIPPS0_POSITION                    0x0
#define _SPI1SDIPPS_SPI1SDIPPS0_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS0_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS0_MASK                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_POSN                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_POSITION                    0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_MASK                        0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_POSN                        0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_POSITION                    0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS2_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS2_MASK                        0x4
#define _SPI1SDIPPS_SPI1SDIPPS3_POSN                        0x3
#define _SPI1SDIPPS_SPI1SDIPPS3_POSITION                    0x3
#define _SPI1SDIPPS_SPI1SDIPPS3_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS3_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS3_MASK                        0x8
#define _SPI1SDIPPS_SPI1SDIPPS4_POSN                        0x4
#define _SPI1SDIPPS_SPI1SDIPPS4_POSITION                    0x4
#define _SPI1SDIPPS_SPI1SDIPPS4_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS4_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS4_MASK                        0x10

// Register: SPI1SSPPS
#define SPI1SSPPS SPI1SSPPS
extern volatile unsigned char           SPI1SSPPS           __at(0x26C);
#ifndef _LIB_BUILD
asm("SPI1SSPPS equ 026Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI1SSPPS              :5;
    };
    struct {
        unsigned SPI1SSPPS0             :1;
        unsigned SPI1SSPPS1             :1;
        unsigned SPI1SSPPS2             :1;
        unsigned SPI1SSPPS3             :1;
        unsigned SPI1SSPPS4             :1;
    };
} SPI1SSPPSbits_t;
extern volatile SPI1SSPPSbits_t SPI1SSPPSbits __at(0x26C);
// bitfield macros
#define _SPI1SSPPS_PIN_POSN                                 0x0
#define _SPI1SSPPS_PIN_POSITION                             0x0
#define _SPI1SSPPS_PIN_SIZE                                 0x3
#define _SPI1SSPPS_PIN_LENGTH                               0x3
#define _SPI1SSPPS_PIN_MASK                                 0x7
#define _SPI1SSPPS_PORT_POSN                                0x3
#define _SPI1SSPPS_PORT_POSITION                            0x3
#define _SPI1SSPPS_PORT_SIZE                                0x2
#define _SPI1SSPPS_PORT_LENGTH                              0x2
#define _SPI1SSPPS_PORT_MASK                                0x18
#define _SPI1SSPPS_SPI1SSPPS_POSN                           0x0
#define _SPI1SSPPS_SPI1SSPPS_POSITION                       0x0
#define _SPI1SSPPS_SPI1SSPPS_SIZE                           0x5
#define _SPI1SSPPS_SPI1SSPPS_LENGTH                         0x5
#define _SPI1SSPPS_SPI1SSPPS_MASK                           0x1F
#define _SPI1SSPPS_SPI1SSPPS0_POSN                          0x0
#define _SPI1SSPPS_SPI1SSPPS0_POSITION                      0x0
#define _SPI1SSPPS_SPI1SSPPS0_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS0_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS0_MASK                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_POSN                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_POSITION                      0x1
#define _SPI1SSPPS_SPI1SSPPS1_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS1_MASK                          0x2
#define _SPI1SSPPS_SPI1SSPPS2_POSN                          0x2
#define _SPI1SSPPS_SPI1SSPPS2_POSITION                      0x2
#define _SPI1SSPPS_SPI1SSPPS2_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS2_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS2_MASK                          0x4
#define _SPI1SSPPS_SPI1SSPPS3_POSN                          0x3
#define _SPI1SSPPS_SPI1SSPPS3_POSITION                      0x3
#define _SPI1SSPPS_SPI1SSPPS3_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS3_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS3_MASK                          0x8
#define _SPI1SSPPS_SPI1SSPPS4_POSN                          0x4
#define _SPI1SSPPS_SPI1SSPPS4_POSITION                      0x4
#define _SPI1SSPPS_SPI1SSPPS4_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS4_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS4_MASK                          0x10

// Register: SPI2SCKPPS
#define SPI2SCKPPS SPI2SCKPPS
extern volatile unsigned char           SPI2SCKPPS          __at(0x26D);
#ifndef _LIB_BUILD
asm("SPI2SCKPPS equ 026Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI2SCKPPS             :5;
    };
    struct {
        unsigned SPI2SCKPPS0            :1;
        unsigned SPI2SCKPPS1            :1;
        unsigned SPI2SCKPPS2            :1;
        unsigned SPI2SCKPPS3            :1;
        unsigned SPI2SCKPPS4            :1;
    };
} SPI2SCKPPSbits_t;
extern volatile SPI2SCKPPSbits_t SPI2SCKPPSbits __at(0x26D);
// bitfield macros
#define _SPI2SCKPPS_PIN_POSN                                0x0
#define _SPI2SCKPPS_PIN_POSITION                            0x0
#define _SPI2SCKPPS_PIN_SIZE                                0x3
#define _SPI2SCKPPS_PIN_LENGTH                              0x3
#define _SPI2SCKPPS_PIN_MASK                                0x7
#define _SPI2SCKPPS_PORT_POSN                               0x3
#define _SPI2SCKPPS_PORT_POSITION                           0x3
#define _SPI2SCKPPS_PORT_SIZE                               0x2
#define _SPI2SCKPPS_PORT_LENGTH                             0x2
#define _SPI2SCKPPS_PORT_MASK                               0x18
#define _SPI2SCKPPS_SPI2SCKPPS_POSN                         0x0
#define _SPI2SCKPPS_SPI2SCKPPS_POSITION                     0x0
#define _SPI2SCKPPS_SPI2SCKPPS_SIZE                         0x5
#define _SPI2SCKPPS_SPI2SCKPPS_LENGTH                       0x5
#define _SPI2SCKPPS_SPI2SCKPPS_MASK                         0x1F
#define _SPI2SCKPPS_SPI2SCKPPS0_POSN                        0x0
#define _SPI2SCKPPS_SPI2SCKPPS0_POSITION                    0x0
#define _SPI2SCKPPS_SPI2SCKPPS0_SIZE                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS0_LENGTH                      0x1
#define _SPI2SCKPPS_SPI2SCKPPS0_MASK                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS1_POSN                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS1_POSITION                    0x1
#define _SPI2SCKPPS_SPI2SCKPPS1_SIZE                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS1_LENGTH                      0x1
#define _SPI2SCKPPS_SPI2SCKPPS1_MASK                        0x2
#define _SPI2SCKPPS_SPI2SCKPPS2_POSN                        0x2
#define _SPI2SCKPPS_SPI2SCKPPS2_POSITION                    0x2
#define _SPI2SCKPPS_SPI2SCKPPS2_SIZE                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS2_LENGTH                      0x1
#define _SPI2SCKPPS_SPI2SCKPPS2_MASK                        0x4
#define _SPI2SCKPPS_SPI2SCKPPS3_POSN                        0x3
#define _SPI2SCKPPS_SPI2SCKPPS3_POSITION                    0x3
#define _SPI2SCKPPS_SPI2SCKPPS3_SIZE                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS3_LENGTH                      0x1
#define _SPI2SCKPPS_SPI2SCKPPS3_MASK                        0x8
#define _SPI2SCKPPS_SPI2SCKPPS4_POSN                        0x4
#define _SPI2SCKPPS_SPI2SCKPPS4_POSITION                    0x4
#define _SPI2SCKPPS_SPI2SCKPPS4_SIZE                        0x1
#define _SPI2SCKPPS_SPI2SCKPPS4_LENGTH                      0x1
#define _SPI2SCKPPS_SPI2SCKPPS4_MASK                        0x10

// Register: SPI2SDIPPS
#define SPI2SDIPPS SPI2SDIPPS
extern volatile unsigned char           SPI2SDIPPS          __at(0x26E);
#ifndef _LIB_BUILD
asm("SPI2SDIPPS equ 026Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI2SDIPPS             :5;
    };
    struct {
        unsigned SPI2SDIPPS0            :1;
        unsigned SPI2SDIPPS1            :1;
        unsigned SPI2SDIPPS2            :1;
        unsigned SPI2SDIPPS3            :1;
        unsigned SPI2SDIPPS4            :1;
    };
} SPI2SDIPPSbits_t;
extern volatile SPI2SDIPPSbits_t SPI2SDIPPSbits __at(0x26E);
// bitfield macros
#define _SPI2SDIPPS_PIN_POSN                                0x0
#define _SPI2SDIPPS_PIN_POSITION                            0x0
#define _SPI2SDIPPS_PIN_SIZE                                0x3
#define _SPI2SDIPPS_PIN_LENGTH                              0x3
#define _SPI2SDIPPS_PIN_MASK                                0x7
#define _SPI2SDIPPS_PORT_POSN                               0x3
#define _SPI2SDIPPS_PORT_POSITION                           0x3
#define _SPI2SDIPPS_PORT_SIZE                               0x2
#define _SPI2SDIPPS_PORT_LENGTH                             0x2
#define _SPI2SDIPPS_PORT_MASK                               0x18
#define _SPI2SDIPPS_SPI2SDIPPS_POSN                         0x0
#define _SPI2SDIPPS_SPI2SDIPPS_POSITION                     0x0
#define _SPI2SDIPPS_SPI2SDIPPS_SIZE                         0x5
#define _SPI2SDIPPS_SPI2SDIPPS_LENGTH                       0x5
#define _SPI2SDIPPS_SPI2SDIPPS_MASK                         0x1F
#define _SPI2SDIPPS_SPI2SDIPPS0_POSN                        0x0
#define _SPI2SDIPPS_SPI2SDIPPS0_POSITION                    0x0
#define _SPI2SDIPPS_SPI2SDIPPS0_SIZE                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS0_LENGTH                      0x1
#define _SPI2SDIPPS_SPI2SDIPPS0_MASK                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS1_POSN                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS1_POSITION                    0x1
#define _SPI2SDIPPS_SPI2SDIPPS1_SIZE                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS1_LENGTH                      0x1
#define _SPI2SDIPPS_SPI2SDIPPS1_MASK                        0x2
#define _SPI2SDIPPS_SPI2SDIPPS2_POSN                        0x2
#define _SPI2SDIPPS_SPI2SDIPPS2_POSITION                    0x2
#define _SPI2SDIPPS_SPI2SDIPPS2_SIZE                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS2_LENGTH                      0x1
#define _SPI2SDIPPS_SPI2SDIPPS2_MASK                        0x4
#define _SPI2SDIPPS_SPI2SDIPPS3_POSN                        0x3
#define _SPI2SDIPPS_SPI2SDIPPS3_POSITION                    0x3
#define _SPI2SDIPPS_SPI2SDIPPS3_SIZE                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS3_LENGTH                      0x1
#define _SPI2SDIPPS_SPI2SDIPPS3_MASK                        0x8
#define _SPI2SDIPPS_SPI2SDIPPS4_POSN                        0x4
#define _SPI2SDIPPS_SPI2SDIPPS4_POSITION                    0x4
#define _SPI2SDIPPS_SPI2SDIPPS4_SIZE                        0x1
#define _SPI2SDIPPS_SPI2SDIPPS4_LENGTH                      0x1
#define _SPI2SDIPPS_SPI2SDIPPS4_MASK                        0x10

// Register: SPI2SSPPS
#define SPI2SSPPS SPI2SSPPS
extern volatile unsigned char           SPI2SSPPS           __at(0x26F);
#ifndef _LIB_BUILD
asm("SPI2SSPPS equ 026Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SPI2SSPPS              :5;
    };
    struct {
        unsigned SPI2SSPPS0             :1;
        unsigned SPI2SSPPS1             :1;
        unsigned SPI2SSPPS2             :1;
        unsigned SPI2SSPPS3             :1;
        unsigned SPI2SSPPS4             :1;
    };
} SPI2SSPPSbits_t;
extern volatile SPI2SSPPSbits_t SPI2SSPPSbits __at(0x26F);
// bitfield macros
#define _SPI2SSPPS_PIN_POSN                                 0x0
#define _SPI2SSPPS_PIN_POSITION                             0x0
#define _SPI2SSPPS_PIN_SIZE                                 0x3
#define _SPI2SSPPS_PIN_LENGTH                               0x3
#define _SPI2SSPPS_PIN_MASK                                 0x7
#define _SPI2SSPPS_PORT_POSN                                0x3
#define _SPI2SSPPS_PORT_POSITION                            0x3
#define _SPI2SSPPS_PORT_SIZE                                0x2
#define _SPI2SSPPS_PORT_LENGTH                              0x2
#define _SPI2SSPPS_PORT_MASK                                0x18
#define _SPI2SSPPS_SPI2SSPPS_POSN                           0x0
#define _SPI2SSPPS_SPI2SSPPS_POSITION                       0x0
#define _SPI2SSPPS_SPI2SSPPS_SIZE                           0x5
#define _SPI2SSPPS_SPI2SSPPS_LENGTH                         0x5
#define _SPI2SSPPS_SPI2SSPPS_MASK                           0x1F
#define _SPI2SSPPS_SPI2SSPPS0_POSN                          0x0
#define _SPI2SSPPS_SPI2SSPPS0_POSITION                      0x0
#define _SPI2SSPPS_SPI2SSPPS0_SIZE                          0x1
#define _SPI2SSPPS_SPI2SSPPS0_LENGTH                        0x1
#define _SPI2SSPPS_SPI2SSPPS0_MASK                          0x1
#define _SPI2SSPPS_SPI2SSPPS1_POSN                          0x1
#define _SPI2SSPPS_SPI2SSPPS1_POSITION                      0x1
#define _SPI2SSPPS_SPI2SSPPS1_SIZE                          0x1
#define _SPI2SSPPS_SPI2SSPPS1_LENGTH                        0x1
#define _SPI2SSPPS_SPI2SSPPS1_MASK                          0x2
#define _SPI2SSPPS_SPI2SSPPS2_POSN                          0x2
#define _SPI2SSPPS_SPI2SSPPS2_POSITION                      0x2
#define _SPI2SSPPS_SPI2SSPPS2_SIZE                          0x1
#define _SPI2SSPPS_SPI2SSPPS2_LENGTH                        0x1
#define _SPI2SSPPS_SPI2SSPPS2_MASK                          0x4
#define _SPI2SSPPS_SPI2SSPPS3_POSN                          0x3
#define _SPI2SSPPS_SPI2SSPPS3_POSITION                      0x3
#define _SPI2SSPPS_SPI2SSPPS3_SIZE                          0x1
#define _SPI2SSPPS_SPI2SSPPS3_LENGTH                        0x1
#define _SPI2SSPPS_SPI2SSPPS3_MASK                          0x8
#define _SPI2SSPPS_SPI2SSPPS4_POSN                          0x4
#define _SPI2SSPPS_SPI2SSPPS4_POSITION                      0x4
#define _SPI2SSPPS_SPI2SSPPS4_SIZE                          0x1
#define _SPI2SSPPS_SPI2SSPPS4_LENGTH                        0x1
#define _SPI2SSPPS_SPI2SSPPS4_MASK                          0x10

// Register: I2C1SDAPPS
#define I2C1SDAPPS I2C1SDAPPS
extern volatile unsigned char           I2C1SDAPPS          __at(0x270);
#ifndef _LIB_BUILD
asm("I2C1SDAPPS equ 0270h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned I2C1SDAPPS             :5;
    };
    struct {
        unsigned I2C1SDAPPS0            :1;
        unsigned I2C1SDAPPS1            :1;
        unsigned I2C1SDAPPS2            :1;
        unsigned I2C1SDAPPS3            :1;
        unsigned I2C1SDAPPS4            :1;
    };
} I2C1SDAPPSbits_t;
extern volatile I2C1SDAPPSbits_t I2C1SDAPPSbits __at(0x270);
// bitfield macros
#define _I2C1SDAPPS_PIN_POSN                                0x0
#define _I2C1SDAPPS_PIN_POSITION                            0x0
#define _I2C1SDAPPS_PIN_SIZE                                0x3
#define _I2C1SDAPPS_PIN_LENGTH                              0x3
#define _I2C1SDAPPS_PIN_MASK                                0x7
#define _I2C1SDAPPS_PORT_POSN                               0x3
#define _I2C1SDAPPS_PORT_POSITION                           0x3
#define _I2C1SDAPPS_PORT_SIZE                               0x2
#define _I2C1SDAPPS_PORT_LENGTH                             0x2
#define _I2C1SDAPPS_PORT_MASK                               0x18
#define _I2C1SDAPPS_I2C1SDAPPS_POSN                         0x0
#define _I2C1SDAPPS_I2C1SDAPPS_POSITION                     0x0
#define _I2C1SDAPPS_I2C1SDAPPS_SIZE                         0x5
#define _I2C1SDAPPS_I2C1SDAPPS_LENGTH                       0x5
#define _I2C1SDAPPS_I2C1SDAPPS_MASK                         0x1F
#define _I2C1SDAPPS_I2C1SDAPPS0_POSN                        0x0
#define _I2C1SDAPPS_I2C1SDAPPS0_POSITION                    0x0
#define _I2C1SDAPPS_I2C1SDAPPS0_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS0_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS0_MASK                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_POSN                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_POSITION                    0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_MASK                        0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_POSN                        0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_POSITION                    0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS2_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS2_MASK                        0x4
#define _I2C1SDAPPS_I2C1SDAPPS3_POSN                        0x3
#define _I2C1SDAPPS_I2C1SDAPPS3_POSITION                    0x3
#define _I2C1SDAPPS_I2C1SDAPPS3_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS3_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS3_MASK                        0x8
#define _I2C1SDAPPS_I2C1SDAPPS4_POSN                        0x4
#define _I2C1SDAPPS_I2C1SDAPPS4_POSITION                    0x4
#define _I2C1SDAPPS_I2C1SDAPPS4_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS4_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS4_MASK                        0x10

// Register: I2C1SCLPPS
#define I2C1SCLPPS I2C1SCLPPS
extern volatile unsigned char           I2C1SCLPPS          __at(0x271);
#ifndef _LIB_BUILD
asm("I2C1SCLPPS equ 0271h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned I2C1SCLPPS             :5;
    };
    struct {
        unsigned I2C1SCLPPS0            :1;
        unsigned I2C1SCLPPS1            :1;
        unsigned I2C1SCLPPS2            :1;
        unsigned I2C1SCLPPS3            :1;
        unsigned I2C1SCLPPS4            :1;
    };
} I2C1SCLPPSbits_t;
extern volatile I2C1SCLPPSbits_t I2C1SCLPPSbits __at(0x271);
// bitfield macros
#define _I2C1SCLPPS_PIN_POSN                                0x0
#define _I2C1SCLPPS_PIN_POSITION                            0x0
#define _I2C1SCLPPS_PIN_SIZE                                0x3
#define _I2C1SCLPPS_PIN_LENGTH                              0x3
#define _I2C1SCLPPS_PIN_MASK                                0x7
#define _I2C1SCLPPS_PORT_POSN                               0x3
#define _I2C1SCLPPS_PORT_POSITION                           0x3
#define _I2C1SCLPPS_PORT_SIZE                               0x2
#define _I2C1SCLPPS_PORT_LENGTH                             0x2
#define _I2C1SCLPPS_PORT_MASK                               0x18
#define _I2C1SCLPPS_I2C1SCLPPS_POSN                         0x0
#define _I2C1SCLPPS_I2C1SCLPPS_POSITION                     0x0
#define _I2C1SCLPPS_I2C1SCLPPS_SIZE                         0x5
#define _I2C1SCLPPS_I2C1SCLPPS_LENGTH                       0x5
#define _I2C1SCLPPS_I2C1SCLPPS_MASK                         0x1F
#define _I2C1SCLPPS_I2C1SCLPPS0_POSN                        0x0
#define _I2C1SCLPPS_I2C1SCLPPS0_POSITION                    0x0
#define _I2C1SCLPPS_I2C1SCLPPS0_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS0_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS0_MASK                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_POSN                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_POSITION                    0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_MASK                        0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_POSN                        0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_POSITION                    0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS2_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS2_MASK                        0x4
#define _I2C1SCLPPS_I2C1SCLPPS3_POSN                        0x3
#define _I2C1SCLPPS_I2C1SCLPPS3_POSITION                    0x3
#define _I2C1SCLPPS_I2C1SCLPPS3_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS3_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS3_MASK                        0x8
#define _I2C1SCLPPS_I2C1SCLPPS4_POSN                        0x4
#define _I2C1SCLPPS_I2C1SCLPPS4_POSITION                    0x4
#define _I2C1SCLPPS_I2C1SCLPPS4_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS4_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS4_MASK                        0x10

// Register: U1RXPPS
#define U1RXPPS U1RXPPS
extern volatile unsigned char           U1RXPPS             __at(0x272);
#ifndef _LIB_BUILD
asm("U1RXPPS equ 0272h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U1RXPPS                :6;
    };
    struct {
        unsigned U1RXPPS0               :1;
        unsigned U1RXPPS1               :1;
        unsigned U1RXPPS2               :1;
        unsigned U1RXPPS3               :1;
        unsigned U1RXPPS4               :1;
        unsigned U1RXPPS5               :1;
    };
} U1RXPPSbits_t;
extern volatile U1RXPPSbits_t U1RXPPSbits __at(0x272);
// bitfield macros
#define _U1RXPPS_PIN_POSN                                   0x0
#define _U1RXPPS_PIN_POSITION                               0x0
#define _U1RXPPS_PIN_SIZE                                   0x3
#define _U1RXPPS_PIN_LENGTH                                 0x3
#define _U1RXPPS_PIN_MASK                                   0x7
#define _U1RXPPS_PORT_POSN                                  0x3
#define _U1RXPPS_PORT_POSITION                              0x3
#define _U1RXPPS_PORT_SIZE                                  0x3
#define _U1RXPPS_PORT_LENGTH                                0x3
#define _U1RXPPS_PORT_MASK                                  0x38
#define _U1RXPPS_U1RXPPS_POSN                               0x0
#define _U1RXPPS_U1RXPPS_POSITION                           0x0
#define _U1RXPPS_U1RXPPS_SIZE                               0x6
#define _U1RXPPS_U1RXPPS_LENGTH                             0x6
#define _U1RXPPS_U1RXPPS_MASK                               0x3F
#define _U1RXPPS_U1RXPPS0_POSN                              0x0
#define _U1RXPPS_U1RXPPS0_POSITION                          0x0
#define _U1RXPPS_U1RXPPS0_SIZE                              0x1
#define _U1RXPPS_U1RXPPS0_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS0_MASK                              0x1
#define _U1RXPPS_U1RXPPS1_POSN                              0x1
#define _U1RXPPS_U1RXPPS1_POSITION                          0x1
#define _U1RXPPS_U1RXPPS1_SIZE                              0x1
#define _U1RXPPS_U1RXPPS1_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS1_MASK                              0x2
#define _U1RXPPS_U1RXPPS2_POSN                              0x2
#define _U1RXPPS_U1RXPPS2_POSITION                          0x2
#define _U1RXPPS_U1RXPPS2_SIZE                              0x1
#define _U1RXPPS_U1RXPPS2_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS2_MASK                              0x4
#define _U1RXPPS_U1RXPPS3_POSN                              0x3
#define _U1RXPPS_U1RXPPS3_POSITION                          0x3
#define _U1RXPPS_U1RXPPS3_SIZE                              0x1
#define _U1RXPPS_U1RXPPS3_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS3_MASK                              0x8
#define _U1RXPPS_U1RXPPS4_POSN                              0x4
#define _U1RXPPS_U1RXPPS4_POSITION                          0x4
#define _U1RXPPS_U1RXPPS4_SIZE                              0x1
#define _U1RXPPS_U1RXPPS4_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS4_MASK                              0x10
#define _U1RXPPS_U1RXPPS5_POSN                              0x5
#define _U1RXPPS_U1RXPPS5_POSITION                          0x5
#define _U1RXPPS_U1RXPPS5_SIZE                              0x1
#define _U1RXPPS_U1RXPPS5_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS5_MASK                              0x20

// Register: U1CTSPPS
#define U1CTSPPS U1CTSPPS
extern volatile unsigned char           U1CTSPPS            __at(0x273);
#ifndef _LIB_BUILD
asm("U1CTSPPS equ 0273h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U1CTSPPS               :6;
    };
    struct {
        unsigned U1CTSPPS0              :1;
        unsigned U1CTSPPS1              :1;
        unsigned U1CTSPPS2              :1;
        unsigned U1CTSPPS3              :1;
        unsigned U1CTSPPS4              :1;
        unsigned U1CTSPPS5              :1;
    };
} U1CTSPPSbits_t;
extern volatile U1CTSPPSbits_t U1CTSPPSbits __at(0x273);
// bitfield macros
#define _U1CTSPPS_PIN_POSN                                  0x0
#define _U1CTSPPS_PIN_POSITION                              0x0
#define _U1CTSPPS_PIN_SIZE                                  0x3
#define _U1CTSPPS_PIN_LENGTH                                0x3
#define _U1CTSPPS_PIN_MASK                                  0x7
#define _U1CTSPPS_PORT_POSN                                 0x3
#define _U1CTSPPS_PORT_POSITION                             0x3
#define _U1CTSPPS_PORT_SIZE                                 0x3
#define _U1CTSPPS_PORT_LENGTH                               0x3
#define _U1CTSPPS_PORT_MASK                                 0x38
#define _U1CTSPPS_U1CTSPPS_POSN                             0x0
#define _U1CTSPPS_U1CTSPPS_POSITION                         0x0
#define _U1CTSPPS_U1CTSPPS_SIZE                             0x6
#define _U1CTSPPS_U1CTSPPS_LENGTH                           0x6
#define _U1CTSPPS_U1CTSPPS_MASK                             0x3F
#define _U1CTSPPS_U1CTSPPS0_POSN                            0x0
#define _U1CTSPPS_U1CTSPPS0_POSITION                        0x0
#define _U1CTSPPS_U1CTSPPS0_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS0_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS0_MASK                            0x1
#define _U1CTSPPS_U1CTSPPS1_POSN                            0x1
#define _U1CTSPPS_U1CTSPPS1_POSITION                        0x1
#define _U1CTSPPS_U1CTSPPS1_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS1_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS1_MASK                            0x2
#define _U1CTSPPS_U1CTSPPS2_POSN                            0x2
#define _U1CTSPPS_U1CTSPPS2_POSITION                        0x2
#define _U1CTSPPS_U1CTSPPS2_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS2_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS2_MASK                            0x4
#define _U1CTSPPS_U1CTSPPS3_POSN                            0x3
#define _U1CTSPPS_U1CTSPPS3_POSITION                        0x3
#define _U1CTSPPS_U1CTSPPS3_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS3_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS3_MASK                            0x8
#define _U1CTSPPS_U1CTSPPS4_POSN                            0x4
#define _U1CTSPPS_U1CTSPPS4_POSITION                        0x4
#define _U1CTSPPS_U1CTSPPS4_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS4_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS4_MASK                            0x10
#define _U1CTSPPS_U1CTSPPS5_POSN                            0x5
#define _U1CTSPPS_U1CTSPPS5_POSITION                        0x5
#define _U1CTSPPS_U1CTSPPS5_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS5_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS5_MASK                            0x20

// Register: U2RXPPS
#define U2RXPPS U2RXPPS
extern volatile unsigned char           U2RXPPS             __at(0x274);
#ifndef _LIB_BUILD
asm("U2RXPPS equ 0274h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned U2RXPPS                :5;
    };
    struct {
        unsigned U2RXPPS0               :1;
        unsigned U2RXPPS1               :1;
        unsigned U2RXPPS2               :1;
        unsigned U2RXPPS3               :1;
        unsigned U2RXPPS4               :1;
    };
} U2RXPPSbits_t;
extern volatile U2RXPPSbits_t U2RXPPSbits __at(0x274);
// bitfield macros
#define _U2RXPPS_PIN_POSN                                   0x0
#define _U2RXPPS_PIN_POSITION                               0x0
#define _U2RXPPS_PIN_SIZE                                   0x3
#define _U2RXPPS_PIN_LENGTH                                 0x3
#define _U2RXPPS_PIN_MASK                                   0x7
#define _U2RXPPS_PORT_POSN                                  0x3
#define _U2RXPPS_PORT_POSITION                              0x3
#define _U2RXPPS_PORT_SIZE                                  0x2
#define _U2RXPPS_PORT_LENGTH                                0x2
#define _U2RXPPS_PORT_MASK                                  0x18
#define _U2RXPPS_U2RXPPS_POSN                               0x0
#define _U2RXPPS_U2RXPPS_POSITION                           0x0
#define _U2RXPPS_U2RXPPS_SIZE                               0x5
#define _U2RXPPS_U2RXPPS_LENGTH                             0x5
#define _U2RXPPS_U2RXPPS_MASK                               0x1F
#define _U2RXPPS_U2RXPPS0_POSN                              0x0
#define _U2RXPPS_U2RXPPS0_POSITION                          0x0
#define _U2RXPPS_U2RXPPS0_SIZE                              0x1
#define _U2RXPPS_U2RXPPS0_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS0_MASK                              0x1
#define _U2RXPPS_U2RXPPS1_POSN                              0x1
#define _U2RXPPS_U2RXPPS1_POSITION                          0x1
#define _U2RXPPS_U2RXPPS1_SIZE                              0x1
#define _U2RXPPS_U2RXPPS1_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS1_MASK                              0x2
#define _U2RXPPS_U2RXPPS2_POSN                              0x2
#define _U2RXPPS_U2RXPPS2_POSITION                          0x2
#define _U2RXPPS_U2RXPPS2_SIZE                              0x1
#define _U2RXPPS_U2RXPPS2_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS2_MASK                              0x4
#define _U2RXPPS_U2RXPPS3_POSN                              0x3
#define _U2RXPPS_U2RXPPS3_POSITION                          0x3
#define _U2RXPPS_U2RXPPS3_SIZE                              0x1
#define _U2RXPPS_U2RXPPS3_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS3_MASK                              0x8
#define _U2RXPPS_U2RXPPS4_POSN                              0x4
#define _U2RXPPS_U2RXPPS4_POSITION                          0x4
#define _U2RXPPS_U2RXPPS4_SIZE                              0x1
#define _U2RXPPS_U2RXPPS4_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS4_MASK                              0x10

// Register: U2CTSPPS
#define U2CTSPPS U2CTSPPS
extern volatile unsigned char           U2CTSPPS            __at(0x275);
#ifndef _LIB_BUILD
asm("U2CTSPPS equ 0275h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned U2CTSPPS               :5;
    };
    struct {
        unsigned U2CTSPPS0              :1;
        unsigned U2CTSPPS1              :1;
        unsigned U2CTSPPS2              :1;
        unsigned U2CTSPPS3              :1;
        unsigned U2CTSPPS4              :1;
    };
} U2CTSPPSbits_t;
extern volatile U2CTSPPSbits_t U2CTSPPSbits __at(0x275);
// bitfield macros
#define _U2CTSPPS_PIN_POSN                                  0x0
#define _U2CTSPPS_PIN_POSITION                              0x0
#define _U2CTSPPS_PIN_SIZE                                  0x3
#define _U2CTSPPS_PIN_LENGTH                                0x3
#define _U2CTSPPS_PIN_MASK                                  0x7
#define _U2CTSPPS_PORT_POSN                                 0x3
#define _U2CTSPPS_PORT_POSITION                             0x3
#define _U2CTSPPS_PORT_SIZE                                 0x2
#define _U2CTSPPS_PORT_LENGTH                               0x2
#define _U2CTSPPS_PORT_MASK                                 0x18
#define _U2CTSPPS_U2CTSPPS_POSN                             0x0
#define _U2CTSPPS_U2CTSPPS_POSITION                         0x0
#define _U2CTSPPS_U2CTSPPS_SIZE                             0x5
#define _U2CTSPPS_U2CTSPPS_LENGTH                           0x5
#define _U2CTSPPS_U2CTSPPS_MASK                             0x1F
#define _U2CTSPPS_U2CTSPPS0_POSN                            0x0
#define _U2CTSPPS_U2CTSPPS0_POSITION                        0x0
#define _U2CTSPPS_U2CTSPPS0_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS0_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS0_MASK                            0x1
#define _U2CTSPPS_U2CTSPPS1_POSN                            0x1
#define _U2CTSPPS_U2CTSPPS1_POSITION                        0x1
#define _U2CTSPPS_U2CTSPPS1_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS1_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS1_MASK                            0x2
#define _U2CTSPPS_U2CTSPPS2_POSN                            0x2
#define _U2CTSPPS_U2CTSPPS2_POSITION                        0x2
#define _U2CTSPPS_U2CTSPPS2_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS2_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS2_MASK                            0x4
#define _U2CTSPPS_U2CTSPPS3_POSN                            0x3
#define _U2CTSPPS_U2CTSPPS3_POSITION                        0x3
#define _U2CTSPPS_U2CTSPPS3_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS3_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS3_MASK                            0x8
#define _U2CTSPPS_U2CTSPPS4_POSN                            0x4
#define _U2CTSPPS_U2CTSPPS4_POSITION                        0x4
#define _U2CTSPPS_U2CTSPPS4_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS4_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS4_MASK                            0x10

// Register: U3RXPPS
#define U3RXPPS U3RXPPS
extern volatile unsigned char           U3RXPPS             __at(0x276);
#ifndef _LIB_BUILD
asm("U3RXPPS equ 0276h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U3RXPPS                :6;
    };
    struct {
        unsigned U3RXPPS0               :1;
        unsigned U3RXPPS1               :1;
        unsigned U3RXPPS2               :1;
        unsigned U3RXPPS3               :1;
        unsigned U3RXPPS4               :1;
        unsigned U3RXPPS5               :1;
    };
} U3RXPPSbits_t;
extern volatile U3RXPPSbits_t U3RXPPSbits __at(0x276);
// bitfield macros
#define _U3RXPPS_PIN_POSN                                   0x0
#define _U3RXPPS_PIN_POSITION                               0x0
#define _U3RXPPS_PIN_SIZE                                   0x3
#define _U3RXPPS_PIN_LENGTH                                 0x3
#define _U3RXPPS_PIN_MASK                                   0x7
#define _U3RXPPS_PORT_POSN                                  0x3
#define _U3RXPPS_PORT_POSITION                              0x3
#define _U3RXPPS_PORT_SIZE                                  0x3
#define _U3RXPPS_PORT_LENGTH                                0x3
#define _U3RXPPS_PORT_MASK                                  0x38
#define _U3RXPPS_U3RXPPS_POSN                               0x0
#define _U3RXPPS_U3RXPPS_POSITION                           0x0
#define _U3RXPPS_U3RXPPS_SIZE                               0x6
#define _U3RXPPS_U3RXPPS_LENGTH                             0x6
#define _U3RXPPS_U3RXPPS_MASK                               0x3F
#define _U3RXPPS_U3RXPPS0_POSN                              0x0
#define _U3RXPPS_U3RXPPS0_POSITION                          0x0
#define _U3RXPPS_U3RXPPS0_SIZE                              0x1
#define _U3RXPPS_U3RXPPS0_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS0_MASK                              0x1
#define _U3RXPPS_U3RXPPS1_POSN                              0x1
#define _U3RXPPS_U3RXPPS1_POSITION                          0x1
#define _U3RXPPS_U3RXPPS1_SIZE                              0x1
#define _U3RXPPS_U3RXPPS1_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS1_MASK                              0x2
#define _U3RXPPS_U3RXPPS2_POSN                              0x2
#define _U3RXPPS_U3RXPPS2_POSITION                          0x2
#define _U3RXPPS_U3RXPPS2_SIZE                              0x1
#define _U3RXPPS_U3RXPPS2_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS2_MASK                              0x4
#define _U3RXPPS_U3RXPPS3_POSN                              0x3
#define _U3RXPPS_U3RXPPS3_POSITION                          0x3
#define _U3RXPPS_U3RXPPS3_SIZE                              0x1
#define _U3RXPPS_U3RXPPS3_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS3_MASK                              0x8
#define _U3RXPPS_U3RXPPS4_POSN                              0x4
#define _U3RXPPS_U3RXPPS4_POSITION                          0x4
#define _U3RXPPS_U3RXPPS4_SIZE                              0x1
#define _U3RXPPS_U3RXPPS4_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS4_MASK                              0x10
#define _U3RXPPS_U3RXPPS5_POSN                              0x5
#define _U3RXPPS_U3RXPPS5_POSITION                          0x5
#define _U3RXPPS_U3RXPPS5_SIZE                              0x1
#define _U3RXPPS_U3RXPPS5_LENGTH                            0x1
#define _U3RXPPS_U3RXPPS5_MASK                              0x20

// Register: U3CTSPPS
#define U3CTSPPS U3CTSPPS
extern volatile unsigned char           U3CTSPPS            __at(0x277);
#ifndef _LIB_BUILD
asm("U3CTSPPS equ 0277h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U3CTSPPS               :6;
    };
    struct {
        unsigned U3CTSPPS0              :1;
        unsigned U3CTSPPS1              :1;
        unsigned U3CTSPPS2              :1;
        unsigned U3CTSPPS3              :1;
        unsigned U3CTSPPS4              :1;
        unsigned U3CTSPPS5              :1;
    };
} U3CTSPPSbits_t;
extern volatile U3CTSPPSbits_t U3CTSPPSbits __at(0x277);
// bitfield macros
#define _U3CTSPPS_PIN_POSN                                  0x0
#define _U3CTSPPS_PIN_POSITION                              0x0
#define _U3CTSPPS_PIN_SIZE                                  0x3
#define _U3CTSPPS_PIN_LENGTH                                0x3
#define _U3CTSPPS_PIN_MASK                                  0x7
#define _U3CTSPPS_PORT_POSN                                 0x3
#define _U3CTSPPS_PORT_POSITION                             0x3
#define _U3CTSPPS_PORT_SIZE                                 0x3
#define _U3CTSPPS_PORT_LENGTH                               0x3
#define _U3CTSPPS_PORT_MASK                                 0x38
#define _U3CTSPPS_U3CTSPPS_POSN                             0x0
#define _U3CTSPPS_U3CTSPPS_POSITION                         0x0
#define _U3CTSPPS_U3CTSPPS_SIZE                             0x6
#define _U3CTSPPS_U3CTSPPS_LENGTH                           0x6
#define _U3CTSPPS_U3CTSPPS_MASK                             0x3F
#define _U3CTSPPS_U3CTSPPS0_POSN                            0x0
#define _U3CTSPPS_U3CTSPPS0_POSITION                        0x0
#define _U3CTSPPS_U3CTSPPS0_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS0_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS0_MASK                            0x1
#define _U3CTSPPS_U3CTSPPS1_POSN                            0x1
#define _U3CTSPPS_U3CTSPPS1_POSITION                        0x1
#define _U3CTSPPS_U3CTSPPS1_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS1_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS1_MASK                            0x2
#define _U3CTSPPS_U3CTSPPS2_POSN                            0x2
#define _U3CTSPPS_U3CTSPPS2_POSITION                        0x2
#define _U3CTSPPS_U3CTSPPS2_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS2_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS2_MASK                            0x4
#define _U3CTSPPS_U3CTSPPS3_POSN                            0x3
#define _U3CTSPPS_U3CTSPPS3_POSITION                        0x3
#define _U3CTSPPS_U3CTSPPS3_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS3_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS3_MASK                            0x8
#define _U3CTSPPS_U3CTSPPS4_POSN                            0x4
#define _U3CTSPPS_U3CTSPPS4_POSITION                        0x4
#define _U3CTSPPS_U3CTSPPS4_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS4_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS4_MASK                            0x10
#define _U3CTSPPS_U3CTSPPS5_POSN                            0x5
#define _U3CTSPPS_U3CTSPPS5_POSITION                        0x5
#define _U3CTSPPS_U3CTSPPS5_SIZE                            0x1
#define _U3CTSPPS_U3CTSPPS5_LENGTH                          0x1
#define _U3CTSPPS_U3CTSPPS5_MASK                            0x20

// Register: U4RXPPS
#define U4RXPPS U4RXPPS
extern volatile unsigned char           U4RXPPS             __at(0x278);
#ifndef _LIB_BUILD
asm("U4RXPPS equ 0278h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned U4RXPPS                :5;
    };
    struct {
        unsigned U4RXPPS0               :1;
        unsigned U4RXPPS1               :1;
        unsigned U4RXPPS2               :1;
        unsigned U4RXPPS3               :1;
        unsigned U4RXPPS4               :1;
    };
} U4RXPPSbits_t;
extern volatile U4RXPPSbits_t U4RXPPSbits __at(0x278);
// bitfield macros
#define _U4RXPPS_PIN_POSN                                   0x0
#define _U4RXPPS_PIN_POSITION                               0x0
#define _U4RXPPS_PIN_SIZE                                   0x3
#define _U4RXPPS_PIN_LENGTH                                 0x3
#define _U4RXPPS_PIN_MASK                                   0x7
#define _U4RXPPS_PORT_POSN                                  0x3
#define _U4RXPPS_PORT_POSITION                              0x3
#define _U4RXPPS_PORT_SIZE                                  0x2
#define _U4RXPPS_PORT_LENGTH                                0x2
#define _U4RXPPS_PORT_MASK                                  0x18
#define _U4RXPPS_U4RXPPS_POSN                               0x0
#define _U4RXPPS_U4RXPPS_POSITION                           0x0
#define _U4RXPPS_U4RXPPS_SIZE                               0x5
#define _U4RXPPS_U4RXPPS_LENGTH                             0x5
#define _U4RXPPS_U4RXPPS_MASK                               0x1F
#define _U4RXPPS_U4RXPPS0_POSN                              0x0
#define _U4RXPPS_U4RXPPS0_POSITION                          0x0
#define _U4RXPPS_U4RXPPS0_SIZE                              0x1
#define _U4RXPPS_U4RXPPS0_LENGTH                            0x1
#define _U4RXPPS_U4RXPPS0_MASK                              0x1
#define _U4RXPPS_U4RXPPS1_POSN                              0x1
#define _U4RXPPS_U4RXPPS1_POSITION                          0x1
#define _U4RXPPS_U4RXPPS1_SIZE                              0x1
#define _U4RXPPS_U4RXPPS1_LENGTH                            0x1
#define _U4RXPPS_U4RXPPS1_MASK                              0x2
#define _U4RXPPS_U4RXPPS2_POSN                              0x2
#define _U4RXPPS_U4RXPPS2_POSITION                          0x2
#define _U4RXPPS_U4RXPPS2_SIZE                              0x1
#define _U4RXPPS_U4RXPPS2_LENGTH                            0x1
#define _U4RXPPS_U4RXPPS2_MASK                              0x4
#define _U4RXPPS_U4RXPPS3_POSN                              0x3
#define _U4RXPPS_U4RXPPS3_POSITION                          0x3
#define _U4RXPPS_U4RXPPS3_SIZE                              0x1
#define _U4RXPPS_U4RXPPS3_LENGTH                            0x1
#define _U4RXPPS_U4RXPPS3_MASK                              0x8
#define _U4RXPPS_U4RXPPS4_POSN                              0x4
#define _U4RXPPS_U4RXPPS4_POSITION                          0x4
#define _U4RXPPS_U4RXPPS4_SIZE                              0x1
#define _U4RXPPS_U4RXPPS4_LENGTH                            0x1
#define _U4RXPPS_U4RXPPS4_MASK                              0x10

// Register: U4CTSPPS
#define U4CTSPPS U4CTSPPS
extern volatile unsigned char           U4CTSPPS            __at(0x279);
#ifndef _LIB_BUILD
asm("U4CTSPPS equ 0279h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned U4CTSPPS               :5;
    };
    struct {
        unsigned U4CTSPPS0              :1;
        unsigned U4CTSPPS1              :1;
        unsigned U4CTSPPS2              :1;
        unsigned U4CTSPPS3              :1;
        unsigned U4CTSPPS4              :1;
    };
} U4CTSPPSbits_t;
extern volatile U4CTSPPSbits_t U4CTSPPSbits __at(0x279);
// bitfield macros
#define _U4CTSPPS_PIN_POSN                                  0x0
#define _U4CTSPPS_PIN_POSITION                              0x0
#define _U4CTSPPS_PIN_SIZE                                  0x3
#define _U4CTSPPS_PIN_LENGTH                                0x3
#define _U4CTSPPS_PIN_MASK                                  0x7
#define _U4CTSPPS_PORT_POSN                                 0x3
#define _U4CTSPPS_PORT_POSITION                             0x3
#define _U4CTSPPS_PORT_SIZE                                 0x2
#define _U4CTSPPS_PORT_LENGTH                               0x2
#define _U4CTSPPS_PORT_MASK                                 0x18
#define _U4CTSPPS_U4CTSPPS_POSN                             0x0
#define _U4CTSPPS_U4CTSPPS_POSITION                         0x0
#define _U4CTSPPS_U4CTSPPS_SIZE                             0x5
#define _U4CTSPPS_U4CTSPPS_LENGTH                           0x5
#define _U4CTSPPS_U4CTSPPS_MASK                             0x1F
#define _U4CTSPPS_U4CTSPPS0_POSN                            0x0
#define _U4CTSPPS_U4CTSPPS0_POSITION                        0x0
#define _U4CTSPPS_U4CTSPPS0_SIZE                            0x1
#define _U4CTSPPS_U4CTSPPS0_LENGTH                          0x1
#define _U4CTSPPS_U4CTSPPS0_MASK                            0x1
#define _U4CTSPPS_U4CTSPPS1_POSN                            0x1
#define _U4CTSPPS_U4CTSPPS1_POSITION                        0x1
#define _U4CTSPPS_U4CTSPPS1_SIZE                            0x1
#define _U4CTSPPS_U4CTSPPS1_LENGTH                          0x1
#define _U4CTSPPS_U4CTSPPS1_MASK                            0x2
#define _U4CTSPPS_U4CTSPPS2_POSN                            0x2
#define _U4CTSPPS_U4CTSPPS2_POSITION                        0x2
#define _U4CTSPPS_U4CTSPPS2_SIZE                            0x1
#define _U4CTSPPS_U4CTSPPS2_LENGTH                          0x1
#define _U4CTSPPS_U4CTSPPS2_MASK                            0x4
#define _U4CTSPPS_U4CTSPPS3_POSN                            0x3
#define _U4CTSPPS_U4CTSPPS3_POSITION                        0x3
#define _U4CTSPPS_U4CTSPPS3_SIZE                            0x1
#define _U4CTSPPS_U4CTSPPS3_LENGTH                          0x1
#define _U4CTSPPS_U4CTSPPS3_MASK                            0x8
#define _U4CTSPPS_U4CTSPPS4_POSN                            0x4
#define _U4CTSPPS_U4CTSPPS4_POSITION                        0x4
#define _U4CTSPPS_U4CTSPPS4_SIZE                            0x1
#define _U4CTSPPS_U4CTSPPS4_LENGTH                          0x1
#define _U4CTSPPS_U4CTSPPS4_MASK                            0x10

// Register: U5RXPPS
#define U5RXPPS U5RXPPS
extern volatile unsigned char           U5RXPPS             __at(0x27A);
#ifndef _LIB_BUILD
asm("U5RXPPS equ 027Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U5RXPPS                :6;
    };
    struct {
        unsigned U5RXPPS0               :1;
        unsigned U5RXPPS1               :1;
        unsigned U5RXPPS2               :1;
        unsigned U5RXPPS3               :1;
        unsigned U5RXPPS4               :1;
        unsigned U5RXPPS5               :1;
    };
} U5RXPPSbits_t;
extern volatile U5RXPPSbits_t U5RXPPSbits __at(0x27A);
// bitfield macros
#define _U5RXPPS_PIN_POSN                                   0x0
#define _U5RXPPS_PIN_POSITION                               0x0
#define _U5RXPPS_PIN_SIZE                                   0x3
#define _U5RXPPS_PIN_LENGTH                                 0x3
#define _U5RXPPS_PIN_MASK                                   0x7
#define _U5RXPPS_PORT_POSN                                  0x3
#define _U5RXPPS_PORT_POSITION                              0x3
#define _U5RXPPS_PORT_SIZE                                  0x3
#define _U5RXPPS_PORT_LENGTH                                0x3
#define _U5RXPPS_PORT_MASK                                  0x38
#define _U5RXPPS_U5RXPPS_POSN                               0x0
#define _U5RXPPS_U5RXPPS_POSITION                           0x0
#define _U5RXPPS_U5RXPPS_SIZE                               0x6
#define _U5RXPPS_U5RXPPS_LENGTH                             0x6
#define _U5RXPPS_U5RXPPS_MASK                               0x3F
#define _U5RXPPS_U5RXPPS0_POSN                              0x0
#define _U5RXPPS_U5RXPPS0_POSITION                          0x0
#define _U5RXPPS_U5RXPPS0_SIZE                              0x1
#define _U5RXPPS_U5RXPPS0_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS0_MASK                              0x1
#define _U5RXPPS_U5RXPPS1_POSN                              0x1
#define _U5RXPPS_U5RXPPS1_POSITION                          0x1
#define _U5RXPPS_U5RXPPS1_SIZE                              0x1
#define _U5RXPPS_U5RXPPS1_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS1_MASK                              0x2
#define _U5RXPPS_U5RXPPS2_POSN                              0x2
#define _U5RXPPS_U5RXPPS2_POSITION                          0x2
#define _U5RXPPS_U5RXPPS2_SIZE                              0x1
#define _U5RXPPS_U5RXPPS2_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS2_MASK                              0x4
#define _U5RXPPS_U5RXPPS3_POSN                              0x3
#define _U5RXPPS_U5RXPPS3_POSITION                          0x3
#define _U5RXPPS_U5RXPPS3_SIZE                              0x1
#define _U5RXPPS_U5RXPPS3_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS3_MASK                              0x8
#define _U5RXPPS_U5RXPPS4_POSN                              0x4
#define _U5RXPPS_U5RXPPS4_POSITION                          0x4
#define _U5RXPPS_U5RXPPS4_SIZE                              0x1
#define _U5RXPPS_U5RXPPS4_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS4_MASK                              0x10
#define _U5RXPPS_U5RXPPS5_POSN                              0x5
#define _U5RXPPS_U5RXPPS5_POSITION                          0x5
#define _U5RXPPS_U5RXPPS5_SIZE                              0x1
#define _U5RXPPS_U5RXPPS5_LENGTH                            0x1
#define _U5RXPPS_U5RXPPS5_MASK                              0x20

// Register: U5CTSPPS
#define U5CTSPPS U5CTSPPS
extern volatile unsigned char           U5CTSPPS            __at(0x27B);
#ifndef _LIB_BUILD
asm("U5CTSPPS equ 027Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :3;
    };
    struct {
        unsigned U5CTSPPS               :6;
    };
    struct {
        unsigned U5CTSPPS0              :1;
        unsigned U5CTSPPS1              :1;
        unsigned U5CTSPPS2              :1;
        unsigned U5CTSPPS3              :1;
        unsigned U5CTSPPS4              :1;
        unsigned U5CTSPPS5              :1;
    };
} U5CTSPPSbits_t;
extern volatile U5CTSPPSbits_t U5CTSPPSbits __at(0x27B);
// bitfield macros
#define _U5CTSPPS_PIN_POSN                                  0x0
#define _U5CTSPPS_PIN_POSITION                              0x0
#define _U5CTSPPS_PIN_SIZE                                  0x3
#define _U5CTSPPS_PIN_LENGTH                                0x3
#define _U5CTSPPS_PIN_MASK                                  0x7
#define _U5CTSPPS_PORT_POSN                                 0x3
#define _U5CTSPPS_PORT_POSITION                             0x3
#define _U5CTSPPS_PORT_SIZE                                 0x3
#define _U5CTSPPS_PORT_LENGTH                               0x3
#define _U5CTSPPS_PORT_MASK                                 0x38
#define _U5CTSPPS_U5CTSPPS_POSN                             0x0
#define _U5CTSPPS_U5CTSPPS_POSITION                         0x0
#define _U5CTSPPS_U5CTSPPS_SIZE                             0x6
#define _U5CTSPPS_U5CTSPPS_LENGTH                           0x6
#define _U5CTSPPS_U5CTSPPS_MASK                             0x3F
#define _U5CTSPPS_U5CTSPPS0_POSN                            0x0
#define _U5CTSPPS_U5CTSPPS0_POSITION                        0x0
#define _U5CTSPPS_U5CTSPPS0_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS0_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS0_MASK                            0x1
#define _U5CTSPPS_U5CTSPPS1_POSN                            0x1
#define _U5CTSPPS_U5CTSPPS1_POSITION                        0x1
#define _U5CTSPPS_U5CTSPPS1_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS1_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS1_MASK                            0x2
#define _U5CTSPPS_U5CTSPPS2_POSN                            0x2
#define _U5CTSPPS_U5CTSPPS2_POSITION                        0x2
#define _U5CTSPPS_U5CTSPPS2_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS2_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS2_MASK                            0x4
#define _U5CTSPPS_U5CTSPPS3_POSN                            0x3
#define _U5CTSPPS_U5CTSPPS3_POSITION                        0x3
#define _U5CTSPPS_U5CTSPPS3_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS3_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS3_MASK                            0x8
#define _U5CTSPPS_U5CTSPPS4_POSN                            0x4
#define _U5CTSPPS_U5CTSPPS4_POSITION                        0x4
#define _U5CTSPPS_U5CTSPPS4_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS4_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS4_MASK                            0x10
#define _U5CTSPPS_U5CTSPPS5_POSN                            0x5
#define _U5CTSPPS_U5CTSPPS5_POSITION                        0x5
#define _U5CTSPPS_U5CTSPPS5_SIZE                            0x1
#define _U5CTSPPS_U5CTSPPS5_LENGTH                          0x1
#define _U5CTSPPS_U5CTSPPS5_MASK                            0x20

// Register: RC4I2C
#define RC4I2C RC4I2C
extern volatile unsigned char           RC4I2C              __at(0x286);
#ifndef _LIB_BUILD
asm("RC4I2C equ 0286h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :2;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
        unsigned SLEW0                  :1;
        unsigned SLEW1                  :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :2;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
        unsigned I2CSLEW0               :1;
        unsigned I2CSLEW1               :1;
    };
} RC4I2Cbits_t;
extern volatile RC4I2Cbits_t RC4I2Cbits __at(0x286);
// bitfield macros
#define _RC4I2C_TH_POSN                                     0x0
#define _RC4I2C_TH_POSITION                                 0x0
#define _RC4I2C_TH_SIZE                                     0x2
#define _RC4I2C_TH_LENGTH                                   0x2
#define _RC4I2C_TH_MASK                                     0x3
#define _RC4I2C_PU_POSN                                     0x4
#define _RC4I2C_PU_POSITION                                 0x4
#define _RC4I2C_PU_SIZE                                     0x2
#define _RC4I2C_PU_LENGTH                                   0x2
#define _RC4I2C_PU_MASK                                     0x30
#define _RC4I2C_SLEW_POSN                                   0x6
#define _RC4I2C_SLEW_POSITION                               0x6
#define _RC4I2C_SLEW_SIZE                                   0x2
#define _RC4I2C_SLEW_LENGTH                                 0x2
#define _RC4I2C_SLEW_MASK                                   0xC0
#define _RC4I2C_TH0_POSN                                    0x0
#define _RC4I2C_TH0_POSITION                                0x0
#define _RC4I2C_TH0_SIZE                                    0x1
#define _RC4I2C_TH0_LENGTH                                  0x1
#define _RC4I2C_TH0_MASK                                    0x1
#define _RC4I2C_TH1_POSN                                    0x1
#define _RC4I2C_TH1_POSITION                                0x1
#define _RC4I2C_TH1_SIZE                                    0x1
#define _RC4I2C_TH1_LENGTH                                  0x1
#define _RC4I2C_TH1_MASK                                    0x2
#define _RC4I2C_PU0_POSN                                    0x4
#define _RC4I2C_PU0_POSITION                                0x4
#define _RC4I2C_PU0_SIZE                                    0x1
#define _RC4I2C_PU0_LENGTH                                  0x1
#define _RC4I2C_PU0_MASK                                    0x10
#define _RC4I2C_PU1_POSN                                    0x5
#define _RC4I2C_PU1_POSITION                                0x5
#define _RC4I2C_PU1_SIZE                                    0x1
#define _RC4I2C_PU1_LENGTH                                  0x1
#define _RC4I2C_PU1_MASK                                    0x20
#define _RC4I2C_SLEW0_POSN                                  0x6
#define _RC4I2C_SLEW0_POSITION                              0x6
#define _RC4I2C_SLEW0_SIZE                                  0x1
#define _RC4I2C_SLEW0_LENGTH                                0x1
#define _RC4I2C_SLEW0_MASK                                  0x40
#define _RC4I2C_SLEW1_POSN                                  0x7
#define _RC4I2C_SLEW1_POSITION                              0x7
#define _RC4I2C_SLEW1_SIZE                                  0x1
#define _RC4I2C_SLEW1_LENGTH                                0x1
#define _RC4I2C_SLEW1_MASK                                  0x80
#define _RC4I2C_I2CTH_POSN                                  0x0
#define _RC4I2C_I2CTH_POSITION                              0x0
#define _RC4I2C_I2CTH_SIZE                                  0x2
#define _RC4I2C_I2CTH_LENGTH                                0x2
#define _RC4I2C_I2CTH_MASK                                  0x3
#define _RC4I2C_I2CPU_POSN                                  0x4
#define _RC4I2C_I2CPU_POSITION                              0x4
#define _RC4I2C_I2CPU_SIZE                                  0x2
#define _RC4I2C_I2CPU_LENGTH                                0x2
#define _RC4I2C_I2CPU_MASK                                  0x30
#define _RC4I2C_I2CSLEW_POSN                                0x6
#define _RC4I2C_I2CSLEW_POSITION                            0x6
#define _RC4I2C_I2CSLEW_SIZE                                0x2
#define _RC4I2C_I2CSLEW_LENGTH                              0x2
#define _RC4I2C_I2CSLEW_MASK                                0xC0
#define _RC4I2C_I2CTH0_POSN                                 0x0
#define _RC4I2C_I2CTH0_POSITION                             0x0
#define _RC4I2C_I2CTH0_SIZE                                 0x1
#define _RC4I2C_I2CTH0_LENGTH                               0x1
#define _RC4I2C_I2CTH0_MASK                                 0x1
#define _RC4I2C_I2CTH1_POSN                                 0x1
#define _RC4I2C_I2CTH1_POSITION                             0x1
#define _RC4I2C_I2CTH1_SIZE                                 0x1
#define _RC4I2C_I2CTH1_LENGTH                               0x1
#define _RC4I2C_I2CTH1_MASK                                 0x2
#define _RC4I2C_I2CPU0_POSN                                 0x4
#define _RC4I2C_I2CPU0_POSITION                             0x4
#define _RC4I2C_I2CPU0_SIZE                                 0x1
#define _RC4I2C_I2CPU0_LENGTH                               0x1
#define _RC4I2C_I2CPU0_MASK                                 0x10
#define _RC4I2C_I2CPU1_POSN                                 0x5
#define _RC4I2C_I2CPU1_POSITION                             0x5
#define _RC4I2C_I2CPU1_SIZE                                 0x1
#define _RC4I2C_I2CPU1_LENGTH                               0x1
#define _RC4I2C_I2CPU1_MASK                                 0x20
#define _RC4I2C_I2CSLEW0_POSN                               0x6
#define _RC4I2C_I2CSLEW0_POSITION                           0x6
#define _RC4I2C_I2CSLEW0_SIZE                               0x1
#define _RC4I2C_I2CSLEW0_LENGTH                             0x1
#define _RC4I2C_I2CSLEW0_MASK                               0x40
#define _RC4I2C_I2CSLEW1_POSN                               0x7
#define _RC4I2C_I2CSLEW1_POSITION                           0x7
#define _RC4I2C_I2CSLEW1_SIZE                               0x1
#define _RC4I2C_I2CSLEW1_LENGTH                             0x1
#define _RC4I2C_I2CSLEW1_MASK                               0x80

// Register: RC3I2C
#define RC3I2C RC3I2C
extern volatile unsigned char           RC3I2C              __at(0x287);
#ifndef _LIB_BUILD
asm("RC3I2C equ 0287h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :2;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
        unsigned SLEW0                  :1;
        unsigned SLEW1                  :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :2;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
        unsigned I2CSLEW0               :1;
        unsigned I2CSLEW1               :1;
    };
} RC3I2Cbits_t;
extern volatile RC3I2Cbits_t RC3I2Cbits __at(0x287);
// bitfield macros
#define _RC3I2C_TH_POSN                                     0x0
#define _RC3I2C_TH_POSITION                                 0x0
#define _RC3I2C_TH_SIZE                                     0x2
#define _RC3I2C_TH_LENGTH                                   0x2
#define _RC3I2C_TH_MASK                                     0x3
#define _RC3I2C_PU_POSN                                     0x4
#define _RC3I2C_PU_POSITION                                 0x4
#define _RC3I2C_PU_SIZE                                     0x2
#define _RC3I2C_PU_LENGTH                                   0x2
#define _RC3I2C_PU_MASK                                     0x30
#define _RC3I2C_SLEW_POSN                                   0x6
#define _RC3I2C_SLEW_POSITION                               0x6
#define _RC3I2C_SLEW_SIZE                                   0x2
#define _RC3I2C_SLEW_LENGTH                                 0x2
#define _RC3I2C_SLEW_MASK                                   0xC0
#define _RC3I2C_TH0_POSN                                    0x0
#define _RC3I2C_TH0_POSITION                                0x0
#define _RC3I2C_TH0_SIZE                                    0x1
#define _RC3I2C_TH0_LENGTH                                  0x1
#define _RC3I2C_TH0_MASK                                    0x1
#define _RC3I2C_TH1_POSN                                    0x1
#define _RC3I2C_TH1_POSITION                                0x1
#define _RC3I2C_TH1_SIZE                                    0x1
#define _RC3I2C_TH1_LENGTH                                  0x1
#define _RC3I2C_TH1_MASK                                    0x2
#define _RC3I2C_PU0_POSN                                    0x4
#define _RC3I2C_PU0_POSITION                                0x4
#define _RC3I2C_PU0_SIZE                                    0x1
#define _RC3I2C_PU0_LENGTH                                  0x1
#define _RC3I2C_PU0_MASK                                    0x10
#define _RC3I2C_PU1_POSN                                    0x5
#define _RC3I2C_PU1_POSITION                                0x5
#define _RC3I2C_PU1_SIZE                                    0x1
#define _RC3I2C_PU1_LENGTH                                  0x1
#define _RC3I2C_PU1_MASK                                    0x20
#define _RC3I2C_SLEW0_POSN                                  0x6
#define _RC3I2C_SLEW0_POSITION                              0x6
#define _RC3I2C_SLEW0_SIZE                                  0x1
#define _RC3I2C_SLEW0_LENGTH                                0x1
#define _RC3I2C_SLEW0_MASK                                  0x40
#define _RC3I2C_SLEW1_POSN                                  0x7
#define _RC3I2C_SLEW1_POSITION                              0x7
#define _RC3I2C_SLEW1_SIZE                                  0x1
#define _RC3I2C_SLEW1_LENGTH                                0x1
#define _RC3I2C_SLEW1_MASK                                  0x80
#define _RC3I2C_I2CTH_POSN                                  0x0
#define _RC3I2C_I2CTH_POSITION                              0x0
#define _RC3I2C_I2CTH_SIZE                                  0x2
#define _RC3I2C_I2CTH_LENGTH                                0x2
#define _RC3I2C_I2CTH_MASK                                  0x3
#define _RC3I2C_I2CPU_POSN                                  0x4
#define _RC3I2C_I2CPU_POSITION                              0x4
#define _RC3I2C_I2CPU_SIZE                                  0x2
#define _RC3I2C_I2CPU_LENGTH                                0x2
#define _RC3I2C_I2CPU_MASK                                  0x30
#define _RC3I2C_I2CSLEW_POSN                                0x6
#define _RC3I2C_I2CSLEW_POSITION                            0x6
#define _RC3I2C_I2CSLEW_SIZE                                0x2
#define _RC3I2C_I2CSLEW_LENGTH                              0x2
#define _RC3I2C_I2CSLEW_MASK                                0xC0
#define _RC3I2C_I2CTH0_POSN                                 0x0
#define _RC3I2C_I2CTH0_POSITION                             0x0
#define _RC3I2C_I2CTH0_SIZE                                 0x1
#define _RC3I2C_I2CTH0_LENGTH                               0x1
#define _RC3I2C_I2CTH0_MASK                                 0x1
#define _RC3I2C_I2CTH1_POSN                                 0x1
#define _RC3I2C_I2CTH1_POSITION                             0x1
#define _RC3I2C_I2CTH1_SIZE                                 0x1
#define _RC3I2C_I2CTH1_LENGTH                               0x1
#define _RC3I2C_I2CTH1_MASK                                 0x2
#define _RC3I2C_I2CPU0_POSN                                 0x4
#define _RC3I2C_I2CPU0_POSITION                             0x4
#define _RC3I2C_I2CPU0_SIZE                                 0x1
#define _RC3I2C_I2CPU0_LENGTH                               0x1
#define _RC3I2C_I2CPU0_MASK                                 0x10
#define _RC3I2C_I2CPU1_POSN                                 0x5
#define _RC3I2C_I2CPU1_POSITION                             0x5
#define _RC3I2C_I2CPU1_SIZE                                 0x1
#define _RC3I2C_I2CPU1_LENGTH                               0x1
#define _RC3I2C_I2CPU1_MASK                                 0x20
#define _RC3I2C_I2CSLEW0_POSN                               0x6
#define _RC3I2C_I2CSLEW0_POSITION                           0x6
#define _RC3I2C_I2CSLEW0_SIZE                               0x1
#define _RC3I2C_I2CSLEW0_LENGTH                             0x1
#define _RC3I2C_I2CSLEW0_MASK                               0x40
#define _RC3I2C_I2CSLEW1_POSN                               0x7
#define _RC3I2C_I2CSLEW1_POSITION                           0x7
#define _RC3I2C_I2CSLEW1_SIZE                               0x1
#define _RC3I2C_I2CSLEW1_LENGTH                             0x1
#define _RC3I2C_I2CSLEW1_MASK                               0x80

// Register: RB2I2C
#define RB2I2C RB2I2C
extern volatile unsigned char           RB2I2C              __at(0x288);
#ifndef _LIB_BUILD
asm("RB2I2C equ 0288h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :2;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
        unsigned SLEW0                  :1;
        unsigned SLEW1                  :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :2;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
        unsigned I2CSLEW0               :1;
        unsigned I2CSLEW1               :1;
    };
} RB2I2Cbits_t;
extern volatile RB2I2Cbits_t RB2I2Cbits __at(0x288);
// bitfield macros
#define _RB2I2C_TH_POSN                                     0x0
#define _RB2I2C_TH_POSITION                                 0x0
#define _RB2I2C_TH_SIZE                                     0x2
#define _RB2I2C_TH_LENGTH                                   0x2
#define _RB2I2C_TH_MASK                                     0x3
#define _RB2I2C_PU_POSN                                     0x4
#define _RB2I2C_PU_POSITION                                 0x4
#define _RB2I2C_PU_SIZE                                     0x2
#define _RB2I2C_PU_LENGTH                                   0x2
#define _RB2I2C_PU_MASK                                     0x30
#define _RB2I2C_SLEW_POSN                                   0x6
#define _RB2I2C_SLEW_POSITION                               0x6
#define _RB2I2C_SLEW_SIZE                                   0x2
#define _RB2I2C_SLEW_LENGTH                                 0x2
#define _RB2I2C_SLEW_MASK                                   0xC0
#define _RB2I2C_TH0_POSN                                    0x0
#define _RB2I2C_TH0_POSITION                                0x0
#define _RB2I2C_TH0_SIZE                                    0x1
#define _RB2I2C_TH0_LENGTH                                  0x1
#define _RB2I2C_TH0_MASK                                    0x1
#define _RB2I2C_TH1_POSN                                    0x1
#define _RB2I2C_TH1_POSITION                                0x1
#define _RB2I2C_TH1_SIZE                                    0x1
#define _RB2I2C_TH1_LENGTH                                  0x1
#define _RB2I2C_TH1_MASK                                    0x2
#define _RB2I2C_PU0_POSN                                    0x4
#define _RB2I2C_PU0_POSITION                                0x4
#define _RB2I2C_PU0_SIZE                                    0x1
#define _RB2I2C_PU0_LENGTH                                  0x1
#define _RB2I2C_PU0_MASK                                    0x10
#define _RB2I2C_PU1_POSN                                    0x5
#define _RB2I2C_PU1_POSITION                                0x5
#define _RB2I2C_PU1_SIZE                                    0x1
#define _RB2I2C_PU1_LENGTH                                  0x1
#define _RB2I2C_PU1_MASK                                    0x20
#define _RB2I2C_SLEW0_POSN                                  0x6
#define _RB2I2C_SLEW0_POSITION                              0x6
#define _RB2I2C_SLEW0_SIZE                                  0x1
#define _RB2I2C_SLEW0_LENGTH                                0x1
#define _RB2I2C_SLEW0_MASK                                  0x40
#define _RB2I2C_SLEW1_POSN                                  0x7
#define _RB2I2C_SLEW1_POSITION                              0x7
#define _RB2I2C_SLEW1_SIZE                                  0x1
#define _RB2I2C_SLEW1_LENGTH                                0x1
#define _RB2I2C_SLEW1_MASK                                  0x80
#define _RB2I2C_I2CTH_POSN                                  0x0
#define _RB2I2C_I2CTH_POSITION                              0x0
#define _RB2I2C_I2CTH_SIZE                                  0x2
#define _RB2I2C_I2CTH_LENGTH                                0x2
#define _RB2I2C_I2CTH_MASK                                  0x3
#define _RB2I2C_I2CPU_POSN                                  0x4
#define _RB2I2C_I2CPU_POSITION                              0x4
#define _RB2I2C_I2CPU_SIZE                                  0x2
#define _RB2I2C_I2CPU_LENGTH                                0x2
#define _RB2I2C_I2CPU_MASK                                  0x30
#define _RB2I2C_I2CSLEW_POSN                                0x6
#define _RB2I2C_I2CSLEW_POSITION                            0x6
#define _RB2I2C_I2CSLEW_SIZE                                0x2
#define _RB2I2C_I2CSLEW_LENGTH                              0x2
#define _RB2I2C_I2CSLEW_MASK                                0xC0
#define _RB2I2C_I2CTH0_POSN                                 0x0
#define _RB2I2C_I2CTH0_POSITION                             0x0
#define _RB2I2C_I2CTH0_SIZE                                 0x1
#define _RB2I2C_I2CTH0_LENGTH                               0x1
#define _RB2I2C_I2CTH0_MASK                                 0x1
#define _RB2I2C_I2CTH1_POSN                                 0x1
#define _RB2I2C_I2CTH1_POSITION                             0x1
#define _RB2I2C_I2CTH1_SIZE                                 0x1
#define _RB2I2C_I2CTH1_LENGTH                               0x1
#define _RB2I2C_I2CTH1_MASK                                 0x2
#define _RB2I2C_I2CPU0_POSN                                 0x4
#define _RB2I2C_I2CPU0_POSITION                             0x4
#define _RB2I2C_I2CPU0_SIZE                                 0x1
#define _RB2I2C_I2CPU0_LENGTH                               0x1
#define _RB2I2C_I2CPU0_MASK                                 0x10
#define _RB2I2C_I2CPU1_POSN                                 0x5
#define _RB2I2C_I2CPU1_POSITION                             0x5
#define _RB2I2C_I2CPU1_SIZE                                 0x1
#define _RB2I2C_I2CPU1_LENGTH                               0x1
#define _RB2I2C_I2CPU1_MASK                                 0x20
#define _RB2I2C_I2CSLEW0_POSN                               0x6
#define _RB2I2C_I2CSLEW0_POSITION                           0x6
#define _RB2I2C_I2CSLEW0_SIZE                               0x1
#define _RB2I2C_I2CSLEW0_LENGTH                             0x1
#define _RB2I2C_I2CSLEW0_MASK                               0x40
#define _RB2I2C_I2CSLEW1_POSN                               0x7
#define _RB2I2C_I2CSLEW1_POSITION                           0x7
#define _RB2I2C_I2CSLEW1_SIZE                               0x1
#define _RB2I2C_I2CSLEW1_LENGTH                             0x1
#define _RB2I2C_I2CSLEW1_MASK                               0x80

// Register: RB1I2C
#define RB1I2C RB1I2C
extern volatile unsigned char           RB1I2C              __at(0x289);
#ifndef _LIB_BUILD
asm("RB1I2C equ 0289h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :2;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
        unsigned SLEW0                  :1;
        unsigned SLEW1                  :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :2;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
        unsigned I2CSLEW0               :1;
        unsigned I2CSLEW1               :1;
    };
} RB1I2Cbits_t;
extern volatile RB1I2Cbits_t RB1I2Cbits __at(0x289);
// bitfield macros
#define _RB1I2C_TH_POSN                                     0x0
#define _RB1I2C_TH_POSITION                                 0x0
#define _RB1I2C_TH_SIZE                                     0x2
#define _RB1I2C_TH_LENGTH                                   0x2
#define _RB1I2C_TH_MASK                                     0x3
#define _RB1I2C_PU_POSN                                     0x4
#define _RB1I2C_PU_POSITION                                 0x4
#define _RB1I2C_PU_SIZE                                     0x2
#define _RB1I2C_PU_LENGTH                                   0x2
#define _RB1I2C_PU_MASK                                     0x30
#define _RB1I2C_SLEW_POSN                                   0x6
#define _RB1I2C_SLEW_POSITION                               0x6
#define _RB1I2C_SLEW_SIZE                                   0x2
#define _RB1I2C_SLEW_LENGTH                                 0x2
#define _RB1I2C_SLEW_MASK                                   0xC0
#define _RB1I2C_TH0_POSN                                    0x0
#define _RB1I2C_TH0_POSITION                                0x0
#define _RB1I2C_TH0_SIZE                                    0x1
#define _RB1I2C_TH0_LENGTH                                  0x1
#define _RB1I2C_TH0_MASK                                    0x1
#define _RB1I2C_TH1_POSN                                    0x1
#define _RB1I2C_TH1_POSITION                                0x1
#define _RB1I2C_TH1_SIZE                                    0x1
#define _RB1I2C_TH1_LENGTH                                  0x1
#define _RB1I2C_TH1_MASK                                    0x2
#define _RB1I2C_PU0_POSN                                    0x4
#define _RB1I2C_PU0_POSITION                                0x4
#define _RB1I2C_PU0_SIZE                                    0x1
#define _RB1I2C_PU0_LENGTH                                  0x1
#define _RB1I2C_PU0_MASK                                    0x10
#define _RB1I2C_PU1_POSN                                    0x5
#define _RB1I2C_PU1_POSITION                                0x5
#define _RB1I2C_PU1_SIZE                                    0x1
#define _RB1I2C_PU1_LENGTH                                  0x1
#define _RB1I2C_PU1_MASK                                    0x20
#define _RB1I2C_SLEW0_POSN                                  0x6
#define _RB1I2C_SLEW0_POSITION                              0x6
#define _RB1I2C_SLEW0_SIZE                                  0x1
#define _RB1I2C_SLEW0_LENGTH                                0x1
#define _RB1I2C_SLEW0_MASK                                  0x40
#define _RB1I2C_SLEW1_POSN                                  0x7
#define _RB1I2C_SLEW1_POSITION                              0x7
#define _RB1I2C_SLEW1_SIZE                                  0x1
#define _RB1I2C_SLEW1_LENGTH                                0x1
#define _RB1I2C_SLEW1_MASK                                  0x80
#define _RB1I2C_I2CTH_POSN                                  0x0
#define _RB1I2C_I2CTH_POSITION                              0x0
#define _RB1I2C_I2CTH_SIZE                                  0x2
#define _RB1I2C_I2CTH_LENGTH                                0x2
#define _RB1I2C_I2CTH_MASK                                  0x3
#define _RB1I2C_I2CPU_POSN                                  0x4
#define _RB1I2C_I2CPU_POSITION                              0x4
#define _RB1I2C_I2CPU_SIZE                                  0x2
#define _RB1I2C_I2CPU_LENGTH                                0x2
#define _RB1I2C_I2CPU_MASK                                  0x30
#define _RB1I2C_I2CSLEW_POSN                                0x6
#define _RB1I2C_I2CSLEW_POSITION                            0x6
#define _RB1I2C_I2CSLEW_SIZE                                0x2
#define _RB1I2C_I2CSLEW_LENGTH                              0x2
#define _RB1I2C_I2CSLEW_MASK                                0xC0
#define _RB1I2C_I2CTH0_POSN                                 0x0
#define _RB1I2C_I2CTH0_POSITION                             0x0
#define _RB1I2C_I2CTH0_SIZE                                 0x1
#define _RB1I2C_I2CTH0_LENGTH                               0x1
#define _RB1I2C_I2CTH0_MASK                                 0x1
#define _RB1I2C_I2CTH1_POSN                                 0x1
#define _RB1I2C_I2CTH1_POSITION                             0x1
#define _RB1I2C_I2CTH1_SIZE                                 0x1
#define _RB1I2C_I2CTH1_LENGTH                               0x1
#define _RB1I2C_I2CTH1_MASK                                 0x2
#define _RB1I2C_I2CPU0_POSN                                 0x4
#define _RB1I2C_I2CPU0_POSITION                             0x4
#define _RB1I2C_I2CPU0_SIZE                                 0x1
#define _RB1I2C_I2CPU0_LENGTH                               0x1
#define _RB1I2C_I2CPU0_MASK                                 0x10
#define _RB1I2C_I2CPU1_POSN                                 0x5
#define _RB1I2C_I2CPU1_POSITION                             0x5
#define _RB1I2C_I2CPU1_SIZE                                 0x1
#define _RB1I2C_I2CPU1_LENGTH                               0x1
#define _RB1I2C_I2CPU1_MASK                                 0x20
#define _RB1I2C_I2CSLEW0_POSN                               0x6
#define _RB1I2C_I2CSLEW0_POSITION                           0x6
#define _RB1I2C_I2CSLEW0_SIZE                               0x1
#define _RB1I2C_I2CSLEW0_LENGTH                             0x1
#define _RB1I2C_I2CSLEW0_MASK                               0x40
#define _RB1I2C_I2CSLEW1_POSN                               0x7
#define _RB1I2C_I2CSLEW1_POSITION                           0x7
#define _RB1I2C_I2CSLEW1_SIZE                               0x1
#define _RB1I2C_I2CSLEW1_LENGTH                             0x1
#define _RB1I2C_I2CSLEW1_MASK                               0x80

// Register: I2C1RXB
#define I2C1RXB I2C1RXB
extern volatile unsigned char           I2C1RXB             __at(0x28B);
#ifndef _LIB_BUILD
asm("I2C1RXB equ 028Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} I2C1RXBbits_t;
extern volatile I2C1RXBbits_t I2C1RXBbits __at(0x28B);
// bitfield macros
#define _I2C1RXB_RXB_POSN                                   0x0
#define _I2C1RXB_RXB_POSITION                               0x0
#define _I2C1RXB_RXB_SIZE                                   0x8
#define _I2C1RXB_RXB_LENGTH                                 0x8
#define _I2C1RXB_RXB_MASK                                   0xFF

// Register: I2C1TXB
#define I2C1TXB I2C1TXB
extern volatile unsigned char           I2C1TXB             __at(0x28C);
#ifndef _LIB_BUILD
asm("I2C1TXB equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} I2C1TXBbits_t;
extern volatile I2C1TXBbits_t I2C1TXBbits __at(0x28C);
// bitfield macros
#define _I2C1TXB_TXB_POSN                                   0x0
#define _I2C1TXB_TXB_POSITION                               0x0
#define _I2C1TXB_TXB_SIZE                                   0x8
#define _I2C1TXB_TXB_LENGTH                                 0x8
#define _I2C1TXB_TXB_MASK                                   0xFF

// Register: I2C1CNT
#define I2C1CNT I2C1CNT
extern volatile unsigned char           I2C1CNT             __at(0x28D);
#ifndef _LIB_BUILD
asm("I2C1CNT equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} I2C1CNTbits_t;
extern volatile I2C1CNTbits_t I2C1CNTbits __at(0x28D);
// bitfield macros
#define _I2C1CNT_CNT_POSN                                   0x0
#define _I2C1CNT_CNT_POSITION                               0x0
#define _I2C1CNT_CNT_SIZE                                   0x8
#define _I2C1CNT_CNT_LENGTH                                 0x8
#define _I2C1CNT_CNT_MASK                                   0xFF
#define _I2C1CNT_CNT0_POSN                                  0x0
#define _I2C1CNT_CNT0_POSITION                              0x0
#define _I2C1CNT_CNT0_SIZE                                  0x1
#define _I2C1CNT_CNT0_LENGTH                                0x1
#define _I2C1CNT_CNT0_MASK                                  0x1
#define _I2C1CNT_CNT1_POSN                                  0x1
#define _I2C1CNT_CNT1_POSITION                              0x1
#define _I2C1CNT_CNT1_SIZE                                  0x1
#define _I2C1CNT_CNT1_LENGTH                                0x1
#define _I2C1CNT_CNT1_MASK                                  0x2
#define _I2C1CNT_CNT2_POSN                                  0x2
#define _I2C1CNT_CNT2_POSITION                              0x2
#define _I2C1CNT_CNT2_SIZE                                  0x1
#define _I2C1CNT_CNT2_LENGTH                                0x1
#define _I2C1CNT_CNT2_MASK                                  0x4
#define _I2C1CNT_CNT3_POSN                                  0x3
#define _I2C1CNT_CNT3_POSITION                              0x3
#define _I2C1CNT_CNT3_SIZE                                  0x1
#define _I2C1CNT_CNT3_LENGTH                                0x1
#define _I2C1CNT_CNT3_MASK                                  0x8
#define _I2C1CNT_CNT4_POSN                                  0x4
#define _I2C1CNT_CNT4_POSITION                              0x4
#define _I2C1CNT_CNT4_SIZE                                  0x1
#define _I2C1CNT_CNT4_LENGTH                                0x1
#define _I2C1CNT_CNT4_MASK                                  0x10
#define _I2C1CNT_CNT5_POSN                                  0x5
#define _I2C1CNT_CNT5_POSITION                              0x5
#define _I2C1CNT_CNT5_SIZE                                  0x1
#define _I2C1CNT_CNT5_LENGTH                                0x1
#define _I2C1CNT_CNT5_MASK                                  0x20
#define _I2C1CNT_CNT6_POSN                                  0x6
#define _I2C1CNT_CNT6_POSITION                              0x6
#define _I2C1CNT_CNT6_SIZE                                  0x1
#define _I2C1CNT_CNT6_LENGTH                                0x1
#define _I2C1CNT_CNT6_MASK                                  0x40
#define _I2C1CNT_CNT7_POSN                                  0x7
#define _I2C1CNT_CNT7_POSITION                              0x7
#define _I2C1CNT_CNT7_SIZE                                  0x1
#define _I2C1CNT_CNT7_LENGTH                                0x1
#define _I2C1CNT_CNT7_MASK                                  0x80

// Register: I2C1ADB0
#define I2C1ADB0 I2C1ADB0
extern volatile unsigned char           I2C1ADB0            __at(0x28E);
#ifndef _LIB_BUILD
asm("I2C1ADB0 equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB0bits_t;
extern volatile I2C1ADB0bits_t I2C1ADB0bits __at(0x28E);
// bitfield macros
#define _I2C1ADB0_ADB_POSN                                  0x0
#define _I2C1ADB0_ADB_POSITION                              0x0
#define _I2C1ADB0_ADB_SIZE                                  0x8
#define _I2C1ADB0_ADB_LENGTH                                0x8
#define _I2C1ADB0_ADB_MASK                                  0xFF

// Register: I2C1ADB1
#define I2C1ADB1 I2C1ADB1
extern volatile unsigned char           I2C1ADB1            __at(0x28F);
#ifndef _LIB_BUILD
asm("I2C1ADB1 equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB1bits_t;
extern volatile I2C1ADB1bits_t I2C1ADB1bits __at(0x28F);
// bitfield macros
#define _I2C1ADB1_ADB_POSN                                  0x0
#define _I2C1ADB1_ADB_POSITION                              0x0
#define _I2C1ADB1_ADB_SIZE                                  0x8
#define _I2C1ADB1_ADB_LENGTH                                0x8
#define _I2C1ADB1_ADB_MASK                                  0xFF

// Register: I2C1ADR0
#define I2C1ADR0 I2C1ADR0
extern volatile unsigned char           I2C1ADR0            __at(0x290);
#ifndef _LIB_BUILD
asm("I2C1ADR0 equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR0bits_t;
extern volatile I2C1ADR0bits_t I2C1ADR0bits __at(0x290);
// bitfield macros
#define _I2C1ADR0_ADR_POSN                                  0x0
#define _I2C1ADR0_ADR_POSITION                              0x0
#define _I2C1ADR0_ADR_SIZE                                  0x8
#define _I2C1ADR0_ADR_LENGTH                                0x8
#define _I2C1ADR0_ADR_MASK                                  0xFF

// Register: I2C1ADR1
#define I2C1ADR1 I2C1ADR1
extern volatile unsigned char           I2C1ADR1            __at(0x291);
#ifndef _LIB_BUILD
asm("I2C1ADR1 equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR1bits_t;
extern volatile I2C1ADR1bits_t I2C1ADR1bits __at(0x291);
// bitfield macros
#define _I2C1ADR1_ADR_POSN                                  0x1
#define _I2C1ADR1_ADR_POSITION                              0x1
#define _I2C1ADR1_ADR_SIZE                                  0x7
#define _I2C1ADR1_ADR_LENGTH                                0x7
#define _I2C1ADR1_ADR_MASK                                  0xFE

// Register: I2C1ADR2
#define I2C1ADR2 I2C1ADR2
extern volatile unsigned char           I2C1ADR2            __at(0x292);
#ifndef _LIB_BUILD
asm("I2C1ADR2 equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR2bits_t;
extern volatile I2C1ADR2bits_t I2C1ADR2bits __at(0x292);
// bitfield macros
#define _I2C1ADR2_ADR_POSN                                  0x0
#define _I2C1ADR2_ADR_POSITION                              0x0
#define _I2C1ADR2_ADR_SIZE                                  0x8
#define _I2C1ADR2_ADR_LENGTH                                0x8
#define _I2C1ADR2_ADR_MASK                                  0xFF

// Register: I2C1ADR3
#define I2C1ADR3 I2C1ADR3
extern volatile unsigned char           I2C1ADR3            __at(0x293);
#ifndef _LIB_BUILD
asm("I2C1ADR3 equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR3bits_t;
extern volatile I2C1ADR3bits_t I2C1ADR3bits __at(0x293);
// bitfield macros
#define _I2C1ADR3_ADR_POSN                                  0x1
#define _I2C1ADR3_ADR_POSITION                              0x1
#define _I2C1ADR3_ADR_SIZE                                  0x7
#define _I2C1ADR3_ADR_LENGTH                                0x7
#define _I2C1ADR3_ADR_MASK                                  0xFE

// Register: I2C1CON0
#define I2C1CON0 I2C1CON0
extern volatile unsigned char           I2C1CON0            __at(0x294);
#ifndef _LIB_BUILD
asm("I2C1CON0 equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned MDR                    :1;
        unsigned CSTR                   :1;
        unsigned S                      :1;
        unsigned RSEN                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned I2CEN                  :1;
    };
} I2C1CON0bits_t;
extern volatile I2C1CON0bits_t I2C1CON0bits __at(0x294);
// bitfield macros
#define _I2C1CON0_MODE_POSN                                 0x0
#define _I2C1CON0_MODE_POSITION                             0x0
#define _I2C1CON0_MODE_SIZE                                 0x3
#define _I2C1CON0_MODE_LENGTH                               0x3
#define _I2C1CON0_MODE_MASK                                 0x7
#define _I2C1CON0_MDR_POSN                                  0x3
#define _I2C1CON0_MDR_POSITION                              0x3
#define _I2C1CON0_MDR_SIZE                                  0x1
#define _I2C1CON0_MDR_LENGTH                                0x1
#define _I2C1CON0_MDR_MASK                                  0x8
#define _I2C1CON0_CSTR_POSN                                 0x4
#define _I2C1CON0_CSTR_POSITION                             0x4
#define _I2C1CON0_CSTR_SIZE                                 0x1
#define _I2C1CON0_CSTR_LENGTH                               0x1
#define _I2C1CON0_CSTR_MASK                                 0x10
#define _I2C1CON0_S_POSN                                    0x5
#define _I2C1CON0_S_POSITION                                0x5
#define _I2C1CON0_S_SIZE                                    0x1
#define _I2C1CON0_S_LENGTH                                  0x1
#define _I2C1CON0_S_MASK                                    0x20
#define _I2C1CON0_RSEN_POSN                                 0x6
#define _I2C1CON0_RSEN_POSITION                             0x6
#define _I2C1CON0_RSEN_SIZE                                 0x1
#define _I2C1CON0_RSEN_LENGTH                               0x1
#define _I2C1CON0_RSEN_MASK                                 0x40
#define _I2C1CON0_EN_POSN                                   0x7
#define _I2C1CON0_EN_POSITION                               0x7
#define _I2C1CON0_EN_SIZE                                   0x1
#define _I2C1CON0_EN_LENGTH                                 0x1
#define _I2C1CON0_EN_MASK                                   0x80
#define _I2C1CON0_MODE0_POSN                                0x0
#define _I2C1CON0_MODE0_POSITION                            0x0
#define _I2C1CON0_MODE0_SIZE                                0x1
#define _I2C1CON0_MODE0_LENGTH                              0x1
#define _I2C1CON0_MODE0_MASK                                0x1
#define _I2C1CON0_MODE1_POSN                                0x1
#define _I2C1CON0_MODE1_POSITION                            0x1
#define _I2C1CON0_MODE1_SIZE                                0x1
#define _I2C1CON0_MODE1_LENGTH                              0x1
#define _I2C1CON0_MODE1_MASK                                0x2
#define _I2C1CON0_MODE2_POSN                                0x2
#define _I2C1CON0_MODE2_POSITION                            0x2
#define _I2C1CON0_MODE2_SIZE                                0x1
#define _I2C1CON0_MODE2_LENGTH                              0x1
#define _I2C1CON0_MODE2_MASK                                0x4
#define _I2C1CON0_I2CEN_POSN                                0x7
#define _I2C1CON0_I2CEN_POSITION                            0x7
#define _I2C1CON0_I2CEN_SIZE                                0x1
#define _I2C1CON0_I2CEN_LENGTH                              0x1
#define _I2C1CON0_I2CEN_MASK                                0x80

// Register: I2C1CON1
#define I2C1CON1 I2C1CON1
extern volatile unsigned char           I2C1CON1            __at(0x295);
#ifndef _LIB_BUILD
asm("I2C1CON1 equ 0295h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSD                    :1;
        unsigned TXU                    :1;
        unsigned RXO                    :1;
        unsigned                        :1;
        unsigned ACKT                   :1;
        unsigned ACKSTAT                :1;
        unsigned ACKDT                  :1;
        unsigned ACKCNT                 :1;
    };
} I2C1CON1bits_t;
extern volatile I2C1CON1bits_t I2C1CON1bits __at(0x295);
// bitfield macros
#define _I2C1CON1_CSD_POSN                                  0x0
#define _I2C1CON1_CSD_POSITION                              0x0
#define _I2C1CON1_CSD_SIZE                                  0x1
#define _I2C1CON1_CSD_LENGTH                                0x1
#define _I2C1CON1_CSD_MASK                                  0x1
#define _I2C1CON1_TXU_POSN                                  0x1
#define _I2C1CON1_TXU_POSITION                              0x1
#define _I2C1CON1_TXU_SIZE                                  0x1
#define _I2C1CON1_TXU_LENGTH                                0x1
#define _I2C1CON1_TXU_MASK                                  0x2
#define _I2C1CON1_RXO_POSN                                  0x2
#define _I2C1CON1_RXO_POSITION                              0x2
#define _I2C1CON1_RXO_SIZE                                  0x1
#define _I2C1CON1_RXO_LENGTH                                0x1
#define _I2C1CON1_RXO_MASK                                  0x4
#define _I2C1CON1_ACKT_POSN                                 0x4
#define _I2C1CON1_ACKT_POSITION                             0x4
#define _I2C1CON1_ACKT_SIZE                                 0x1
#define _I2C1CON1_ACKT_LENGTH                               0x1
#define _I2C1CON1_ACKT_MASK                                 0x10
#define _I2C1CON1_ACKSTAT_POSN                              0x5
#define _I2C1CON1_ACKSTAT_POSITION                          0x5
#define _I2C1CON1_ACKSTAT_SIZE                              0x1
#define _I2C1CON1_ACKSTAT_LENGTH                            0x1
#define _I2C1CON1_ACKSTAT_MASK                              0x20
#define _I2C1CON1_ACKDT_POSN                                0x6
#define _I2C1CON1_ACKDT_POSITION                            0x6
#define _I2C1CON1_ACKDT_SIZE                                0x1
#define _I2C1CON1_ACKDT_LENGTH                              0x1
#define _I2C1CON1_ACKDT_MASK                                0x40
#define _I2C1CON1_ACKCNT_POSN                               0x7
#define _I2C1CON1_ACKCNT_POSITION                           0x7
#define _I2C1CON1_ACKCNT_SIZE                               0x1
#define _I2C1CON1_ACKCNT_LENGTH                             0x1
#define _I2C1CON1_ACKCNT_MASK                               0x80

// Register: I2C1CON2
#define I2C1CON2 I2C1CON2
extern volatile unsigned char           I2C1CON2            __at(0x296);
#ifndef _LIB_BUILD
asm("I2C1CON2 equ 0296h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BFRET                  :2;
        unsigned SDAHT                  :2;
        unsigned ABD                    :1;
        unsigned FME                    :1;
        unsigned GCEN                   :1;
        unsigned ACNT                   :1;
    };
    struct {
        unsigned BFRET0                 :1;
        unsigned BFRET1                 :1;
        unsigned SDAHT0                 :1;
        unsigned SDAHT1                 :1;
    };
} I2C1CON2bits_t;
extern volatile I2C1CON2bits_t I2C1CON2bits __at(0x296);
// bitfield macros
#define _I2C1CON2_BFRET_POSN                                0x0
#define _I2C1CON2_BFRET_POSITION                            0x0
#define _I2C1CON2_BFRET_SIZE                                0x2
#define _I2C1CON2_BFRET_LENGTH                              0x2
#define _I2C1CON2_BFRET_MASK                                0x3
#define _I2C1CON2_SDAHT_POSN                                0x2
#define _I2C1CON2_SDAHT_POSITION                            0x2
#define _I2C1CON2_SDAHT_SIZE                                0x2
#define _I2C1CON2_SDAHT_LENGTH                              0x2
#define _I2C1CON2_SDAHT_MASK                                0xC
#define _I2C1CON2_ABD_POSN                                  0x4
#define _I2C1CON2_ABD_POSITION                              0x4
#define _I2C1CON2_ABD_SIZE                                  0x1
#define _I2C1CON2_ABD_LENGTH                                0x1
#define _I2C1CON2_ABD_MASK                                  0x10
#define _I2C1CON2_FME_POSN                                  0x5
#define _I2C1CON2_FME_POSITION                              0x5
#define _I2C1CON2_FME_SIZE                                  0x1
#define _I2C1CON2_FME_LENGTH                                0x1
#define _I2C1CON2_FME_MASK                                  0x20
#define _I2C1CON2_GCEN_POSN                                 0x6
#define _I2C1CON2_GCEN_POSITION                             0x6
#define _I2C1CON2_GCEN_SIZE                                 0x1
#define _I2C1CON2_GCEN_LENGTH                               0x1
#define _I2C1CON2_GCEN_MASK                                 0x40
#define _I2C1CON2_ACNT_POSN                                 0x7
#define _I2C1CON2_ACNT_POSITION                             0x7
#define _I2C1CON2_ACNT_SIZE                                 0x1
#define _I2C1CON2_ACNT_LENGTH                               0x1
#define _I2C1CON2_ACNT_MASK                                 0x80
#define _I2C1CON2_BFRET0_POSN                               0x0
#define _I2C1CON2_BFRET0_POSITION                           0x0
#define _I2C1CON2_BFRET0_SIZE                               0x1
#define _I2C1CON2_BFRET0_LENGTH                             0x1
#define _I2C1CON2_BFRET0_MASK                               0x1
#define _I2C1CON2_BFRET1_POSN                               0x1
#define _I2C1CON2_BFRET1_POSITION                           0x1
#define _I2C1CON2_BFRET1_SIZE                               0x1
#define _I2C1CON2_BFRET1_LENGTH                             0x1
#define _I2C1CON2_BFRET1_MASK                               0x2
#define _I2C1CON2_SDAHT0_POSN                               0x2
#define _I2C1CON2_SDAHT0_POSITION                           0x2
#define _I2C1CON2_SDAHT0_SIZE                               0x1
#define _I2C1CON2_SDAHT0_LENGTH                             0x1
#define _I2C1CON2_SDAHT0_MASK                               0x4
#define _I2C1CON2_SDAHT1_POSN                               0x3
#define _I2C1CON2_SDAHT1_POSITION                           0x3
#define _I2C1CON2_SDAHT1_SIZE                               0x1
#define _I2C1CON2_SDAHT1_LENGTH                             0x1
#define _I2C1CON2_SDAHT1_MASK                               0x8

// Register: I2C1ERR
#define I2C1ERR I2C1ERR
extern volatile unsigned char           I2C1ERR             __at(0x297);
#ifndef _LIB_BUILD
asm("I2C1ERR equ 0297h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NACKIE                 :1;
        unsigned BCLIE                  :1;
        unsigned BTOIE                  :1;
        unsigned                        :1;
        unsigned NACKIF                 :1;
        unsigned BCLIF                  :1;
        unsigned BTOIF                  :1;
    };
    struct {
        unsigned NACK1IE                :1;
        unsigned BCL1IE                 :1;
        unsigned BTO1IE                 :1;
        unsigned                        :1;
        unsigned NACK1IF                :1;
        unsigned BCL1IF                 :1;
        unsigned BTO1IF                 :1;
    };
} I2C1ERRbits_t;
extern volatile I2C1ERRbits_t I2C1ERRbits __at(0x297);
// bitfield macros
#define _I2C1ERR_NACKIE_POSN                                0x0
#define _I2C1ERR_NACKIE_POSITION                            0x0
#define _I2C1ERR_NACKIE_SIZE                                0x1
#define _I2C1ERR_NACKIE_LENGTH                              0x1
#define _I2C1ERR_NACKIE_MASK                                0x1
#define _I2C1ERR_BCLIE_POSN                                 0x1
#define _I2C1ERR_BCLIE_POSITION                             0x1
#define _I2C1ERR_BCLIE_SIZE                                 0x1
#define _I2C1ERR_BCLIE_LENGTH                               0x1
#define _I2C1ERR_BCLIE_MASK                                 0x2
#define _I2C1ERR_BTOIE_POSN                                 0x2
#define _I2C1ERR_BTOIE_POSITION                             0x2
#define _I2C1ERR_BTOIE_SIZE                                 0x1
#define _I2C1ERR_BTOIE_LENGTH                               0x1
#define _I2C1ERR_BTOIE_MASK                                 0x4
#define _I2C1ERR_NACKIF_POSN                                0x4
#define _I2C1ERR_NACKIF_POSITION                            0x4
#define _I2C1ERR_NACKIF_SIZE                                0x1
#define _I2C1ERR_NACKIF_LENGTH                              0x1
#define _I2C1ERR_NACKIF_MASK                                0x10
#define _I2C1ERR_BCLIF_POSN                                 0x5
#define _I2C1ERR_BCLIF_POSITION                             0x5
#define _I2C1ERR_BCLIF_SIZE                                 0x1
#define _I2C1ERR_BCLIF_LENGTH                               0x1
#define _I2C1ERR_BCLIF_MASK                                 0x20
#define _I2C1ERR_BTOIF_POSN                                 0x6
#define _I2C1ERR_BTOIF_POSITION                             0x6
#define _I2C1ERR_BTOIF_SIZE                                 0x1
#define _I2C1ERR_BTOIF_LENGTH                               0x1
#define _I2C1ERR_BTOIF_MASK                                 0x40
#define _I2C1ERR_NACK1IE_POSN                               0x0
#define _I2C1ERR_NACK1IE_POSITION                           0x0
#define _I2C1ERR_NACK1IE_SIZE                               0x1
#define _I2C1ERR_NACK1IE_LENGTH                             0x1
#define _I2C1ERR_NACK1IE_MASK                               0x1
#define _I2C1ERR_BCL1IE_POSN                                0x1
#define _I2C1ERR_BCL1IE_POSITION                            0x1
#define _I2C1ERR_BCL1IE_SIZE                                0x1
#define _I2C1ERR_BCL1IE_LENGTH                              0x1
#define _I2C1ERR_BCL1IE_MASK                                0x2
#define _I2C1ERR_BTO1IE_POSN                                0x2
#define _I2C1ERR_BTO1IE_POSITION                            0x2
#define _I2C1ERR_BTO1IE_SIZE                                0x1
#define _I2C1ERR_BTO1IE_LENGTH                              0x1
#define _I2C1ERR_BTO1IE_MASK                                0x4
#define _I2C1ERR_NACK1IF_POSN                               0x4
#define _I2C1ERR_NACK1IF_POSITION                           0x4
#define _I2C1ERR_NACK1IF_SIZE                               0x1
#define _I2C1ERR_NACK1IF_LENGTH                             0x1
#define _I2C1ERR_NACK1IF_MASK                               0x10
#define _I2C1ERR_BCL1IF_POSN                                0x5
#define _I2C1ERR_BCL1IF_POSITION                            0x5
#define _I2C1ERR_BCL1IF_SIZE                                0x1
#define _I2C1ERR_BCL1IF_LENGTH                              0x1
#define _I2C1ERR_BCL1IF_MASK                                0x20
#define _I2C1ERR_BTO1IF_POSN                                0x6
#define _I2C1ERR_BTO1IF_POSITION                            0x6
#define _I2C1ERR_BTO1IF_SIZE                                0x1
#define _I2C1ERR_BTO1IF_LENGTH                              0x1
#define _I2C1ERR_BTO1IF_MASK                                0x40

// Register: I2C1STAT0
#define I2C1STAT0 I2C1STAT0
extern volatile unsigned char           I2C1STAT0           __at(0x298);
#ifndef _LIB_BUILD
asm("I2C1STAT0 equ 0298h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned D                      :1;
        unsigned R                      :1;
        unsigned MMA                    :1;
        unsigned SMA                    :1;
        unsigned BFRE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned DATA                   :1;
        unsigned READ                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_ADDRESS            :1;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_A                  :1;
        unsigned NOT_W                  :1;
    };
} I2C1STAT0bits_t;
extern volatile I2C1STAT0bits_t I2C1STAT0bits __at(0x298);
// bitfield macros
#define _I2C1STAT0_D_POSN                                   0x3
#define _I2C1STAT0_D_POSITION                               0x3
#define _I2C1STAT0_D_SIZE                                   0x1
#define _I2C1STAT0_D_LENGTH                                 0x1
#define _I2C1STAT0_D_MASK                                   0x8
#define _I2C1STAT0_R_POSN                                   0x4
#define _I2C1STAT0_R_POSITION                               0x4
#define _I2C1STAT0_R_SIZE                                   0x1
#define _I2C1STAT0_R_LENGTH                                 0x1
#define _I2C1STAT0_R_MASK                                   0x10
#define _I2C1STAT0_MMA_POSN                                 0x5
#define _I2C1STAT0_MMA_POSITION                             0x5
#define _I2C1STAT0_MMA_SIZE                                 0x1
#define _I2C1STAT0_MMA_LENGTH                               0x1
#define _I2C1STAT0_MMA_MASK                                 0x20
#define _I2C1STAT0_SMA_POSN                                 0x6
#define _I2C1STAT0_SMA_POSITION                             0x6
#define _I2C1STAT0_SMA_SIZE                                 0x1
#define _I2C1STAT0_SMA_LENGTH                               0x1
#define _I2C1STAT0_SMA_MASK                                 0x40
#define _I2C1STAT0_BFRE_POSN                                0x7
#define _I2C1STAT0_BFRE_POSITION                            0x7
#define _I2C1STAT0_BFRE_SIZE                                0x1
#define _I2C1STAT0_BFRE_LENGTH                              0x1
#define _I2C1STAT0_BFRE_MASK                                0x80
#define _I2C1STAT0_DATA_POSN                                0x3
#define _I2C1STAT0_DATA_POSITION                            0x3
#define _I2C1STAT0_DATA_SIZE                                0x1
#define _I2C1STAT0_DATA_LENGTH                              0x1
#define _I2C1STAT0_DATA_MASK                                0x8
#define _I2C1STAT0_READ_POSN                                0x4
#define _I2C1STAT0_READ_POSITION                            0x4
#define _I2C1STAT0_READ_SIZE                                0x1
#define _I2C1STAT0_READ_LENGTH                              0x1
#define _I2C1STAT0_READ_MASK                                0x10
#define _I2C1STAT0_NOT_ADDRESS_POSN                         0x3
#define _I2C1STAT0_NOT_ADDRESS_POSITION                     0x3
#define _I2C1STAT0_NOT_ADDRESS_SIZE                         0x1
#define _I2C1STAT0_NOT_ADDRESS_LENGTH                       0x1
#define _I2C1STAT0_NOT_ADDRESS_MASK                         0x8
#define _I2C1STAT0_NOT_WRITE_POSN                           0x4
#define _I2C1STAT0_NOT_WRITE_POSITION                       0x4
#define _I2C1STAT0_NOT_WRITE_SIZE                           0x1
#define _I2C1STAT0_NOT_WRITE_LENGTH                         0x1
#define _I2C1STAT0_NOT_WRITE_MASK                           0x10
#define _I2C1STAT0_NOT_A_POSN                               0x3
#define _I2C1STAT0_NOT_A_POSITION                           0x3
#define _I2C1STAT0_NOT_A_SIZE                               0x1
#define _I2C1STAT0_NOT_A_LENGTH                             0x1
#define _I2C1STAT0_NOT_A_MASK                               0x8
#define _I2C1STAT0_NOT_W_POSN                               0x4
#define _I2C1STAT0_NOT_W_POSITION                           0x4
#define _I2C1STAT0_NOT_W_SIZE                               0x1
#define _I2C1STAT0_NOT_W_LENGTH                             0x1
#define _I2C1STAT0_NOT_W_MASK                               0x10

// Register: I2C1STAT1
#define I2C1STAT1 I2C1STAT1
extern volatile unsigned char           I2C1STAT1           __at(0x299);
#ifndef _LIB_BUILD
asm("I2C1STAT1 equ 0299h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
} I2C1STAT1bits_t;
extern volatile I2C1STAT1bits_t I2C1STAT1bits __at(0x299);
// bitfield macros
#define _I2C1STAT1_RXBF_POSN                                0x0
#define _I2C1STAT1_RXBF_POSITION                            0x0
#define _I2C1STAT1_RXBF_SIZE                                0x1
#define _I2C1STAT1_RXBF_LENGTH                              0x1
#define _I2C1STAT1_RXBF_MASK                                0x1
#define _I2C1STAT1_CLRBF_POSN                               0x2
#define _I2C1STAT1_CLRBF_POSITION                           0x2
#define _I2C1STAT1_CLRBF_SIZE                               0x1
#define _I2C1STAT1_CLRBF_LENGTH                             0x1
#define _I2C1STAT1_CLRBF_MASK                               0x4
#define _I2C1STAT1_RXRE_POSN                                0x3
#define _I2C1STAT1_RXRE_POSITION                            0x3
#define _I2C1STAT1_RXRE_SIZE                                0x1
#define _I2C1STAT1_RXRE_LENGTH                              0x1
#define _I2C1STAT1_RXRE_MASK                                0x8
#define _I2C1STAT1_TXBE_POSN                                0x5
#define _I2C1STAT1_TXBE_POSITION                            0x5
#define _I2C1STAT1_TXBE_SIZE                                0x1
#define _I2C1STAT1_TXBE_LENGTH                              0x1
#define _I2C1STAT1_TXBE_MASK                                0x20
#define _I2C1STAT1_TXWE_POSN                                0x7
#define _I2C1STAT1_TXWE_POSITION                            0x7
#define _I2C1STAT1_TXWE_SIZE                                0x1
#define _I2C1STAT1_TXWE_LENGTH                              0x1
#define _I2C1STAT1_TXWE_MASK                                0x80

// Register: I2C1PIR
#define I2C1PIR I2C1PIR
extern volatile unsigned char           I2C1PIR             __at(0x29A);
#ifndef _LIB_BUILD
asm("I2C1PIR equ 029Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIF                   :1;
        unsigned RSCIF                  :1;
        unsigned PCIF                   :1;
        unsigned ADRIF                  :1;
        unsigned WRIF                   :1;
        unsigned                        :1;
        unsigned ACKTIF                 :1;
        unsigned CNTIF                  :1;
    };
    struct {
        unsigned SC1IF                  :1;
        unsigned RSC1IF                 :1;
        unsigned PC1IF                  :1;
        unsigned ADR1IF                 :1;
        unsigned WR1IF                  :1;
        unsigned                        :1;
        unsigned ACKT1IF                :1;
        unsigned CNT1IF                 :1;
    };
} I2C1PIRbits_t;
extern volatile I2C1PIRbits_t I2C1PIRbits __at(0x29A);
// bitfield macros
#define _I2C1PIR_SCIF_POSN                                  0x0
#define _I2C1PIR_SCIF_POSITION                              0x0
#define _I2C1PIR_SCIF_SIZE                                  0x1
#define _I2C1PIR_SCIF_LENGTH                                0x1
#define _I2C1PIR_SCIF_MASK                                  0x1
#define _I2C1PIR_RSCIF_POSN                                 0x1
#define _I2C1PIR_RSCIF_POSITION                             0x1
#define _I2C1PIR_RSCIF_SIZE                                 0x1
#define _I2C1PIR_RSCIF_LENGTH                               0x1
#define _I2C1PIR_RSCIF_MASK                                 0x2
#define _I2C1PIR_PCIF_POSN                                  0x2
#define _I2C1PIR_PCIF_POSITION                              0x2
#define _I2C1PIR_PCIF_SIZE                                  0x1
#define _I2C1PIR_PCIF_LENGTH                                0x1
#define _I2C1PIR_PCIF_MASK                                  0x4
#define _I2C1PIR_ADRIF_POSN                                 0x3
#define _I2C1PIR_ADRIF_POSITION                             0x3
#define _I2C1PIR_ADRIF_SIZE                                 0x1
#define _I2C1PIR_ADRIF_LENGTH                               0x1
#define _I2C1PIR_ADRIF_MASK                                 0x8
#define _I2C1PIR_WRIF_POSN                                  0x4
#define _I2C1PIR_WRIF_POSITION                              0x4
#define _I2C1PIR_WRIF_SIZE                                  0x1
#define _I2C1PIR_WRIF_LENGTH                                0x1
#define _I2C1PIR_WRIF_MASK                                  0x10
#define _I2C1PIR_ACKTIF_POSN                                0x6
#define _I2C1PIR_ACKTIF_POSITION                            0x6
#define _I2C1PIR_ACKTIF_SIZE                                0x1
#define _I2C1PIR_ACKTIF_LENGTH                              0x1
#define _I2C1PIR_ACKTIF_MASK                                0x40
#define _I2C1PIR_CNTIF_POSN                                 0x7
#define _I2C1PIR_CNTIF_POSITION                             0x7
#define _I2C1PIR_CNTIF_SIZE                                 0x1
#define _I2C1PIR_CNTIF_LENGTH                               0x1
#define _I2C1PIR_CNTIF_MASK                                 0x80
#define _I2C1PIR_SC1IF_POSN                                 0x0
#define _I2C1PIR_SC1IF_POSITION                             0x0
#define _I2C1PIR_SC1IF_SIZE                                 0x1
#define _I2C1PIR_SC1IF_LENGTH                               0x1
#define _I2C1PIR_SC1IF_MASK                                 0x1
#define _I2C1PIR_RSC1IF_POSN                                0x1
#define _I2C1PIR_RSC1IF_POSITION                            0x1
#define _I2C1PIR_RSC1IF_SIZE                                0x1
#define _I2C1PIR_RSC1IF_LENGTH                              0x1
#define _I2C1PIR_RSC1IF_MASK                                0x2
#define _I2C1PIR_PC1IF_POSN                                 0x2
#define _I2C1PIR_PC1IF_POSITION                             0x2
#define _I2C1PIR_PC1IF_SIZE                                 0x1
#define _I2C1PIR_PC1IF_LENGTH                               0x1
#define _I2C1PIR_PC1IF_MASK                                 0x4
#define _I2C1PIR_ADR1IF_POSN                                0x3
#define _I2C1PIR_ADR1IF_POSITION                            0x3
#define _I2C1PIR_ADR1IF_SIZE                                0x1
#define _I2C1PIR_ADR1IF_LENGTH                              0x1
#define _I2C1PIR_ADR1IF_MASK                                0x8
#define _I2C1PIR_WR1IF_POSN                                 0x4
#define _I2C1PIR_WR1IF_POSITION                             0x4
#define _I2C1PIR_WR1IF_SIZE                                 0x1
#define _I2C1PIR_WR1IF_LENGTH                               0x1
#define _I2C1PIR_WR1IF_MASK                                 0x10
#define _I2C1PIR_ACKT1IF_POSN                               0x6
#define _I2C1PIR_ACKT1IF_POSITION                           0x6
#define _I2C1PIR_ACKT1IF_SIZE                               0x1
#define _I2C1PIR_ACKT1IF_LENGTH                             0x1
#define _I2C1PIR_ACKT1IF_MASK                               0x40
#define _I2C1PIR_CNT1IF_POSN                                0x7
#define _I2C1PIR_CNT1IF_POSITION                            0x7
#define _I2C1PIR_CNT1IF_SIZE                                0x1
#define _I2C1PIR_CNT1IF_LENGTH                              0x1
#define _I2C1PIR_CNT1IF_MASK                                0x80

// Register: I2C1PIE
#define I2C1PIE I2C1PIE
extern volatile unsigned char           I2C1PIE             __at(0x29B);
#ifndef _LIB_BUILD
asm("I2C1PIE equ 029Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIE                   :1;
        unsigned RSCIE                  :1;
        unsigned PCIE                   :1;
        unsigned ADRIE                  :1;
        unsigned WRIE                   :1;
        unsigned                        :1;
        unsigned ACKTIE                 :1;
        unsigned CNTIE                  :1;
    };
    struct {
        unsigned SC1IE                  :1;
        unsigned RSC1IE                 :1;
        unsigned PC1IE                  :1;
        unsigned ADR1IE                 :1;
        unsigned WR1IE                  :1;
        unsigned                        :1;
        unsigned ACKT1IE                :1;
        unsigned CNT1IE                 :1;
    };
} I2C1PIEbits_t;
extern volatile I2C1PIEbits_t I2C1PIEbits __at(0x29B);
// bitfield macros
#define _I2C1PIE_SCIE_POSN                                  0x0
#define _I2C1PIE_SCIE_POSITION                              0x0
#define _I2C1PIE_SCIE_SIZE                                  0x1
#define _I2C1PIE_SCIE_LENGTH                                0x1
#define _I2C1PIE_SCIE_MASK                                  0x1
#define _I2C1PIE_RSCIE_POSN                                 0x1
#define _I2C1PIE_RSCIE_POSITION                             0x1
#define _I2C1PIE_RSCIE_SIZE                                 0x1
#define _I2C1PIE_RSCIE_LENGTH                               0x1
#define _I2C1PIE_RSCIE_MASK                                 0x2
#define _I2C1PIE_PCIE_POSN                                  0x2
#define _I2C1PIE_PCIE_POSITION                              0x2
#define _I2C1PIE_PCIE_SIZE                                  0x1
#define _I2C1PIE_PCIE_LENGTH                                0x1
#define _I2C1PIE_PCIE_MASK                                  0x4
#define _I2C1PIE_ADRIE_POSN                                 0x3
#define _I2C1PIE_ADRIE_POSITION                             0x3
#define _I2C1PIE_ADRIE_SIZE                                 0x1
#define _I2C1PIE_ADRIE_LENGTH                               0x1
#define _I2C1PIE_ADRIE_MASK                                 0x8
#define _I2C1PIE_WRIE_POSN                                  0x4
#define _I2C1PIE_WRIE_POSITION                              0x4
#define _I2C1PIE_WRIE_SIZE                                  0x1
#define _I2C1PIE_WRIE_LENGTH                                0x1
#define _I2C1PIE_WRIE_MASK                                  0x10
#define _I2C1PIE_ACKTIE_POSN                                0x6
#define _I2C1PIE_ACKTIE_POSITION                            0x6
#define _I2C1PIE_ACKTIE_SIZE                                0x1
#define _I2C1PIE_ACKTIE_LENGTH                              0x1
#define _I2C1PIE_ACKTIE_MASK                                0x40
#define _I2C1PIE_CNTIE_POSN                                 0x7
#define _I2C1PIE_CNTIE_POSITION                             0x7
#define _I2C1PIE_CNTIE_SIZE                                 0x1
#define _I2C1PIE_CNTIE_LENGTH                               0x1
#define _I2C1PIE_CNTIE_MASK                                 0x80
#define _I2C1PIE_SC1IE_POSN                                 0x0
#define _I2C1PIE_SC1IE_POSITION                             0x0
#define _I2C1PIE_SC1IE_SIZE                                 0x1
#define _I2C1PIE_SC1IE_LENGTH                               0x1
#define _I2C1PIE_SC1IE_MASK                                 0x1
#define _I2C1PIE_RSC1IE_POSN                                0x1
#define _I2C1PIE_RSC1IE_POSITION                            0x1
#define _I2C1PIE_RSC1IE_SIZE                                0x1
#define _I2C1PIE_RSC1IE_LENGTH                              0x1
#define _I2C1PIE_RSC1IE_MASK                                0x2
#define _I2C1PIE_PC1IE_POSN                                 0x2
#define _I2C1PIE_PC1IE_POSITION                             0x2
#define _I2C1PIE_PC1IE_SIZE                                 0x1
#define _I2C1PIE_PC1IE_LENGTH                               0x1
#define _I2C1PIE_PC1IE_MASK                                 0x4
#define _I2C1PIE_ADR1IE_POSN                                0x3
#define _I2C1PIE_ADR1IE_POSITION                            0x3
#define _I2C1PIE_ADR1IE_SIZE                                0x1
#define _I2C1PIE_ADR1IE_LENGTH                              0x1
#define _I2C1PIE_ADR1IE_MASK                                0x8
#define _I2C1PIE_WR1IE_POSN                                 0x4
#define _I2C1PIE_WR1IE_POSITION                             0x4
#define _I2C1PIE_WR1IE_SIZE                                 0x1
#define _I2C1PIE_WR1IE_LENGTH                               0x1
#define _I2C1PIE_WR1IE_MASK                                 0x10
#define _I2C1PIE_ACKT1IE_POSN                               0x6
#define _I2C1PIE_ACKT1IE_POSITION                           0x6
#define _I2C1PIE_ACKT1IE_SIZE                               0x1
#define _I2C1PIE_ACKT1IE_LENGTH                             0x1
#define _I2C1PIE_ACKT1IE_MASK                               0x40
#define _I2C1PIE_CNT1IE_POSN                                0x7
#define _I2C1PIE_CNT1IE_POSITION                            0x7
#define _I2C1PIE_CNT1IE_SIZE                                0x1
#define _I2C1PIE_CNT1IE_LENGTH                              0x1
#define _I2C1PIE_CNT1IE_MASK                                0x80

// Register: I2C1CLK
#define I2C1CLK I2C1CLK
extern volatile unsigned char           I2C1CLK             __at(0x29C);
#ifndef _LIB_BUILD
asm("I2C1CLK equ 029Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned I2CCLK                 :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
    };
    struct {
        unsigned I2CCLK0                :1;
        unsigned I2CCLK1                :1;
        unsigned I2CCLK2                :1;
        unsigned I2CCLK3                :1;
        unsigned I2CCLK4                :1;
    };
} I2C1CLKbits_t;
extern volatile I2C1CLKbits_t I2C1CLKbits __at(0x29C);
// bitfield macros
#define _I2C1CLK_CLK_POSN                                   0x0
#define _I2C1CLK_CLK_POSITION                               0x0
#define _I2C1CLK_CLK_SIZE                                   0x8
#define _I2C1CLK_CLK_LENGTH                                 0x8
#define _I2C1CLK_CLK_MASK                                   0xFF
#define _I2C1CLK_I2CCLK_POSN                                0x0
#define _I2C1CLK_I2CCLK_POSITION                            0x0
#define _I2C1CLK_I2CCLK_SIZE                                0x8
#define _I2C1CLK_I2CCLK_LENGTH                              0x8
#define _I2C1CLK_I2CCLK_MASK                                0xFF
#define _I2C1CLK_CLK0_POSN                                  0x0
#define _I2C1CLK_CLK0_POSITION                              0x0
#define _I2C1CLK_CLK0_SIZE                                  0x1
#define _I2C1CLK_CLK0_LENGTH                                0x1
#define _I2C1CLK_CLK0_MASK                                  0x1
#define _I2C1CLK_CLK1_POSN                                  0x1
#define _I2C1CLK_CLK1_POSITION                              0x1
#define _I2C1CLK_CLK1_SIZE                                  0x1
#define _I2C1CLK_CLK1_LENGTH                                0x1
#define _I2C1CLK_CLK1_MASK                                  0x2
#define _I2C1CLK_CLK2_POSN                                  0x2
#define _I2C1CLK_CLK2_POSITION                              0x2
#define _I2C1CLK_CLK2_SIZE                                  0x1
#define _I2C1CLK_CLK2_LENGTH                                0x1
#define _I2C1CLK_CLK2_MASK                                  0x4
#define _I2C1CLK_CLK3_POSN                                  0x3
#define _I2C1CLK_CLK3_POSITION                              0x3
#define _I2C1CLK_CLK3_SIZE                                  0x1
#define _I2C1CLK_CLK3_LENGTH                                0x1
#define _I2C1CLK_CLK3_MASK                                  0x8
#define _I2C1CLK_CLK4_POSN                                  0x4
#define _I2C1CLK_CLK4_POSITION                              0x4
#define _I2C1CLK_CLK4_SIZE                                  0x1
#define _I2C1CLK_CLK4_LENGTH                                0x1
#define _I2C1CLK_CLK4_MASK                                  0x10
#define _I2C1CLK_I2CCLK0_POSN                               0x0
#define _I2C1CLK_I2CCLK0_POSITION                           0x0
#define _I2C1CLK_I2CCLK0_SIZE                               0x1
#define _I2C1CLK_I2CCLK0_LENGTH                             0x1
#define _I2C1CLK_I2CCLK0_MASK                               0x1
#define _I2C1CLK_I2CCLK1_POSN                               0x1
#define _I2C1CLK_I2CCLK1_POSITION                           0x1
#define _I2C1CLK_I2CCLK1_SIZE                               0x1
#define _I2C1CLK_I2CCLK1_LENGTH                             0x1
#define _I2C1CLK_I2CCLK1_MASK                               0x2
#define _I2C1CLK_I2CCLK2_POSN                               0x2
#define _I2C1CLK_I2CCLK2_POSITION                           0x2
#define _I2C1CLK_I2CCLK2_SIZE                               0x1
#define _I2C1CLK_I2CCLK2_LENGTH                             0x1
#define _I2C1CLK_I2CCLK2_MASK                               0x4
#define _I2C1CLK_I2CCLK3_POSN                               0x3
#define _I2C1CLK_I2CCLK3_POSITION                           0x3
#define _I2C1CLK_I2CCLK3_SIZE                               0x1
#define _I2C1CLK_I2CCLK3_LENGTH                             0x1
#define _I2C1CLK_I2CCLK3_MASK                               0x8
#define _I2C1CLK_I2CCLK4_POSN                               0x4
#define _I2C1CLK_I2CCLK4_POSITION                           0x4
#define _I2C1CLK_I2CCLK4_SIZE                               0x1
#define _I2C1CLK_I2CCLK4_LENGTH                             0x1
#define _I2C1CLK_I2CCLK4_MASK                               0x10

// Register: I2C1BTO
#define I2C1BTO I2C1BTO
extern volatile unsigned char           I2C1BTO             __at(0x29D);
#ifndef _LIB_BUILD
asm("I2C1BTO equ 029Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTO                    :8;
    };
    struct {
        unsigned I2CBTO                 :8;
    };
    struct {
        unsigned BTO0                   :1;
        unsigned BTO1                   :1;
        unsigned BTO2                   :1;
        unsigned BTO3                   :1;
    };
    struct {
        unsigned I2CBTO0                :1;
        unsigned I2CBTO1                :1;
        unsigned I2CBTO2                :1;
        unsigned I2CBTO3                :1;
    };
} I2C1BTObits_t;
extern volatile I2C1BTObits_t I2C1BTObits __at(0x29D);
// bitfield macros
#define _I2C1BTO_BTO_POSN                                   0x0
#define _I2C1BTO_BTO_POSITION                               0x0
#define _I2C1BTO_BTO_SIZE                                   0x8
#define _I2C1BTO_BTO_LENGTH                                 0x8
#define _I2C1BTO_BTO_MASK                                   0xFF
#define _I2C1BTO_I2CBTO_POSN                                0x0
#define _I2C1BTO_I2CBTO_POSITION                            0x0
#define _I2C1BTO_I2CBTO_SIZE                                0x8
#define _I2C1BTO_I2CBTO_LENGTH                              0x8
#define _I2C1BTO_I2CBTO_MASK                                0xFF
#define _I2C1BTO_BTO0_POSN                                  0x0
#define _I2C1BTO_BTO0_POSITION                              0x0
#define _I2C1BTO_BTO0_SIZE                                  0x1
#define _I2C1BTO_BTO0_LENGTH                                0x1
#define _I2C1BTO_BTO0_MASK                                  0x1
#define _I2C1BTO_BTO1_POSN                                  0x1
#define _I2C1BTO_BTO1_POSITION                              0x1
#define _I2C1BTO_BTO1_SIZE                                  0x1
#define _I2C1BTO_BTO1_LENGTH                                0x1
#define _I2C1BTO_BTO1_MASK                                  0x2
#define _I2C1BTO_BTO2_POSN                                  0x2
#define _I2C1BTO_BTO2_POSITION                              0x2
#define _I2C1BTO_BTO2_SIZE                                  0x1
#define _I2C1BTO_BTO2_LENGTH                                0x1
#define _I2C1BTO_BTO2_MASK                                  0x4
#define _I2C1BTO_BTO3_POSN                                  0x3
#define _I2C1BTO_BTO3_POSITION                              0x3
#define _I2C1BTO_BTO3_SIZE                                  0x1
#define _I2C1BTO_BTO3_LENGTH                                0x1
#define _I2C1BTO_BTO3_MASK                                  0x8
#define _I2C1BTO_I2CBTO0_POSN                               0x0
#define _I2C1BTO_I2CBTO0_POSITION                           0x0
#define _I2C1BTO_I2CBTO0_SIZE                               0x1
#define _I2C1BTO_I2CBTO0_LENGTH                             0x1
#define _I2C1BTO_I2CBTO0_MASK                               0x1
#define _I2C1BTO_I2CBTO1_POSN                               0x1
#define _I2C1BTO_I2CBTO1_POSITION                           0x1
#define _I2C1BTO_I2CBTO1_SIZE                               0x1
#define _I2C1BTO_I2CBTO1_LENGTH                             0x1
#define _I2C1BTO_I2CBTO1_MASK                               0x2
#define _I2C1BTO_I2CBTO2_POSN                               0x2
#define _I2C1BTO_I2CBTO2_POSITION                           0x2
#define _I2C1BTO_I2CBTO2_SIZE                               0x1
#define _I2C1BTO_I2CBTO2_LENGTH                             0x1
#define _I2C1BTO_I2CBTO2_MASK                               0x4
#define _I2C1BTO_I2CBTO3_POSN                               0x3
#define _I2C1BTO_I2CBTO3_POSITION                           0x3
#define _I2C1BTO_I2CBTO3_SIZE                               0x1
#define _I2C1BTO_I2CBTO3_LENGTH                             0x1
#define _I2C1BTO_I2CBTO3_MASK                               0x8

// Register: U1RXB
#define U1RXB U1RXB
extern volatile unsigned char           U1RXB               __at(0x2A1);
#ifndef _LIB_BUILD
asm("U1RXB equ 02A1h");
#endif
// aliases
extern volatile unsigned char           U1RXBL              __at(0x2A1);
#ifndef _LIB_BUILD
asm("U1RXBL equ 02A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBbits_t;
extern volatile U1RXBbits_t U1RXBbits __at(0x2A1);
// bitfield macros
#define _U1RXB_RXB_POSN                                     0x0
#define _U1RXB_RXB_POSITION                                 0x0
#define _U1RXB_RXB_SIZE                                     0x8
#define _U1RXB_RXB_LENGTH                                   0x8
#define _U1RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBLbits_t;
extern volatile U1RXBLbits_t U1RXBLbits __at(0x2A1);
// bitfield macros
#define _U1RXBL_RXB_POSN                                    0x0
#define _U1RXBL_RXB_POSITION                                0x0
#define _U1RXBL_RXB_SIZE                                    0x8
#define _U1RXBL_RXB_LENGTH                                  0x8
#define _U1RXBL_RXB_MASK                                    0xFF

// Register: U1RXCHK
#define U1RXCHK U1RXCHK
extern volatile unsigned char           U1RXCHK             __at(0x2A2);
#ifndef _LIB_BUILD
asm("U1RXCHK equ 02A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXCHK                  :8;
    };
} U1RXCHKbits_t;
extern volatile U1RXCHKbits_t U1RXCHKbits __at(0x2A2);
// bitfield macros
#define _U1RXCHK_RXCHK_POSN                                 0x0
#define _U1RXCHK_RXCHK_POSITION                             0x0
#define _U1RXCHK_RXCHK_SIZE                                 0x8
#define _U1RXCHK_RXCHK_LENGTH                               0x8
#define _U1RXCHK_RXCHK_MASK                                 0xFF

// Register: U1TXB
#define U1TXB U1TXB
extern volatile unsigned char           U1TXB               __at(0x2A3);
#ifndef _LIB_BUILD
asm("U1TXB equ 02A3h");
#endif
// aliases
extern volatile unsigned char           U1TXBL              __at(0x2A3);
#ifndef _LIB_BUILD
asm("U1TXBL equ 02A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBbits_t;
extern volatile U1TXBbits_t U1TXBbits __at(0x2A3);
// bitfield macros
#define _U1TXB_TXB_POSN                                     0x0
#define _U1TXB_TXB_POSITION                                 0x0
#define _U1TXB_TXB_SIZE                                     0x8
#define _U1TXB_TXB_LENGTH                                   0x8
#define _U1TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBLbits_t;
extern volatile U1TXBLbits_t U1TXBLbits __at(0x2A3);
// bitfield macros
#define _U1TXBL_TXB_POSN                                    0x0
#define _U1TXBL_TXB_POSITION                                0x0
#define _U1TXBL_TXB_SIZE                                    0x8
#define _U1TXBL_TXB_LENGTH                                  0x8
#define _U1TXBL_TXB_MASK                                    0xFF

// Register: U1TXCHK
#define U1TXCHK U1TXCHK
extern volatile unsigned char           U1TXCHK             __at(0x2A4);
#ifndef _LIB_BUILD
asm("U1TXCHK equ 02A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCHK                  :8;
    };
} U1TXCHKbits_t;
extern volatile U1TXCHKbits_t U1TXCHKbits __at(0x2A4);
// bitfield macros
#define _U1TXCHK_TXCHK_POSN                                 0x0
#define _U1TXCHK_TXCHK_POSITION                             0x0
#define _U1TXCHK_TXCHK_SIZE                                 0x8
#define _U1TXCHK_TXCHK_LENGTH                               0x8
#define _U1TXCHK_TXCHK_MASK                                 0xFF

// Register: U1P1
#define U1P1 U1P1
extern volatile unsigned short          U1P1                __at(0x2A5);
#ifndef _LIB_BUILD
asm("U1P1 equ 02A5h");
#endif

// Register: U1P1L
#define U1P1L U1P1L
extern volatile unsigned char           U1P1L               __at(0x2A5);
#ifndef _LIB_BUILD
asm("U1P1L equ 02A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U1P1Lbits_t;
extern volatile U1P1Lbits_t U1P1Lbits __at(0x2A5);
// bitfield macros
#define _U1P1L_P1L_POSN                                     0x0
#define _U1P1L_P1L_POSITION                                 0x0
#define _U1P1L_P1L_SIZE                                     0x8
#define _U1P1L_P1L_LENGTH                                   0x8
#define _U1P1L_P1L_MASK                                     0xFF

// Register: U1P1H
#define U1P1H U1P1H
extern volatile unsigned char           U1P1H               __at(0x2A6);
#ifndef _LIB_BUILD
asm("U1P1H equ 02A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1H                    :1;
    };
} U1P1Hbits_t;
extern volatile U1P1Hbits_t U1P1Hbits __at(0x2A6);
// bitfield macros
#define _U1P1H_P1H_POSN                                     0x0
#define _U1P1H_P1H_POSITION                                 0x0
#define _U1P1H_P1H_SIZE                                     0x1
#define _U1P1H_P1H_LENGTH                                   0x1
#define _U1P1H_P1H_MASK                                     0x1

// Register: U1P2
#define U1P2 U1P2
extern volatile unsigned short          U1P2                __at(0x2A7);
#ifndef _LIB_BUILD
asm("U1P2 equ 02A7h");
#endif

// Register: U1P2L
#define U1P2L U1P2L
extern volatile unsigned char           U1P2L               __at(0x2A7);
#ifndef _LIB_BUILD
asm("U1P2L equ 02A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U1P2Lbits_t;
extern volatile U1P2Lbits_t U1P2Lbits __at(0x2A7);
// bitfield macros
#define _U1P2L_P2L_POSN                                     0x0
#define _U1P2L_P2L_POSITION                                 0x0
#define _U1P2L_P2L_SIZE                                     0x8
#define _U1P2L_P2L_LENGTH                                   0x8
#define _U1P2L_P2L_MASK                                     0xFF

// Register: U1P2H
#define U1P2H U1P2H
extern volatile unsigned char           U1P2H               __at(0x2A8);
#ifndef _LIB_BUILD
asm("U1P2H equ 02A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2H                    :1;
    };
} U1P2Hbits_t;
extern volatile U1P2Hbits_t U1P2Hbits __at(0x2A8);
// bitfield macros
#define _U1P2H_P2H_POSN                                     0x0
#define _U1P2H_P2H_POSITION                                 0x0
#define _U1P2H_P2H_SIZE                                     0x1
#define _U1P2H_P2H_LENGTH                                   0x1
#define _U1P2H_P2H_MASK                                     0x1

// Register: U1P3
#define U1P3 U1P3
extern volatile unsigned short          U1P3                __at(0x2A9);
#ifndef _LIB_BUILD
asm("U1P3 equ 02A9h");
#endif

// Register: U1P3L
#define U1P3L U1P3L
extern volatile unsigned char           U1P3L               __at(0x2A9);
#ifndef _LIB_BUILD
asm("U1P3L equ 02A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U1P3Lbits_t;
extern volatile U1P3Lbits_t U1P3Lbits __at(0x2A9);
// bitfield macros
#define _U1P3L_P3L_POSN                                     0x0
#define _U1P3L_P3L_POSITION                                 0x0
#define _U1P3L_P3L_SIZE                                     0x8
#define _U1P3L_P3L_LENGTH                                   0x8
#define _U1P3L_P3L_MASK                                     0xFF

// Register: U1P3H
#define U1P3H U1P3H
extern volatile unsigned char           U1P3H               __at(0x2AA);
#ifndef _LIB_BUILD
asm("U1P3H equ 02AAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3H                    :1;
    };
} U1P3Hbits_t;
extern volatile U1P3Hbits_t U1P3Hbits __at(0x2AA);
// bitfield macros
#define _U1P3H_P3H_POSN                                     0x0
#define _U1P3H_P3H_POSITION                                 0x0
#define _U1P3H_P3H_SIZE                                     0x1
#define _U1P3H_P3H_LENGTH                                   0x1
#define _U1P3H_P3H_MASK                                     0x1

// Register: U1CON0
#define U1CON0 U1CON0
extern volatile unsigned char           U1CON0              __at(0x2AB);
#ifndef _LIB_BUILD
asm("U1CON0 equ 02ABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned U1MODE                 :4;
        unsigned U1RXEN                 :1;
        unsigned U1TXEN                 :1;
        unsigned U1ABDEN                :1;
        unsigned U1BRGS                 :1;
    };
    struct {
        unsigned U1MODE0                :1;
        unsigned U1MODE1                :1;
        unsigned U1MODE2                :1;
        unsigned U1MODE3                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U1CON0bits_t;
extern volatile U1CON0bits_t U1CON0bits __at(0x2AB);
// bitfield macros
#define _U1CON0_MODE0_POSN                                  0x0
#define _U1CON0_MODE0_POSITION                              0x0
#define _U1CON0_MODE0_SIZE                                  0x1
#define _U1CON0_MODE0_LENGTH                                0x1
#define _U1CON0_MODE0_MASK                                  0x1
#define _U1CON0_MODE1_POSN                                  0x1
#define _U1CON0_MODE1_POSITION                              0x1
#define _U1CON0_MODE1_SIZE                                  0x1
#define _U1CON0_MODE1_LENGTH                                0x1
#define _U1CON0_MODE1_MASK                                  0x2
#define _U1CON0_MODE2_POSN                                  0x2
#define _U1CON0_MODE2_POSITION                              0x2
#define _U1CON0_MODE2_SIZE                                  0x1
#define _U1CON0_MODE2_LENGTH                                0x1
#define _U1CON0_MODE2_MASK                                  0x4
#define _U1CON0_MODE3_POSN                                  0x3
#define _U1CON0_MODE3_POSITION                              0x3
#define _U1CON0_MODE3_SIZE                                  0x1
#define _U1CON0_MODE3_LENGTH                                0x1
#define _U1CON0_MODE3_MASK                                  0x8
#define _U1CON0_U1MODE_POSN                                 0x0
#define _U1CON0_U1MODE_POSITION                             0x0
#define _U1CON0_U1MODE_SIZE                                 0x4
#define _U1CON0_U1MODE_LENGTH                               0x4
#define _U1CON0_U1MODE_MASK                                 0xF
#define _U1CON0_U1RXEN_POSN                                 0x4
#define _U1CON0_U1RXEN_POSITION                             0x4
#define _U1CON0_U1RXEN_SIZE                                 0x1
#define _U1CON0_U1RXEN_LENGTH                               0x1
#define _U1CON0_U1RXEN_MASK                                 0x10
#define _U1CON0_U1TXEN_POSN                                 0x5
#define _U1CON0_U1TXEN_POSITION                             0x5
#define _U1CON0_U1TXEN_SIZE                                 0x1
#define _U1CON0_U1TXEN_LENGTH                               0x1
#define _U1CON0_U1TXEN_MASK                                 0x20
#define _U1CON0_U1ABDEN_POSN                                0x6
#define _U1CON0_U1ABDEN_POSITION                            0x6
#define _U1CON0_U1ABDEN_SIZE                                0x1
#define _U1CON0_U1ABDEN_LENGTH                              0x1
#define _U1CON0_U1ABDEN_MASK                                0x40
#define _U1CON0_U1BRGS_POSN                                 0x7
#define _U1CON0_U1BRGS_POSITION                             0x7
#define _U1CON0_U1BRGS_SIZE                                 0x1
#define _U1CON0_U1BRGS_LENGTH                               0x1
#define _U1CON0_U1BRGS_MASK                                 0x80
#define _U1CON0_U1MODE0_POSN                                0x0
#define _U1CON0_U1MODE0_POSITION                            0x0
#define _U1CON0_U1MODE0_SIZE                                0x1
#define _U1CON0_U1MODE0_LENGTH                              0x1
#define _U1CON0_U1MODE0_MASK                                0x1
#define _U1CON0_U1MODE1_POSN                                0x1
#define _U1CON0_U1MODE1_POSITION                            0x1
#define _U1CON0_U1MODE1_SIZE                                0x1
#define _U1CON0_U1MODE1_LENGTH                              0x1
#define _U1CON0_U1MODE1_MASK                                0x2
#define _U1CON0_U1MODE2_POSN                                0x2
#define _U1CON0_U1MODE2_POSITION                            0x2
#define _U1CON0_U1MODE2_SIZE                                0x1
#define _U1CON0_U1MODE2_LENGTH                              0x1
#define _U1CON0_U1MODE2_MASK                                0x4
#define _U1CON0_U1MODE3_POSN                                0x3
#define _U1CON0_U1MODE3_POSITION                            0x3
#define _U1CON0_U1MODE3_SIZE                                0x1
#define _U1CON0_U1MODE3_LENGTH                              0x1
#define _U1CON0_U1MODE3_MASK                                0x8
#define _U1CON0_MODE_POSN                                   0x0
#define _U1CON0_MODE_POSITION                               0x0
#define _U1CON0_MODE_SIZE                                   0x4
#define _U1CON0_MODE_LENGTH                                 0x4
#define _U1CON0_MODE_MASK                                   0xF
#define _U1CON0_RXEN_POSN                                   0x4
#define _U1CON0_RXEN_POSITION                               0x4
#define _U1CON0_RXEN_SIZE                                   0x1
#define _U1CON0_RXEN_LENGTH                                 0x1
#define _U1CON0_RXEN_MASK                                   0x10
#define _U1CON0_TXEN_POSN                                   0x5
#define _U1CON0_TXEN_POSITION                               0x5
#define _U1CON0_TXEN_SIZE                                   0x1
#define _U1CON0_TXEN_LENGTH                                 0x1
#define _U1CON0_TXEN_MASK                                   0x20
#define _U1CON0_ABDEN_POSN                                  0x6
#define _U1CON0_ABDEN_POSITION                              0x6
#define _U1CON0_ABDEN_SIZE                                  0x1
#define _U1CON0_ABDEN_LENGTH                                0x1
#define _U1CON0_ABDEN_MASK                                  0x40
#define _U1CON0_BRGS_POSN                                   0x7
#define _U1CON0_BRGS_POSITION                               0x7
#define _U1CON0_BRGS_SIZE                                   0x1
#define _U1CON0_BRGS_LENGTH                                 0x1
#define _U1CON0_BRGS_MASK                                   0x80

// Register: U1CON1
#define U1CON1 U1CON1
extern volatile unsigned char           U1CON1              __at(0x2AC);
#ifndef _LIB_BUILD
asm("U1CON1 equ 02ACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U1SENDB                :1;
        unsigned U1BRKOVR               :1;
        unsigned                        :1;
        unsigned U1RXBIMD               :1;
        unsigned U1WUE                  :1;
        unsigned                        :2;
        unsigned U1ON                   :1;
    };
} U1CON1bits_t;
extern volatile U1CON1bits_t U1CON1bits __at(0x2AC);
// bitfield macros
#define _U1CON1_SENDB_POSN                                  0x0
#define _U1CON1_SENDB_POSITION                              0x0
#define _U1CON1_SENDB_SIZE                                  0x1
#define _U1CON1_SENDB_LENGTH                                0x1
#define _U1CON1_SENDB_MASK                                  0x1
#define _U1CON1_BRKOVR_POSN                                 0x1
#define _U1CON1_BRKOVR_POSITION                             0x1
#define _U1CON1_BRKOVR_SIZE                                 0x1
#define _U1CON1_BRKOVR_LENGTH                               0x1
#define _U1CON1_BRKOVR_MASK                                 0x2
#define _U1CON1_RXBIMD_POSN                                 0x3
#define _U1CON1_RXBIMD_POSITION                             0x3
#define _U1CON1_RXBIMD_SIZE                                 0x1
#define _U1CON1_RXBIMD_LENGTH                               0x1
#define _U1CON1_RXBIMD_MASK                                 0x8
#define _U1CON1_WUE_POSN                                    0x4
#define _U1CON1_WUE_POSITION                                0x4
#define _U1CON1_WUE_SIZE                                    0x1
#define _U1CON1_WUE_LENGTH                                  0x1
#define _U1CON1_WUE_MASK                                    0x10
#define _U1CON1_ON_POSN                                     0x7
#define _U1CON1_ON_POSITION                                 0x7
#define _U1CON1_ON_SIZE                                     0x1
#define _U1CON1_ON_LENGTH                                   0x1
#define _U1CON1_ON_MASK                                     0x80
#define _U1CON1_U1SENDB_POSN                                0x0
#define _U1CON1_U1SENDB_POSITION                            0x0
#define _U1CON1_U1SENDB_SIZE                                0x1
#define _U1CON1_U1SENDB_LENGTH                              0x1
#define _U1CON1_U1SENDB_MASK                                0x1
#define _U1CON1_U1BRKOVR_POSN                               0x1
#define _U1CON1_U1BRKOVR_POSITION                           0x1
#define _U1CON1_U1BRKOVR_SIZE                               0x1
#define _U1CON1_U1BRKOVR_LENGTH                             0x1
#define _U1CON1_U1BRKOVR_MASK                               0x2
#define _U1CON1_U1RXBIMD_POSN                               0x3
#define _U1CON1_U1RXBIMD_POSITION                           0x3
#define _U1CON1_U1RXBIMD_SIZE                               0x1
#define _U1CON1_U1RXBIMD_LENGTH                             0x1
#define _U1CON1_U1RXBIMD_MASK                               0x8
#define _U1CON1_U1WUE_POSN                                  0x4
#define _U1CON1_U1WUE_POSITION                              0x4
#define _U1CON1_U1WUE_SIZE                                  0x1
#define _U1CON1_U1WUE_LENGTH                                0x1
#define _U1CON1_U1WUE_MASK                                  0x10
#define _U1CON1_U1ON_POSN                                   0x7
#define _U1CON1_U1ON_POSITION                               0x7
#define _U1CON1_U1ON_SIZE                                   0x1
#define _U1CON1_U1ON_LENGTH                                 0x1
#define _U1CON1_U1ON_MASK                                   0x80

// Register: U1CON2
#define U1CON2 U1CON2
extern volatile unsigned char           U1CON2              __at(0x2AD);
#ifndef _LIB_BUILD
asm("U1CON2 equ 02ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned C0EN                   :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U1FLO                  :2;
        unsigned U1TXPOL                :1;
        unsigned U1C0EN                 :1;
        unsigned U1STP                  :2;
        unsigned U1RXPOL                :1;
        unsigned U1RUNOVF               :1;
    };
    struct {
        unsigned U1FLO0                 :1;
        unsigned U1FLO1                 :1;
        unsigned                        :2;
        unsigned U1STP0                 :1;
        unsigned U1STP1                 :1;
    };
} U1CON2bits_t;
extern volatile U1CON2bits_t U1CON2bits __at(0x2AD);
// bitfield macros
#define _U1CON2_FLO_POSN                                    0x0
#define _U1CON2_FLO_POSITION                                0x0
#define _U1CON2_FLO_SIZE                                    0x2
#define _U1CON2_FLO_LENGTH                                  0x2
#define _U1CON2_FLO_MASK                                    0x3
#define _U1CON2_TXPOL_POSN                                  0x2
#define _U1CON2_TXPOL_POSITION                              0x2
#define _U1CON2_TXPOL_SIZE                                  0x1
#define _U1CON2_TXPOL_LENGTH                                0x1
#define _U1CON2_TXPOL_MASK                                  0x4
#define _U1CON2_C0EN_POSN                                   0x3
#define _U1CON2_C0EN_POSITION                               0x3
#define _U1CON2_C0EN_SIZE                                   0x1
#define _U1CON2_C0EN_LENGTH                                 0x1
#define _U1CON2_C0EN_MASK                                   0x8
#define _U1CON2_STP_POSN                                    0x4
#define _U1CON2_STP_POSITION                                0x4
#define _U1CON2_STP_SIZE                                    0x2
#define _U1CON2_STP_LENGTH                                  0x2
#define _U1CON2_STP_MASK                                    0x30
#define _U1CON2_RXPOL_POSN                                  0x6
#define _U1CON2_RXPOL_POSITION                              0x6
#define _U1CON2_RXPOL_SIZE                                  0x1
#define _U1CON2_RXPOL_LENGTH                                0x1
#define _U1CON2_RXPOL_MASK                                  0x40
#define _U1CON2_RUNOVF_POSN                                 0x7
#define _U1CON2_RUNOVF_POSITION                             0x7
#define _U1CON2_RUNOVF_SIZE                                 0x1
#define _U1CON2_RUNOVF_LENGTH                               0x1
#define _U1CON2_RUNOVF_MASK                                 0x80
#define _U1CON2_FLO0_POSN                                   0x0
#define _U1CON2_FLO0_POSITION                               0x0
#define _U1CON2_FLO0_SIZE                                   0x1
#define _U1CON2_FLO0_LENGTH                                 0x1
#define _U1CON2_FLO0_MASK                                   0x1
#define _U1CON2_FLO1_POSN                                   0x1
#define _U1CON2_FLO1_POSITION                               0x1
#define _U1CON2_FLO1_SIZE                                   0x1
#define _U1CON2_FLO1_LENGTH                                 0x1
#define _U1CON2_FLO1_MASK                                   0x2
#define _U1CON2_STP0_POSN                                   0x4
#define _U1CON2_STP0_POSITION                               0x4
#define _U1CON2_STP0_SIZE                                   0x1
#define _U1CON2_STP0_LENGTH                                 0x1
#define _U1CON2_STP0_MASK                                   0x10
#define _U1CON2_STP1_POSN                                   0x5
#define _U1CON2_STP1_POSITION                               0x5
#define _U1CON2_STP1_SIZE                                   0x1
#define _U1CON2_STP1_LENGTH                                 0x1
#define _U1CON2_STP1_MASK                                   0x20
#define _U1CON2_U1FLO_POSN                                  0x0
#define _U1CON2_U1FLO_POSITION                              0x0
#define _U1CON2_U1FLO_SIZE                                  0x2
#define _U1CON2_U1FLO_LENGTH                                0x2
#define _U1CON2_U1FLO_MASK                                  0x3
#define _U1CON2_U1TXPOL_POSN                                0x2
#define _U1CON2_U1TXPOL_POSITION                            0x2
#define _U1CON2_U1TXPOL_SIZE                                0x1
#define _U1CON2_U1TXPOL_LENGTH                              0x1
#define _U1CON2_U1TXPOL_MASK                                0x4
#define _U1CON2_U1C0EN_POSN                                 0x3
#define _U1CON2_U1C0EN_POSITION                             0x3
#define _U1CON2_U1C0EN_SIZE                                 0x1
#define _U1CON2_U1C0EN_LENGTH                               0x1
#define _U1CON2_U1C0EN_MASK                                 0x8
#define _U1CON2_U1STP_POSN                                  0x4
#define _U1CON2_U1STP_POSITION                              0x4
#define _U1CON2_U1STP_SIZE                                  0x2
#define _U1CON2_U1STP_LENGTH                                0x2
#define _U1CON2_U1STP_MASK                                  0x30
#define _U1CON2_U1RXPOL_POSN                                0x6
#define _U1CON2_U1RXPOL_POSITION                            0x6
#define _U1CON2_U1RXPOL_SIZE                                0x1
#define _U1CON2_U1RXPOL_LENGTH                              0x1
#define _U1CON2_U1RXPOL_MASK                                0x40
#define _U1CON2_U1RUNOVF_POSN                               0x7
#define _U1CON2_U1RUNOVF_POSITION                           0x7
#define _U1CON2_U1RUNOVF_SIZE                               0x1
#define _U1CON2_U1RUNOVF_LENGTH                             0x1
#define _U1CON2_U1RUNOVF_MASK                               0x80
#define _U1CON2_U1FLO0_POSN                                 0x0
#define _U1CON2_U1FLO0_POSITION                             0x0
#define _U1CON2_U1FLO0_SIZE                                 0x1
#define _U1CON2_U1FLO0_LENGTH                               0x1
#define _U1CON2_U1FLO0_MASK                                 0x1
#define _U1CON2_U1FLO1_POSN                                 0x1
#define _U1CON2_U1FLO1_POSITION                             0x1
#define _U1CON2_U1FLO1_SIZE                                 0x1
#define _U1CON2_U1FLO1_LENGTH                               0x1
#define _U1CON2_U1FLO1_MASK                                 0x2
#define _U1CON2_U1STP0_POSN                                 0x4
#define _U1CON2_U1STP0_POSITION                             0x4
#define _U1CON2_U1STP0_SIZE                                 0x1
#define _U1CON2_U1STP0_LENGTH                               0x1
#define _U1CON2_U1STP0_MASK                                 0x10
#define _U1CON2_U1STP1_POSN                                 0x5
#define _U1CON2_U1STP1_POSITION                             0x5
#define _U1CON2_U1STP1_SIZE                                 0x1
#define _U1CON2_U1STP1_LENGTH                               0x1
#define _U1CON2_U1STP1_MASK                                 0x20

// Register: U1BRG
#define U1BRG U1BRG
extern volatile unsigned short          U1BRG               __at(0x2AE);
#ifndef _LIB_BUILD
asm("U1BRG equ 02AEh");
#endif

// Register: U1BRGL
#define U1BRGL U1BRGL
extern volatile unsigned char           U1BRGL              __at(0x2AE);
#ifndef _LIB_BUILD
asm("U1BRGL equ 02AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U1BRGLbits_t;
extern volatile U1BRGLbits_t U1BRGLbits __at(0x2AE);
// bitfield macros
#define _U1BRGL_BRGL_POSN                                   0x0
#define _U1BRGL_BRGL_POSITION                               0x0
#define _U1BRGL_BRGL_SIZE                                   0x8
#define _U1BRGL_BRGL_LENGTH                                 0x8
#define _U1BRGL_BRGL_MASK                                   0xFF

// Register: U1BRGH
#define U1BRGH U1BRGH
extern volatile unsigned char           U1BRGH              __at(0x2AF);
#ifndef _LIB_BUILD
asm("U1BRGH equ 02AFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U1BRGHbits_t;
extern volatile U1BRGHbits_t U1BRGHbits __at(0x2AF);
// bitfield macros
#define _U1BRGH_BRGH_POSN                                   0x0
#define _U1BRGH_BRGH_POSITION                               0x0
#define _U1BRGH_BRGH_SIZE                                   0x8
#define _U1BRGH_BRGH_LENGTH                                 0x8
#define _U1BRGH_BRGH_MASK                                   0xFF

// Register: U1FIFO
#define U1FIFO U1FIFO
extern volatile unsigned char           U1FIFO              __at(0x2B0);
#ifndef _LIB_BUILD
asm("U1FIFO equ 02B0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U1RXBF                 :1;
        unsigned U1RXBE                 :1;
        unsigned U1XON                  :1;
        unsigned U1RXIDL                :1;
        unsigned U1TXBF                 :1;
        unsigned U1TXBE                 :1;
        unsigned U1STPMD                :1;
        unsigned U1TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U1RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U1FIFObits_t;
extern volatile U1FIFObits_t U1FIFObits __at(0x2B0);
// bitfield macros
#define _U1FIFO_RXBF_POSN                                   0x0
#define _U1FIFO_RXBF_POSITION                               0x0
#define _U1FIFO_RXBF_SIZE                                   0x1
#define _U1FIFO_RXBF_LENGTH                                 0x1
#define _U1FIFO_RXBF_MASK                                   0x1
#define _U1FIFO_RXBE_POSN                                   0x1
#define _U1FIFO_RXBE_POSITION                               0x1
#define _U1FIFO_RXBE_SIZE                                   0x1
#define _U1FIFO_RXBE_LENGTH                                 0x1
#define _U1FIFO_RXBE_MASK                                   0x2
#define _U1FIFO_XON_POSN                                    0x2
#define _U1FIFO_XON_POSITION                                0x2
#define _U1FIFO_XON_SIZE                                    0x1
#define _U1FIFO_XON_LENGTH                                  0x1
#define _U1FIFO_XON_MASK                                    0x4
#define _U1FIFO_RXIDL_POSN                                  0x3
#define _U1FIFO_RXIDL_POSITION                              0x3
#define _U1FIFO_RXIDL_SIZE                                  0x1
#define _U1FIFO_RXIDL_LENGTH                                0x1
#define _U1FIFO_RXIDL_MASK                                  0x8
#define _U1FIFO_TXBF_POSN                                   0x4
#define _U1FIFO_TXBF_POSITION                               0x4
#define _U1FIFO_TXBF_SIZE                                   0x1
#define _U1FIFO_TXBF_LENGTH                                 0x1
#define _U1FIFO_TXBF_MASK                                   0x10
#define _U1FIFO_TXBE_POSN                                   0x5
#define _U1FIFO_TXBE_POSITION                               0x5
#define _U1FIFO_TXBE_SIZE                                   0x1
#define _U1FIFO_TXBE_LENGTH                                 0x1
#define _U1FIFO_TXBE_MASK                                   0x20
#define _U1FIFO_STPMD_POSN                                  0x6
#define _U1FIFO_STPMD_POSITION                              0x6
#define _U1FIFO_STPMD_SIZE                                  0x1
#define _U1FIFO_STPMD_LENGTH                                0x1
#define _U1FIFO_STPMD_MASK                                  0x40
#define _U1FIFO_TXWRE_POSN                                  0x7
#define _U1FIFO_TXWRE_POSITION                              0x7
#define _U1FIFO_TXWRE_SIZE                                  0x1
#define _U1FIFO_TXWRE_LENGTH                                0x1
#define _U1FIFO_TXWRE_MASK                                  0x80
#define _U1FIFO_U1RXBF_POSN                                 0x0
#define _U1FIFO_U1RXBF_POSITION                             0x0
#define _U1FIFO_U1RXBF_SIZE                                 0x1
#define _U1FIFO_U1RXBF_LENGTH                               0x1
#define _U1FIFO_U1RXBF_MASK                                 0x1
#define _U1FIFO_U1RXBE_POSN                                 0x1
#define _U1FIFO_U1RXBE_POSITION                             0x1
#define _U1FIFO_U1RXBE_SIZE                                 0x1
#define _U1FIFO_U1RXBE_LENGTH                               0x1
#define _U1FIFO_U1RXBE_MASK                                 0x2
#define _U1FIFO_U1XON_POSN                                  0x2
#define _U1FIFO_U1XON_POSITION                              0x2
#define _U1FIFO_U1XON_SIZE                                  0x1
#define _U1FIFO_U1XON_LENGTH                                0x1
#define _U1FIFO_U1XON_MASK                                  0x4
#define _U1FIFO_U1RXIDL_POSN                                0x3
#define _U1FIFO_U1RXIDL_POSITION                            0x3
#define _U1FIFO_U1RXIDL_SIZE                                0x1
#define _U1FIFO_U1RXIDL_LENGTH                              0x1
#define _U1FIFO_U1RXIDL_MASK                                0x8
#define _U1FIFO_U1TXBF_POSN                                 0x4
#define _U1FIFO_U1TXBF_POSITION                             0x4
#define _U1FIFO_U1TXBF_SIZE                                 0x1
#define _U1FIFO_U1TXBF_LENGTH                               0x1
#define _U1FIFO_U1TXBF_MASK                                 0x10
#define _U1FIFO_U1TXBE_POSN                                 0x5
#define _U1FIFO_U1TXBE_POSITION                             0x5
#define _U1FIFO_U1TXBE_SIZE                                 0x1
#define _U1FIFO_U1TXBE_LENGTH                               0x1
#define _U1FIFO_U1TXBE_MASK                                 0x20
#define _U1FIFO_U1STPMD_POSN                                0x6
#define _U1FIFO_U1STPMD_POSITION                            0x6
#define _U1FIFO_U1STPMD_SIZE                                0x1
#define _U1FIFO_U1STPMD_LENGTH                              0x1
#define _U1FIFO_U1STPMD_MASK                                0x40
#define _U1FIFO_U1TXWRE_POSN                                0x7
#define _U1FIFO_U1TXWRE_POSITION                            0x7
#define _U1FIFO_U1TXWRE_SIZE                                0x1
#define _U1FIFO_U1TXWRE_LENGTH                              0x1
#define _U1FIFO_U1TXWRE_MASK                                0x80
#define _U1FIFO_U1RCIDL_POSN                                0x3
#define _U1FIFO_U1RCIDL_POSITION                            0x3
#define _U1FIFO_U1RCIDL_SIZE                                0x1
#define _U1FIFO_U1RCIDL_LENGTH                              0x1
#define _U1FIFO_U1RCIDL_MASK                                0x8
#define _U1FIFO_RCIDL_POSN                                  0x3
#define _U1FIFO_RCIDL_POSITION                              0x3
#define _U1FIFO_RCIDL_SIZE                                  0x1
#define _U1FIFO_RCIDL_LENGTH                                0x1
#define _U1FIFO_RCIDL_MASK                                  0x8

// Register: U1UIR
#define U1UIR U1UIR
extern volatile unsigned char           U1UIR               __at(0x2B1);
#ifndef _LIB_BUILD
asm("U1UIR equ 02B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U1ABDIE                :1;
        unsigned                        :3;
        unsigned U1ABDIF                :1;
        unsigned U1WUIF                 :1;
    };
} U1UIRbits_t;
extern volatile U1UIRbits_t U1UIRbits __at(0x2B1);
// bitfield macros
#define _U1UIR_ABDIE_POSN                                   0x2
#define _U1UIR_ABDIE_POSITION                               0x2
#define _U1UIR_ABDIE_SIZE                                   0x1
#define _U1UIR_ABDIE_LENGTH                                 0x1
#define _U1UIR_ABDIE_MASK                                   0x4
#define _U1UIR_ABDIF_POSN                                   0x6
#define _U1UIR_ABDIF_POSITION                               0x6
#define _U1UIR_ABDIF_SIZE                                   0x1
#define _U1UIR_ABDIF_LENGTH                                 0x1
#define _U1UIR_ABDIF_MASK                                   0x40
#define _U1UIR_WUIF_POSN                                    0x7
#define _U1UIR_WUIF_POSITION                                0x7
#define _U1UIR_WUIF_SIZE                                    0x1
#define _U1UIR_WUIF_LENGTH                                  0x1
#define _U1UIR_WUIF_MASK                                    0x80
#define _U1UIR_U1ABDIE_POSN                                 0x2
#define _U1UIR_U1ABDIE_POSITION                             0x2
#define _U1UIR_U1ABDIE_SIZE                                 0x1
#define _U1UIR_U1ABDIE_LENGTH                               0x1
#define _U1UIR_U1ABDIE_MASK                                 0x4
#define _U1UIR_U1ABDIF_POSN                                 0x6
#define _U1UIR_U1ABDIF_POSITION                             0x6
#define _U1UIR_U1ABDIF_SIZE                                 0x1
#define _U1UIR_U1ABDIF_LENGTH                               0x1
#define _U1UIR_U1ABDIF_MASK                                 0x40
#define _U1UIR_U1WUIF_POSN                                  0x7
#define _U1UIR_U1WUIF_POSITION                              0x7
#define _U1UIR_U1WUIF_SIZE                                  0x1
#define _U1UIR_U1WUIF_LENGTH                                0x1
#define _U1UIR_U1WUIF_MASK                                  0x80

// Register: U1ERRIR
#define U1ERRIR U1ERRIR
extern volatile unsigned char           U1ERRIR             __at(0x2B2);
#ifndef _LIB_BUILD
asm("U1ERRIR equ 02B2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U1TXCIF                :1;
        unsigned U1RXFOIF               :1;
        unsigned U1RXBKIF               :1;
        unsigned U1FERIF                :1;
        unsigned U1CERIF                :1;
        unsigned U1ABDOVF               :1;
        unsigned U1PERIF                :1;
        unsigned U1TXMTIF               :1;
    };
} U1ERRIRbits_t;
extern volatile U1ERRIRbits_t U1ERRIRbits __at(0x2B2);
// bitfield macros
#define _U1ERRIR_TXCIF_POSN                                 0x0
#define _U1ERRIR_TXCIF_POSITION                             0x0
#define _U1ERRIR_TXCIF_SIZE                                 0x1
#define _U1ERRIR_TXCIF_LENGTH                               0x1
#define _U1ERRIR_TXCIF_MASK                                 0x1
#define _U1ERRIR_RXFOIF_POSN                                0x1
#define _U1ERRIR_RXFOIF_POSITION                            0x1
#define _U1ERRIR_RXFOIF_SIZE                                0x1
#define _U1ERRIR_RXFOIF_LENGTH                              0x1
#define _U1ERRIR_RXFOIF_MASK                                0x2
#define _U1ERRIR_RXBKIF_POSN                                0x2
#define _U1ERRIR_RXBKIF_POSITION                            0x2
#define _U1ERRIR_RXBKIF_SIZE                                0x1
#define _U1ERRIR_RXBKIF_LENGTH                              0x1
#define _U1ERRIR_RXBKIF_MASK                                0x4
#define _U1ERRIR_FERIF_POSN                                 0x3
#define _U1ERRIR_FERIF_POSITION                             0x3
#define _U1ERRIR_FERIF_SIZE                                 0x1
#define _U1ERRIR_FERIF_LENGTH                               0x1
#define _U1ERRIR_FERIF_MASK                                 0x8
#define _U1ERRIR_CERIF_POSN                                 0x4
#define _U1ERRIR_CERIF_POSITION                             0x4
#define _U1ERRIR_CERIF_SIZE                                 0x1
#define _U1ERRIR_CERIF_LENGTH                               0x1
#define _U1ERRIR_CERIF_MASK                                 0x10
#define _U1ERRIR_ABDOVF_POSN                                0x5
#define _U1ERRIR_ABDOVF_POSITION                            0x5
#define _U1ERRIR_ABDOVF_SIZE                                0x1
#define _U1ERRIR_ABDOVF_LENGTH                              0x1
#define _U1ERRIR_ABDOVF_MASK                                0x20
#define _U1ERRIR_PERIF_POSN                                 0x6
#define _U1ERRIR_PERIF_POSITION                             0x6
#define _U1ERRIR_PERIF_SIZE                                 0x1
#define _U1ERRIR_PERIF_LENGTH                               0x1
#define _U1ERRIR_PERIF_MASK                                 0x40
#define _U1ERRIR_TXMTIF_POSN                                0x7
#define _U1ERRIR_TXMTIF_POSITION                            0x7
#define _U1ERRIR_TXMTIF_SIZE                                0x1
#define _U1ERRIR_TXMTIF_LENGTH                              0x1
#define _U1ERRIR_TXMTIF_MASK                                0x80
#define _U1ERRIR_U1TXCIF_POSN                               0x0
#define _U1ERRIR_U1TXCIF_POSITION                           0x0
#define _U1ERRIR_U1TXCIF_SIZE                               0x1
#define _U1ERRIR_U1TXCIF_LENGTH                             0x1
#define _U1ERRIR_U1TXCIF_MASK                               0x1
#define _U1ERRIR_U1RXFOIF_POSN                              0x1
#define _U1ERRIR_U1RXFOIF_POSITION                          0x1
#define _U1ERRIR_U1RXFOIF_SIZE                              0x1
#define _U1ERRIR_U1RXFOIF_LENGTH                            0x1
#define _U1ERRIR_U1RXFOIF_MASK                              0x2
#define _U1ERRIR_U1RXBKIF_POSN                              0x2
#define _U1ERRIR_U1RXBKIF_POSITION                          0x2
#define _U1ERRIR_U1RXBKIF_SIZE                              0x1
#define _U1ERRIR_U1RXBKIF_LENGTH                            0x1
#define _U1ERRIR_U1RXBKIF_MASK                              0x4
#define _U1ERRIR_U1FERIF_POSN                               0x3
#define _U1ERRIR_U1FERIF_POSITION                           0x3
#define _U1ERRIR_U1FERIF_SIZE                               0x1
#define _U1ERRIR_U1FERIF_LENGTH                             0x1
#define _U1ERRIR_U1FERIF_MASK                               0x8
#define _U1ERRIR_U1CERIF_POSN                               0x4
#define _U1ERRIR_U1CERIF_POSITION                           0x4
#define _U1ERRIR_U1CERIF_SIZE                               0x1
#define _U1ERRIR_U1CERIF_LENGTH                             0x1
#define _U1ERRIR_U1CERIF_MASK                               0x10
#define _U1ERRIR_U1ABDOVF_POSN                              0x5
#define _U1ERRIR_U1ABDOVF_POSITION                          0x5
#define _U1ERRIR_U1ABDOVF_SIZE                              0x1
#define _U1ERRIR_U1ABDOVF_LENGTH                            0x1
#define _U1ERRIR_U1ABDOVF_MASK                              0x20
#define _U1ERRIR_U1PERIF_POSN                               0x6
#define _U1ERRIR_U1PERIF_POSITION                           0x6
#define _U1ERRIR_U1PERIF_SIZE                               0x1
#define _U1ERRIR_U1PERIF_LENGTH                             0x1
#define _U1ERRIR_U1PERIF_MASK                               0x40
#define _U1ERRIR_U1TXMTIF_POSN                              0x7
#define _U1ERRIR_U1TXMTIF_POSITION                          0x7
#define _U1ERRIR_U1TXMTIF_SIZE                              0x1
#define _U1ERRIR_U1TXMTIF_LENGTH                            0x1
#define _U1ERRIR_U1TXMTIF_MASK                              0x80

// Register: U1ERRIE
#define U1ERRIE U1ERRIE
extern volatile unsigned char           U1ERRIE             __at(0x2B3);
#ifndef _LIB_BUILD
asm("U1ERRIE equ 02B3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U1TXCIE                :1;
        unsigned U1RXFOIE               :1;
        unsigned U1RXBKIE               :1;
        unsigned U1FERIE                :1;
        unsigned U1CERIE                :1;
        unsigned U1ABDOVE               :1;
        unsigned U1PERIE                :1;
        unsigned U1TXMTIE               :1;
    };
} U1ERRIEbits_t;
extern volatile U1ERRIEbits_t U1ERRIEbits __at(0x2B3);
// bitfield macros
#define _U1ERRIE_TXCIE_POSN                                 0x0
#define _U1ERRIE_TXCIE_POSITION                             0x0
#define _U1ERRIE_TXCIE_SIZE                                 0x1
#define _U1ERRIE_TXCIE_LENGTH                               0x1
#define _U1ERRIE_TXCIE_MASK                                 0x1
#define _U1ERRIE_RXFOIE_POSN                                0x1
#define _U1ERRIE_RXFOIE_POSITION                            0x1
#define _U1ERRIE_RXFOIE_SIZE                                0x1
#define _U1ERRIE_RXFOIE_LENGTH                              0x1
#define _U1ERRIE_RXFOIE_MASK                                0x2
#define _U1ERRIE_RXBKIE_POSN                                0x2
#define _U1ERRIE_RXBKIE_POSITION                            0x2
#define _U1ERRIE_RXBKIE_SIZE                                0x1
#define _U1ERRIE_RXBKIE_LENGTH                              0x1
#define _U1ERRIE_RXBKIE_MASK                                0x4
#define _U1ERRIE_FERIE_POSN                                 0x3
#define _U1ERRIE_FERIE_POSITION                             0x3
#define _U1ERRIE_FERIE_SIZE                                 0x1
#define _U1ERRIE_FERIE_LENGTH                               0x1
#define _U1ERRIE_FERIE_MASK                                 0x8
#define _U1ERRIE_CERIE_POSN                                 0x4
#define _U1ERRIE_CERIE_POSITION                             0x4
#define _U1ERRIE_CERIE_SIZE                                 0x1
#define _U1ERRIE_CERIE_LENGTH                               0x1
#define _U1ERRIE_CERIE_MASK                                 0x10
#define _U1ERRIE_ABDOVE_POSN                                0x5
#define _U1ERRIE_ABDOVE_POSITION                            0x5
#define _U1ERRIE_ABDOVE_SIZE                                0x1
#define _U1ERRIE_ABDOVE_LENGTH                              0x1
#define _U1ERRIE_ABDOVE_MASK                                0x20
#define _U1ERRIE_PERIE_POSN                                 0x6
#define _U1ERRIE_PERIE_POSITION                             0x6
#define _U1ERRIE_PERIE_SIZE                                 0x1
#define _U1ERRIE_PERIE_LENGTH                               0x1
#define _U1ERRIE_PERIE_MASK                                 0x40
#define _U1ERRIE_TXMTIE_POSN                                0x7
#define _U1ERRIE_TXMTIE_POSITION                            0x7
#define _U1ERRIE_TXMTIE_SIZE                                0x1
#define _U1ERRIE_TXMTIE_LENGTH                              0x1
#define _U1ERRIE_TXMTIE_MASK                                0x80
#define _U1ERRIE_U1TXCIE_POSN                               0x0
#define _U1ERRIE_U1TXCIE_POSITION                           0x0
#define _U1ERRIE_U1TXCIE_SIZE                               0x1
#define _U1ERRIE_U1TXCIE_LENGTH                             0x1
#define _U1ERRIE_U1TXCIE_MASK                               0x1
#define _U1ERRIE_U1RXFOIE_POSN                              0x1
#define _U1ERRIE_U1RXFOIE_POSITION                          0x1
#define _U1ERRIE_U1RXFOIE_SIZE                              0x1
#define _U1ERRIE_U1RXFOIE_LENGTH                            0x1
#define _U1ERRIE_U1RXFOIE_MASK                              0x2
#define _U1ERRIE_U1RXBKIE_POSN                              0x2
#define _U1ERRIE_U1RXBKIE_POSITION                          0x2
#define _U1ERRIE_U1RXBKIE_SIZE                              0x1
#define _U1ERRIE_U1RXBKIE_LENGTH                            0x1
#define _U1ERRIE_U1RXBKIE_MASK                              0x4
#define _U1ERRIE_U1FERIE_POSN                               0x3
#define _U1ERRIE_U1FERIE_POSITION                           0x3
#define _U1ERRIE_U1FERIE_SIZE                               0x1
#define _U1ERRIE_U1FERIE_LENGTH                             0x1
#define _U1ERRIE_U1FERIE_MASK                               0x8
#define _U1ERRIE_U1CERIE_POSN                               0x4
#define _U1ERRIE_U1CERIE_POSITION                           0x4
#define _U1ERRIE_U1CERIE_SIZE                               0x1
#define _U1ERRIE_U1CERIE_LENGTH                             0x1
#define _U1ERRIE_U1CERIE_MASK                               0x10
#define _U1ERRIE_U1ABDOVE_POSN                              0x5
#define _U1ERRIE_U1ABDOVE_POSITION                          0x5
#define _U1ERRIE_U1ABDOVE_SIZE                              0x1
#define _U1ERRIE_U1ABDOVE_LENGTH                            0x1
#define _U1ERRIE_U1ABDOVE_MASK                              0x20
#define _U1ERRIE_U1PERIE_POSN                               0x6
#define _U1ERRIE_U1PERIE_POSITION                           0x6
#define _U1ERRIE_U1PERIE_SIZE                               0x1
#define _U1ERRIE_U1PERIE_LENGTH                             0x1
#define _U1ERRIE_U1PERIE_MASK                               0x40
#define _U1ERRIE_U1TXMTIE_POSN                              0x7
#define _U1ERRIE_U1TXMTIE_POSITION                          0x7
#define _U1ERRIE_U1TXMTIE_SIZE                              0x1
#define _U1ERRIE_U1TXMTIE_LENGTH                            0x1
#define _U1ERRIE_U1TXMTIE_MASK                              0x80

// Register: U2RXB
#define U2RXB U2RXB
extern volatile unsigned char           U2RXB               __at(0x2B4);
#ifndef _LIB_BUILD
asm("U2RXB equ 02B4h");
#endif
// aliases
extern volatile unsigned char           U2RXBL              __at(0x2B4);
#ifndef _LIB_BUILD
asm("U2RXBL equ 02B4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBbits_t;
extern volatile U2RXBbits_t U2RXBbits __at(0x2B4);
// bitfield macros
#define _U2RXB_RXB_POSN                                     0x0
#define _U2RXB_RXB_POSITION                                 0x0
#define _U2RXB_RXB_SIZE                                     0x8
#define _U2RXB_RXB_LENGTH                                   0x8
#define _U2RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBLbits_t;
extern volatile U2RXBLbits_t U2RXBLbits __at(0x2B4);
// bitfield macros
#define _U2RXBL_RXB_POSN                                    0x0
#define _U2RXBL_RXB_POSITION                                0x0
#define _U2RXBL_RXB_SIZE                                    0x8
#define _U2RXBL_RXB_LENGTH                                  0x8
#define _U2RXBL_RXB_MASK                                    0xFF

// Register: U2TXB
#define U2TXB U2TXB
extern volatile unsigned char           U2TXB               __at(0x2B6);
#ifndef _LIB_BUILD
asm("U2TXB equ 02B6h");
#endif
// aliases
extern volatile unsigned char           U2TXBL              __at(0x2B6);
#ifndef _LIB_BUILD
asm("U2TXBL equ 02B6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBbits_t;
extern volatile U2TXBbits_t U2TXBbits __at(0x2B6);
// bitfield macros
#define _U2TXB_TXB_POSN                                     0x0
#define _U2TXB_TXB_POSITION                                 0x0
#define _U2TXB_TXB_SIZE                                     0x8
#define _U2TXB_TXB_LENGTH                                   0x8
#define _U2TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBLbits_t;
extern volatile U2TXBLbits_t U2TXBLbits __at(0x2B6);
// bitfield macros
#define _U2TXBL_TXB_POSN                                    0x0
#define _U2TXBL_TXB_POSITION                                0x0
#define _U2TXBL_TXB_SIZE                                    0x8
#define _U2TXBL_TXB_LENGTH                                  0x8
#define _U2TXBL_TXB_MASK                                    0xFF

// Register: U2P1
#define U2P1 U2P1
extern volatile unsigned char           U2P1                __at(0x2B8);
#ifndef _LIB_BUILD
asm("U2P1 equ 02B8h");
#endif

// Register: U2P1L
#define U2P1L U2P1L
extern volatile unsigned char           U2P1L               __at(0x2B8);
#ifndef _LIB_BUILD
asm("U2P1L equ 02B8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U2P1Lbits_t;
extern volatile U2P1Lbits_t U2P1Lbits __at(0x2B8);
// bitfield macros
#define _U2P1L_P1L_POSN                                     0x0
#define _U2P1L_P1L_POSITION                                 0x0
#define _U2P1L_P1L_SIZE                                     0x8
#define _U2P1L_P1L_LENGTH                                   0x8
#define _U2P1L_P1L_MASK                                     0xFF

// Register: U2P2
#define U2P2 U2P2
extern volatile unsigned char           U2P2                __at(0x2BA);
#ifndef _LIB_BUILD
asm("U2P2 equ 02BAh");
#endif

// Register: U2P2L
#define U2P2L U2P2L
extern volatile unsigned char           U2P2L               __at(0x2BA);
#ifndef _LIB_BUILD
asm("U2P2L equ 02BAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U2P2Lbits_t;
extern volatile U2P2Lbits_t U2P2Lbits __at(0x2BA);
// bitfield macros
#define _U2P2L_P2L_POSN                                     0x0
#define _U2P2L_P2L_POSITION                                 0x0
#define _U2P2L_P2L_SIZE                                     0x8
#define _U2P2L_P2L_LENGTH                                   0x8
#define _U2P2L_P2L_MASK                                     0xFF

// Register: U2P3
#define U2P3 U2P3
extern volatile unsigned char           U2P3                __at(0x2BC);
#ifndef _LIB_BUILD
asm("U2P3 equ 02BCh");
#endif

// Register: U2P3L
#define U2P3L U2P3L
extern volatile unsigned char           U2P3L               __at(0x2BC);
#ifndef _LIB_BUILD
asm("U2P3L equ 02BCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U2P3Lbits_t;
extern volatile U2P3Lbits_t U2P3Lbits __at(0x2BC);
// bitfield macros
#define _U2P3L_P3L_POSN                                     0x0
#define _U2P3L_P3L_POSITION                                 0x0
#define _U2P3L_P3L_SIZE                                     0x8
#define _U2P3L_P3L_LENGTH                                   0x8
#define _U2P3L_P3L_MASK                                     0xFF

// Register: U2CON0
#define U2CON0 U2CON0
extern volatile unsigned char           U2CON0              __at(0x2BE);
#ifndef _LIB_BUILD
asm("U2CON0 equ 02BEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U2MODE                 :4;
        unsigned U2RXEN                 :1;
        unsigned U2TXEN                 :1;
        unsigned U2ABDEN                :1;
        unsigned U2BRGS                 :1;
    };
    struct {
        unsigned U2MODE0                :1;
        unsigned U2MODE1                :1;
        unsigned U2MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U2CON0bits_t;
extern volatile U2CON0bits_t U2CON0bits __at(0x2BE);
// bitfield macros
#define _U2CON0_MODE0_POSN                                  0x0
#define _U2CON0_MODE0_POSITION                              0x0
#define _U2CON0_MODE0_SIZE                                  0x1
#define _U2CON0_MODE0_LENGTH                                0x1
#define _U2CON0_MODE0_MASK                                  0x1
#define _U2CON0_MODE1_POSN                                  0x1
#define _U2CON0_MODE1_POSITION                              0x1
#define _U2CON0_MODE1_SIZE                                  0x1
#define _U2CON0_MODE1_LENGTH                                0x1
#define _U2CON0_MODE1_MASK                                  0x2
#define _U2CON0_MODE2_POSN                                  0x2
#define _U2CON0_MODE2_POSITION                              0x2
#define _U2CON0_MODE2_SIZE                                  0x1
#define _U2CON0_MODE2_LENGTH                                0x1
#define _U2CON0_MODE2_MASK                                  0x4
#define _U2CON0_U2MODE_POSN                                 0x0
#define _U2CON0_U2MODE_POSITION                             0x0
#define _U2CON0_U2MODE_SIZE                                 0x4
#define _U2CON0_U2MODE_LENGTH                               0x4
#define _U2CON0_U2MODE_MASK                                 0xF
#define _U2CON0_U2RXEN_POSN                                 0x4
#define _U2CON0_U2RXEN_POSITION                             0x4
#define _U2CON0_U2RXEN_SIZE                                 0x1
#define _U2CON0_U2RXEN_LENGTH                               0x1
#define _U2CON0_U2RXEN_MASK                                 0x10
#define _U2CON0_U2TXEN_POSN                                 0x5
#define _U2CON0_U2TXEN_POSITION                             0x5
#define _U2CON0_U2TXEN_SIZE                                 0x1
#define _U2CON0_U2TXEN_LENGTH                               0x1
#define _U2CON0_U2TXEN_MASK                                 0x20
#define _U2CON0_U2ABDEN_POSN                                0x6
#define _U2CON0_U2ABDEN_POSITION                            0x6
#define _U2CON0_U2ABDEN_SIZE                                0x1
#define _U2CON0_U2ABDEN_LENGTH                              0x1
#define _U2CON0_U2ABDEN_MASK                                0x40
#define _U2CON0_U2BRGS_POSN                                 0x7
#define _U2CON0_U2BRGS_POSITION                             0x7
#define _U2CON0_U2BRGS_SIZE                                 0x1
#define _U2CON0_U2BRGS_LENGTH                               0x1
#define _U2CON0_U2BRGS_MASK                                 0x80
#define _U2CON0_U2MODE0_POSN                                0x0
#define _U2CON0_U2MODE0_POSITION                            0x0
#define _U2CON0_U2MODE0_SIZE                                0x1
#define _U2CON0_U2MODE0_LENGTH                              0x1
#define _U2CON0_U2MODE0_MASK                                0x1
#define _U2CON0_U2MODE1_POSN                                0x1
#define _U2CON0_U2MODE1_POSITION                            0x1
#define _U2CON0_U2MODE1_SIZE                                0x1
#define _U2CON0_U2MODE1_LENGTH                              0x1
#define _U2CON0_U2MODE1_MASK                                0x2
#define _U2CON0_U2MODE2_POSN                                0x2
#define _U2CON0_U2MODE2_POSITION                            0x2
#define _U2CON0_U2MODE2_SIZE                                0x1
#define _U2CON0_U2MODE2_LENGTH                              0x1
#define _U2CON0_U2MODE2_MASK                                0x4
#define _U2CON0_MODE_POSN                                   0x0
#define _U2CON0_MODE_POSITION                               0x0
#define _U2CON0_MODE_SIZE                                   0x4
#define _U2CON0_MODE_LENGTH                                 0x4
#define _U2CON0_MODE_MASK                                   0xF
#define _U2CON0_RXEN_POSN                                   0x4
#define _U2CON0_RXEN_POSITION                               0x4
#define _U2CON0_RXEN_SIZE                                   0x1
#define _U2CON0_RXEN_LENGTH                                 0x1
#define _U2CON0_RXEN_MASK                                   0x10
#define _U2CON0_TXEN_POSN                                   0x5
#define _U2CON0_TXEN_POSITION                               0x5
#define _U2CON0_TXEN_SIZE                                   0x1
#define _U2CON0_TXEN_LENGTH                                 0x1
#define _U2CON0_TXEN_MASK                                   0x20
#define _U2CON0_ABDEN_POSN                                  0x6
#define _U2CON0_ABDEN_POSITION                              0x6
#define _U2CON0_ABDEN_SIZE                                  0x1
#define _U2CON0_ABDEN_LENGTH                                0x1
#define _U2CON0_ABDEN_MASK                                  0x40
#define _U2CON0_BRGS_POSN                                   0x7
#define _U2CON0_BRGS_POSITION                               0x7
#define _U2CON0_BRGS_SIZE                                   0x1
#define _U2CON0_BRGS_LENGTH                                 0x1
#define _U2CON0_BRGS_MASK                                   0x80

// Register: U2CON1
#define U2CON1 U2CON1
extern volatile unsigned char           U2CON1              __at(0x2BF);
#ifndef _LIB_BUILD
asm("U2CON1 equ 02BFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U2SENDB                :1;
        unsigned U2BRKOVR               :1;
        unsigned                        :1;
        unsigned U2RXBIMD               :1;
        unsigned U2WUE                  :1;
        unsigned                        :2;
        unsigned U2ON                   :1;
    };
} U2CON1bits_t;
extern volatile U2CON1bits_t U2CON1bits __at(0x2BF);
// bitfield macros
#define _U2CON1_SENDB_POSN                                  0x0
#define _U2CON1_SENDB_POSITION                              0x0
#define _U2CON1_SENDB_SIZE                                  0x1
#define _U2CON1_SENDB_LENGTH                                0x1
#define _U2CON1_SENDB_MASK                                  0x1
#define _U2CON1_BRKOVR_POSN                                 0x1
#define _U2CON1_BRKOVR_POSITION                             0x1
#define _U2CON1_BRKOVR_SIZE                                 0x1
#define _U2CON1_BRKOVR_LENGTH                               0x1
#define _U2CON1_BRKOVR_MASK                                 0x2
#define _U2CON1_RXBIMD_POSN                                 0x3
#define _U2CON1_RXBIMD_POSITION                             0x3
#define _U2CON1_RXBIMD_SIZE                                 0x1
#define _U2CON1_RXBIMD_LENGTH                               0x1
#define _U2CON1_RXBIMD_MASK                                 0x8
#define _U2CON1_WUE_POSN                                    0x4
#define _U2CON1_WUE_POSITION                                0x4
#define _U2CON1_WUE_SIZE                                    0x1
#define _U2CON1_WUE_LENGTH                                  0x1
#define _U2CON1_WUE_MASK                                    0x10
#define _U2CON1_ON_POSN                                     0x7
#define _U2CON1_ON_POSITION                                 0x7
#define _U2CON1_ON_SIZE                                     0x1
#define _U2CON1_ON_LENGTH                                   0x1
#define _U2CON1_ON_MASK                                     0x80
#define _U2CON1_U2SENDB_POSN                                0x0
#define _U2CON1_U2SENDB_POSITION                            0x0
#define _U2CON1_U2SENDB_SIZE                                0x1
#define _U2CON1_U2SENDB_LENGTH                              0x1
#define _U2CON1_U2SENDB_MASK                                0x1
#define _U2CON1_U2BRKOVR_POSN                               0x1
#define _U2CON1_U2BRKOVR_POSITION                           0x1
#define _U2CON1_U2BRKOVR_SIZE                               0x1
#define _U2CON1_U2BRKOVR_LENGTH                             0x1
#define _U2CON1_U2BRKOVR_MASK                               0x2
#define _U2CON1_U2RXBIMD_POSN                               0x3
#define _U2CON1_U2RXBIMD_POSITION                           0x3
#define _U2CON1_U2RXBIMD_SIZE                               0x1
#define _U2CON1_U2RXBIMD_LENGTH                             0x1
#define _U2CON1_U2RXBIMD_MASK                               0x8
#define _U2CON1_U2WUE_POSN                                  0x4
#define _U2CON1_U2WUE_POSITION                              0x4
#define _U2CON1_U2WUE_SIZE                                  0x1
#define _U2CON1_U2WUE_LENGTH                                0x1
#define _U2CON1_U2WUE_MASK                                  0x10
#define _U2CON1_U2ON_POSN                                   0x7
#define _U2CON1_U2ON_POSITION                               0x7
#define _U2CON1_U2ON_SIZE                                   0x1
#define _U2CON1_U2ON_LENGTH                                 0x1
#define _U2CON1_U2ON_MASK                                   0x80

// Register: U2CON2
#define U2CON2 U2CON2
extern volatile unsigned char           U2CON2              __at(0x2C0);
#ifndef _LIB_BUILD
asm("U2CON2 equ 02C0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U2FLO                  :2;
        unsigned U2TXPOL                :1;
        unsigned                        :1;
        unsigned U2STP                  :2;
        unsigned U2RXPOL                :1;
        unsigned U2RUNOVF               :1;
    };
    struct {
        unsigned U2FLO0                 :1;
        unsigned U2FLO1                 :1;
        unsigned                        :2;
        unsigned U2STP0                 :1;
        unsigned U2STP1                 :1;
    };
} U2CON2bits_t;
extern volatile U2CON2bits_t U2CON2bits __at(0x2C0);
// bitfield macros
#define _U2CON2_FLO_POSN                                    0x0
#define _U2CON2_FLO_POSITION                                0x0
#define _U2CON2_FLO_SIZE                                    0x2
#define _U2CON2_FLO_LENGTH                                  0x2
#define _U2CON2_FLO_MASK                                    0x3
#define _U2CON2_TXPOL_POSN                                  0x2
#define _U2CON2_TXPOL_POSITION                              0x2
#define _U2CON2_TXPOL_SIZE                                  0x1
#define _U2CON2_TXPOL_LENGTH                                0x1
#define _U2CON2_TXPOL_MASK                                  0x4
#define _U2CON2_STP_POSN                                    0x4
#define _U2CON2_STP_POSITION                                0x4
#define _U2CON2_STP_SIZE                                    0x2
#define _U2CON2_STP_LENGTH                                  0x2
#define _U2CON2_STP_MASK                                    0x30
#define _U2CON2_RXPOL_POSN                                  0x6
#define _U2CON2_RXPOL_POSITION                              0x6
#define _U2CON2_RXPOL_SIZE                                  0x1
#define _U2CON2_RXPOL_LENGTH                                0x1
#define _U2CON2_RXPOL_MASK                                  0x40
#define _U2CON2_RUNOVF_POSN                                 0x7
#define _U2CON2_RUNOVF_POSITION                             0x7
#define _U2CON2_RUNOVF_SIZE                                 0x1
#define _U2CON2_RUNOVF_LENGTH                               0x1
#define _U2CON2_RUNOVF_MASK                                 0x80
#define _U2CON2_FLO0_POSN                                   0x0
#define _U2CON2_FLO0_POSITION                               0x0
#define _U2CON2_FLO0_SIZE                                   0x1
#define _U2CON2_FLO0_LENGTH                                 0x1
#define _U2CON2_FLO0_MASK                                   0x1
#define _U2CON2_FLO1_POSN                                   0x1
#define _U2CON2_FLO1_POSITION                               0x1
#define _U2CON2_FLO1_SIZE                                   0x1
#define _U2CON2_FLO1_LENGTH                                 0x1
#define _U2CON2_FLO1_MASK                                   0x2
#define _U2CON2_STP0_POSN                                   0x4
#define _U2CON2_STP0_POSITION                               0x4
#define _U2CON2_STP0_SIZE                                   0x1
#define _U2CON2_STP0_LENGTH                                 0x1
#define _U2CON2_STP0_MASK                                   0x10
#define _U2CON2_STP1_POSN                                   0x5
#define _U2CON2_STP1_POSITION                               0x5
#define _U2CON2_STP1_SIZE                                   0x1
#define _U2CON2_STP1_LENGTH                                 0x1
#define _U2CON2_STP1_MASK                                   0x20
#define _U2CON2_U2FLO_POSN                                  0x0
#define _U2CON2_U2FLO_POSITION                              0x0
#define _U2CON2_U2FLO_SIZE                                  0x2
#define _U2CON2_U2FLO_LENGTH                                0x2
#define _U2CON2_U2FLO_MASK                                  0x3
#define _U2CON2_U2TXPOL_POSN                                0x2
#define _U2CON2_U2TXPOL_POSITION                            0x2
#define _U2CON2_U2TXPOL_SIZE                                0x1
#define _U2CON2_U2TXPOL_LENGTH                              0x1
#define _U2CON2_U2TXPOL_MASK                                0x4
#define _U2CON2_U2STP_POSN                                  0x4
#define _U2CON2_U2STP_POSITION                              0x4
#define _U2CON2_U2STP_SIZE                                  0x2
#define _U2CON2_U2STP_LENGTH                                0x2
#define _U2CON2_U2STP_MASK                                  0x30
#define _U2CON2_U2RXPOL_POSN                                0x6
#define _U2CON2_U2RXPOL_POSITION                            0x6
#define _U2CON2_U2RXPOL_SIZE                                0x1
#define _U2CON2_U2RXPOL_LENGTH                              0x1
#define _U2CON2_U2RXPOL_MASK                                0x40
#define _U2CON2_U2RUNOVF_POSN                               0x7
#define _U2CON2_U2RUNOVF_POSITION                           0x7
#define _U2CON2_U2RUNOVF_SIZE                               0x1
#define _U2CON2_U2RUNOVF_LENGTH                             0x1
#define _U2CON2_U2RUNOVF_MASK                               0x80
#define _U2CON2_U2FLO0_POSN                                 0x0
#define _U2CON2_U2FLO0_POSITION                             0x0
#define _U2CON2_U2FLO0_SIZE                                 0x1
#define _U2CON2_U2FLO0_LENGTH                               0x1
#define _U2CON2_U2FLO0_MASK                                 0x1
#define _U2CON2_U2FLO1_POSN                                 0x1
#define _U2CON2_U2FLO1_POSITION                             0x1
#define _U2CON2_U2FLO1_SIZE                                 0x1
#define _U2CON2_U2FLO1_LENGTH                               0x1
#define _U2CON2_U2FLO1_MASK                                 0x2
#define _U2CON2_U2STP0_POSN                                 0x4
#define _U2CON2_U2STP0_POSITION                             0x4
#define _U2CON2_U2STP0_SIZE                                 0x1
#define _U2CON2_U2STP0_LENGTH                               0x1
#define _U2CON2_U2STP0_MASK                                 0x10
#define _U2CON2_U2STP1_POSN                                 0x5
#define _U2CON2_U2STP1_POSITION                             0x5
#define _U2CON2_U2STP1_SIZE                                 0x1
#define _U2CON2_U2STP1_LENGTH                               0x1
#define _U2CON2_U2STP1_MASK                                 0x20

// Register: U2BRG
#define U2BRG U2BRG
extern volatile unsigned short          U2BRG               __at(0x2C1);
#ifndef _LIB_BUILD
asm("U2BRG equ 02C1h");
#endif

// Register: U2BRGL
#define U2BRGL U2BRGL
extern volatile unsigned char           U2BRGL              __at(0x2C1);
#ifndef _LIB_BUILD
asm("U2BRGL equ 02C1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U2BRGLbits_t;
extern volatile U2BRGLbits_t U2BRGLbits __at(0x2C1);
// bitfield macros
#define _U2BRGL_BRGL_POSN                                   0x0
#define _U2BRGL_BRGL_POSITION                               0x0
#define _U2BRGL_BRGL_SIZE                                   0x8
#define _U2BRGL_BRGL_LENGTH                                 0x8
#define _U2BRGL_BRGL_MASK                                   0xFF

// Register: U2BRGH
#define U2BRGH U2BRGH
extern volatile unsigned char           U2BRGH              __at(0x2C2);
#ifndef _LIB_BUILD
asm("U2BRGH equ 02C2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U2BRGHbits_t;
extern volatile U2BRGHbits_t U2BRGHbits __at(0x2C2);
// bitfield macros
#define _U2BRGH_BRGH_POSN                                   0x0
#define _U2BRGH_BRGH_POSITION                               0x0
#define _U2BRGH_BRGH_SIZE                                   0x8
#define _U2BRGH_BRGH_LENGTH                                 0x8
#define _U2BRGH_BRGH_MASK                                   0xFF

// Register: U2FIFO
#define U2FIFO U2FIFO
extern volatile unsigned char           U2FIFO              __at(0x2C3);
#ifndef _LIB_BUILD
asm("U2FIFO equ 02C3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U2RXBF                 :1;
        unsigned U2RXBE                 :1;
        unsigned U2XON                  :1;
        unsigned U2RXIDL                :1;
        unsigned U2TXBF                 :1;
        unsigned U2TXBE                 :1;
        unsigned U2STPMD                :1;
        unsigned U2TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U2RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U2FIFObits_t;
extern volatile U2FIFObits_t U2FIFObits __at(0x2C3);
// bitfield macros
#define _U2FIFO_RXBF_POSN                                   0x0
#define _U2FIFO_RXBF_POSITION                               0x0
#define _U2FIFO_RXBF_SIZE                                   0x1
#define _U2FIFO_RXBF_LENGTH                                 0x1
#define _U2FIFO_RXBF_MASK                                   0x1
#define _U2FIFO_RXBE_POSN                                   0x1
#define _U2FIFO_RXBE_POSITION                               0x1
#define _U2FIFO_RXBE_SIZE                                   0x1
#define _U2FIFO_RXBE_LENGTH                                 0x1
#define _U2FIFO_RXBE_MASK                                   0x2
#define _U2FIFO_XON_POSN                                    0x2
#define _U2FIFO_XON_POSITION                                0x2
#define _U2FIFO_XON_SIZE                                    0x1
#define _U2FIFO_XON_LENGTH                                  0x1
#define _U2FIFO_XON_MASK                                    0x4
#define _U2FIFO_RXIDL_POSN                                  0x3
#define _U2FIFO_RXIDL_POSITION                              0x3
#define _U2FIFO_RXIDL_SIZE                                  0x1
#define _U2FIFO_RXIDL_LENGTH                                0x1
#define _U2FIFO_RXIDL_MASK                                  0x8
#define _U2FIFO_TXBF_POSN                                   0x4
#define _U2FIFO_TXBF_POSITION                               0x4
#define _U2FIFO_TXBF_SIZE                                   0x1
#define _U2FIFO_TXBF_LENGTH                                 0x1
#define _U2FIFO_TXBF_MASK                                   0x10
#define _U2FIFO_TXBE_POSN                                   0x5
#define _U2FIFO_TXBE_POSITION                               0x5
#define _U2FIFO_TXBE_SIZE                                   0x1
#define _U2FIFO_TXBE_LENGTH                                 0x1
#define _U2FIFO_TXBE_MASK                                   0x20
#define _U2FIFO_STPMD_POSN                                  0x6
#define _U2FIFO_STPMD_POSITION                              0x6
#define _U2FIFO_STPMD_SIZE                                  0x1
#define _U2FIFO_STPMD_LENGTH                                0x1
#define _U2FIFO_STPMD_MASK                                  0x40
#define _U2FIFO_TXWRE_POSN                                  0x7
#define _U2FIFO_TXWRE_POSITION                              0x7
#define _U2FIFO_TXWRE_SIZE                                  0x1
#define _U2FIFO_TXWRE_LENGTH                                0x1
#define _U2FIFO_TXWRE_MASK                                  0x80
#define _U2FIFO_U2RXBF_POSN                                 0x0
#define _U2FIFO_U2RXBF_POSITION                             0x0
#define _U2FIFO_U2RXBF_SIZE                                 0x1
#define _U2FIFO_U2RXBF_LENGTH                               0x1
#define _U2FIFO_U2RXBF_MASK                                 0x1
#define _U2FIFO_U2RXBE_POSN                                 0x1
#define _U2FIFO_U2RXBE_POSITION                             0x1
#define _U2FIFO_U2RXBE_SIZE                                 0x1
#define _U2FIFO_U2RXBE_LENGTH                               0x1
#define _U2FIFO_U2RXBE_MASK                                 0x2
#define _U2FIFO_U2XON_POSN                                  0x2
#define _U2FIFO_U2XON_POSITION                              0x2
#define _U2FIFO_U2XON_SIZE                                  0x1
#define _U2FIFO_U2XON_LENGTH                                0x1
#define _U2FIFO_U2XON_MASK                                  0x4
#define _U2FIFO_U2RXIDL_POSN                                0x3
#define _U2FIFO_U2RXIDL_POSITION                            0x3
#define _U2FIFO_U2RXIDL_SIZE                                0x1
#define _U2FIFO_U2RXIDL_LENGTH                              0x1
#define _U2FIFO_U2RXIDL_MASK                                0x8
#define _U2FIFO_U2TXBF_POSN                                 0x4
#define _U2FIFO_U2TXBF_POSITION                             0x4
#define _U2FIFO_U2TXBF_SIZE                                 0x1
#define _U2FIFO_U2TXBF_LENGTH                               0x1
#define _U2FIFO_U2TXBF_MASK                                 0x10
#define _U2FIFO_U2TXBE_POSN                                 0x5
#define _U2FIFO_U2TXBE_POSITION                             0x5
#define _U2FIFO_U2TXBE_SIZE                                 0x1
#define _U2FIFO_U2TXBE_LENGTH                               0x1
#define _U2FIFO_U2TXBE_MASK                                 0x20
#define _U2FIFO_U2STPMD_POSN                                0x6
#define _U2FIFO_U2STPMD_POSITION                            0x6
#define _U2FIFO_U2STPMD_SIZE                                0x1
#define _U2FIFO_U2STPMD_LENGTH                              0x1
#define _U2FIFO_U2STPMD_MASK                                0x40
#define _U2FIFO_U2TXWRE_POSN                                0x7
#define _U2FIFO_U2TXWRE_POSITION                            0x7
#define _U2FIFO_U2TXWRE_SIZE                                0x1
#define _U2FIFO_U2TXWRE_LENGTH                              0x1
#define _U2FIFO_U2TXWRE_MASK                                0x80
#define _U2FIFO_U2RCIDL_POSN                                0x3
#define _U2FIFO_U2RCIDL_POSITION                            0x3
#define _U2FIFO_U2RCIDL_SIZE                                0x1
#define _U2FIFO_U2RCIDL_LENGTH                              0x1
#define _U2FIFO_U2RCIDL_MASK                                0x8
#define _U2FIFO_RCIDL_POSN                                  0x3
#define _U2FIFO_RCIDL_POSITION                              0x3
#define _U2FIFO_RCIDL_SIZE                                  0x1
#define _U2FIFO_RCIDL_LENGTH                                0x1
#define _U2FIFO_RCIDL_MASK                                  0x8

// Register: U2UIR
#define U2UIR U2UIR
extern volatile unsigned char           U2UIR               __at(0x2C4);
#ifndef _LIB_BUILD
asm("U2UIR equ 02C4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U2ABDIE                :1;
        unsigned                        :3;
        unsigned U2ABDIF                :1;
        unsigned U2WUIF                 :1;
    };
} U2UIRbits_t;
extern volatile U2UIRbits_t U2UIRbits __at(0x2C4);
// bitfield macros
#define _U2UIR_ABDIE_POSN                                   0x2
#define _U2UIR_ABDIE_POSITION                               0x2
#define _U2UIR_ABDIE_SIZE                                   0x1
#define _U2UIR_ABDIE_LENGTH                                 0x1
#define _U2UIR_ABDIE_MASK                                   0x4
#define _U2UIR_ABDIF_POSN                                   0x6
#define _U2UIR_ABDIF_POSITION                               0x6
#define _U2UIR_ABDIF_SIZE                                   0x1
#define _U2UIR_ABDIF_LENGTH                                 0x1
#define _U2UIR_ABDIF_MASK                                   0x40
#define _U2UIR_WUIF_POSN                                    0x7
#define _U2UIR_WUIF_POSITION                                0x7
#define _U2UIR_WUIF_SIZE                                    0x1
#define _U2UIR_WUIF_LENGTH                                  0x1
#define _U2UIR_WUIF_MASK                                    0x80
#define _U2UIR_U2ABDIE_POSN                                 0x2
#define _U2UIR_U2ABDIE_POSITION                             0x2
#define _U2UIR_U2ABDIE_SIZE                                 0x1
#define _U2UIR_U2ABDIE_LENGTH                               0x1
#define _U2UIR_U2ABDIE_MASK                                 0x4
#define _U2UIR_U2ABDIF_POSN                                 0x6
#define _U2UIR_U2ABDIF_POSITION                             0x6
#define _U2UIR_U2ABDIF_SIZE                                 0x1
#define _U2UIR_U2ABDIF_LENGTH                               0x1
#define _U2UIR_U2ABDIF_MASK                                 0x40
#define _U2UIR_U2WUIF_POSN                                  0x7
#define _U2UIR_U2WUIF_POSITION                              0x7
#define _U2UIR_U2WUIF_SIZE                                  0x1
#define _U2UIR_U2WUIF_LENGTH                                0x1
#define _U2UIR_U2WUIF_MASK                                  0x80

// Register: U2ERRIR
#define U2ERRIR U2ERRIR
extern volatile unsigned char           U2ERRIR             __at(0x2C5);
#ifndef _LIB_BUILD
asm("U2ERRIR equ 02C5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U2TXCIF                :1;
        unsigned U2RXFOIF               :1;
        unsigned U2RXBKIF               :1;
        unsigned U2FERIF                :1;
        unsigned U2CERIF                :1;
        unsigned U2ABDOVF               :1;
        unsigned U2PERIF                :1;
        unsigned U2TXMTIF               :1;
    };
} U2ERRIRbits_t;
extern volatile U2ERRIRbits_t U2ERRIRbits __at(0x2C5);
// bitfield macros
#define _U2ERRIR_TXCIF_POSN                                 0x0
#define _U2ERRIR_TXCIF_POSITION                             0x0
#define _U2ERRIR_TXCIF_SIZE                                 0x1
#define _U2ERRIR_TXCIF_LENGTH                               0x1
#define _U2ERRIR_TXCIF_MASK                                 0x1
#define _U2ERRIR_RXFOIF_POSN                                0x1
#define _U2ERRIR_RXFOIF_POSITION                            0x1
#define _U2ERRIR_RXFOIF_SIZE                                0x1
#define _U2ERRIR_RXFOIF_LENGTH                              0x1
#define _U2ERRIR_RXFOIF_MASK                                0x2
#define _U2ERRIR_RXBKIF_POSN                                0x2
#define _U2ERRIR_RXBKIF_POSITION                            0x2
#define _U2ERRIR_RXBKIF_SIZE                                0x1
#define _U2ERRIR_RXBKIF_LENGTH                              0x1
#define _U2ERRIR_RXBKIF_MASK                                0x4
#define _U2ERRIR_FERIF_POSN                                 0x3
#define _U2ERRIR_FERIF_POSITION                             0x3
#define _U2ERRIR_FERIF_SIZE                                 0x1
#define _U2ERRIR_FERIF_LENGTH                               0x1
#define _U2ERRIR_FERIF_MASK                                 0x8
#define _U2ERRIR_CERIF_POSN                                 0x4
#define _U2ERRIR_CERIF_POSITION                             0x4
#define _U2ERRIR_CERIF_SIZE                                 0x1
#define _U2ERRIR_CERIF_LENGTH                               0x1
#define _U2ERRIR_CERIF_MASK                                 0x10
#define _U2ERRIR_ABDOVF_POSN                                0x5
#define _U2ERRIR_ABDOVF_POSITION                            0x5
#define _U2ERRIR_ABDOVF_SIZE                                0x1
#define _U2ERRIR_ABDOVF_LENGTH                              0x1
#define _U2ERRIR_ABDOVF_MASK                                0x20
#define _U2ERRIR_PERIF_POSN                                 0x6
#define _U2ERRIR_PERIF_POSITION                             0x6
#define _U2ERRIR_PERIF_SIZE                                 0x1
#define _U2ERRIR_PERIF_LENGTH                               0x1
#define _U2ERRIR_PERIF_MASK                                 0x40
#define _U2ERRIR_TXMTIF_POSN                                0x7
#define _U2ERRIR_TXMTIF_POSITION                            0x7
#define _U2ERRIR_TXMTIF_SIZE                                0x1
#define _U2ERRIR_TXMTIF_LENGTH                              0x1
#define _U2ERRIR_TXMTIF_MASK                                0x80
#define _U2ERRIR_U2TXCIF_POSN                               0x0
#define _U2ERRIR_U2TXCIF_POSITION                           0x0
#define _U2ERRIR_U2TXCIF_SIZE                               0x1
#define _U2ERRIR_U2TXCIF_LENGTH                             0x1
#define _U2ERRIR_U2TXCIF_MASK                               0x1
#define _U2ERRIR_U2RXFOIF_POSN                              0x1
#define _U2ERRIR_U2RXFOIF_POSITION                          0x1
#define _U2ERRIR_U2RXFOIF_SIZE                              0x1
#define _U2ERRIR_U2RXFOIF_LENGTH                            0x1
#define _U2ERRIR_U2RXFOIF_MASK                              0x2
#define _U2ERRIR_U2RXBKIF_POSN                              0x2
#define _U2ERRIR_U2RXBKIF_POSITION                          0x2
#define _U2ERRIR_U2RXBKIF_SIZE                              0x1
#define _U2ERRIR_U2RXBKIF_LENGTH                            0x1
#define _U2ERRIR_U2RXBKIF_MASK                              0x4
#define _U2ERRIR_U2FERIF_POSN                               0x3
#define _U2ERRIR_U2FERIF_POSITION                           0x3
#define _U2ERRIR_U2FERIF_SIZE                               0x1
#define _U2ERRIR_U2FERIF_LENGTH                             0x1
#define _U2ERRIR_U2FERIF_MASK                               0x8
#define _U2ERRIR_U2CERIF_POSN                               0x4
#define _U2ERRIR_U2CERIF_POSITION                           0x4
#define _U2ERRIR_U2CERIF_SIZE                               0x1
#define _U2ERRIR_U2CERIF_LENGTH                             0x1
#define _U2ERRIR_U2CERIF_MASK                               0x10
#define _U2ERRIR_U2ABDOVF_POSN                              0x5
#define _U2ERRIR_U2ABDOVF_POSITION                          0x5
#define _U2ERRIR_U2ABDOVF_SIZE                              0x1
#define _U2ERRIR_U2ABDOVF_LENGTH                            0x1
#define _U2ERRIR_U2ABDOVF_MASK                              0x20
#define _U2ERRIR_U2PERIF_POSN                               0x6
#define _U2ERRIR_U2PERIF_POSITION                           0x6
#define _U2ERRIR_U2PERIF_SIZE                               0x1
#define _U2ERRIR_U2PERIF_LENGTH                             0x1
#define _U2ERRIR_U2PERIF_MASK                               0x40
#define _U2ERRIR_U2TXMTIF_POSN                              0x7
#define _U2ERRIR_U2TXMTIF_POSITION                          0x7
#define _U2ERRIR_U2TXMTIF_SIZE                              0x1
#define _U2ERRIR_U2TXMTIF_LENGTH                            0x1
#define _U2ERRIR_U2TXMTIF_MASK                              0x80

// Register: U2ERRIE
#define U2ERRIE U2ERRIE
extern volatile unsigned char           U2ERRIE             __at(0x2C6);
#ifndef _LIB_BUILD
asm("U2ERRIE equ 02C6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U2TXCIE                :1;
        unsigned U2RXFOIE               :1;
        unsigned U2RXBKIE               :1;
        unsigned U2FERIE                :1;
        unsigned U2CERIE                :1;
        unsigned U2ABDOVE               :1;
        unsigned U2PERIE                :1;
        unsigned U2TXMTIE               :1;
    };
} U2ERRIEbits_t;
extern volatile U2ERRIEbits_t U2ERRIEbits __at(0x2C6);
// bitfield macros
#define _U2ERRIE_TXCIE_POSN                                 0x0
#define _U2ERRIE_TXCIE_POSITION                             0x0
#define _U2ERRIE_TXCIE_SIZE                                 0x1
#define _U2ERRIE_TXCIE_LENGTH                               0x1
#define _U2ERRIE_TXCIE_MASK                                 0x1
#define _U2ERRIE_RXFOIE_POSN                                0x1
#define _U2ERRIE_RXFOIE_POSITION                            0x1
#define _U2ERRIE_RXFOIE_SIZE                                0x1
#define _U2ERRIE_RXFOIE_LENGTH                              0x1
#define _U2ERRIE_RXFOIE_MASK                                0x2
#define _U2ERRIE_RXBKIE_POSN                                0x2
#define _U2ERRIE_RXBKIE_POSITION                            0x2
#define _U2ERRIE_RXBKIE_SIZE                                0x1
#define _U2ERRIE_RXBKIE_LENGTH                              0x1
#define _U2ERRIE_RXBKIE_MASK                                0x4
#define _U2ERRIE_FERIE_POSN                                 0x3
#define _U2ERRIE_FERIE_POSITION                             0x3
#define _U2ERRIE_FERIE_SIZE                                 0x1
#define _U2ERRIE_FERIE_LENGTH                               0x1
#define _U2ERRIE_FERIE_MASK                                 0x8
#define _U2ERRIE_CERIE_POSN                                 0x4
#define _U2ERRIE_CERIE_POSITION                             0x4
#define _U2ERRIE_CERIE_SIZE                                 0x1
#define _U2ERRIE_CERIE_LENGTH                               0x1
#define _U2ERRIE_CERIE_MASK                                 0x10
#define _U2ERRIE_ABDOVE_POSN                                0x5
#define _U2ERRIE_ABDOVE_POSITION                            0x5
#define _U2ERRIE_ABDOVE_SIZE                                0x1
#define _U2ERRIE_ABDOVE_LENGTH                              0x1
#define _U2ERRIE_ABDOVE_MASK                                0x20
#define _U2ERRIE_PERIE_POSN                                 0x6
#define _U2ERRIE_PERIE_POSITION                             0x6
#define _U2ERRIE_PERIE_SIZE                                 0x1
#define _U2ERRIE_PERIE_LENGTH                               0x1
#define _U2ERRIE_PERIE_MASK                                 0x40
#define _U2ERRIE_TXMTIE_POSN                                0x7
#define _U2ERRIE_TXMTIE_POSITION                            0x7
#define _U2ERRIE_TXMTIE_SIZE                                0x1
#define _U2ERRIE_TXMTIE_LENGTH                              0x1
#define _U2ERRIE_TXMTIE_MASK                                0x80
#define _U2ERRIE_U2TXCIE_POSN                               0x0
#define _U2ERRIE_U2TXCIE_POSITION                           0x0
#define _U2ERRIE_U2TXCIE_SIZE                               0x1
#define _U2ERRIE_U2TXCIE_LENGTH                             0x1
#define _U2ERRIE_U2TXCIE_MASK                               0x1
#define _U2ERRIE_U2RXFOIE_POSN                              0x1
#define _U2ERRIE_U2RXFOIE_POSITION                          0x1
#define _U2ERRIE_U2RXFOIE_SIZE                              0x1
#define _U2ERRIE_U2RXFOIE_LENGTH                            0x1
#define _U2ERRIE_U2RXFOIE_MASK                              0x2
#define _U2ERRIE_U2RXBKIE_POSN                              0x2
#define _U2ERRIE_U2RXBKIE_POSITION                          0x2
#define _U2ERRIE_U2RXBKIE_SIZE                              0x1
#define _U2ERRIE_U2RXBKIE_LENGTH                            0x1
#define _U2ERRIE_U2RXBKIE_MASK                              0x4
#define _U2ERRIE_U2FERIE_POSN                               0x3
#define _U2ERRIE_U2FERIE_POSITION                           0x3
#define _U2ERRIE_U2FERIE_SIZE                               0x1
#define _U2ERRIE_U2FERIE_LENGTH                             0x1
#define _U2ERRIE_U2FERIE_MASK                               0x8
#define _U2ERRIE_U2CERIE_POSN                               0x4
#define _U2ERRIE_U2CERIE_POSITION                           0x4
#define _U2ERRIE_U2CERIE_SIZE                               0x1
#define _U2ERRIE_U2CERIE_LENGTH                             0x1
#define _U2ERRIE_U2CERIE_MASK                               0x10
#define _U2ERRIE_U2ABDOVE_POSN                              0x5
#define _U2ERRIE_U2ABDOVE_POSITION                          0x5
#define _U2ERRIE_U2ABDOVE_SIZE                              0x1
#define _U2ERRIE_U2ABDOVE_LENGTH                            0x1
#define _U2ERRIE_U2ABDOVE_MASK                              0x20
#define _U2ERRIE_U2PERIE_POSN                               0x6
#define _U2ERRIE_U2PERIE_POSITION                           0x6
#define _U2ERRIE_U2PERIE_SIZE                               0x1
#define _U2ERRIE_U2PERIE_LENGTH                             0x1
#define _U2ERRIE_U2PERIE_MASK                               0x40
#define _U2ERRIE_U2TXMTIE_POSN                              0x7
#define _U2ERRIE_U2TXMTIE_POSITION                          0x7
#define _U2ERRIE_U2TXMTIE_SIZE                              0x1
#define _U2ERRIE_U2TXMTIE_LENGTH                            0x1
#define _U2ERRIE_U2TXMTIE_MASK                              0x80

// Register: U3RXB
#define U3RXB U3RXB
extern volatile unsigned char           U3RXB               __at(0x2C7);
#ifndef _LIB_BUILD
asm("U3RXB equ 02C7h");
#endif
// aliases
extern volatile unsigned char           U3RXBL              __at(0x2C7);
#ifndef _LIB_BUILD
asm("U3RXBL equ 02C7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U3RXBbits_t;
extern volatile U3RXBbits_t U3RXBbits __at(0x2C7);
// bitfield macros
#define _U3RXB_RXB_POSN                                     0x0
#define _U3RXB_RXB_POSITION                                 0x0
#define _U3RXB_RXB_SIZE                                     0x8
#define _U3RXB_RXB_LENGTH                                   0x8
#define _U3RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U3RXBLbits_t;
extern volatile U3RXBLbits_t U3RXBLbits __at(0x2C7);
// bitfield macros
#define _U3RXBL_RXB_POSN                                    0x0
#define _U3RXBL_RXB_POSITION                                0x0
#define _U3RXBL_RXB_SIZE                                    0x8
#define _U3RXBL_RXB_LENGTH                                  0x8
#define _U3RXBL_RXB_MASK                                    0xFF

// Register: U3TXB
#define U3TXB U3TXB
extern volatile unsigned char           U3TXB               __at(0x2C9);
#ifndef _LIB_BUILD
asm("U3TXB equ 02C9h");
#endif
// aliases
extern volatile unsigned char           U3TXBL              __at(0x2C9);
#ifndef _LIB_BUILD
asm("U3TXBL equ 02C9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U3TXBbits_t;
extern volatile U3TXBbits_t U3TXBbits __at(0x2C9);
// bitfield macros
#define _U3TXB_TXB_POSN                                     0x0
#define _U3TXB_TXB_POSITION                                 0x0
#define _U3TXB_TXB_SIZE                                     0x8
#define _U3TXB_TXB_LENGTH                                   0x8
#define _U3TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U3TXBLbits_t;
extern volatile U3TXBLbits_t U3TXBLbits __at(0x2C9);
// bitfield macros
#define _U3TXBL_TXB_POSN                                    0x0
#define _U3TXBL_TXB_POSITION                                0x0
#define _U3TXBL_TXB_SIZE                                    0x8
#define _U3TXBL_TXB_LENGTH                                  0x8
#define _U3TXBL_TXB_MASK                                    0xFF

// Register: U3P1
#define U3P1 U3P1
extern volatile unsigned char           U3P1                __at(0x2CB);
#ifndef _LIB_BUILD
asm("U3P1 equ 02CBh");
#endif

// Register: U3P1L
#define U3P1L U3P1L
extern volatile unsigned char           U3P1L               __at(0x2CB);
#ifndef _LIB_BUILD
asm("U3P1L equ 02CBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U3P1Lbits_t;
extern volatile U3P1Lbits_t U3P1Lbits __at(0x2CB);
// bitfield macros
#define _U3P1L_P1L_POSN                                     0x0
#define _U3P1L_P1L_POSITION                                 0x0
#define _U3P1L_P1L_SIZE                                     0x8
#define _U3P1L_P1L_LENGTH                                   0x8
#define _U3P1L_P1L_MASK                                     0xFF

// Register: U3P2
#define U3P2 U3P2
extern volatile unsigned char           U3P2                __at(0x2CD);
#ifndef _LIB_BUILD
asm("U3P2 equ 02CDh");
#endif

// Register: U3P2L
#define U3P2L U3P2L
extern volatile unsigned char           U3P2L               __at(0x2CD);
#ifndef _LIB_BUILD
asm("U3P2L equ 02CDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U3P2Lbits_t;
extern volatile U3P2Lbits_t U3P2Lbits __at(0x2CD);
// bitfield macros
#define _U3P2L_P2L_POSN                                     0x0
#define _U3P2L_P2L_POSITION                                 0x0
#define _U3P2L_P2L_SIZE                                     0x8
#define _U3P2L_P2L_LENGTH                                   0x8
#define _U3P2L_P2L_MASK                                     0xFF

// Register: U3P3
#define U3P3 U3P3
extern volatile unsigned char           U3P3                __at(0x2CF);
#ifndef _LIB_BUILD
asm("U3P3 equ 02CFh");
#endif

// Register: U3P3L
#define U3P3L U3P3L
extern volatile unsigned char           U3P3L               __at(0x2CF);
#ifndef _LIB_BUILD
asm("U3P3L equ 02CFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U3P3Lbits_t;
extern volatile U3P3Lbits_t U3P3Lbits __at(0x2CF);
// bitfield macros
#define _U3P3L_P3L_POSN                                     0x0
#define _U3P3L_P3L_POSITION                                 0x0
#define _U3P3L_P3L_SIZE                                     0x8
#define _U3P3L_P3L_LENGTH                                   0x8
#define _U3P3L_P3L_MASK                                     0xFF

// Register: U3CON0
#define U3CON0 U3CON0
extern volatile unsigned char           U3CON0              __at(0x2D1);
#ifndef _LIB_BUILD
asm("U3CON0 equ 02D1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U3MODE                 :4;
        unsigned U3RXEN                 :1;
        unsigned U3TXEN                 :1;
        unsigned U3ABDEN                :1;
        unsigned U3BRGS                 :1;
    };
    struct {
        unsigned U3MODE0                :1;
        unsigned U3MODE1                :1;
        unsigned U3MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U3CON0bits_t;
extern volatile U3CON0bits_t U3CON0bits __at(0x2D1);
// bitfield macros
#define _U3CON0_MODE0_POSN                                  0x0
#define _U3CON0_MODE0_POSITION                              0x0
#define _U3CON0_MODE0_SIZE                                  0x1
#define _U3CON0_MODE0_LENGTH                                0x1
#define _U3CON0_MODE0_MASK                                  0x1
#define _U3CON0_MODE1_POSN                                  0x1
#define _U3CON0_MODE1_POSITION                              0x1
#define _U3CON0_MODE1_SIZE                                  0x1
#define _U3CON0_MODE1_LENGTH                                0x1
#define _U3CON0_MODE1_MASK                                  0x2
#define _U3CON0_MODE2_POSN                                  0x2
#define _U3CON0_MODE2_POSITION                              0x2
#define _U3CON0_MODE2_SIZE                                  0x1
#define _U3CON0_MODE2_LENGTH                                0x1
#define _U3CON0_MODE2_MASK                                  0x4
#define _U3CON0_U3MODE_POSN                                 0x0
#define _U3CON0_U3MODE_POSITION                             0x0
#define _U3CON0_U3MODE_SIZE                                 0x4
#define _U3CON0_U3MODE_LENGTH                               0x4
#define _U3CON0_U3MODE_MASK                                 0xF
#define _U3CON0_U3RXEN_POSN                                 0x4
#define _U3CON0_U3RXEN_POSITION                             0x4
#define _U3CON0_U3RXEN_SIZE                                 0x1
#define _U3CON0_U3RXEN_LENGTH                               0x1
#define _U3CON0_U3RXEN_MASK                                 0x10
#define _U3CON0_U3TXEN_POSN                                 0x5
#define _U3CON0_U3TXEN_POSITION                             0x5
#define _U3CON0_U3TXEN_SIZE                                 0x1
#define _U3CON0_U3TXEN_LENGTH                               0x1
#define _U3CON0_U3TXEN_MASK                                 0x20
#define _U3CON0_U3ABDEN_POSN                                0x6
#define _U3CON0_U3ABDEN_POSITION                            0x6
#define _U3CON0_U3ABDEN_SIZE                                0x1
#define _U3CON0_U3ABDEN_LENGTH                              0x1
#define _U3CON0_U3ABDEN_MASK                                0x40
#define _U3CON0_U3BRGS_POSN                                 0x7
#define _U3CON0_U3BRGS_POSITION                             0x7
#define _U3CON0_U3BRGS_SIZE                                 0x1
#define _U3CON0_U3BRGS_LENGTH                               0x1
#define _U3CON0_U3BRGS_MASK                                 0x80
#define _U3CON0_U3MODE0_POSN                                0x0
#define _U3CON0_U3MODE0_POSITION                            0x0
#define _U3CON0_U3MODE0_SIZE                                0x1
#define _U3CON0_U3MODE0_LENGTH                              0x1
#define _U3CON0_U3MODE0_MASK                                0x1
#define _U3CON0_U3MODE1_POSN                                0x1
#define _U3CON0_U3MODE1_POSITION                            0x1
#define _U3CON0_U3MODE1_SIZE                                0x1
#define _U3CON0_U3MODE1_LENGTH                              0x1
#define _U3CON0_U3MODE1_MASK                                0x2
#define _U3CON0_U3MODE2_POSN                                0x2
#define _U3CON0_U3MODE2_POSITION                            0x2
#define _U3CON0_U3MODE2_SIZE                                0x1
#define _U3CON0_U3MODE2_LENGTH                              0x1
#define _U3CON0_U3MODE2_MASK                                0x4
#define _U3CON0_MODE_POSN                                   0x0
#define _U3CON0_MODE_POSITION                               0x0
#define _U3CON0_MODE_SIZE                                   0x4
#define _U3CON0_MODE_LENGTH                                 0x4
#define _U3CON0_MODE_MASK                                   0xF
#define _U3CON0_RXEN_POSN                                   0x4
#define _U3CON0_RXEN_POSITION                               0x4
#define _U3CON0_RXEN_SIZE                                   0x1
#define _U3CON0_RXEN_LENGTH                                 0x1
#define _U3CON0_RXEN_MASK                                   0x10
#define _U3CON0_TXEN_POSN                                   0x5
#define _U3CON0_TXEN_POSITION                               0x5
#define _U3CON0_TXEN_SIZE                                   0x1
#define _U3CON0_TXEN_LENGTH                                 0x1
#define _U3CON0_TXEN_MASK                                   0x20
#define _U3CON0_ABDEN_POSN                                  0x6
#define _U3CON0_ABDEN_POSITION                              0x6
#define _U3CON0_ABDEN_SIZE                                  0x1
#define _U3CON0_ABDEN_LENGTH                                0x1
#define _U3CON0_ABDEN_MASK                                  0x40
#define _U3CON0_BRGS_POSN                                   0x7
#define _U3CON0_BRGS_POSITION                               0x7
#define _U3CON0_BRGS_SIZE                                   0x1
#define _U3CON0_BRGS_LENGTH                                 0x1
#define _U3CON0_BRGS_MASK                                   0x80

// Register: U3CON1
#define U3CON1 U3CON1
extern volatile unsigned char           U3CON1              __at(0x2D2);
#ifndef _LIB_BUILD
asm("U3CON1 equ 02D2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U3SENDB                :1;
        unsigned U3BRKOVR               :1;
        unsigned                        :1;
        unsigned U3RXBIMD               :1;
        unsigned U3WUE                  :1;
        unsigned                        :2;
        unsigned U3ON                   :1;
    };
} U3CON1bits_t;
extern volatile U3CON1bits_t U3CON1bits __at(0x2D2);
// bitfield macros
#define _U3CON1_SENDB_POSN                                  0x0
#define _U3CON1_SENDB_POSITION                              0x0
#define _U3CON1_SENDB_SIZE                                  0x1
#define _U3CON1_SENDB_LENGTH                                0x1
#define _U3CON1_SENDB_MASK                                  0x1
#define _U3CON1_BRKOVR_POSN                                 0x1
#define _U3CON1_BRKOVR_POSITION                             0x1
#define _U3CON1_BRKOVR_SIZE                                 0x1
#define _U3CON1_BRKOVR_LENGTH                               0x1
#define _U3CON1_BRKOVR_MASK                                 0x2
#define _U3CON1_RXBIMD_POSN                                 0x3
#define _U3CON1_RXBIMD_POSITION                             0x3
#define _U3CON1_RXBIMD_SIZE                                 0x1
#define _U3CON1_RXBIMD_LENGTH                               0x1
#define _U3CON1_RXBIMD_MASK                                 0x8
#define _U3CON1_WUE_POSN                                    0x4
#define _U3CON1_WUE_POSITION                                0x4
#define _U3CON1_WUE_SIZE                                    0x1
#define _U3CON1_WUE_LENGTH                                  0x1
#define _U3CON1_WUE_MASK                                    0x10
#define _U3CON1_ON_POSN                                     0x7
#define _U3CON1_ON_POSITION                                 0x7
#define _U3CON1_ON_SIZE                                     0x1
#define _U3CON1_ON_LENGTH                                   0x1
#define _U3CON1_ON_MASK                                     0x80
#define _U3CON1_U3SENDB_POSN                                0x0
#define _U3CON1_U3SENDB_POSITION                            0x0
#define _U3CON1_U3SENDB_SIZE                                0x1
#define _U3CON1_U3SENDB_LENGTH                              0x1
#define _U3CON1_U3SENDB_MASK                                0x1
#define _U3CON1_U3BRKOVR_POSN                               0x1
#define _U3CON1_U3BRKOVR_POSITION                           0x1
#define _U3CON1_U3BRKOVR_SIZE                               0x1
#define _U3CON1_U3BRKOVR_LENGTH                             0x1
#define _U3CON1_U3BRKOVR_MASK                               0x2
#define _U3CON1_U3RXBIMD_POSN                               0x3
#define _U3CON1_U3RXBIMD_POSITION                           0x3
#define _U3CON1_U3RXBIMD_SIZE                               0x1
#define _U3CON1_U3RXBIMD_LENGTH                             0x1
#define _U3CON1_U3RXBIMD_MASK                               0x8
#define _U3CON1_U3WUE_POSN                                  0x4
#define _U3CON1_U3WUE_POSITION                              0x4
#define _U3CON1_U3WUE_SIZE                                  0x1
#define _U3CON1_U3WUE_LENGTH                                0x1
#define _U3CON1_U3WUE_MASK                                  0x10
#define _U3CON1_U3ON_POSN                                   0x7
#define _U3CON1_U3ON_POSITION                               0x7
#define _U3CON1_U3ON_SIZE                                   0x1
#define _U3CON1_U3ON_LENGTH                                 0x1
#define _U3CON1_U3ON_MASK                                   0x80

// Register: U3CON2
#define U3CON2 U3CON2
extern volatile unsigned char           U3CON2              __at(0x2D3);
#ifndef _LIB_BUILD
asm("U3CON2 equ 02D3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U3FLO                  :2;
        unsigned U3TXPOL                :1;
        unsigned                        :1;
        unsigned U3STP                  :2;
        unsigned U3RXPOL                :1;
        unsigned U3RUNOVF               :1;
    };
    struct {
        unsigned U3FLO0                 :1;
        unsigned U3FLO1                 :1;
        unsigned                        :2;
        unsigned U3STP0                 :1;
        unsigned U3STP1                 :1;
    };
} U3CON2bits_t;
extern volatile U3CON2bits_t U3CON2bits __at(0x2D3);
// bitfield macros
#define _U3CON2_FLO_POSN                                    0x0
#define _U3CON2_FLO_POSITION                                0x0
#define _U3CON2_FLO_SIZE                                    0x2
#define _U3CON2_FLO_LENGTH                                  0x2
#define _U3CON2_FLO_MASK                                    0x3
#define _U3CON2_TXPOL_POSN                                  0x2
#define _U3CON2_TXPOL_POSITION                              0x2
#define _U3CON2_TXPOL_SIZE                                  0x1
#define _U3CON2_TXPOL_LENGTH                                0x1
#define _U3CON2_TXPOL_MASK                                  0x4
#define _U3CON2_STP_POSN                                    0x4
#define _U3CON2_STP_POSITION                                0x4
#define _U3CON2_STP_SIZE                                    0x2
#define _U3CON2_STP_LENGTH                                  0x2
#define _U3CON2_STP_MASK                                    0x30
#define _U3CON2_RXPOL_POSN                                  0x6
#define _U3CON2_RXPOL_POSITION                              0x6
#define _U3CON2_RXPOL_SIZE                                  0x1
#define _U3CON2_RXPOL_LENGTH                                0x1
#define _U3CON2_RXPOL_MASK                                  0x40
#define _U3CON2_RUNOVF_POSN                                 0x7
#define _U3CON2_RUNOVF_POSITION                             0x7
#define _U3CON2_RUNOVF_SIZE                                 0x1
#define _U3CON2_RUNOVF_LENGTH                               0x1
#define _U3CON2_RUNOVF_MASK                                 0x80
#define _U3CON2_FLO0_POSN                                   0x0
#define _U3CON2_FLO0_POSITION                               0x0
#define _U3CON2_FLO0_SIZE                                   0x1
#define _U3CON2_FLO0_LENGTH                                 0x1
#define _U3CON2_FLO0_MASK                                   0x1
#define _U3CON2_FLO1_POSN                                   0x1
#define _U3CON2_FLO1_POSITION                               0x1
#define _U3CON2_FLO1_SIZE                                   0x1
#define _U3CON2_FLO1_LENGTH                                 0x1
#define _U3CON2_FLO1_MASK                                   0x2
#define _U3CON2_STP0_POSN                                   0x4
#define _U3CON2_STP0_POSITION                               0x4
#define _U3CON2_STP0_SIZE                                   0x1
#define _U3CON2_STP0_LENGTH                                 0x1
#define _U3CON2_STP0_MASK                                   0x10
#define _U3CON2_STP1_POSN                                   0x5
#define _U3CON2_STP1_POSITION                               0x5
#define _U3CON2_STP1_SIZE                                   0x1
#define _U3CON2_STP1_LENGTH                                 0x1
#define _U3CON2_STP1_MASK                                   0x20
#define _U3CON2_U3FLO_POSN                                  0x0
#define _U3CON2_U3FLO_POSITION                              0x0
#define _U3CON2_U3FLO_SIZE                                  0x2
#define _U3CON2_U3FLO_LENGTH                                0x2
#define _U3CON2_U3FLO_MASK                                  0x3
#define _U3CON2_U3TXPOL_POSN                                0x2
#define _U3CON2_U3TXPOL_POSITION                            0x2
#define _U3CON2_U3TXPOL_SIZE                                0x1
#define _U3CON2_U3TXPOL_LENGTH                              0x1
#define _U3CON2_U3TXPOL_MASK                                0x4
#define _U3CON2_U3STP_POSN                                  0x4
#define _U3CON2_U3STP_POSITION                              0x4
#define _U3CON2_U3STP_SIZE                                  0x2
#define _U3CON2_U3STP_LENGTH                                0x2
#define _U3CON2_U3STP_MASK                                  0x30
#define _U3CON2_U3RXPOL_POSN                                0x6
#define _U3CON2_U3RXPOL_POSITION                            0x6
#define _U3CON2_U3RXPOL_SIZE                                0x1
#define _U3CON2_U3RXPOL_LENGTH                              0x1
#define _U3CON2_U3RXPOL_MASK                                0x40
#define _U3CON2_U3RUNOVF_POSN                               0x7
#define _U3CON2_U3RUNOVF_POSITION                           0x7
#define _U3CON2_U3RUNOVF_SIZE                               0x1
#define _U3CON2_U3RUNOVF_LENGTH                             0x1
#define _U3CON2_U3RUNOVF_MASK                               0x80
#define _U3CON2_U3FLO0_POSN                                 0x0
#define _U3CON2_U3FLO0_POSITION                             0x0
#define _U3CON2_U3FLO0_SIZE                                 0x1
#define _U3CON2_U3FLO0_LENGTH                               0x1
#define _U3CON2_U3FLO0_MASK                                 0x1
#define _U3CON2_U3FLO1_POSN                                 0x1
#define _U3CON2_U3FLO1_POSITION                             0x1
#define _U3CON2_U3FLO1_SIZE                                 0x1
#define _U3CON2_U3FLO1_LENGTH                               0x1
#define _U3CON2_U3FLO1_MASK                                 0x2
#define _U3CON2_U3STP0_POSN                                 0x4
#define _U3CON2_U3STP0_POSITION                             0x4
#define _U3CON2_U3STP0_SIZE                                 0x1
#define _U3CON2_U3STP0_LENGTH                               0x1
#define _U3CON2_U3STP0_MASK                                 0x10
#define _U3CON2_U3STP1_POSN                                 0x5
#define _U3CON2_U3STP1_POSITION                             0x5
#define _U3CON2_U3STP1_SIZE                                 0x1
#define _U3CON2_U3STP1_LENGTH                               0x1
#define _U3CON2_U3STP1_MASK                                 0x20

// Register: U3BRG
#define U3BRG U3BRG
extern volatile unsigned short          U3BRG               __at(0x2D4);
#ifndef _LIB_BUILD
asm("U3BRG equ 02D4h");
#endif

// Register: U3BRGL
#define U3BRGL U3BRGL
extern volatile unsigned char           U3BRGL              __at(0x2D4);
#ifndef _LIB_BUILD
asm("U3BRGL equ 02D4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U3BRGLbits_t;
extern volatile U3BRGLbits_t U3BRGLbits __at(0x2D4);
// bitfield macros
#define _U3BRGL_BRGL_POSN                                   0x0
#define _U3BRGL_BRGL_POSITION                               0x0
#define _U3BRGL_BRGL_SIZE                                   0x8
#define _U3BRGL_BRGL_LENGTH                                 0x8
#define _U3BRGL_BRGL_MASK                                   0xFF

// Register: U3BRGH
#define U3BRGH U3BRGH
extern volatile unsigned char           U3BRGH              __at(0x2D5);
#ifndef _LIB_BUILD
asm("U3BRGH equ 02D5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U3BRGHbits_t;
extern volatile U3BRGHbits_t U3BRGHbits __at(0x2D5);
// bitfield macros
#define _U3BRGH_BRGH_POSN                                   0x0
#define _U3BRGH_BRGH_POSITION                               0x0
#define _U3BRGH_BRGH_SIZE                                   0x8
#define _U3BRGH_BRGH_LENGTH                                 0x8
#define _U3BRGH_BRGH_MASK                                   0xFF

// Register: U3FIFO
#define U3FIFO U3FIFO
extern volatile unsigned char           U3FIFO              __at(0x2D6);
#ifndef _LIB_BUILD
asm("U3FIFO equ 02D6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U3RXBF                 :1;
        unsigned U3RXBE                 :1;
        unsigned U3XON                  :1;
        unsigned U3RXIDL                :1;
        unsigned U3TXBF                 :1;
        unsigned U3TXBE                 :1;
        unsigned U3STPMD                :1;
        unsigned U3TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U3RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U3FIFObits_t;
extern volatile U3FIFObits_t U3FIFObits __at(0x2D6);
// bitfield macros
#define _U3FIFO_RXBF_POSN                                   0x0
#define _U3FIFO_RXBF_POSITION                               0x0
#define _U3FIFO_RXBF_SIZE                                   0x1
#define _U3FIFO_RXBF_LENGTH                                 0x1
#define _U3FIFO_RXBF_MASK                                   0x1
#define _U3FIFO_RXBE_POSN                                   0x1
#define _U3FIFO_RXBE_POSITION                               0x1
#define _U3FIFO_RXBE_SIZE                                   0x1
#define _U3FIFO_RXBE_LENGTH                                 0x1
#define _U3FIFO_RXBE_MASK                                   0x2
#define _U3FIFO_XON_POSN                                    0x2
#define _U3FIFO_XON_POSITION                                0x2
#define _U3FIFO_XON_SIZE                                    0x1
#define _U3FIFO_XON_LENGTH                                  0x1
#define _U3FIFO_XON_MASK                                    0x4
#define _U3FIFO_RXIDL_POSN                                  0x3
#define _U3FIFO_RXIDL_POSITION                              0x3
#define _U3FIFO_RXIDL_SIZE                                  0x1
#define _U3FIFO_RXIDL_LENGTH                                0x1
#define _U3FIFO_RXIDL_MASK                                  0x8
#define _U3FIFO_TXBF_POSN                                   0x4
#define _U3FIFO_TXBF_POSITION                               0x4
#define _U3FIFO_TXBF_SIZE                                   0x1
#define _U3FIFO_TXBF_LENGTH                                 0x1
#define _U3FIFO_TXBF_MASK                                   0x10
#define _U3FIFO_TXBE_POSN                                   0x5
#define _U3FIFO_TXBE_POSITION                               0x5
#define _U3FIFO_TXBE_SIZE                                   0x1
#define _U3FIFO_TXBE_LENGTH                                 0x1
#define _U3FIFO_TXBE_MASK                                   0x20
#define _U3FIFO_STPMD_POSN                                  0x6
#define _U3FIFO_STPMD_POSITION                              0x6
#define _U3FIFO_STPMD_SIZE                                  0x1
#define _U3FIFO_STPMD_LENGTH                                0x1
#define _U3FIFO_STPMD_MASK                                  0x40
#define _U3FIFO_TXWRE_POSN                                  0x7
#define _U3FIFO_TXWRE_POSITION                              0x7
#define _U3FIFO_TXWRE_SIZE                                  0x1
#define _U3FIFO_TXWRE_LENGTH                                0x1
#define _U3FIFO_TXWRE_MASK                                  0x80
#define _U3FIFO_U3RXBF_POSN                                 0x0
#define _U3FIFO_U3RXBF_POSITION                             0x0
#define _U3FIFO_U3RXBF_SIZE                                 0x1
#define _U3FIFO_U3RXBF_LENGTH                               0x1
#define _U3FIFO_U3RXBF_MASK                                 0x1
#define _U3FIFO_U3RXBE_POSN                                 0x1
#define _U3FIFO_U3RXBE_POSITION                             0x1
#define _U3FIFO_U3RXBE_SIZE                                 0x1
#define _U3FIFO_U3RXBE_LENGTH                               0x1
#define _U3FIFO_U3RXBE_MASK                                 0x2
#define _U3FIFO_U3XON_POSN                                  0x2
#define _U3FIFO_U3XON_POSITION                              0x2
#define _U3FIFO_U3XON_SIZE                                  0x1
#define _U3FIFO_U3XON_LENGTH                                0x1
#define _U3FIFO_U3XON_MASK                                  0x4
#define _U3FIFO_U3RXIDL_POSN                                0x3
#define _U3FIFO_U3RXIDL_POSITION                            0x3
#define _U3FIFO_U3RXIDL_SIZE                                0x1
#define _U3FIFO_U3RXIDL_LENGTH                              0x1
#define _U3FIFO_U3RXIDL_MASK                                0x8
#define _U3FIFO_U3TXBF_POSN                                 0x4
#define _U3FIFO_U3TXBF_POSITION                             0x4
#define _U3FIFO_U3TXBF_SIZE                                 0x1
#define _U3FIFO_U3TXBF_LENGTH                               0x1
#define _U3FIFO_U3TXBF_MASK                                 0x10
#define _U3FIFO_U3TXBE_POSN                                 0x5
#define _U3FIFO_U3TXBE_POSITION                             0x5
#define _U3FIFO_U3TXBE_SIZE                                 0x1
#define _U3FIFO_U3TXBE_LENGTH                               0x1
#define _U3FIFO_U3TXBE_MASK                                 0x20
#define _U3FIFO_U3STPMD_POSN                                0x6
#define _U3FIFO_U3STPMD_POSITION                            0x6
#define _U3FIFO_U3STPMD_SIZE                                0x1
#define _U3FIFO_U3STPMD_LENGTH                              0x1
#define _U3FIFO_U3STPMD_MASK                                0x40
#define _U3FIFO_U3TXWRE_POSN                                0x7
#define _U3FIFO_U3TXWRE_POSITION                            0x7
#define _U3FIFO_U3TXWRE_SIZE                                0x1
#define _U3FIFO_U3TXWRE_LENGTH                              0x1
#define _U3FIFO_U3TXWRE_MASK                                0x80
#define _U3FIFO_U3RCIDL_POSN                                0x3
#define _U3FIFO_U3RCIDL_POSITION                            0x3
#define _U3FIFO_U3RCIDL_SIZE                                0x1
#define _U3FIFO_U3RCIDL_LENGTH                              0x1
#define _U3FIFO_U3RCIDL_MASK                                0x8
#define _U3FIFO_RCIDL_POSN                                  0x3
#define _U3FIFO_RCIDL_POSITION                              0x3
#define _U3FIFO_RCIDL_SIZE                                  0x1
#define _U3FIFO_RCIDL_LENGTH                                0x1
#define _U3FIFO_RCIDL_MASK                                  0x8

// Register: U3UIR
#define U3UIR U3UIR
extern volatile unsigned char           U3UIR               __at(0x2D7);
#ifndef _LIB_BUILD
asm("U3UIR equ 02D7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U3ABDIE                :1;
        unsigned                        :3;
        unsigned U3ABDIF                :1;
        unsigned U3WUIF                 :1;
    };
} U3UIRbits_t;
extern volatile U3UIRbits_t U3UIRbits __at(0x2D7);
// bitfield macros
#define _U3UIR_ABDIE_POSN                                   0x2
#define _U3UIR_ABDIE_POSITION                               0x2
#define _U3UIR_ABDIE_SIZE                                   0x1
#define _U3UIR_ABDIE_LENGTH                                 0x1
#define _U3UIR_ABDIE_MASK                                   0x4
#define _U3UIR_ABDIF_POSN                                   0x6
#define _U3UIR_ABDIF_POSITION                               0x6
#define _U3UIR_ABDIF_SIZE                                   0x1
#define _U3UIR_ABDIF_LENGTH                                 0x1
#define _U3UIR_ABDIF_MASK                                   0x40
#define _U3UIR_WUIF_POSN                                    0x7
#define _U3UIR_WUIF_POSITION                                0x7
#define _U3UIR_WUIF_SIZE                                    0x1
#define _U3UIR_WUIF_LENGTH                                  0x1
#define _U3UIR_WUIF_MASK                                    0x80
#define _U3UIR_U3ABDIE_POSN                                 0x2
#define _U3UIR_U3ABDIE_POSITION                             0x2
#define _U3UIR_U3ABDIE_SIZE                                 0x1
#define _U3UIR_U3ABDIE_LENGTH                               0x1
#define _U3UIR_U3ABDIE_MASK                                 0x4
#define _U3UIR_U3ABDIF_POSN                                 0x6
#define _U3UIR_U3ABDIF_POSITION                             0x6
#define _U3UIR_U3ABDIF_SIZE                                 0x1
#define _U3UIR_U3ABDIF_LENGTH                               0x1
#define _U3UIR_U3ABDIF_MASK                                 0x40
#define _U3UIR_U3WUIF_POSN                                  0x7
#define _U3UIR_U3WUIF_POSITION                              0x7
#define _U3UIR_U3WUIF_SIZE                                  0x1
#define _U3UIR_U3WUIF_LENGTH                                0x1
#define _U3UIR_U3WUIF_MASK                                  0x80

// Register: U3ERRIR
#define U3ERRIR U3ERRIR
extern volatile unsigned char           U3ERRIR             __at(0x2D8);
#ifndef _LIB_BUILD
asm("U3ERRIR equ 02D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U3TXCIF                :1;
        unsigned U3RXFOIF               :1;
        unsigned U3RXBKIF               :1;
        unsigned U3FERIF                :1;
        unsigned U3CERIF                :1;
        unsigned U3ABDOVF               :1;
        unsigned U3PERIF                :1;
        unsigned U3TXMTIF               :1;
    };
} U3ERRIRbits_t;
extern volatile U3ERRIRbits_t U3ERRIRbits __at(0x2D8);
// bitfield macros
#define _U3ERRIR_TXCIF_POSN                                 0x0
#define _U3ERRIR_TXCIF_POSITION                             0x0
#define _U3ERRIR_TXCIF_SIZE                                 0x1
#define _U3ERRIR_TXCIF_LENGTH                               0x1
#define _U3ERRIR_TXCIF_MASK                                 0x1
#define _U3ERRIR_RXFOIF_POSN                                0x1
#define _U3ERRIR_RXFOIF_POSITION                            0x1
#define _U3ERRIR_RXFOIF_SIZE                                0x1
#define _U3ERRIR_RXFOIF_LENGTH                              0x1
#define _U3ERRIR_RXFOIF_MASK                                0x2
#define _U3ERRIR_RXBKIF_POSN                                0x2
#define _U3ERRIR_RXBKIF_POSITION                            0x2
#define _U3ERRIR_RXBKIF_SIZE                                0x1
#define _U3ERRIR_RXBKIF_LENGTH                              0x1
#define _U3ERRIR_RXBKIF_MASK                                0x4
#define _U3ERRIR_FERIF_POSN                                 0x3
#define _U3ERRIR_FERIF_POSITION                             0x3
#define _U3ERRIR_FERIF_SIZE                                 0x1
#define _U3ERRIR_FERIF_LENGTH                               0x1
#define _U3ERRIR_FERIF_MASK                                 0x8
#define _U3ERRIR_CERIF_POSN                                 0x4
#define _U3ERRIR_CERIF_POSITION                             0x4
#define _U3ERRIR_CERIF_SIZE                                 0x1
#define _U3ERRIR_CERIF_LENGTH                               0x1
#define _U3ERRIR_CERIF_MASK                                 0x10
#define _U3ERRIR_ABDOVF_POSN                                0x5
#define _U3ERRIR_ABDOVF_POSITION                            0x5
#define _U3ERRIR_ABDOVF_SIZE                                0x1
#define _U3ERRIR_ABDOVF_LENGTH                              0x1
#define _U3ERRIR_ABDOVF_MASK                                0x20
#define _U3ERRIR_PERIF_POSN                                 0x6
#define _U3ERRIR_PERIF_POSITION                             0x6
#define _U3ERRIR_PERIF_SIZE                                 0x1
#define _U3ERRIR_PERIF_LENGTH                               0x1
#define _U3ERRIR_PERIF_MASK                                 0x40
#define _U3ERRIR_TXMTIF_POSN                                0x7
#define _U3ERRIR_TXMTIF_POSITION                            0x7
#define _U3ERRIR_TXMTIF_SIZE                                0x1
#define _U3ERRIR_TXMTIF_LENGTH                              0x1
#define _U3ERRIR_TXMTIF_MASK                                0x80
#define _U3ERRIR_U3TXCIF_POSN                               0x0
#define _U3ERRIR_U3TXCIF_POSITION                           0x0
#define _U3ERRIR_U3TXCIF_SIZE                               0x1
#define _U3ERRIR_U3TXCIF_LENGTH                             0x1
#define _U3ERRIR_U3TXCIF_MASK                               0x1
#define _U3ERRIR_U3RXFOIF_POSN                              0x1
#define _U3ERRIR_U3RXFOIF_POSITION                          0x1
#define _U3ERRIR_U3RXFOIF_SIZE                              0x1
#define _U3ERRIR_U3RXFOIF_LENGTH                            0x1
#define _U3ERRIR_U3RXFOIF_MASK                              0x2
#define _U3ERRIR_U3RXBKIF_POSN                              0x2
#define _U3ERRIR_U3RXBKIF_POSITION                          0x2
#define _U3ERRIR_U3RXBKIF_SIZE                              0x1
#define _U3ERRIR_U3RXBKIF_LENGTH                            0x1
#define _U3ERRIR_U3RXBKIF_MASK                              0x4
#define _U3ERRIR_U3FERIF_POSN                               0x3
#define _U3ERRIR_U3FERIF_POSITION                           0x3
#define _U3ERRIR_U3FERIF_SIZE                               0x1
#define _U3ERRIR_U3FERIF_LENGTH                             0x1
#define _U3ERRIR_U3FERIF_MASK                               0x8
#define _U3ERRIR_U3CERIF_POSN                               0x4
#define _U3ERRIR_U3CERIF_POSITION                           0x4
#define _U3ERRIR_U3CERIF_SIZE                               0x1
#define _U3ERRIR_U3CERIF_LENGTH                             0x1
#define _U3ERRIR_U3CERIF_MASK                               0x10
#define _U3ERRIR_U3ABDOVF_POSN                              0x5
#define _U3ERRIR_U3ABDOVF_POSITION                          0x5
#define _U3ERRIR_U3ABDOVF_SIZE                              0x1
#define _U3ERRIR_U3ABDOVF_LENGTH                            0x1
#define _U3ERRIR_U3ABDOVF_MASK                              0x20
#define _U3ERRIR_U3PERIF_POSN                               0x6
#define _U3ERRIR_U3PERIF_POSITION                           0x6
#define _U3ERRIR_U3PERIF_SIZE                               0x1
#define _U3ERRIR_U3PERIF_LENGTH                             0x1
#define _U3ERRIR_U3PERIF_MASK                               0x40
#define _U3ERRIR_U3TXMTIF_POSN                              0x7
#define _U3ERRIR_U3TXMTIF_POSITION                          0x7
#define _U3ERRIR_U3TXMTIF_SIZE                              0x1
#define _U3ERRIR_U3TXMTIF_LENGTH                            0x1
#define _U3ERRIR_U3TXMTIF_MASK                              0x80

// Register: U3ERRIE
#define U3ERRIE U3ERRIE
extern volatile unsigned char           U3ERRIE             __at(0x2D9);
#ifndef _LIB_BUILD
asm("U3ERRIE equ 02D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U3TXCIE                :1;
        unsigned U3RXFOIE               :1;
        unsigned U3RXBKIE               :1;
        unsigned U3FERIE                :1;
        unsigned U3CERIE                :1;
        unsigned U3ABDOVE               :1;
        unsigned U3PERIE                :1;
        unsigned U3TXMTIE               :1;
    };
} U3ERRIEbits_t;
extern volatile U3ERRIEbits_t U3ERRIEbits __at(0x2D9);
// bitfield macros
#define _U3ERRIE_TXCIE_POSN                                 0x0
#define _U3ERRIE_TXCIE_POSITION                             0x0
#define _U3ERRIE_TXCIE_SIZE                                 0x1
#define _U3ERRIE_TXCIE_LENGTH                               0x1
#define _U3ERRIE_TXCIE_MASK                                 0x1
#define _U3ERRIE_RXFOIE_POSN                                0x1
#define _U3ERRIE_RXFOIE_POSITION                            0x1
#define _U3ERRIE_RXFOIE_SIZE                                0x1
#define _U3ERRIE_RXFOIE_LENGTH                              0x1
#define _U3ERRIE_RXFOIE_MASK                                0x2
#define _U3ERRIE_RXBKIE_POSN                                0x2
#define _U3ERRIE_RXBKIE_POSITION                            0x2
#define _U3ERRIE_RXBKIE_SIZE                                0x1
#define _U3ERRIE_RXBKIE_LENGTH                              0x1
#define _U3ERRIE_RXBKIE_MASK                                0x4
#define _U3ERRIE_FERIE_POSN                                 0x3
#define _U3ERRIE_FERIE_POSITION                             0x3
#define _U3ERRIE_FERIE_SIZE                                 0x1
#define _U3ERRIE_FERIE_LENGTH                               0x1
#define _U3ERRIE_FERIE_MASK                                 0x8
#define _U3ERRIE_CERIE_POSN                                 0x4
#define _U3ERRIE_CERIE_POSITION                             0x4
#define _U3ERRIE_CERIE_SIZE                                 0x1
#define _U3ERRIE_CERIE_LENGTH                               0x1
#define _U3ERRIE_CERIE_MASK                                 0x10
#define _U3ERRIE_ABDOVE_POSN                                0x5
#define _U3ERRIE_ABDOVE_POSITION                            0x5
#define _U3ERRIE_ABDOVE_SIZE                                0x1
#define _U3ERRIE_ABDOVE_LENGTH                              0x1
#define _U3ERRIE_ABDOVE_MASK                                0x20
#define _U3ERRIE_PERIE_POSN                                 0x6
#define _U3ERRIE_PERIE_POSITION                             0x6
#define _U3ERRIE_PERIE_SIZE                                 0x1
#define _U3ERRIE_PERIE_LENGTH                               0x1
#define _U3ERRIE_PERIE_MASK                                 0x40
#define _U3ERRIE_TXMTIE_POSN                                0x7
#define _U3ERRIE_TXMTIE_POSITION                            0x7
#define _U3ERRIE_TXMTIE_SIZE                                0x1
#define _U3ERRIE_TXMTIE_LENGTH                              0x1
#define _U3ERRIE_TXMTIE_MASK                                0x80
#define _U3ERRIE_U3TXCIE_POSN                               0x0
#define _U3ERRIE_U3TXCIE_POSITION                           0x0
#define _U3ERRIE_U3TXCIE_SIZE                               0x1
#define _U3ERRIE_U3TXCIE_LENGTH                             0x1
#define _U3ERRIE_U3TXCIE_MASK                               0x1
#define _U3ERRIE_U3RXFOIE_POSN                              0x1
#define _U3ERRIE_U3RXFOIE_POSITION                          0x1
#define _U3ERRIE_U3RXFOIE_SIZE                              0x1
#define _U3ERRIE_U3RXFOIE_LENGTH                            0x1
#define _U3ERRIE_U3RXFOIE_MASK                              0x2
#define _U3ERRIE_U3RXBKIE_POSN                              0x2
#define _U3ERRIE_U3RXBKIE_POSITION                          0x2
#define _U3ERRIE_U3RXBKIE_SIZE                              0x1
#define _U3ERRIE_U3RXBKIE_LENGTH                            0x1
#define _U3ERRIE_U3RXBKIE_MASK                              0x4
#define _U3ERRIE_U3FERIE_POSN                               0x3
#define _U3ERRIE_U3FERIE_POSITION                           0x3
#define _U3ERRIE_U3FERIE_SIZE                               0x1
#define _U3ERRIE_U3FERIE_LENGTH                             0x1
#define _U3ERRIE_U3FERIE_MASK                               0x8
#define _U3ERRIE_U3CERIE_POSN                               0x4
#define _U3ERRIE_U3CERIE_POSITION                           0x4
#define _U3ERRIE_U3CERIE_SIZE                               0x1
#define _U3ERRIE_U3CERIE_LENGTH                             0x1
#define _U3ERRIE_U3CERIE_MASK                               0x10
#define _U3ERRIE_U3ABDOVE_POSN                              0x5
#define _U3ERRIE_U3ABDOVE_POSITION                          0x5
#define _U3ERRIE_U3ABDOVE_SIZE                              0x1
#define _U3ERRIE_U3ABDOVE_LENGTH                            0x1
#define _U3ERRIE_U3ABDOVE_MASK                              0x20
#define _U3ERRIE_U3PERIE_POSN                               0x6
#define _U3ERRIE_U3PERIE_POSITION                           0x6
#define _U3ERRIE_U3PERIE_SIZE                               0x1
#define _U3ERRIE_U3PERIE_LENGTH                             0x1
#define _U3ERRIE_U3PERIE_MASK                               0x40
#define _U3ERRIE_U3TXMTIE_POSN                              0x7
#define _U3ERRIE_U3TXMTIE_POSITION                          0x7
#define _U3ERRIE_U3TXMTIE_SIZE                              0x1
#define _U3ERRIE_U3TXMTIE_LENGTH                            0x1
#define _U3ERRIE_U3TXMTIE_MASK                              0x80

// Register: U4RXB
#define U4RXB U4RXB
extern volatile unsigned char           U4RXB               __at(0x2DA);
#ifndef _LIB_BUILD
asm("U4RXB equ 02DAh");
#endif
// aliases
extern volatile unsigned char           U4RXBL              __at(0x2DA);
#ifndef _LIB_BUILD
asm("U4RXBL equ 02DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U4RXBbits_t;
extern volatile U4RXBbits_t U4RXBbits __at(0x2DA);
// bitfield macros
#define _U4RXB_RXB_POSN                                     0x0
#define _U4RXB_RXB_POSITION                                 0x0
#define _U4RXB_RXB_SIZE                                     0x8
#define _U4RXB_RXB_LENGTH                                   0x8
#define _U4RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U4RXBLbits_t;
extern volatile U4RXBLbits_t U4RXBLbits __at(0x2DA);
// bitfield macros
#define _U4RXBL_RXB_POSN                                    0x0
#define _U4RXBL_RXB_POSITION                                0x0
#define _U4RXBL_RXB_SIZE                                    0x8
#define _U4RXBL_RXB_LENGTH                                  0x8
#define _U4RXBL_RXB_MASK                                    0xFF

// Register: U4TXB
#define U4TXB U4TXB
extern volatile unsigned char           U4TXB               __at(0x2DC);
#ifndef _LIB_BUILD
asm("U4TXB equ 02DCh");
#endif
// aliases
extern volatile unsigned char           U4TXBL              __at(0x2DC);
#ifndef _LIB_BUILD
asm("U4TXBL equ 02DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U4TXBbits_t;
extern volatile U4TXBbits_t U4TXBbits __at(0x2DC);
// bitfield macros
#define _U4TXB_TXB_POSN                                     0x0
#define _U4TXB_TXB_POSITION                                 0x0
#define _U4TXB_TXB_SIZE                                     0x8
#define _U4TXB_TXB_LENGTH                                   0x8
#define _U4TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U4TXBLbits_t;
extern volatile U4TXBLbits_t U4TXBLbits __at(0x2DC);
// bitfield macros
#define _U4TXBL_TXB_POSN                                    0x0
#define _U4TXBL_TXB_POSITION                                0x0
#define _U4TXBL_TXB_SIZE                                    0x8
#define _U4TXBL_TXB_LENGTH                                  0x8
#define _U4TXBL_TXB_MASK                                    0xFF

// Register: U4P1
#define U4P1 U4P1
extern volatile unsigned char           U4P1                __at(0x2DE);
#ifndef _LIB_BUILD
asm("U4P1 equ 02DEh");
#endif

// Register: U4P1L
#define U4P1L U4P1L
extern volatile unsigned char           U4P1L               __at(0x2DE);
#ifndef _LIB_BUILD
asm("U4P1L equ 02DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U4P1Lbits_t;
extern volatile U4P1Lbits_t U4P1Lbits __at(0x2DE);
// bitfield macros
#define _U4P1L_P1L_POSN                                     0x0
#define _U4P1L_P1L_POSITION                                 0x0
#define _U4P1L_P1L_SIZE                                     0x8
#define _U4P1L_P1L_LENGTH                                   0x8
#define _U4P1L_P1L_MASK                                     0xFF

// Register: U4P2
#define U4P2 U4P2
extern volatile unsigned char           U4P2                __at(0x2E0);
#ifndef _LIB_BUILD
asm("U4P2 equ 02E0h");
#endif

// Register: U4P2L
#define U4P2L U4P2L
extern volatile unsigned char           U4P2L               __at(0x2E0);
#ifndef _LIB_BUILD
asm("U4P2L equ 02E0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U4P2Lbits_t;
extern volatile U4P2Lbits_t U4P2Lbits __at(0x2E0);
// bitfield macros
#define _U4P2L_P2L_POSN                                     0x0
#define _U4P2L_P2L_POSITION                                 0x0
#define _U4P2L_P2L_SIZE                                     0x8
#define _U4P2L_P2L_LENGTH                                   0x8
#define _U4P2L_P2L_MASK                                     0xFF

// Register: U4P3
#define U4P3 U4P3
extern volatile unsigned char           U4P3                __at(0x2E2);
#ifndef _LIB_BUILD
asm("U4P3 equ 02E2h");
#endif

// Register: U4P3L
#define U4P3L U4P3L
extern volatile unsigned char           U4P3L               __at(0x2E2);
#ifndef _LIB_BUILD
asm("U4P3L equ 02E2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U4P3Lbits_t;
extern volatile U4P3Lbits_t U4P3Lbits __at(0x2E2);
// bitfield macros
#define _U4P3L_P3L_POSN                                     0x0
#define _U4P3L_P3L_POSITION                                 0x0
#define _U4P3L_P3L_SIZE                                     0x8
#define _U4P3L_P3L_LENGTH                                   0x8
#define _U4P3L_P3L_MASK                                     0xFF

// Register: U4CON0
#define U4CON0 U4CON0
extern volatile unsigned char           U4CON0              __at(0x2E4);
#ifndef _LIB_BUILD
asm("U4CON0 equ 02E4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U4MODE                 :4;
        unsigned U4RXEN                 :1;
        unsigned U4TXEN                 :1;
        unsigned U4ABDEN                :1;
        unsigned U4BRGS                 :1;
    };
    struct {
        unsigned U4MODE0                :1;
        unsigned U4MODE1                :1;
        unsigned U4MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U4CON0bits_t;
extern volatile U4CON0bits_t U4CON0bits __at(0x2E4);
// bitfield macros
#define _U4CON0_MODE0_POSN                                  0x0
#define _U4CON0_MODE0_POSITION                              0x0
#define _U4CON0_MODE0_SIZE                                  0x1
#define _U4CON0_MODE0_LENGTH                                0x1
#define _U4CON0_MODE0_MASK                                  0x1
#define _U4CON0_MODE1_POSN                                  0x1
#define _U4CON0_MODE1_POSITION                              0x1
#define _U4CON0_MODE1_SIZE                                  0x1
#define _U4CON0_MODE1_LENGTH                                0x1
#define _U4CON0_MODE1_MASK                                  0x2
#define _U4CON0_MODE2_POSN                                  0x2
#define _U4CON0_MODE2_POSITION                              0x2
#define _U4CON0_MODE2_SIZE                                  0x1
#define _U4CON0_MODE2_LENGTH                                0x1
#define _U4CON0_MODE2_MASK                                  0x4
#define _U4CON0_U4MODE_POSN                                 0x0
#define _U4CON0_U4MODE_POSITION                             0x0
#define _U4CON0_U4MODE_SIZE                                 0x4
#define _U4CON0_U4MODE_LENGTH                               0x4
#define _U4CON0_U4MODE_MASK                                 0xF
#define _U4CON0_U4RXEN_POSN                                 0x4
#define _U4CON0_U4RXEN_POSITION                             0x4
#define _U4CON0_U4RXEN_SIZE                                 0x1
#define _U4CON0_U4RXEN_LENGTH                               0x1
#define _U4CON0_U4RXEN_MASK                                 0x10
#define _U4CON0_U4TXEN_POSN                                 0x5
#define _U4CON0_U4TXEN_POSITION                             0x5
#define _U4CON0_U4TXEN_SIZE                                 0x1
#define _U4CON0_U4TXEN_LENGTH                               0x1
#define _U4CON0_U4TXEN_MASK                                 0x20
#define _U4CON0_U4ABDEN_POSN                                0x6
#define _U4CON0_U4ABDEN_POSITION                            0x6
#define _U4CON0_U4ABDEN_SIZE                                0x1
#define _U4CON0_U4ABDEN_LENGTH                              0x1
#define _U4CON0_U4ABDEN_MASK                                0x40
#define _U4CON0_U4BRGS_POSN                                 0x7
#define _U4CON0_U4BRGS_POSITION                             0x7
#define _U4CON0_U4BRGS_SIZE                                 0x1
#define _U4CON0_U4BRGS_LENGTH                               0x1
#define _U4CON0_U4BRGS_MASK                                 0x80
#define _U4CON0_U4MODE0_POSN                                0x0
#define _U4CON0_U4MODE0_POSITION                            0x0
#define _U4CON0_U4MODE0_SIZE                                0x1
#define _U4CON0_U4MODE0_LENGTH                              0x1
#define _U4CON0_U4MODE0_MASK                                0x1
#define _U4CON0_U4MODE1_POSN                                0x1
#define _U4CON0_U4MODE1_POSITION                            0x1
#define _U4CON0_U4MODE1_SIZE                                0x1
#define _U4CON0_U4MODE1_LENGTH                              0x1
#define _U4CON0_U4MODE1_MASK                                0x2
#define _U4CON0_U4MODE2_POSN                                0x2
#define _U4CON0_U4MODE2_POSITION                            0x2
#define _U4CON0_U4MODE2_SIZE                                0x1
#define _U4CON0_U4MODE2_LENGTH                              0x1
#define _U4CON0_U4MODE2_MASK                                0x4
#define _U4CON0_MODE_POSN                                   0x0
#define _U4CON0_MODE_POSITION                               0x0
#define _U4CON0_MODE_SIZE                                   0x4
#define _U4CON0_MODE_LENGTH                                 0x4
#define _U4CON0_MODE_MASK                                   0xF
#define _U4CON0_RXEN_POSN                                   0x4
#define _U4CON0_RXEN_POSITION                               0x4
#define _U4CON0_RXEN_SIZE                                   0x1
#define _U4CON0_RXEN_LENGTH                                 0x1
#define _U4CON0_RXEN_MASK                                   0x10
#define _U4CON0_TXEN_POSN                                   0x5
#define _U4CON0_TXEN_POSITION                               0x5
#define _U4CON0_TXEN_SIZE                                   0x1
#define _U4CON0_TXEN_LENGTH                                 0x1
#define _U4CON0_TXEN_MASK                                   0x20
#define _U4CON0_ABDEN_POSN                                  0x6
#define _U4CON0_ABDEN_POSITION                              0x6
#define _U4CON0_ABDEN_SIZE                                  0x1
#define _U4CON0_ABDEN_LENGTH                                0x1
#define _U4CON0_ABDEN_MASK                                  0x40
#define _U4CON0_BRGS_POSN                                   0x7
#define _U4CON0_BRGS_POSITION                               0x7
#define _U4CON0_BRGS_SIZE                                   0x1
#define _U4CON0_BRGS_LENGTH                                 0x1
#define _U4CON0_BRGS_MASK                                   0x80

// Register: U4CON1
#define U4CON1 U4CON1
extern volatile unsigned char           U4CON1              __at(0x2E5);
#ifndef _LIB_BUILD
asm("U4CON1 equ 02E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U4SENDB                :1;
        unsigned U4BRKOVR               :1;
        unsigned                        :1;
        unsigned U4RXBIMD               :1;
        unsigned U4WUE                  :1;
        unsigned                        :2;
        unsigned U4ON                   :1;
    };
} U4CON1bits_t;
extern volatile U4CON1bits_t U4CON1bits __at(0x2E5);
// bitfield macros
#define _U4CON1_SENDB_POSN                                  0x0
#define _U4CON1_SENDB_POSITION                              0x0
#define _U4CON1_SENDB_SIZE                                  0x1
#define _U4CON1_SENDB_LENGTH                                0x1
#define _U4CON1_SENDB_MASK                                  0x1
#define _U4CON1_BRKOVR_POSN                                 0x1
#define _U4CON1_BRKOVR_POSITION                             0x1
#define _U4CON1_BRKOVR_SIZE                                 0x1
#define _U4CON1_BRKOVR_LENGTH                               0x1
#define _U4CON1_BRKOVR_MASK                                 0x2
#define _U4CON1_RXBIMD_POSN                                 0x3
#define _U4CON1_RXBIMD_POSITION                             0x3
#define _U4CON1_RXBIMD_SIZE                                 0x1
#define _U4CON1_RXBIMD_LENGTH                               0x1
#define _U4CON1_RXBIMD_MASK                                 0x8
#define _U4CON1_WUE_POSN                                    0x4
#define _U4CON1_WUE_POSITION                                0x4
#define _U4CON1_WUE_SIZE                                    0x1
#define _U4CON1_WUE_LENGTH                                  0x1
#define _U4CON1_WUE_MASK                                    0x10
#define _U4CON1_ON_POSN                                     0x7
#define _U4CON1_ON_POSITION                                 0x7
#define _U4CON1_ON_SIZE                                     0x1
#define _U4CON1_ON_LENGTH                                   0x1
#define _U4CON1_ON_MASK                                     0x80
#define _U4CON1_U4SENDB_POSN                                0x0
#define _U4CON1_U4SENDB_POSITION                            0x0
#define _U4CON1_U4SENDB_SIZE                                0x1
#define _U4CON1_U4SENDB_LENGTH                              0x1
#define _U4CON1_U4SENDB_MASK                                0x1
#define _U4CON1_U4BRKOVR_POSN                               0x1
#define _U4CON1_U4BRKOVR_POSITION                           0x1
#define _U4CON1_U4BRKOVR_SIZE                               0x1
#define _U4CON1_U4BRKOVR_LENGTH                             0x1
#define _U4CON1_U4BRKOVR_MASK                               0x2
#define _U4CON1_U4RXBIMD_POSN                               0x3
#define _U4CON1_U4RXBIMD_POSITION                           0x3
#define _U4CON1_U4RXBIMD_SIZE                               0x1
#define _U4CON1_U4RXBIMD_LENGTH                             0x1
#define _U4CON1_U4RXBIMD_MASK                               0x8
#define _U4CON1_U4WUE_POSN                                  0x4
#define _U4CON1_U4WUE_POSITION                              0x4
#define _U4CON1_U4WUE_SIZE                                  0x1
#define _U4CON1_U4WUE_LENGTH                                0x1
#define _U4CON1_U4WUE_MASK                                  0x10
#define _U4CON1_U4ON_POSN                                   0x7
#define _U4CON1_U4ON_POSITION                               0x7
#define _U4CON1_U4ON_SIZE                                   0x1
#define _U4CON1_U4ON_LENGTH                                 0x1
#define _U4CON1_U4ON_MASK                                   0x80

// Register: U4CON2
#define U4CON2 U4CON2
extern volatile unsigned char           U4CON2              __at(0x2E6);
#ifndef _LIB_BUILD
asm("U4CON2 equ 02E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U4FLO                  :2;
        unsigned U4TXPOL                :1;
        unsigned                        :1;
        unsigned U4STP                  :2;
        unsigned U4RXPOL                :1;
        unsigned U4RUNOVF               :1;
    };
    struct {
        unsigned U4FLO0                 :1;
        unsigned U4FLO1                 :1;
        unsigned                        :2;
        unsigned U4STP0                 :1;
        unsigned U4STP1                 :1;
    };
} U4CON2bits_t;
extern volatile U4CON2bits_t U4CON2bits __at(0x2E6);
// bitfield macros
#define _U4CON2_FLO_POSN                                    0x0
#define _U4CON2_FLO_POSITION                                0x0
#define _U4CON2_FLO_SIZE                                    0x2
#define _U4CON2_FLO_LENGTH                                  0x2
#define _U4CON2_FLO_MASK                                    0x3
#define _U4CON2_TXPOL_POSN                                  0x2
#define _U4CON2_TXPOL_POSITION                              0x2
#define _U4CON2_TXPOL_SIZE                                  0x1
#define _U4CON2_TXPOL_LENGTH                                0x1
#define _U4CON2_TXPOL_MASK                                  0x4
#define _U4CON2_STP_POSN                                    0x4
#define _U4CON2_STP_POSITION                                0x4
#define _U4CON2_STP_SIZE                                    0x2
#define _U4CON2_STP_LENGTH                                  0x2
#define _U4CON2_STP_MASK                                    0x30
#define _U4CON2_RXPOL_POSN                                  0x6
#define _U4CON2_RXPOL_POSITION                              0x6
#define _U4CON2_RXPOL_SIZE                                  0x1
#define _U4CON2_RXPOL_LENGTH                                0x1
#define _U4CON2_RXPOL_MASK                                  0x40
#define _U4CON2_RUNOVF_POSN                                 0x7
#define _U4CON2_RUNOVF_POSITION                             0x7
#define _U4CON2_RUNOVF_SIZE                                 0x1
#define _U4CON2_RUNOVF_LENGTH                               0x1
#define _U4CON2_RUNOVF_MASK                                 0x80
#define _U4CON2_FLO0_POSN                                   0x0
#define _U4CON2_FLO0_POSITION                               0x0
#define _U4CON2_FLO0_SIZE                                   0x1
#define _U4CON2_FLO0_LENGTH                                 0x1
#define _U4CON2_FLO0_MASK                                   0x1
#define _U4CON2_FLO1_POSN                                   0x1
#define _U4CON2_FLO1_POSITION                               0x1
#define _U4CON2_FLO1_SIZE                                   0x1
#define _U4CON2_FLO1_LENGTH                                 0x1
#define _U4CON2_FLO1_MASK                                   0x2
#define _U4CON2_STP0_POSN                                   0x4
#define _U4CON2_STP0_POSITION                               0x4
#define _U4CON2_STP0_SIZE                                   0x1
#define _U4CON2_STP0_LENGTH                                 0x1
#define _U4CON2_STP0_MASK                                   0x10
#define _U4CON2_STP1_POSN                                   0x5
#define _U4CON2_STP1_POSITION                               0x5
#define _U4CON2_STP1_SIZE                                   0x1
#define _U4CON2_STP1_LENGTH                                 0x1
#define _U4CON2_STP1_MASK                                   0x20
#define _U4CON2_U4FLO_POSN                                  0x0
#define _U4CON2_U4FLO_POSITION                              0x0
#define _U4CON2_U4FLO_SIZE                                  0x2
#define _U4CON2_U4FLO_LENGTH                                0x2
#define _U4CON2_U4FLO_MASK                                  0x3
#define _U4CON2_U4TXPOL_POSN                                0x2
#define _U4CON2_U4TXPOL_POSITION                            0x2
#define _U4CON2_U4TXPOL_SIZE                                0x1
#define _U4CON2_U4TXPOL_LENGTH                              0x1
#define _U4CON2_U4TXPOL_MASK                                0x4
#define _U4CON2_U4STP_POSN                                  0x4
#define _U4CON2_U4STP_POSITION                              0x4
#define _U4CON2_U4STP_SIZE                                  0x2
#define _U4CON2_U4STP_LENGTH                                0x2
#define _U4CON2_U4STP_MASK                                  0x30
#define _U4CON2_U4RXPOL_POSN                                0x6
#define _U4CON2_U4RXPOL_POSITION                            0x6
#define _U4CON2_U4RXPOL_SIZE                                0x1
#define _U4CON2_U4RXPOL_LENGTH                              0x1
#define _U4CON2_U4RXPOL_MASK                                0x40
#define _U4CON2_U4RUNOVF_POSN                               0x7
#define _U4CON2_U4RUNOVF_POSITION                           0x7
#define _U4CON2_U4RUNOVF_SIZE                               0x1
#define _U4CON2_U4RUNOVF_LENGTH                             0x1
#define _U4CON2_U4RUNOVF_MASK                               0x80
#define _U4CON2_U4FLO0_POSN                                 0x0
#define _U4CON2_U4FLO0_POSITION                             0x0
#define _U4CON2_U4FLO0_SIZE                                 0x1
#define _U4CON2_U4FLO0_LENGTH                               0x1
#define _U4CON2_U4FLO0_MASK                                 0x1
#define _U4CON2_U4FLO1_POSN                                 0x1
#define _U4CON2_U4FLO1_POSITION                             0x1
#define _U4CON2_U4FLO1_SIZE                                 0x1
#define _U4CON2_U4FLO1_LENGTH                               0x1
#define _U4CON2_U4FLO1_MASK                                 0x2
#define _U4CON2_U4STP0_POSN                                 0x4
#define _U4CON2_U4STP0_POSITION                             0x4
#define _U4CON2_U4STP0_SIZE                                 0x1
#define _U4CON2_U4STP0_LENGTH                               0x1
#define _U4CON2_U4STP0_MASK                                 0x10
#define _U4CON2_U4STP1_POSN                                 0x5
#define _U4CON2_U4STP1_POSITION                             0x5
#define _U4CON2_U4STP1_SIZE                                 0x1
#define _U4CON2_U4STP1_LENGTH                               0x1
#define _U4CON2_U4STP1_MASK                                 0x20

// Register: U4BRG
#define U4BRG U4BRG
extern volatile unsigned short          U4BRG               __at(0x2E7);
#ifndef _LIB_BUILD
asm("U4BRG equ 02E7h");
#endif

// Register: U4BRGL
#define U4BRGL U4BRGL
extern volatile unsigned char           U4BRGL              __at(0x2E7);
#ifndef _LIB_BUILD
asm("U4BRGL equ 02E7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U4BRGLbits_t;
extern volatile U4BRGLbits_t U4BRGLbits __at(0x2E7);
// bitfield macros
#define _U4BRGL_BRGL_POSN                                   0x0
#define _U4BRGL_BRGL_POSITION                               0x0
#define _U4BRGL_BRGL_SIZE                                   0x8
#define _U4BRGL_BRGL_LENGTH                                 0x8
#define _U4BRGL_BRGL_MASK                                   0xFF

// Register: U4BRGH
#define U4BRGH U4BRGH
extern volatile unsigned char           U4BRGH              __at(0x2E8);
#ifndef _LIB_BUILD
asm("U4BRGH equ 02E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U4BRGHbits_t;
extern volatile U4BRGHbits_t U4BRGHbits __at(0x2E8);
// bitfield macros
#define _U4BRGH_BRGH_POSN                                   0x0
#define _U4BRGH_BRGH_POSITION                               0x0
#define _U4BRGH_BRGH_SIZE                                   0x8
#define _U4BRGH_BRGH_LENGTH                                 0x8
#define _U4BRGH_BRGH_MASK                                   0xFF

// Register: U4FIFO
#define U4FIFO U4FIFO
extern volatile unsigned char           U4FIFO              __at(0x2E9);
#ifndef _LIB_BUILD
asm("U4FIFO equ 02E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U4RXBF                 :1;
        unsigned U4RXBE                 :1;
        unsigned U4XON                  :1;
        unsigned U4RXIDL                :1;
        unsigned U4TXBF                 :1;
        unsigned U4TXBE                 :1;
        unsigned U4STPMD                :1;
        unsigned U4TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U4RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U4FIFObits_t;
extern volatile U4FIFObits_t U4FIFObits __at(0x2E9);
// bitfield macros
#define _U4FIFO_RXBF_POSN                                   0x0
#define _U4FIFO_RXBF_POSITION                               0x0
#define _U4FIFO_RXBF_SIZE                                   0x1
#define _U4FIFO_RXBF_LENGTH                                 0x1
#define _U4FIFO_RXBF_MASK                                   0x1
#define _U4FIFO_RXBE_POSN                                   0x1
#define _U4FIFO_RXBE_POSITION                               0x1
#define _U4FIFO_RXBE_SIZE                                   0x1
#define _U4FIFO_RXBE_LENGTH                                 0x1
#define _U4FIFO_RXBE_MASK                                   0x2
#define _U4FIFO_XON_POSN                                    0x2
#define _U4FIFO_XON_POSITION                                0x2
#define _U4FIFO_XON_SIZE                                    0x1
#define _U4FIFO_XON_LENGTH                                  0x1
#define _U4FIFO_XON_MASK                                    0x4
#define _U4FIFO_RXIDL_POSN                                  0x3
#define _U4FIFO_RXIDL_POSITION                              0x3
#define _U4FIFO_RXIDL_SIZE                                  0x1
#define _U4FIFO_RXIDL_LENGTH                                0x1
#define _U4FIFO_RXIDL_MASK                                  0x8
#define _U4FIFO_TXBF_POSN                                   0x4
#define _U4FIFO_TXBF_POSITION                               0x4
#define _U4FIFO_TXBF_SIZE                                   0x1
#define _U4FIFO_TXBF_LENGTH                                 0x1
#define _U4FIFO_TXBF_MASK                                   0x10
#define _U4FIFO_TXBE_POSN                                   0x5
#define _U4FIFO_TXBE_POSITION                               0x5
#define _U4FIFO_TXBE_SIZE                                   0x1
#define _U4FIFO_TXBE_LENGTH                                 0x1
#define _U4FIFO_TXBE_MASK                                   0x20
#define _U4FIFO_STPMD_POSN                                  0x6
#define _U4FIFO_STPMD_POSITION                              0x6
#define _U4FIFO_STPMD_SIZE                                  0x1
#define _U4FIFO_STPMD_LENGTH                                0x1
#define _U4FIFO_STPMD_MASK                                  0x40
#define _U4FIFO_TXWRE_POSN                                  0x7
#define _U4FIFO_TXWRE_POSITION                              0x7
#define _U4FIFO_TXWRE_SIZE                                  0x1
#define _U4FIFO_TXWRE_LENGTH                                0x1
#define _U4FIFO_TXWRE_MASK                                  0x80
#define _U4FIFO_U4RXBF_POSN                                 0x0
#define _U4FIFO_U4RXBF_POSITION                             0x0
#define _U4FIFO_U4RXBF_SIZE                                 0x1
#define _U4FIFO_U4RXBF_LENGTH                               0x1
#define _U4FIFO_U4RXBF_MASK                                 0x1
#define _U4FIFO_U4RXBE_POSN                                 0x1
#define _U4FIFO_U4RXBE_POSITION                             0x1
#define _U4FIFO_U4RXBE_SIZE                                 0x1
#define _U4FIFO_U4RXBE_LENGTH                               0x1
#define _U4FIFO_U4RXBE_MASK                                 0x2
#define _U4FIFO_U4XON_POSN                                  0x2
#define _U4FIFO_U4XON_POSITION                              0x2
#define _U4FIFO_U4XON_SIZE                                  0x1
#define _U4FIFO_U4XON_LENGTH                                0x1
#define _U4FIFO_U4XON_MASK                                  0x4
#define _U4FIFO_U4RXIDL_POSN                                0x3
#define _U4FIFO_U4RXIDL_POSITION                            0x3
#define _U4FIFO_U4RXIDL_SIZE                                0x1
#define _U4FIFO_U4RXIDL_LENGTH                              0x1
#define _U4FIFO_U4RXIDL_MASK                                0x8
#define _U4FIFO_U4TXBF_POSN                                 0x4
#define _U4FIFO_U4TXBF_POSITION                             0x4
#define _U4FIFO_U4TXBF_SIZE                                 0x1
#define _U4FIFO_U4TXBF_LENGTH                               0x1
#define _U4FIFO_U4TXBF_MASK                                 0x10
#define _U4FIFO_U4TXBE_POSN                                 0x5
#define _U4FIFO_U4TXBE_POSITION                             0x5
#define _U4FIFO_U4TXBE_SIZE                                 0x1
#define _U4FIFO_U4TXBE_LENGTH                               0x1
#define _U4FIFO_U4TXBE_MASK                                 0x20
#define _U4FIFO_U4STPMD_POSN                                0x6
#define _U4FIFO_U4STPMD_POSITION                            0x6
#define _U4FIFO_U4STPMD_SIZE                                0x1
#define _U4FIFO_U4STPMD_LENGTH                              0x1
#define _U4FIFO_U4STPMD_MASK                                0x40
#define _U4FIFO_U4TXWRE_POSN                                0x7
#define _U4FIFO_U4TXWRE_POSITION                            0x7
#define _U4FIFO_U4TXWRE_SIZE                                0x1
#define _U4FIFO_U4TXWRE_LENGTH                              0x1
#define _U4FIFO_U4TXWRE_MASK                                0x80
#define _U4FIFO_U4RCIDL_POSN                                0x3
#define _U4FIFO_U4RCIDL_POSITION                            0x3
#define _U4FIFO_U4RCIDL_SIZE                                0x1
#define _U4FIFO_U4RCIDL_LENGTH                              0x1
#define _U4FIFO_U4RCIDL_MASK                                0x8
#define _U4FIFO_RCIDL_POSN                                  0x3
#define _U4FIFO_RCIDL_POSITION                              0x3
#define _U4FIFO_RCIDL_SIZE                                  0x1
#define _U4FIFO_RCIDL_LENGTH                                0x1
#define _U4FIFO_RCIDL_MASK                                  0x8

// Register: U4UIR
#define U4UIR U4UIR
extern volatile unsigned char           U4UIR               __at(0x2EA);
#ifndef _LIB_BUILD
asm("U4UIR equ 02EAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U4ABDIE                :1;
        unsigned                        :3;
        unsigned U4ABDIF                :1;
        unsigned U4WUIF                 :1;
    };
} U4UIRbits_t;
extern volatile U4UIRbits_t U4UIRbits __at(0x2EA);
// bitfield macros
#define _U4UIR_ABDIE_POSN                                   0x2
#define _U4UIR_ABDIE_POSITION                               0x2
#define _U4UIR_ABDIE_SIZE                                   0x1
#define _U4UIR_ABDIE_LENGTH                                 0x1
#define _U4UIR_ABDIE_MASK                                   0x4
#define _U4UIR_ABDIF_POSN                                   0x6
#define _U4UIR_ABDIF_POSITION                               0x6
#define _U4UIR_ABDIF_SIZE                                   0x1
#define _U4UIR_ABDIF_LENGTH                                 0x1
#define _U4UIR_ABDIF_MASK                                   0x40
#define _U4UIR_WUIF_POSN                                    0x7
#define _U4UIR_WUIF_POSITION                                0x7
#define _U4UIR_WUIF_SIZE                                    0x1
#define _U4UIR_WUIF_LENGTH                                  0x1
#define _U4UIR_WUIF_MASK                                    0x80
#define _U4UIR_U4ABDIE_POSN                                 0x2
#define _U4UIR_U4ABDIE_POSITION                             0x2
#define _U4UIR_U4ABDIE_SIZE                                 0x1
#define _U4UIR_U4ABDIE_LENGTH                               0x1
#define _U4UIR_U4ABDIE_MASK                                 0x4
#define _U4UIR_U4ABDIF_POSN                                 0x6
#define _U4UIR_U4ABDIF_POSITION                             0x6
#define _U4UIR_U4ABDIF_SIZE                                 0x1
#define _U4UIR_U4ABDIF_LENGTH                               0x1
#define _U4UIR_U4ABDIF_MASK                                 0x40
#define _U4UIR_U4WUIF_POSN                                  0x7
#define _U4UIR_U4WUIF_POSITION                              0x7
#define _U4UIR_U4WUIF_SIZE                                  0x1
#define _U4UIR_U4WUIF_LENGTH                                0x1
#define _U4UIR_U4WUIF_MASK                                  0x80

// Register: U4ERRIR
#define U4ERRIR U4ERRIR
extern volatile unsigned char           U4ERRIR             __at(0x2EB);
#ifndef _LIB_BUILD
asm("U4ERRIR equ 02EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U4TXCIF                :1;
        unsigned U4RXFOIF               :1;
        unsigned U4RXBKIF               :1;
        unsigned U4FERIF                :1;
        unsigned U4CERIF                :1;
        unsigned U4ABDOVF               :1;
        unsigned U4PERIF                :1;
        unsigned U4TXMTIF               :1;
    };
} U4ERRIRbits_t;
extern volatile U4ERRIRbits_t U4ERRIRbits __at(0x2EB);
// bitfield macros
#define _U4ERRIR_TXCIF_POSN                                 0x0
#define _U4ERRIR_TXCIF_POSITION                             0x0
#define _U4ERRIR_TXCIF_SIZE                                 0x1
#define _U4ERRIR_TXCIF_LENGTH                               0x1
#define _U4ERRIR_TXCIF_MASK                                 0x1
#define _U4ERRIR_RXFOIF_POSN                                0x1
#define _U4ERRIR_RXFOIF_POSITION                            0x1
#define _U4ERRIR_RXFOIF_SIZE                                0x1
#define _U4ERRIR_RXFOIF_LENGTH                              0x1
#define _U4ERRIR_RXFOIF_MASK                                0x2
#define _U4ERRIR_RXBKIF_POSN                                0x2
#define _U4ERRIR_RXBKIF_POSITION                            0x2
#define _U4ERRIR_RXBKIF_SIZE                                0x1
#define _U4ERRIR_RXBKIF_LENGTH                              0x1
#define _U4ERRIR_RXBKIF_MASK                                0x4
#define _U4ERRIR_FERIF_POSN                                 0x3
#define _U4ERRIR_FERIF_POSITION                             0x3
#define _U4ERRIR_FERIF_SIZE                                 0x1
#define _U4ERRIR_FERIF_LENGTH                               0x1
#define _U4ERRIR_FERIF_MASK                                 0x8
#define _U4ERRIR_CERIF_POSN                                 0x4
#define _U4ERRIR_CERIF_POSITION                             0x4
#define _U4ERRIR_CERIF_SIZE                                 0x1
#define _U4ERRIR_CERIF_LENGTH                               0x1
#define _U4ERRIR_CERIF_MASK                                 0x10
#define _U4ERRIR_ABDOVF_POSN                                0x5
#define _U4ERRIR_ABDOVF_POSITION                            0x5
#define _U4ERRIR_ABDOVF_SIZE                                0x1
#define _U4ERRIR_ABDOVF_LENGTH                              0x1
#define _U4ERRIR_ABDOVF_MASK                                0x20
#define _U4ERRIR_PERIF_POSN                                 0x6
#define _U4ERRIR_PERIF_POSITION                             0x6
#define _U4ERRIR_PERIF_SIZE                                 0x1
#define _U4ERRIR_PERIF_LENGTH                               0x1
#define _U4ERRIR_PERIF_MASK                                 0x40
#define _U4ERRIR_TXMTIF_POSN                                0x7
#define _U4ERRIR_TXMTIF_POSITION                            0x7
#define _U4ERRIR_TXMTIF_SIZE                                0x1
#define _U4ERRIR_TXMTIF_LENGTH                              0x1
#define _U4ERRIR_TXMTIF_MASK                                0x80
#define _U4ERRIR_U4TXCIF_POSN                               0x0
#define _U4ERRIR_U4TXCIF_POSITION                           0x0
#define _U4ERRIR_U4TXCIF_SIZE                               0x1
#define _U4ERRIR_U4TXCIF_LENGTH                             0x1
#define _U4ERRIR_U4TXCIF_MASK                               0x1
#define _U4ERRIR_U4RXFOIF_POSN                              0x1
#define _U4ERRIR_U4RXFOIF_POSITION                          0x1
#define _U4ERRIR_U4RXFOIF_SIZE                              0x1
#define _U4ERRIR_U4RXFOIF_LENGTH                            0x1
#define _U4ERRIR_U4RXFOIF_MASK                              0x2
#define _U4ERRIR_U4RXBKIF_POSN                              0x2
#define _U4ERRIR_U4RXBKIF_POSITION                          0x2
#define _U4ERRIR_U4RXBKIF_SIZE                              0x1
#define _U4ERRIR_U4RXBKIF_LENGTH                            0x1
#define _U4ERRIR_U4RXBKIF_MASK                              0x4
#define _U4ERRIR_U4FERIF_POSN                               0x3
#define _U4ERRIR_U4FERIF_POSITION                           0x3
#define _U4ERRIR_U4FERIF_SIZE                               0x1
#define _U4ERRIR_U4FERIF_LENGTH                             0x1
#define _U4ERRIR_U4FERIF_MASK                               0x8
#define _U4ERRIR_U4CERIF_POSN                               0x4
#define _U4ERRIR_U4CERIF_POSITION                           0x4
#define _U4ERRIR_U4CERIF_SIZE                               0x1
#define _U4ERRIR_U4CERIF_LENGTH                             0x1
#define _U4ERRIR_U4CERIF_MASK                               0x10
#define _U4ERRIR_U4ABDOVF_POSN                              0x5
#define _U4ERRIR_U4ABDOVF_POSITION                          0x5
#define _U4ERRIR_U4ABDOVF_SIZE                              0x1
#define _U4ERRIR_U4ABDOVF_LENGTH                            0x1
#define _U4ERRIR_U4ABDOVF_MASK                              0x20
#define _U4ERRIR_U4PERIF_POSN                               0x6
#define _U4ERRIR_U4PERIF_POSITION                           0x6
#define _U4ERRIR_U4PERIF_SIZE                               0x1
#define _U4ERRIR_U4PERIF_LENGTH                             0x1
#define _U4ERRIR_U4PERIF_MASK                               0x40
#define _U4ERRIR_U4TXMTIF_POSN                              0x7
#define _U4ERRIR_U4TXMTIF_POSITION                          0x7
#define _U4ERRIR_U4TXMTIF_SIZE                              0x1
#define _U4ERRIR_U4TXMTIF_LENGTH                            0x1
#define _U4ERRIR_U4TXMTIF_MASK                              0x80

// Register: U4ERRIE
#define U4ERRIE U4ERRIE
extern volatile unsigned char           U4ERRIE             __at(0x2EC);
#ifndef _LIB_BUILD
asm("U4ERRIE equ 02ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U4TXCIE                :1;
        unsigned U4RXFOIE               :1;
        unsigned U4RXBKIE               :1;
        unsigned U4FERIE                :1;
        unsigned U4CERIE                :1;
        unsigned U4ABDOVE               :1;
        unsigned U4PERIE                :1;
        unsigned U4TXMTIE               :1;
    };
} U4ERRIEbits_t;
extern volatile U4ERRIEbits_t U4ERRIEbits __at(0x2EC);
// bitfield macros
#define _U4ERRIE_TXCIE_POSN                                 0x0
#define _U4ERRIE_TXCIE_POSITION                             0x0
#define _U4ERRIE_TXCIE_SIZE                                 0x1
#define _U4ERRIE_TXCIE_LENGTH                               0x1
#define _U4ERRIE_TXCIE_MASK                                 0x1
#define _U4ERRIE_RXFOIE_POSN                                0x1
#define _U4ERRIE_RXFOIE_POSITION                            0x1
#define _U4ERRIE_RXFOIE_SIZE                                0x1
#define _U4ERRIE_RXFOIE_LENGTH                              0x1
#define _U4ERRIE_RXFOIE_MASK                                0x2
#define _U4ERRIE_RXBKIE_POSN                                0x2
#define _U4ERRIE_RXBKIE_POSITION                            0x2
#define _U4ERRIE_RXBKIE_SIZE                                0x1
#define _U4ERRIE_RXBKIE_LENGTH                              0x1
#define _U4ERRIE_RXBKIE_MASK                                0x4
#define _U4ERRIE_FERIE_POSN                                 0x3
#define _U4ERRIE_FERIE_POSITION                             0x3
#define _U4ERRIE_FERIE_SIZE                                 0x1
#define _U4ERRIE_FERIE_LENGTH                               0x1
#define _U4ERRIE_FERIE_MASK                                 0x8
#define _U4ERRIE_CERIE_POSN                                 0x4
#define _U4ERRIE_CERIE_POSITION                             0x4
#define _U4ERRIE_CERIE_SIZE                                 0x1
#define _U4ERRIE_CERIE_LENGTH                               0x1
#define _U4ERRIE_CERIE_MASK                                 0x10
#define _U4ERRIE_ABDOVE_POSN                                0x5
#define _U4ERRIE_ABDOVE_POSITION                            0x5
#define _U4ERRIE_ABDOVE_SIZE                                0x1
#define _U4ERRIE_ABDOVE_LENGTH                              0x1
#define _U4ERRIE_ABDOVE_MASK                                0x20
#define _U4ERRIE_PERIE_POSN                                 0x6
#define _U4ERRIE_PERIE_POSITION                             0x6
#define _U4ERRIE_PERIE_SIZE                                 0x1
#define _U4ERRIE_PERIE_LENGTH                               0x1
#define _U4ERRIE_PERIE_MASK                                 0x40
#define _U4ERRIE_TXMTIE_POSN                                0x7
#define _U4ERRIE_TXMTIE_POSITION                            0x7
#define _U4ERRIE_TXMTIE_SIZE                                0x1
#define _U4ERRIE_TXMTIE_LENGTH                              0x1
#define _U4ERRIE_TXMTIE_MASK                                0x80
#define _U4ERRIE_U4TXCIE_POSN                               0x0
#define _U4ERRIE_U4TXCIE_POSITION                           0x0
#define _U4ERRIE_U4TXCIE_SIZE                               0x1
#define _U4ERRIE_U4TXCIE_LENGTH                             0x1
#define _U4ERRIE_U4TXCIE_MASK                               0x1
#define _U4ERRIE_U4RXFOIE_POSN                              0x1
#define _U4ERRIE_U4RXFOIE_POSITION                          0x1
#define _U4ERRIE_U4RXFOIE_SIZE                              0x1
#define _U4ERRIE_U4RXFOIE_LENGTH                            0x1
#define _U4ERRIE_U4RXFOIE_MASK                              0x2
#define _U4ERRIE_U4RXBKIE_POSN                              0x2
#define _U4ERRIE_U4RXBKIE_POSITION                          0x2
#define _U4ERRIE_U4RXBKIE_SIZE                              0x1
#define _U4ERRIE_U4RXBKIE_LENGTH                            0x1
#define _U4ERRIE_U4RXBKIE_MASK                              0x4
#define _U4ERRIE_U4FERIE_POSN                               0x3
#define _U4ERRIE_U4FERIE_POSITION                           0x3
#define _U4ERRIE_U4FERIE_SIZE                               0x1
#define _U4ERRIE_U4FERIE_LENGTH                             0x1
#define _U4ERRIE_U4FERIE_MASK                               0x8
#define _U4ERRIE_U4CERIE_POSN                               0x4
#define _U4ERRIE_U4CERIE_POSITION                           0x4
#define _U4ERRIE_U4CERIE_SIZE                               0x1
#define _U4ERRIE_U4CERIE_LENGTH                             0x1
#define _U4ERRIE_U4CERIE_MASK                               0x10
#define _U4ERRIE_U4ABDOVE_POSN                              0x5
#define _U4ERRIE_U4ABDOVE_POSITION                          0x5
#define _U4ERRIE_U4ABDOVE_SIZE                              0x1
#define _U4ERRIE_U4ABDOVE_LENGTH                            0x1
#define _U4ERRIE_U4ABDOVE_MASK                              0x20
#define _U4ERRIE_U4PERIE_POSN                               0x6
#define _U4ERRIE_U4PERIE_POSITION                           0x6
#define _U4ERRIE_U4PERIE_SIZE                               0x1
#define _U4ERRIE_U4PERIE_LENGTH                             0x1
#define _U4ERRIE_U4PERIE_MASK                               0x40
#define _U4ERRIE_U4TXMTIE_POSN                              0x7
#define _U4ERRIE_U4TXMTIE_POSITION                          0x7
#define _U4ERRIE_U4TXMTIE_SIZE                              0x1
#define _U4ERRIE_U4TXMTIE_LENGTH                            0x1
#define _U4ERRIE_U4TXMTIE_MASK                              0x80

// Register: U5RXB
#define U5RXB U5RXB
extern volatile unsigned char           U5RXB               __at(0x2ED);
#ifndef _LIB_BUILD
asm("U5RXB equ 02EDh");
#endif
// aliases
extern volatile unsigned char           U5RXBL              __at(0x2ED);
#ifndef _LIB_BUILD
asm("U5RXBL equ 02EDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U5RXBbits_t;
extern volatile U5RXBbits_t U5RXBbits __at(0x2ED);
// bitfield macros
#define _U5RXB_RXB_POSN                                     0x0
#define _U5RXB_RXB_POSITION                                 0x0
#define _U5RXB_RXB_SIZE                                     0x8
#define _U5RXB_RXB_LENGTH                                   0x8
#define _U5RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U5RXBLbits_t;
extern volatile U5RXBLbits_t U5RXBLbits __at(0x2ED);
// bitfield macros
#define _U5RXBL_RXB_POSN                                    0x0
#define _U5RXBL_RXB_POSITION                                0x0
#define _U5RXBL_RXB_SIZE                                    0x8
#define _U5RXBL_RXB_LENGTH                                  0x8
#define _U5RXBL_RXB_MASK                                    0xFF

// Register: U5TXB
#define U5TXB U5TXB
extern volatile unsigned char           U5TXB               __at(0x2EF);
#ifndef _LIB_BUILD
asm("U5TXB equ 02EFh");
#endif
// aliases
extern volatile unsigned char           U5TXBL              __at(0x2EF);
#ifndef _LIB_BUILD
asm("U5TXBL equ 02EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U5TXBbits_t;
extern volatile U5TXBbits_t U5TXBbits __at(0x2EF);
// bitfield macros
#define _U5TXB_TXB_POSN                                     0x0
#define _U5TXB_TXB_POSITION                                 0x0
#define _U5TXB_TXB_SIZE                                     0x8
#define _U5TXB_TXB_LENGTH                                   0x8
#define _U5TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U5TXBLbits_t;
extern volatile U5TXBLbits_t U5TXBLbits __at(0x2EF);
// bitfield macros
#define _U5TXBL_TXB_POSN                                    0x0
#define _U5TXBL_TXB_POSITION                                0x0
#define _U5TXBL_TXB_SIZE                                    0x8
#define _U5TXBL_TXB_LENGTH                                  0x8
#define _U5TXBL_TXB_MASK                                    0xFF

// Register: U5P1
#define U5P1 U5P1
extern volatile unsigned char           U5P1                __at(0x2F1);
#ifndef _LIB_BUILD
asm("U5P1 equ 02F1h");
#endif

// Register: U5P1L
#define U5P1L U5P1L
extern volatile unsigned char           U5P1L               __at(0x2F1);
#ifndef _LIB_BUILD
asm("U5P1L equ 02F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U5P1Lbits_t;
extern volatile U5P1Lbits_t U5P1Lbits __at(0x2F1);
// bitfield macros
#define _U5P1L_P1L_POSN                                     0x0
#define _U5P1L_P1L_POSITION                                 0x0
#define _U5P1L_P1L_SIZE                                     0x8
#define _U5P1L_P1L_LENGTH                                   0x8
#define _U5P1L_P1L_MASK                                     0xFF

// Register: U5P2
#define U5P2 U5P2
extern volatile unsigned char           U5P2                __at(0x2F3);
#ifndef _LIB_BUILD
asm("U5P2 equ 02F3h");
#endif

// Register: U5P2L
#define U5P2L U5P2L
extern volatile unsigned char           U5P2L               __at(0x2F3);
#ifndef _LIB_BUILD
asm("U5P2L equ 02F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U5P2Lbits_t;
extern volatile U5P2Lbits_t U5P2Lbits __at(0x2F3);
// bitfield macros
#define _U5P2L_P2L_POSN                                     0x0
#define _U5P2L_P2L_POSITION                                 0x0
#define _U5P2L_P2L_SIZE                                     0x8
#define _U5P2L_P2L_LENGTH                                   0x8
#define _U5P2L_P2L_MASK                                     0xFF

// Register: U5P3
#define U5P3 U5P3
extern volatile unsigned char           U5P3                __at(0x2F5);
#ifndef _LIB_BUILD
asm("U5P3 equ 02F5h");
#endif

// Register: U5P3L
#define U5P3L U5P3L
extern volatile unsigned char           U5P3L               __at(0x2F5);
#ifndef _LIB_BUILD
asm("U5P3L equ 02F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U5P3Lbits_t;
extern volatile U5P3Lbits_t U5P3Lbits __at(0x2F5);
// bitfield macros
#define _U5P3L_P3L_POSN                                     0x0
#define _U5P3L_P3L_POSITION                                 0x0
#define _U5P3L_P3L_SIZE                                     0x8
#define _U5P3L_P3L_LENGTH                                   0x8
#define _U5P3L_P3L_MASK                                     0xFF

// Register: U5CON0
#define U5CON0 U5CON0
extern volatile unsigned char           U5CON0              __at(0x2F7);
#ifndef _LIB_BUILD
asm("U5CON0 equ 02F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U5MODE                 :4;
        unsigned U5RXEN                 :1;
        unsigned U5TXEN                 :1;
        unsigned U5ABDEN                :1;
        unsigned U5BRGS                 :1;
    };
    struct {
        unsigned U5MODE0                :1;
        unsigned U5MODE1                :1;
        unsigned U5MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U5CON0bits_t;
extern volatile U5CON0bits_t U5CON0bits __at(0x2F7);
// bitfield macros
#define _U5CON0_MODE0_POSN                                  0x0
#define _U5CON0_MODE0_POSITION                              0x0
#define _U5CON0_MODE0_SIZE                                  0x1
#define _U5CON0_MODE0_LENGTH                                0x1
#define _U5CON0_MODE0_MASK                                  0x1
#define _U5CON0_MODE1_POSN                                  0x1
#define _U5CON0_MODE1_POSITION                              0x1
#define _U5CON0_MODE1_SIZE                                  0x1
#define _U5CON0_MODE1_LENGTH                                0x1
#define _U5CON0_MODE1_MASK                                  0x2
#define _U5CON0_MODE2_POSN                                  0x2
#define _U5CON0_MODE2_POSITION                              0x2
#define _U5CON0_MODE2_SIZE                                  0x1
#define _U5CON0_MODE2_LENGTH                                0x1
#define _U5CON0_MODE2_MASK                                  0x4
#define _U5CON0_U5MODE_POSN                                 0x0
#define _U5CON0_U5MODE_POSITION                             0x0
#define _U5CON0_U5MODE_SIZE                                 0x4
#define _U5CON0_U5MODE_LENGTH                               0x4
#define _U5CON0_U5MODE_MASK                                 0xF
#define _U5CON0_U5RXEN_POSN                                 0x4
#define _U5CON0_U5RXEN_POSITION                             0x4
#define _U5CON0_U5RXEN_SIZE                                 0x1
#define _U5CON0_U5RXEN_LENGTH                               0x1
#define _U5CON0_U5RXEN_MASK                                 0x10
#define _U5CON0_U5TXEN_POSN                                 0x5
#define _U5CON0_U5TXEN_POSITION                             0x5
#define _U5CON0_U5TXEN_SIZE                                 0x1
#define _U5CON0_U5TXEN_LENGTH                               0x1
#define _U5CON0_U5TXEN_MASK                                 0x20
#define _U5CON0_U5ABDEN_POSN                                0x6
#define _U5CON0_U5ABDEN_POSITION                            0x6
#define _U5CON0_U5ABDEN_SIZE                                0x1
#define _U5CON0_U5ABDEN_LENGTH                              0x1
#define _U5CON0_U5ABDEN_MASK                                0x40
#define _U5CON0_U5BRGS_POSN                                 0x7
#define _U5CON0_U5BRGS_POSITION                             0x7
#define _U5CON0_U5BRGS_SIZE                                 0x1
#define _U5CON0_U5BRGS_LENGTH                               0x1
#define _U5CON0_U5BRGS_MASK                                 0x80
#define _U5CON0_U5MODE0_POSN                                0x0
#define _U5CON0_U5MODE0_POSITION                            0x0
#define _U5CON0_U5MODE0_SIZE                                0x1
#define _U5CON0_U5MODE0_LENGTH                              0x1
#define _U5CON0_U5MODE0_MASK                                0x1
#define _U5CON0_U5MODE1_POSN                                0x1
#define _U5CON0_U5MODE1_POSITION                            0x1
#define _U5CON0_U5MODE1_SIZE                                0x1
#define _U5CON0_U5MODE1_LENGTH                              0x1
#define _U5CON0_U5MODE1_MASK                                0x2
#define _U5CON0_U5MODE2_POSN                                0x2
#define _U5CON0_U5MODE2_POSITION                            0x2
#define _U5CON0_U5MODE2_SIZE                                0x1
#define _U5CON0_U5MODE2_LENGTH                              0x1
#define _U5CON0_U5MODE2_MASK                                0x4
#define _U5CON0_MODE_POSN                                   0x0
#define _U5CON0_MODE_POSITION                               0x0
#define _U5CON0_MODE_SIZE                                   0x4
#define _U5CON0_MODE_LENGTH                                 0x4
#define _U5CON0_MODE_MASK                                   0xF
#define _U5CON0_RXEN_POSN                                   0x4
#define _U5CON0_RXEN_POSITION                               0x4
#define _U5CON0_RXEN_SIZE                                   0x1
#define _U5CON0_RXEN_LENGTH                                 0x1
#define _U5CON0_RXEN_MASK                                   0x10
#define _U5CON0_TXEN_POSN                                   0x5
#define _U5CON0_TXEN_POSITION                               0x5
#define _U5CON0_TXEN_SIZE                                   0x1
#define _U5CON0_TXEN_LENGTH                                 0x1
#define _U5CON0_TXEN_MASK                                   0x20
#define _U5CON0_ABDEN_POSN                                  0x6
#define _U5CON0_ABDEN_POSITION                              0x6
#define _U5CON0_ABDEN_SIZE                                  0x1
#define _U5CON0_ABDEN_LENGTH                                0x1
#define _U5CON0_ABDEN_MASK                                  0x40
#define _U5CON0_BRGS_POSN                                   0x7
#define _U5CON0_BRGS_POSITION                               0x7
#define _U5CON0_BRGS_SIZE                                   0x1
#define _U5CON0_BRGS_LENGTH                                 0x1
#define _U5CON0_BRGS_MASK                                   0x80

// Register: U5CON1
#define U5CON1 U5CON1
extern volatile unsigned char           U5CON1              __at(0x2F8);
#ifndef _LIB_BUILD
asm("U5CON1 equ 02F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U5SENDB                :1;
        unsigned U5BRKOVR               :1;
        unsigned                        :1;
        unsigned U5RXBIMD               :1;
        unsigned U5WUE                  :1;
        unsigned                        :2;
        unsigned U5ON                   :1;
    };
} U5CON1bits_t;
extern volatile U5CON1bits_t U5CON1bits __at(0x2F8);
// bitfield macros
#define _U5CON1_SENDB_POSN                                  0x0
#define _U5CON1_SENDB_POSITION                              0x0
#define _U5CON1_SENDB_SIZE                                  0x1
#define _U5CON1_SENDB_LENGTH                                0x1
#define _U5CON1_SENDB_MASK                                  0x1
#define _U5CON1_BRKOVR_POSN                                 0x1
#define _U5CON1_BRKOVR_POSITION                             0x1
#define _U5CON1_BRKOVR_SIZE                                 0x1
#define _U5CON1_BRKOVR_LENGTH                               0x1
#define _U5CON1_BRKOVR_MASK                                 0x2
#define _U5CON1_RXBIMD_POSN                                 0x3
#define _U5CON1_RXBIMD_POSITION                             0x3
#define _U5CON1_RXBIMD_SIZE                                 0x1
#define _U5CON1_RXBIMD_LENGTH                               0x1
#define _U5CON1_RXBIMD_MASK                                 0x8
#define _U5CON1_WUE_POSN                                    0x4
#define _U5CON1_WUE_POSITION                                0x4
#define _U5CON1_WUE_SIZE                                    0x1
#define _U5CON1_WUE_LENGTH                                  0x1
#define _U5CON1_WUE_MASK                                    0x10
#define _U5CON1_ON_POSN                                     0x7
#define _U5CON1_ON_POSITION                                 0x7
#define _U5CON1_ON_SIZE                                     0x1
#define _U5CON1_ON_LENGTH                                   0x1
#define _U5CON1_ON_MASK                                     0x80
#define _U5CON1_U5SENDB_POSN                                0x0
#define _U5CON1_U5SENDB_POSITION                            0x0
#define _U5CON1_U5SENDB_SIZE                                0x1
#define _U5CON1_U5SENDB_LENGTH                              0x1
#define _U5CON1_U5SENDB_MASK                                0x1
#define _U5CON1_U5BRKOVR_POSN                               0x1
#define _U5CON1_U5BRKOVR_POSITION                           0x1
#define _U5CON1_U5BRKOVR_SIZE                               0x1
#define _U5CON1_U5BRKOVR_LENGTH                             0x1
#define _U5CON1_U5BRKOVR_MASK                               0x2
#define _U5CON1_U5RXBIMD_POSN                               0x3
#define _U5CON1_U5RXBIMD_POSITION                           0x3
#define _U5CON1_U5RXBIMD_SIZE                               0x1
#define _U5CON1_U5RXBIMD_LENGTH                             0x1
#define _U5CON1_U5RXBIMD_MASK                               0x8
#define _U5CON1_U5WUE_POSN                                  0x4
#define _U5CON1_U5WUE_POSITION                              0x4
#define _U5CON1_U5WUE_SIZE                                  0x1
#define _U5CON1_U5WUE_LENGTH                                0x1
#define _U5CON1_U5WUE_MASK                                  0x10
#define _U5CON1_U5ON_POSN                                   0x7
#define _U5CON1_U5ON_POSITION                               0x7
#define _U5CON1_U5ON_SIZE                                   0x1
#define _U5CON1_U5ON_LENGTH                                 0x1
#define _U5CON1_U5ON_MASK                                   0x80

// Register: U5CON2
#define U5CON2 U5CON2
extern volatile unsigned char           U5CON2              __at(0x2F9);
#ifndef _LIB_BUILD
asm("U5CON2 equ 02F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U5FLO                  :2;
        unsigned U5TXPOL                :1;
        unsigned                        :1;
        unsigned U5STP                  :2;
        unsigned U5RXPOL                :1;
        unsigned U5RUNOVF               :1;
    };
    struct {
        unsigned U5FLO0                 :1;
        unsigned U5FLO1                 :1;
        unsigned                        :2;
        unsigned U5STP0                 :1;
        unsigned U5STP1                 :1;
    };
} U5CON2bits_t;
extern volatile U5CON2bits_t U5CON2bits __at(0x2F9);
// bitfield macros
#define _U5CON2_FLO_POSN                                    0x0
#define _U5CON2_FLO_POSITION                                0x0
#define _U5CON2_FLO_SIZE                                    0x2
#define _U5CON2_FLO_LENGTH                                  0x2
#define _U5CON2_FLO_MASK                                    0x3
#define _U5CON2_TXPOL_POSN                                  0x2
#define _U5CON2_TXPOL_POSITION                              0x2
#define _U5CON2_TXPOL_SIZE                                  0x1
#define _U5CON2_TXPOL_LENGTH                                0x1
#define _U5CON2_TXPOL_MASK                                  0x4
#define _U5CON2_STP_POSN                                    0x4
#define _U5CON2_STP_POSITION                                0x4
#define _U5CON2_STP_SIZE                                    0x2
#define _U5CON2_STP_LENGTH                                  0x2
#define _U5CON2_STP_MASK                                    0x30
#define _U5CON2_RXPOL_POSN                                  0x6
#define _U5CON2_RXPOL_POSITION                              0x6
#define _U5CON2_RXPOL_SIZE                                  0x1
#define _U5CON2_RXPOL_LENGTH                                0x1
#define _U5CON2_RXPOL_MASK                                  0x40
#define _U5CON2_RUNOVF_POSN                                 0x7
#define _U5CON2_RUNOVF_POSITION                             0x7
#define _U5CON2_RUNOVF_SIZE                                 0x1
#define _U5CON2_RUNOVF_LENGTH                               0x1
#define _U5CON2_RUNOVF_MASK                                 0x80
#define _U5CON2_FLO0_POSN                                   0x0
#define _U5CON2_FLO0_POSITION                               0x0
#define _U5CON2_FLO0_SIZE                                   0x1
#define _U5CON2_FLO0_LENGTH                                 0x1
#define _U5CON2_FLO0_MASK                                   0x1
#define _U5CON2_FLO1_POSN                                   0x1
#define _U5CON2_FLO1_POSITION                               0x1
#define _U5CON2_FLO1_SIZE                                   0x1
#define _U5CON2_FLO1_LENGTH                                 0x1
#define _U5CON2_FLO1_MASK                                   0x2
#define _U5CON2_STP0_POSN                                   0x4
#define _U5CON2_STP0_POSITION                               0x4
#define _U5CON2_STP0_SIZE                                   0x1
#define _U5CON2_STP0_LENGTH                                 0x1
#define _U5CON2_STP0_MASK                                   0x10
#define _U5CON2_STP1_POSN                                   0x5
#define _U5CON2_STP1_POSITION                               0x5
#define _U5CON2_STP1_SIZE                                   0x1
#define _U5CON2_STP1_LENGTH                                 0x1
#define _U5CON2_STP1_MASK                                   0x20
#define _U5CON2_U5FLO_POSN                                  0x0
#define _U5CON2_U5FLO_POSITION                              0x0
#define _U5CON2_U5FLO_SIZE                                  0x2
#define _U5CON2_U5FLO_LENGTH                                0x2
#define _U5CON2_U5FLO_MASK                                  0x3
#define _U5CON2_U5TXPOL_POSN                                0x2
#define _U5CON2_U5TXPOL_POSITION                            0x2
#define _U5CON2_U5TXPOL_SIZE                                0x1
#define _U5CON2_U5TXPOL_LENGTH                              0x1
#define _U5CON2_U5TXPOL_MASK                                0x4
#define _U5CON2_U5STP_POSN                                  0x4
#define _U5CON2_U5STP_POSITION                              0x4
#define _U5CON2_U5STP_SIZE                                  0x2
#define _U5CON2_U5STP_LENGTH                                0x2
#define _U5CON2_U5STP_MASK                                  0x30
#define _U5CON2_U5RXPOL_POSN                                0x6
#define _U5CON2_U5RXPOL_POSITION                            0x6
#define _U5CON2_U5RXPOL_SIZE                                0x1
#define _U5CON2_U5RXPOL_LENGTH                              0x1
#define _U5CON2_U5RXPOL_MASK                                0x40
#define _U5CON2_U5RUNOVF_POSN                               0x7
#define _U5CON2_U5RUNOVF_POSITION                           0x7
#define _U5CON2_U5RUNOVF_SIZE                               0x1
#define _U5CON2_U5RUNOVF_LENGTH                             0x1
#define _U5CON2_U5RUNOVF_MASK                               0x80
#define _U5CON2_U5FLO0_POSN                                 0x0
#define _U5CON2_U5FLO0_POSITION                             0x0
#define _U5CON2_U5FLO0_SIZE                                 0x1
#define _U5CON2_U5FLO0_LENGTH                               0x1
#define _U5CON2_U5FLO0_MASK                                 0x1
#define _U5CON2_U5FLO1_POSN                                 0x1
#define _U5CON2_U5FLO1_POSITION                             0x1
#define _U5CON2_U5FLO1_SIZE                                 0x1
#define _U5CON2_U5FLO1_LENGTH                               0x1
#define _U5CON2_U5FLO1_MASK                                 0x2
#define _U5CON2_U5STP0_POSN                                 0x4
#define _U5CON2_U5STP0_POSITION                             0x4
#define _U5CON2_U5STP0_SIZE                                 0x1
#define _U5CON2_U5STP0_LENGTH                               0x1
#define _U5CON2_U5STP0_MASK                                 0x10
#define _U5CON2_U5STP1_POSN                                 0x5
#define _U5CON2_U5STP1_POSITION                             0x5
#define _U5CON2_U5STP1_SIZE                                 0x1
#define _U5CON2_U5STP1_LENGTH                               0x1
#define _U5CON2_U5STP1_MASK                                 0x20

// Register: U5BRG
#define U5BRG U5BRG
extern volatile unsigned short          U5BRG               __at(0x2FA);
#ifndef _LIB_BUILD
asm("U5BRG equ 02FAh");
#endif

// Register: U5BRGL
#define U5BRGL U5BRGL
extern volatile unsigned char           U5BRGL              __at(0x2FA);
#ifndef _LIB_BUILD
asm("U5BRGL equ 02FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U5BRGLbits_t;
extern volatile U5BRGLbits_t U5BRGLbits __at(0x2FA);
// bitfield macros
#define _U5BRGL_BRGL_POSN                                   0x0
#define _U5BRGL_BRGL_POSITION                               0x0
#define _U5BRGL_BRGL_SIZE                                   0x8
#define _U5BRGL_BRGL_LENGTH                                 0x8
#define _U5BRGL_BRGL_MASK                                   0xFF

// Register: U5BRGH
#define U5BRGH U5BRGH
extern volatile unsigned char           U5BRGH              __at(0x2FB);
#ifndef _LIB_BUILD
asm("U5BRGH equ 02FBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U5BRGHbits_t;
extern volatile U5BRGHbits_t U5BRGHbits __at(0x2FB);
// bitfield macros
#define _U5BRGH_BRGH_POSN                                   0x0
#define _U5BRGH_BRGH_POSITION                               0x0
#define _U5BRGH_BRGH_SIZE                                   0x8
#define _U5BRGH_BRGH_LENGTH                                 0x8
#define _U5BRGH_BRGH_MASK                                   0xFF

// Register: U5FIFO
#define U5FIFO U5FIFO
extern volatile unsigned char           U5FIFO              __at(0x2FC);
#ifndef _LIB_BUILD
asm("U5FIFO equ 02FCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U5RXBF                 :1;
        unsigned U5RXBE                 :1;
        unsigned U5XON                  :1;
        unsigned U5RXIDL                :1;
        unsigned U5TXBF                 :1;
        unsigned U5TXBE                 :1;
        unsigned U5STPMD                :1;
        unsigned U5TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U5RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U5FIFObits_t;
extern volatile U5FIFObits_t U5FIFObits __at(0x2FC);
// bitfield macros
#define _U5FIFO_RXBF_POSN                                   0x0
#define _U5FIFO_RXBF_POSITION                               0x0
#define _U5FIFO_RXBF_SIZE                                   0x1
#define _U5FIFO_RXBF_LENGTH                                 0x1
#define _U5FIFO_RXBF_MASK                                   0x1
#define _U5FIFO_RXBE_POSN                                   0x1
#define _U5FIFO_RXBE_POSITION                               0x1
#define _U5FIFO_RXBE_SIZE                                   0x1
#define _U5FIFO_RXBE_LENGTH                                 0x1
#define _U5FIFO_RXBE_MASK                                   0x2
#define _U5FIFO_XON_POSN                                    0x2
#define _U5FIFO_XON_POSITION                                0x2
#define _U5FIFO_XON_SIZE                                    0x1
#define _U5FIFO_XON_LENGTH                                  0x1
#define _U5FIFO_XON_MASK                                    0x4
#define _U5FIFO_RXIDL_POSN                                  0x3
#define _U5FIFO_RXIDL_POSITION                              0x3
#define _U5FIFO_RXIDL_SIZE                                  0x1
#define _U5FIFO_RXIDL_LENGTH                                0x1
#define _U5FIFO_RXIDL_MASK                                  0x8
#define _U5FIFO_TXBF_POSN                                   0x4
#define _U5FIFO_TXBF_POSITION                               0x4
#define _U5FIFO_TXBF_SIZE                                   0x1
#define _U5FIFO_TXBF_LENGTH                                 0x1
#define _U5FIFO_TXBF_MASK                                   0x10
#define _U5FIFO_TXBE_POSN                                   0x5
#define _U5FIFO_TXBE_POSITION                               0x5
#define _U5FIFO_TXBE_SIZE                                   0x1
#define _U5FIFO_TXBE_LENGTH                                 0x1
#define _U5FIFO_TXBE_MASK                                   0x20
#define _U5FIFO_STPMD_POSN                                  0x6
#define _U5FIFO_STPMD_POSITION                              0x6
#define _U5FIFO_STPMD_SIZE                                  0x1
#define _U5FIFO_STPMD_LENGTH                                0x1
#define _U5FIFO_STPMD_MASK                                  0x40
#define _U5FIFO_TXWRE_POSN                                  0x7
#define _U5FIFO_TXWRE_POSITION                              0x7
#define _U5FIFO_TXWRE_SIZE                                  0x1
#define _U5FIFO_TXWRE_LENGTH                                0x1
#define _U5FIFO_TXWRE_MASK                                  0x80
#define _U5FIFO_U5RXBF_POSN                                 0x0
#define _U5FIFO_U5RXBF_POSITION                             0x0
#define _U5FIFO_U5RXBF_SIZE                                 0x1
#define _U5FIFO_U5RXBF_LENGTH                               0x1
#define _U5FIFO_U5RXBF_MASK                                 0x1
#define _U5FIFO_U5RXBE_POSN                                 0x1
#define _U5FIFO_U5RXBE_POSITION                             0x1
#define _U5FIFO_U5RXBE_SIZE                                 0x1
#define _U5FIFO_U5RXBE_LENGTH                               0x1
#define _U5FIFO_U5RXBE_MASK                                 0x2
#define _U5FIFO_U5XON_POSN                                  0x2
#define _U5FIFO_U5XON_POSITION                              0x2
#define _U5FIFO_U5XON_SIZE                                  0x1
#define _U5FIFO_U5XON_LENGTH                                0x1
#define _U5FIFO_U5XON_MASK                                  0x4
#define _U5FIFO_U5RXIDL_POSN                                0x3
#define _U5FIFO_U5RXIDL_POSITION                            0x3
#define _U5FIFO_U5RXIDL_SIZE                                0x1
#define _U5FIFO_U5RXIDL_LENGTH                              0x1
#define _U5FIFO_U5RXIDL_MASK                                0x8
#define _U5FIFO_U5TXBF_POSN                                 0x4
#define _U5FIFO_U5TXBF_POSITION                             0x4
#define _U5FIFO_U5TXBF_SIZE                                 0x1
#define _U5FIFO_U5TXBF_LENGTH                               0x1
#define _U5FIFO_U5TXBF_MASK                                 0x10
#define _U5FIFO_U5TXBE_POSN                                 0x5
#define _U5FIFO_U5TXBE_POSITION                             0x5
#define _U5FIFO_U5TXBE_SIZE                                 0x1
#define _U5FIFO_U5TXBE_LENGTH                               0x1
#define _U5FIFO_U5TXBE_MASK                                 0x20
#define _U5FIFO_U5STPMD_POSN                                0x6
#define _U5FIFO_U5STPMD_POSITION                            0x6
#define _U5FIFO_U5STPMD_SIZE                                0x1
#define _U5FIFO_U5STPMD_LENGTH                              0x1
#define _U5FIFO_U5STPMD_MASK                                0x40
#define _U5FIFO_U5TXWRE_POSN                                0x7
#define _U5FIFO_U5TXWRE_POSITION                            0x7
#define _U5FIFO_U5TXWRE_SIZE                                0x1
#define _U5FIFO_U5TXWRE_LENGTH                              0x1
#define _U5FIFO_U5TXWRE_MASK                                0x80
#define _U5FIFO_U5RCIDL_POSN                                0x3
#define _U5FIFO_U5RCIDL_POSITION                            0x3
#define _U5FIFO_U5RCIDL_SIZE                                0x1
#define _U5FIFO_U5RCIDL_LENGTH                              0x1
#define _U5FIFO_U5RCIDL_MASK                                0x8
#define _U5FIFO_RCIDL_POSN                                  0x3
#define _U5FIFO_RCIDL_POSITION                              0x3
#define _U5FIFO_RCIDL_SIZE                                  0x1
#define _U5FIFO_RCIDL_LENGTH                                0x1
#define _U5FIFO_RCIDL_MASK                                  0x8

// Register: U5UIR
#define U5UIR U5UIR
extern volatile unsigned char           U5UIR               __at(0x2FD);
#ifndef _LIB_BUILD
asm("U5UIR equ 02FDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U5ABDIE                :1;
        unsigned                        :3;
        unsigned U5ABDIF                :1;
        unsigned U5WUIF                 :1;
    };
} U5UIRbits_t;
extern volatile U5UIRbits_t U5UIRbits __at(0x2FD);
// bitfield macros
#define _U5UIR_ABDIE_POSN                                   0x2
#define _U5UIR_ABDIE_POSITION                               0x2
#define _U5UIR_ABDIE_SIZE                                   0x1
#define _U5UIR_ABDIE_LENGTH                                 0x1
#define _U5UIR_ABDIE_MASK                                   0x4
#define _U5UIR_ABDIF_POSN                                   0x6
#define _U5UIR_ABDIF_POSITION                               0x6
#define _U5UIR_ABDIF_SIZE                                   0x1
#define _U5UIR_ABDIF_LENGTH                                 0x1
#define _U5UIR_ABDIF_MASK                                   0x40
#define _U5UIR_WUIF_POSN                                    0x7
#define _U5UIR_WUIF_POSITION                                0x7
#define _U5UIR_WUIF_SIZE                                    0x1
#define _U5UIR_WUIF_LENGTH                                  0x1
#define _U5UIR_WUIF_MASK                                    0x80
#define _U5UIR_U5ABDIE_POSN                                 0x2
#define _U5UIR_U5ABDIE_POSITION                             0x2
#define _U5UIR_U5ABDIE_SIZE                                 0x1
#define _U5UIR_U5ABDIE_LENGTH                               0x1
#define _U5UIR_U5ABDIE_MASK                                 0x4
#define _U5UIR_U5ABDIF_POSN                                 0x6
#define _U5UIR_U5ABDIF_POSITION                             0x6
#define _U5UIR_U5ABDIF_SIZE                                 0x1
#define _U5UIR_U5ABDIF_LENGTH                               0x1
#define _U5UIR_U5ABDIF_MASK                                 0x40
#define _U5UIR_U5WUIF_POSN                                  0x7
#define _U5UIR_U5WUIF_POSITION                              0x7
#define _U5UIR_U5WUIF_SIZE                                  0x1
#define _U5UIR_U5WUIF_LENGTH                                0x1
#define _U5UIR_U5WUIF_MASK                                  0x80

// Register: U5ERRIR
#define U5ERRIR U5ERRIR
extern volatile unsigned char           U5ERRIR             __at(0x2FE);
#ifndef _LIB_BUILD
asm("U5ERRIR equ 02FEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U5TXCIF                :1;
        unsigned U5RXFOIF               :1;
        unsigned U5RXBKIF               :1;
        unsigned U5FERIF                :1;
        unsigned U5CERIF                :1;
        unsigned U5ABDOVF               :1;
        unsigned U5PERIF                :1;
        unsigned U5TXMTIF               :1;
    };
} U5ERRIRbits_t;
extern volatile U5ERRIRbits_t U5ERRIRbits __at(0x2FE);
// bitfield macros
#define _U5ERRIR_TXCIF_POSN                                 0x0
#define _U5ERRIR_TXCIF_POSITION                             0x0
#define _U5ERRIR_TXCIF_SIZE                                 0x1
#define _U5ERRIR_TXCIF_LENGTH                               0x1
#define _U5ERRIR_TXCIF_MASK                                 0x1
#define _U5ERRIR_RXFOIF_POSN                                0x1
#define _U5ERRIR_RXFOIF_POSITION                            0x1
#define _U5ERRIR_RXFOIF_SIZE                                0x1
#define _U5ERRIR_RXFOIF_LENGTH                              0x1
#define _U5ERRIR_RXFOIF_MASK                                0x2
#define _U5ERRIR_RXBKIF_POSN                                0x2
#define _U5ERRIR_RXBKIF_POSITION                            0x2
#define _U5ERRIR_RXBKIF_SIZE                                0x1
#define _U5ERRIR_RXBKIF_LENGTH                              0x1
#define _U5ERRIR_RXBKIF_MASK                                0x4
#define _U5ERRIR_FERIF_POSN                                 0x3
#define _U5ERRIR_FERIF_POSITION                             0x3
#define _U5ERRIR_FERIF_SIZE                                 0x1
#define _U5ERRIR_FERIF_LENGTH                               0x1
#define _U5ERRIR_FERIF_MASK                                 0x8
#define _U5ERRIR_CERIF_POSN                                 0x4
#define _U5ERRIR_CERIF_POSITION                             0x4
#define _U5ERRIR_CERIF_SIZE                                 0x1
#define _U5ERRIR_CERIF_LENGTH                               0x1
#define _U5ERRIR_CERIF_MASK                                 0x10
#define _U5ERRIR_ABDOVF_POSN                                0x5
#define _U5ERRIR_ABDOVF_POSITION                            0x5
#define _U5ERRIR_ABDOVF_SIZE                                0x1
#define _U5ERRIR_ABDOVF_LENGTH                              0x1
#define _U5ERRIR_ABDOVF_MASK                                0x20
#define _U5ERRIR_PERIF_POSN                                 0x6
#define _U5ERRIR_PERIF_POSITION                             0x6
#define _U5ERRIR_PERIF_SIZE                                 0x1
#define _U5ERRIR_PERIF_LENGTH                               0x1
#define _U5ERRIR_PERIF_MASK                                 0x40
#define _U5ERRIR_TXMTIF_POSN                                0x7
#define _U5ERRIR_TXMTIF_POSITION                            0x7
#define _U5ERRIR_TXMTIF_SIZE                                0x1
#define _U5ERRIR_TXMTIF_LENGTH                              0x1
#define _U5ERRIR_TXMTIF_MASK                                0x80
#define _U5ERRIR_U5TXCIF_POSN                               0x0
#define _U5ERRIR_U5TXCIF_POSITION                           0x0
#define _U5ERRIR_U5TXCIF_SIZE                               0x1
#define _U5ERRIR_U5TXCIF_LENGTH                             0x1
#define _U5ERRIR_U5TXCIF_MASK                               0x1
#define _U5ERRIR_U5RXFOIF_POSN                              0x1
#define _U5ERRIR_U5RXFOIF_POSITION                          0x1
#define _U5ERRIR_U5RXFOIF_SIZE                              0x1
#define _U5ERRIR_U5RXFOIF_LENGTH                            0x1
#define _U5ERRIR_U5RXFOIF_MASK                              0x2
#define _U5ERRIR_U5RXBKIF_POSN                              0x2
#define _U5ERRIR_U5RXBKIF_POSITION                          0x2
#define _U5ERRIR_U5RXBKIF_SIZE                              0x1
#define _U5ERRIR_U5RXBKIF_LENGTH                            0x1
#define _U5ERRIR_U5RXBKIF_MASK                              0x4
#define _U5ERRIR_U5FERIF_POSN                               0x3
#define _U5ERRIR_U5FERIF_POSITION                           0x3
#define _U5ERRIR_U5FERIF_SIZE                               0x1
#define _U5ERRIR_U5FERIF_LENGTH                             0x1
#define _U5ERRIR_U5FERIF_MASK                               0x8
#define _U5ERRIR_U5CERIF_POSN                               0x4
#define _U5ERRIR_U5CERIF_POSITION                           0x4
#define _U5ERRIR_U5CERIF_SIZE                               0x1
#define _U5ERRIR_U5CERIF_LENGTH                             0x1
#define _U5ERRIR_U5CERIF_MASK                               0x10
#define _U5ERRIR_U5ABDOVF_POSN                              0x5
#define _U5ERRIR_U5ABDOVF_POSITION                          0x5
#define _U5ERRIR_U5ABDOVF_SIZE                              0x1
#define _U5ERRIR_U5ABDOVF_LENGTH                            0x1
#define _U5ERRIR_U5ABDOVF_MASK                              0x20
#define _U5ERRIR_U5PERIF_POSN                               0x6
#define _U5ERRIR_U5PERIF_POSITION                           0x6
#define _U5ERRIR_U5PERIF_SIZE                               0x1
#define _U5ERRIR_U5PERIF_LENGTH                             0x1
#define _U5ERRIR_U5PERIF_MASK                               0x40
#define _U5ERRIR_U5TXMTIF_POSN                              0x7
#define _U5ERRIR_U5TXMTIF_POSITION                          0x7
#define _U5ERRIR_U5TXMTIF_SIZE                              0x1
#define _U5ERRIR_U5TXMTIF_LENGTH                            0x1
#define _U5ERRIR_U5TXMTIF_MASK                              0x80

// Register: U5ERRIE
#define U5ERRIE U5ERRIE
extern volatile unsigned char           U5ERRIE             __at(0x2FF);
#ifndef _LIB_BUILD
asm("U5ERRIE equ 02FFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U5TXCIE                :1;
        unsigned U5RXFOIE               :1;
        unsigned U5RXBKIE               :1;
        unsigned U5FERIE                :1;
        unsigned U5CERIE                :1;
        unsigned U5ABDOVE               :1;
        unsigned U5PERIE                :1;
        unsigned U5TXMTIE               :1;
    };
} U5ERRIEbits_t;
extern volatile U5ERRIEbits_t U5ERRIEbits __at(0x2FF);
// bitfield macros
#define _U5ERRIE_TXCIE_POSN                                 0x0
#define _U5ERRIE_TXCIE_POSITION                             0x0
#define _U5ERRIE_TXCIE_SIZE                                 0x1
#define _U5ERRIE_TXCIE_LENGTH                               0x1
#define _U5ERRIE_TXCIE_MASK                                 0x1
#define _U5ERRIE_RXFOIE_POSN                                0x1
#define _U5ERRIE_RXFOIE_POSITION                            0x1
#define _U5ERRIE_RXFOIE_SIZE                                0x1
#define _U5ERRIE_RXFOIE_LENGTH                              0x1
#define _U5ERRIE_RXFOIE_MASK                                0x2
#define _U5ERRIE_RXBKIE_POSN                                0x2
#define _U5ERRIE_RXBKIE_POSITION                            0x2
#define _U5ERRIE_RXBKIE_SIZE                                0x1
#define _U5ERRIE_RXBKIE_LENGTH                              0x1
#define _U5ERRIE_RXBKIE_MASK                                0x4
#define _U5ERRIE_FERIE_POSN                                 0x3
#define _U5ERRIE_FERIE_POSITION                             0x3
#define _U5ERRIE_FERIE_SIZE                                 0x1
#define _U5ERRIE_FERIE_LENGTH                               0x1
#define _U5ERRIE_FERIE_MASK                                 0x8
#define _U5ERRIE_CERIE_POSN                                 0x4
#define _U5ERRIE_CERIE_POSITION                             0x4
#define _U5ERRIE_CERIE_SIZE                                 0x1
#define _U5ERRIE_CERIE_LENGTH                               0x1
#define _U5ERRIE_CERIE_MASK                                 0x10
#define _U5ERRIE_ABDOVE_POSN                                0x5
#define _U5ERRIE_ABDOVE_POSITION                            0x5
#define _U5ERRIE_ABDOVE_SIZE                                0x1
#define _U5ERRIE_ABDOVE_LENGTH                              0x1
#define _U5ERRIE_ABDOVE_MASK                                0x20
#define _U5ERRIE_PERIE_POSN                                 0x6
#define _U5ERRIE_PERIE_POSITION                             0x6
#define _U5ERRIE_PERIE_SIZE                                 0x1
#define _U5ERRIE_PERIE_LENGTH                               0x1
#define _U5ERRIE_PERIE_MASK                                 0x40
#define _U5ERRIE_TXMTIE_POSN                                0x7
#define _U5ERRIE_TXMTIE_POSITION                            0x7
#define _U5ERRIE_TXMTIE_SIZE                                0x1
#define _U5ERRIE_TXMTIE_LENGTH                              0x1
#define _U5ERRIE_TXMTIE_MASK                                0x80
#define _U5ERRIE_U5TXCIE_POSN                               0x0
#define _U5ERRIE_U5TXCIE_POSITION                           0x0
#define _U5ERRIE_U5TXCIE_SIZE                               0x1
#define _U5ERRIE_U5TXCIE_LENGTH                             0x1
#define _U5ERRIE_U5TXCIE_MASK                               0x1
#define _U5ERRIE_U5RXFOIE_POSN                              0x1
#define _U5ERRIE_U5RXFOIE_POSITION                          0x1
#define _U5ERRIE_U5RXFOIE_SIZE                              0x1
#define _U5ERRIE_U5RXFOIE_LENGTH                            0x1
#define _U5ERRIE_U5RXFOIE_MASK                              0x2
#define _U5ERRIE_U5RXBKIE_POSN                              0x2
#define _U5ERRIE_U5RXBKIE_POSITION                          0x2
#define _U5ERRIE_U5RXBKIE_SIZE                              0x1
#define _U5ERRIE_U5RXBKIE_LENGTH                            0x1
#define _U5ERRIE_U5RXBKIE_MASK                              0x4
#define _U5ERRIE_U5FERIE_POSN                               0x3
#define _U5ERRIE_U5FERIE_POSITION                           0x3
#define _U5ERRIE_U5FERIE_SIZE                               0x1
#define _U5ERRIE_U5FERIE_LENGTH                             0x1
#define _U5ERRIE_U5FERIE_MASK                               0x8
#define _U5ERRIE_U5CERIE_POSN                               0x4
#define _U5ERRIE_U5CERIE_POSITION                           0x4
#define _U5ERRIE_U5CERIE_SIZE                               0x1
#define _U5ERRIE_U5CERIE_LENGTH                             0x1
#define _U5ERRIE_U5CERIE_MASK                               0x10
#define _U5ERRIE_U5ABDOVE_POSN                              0x5
#define _U5ERRIE_U5ABDOVE_POSITION                          0x5
#define _U5ERRIE_U5ABDOVE_SIZE                              0x1
#define _U5ERRIE_U5ABDOVE_LENGTH                            0x1
#define _U5ERRIE_U5ABDOVE_MASK                              0x20
#define _U5ERRIE_U5PERIE_POSN                               0x6
#define _U5ERRIE_U5PERIE_POSITION                           0x6
#define _U5ERRIE_U5PERIE_SIZE                               0x1
#define _U5ERRIE_U5PERIE_LENGTH                             0x1
#define _U5ERRIE_U5PERIE_MASK                               0x40
#define _U5ERRIE_U5TXMTIE_POSN                              0x7
#define _U5ERRIE_U5TXMTIE_POSITION                          0x7
#define _U5ERRIE_U5TXMTIE_SIZE                              0x1
#define _U5ERRIE_U5TXMTIE_LENGTH                            0x1
#define _U5ERRIE_U5TXMTIE_MASK                              0x80

// Register: SMT1TMR
#define SMT1TMR SMT1TMR
#ifndef __CCI__
extern volatile __uint24                SMT1TMR             __at(0x300);
#endif
#ifndef _LIB_BUILD
asm("SMT1TMR equ 0300h");
#endif

// Register: SMT1TMRL
#define SMT1TMRL SMT1TMRL
extern volatile unsigned char           SMT1TMRL            __at(0x300);
#ifndef _LIB_BUILD
asm("SMT1TMRL equ 0300h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR0               :1;
        unsigned SMT1TMR1               :1;
        unsigned SMT1TMR2               :1;
        unsigned SMT1TMR3               :1;
        unsigned SMT1TMR4               :1;
        unsigned SMT1TMR5               :1;
        unsigned SMT1TMR6               :1;
        unsigned SMT1TMR7               :1;
    };
} SMT1TMRLbits_t;
extern volatile SMT1TMRLbits_t SMT1TMRLbits __at(0x300);
// bitfield macros
#define _SMT1TMRL_SMT1TMR_POSN                              0x0
#define _SMT1TMRL_SMT1TMR_POSITION                          0x0
#define _SMT1TMRL_SMT1TMR_SIZE                              0x8
#define _SMT1TMRL_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRL_SMT1TMR_MASK                              0xFF
#define _SMT1TMRL_SMT1TMR0_POSN                             0x0
#define _SMT1TMRL_SMT1TMR0_POSITION                         0x0
#define _SMT1TMRL_SMT1TMR0_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR0_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR0_MASK                             0x1
#define _SMT1TMRL_SMT1TMR1_POSN                             0x1
#define _SMT1TMRL_SMT1TMR1_POSITION                         0x1
#define _SMT1TMRL_SMT1TMR1_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR1_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR1_MASK                             0x2
#define _SMT1TMRL_SMT1TMR2_POSN                             0x2
#define _SMT1TMRL_SMT1TMR2_POSITION                         0x2
#define _SMT1TMRL_SMT1TMR2_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR2_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR2_MASK                             0x4
#define _SMT1TMRL_SMT1TMR3_POSN                             0x3
#define _SMT1TMRL_SMT1TMR3_POSITION                         0x3
#define _SMT1TMRL_SMT1TMR3_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR3_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR3_MASK                             0x8
#define _SMT1TMRL_SMT1TMR4_POSN                             0x4
#define _SMT1TMRL_SMT1TMR4_POSITION                         0x4
#define _SMT1TMRL_SMT1TMR4_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR4_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR4_MASK                             0x10
#define _SMT1TMRL_SMT1TMR5_POSN                             0x5
#define _SMT1TMRL_SMT1TMR5_POSITION                         0x5
#define _SMT1TMRL_SMT1TMR5_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR5_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR5_MASK                             0x20
#define _SMT1TMRL_SMT1TMR6_POSN                             0x6
#define _SMT1TMRL_SMT1TMR6_POSITION                         0x6
#define _SMT1TMRL_SMT1TMR6_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR6_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR6_MASK                             0x40
#define _SMT1TMRL_SMT1TMR7_POSN                             0x7
#define _SMT1TMRL_SMT1TMR7_POSITION                         0x7
#define _SMT1TMRL_SMT1TMR7_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR7_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR7_MASK                             0x80

// Register: SMT1TMRH
#define SMT1TMRH SMT1TMRH
extern volatile unsigned char           SMT1TMRH            __at(0x301);
#ifndef _LIB_BUILD
asm("SMT1TMRH equ 0301h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR8               :1;
        unsigned SMT1TMR9               :1;
        unsigned SMT1TMR10              :1;
        unsigned SMT1TMR11              :1;
        unsigned SMT1TMR12              :1;
        unsigned SMT1TMR13              :1;
        unsigned SMT1TMR14              :1;
        unsigned SMT1TMR15              :1;
    };
} SMT1TMRHbits_t;
extern volatile SMT1TMRHbits_t SMT1TMRHbits __at(0x301);
// bitfield macros
#define _SMT1TMRH_SMT1TMR_POSN                              0x0
#define _SMT1TMRH_SMT1TMR_POSITION                          0x0
#define _SMT1TMRH_SMT1TMR_SIZE                              0x8
#define _SMT1TMRH_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRH_SMT1TMR_MASK                              0xFF
#define _SMT1TMRH_SMT1TMR8_POSN                             0x0
#define _SMT1TMRH_SMT1TMR8_POSITION                         0x0
#define _SMT1TMRH_SMT1TMR8_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR8_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR8_MASK                             0x1
#define _SMT1TMRH_SMT1TMR9_POSN                             0x1
#define _SMT1TMRH_SMT1TMR9_POSITION                         0x1
#define _SMT1TMRH_SMT1TMR9_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR9_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR9_MASK                             0x2
#define _SMT1TMRH_SMT1TMR10_POSN                            0x2
#define _SMT1TMRH_SMT1TMR10_POSITION                        0x2
#define _SMT1TMRH_SMT1TMR10_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR10_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR10_MASK                            0x4
#define _SMT1TMRH_SMT1TMR11_POSN                            0x3
#define _SMT1TMRH_SMT1TMR11_POSITION                        0x3
#define _SMT1TMRH_SMT1TMR11_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR11_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR11_MASK                            0x8
#define _SMT1TMRH_SMT1TMR12_POSN                            0x4
#define _SMT1TMRH_SMT1TMR12_POSITION                        0x4
#define _SMT1TMRH_SMT1TMR12_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR12_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR12_MASK                            0x10
#define _SMT1TMRH_SMT1TMR13_POSN                            0x5
#define _SMT1TMRH_SMT1TMR13_POSITION                        0x5
#define _SMT1TMRH_SMT1TMR13_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR13_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR13_MASK                            0x20
#define _SMT1TMRH_SMT1TMR14_POSN                            0x6
#define _SMT1TMRH_SMT1TMR14_POSITION                        0x6
#define _SMT1TMRH_SMT1TMR14_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR14_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR14_MASK                            0x40
#define _SMT1TMRH_SMT1TMR15_POSN                            0x7
#define _SMT1TMRH_SMT1TMR15_POSITION                        0x7
#define _SMT1TMRH_SMT1TMR15_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR15_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR15_MASK                            0x80

// Register: SMT1TMRU
#define SMT1TMRU SMT1TMRU
extern volatile unsigned char           SMT1TMRU            __at(0x302);
#ifndef _LIB_BUILD
asm("SMT1TMRU equ 0302h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR16              :1;
        unsigned SMT1TMR17              :1;
        unsigned SMT1TMR18              :1;
        unsigned SMT1TMR19              :1;
        unsigned SMT1TMR20              :1;
        unsigned SMT1TMR21              :1;
        unsigned SMT1TMR22              :1;
        unsigned SMT1TMR23              :1;
    };
} SMT1TMRUbits_t;
extern volatile SMT1TMRUbits_t SMT1TMRUbits __at(0x302);
// bitfield macros
#define _SMT1TMRU_SMT1TMR_POSN                              0x0
#define _SMT1TMRU_SMT1TMR_POSITION                          0x0
#define _SMT1TMRU_SMT1TMR_SIZE                              0x8
#define _SMT1TMRU_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRU_SMT1TMR_MASK                              0xFF
#define _SMT1TMRU_SMT1TMR16_POSN                            0x0
#define _SMT1TMRU_SMT1TMR16_POSITION                        0x0
#define _SMT1TMRU_SMT1TMR16_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR16_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR16_MASK                            0x1
#define _SMT1TMRU_SMT1TMR17_POSN                            0x1
#define _SMT1TMRU_SMT1TMR17_POSITION                        0x1
#define _SMT1TMRU_SMT1TMR17_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR17_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR17_MASK                            0x2
#define _SMT1TMRU_SMT1TMR18_POSN                            0x2
#define _SMT1TMRU_SMT1TMR18_POSITION                        0x2
#define _SMT1TMRU_SMT1TMR18_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR18_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR18_MASK                            0x4
#define _SMT1TMRU_SMT1TMR19_POSN                            0x3
#define _SMT1TMRU_SMT1TMR19_POSITION                        0x3
#define _SMT1TMRU_SMT1TMR19_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR19_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR19_MASK                            0x8
#define _SMT1TMRU_SMT1TMR20_POSN                            0x4
#define _SMT1TMRU_SMT1TMR20_POSITION                        0x4
#define _SMT1TMRU_SMT1TMR20_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR20_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR20_MASK                            0x10
#define _SMT1TMRU_SMT1TMR21_POSN                            0x5
#define _SMT1TMRU_SMT1TMR21_POSITION                        0x5
#define _SMT1TMRU_SMT1TMR21_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR21_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR21_MASK                            0x20
#define _SMT1TMRU_SMT1TMR22_POSN                            0x6
#define _SMT1TMRU_SMT1TMR22_POSITION                        0x6
#define _SMT1TMRU_SMT1TMR22_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR22_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR22_MASK                            0x40
#define _SMT1TMRU_SMT1TMR23_POSN                            0x7
#define _SMT1TMRU_SMT1TMR23_POSITION                        0x7
#define _SMT1TMRU_SMT1TMR23_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR23_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR23_MASK                            0x80

// Register: SMT1CPR
#define SMT1CPR SMT1CPR
#ifndef __CCI__
extern volatile __uint24                SMT1CPR             __at(0x303);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPR equ 0303h");
#endif

// Register: SMT1CPRL
#define SMT1CPRL SMT1CPRL
extern volatile unsigned char           SMT1CPRL            __at(0x303);
#ifndef _LIB_BUILD
asm("SMT1CPRL equ 0303h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR0               :1;
        unsigned SMT1CPR1               :1;
        unsigned SMT1CPR2               :1;
        unsigned SMT1CPR3               :1;
        unsigned SMT1CPR4               :1;
        unsigned SMT1CPR5               :1;
        unsigned SMT1CPR6               :1;
        unsigned SMT1CPR7               :1;
    };
} SMT1CPRLbits_t;
extern volatile SMT1CPRLbits_t SMT1CPRLbits __at(0x303);
// bitfield macros
#define _SMT1CPRL_SMT1CPR_POSN                              0x0
#define _SMT1CPRL_SMT1CPR_POSITION                          0x0
#define _SMT1CPRL_SMT1CPR_SIZE                              0x8
#define _SMT1CPRL_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRL_SMT1CPR_MASK                              0xFF
#define _SMT1CPRL_SMT1CPR0_POSN                             0x0
#define _SMT1CPRL_SMT1CPR0_POSITION                         0x0
#define _SMT1CPRL_SMT1CPR0_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR0_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR0_MASK                             0x1
#define _SMT1CPRL_SMT1CPR1_POSN                             0x1
#define _SMT1CPRL_SMT1CPR1_POSITION                         0x1
#define _SMT1CPRL_SMT1CPR1_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR1_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR1_MASK                             0x2
#define _SMT1CPRL_SMT1CPR2_POSN                             0x2
#define _SMT1CPRL_SMT1CPR2_POSITION                         0x2
#define _SMT1CPRL_SMT1CPR2_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR2_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR2_MASK                             0x4
#define _SMT1CPRL_SMT1CPR3_POSN                             0x3
#define _SMT1CPRL_SMT1CPR3_POSITION                         0x3
#define _SMT1CPRL_SMT1CPR3_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR3_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR3_MASK                             0x8
#define _SMT1CPRL_SMT1CPR4_POSN                             0x4
#define _SMT1CPRL_SMT1CPR4_POSITION                         0x4
#define _SMT1CPRL_SMT1CPR4_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR4_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR4_MASK                             0x10
#define _SMT1CPRL_SMT1CPR5_POSN                             0x5
#define _SMT1CPRL_SMT1CPR5_POSITION                         0x5
#define _SMT1CPRL_SMT1CPR5_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR5_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR5_MASK                             0x20
#define _SMT1CPRL_SMT1CPR6_POSN                             0x6
#define _SMT1CPRL_SMT1CPR6_POSITION                         0x6
#define _SMT1CPRL_SMT1CPR6_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR6_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR6_MASK                             0x40
#define _SMT1CPRL_SMT1CPR7_POSN                             0x7
#define _SMT1CPRL_SMT1CPR7_POSITION                         0x7
#define _SMT1CPRL_SMT1CPR7_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR7_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR7_MASK                             0x80

// Register: SMT1CPRH
#define SMT1CPRH SMT1CPRH
extern volatile unsigned char           SMT1CPRH            __at(0x304);
#ifndef _LIB_BUILD
asm("SMT1CPRH equ 0304h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR8               :1;
        unsigned SMT1CPR9               :1;
        unsigned SMT1CPR10              :1;
        unsigned SMT1CPR11              :1;
        unsigned SMT1CPR12              :1;
        unsigned SMT1CPR13              :1;
        unsigned SMT1CPR14              :1;
        unsigned SMT1CPR15              :1;
    };
} SMT1CPRHbits_t;
extern volatile SMT1CPRHbits_t SMT1CPRHbits __at(0x304);
// bitfield macros
#define _SMT1CPRH_SMT1CPR_POSN                              0x0
#define _SMT1CPRH_SMT1CPR_POSITION                          0x0
#define _SMT1CPRH_SMT1CPR_SIZE                              0x8
#define _SMT1CPRH_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRH_SMT1CPR_MASK                              0xFF
#define _SMT1CPRH_SMT1CPR8_POSN                             0x0
#define _SMT1CPRH_SMT1CPR8_POSITION                         0x0
#define _SMT1CPRH_SMT1CPR8_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR8_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR8_MASK                             0x1
#define _SMT1CPRH_SMT1CPR9_POSN                             0x1
#define _SMT1CPRH_SMT1CPR9_POSITION                         0x1
#define _SMT1CPRH_SMT1CPR9_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR9_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR9_MASK                             0x2
#define _SMT1CPRH_SMT1CPR10_POSN                            0x2
#define _SMT1CPRH_SMT1CPR10_POSITION                        0x2
#define _SMT1CPRH_SMT1CPR10_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR10_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR10_MASK                            0x4
#define _SMT1CPRH_SMT1CPR11_POSN                            0x3
#define _SMT1CPRH_SMT1CPR11_POSITION                        0x3
#define _SMT1CPRH_SMT1CPR11_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR11_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR11_MASK                            0x8
#define _SMT1CPRH_SMT1CPR12_POSN                            0x4
#define _SMT1CPRH_SMT1CPR12_POSITION                        0x4
#define _SMT1CPRH_SMT1CPR12_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR12_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR12_MASK                            0x10
#define _SMT1CPRH_SMT1CPR13_POSN                            0x5
#define _SMT1CPRH_SMT1CPR13_POSITION                        0x5
#define _SMT1CPRH_SMT1CPR13_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR13_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR13_MASK                            0x20
#define _SMT1CPRH_SMT1CPR14_POSN                            0x6
#define _SMT1CPRH_SMT1CPR14_POSITION                        0x6
#define _SMT1CPRH_SMT1CPR14_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR14_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR14_MASK                            0x40
#define _SMT1CPRH_SMT1CPR15_POSN                            0x7
#define _SMT1CPRH_SMT1CPR15_POSITION                        0x7
#define _SMT1CPRH_SMT1CPR15_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR15_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR15_MASK                            0x80

// Register: SMT1CPRU
#define SMT1CPRU SMT1CPRU
extern volatile unsigned char           SMT1CPRU            __at(0x305);
#ifndef _LIB_BUILD
asm("SMT1CPRU equ 0305h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR16              :1;
        unsigned SMT1CPR17              :1;
        unsigned SMT1CPR18              :1;
        unsigned SMT1CPR19              :1;
        unsigned SMT1CPR20              :1;
        unsigned SMT1CPR21              :1;
        unsigned SMT1CPR22              :1;
        unsigned SMT1CPR23              :1;
    };
} SMT1CPRUbits_t;
extern volatile SMT1CPRUbits_t SMT1CPRUbits __at(0x305);
// bitfield macros
#define _SMT1CPRU_SMT1CPR_POSN                              0x0
#define _SMT1CPRU_SMT1CPR_POSITION                          0x0
#define _SMT1CPRU_SMT1CPR_SIZE                              0x8
#define _SMT1CPRU_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRU_SMT1CPR_MASK                              0xFF
#define _SMT1CPRU_SMT1CPR16_POSN                            0x0
#define _SMT1CPRU_SMT1CPR16_POSITION                        0x0
#define _SMT1CPRU_SMT1CPR16_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR16_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR16_MASK                            0x1
#define _SMT1CPRU_SMT1CPR17_POSN                            0x1
#define _SMT1CPRU_SMT1CPR17_POSITION                        0x1
#define _SMT1CPRU_SMT1CPR17_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR17_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR17_MASK                            0x2
#define _SMT1CPRU_SMT1CPR18_POSN                            0x2
#define _SMT1CPRU_SMT1CPR18_POSITION                        0x2
#define _SMT1CPRU_SMT1CPR18_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR18_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR18_MASK                            0x4
#define _SMT1CPRU_SMT1CPR19_POSN                            0x3
#define _SMT1CPRU_SMT1CPR19_POSITION                        0x3
#define _SMT1CPRU_SMT1CPR19_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR19_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR19_MASK                            0x8
#define _SMT1CPRU_SMT1CPR20_POSN                            0x4
#define _SMT1CPRU_SMT1CPR20_POSITION                        0x4
#define _SMT1CPRU_SMT1CPR20_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR20_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR20_MASK                            0x10
#define _SMT1CPRU_SMT1CPR21_POSN                            0x5
#define _SMT1CPRU_SMT1CPR21_POSITION                        0x5
#define _SMT1CPRU_SMT1CPR21_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR21_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR21_MASK                            0x20
#define _SMT1CPRU_SMT1CPR22_POSN                            0x6
#define _SMT1CPRU_SMT1CPR22_POSITION                        0x6
#define _SMT1CPRU_SMT1CPR22_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR22_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR22_MASK                            0x40
#define _SMT1CPRU_SMT1CPR23_POSN                            0x7
#define _SMT1CPRU_SMT1CPR23_POSITION                        0x7
#define _SMT1CPRU_SMT1CPR23_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR23_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR23_MASK                            0x80

// Register: SMT1CPW
#define SMT1CPW SMT1CPW
#ifndef __CCI__
extern volatile __uint24                SMT1CPW             __at(0x306);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPW equ 0306h");
#endif

// Register: SMT1CPWL
#define SMT1CPWL SMT1CPWL
extern volatile unsigned char           SMT1CPWL            __at(0x306);
#ifndef _LIB_BUILD
asm("SMT1CPWL equ 0306h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW0               :1;
        unsigned SMT1CPW1               :1;
        unsigned SMT1CPW2               :1;
        unsigned SMT1CPW3               :1;
        unsigned SMT1CPW4               :1;
        unsigned SMT1CPW5               :1;
        unsigned SMT1CPW6               :1;
        unsigned SMT1CPW7               :1;
    };
} SMT1CPWLbits_t;
extern volatile SMT1CPWLbits_t SMT1CPWLbits __at(0x306);
// bitfield macros
#define _SMT1CPWL_SMT1CPW_POSN                              0x0
#define _SMT1CPWL_SMT1CPW_POSITION                          0x0
#define _SMT1CPWL_SMT1CPW_SIZE                              0x8
#define _SMT1CPWL_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWL_SMT1CPW_MASK                              0xFF
#define _SMT1CPWL_SMT1CPW0_POSN                             0x0
#define _SMT1CPWL_SMT1CPW0_POSITION                         0x0
#define _SMT1CPWL_SMT1CPW0_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW0_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW0_MASK                             0x1
#define _SMT1CPWL_SMT1CPW1_POSN                             0x1
#define _SMT1CPWL_SMT1CPW1_POSITION                         0x1
#define _SMT1CPWL_SMT1CPW1_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW1_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW1_MASK                             0x2
#define _SMT1CPWL_SMT1CPW2_POSN                             0x2
#define _SMT1CPWL_SMT1CPW2_POSITION                         0x2
#define _SMT1CPWL_SMT1CPW2_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW2_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW2_MASK                             0x4
#define _SMT1CPWL_SMT1CPW3_POSN                             0x3
#define _SMT1CPWL_SMT1CPW3_POSITION                         0x3
#define _SMT1CPWL_SMT1CPW3_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW3_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW3_MASK                             0x8
#define _SMT1CPWL_SMT1CPW4_POSN                             0x4
#define _SMT1CPWL_SMT1CPW4_POSITION                         0x4
#define _SMT1CPWL_SMT1CPW4_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW4_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW4_MASK                             0x10
#define _SMT1CPWL_SMT1CPW5_POSN                             0x5
#define _SMT1CPWL_SMT1CPW5_POSITION                         0x5
#define _SMT1CPWL_SMT1CPW5_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW5_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW5_MASK                             0x20
#define _SMT1CPWL_SMT1CPW6_POSN                             0x6
#define _SMT1CPWL_SMT1CPW6_POSITION                         0x6
#define _SMT1CPWL_SMT1CPW6_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW6_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW6_MASK                             0x40
#define _SMT1CPWL_SMT1CPW7_POSN                             0x7
#define _SMT1CPWL_SMT1CPW7_POSITION                         0x7
#define _SMT1CPWL_SMT1CPW7_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW7_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW7_MASK                             0x80

// Register: SMT1CPWH
#define SMT1CPWH SMT1CPWH
extern volatile unsigned char           SMT1CPWH            __at(0x307);
#ifndef _LIB_BUILD
asm("SMT1CPWH equ 0307h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW8               :1;
        unsigned SMT1CPW9               :1;
        unsigned SMT1CPW10              :1;
        unsigned SMT1CPW11              :1;
        unsigned SMT1CPW12              :1;
        unsigned SMT1CPW13              :1;
        unsigned SMT1CPW14              :1;
        unsigned SMT1CPW15              :1;
    };
} SMT1CPWHbits_t;
extern volatile SMT1CPWHbits_t SMT1CPWHbits __at(0x307);
// bitfield macros
#define _SMT1CPWH_SMT1CPW_POSN                              0x0
#define _SMT1CPWH_SMT1CPW_POSITION                          0x0
#define _SMT1CPWH_SMT1CPW_SIZE                              0x8
#define _SMT1CPWH_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWH_SMT1CPW_MASK                              0xFF
#define _SMT1CPWH_SMT1CPW8_POSN                             0x0
#define _SMT1CPWH_SMT1CPW8_POSITION                         0x0
#define _SMT1CPWH_SMT1CPW8_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW8_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW8_MASK                             0x1
#define _SMT1CPWH_SMT1CPW9_POSN                             0x1
#define _SMT1CPWH_SMT1CPW9_POSITION                         0x1
#define _SMT1CPWH_SMT1CPW9_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW9_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW9_MASK                             0x2
#define _SMT1CPWH_SMT1CPW10_POSN                            0x2
#define _SMT1CPWH_SMT1CPW10_POSITION                        0x2
#define _SMT1CPWH_SMT1CPW10_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW10_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW10_MASK                            0x4
#define _SMT1CPWH_SMT1CPW11_POSN                            0x3
#define _SMT1CPWH_SMT1CPW11_POSITION                        0x3
#define _SMT1CPWH_SMT1CPW11_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW11_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW11_MASK                            0x8
#define _SMT1CPWH_SMT1CPW12_POSN                            0x4
#define _SMT1CPWH_SMT1CPW12_POSITION                        0x4
#define _SMT1CPWH_SMT1CPW12_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW12_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW12_MASK                            0x10
#define _SMT1CPWH_SMT1CPW13_POSN                            0x5
#define _SMT1CPWH_SMT1CPW13_POSITION                        0x5
#define _SMT1CPWH_SMT1CPW13_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW13_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW13_MASK                            0x20
#define _SMT1CPWH_SMT1CPW14_POSN                            0x6
#define _SMT1CPWH_SMT1CPW14_POSITION                        0x6
#define _SMT1CPWH_SMT1CPW14_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW14_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW14_MASK                            0x40
#define _SMT1CPWH_SMT1CPW15_POSN                            0x7
#define _SMT1CPWH_SMT1CPW15_POSITION                        0x7
#define _SMT1CPWH_SMT1CPW15_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW15_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW15_MASK                            0x80

// Register: SMT1CPWU
#define SMT1CPWU SMT1CPWU
extern volatile unsigned char           SMT1CPWU            __at(0x308);
#ifndef _LIB_BUILD
asm("SMT1CPWU equ 0308h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW16              :1;
        unsigned SMT1CPW17              :1;
        unsigned SMT1CPW18              :1;
        unsigned SMT1CPW19              :1;
        unsigned SMT1CPW20              :1;
        unsigned SMT1CPW21              :1;
        unsigned SMT1CPW22              :1;
        unsigned SMT1CPW23              :1;
    };
} SMT1CPWUbits_t;
extern volatile SMT1CPWUbits_t SMT1CPWUbits __at(0x308);
// bitfield macros
#define _SMT1CPWU_SMT1CPW_POSN                              0x0
#define _SMT1CPWU_SMT1CPW_POSITION                          0x0
#define _SMT1CPWU_SMT1CPW_SIZE                              0x8
#define _SMT1CPWU_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWU_SMT1CPW_MASK                              0xFF
#define _SMT1CPWU_SMT1CPW16_POSN                            0x0
#define _SMT1CPWU_SMT1CPW16_POSITION                        0x0
#define _SMT1CPWU_SMT1CPW16_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW16_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW16_MASK                            0x1
#define _SMT1CPWU_SMT1CPW17_POSN                            0x1
#define _SMT1CPWU_SMT1CPW17_POSITION                        0x1
#define _SMT1CPWU_SMT1CPW17_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW17_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW17_MASK                            0x2
#define _SMT1CPWU_SMT1CPW18_POSN                            0x2
#define _SMT1CPWU_SMT1CPW18_POSITION                        0x2
#define _SMT1CPWU_SMT1CPW18_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW18_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW18_MASK                            0x4
#define _SMT1CPWU_SMT1CPW19_POSN                            0x3
#define _SMT1CPWU_SMT1CPW19_POSITION                        0x3
#define _SMT1CPWU_SMT1CPW19_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW19_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW19_MASK                            0x8
#define _SMT1CPWU_SMT1CPW20_POSN                            0x4
#define _SMT1CPWU_SMT1CPW20_POSITION                        0x4
#define _SMT1CPWU_SMT1CPW20_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW20_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW20_MASK                            0x10
#define _SMT1CPWU_SMT1CPW21_POSN                            0x5
#define _SMT1CPWU_SMT1CPW21_POSITION                        0x5
#define _SMT1CPWU_SMT1CPW21_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW21_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW21_MASK                            0x20
#define _SMT1CPWU_SMT1CPW22_POSN                            0x6
#define _SMT1CPWU_SMT1CPW22_POSITION                        0x6
#define _SMT1CPWU_SMT1CPW22_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW22_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW22_MASK                            0x40
#define _SMT1CPWU_SMT1CPW23_POSN                            0x7
#define _SMT1CPWU_SMT1CPW23_POSITION                        0x7
#define _SMT1CPWU_SMT1CPW23_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW23_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW23_MASK                            0x80

// Register: SMT1PR
#define SMT1PR SMT1PR
#ifndef __CCI__
extern volatile __uint24                SMT1PR              __at(0x309);
#endif
#ifndef _LIB_BUILD
asm("SMT1PR equ 0309h");
#endif

// Register: SMT1PRL
#define SMT1PRL SMT1PRL
extern volatile unsigned char           SMT1PRL             __at(0x309);
#ifndef _LIB_BUILD
asm("SMT1PRL equ 0309h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR0                :1;
        unsigned SMT1PR1                :1;
        unsigned SMT1PR2                :1;
        unsigned SMT1PR3                :1;
        unsigned SMT1PR4                :1;
        unsigned SMT1PR5                :1;
        unsigned SMT1PR6                :1;
        unsigned SMT1PR7                :1;
    };
} SMT1PRLbits_t;
extern volatile SMT1PRLbits_t SMT1PRLbits __at(0x309);
// bitfield macros
#define _SMT1PRL_SMT1PR_POSN                                0x0
#define _SMT1PRL_SMT1PR_POSITION                            0x0
#define _SMT1PRL_SMT1PR_SIZE                                0x8
#define _SMT1PRL_SMT1PR_LENGTH                              0x8
#define _SMT1PRL_SMT1PR_MASK                                0xFF
#define _SMT1PRL_SMT1PR0_POSN                               0x0
#define _SMT1PRL_SMT1PR0_POSITION                           0x0
#define _SMT1PRL_SMT1PR0_SIZE                               0x1
#define _SMT1PRL_SMT1PR0_LENGTH                             0x1
#define _SMT1PRL_SMT1PR0_MASK                               0x1
#define _SMT1PRL_SMT1PR1_POSN                               0x1
#define _SMT1PRL_SMT1PR1_POSITION                           0x1
#define _SMT1PRL_SMT1PR1_SIZE                               0x1
#define _SMT1PRL_SMT1PR1_LENGTH                             0x1
#define _SMT1PRL_SMT1PR1_MASK                               0x2
#define _SMT1PRL_SMT1PR2_POSN                               0x2
#define _SMT1PRL_SMT1PR2_POSITION                           0x2
#define _SMT1PRL_SMT1PR2_SIZE                               0x1
#define _SMT1PRL_SMT1PR2_LENGTH                             0x1
#define _SMT1PRL_SMT1PR2_MASK                               0x4
#define _SMT1PRL_SMT1PR3_POSN                               0x3
#define _SMT1PRL_SMT1PR3_POSITION                           0x3
#define _SMT1PRL_SMT1PR3_SIZE                               0x1
#define _SMT1PRL_SMT1PR3_LENGTH                             0x1
#define _SMT1PRL_SMT1PR3_MASK                               0x8
#define _SMT1PRL_SMT1PR4_POSN                               0x4
#define _SMT1PRL_SMT1PR4_POSITION                           0x4
#define _SMT1PRL_SMT1PR4_SIZE                               0x1
#define _SMT1PRL_SMT1PR4_LENGTH                             0x1
#define _SMT1PRL_SMT1PR4_MASK                               0x10
#define _SMT1PRL_SMT1PR5_POSN                               0x5
#define _SMT1PRL_SMT1PR5_POSITION                           0x5
#define _SMT1PRL_SMT1PR5_SIZE                               0x1
#define _SMT1PRL_SMT1PR5_LENGTH                             0x1
#define _SMT1PRL_SMT1PR5_MASK                               0x20
#define _SMT1PRL_SMT1PR6_POSN                               0x6
#define _SMT1PRL_SMT1PR6_POSITION                           0x6
#define _SMT1PRL_SMT1PR6_SIZE                               0x1
#define _SMT1PRL_SMT1PR6_LENGTH                             0x1
#define _SMT1PRL_SMT1PR6_MASK                               0x40
#define _SMT1PRL_SMT1PR7_POSN                               0x7
#define _SMT1PRL_SMT1PR7_POSITION                           0x7
#define _SMT1PRL_SMT1PR7_SIZE                               0x1
#define _SMT1PRL_SMT1PR7_LENGTH                             0x1
#define _SMT1PRL_SMT1PR7_MASK                               0x80

// Register: SMT1PRH
#define SMT1PRH SMT1PRH
extern volatile unsigned char           SMT1PRH             __at(0x30A);
#ifndef _LIB_BUILD
asm("SMT1PRH equ 030Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR8                :1;
        unsigned SMT1PR9                :1;
        unsigned SMT1PR10               :1;
        unsigned SMT1PR11               :1;
        unsigned SMT1PR12               :1;
        unsigned SMT1PR13               :1;
        unsigned SMT1PR14               :1;
        unsigned SMT1PR15               :1;
    };
} SMT1PRHbits_t;
extern volatile SMT1PRHbits_t SMT1PRHbits __at(0x30A);
// bitfield macros
#define _SMT1PRH_SMT1PR_POSN                                0x0
#define _SMT1PRH_SMT1PR_POSITION                            0x0
#define _SMT1PRH_SMT1PR_SIZE                                0x8
#define _SMT1PRH_SMT1PR_LENGTH                              0x8
#define _SMT1PRH_SMT1PR_MASK                                0xFF
#define _SMT1PRH_SMT1PR8_POSN                               0x0
#define _SMT1PRH_SMT1PR8_POSITION                           0x0
#define _SMT1PRH_SMT1PR8_SIZE                               0x1
#define _SMT1PRH_SMT1PR8_LENGTH                             0x1
#define _SMT1PRH_SMT1PR8_MASK                               0x1
#define _SMT1PRH_SMT1PR9_POSN                               0x1
#define _SMT1PRH_SMT1PR9_POSITION                           0x1
#define _SMT1PRH_SMT1PR9_SIZE                               0x1
#define _SMT1PRH_SMT1PR9_LENGTH                             0x1
#define _SMT1PRH_SMT1PR9_MASK                               0x2
#define _SMT1PRH_SMT1PR10_POSN                              0x2
#define _SMT1PRH_SMT1PR10_POSITION                          0x2
#define _SMT1PRH_SMT1PR10_SIZE                              0x1
#define _SMT1PRH_SMT1PR10_LENGTH                            0x1
#define _SMT1PRH_SMT1PR10_MASK                              0x4
#define _SMT1PRH_SMT1PR11_POSN                              0x3
#define _SMT1PRH_SMT1PR11_POSITION                          0x3
#define _SMT1PRH_SMT1PR11_SIZE                              0x1
#define _SMT1PRH_SMT1PR11_LENGTH                            0x1
#define _SMT1PRH_SMT1PR11_MASK                              0x8
#define _SMT1PRH_SMT1PR12_POSN                              0x4
#define _SMT1PRH_SMT1PR12_POSITION                          0x4
#define _SMT1PRH_SMT1PR12_SIZE                              0x1
#define _SMT1PRH_SMT1PR12_LENGTH                            0x1
#define _SMT1PRH_SMT1PR12_MASK                              0x10
#define _SMT1PRH_SMT1PR13_POSN                              0x5
#define _SMT1PRH_SMT1PR13_POSITION                          0x5
#define _SMT1PRH_SMT1PR13_SIZE                              0x1
#define _SMT1PRH_SMT1PR13_LENGTH                            0x1
#define _SMT1PRH_SMT1PR13_MASK                              0x20
#define _SMT1PRH_SMT1PR14_POSN                              0x6
#define _SMT1PRH_SMT1PR14_POSITION                          0x6
#define _SMT1PRH_SMT1PR14_SIZE                              0x1
#define _SMT1PRH_SMT1PR14_LENGTH                            0x1
#define _SMT1PRH_SMT1PR14_MASK                              0x40
#define _SMT1PRH_SMT1PR15_POSN                              0x7
#define _SMT1PRH_SMT1PR15_POSITION                          0x7
#define _SMT1PRH_SMT1PR15_SIZE                              0x1
#define _SMT1PRH_SMT1PR15_LENGTH                            0x1
#define _SMT1PRH_SMT1PR15_MASK                              0x80

// Register: SMT1PRU
#define SMT1PRU SMT1PRU
extern volatile unsigned char           SMT1PRU             __at(0x30B);
#ifndef _LIB_BUILD
asm("SMT1PRU equ 030Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR16               :1;
        unsigned SMT1PR17               :1;
        unsigned SMT1PR18               :1;
        unsigned SMT1PR19               :1;
        unsigned SMT1PR20               :1;
        unsigned SMT1PR21               :1;
        unsigned SMT1PR22               :1;
        unsigned SMT1PR23               :1;
    };
} SMT1PRUbits_t;
extern volatile SMT1PRUbits_t SMT1PRUbits __at(0x30B);
// bitfield macros
#define _SMT1PRU_SMT1PR_POSN                                0x0
#define _SMT1PRU_SMT1PR_POSITION                            0x0
#define _SMT1PRU_SMT1PR_SIZE                                0x8
#define _SMT1PRU_SMT1PR_LENGTH                              0x8
#define _SMT1PRU_SMT1PR_MASK                                0xFF
#define _SMT1PRU_SMT1PR16_POSN                              0x0
#define _SMT1PRU_SMT1PR16_POSITION                          0x0
#define _SMT1PRU_SMT1PR16_SIZE                              0x1
#define _SMT1PRU_SMT1PR16_LENGTH                            0x1
#define _SMT1PRU_SMT1PR16_MASK                              0x1
#define _SMT1PRU_SMT1PR17_POSN                              0x1
#define _SMT1PRU_SMT1PR17_POSITION                          0x1
#define _SMT1PRU_SMT1PR17_SIZE                              0x1
#define _SMT1PRU_SMT1PR17_LENGTH                            0x1
#define _SMT1PRU_SMT1PR17_MASK                              0x2
#define _SMT1PRU_SMT1PR18_POSN                              0x2
#define _SMT1PRU_SMT1PR18_POSITION                          0x2
#define _SMT1PRU_SMT1PR18_SIZE                              0x1
#define _SMT1PRU_SMT1PR18_LENGTH                            0x1
#define _SMT1PRU_SMT1PR18_MASK                              0x4
#define _SMT1PRU_SMT1PR19_POSN                              0x3
#define _SMT1PRU_SMT1PR19_POSITION                          0x3
#define _SMT1PRU_SMT1PR19_SIZE                              0x1
#define _SMT1PRU_SMT1PR19_LENGTH                            0x1
#define _SMT1PRU_SMT1PR19_MASK                              0x8
#define _SMT1PRU_SMT1PR20_POSN                              0x4
#define _SMT1PRU_SMT1PR20_POSITION                          0x4
#define _SMT1PRU_SMT1PR20_SIZE                              0x1
#define _SMT1PRU_SMT1PR20_LENGTH                            0x1
#define _SMT1PRU_SMT1PR20_MASK                              0x10
#define _SMT1PRU_SMT1PR21_POSN                              0x5
#define _SMT1PRU_SMT1PR21_POSITION                          0x5
#define _SMT1PRU_SMT1PR21_SIZE                              0x1
#define _SMT1PRU_SMT1PR21_LENGTH                            0x1
#define _SMT1PRU_SMT1PR21_MASK                              0x20
#define _SMT1PRU_SMT1PR22_POSN                              0x6
#define _SMT1PRU_SMT1PR22_POSITION                          0x6
#define _SMT1PRU_SMT1PR22_SIZE                              0x1
#define _SMT1PRU_SMT1PR22_LENGTH                            0x1
#define _SMT1PRU_SMT1PR22_MASK                              0x40
#define _SMT1PRU_SMT1PR23_POSN                              0x7
#define _SMT1PRU_SMT1PR23_POSITION                          0x7
#define _SMT1PRU_SMT1PR23_SIZE                              0x1
#define _SMT1PRU_SMT1PR23_LENGTH                            0x1
#define _SMT1PRU_SMT1PR23_MASK                              0x80

// Register: SMT1CON0
#define SMT1CON0 SMT1CON0
extern volatile unsigned char           SMT1CON0            __at(0x30C);
#ifndef _LIB_BUILD
asm("SMT1CON0 equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PS                 :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT1PS0                :1;
        unsigned SMT1PS1                :1;
    };
} SMT1CON0bits_t;
extern volatile SMT1CON0bits_t SMT1CON0bits __at(0x30C);
// bitfield macros
#define _SMT1CON0_SMT1PS_POSN                               0x0
#define _SMT1CON0_SMT1PS_POSITION                           0x0
#define _SMT1CON0_SMT1PS_SIZE                               0x2
#define _SMT1CON0_SMT1PS_LENGTH                             0x2
#define _SMT1CON0_SMT1PS_MASK                               0x3
#define _SMT1CON0_CPOL_POSN                                 0x2
#define _SMT1CON0_CPOL_POSITION                             0x2
#define _SMT1CON0_CPOL_SIZE                                 0x1
#define _SMT1CON0_CPOL_LENGTH                               0x1
#define _SMT1CON0_CPOL_MASK                                 0x4
#define _SMT1CON0_SPOL_POSN                                 0x3
#define _SMT1CON0_SPOL_POSITION                             0x3
#define _SMT1CON0_SPOL_SIZE                                 0x1
#define _SMT1CON0_SPOL_LENGTH                               0x1
#define _SMT1CON0_SPOL_MASK                                 0x8
#define _SMT1CON0_WPOL_POSN                                 0x4
#define _SMT1CON0_WPOL_POSITION                             0x4
#define _SMT1CON0_WPOL_SIZE                                 0x1
#define _SMT1CON0_WPOL_LENGTH                               0x1
#define _SMT1CON0_WPOL_MASK                                 0x10
#define _SMT1CON0_STP_POSN                                  0x5
#define _SMT1CON0_STP_POSITION                              0x5
#define _SMT1CON0_STP_SIZE                                  0x1
#define _SMT1CON0_STP_LENGTH                                0x1
#define _SMT1CON0_STP_MASK                                  0x20
#define _SMT1CON0_EN_POSN                                   0x7
#define _SMT1CON0_EN_POSITION                               0x7
#define _SMT1CON0_EN_SIZE                                   0x1
#define _SMT1CON0_EN_LENGTH                                 0x1
#define _SMT1CON0_EN_MASK                                   0x80
#define _SMT1CON0_SMT1PS0_POSN                              0x0
#define _SMT1CON0_SMT1PS0_POSITION                          0x0
#define _SMT1CON0_SMT1PS0_SIZE                              0x1
#define _SMT1CON0_SMT1PS0_LENGTH                            0x1
#define _SMT1CON0_SMT1PS0_MASK                              0x1
#define _SMT1CON0_SMT1PS1_POSN                              0x1
#define _SMT1CON0_SMT1PS1_POSITION                          0x1
#define _SMT1CON0_SMT1PS1_SIZE                              0x1
#define _SMT1CON0_SMT1PS1_LENGTH                            0x1
#define _SMT1CON0_SMT1PS1_MASK                              0x2

// Register: SMT1CON1
#define SMT1CON1 SMT1CON1
extern volatile unsigned char           SMT1CON1            __at(0x30D);
#ifndef _LIB_BUILD
asm("SMT1CON1 equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned SMT1GO                 :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned SMT1MODE               :4;
        unsigned                        :2;
        unsigned SMT1REPEAT             :1;
    };
    struct {
        unsigned SMT1MODE0              :1;
        unsigned SMT1MODE1              :1;
        unsigned SMT1MODE2              :1;
        unsigned SMT1MODE3              :1;
    };
} SMT1CON1bits_t;
extern volatile SMT1CON1bits_t SMT1CON1bits __at(0x30D);
// bitfield macros
#define _SMT1CON1_MODE_POSN                                 0x0
#define _SMT1CON1_MODE_POSITION                             0x0
#define _SMT1CON1_MODE_SIZE                                 0x4
#define _SMT1CON1_MODE_LENGTH                               0x4
#define _SMT1CON1_MODE_MASK                                 0xF
#define _SMT1CON1_REPEAT_POSN                               0x6
#define _SMT1CON1_REPEAT_POSITION                           0x6
#define _SMT1CON1_REPEAT_SIZE                               0x1
#define _SMT1CON1_REPEAT_LENGTH                             0x1
#define _SMT1CON1_REPEAT_MASK                               0x40
#define _SMT1CON1_SMT1GO_POSN                               0x7
#define _SMT1CON1_SMT1GO_POSITION                           0x7
#define _SMT1CON1_SMT1GO_SIZE                               0x1
#define _SMT1CON1_SMT1GO_LENGTH                             0x1
#define _SMT1CON1_SMT1GO_MASK                               0x80
#define _SMT1CON1_MODE0_POSN                                0x0
#define _SMT1CON1_MODE0_POSITION                            0x0
#define _SMT1CON1_MODE0_SIZE                                0x1
#define _SMT1CON1_MODE0_LENGTH                              0x1
#define _SMT1CON1_MODE0_MASK                                0x1
#define _SMT1CON1_MODE1_POSN                                0x1
#define _SMT1CON1_MODE1_POSITION                            0x1
#define _SMT1CON1_MODE1_SIZE                                0x1
#define _SMT1CON1_MODE1_LENGTH                              0x1
#define _SMT1CON1_MODE1_MASK                                0x2
#define _SMT1CON1_MODE2_POSN                                0x2
#define _SMT1CON1_MODE2_POSITION                            0x2
#define _SMT1CON1_MODE2_SIZE                                0x1
#define _SMT1CON1_MODE2_LENGTH                              0x1
#define _SMT1CON1_MODE2_MASK                                0x4
#define _SMT1CON1_MODE3_POSN                                0x3
#define _SMT1CON1_MODE3_POSITION                            0x3
#define _SMT1CON1_MODE3_SIZE                                0x1
#define _SMT1CON1_MODE3_LENGTH                              0x1
#define _SMT1CON1_MODE3_MASK                                0x8
#define _SMT1CON1_SMT1MODE_POSN                             0x0
#define _SMT1CON1_SMT1MODE_POSITION                         0x0
#define _SMT1CON1_SMT1MODE_SIZE                             0x4
#define _SMT1CON1_SMT1MODE_LENGTH                           0x4
#define _SMT1CON1_SMT1MODE_MASK                             0xF
#define _SMT1CON1_SMT1REPEAT_POSN                           0x6
#define _SMT1CON1_SMT1REPEAT_POSITION                       0x6
#define _SMT1CON1_SMT1REPEAT_SIZE                           0x1
#define _SMT1CON1_SMT1REPEAT_LENGTH                         0x1
#define _SMT1CON1_SMT1REPEAT_MASK                           0x40
#define _SMT1CON1_SMT1MODE0_POSN                            0x0
#define _SMT1CON1_SMT1MODE0_POSITION                        0x0
#define _SMT1CON1_SMT1MODE0_SIZE                            0x1
#define _SMT1CON1_SMT1MODE0_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE0_MASK                            0x1
#define _SMT1CON1_SMT1MODE1_POSN                            0x1
#define _SMT1CON1_SMT1MODE1_POSITION                        0x1
#define _SMT1CON1_SMT1MODE1_SIZE                            0x1
#define _SMT1CON1_SMT1MODE1_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE1_MASK                            0x2
#define _SMT1CON1_SMT1MODE2_POSN                            0x2
#define _SMT1CON1_SMT1MODE2_POSITION                        0x2
#define _SMT1CON1_SMT1MODE2_SIZE                            0x1
#define _SMT1CON1_SMT1MODE2_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE2_MASK                            0x4
#define _SMT1CON1_SMT1MODE3_POSN                            0x3
#define _SMT1CON1_SMT1MODE3_POSITION                        0x3
#define _SMT1CON1_SMT1MODE3_SIZE                            0x1
#define _SMT1CON1_SMT1MODE3_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE3_MASK                            0x8

// Register: SMT1STAT
#define SMT1STAT SMT1STAT
extern volatile unsigned char           SMT1STAT            __at(0x30E);
#ifndef _LIB_BUILD
asm("SMT1STAT equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT1AS                 :1;
        unsigned SMT1WS                 :1;
        unsigned SMT1TS                 :1;
        unsigned                        :2;
        unsigned SMT1RESET              :1;
        unsigned SMT1CPWUP              :1;
        unsigned SMT1CPRUP              :1;
    };
} SMT1STATbits_t;
extern volatile SMT1STATbits_t SMT1STATbits __at(0x30E);
// bitfield macros
#define _SMT1STAT_AS_POSN                                   0x0
#define _SMT1STAT_AS_POSITION                               0x0
#define _SMT1STAT_AS_SIZE                                   0x1
#define _SMT1STAT_AS_LENGTH                                 0x1
#define _SMT1STAT_AS_MASK                                   0x1
#define _SMT1STAT_WS_POSN                                   0x1
#define _SMT1STAT_WS_POSITION                               0x1
#define _SMT1STAT_WS_SIZE                                   0x1
#define _SMT1STAT_WS_LENGTH                                 0x1
#define _SMT1STAT_WS_MASK                                   0x2
#define _SMT1STAT_TS_POSN                                   0x2
#define _SMT1STAT_TS_POSITION                               0x2
#define _SMT1STAT_TS_SIZE                                   0x1
#define _SMT1STAT_TS_LENGTH                                 0x1
#define _SMT1STAT_TS_MASK                                   0x4
#define _SMT1STAT_RST_POSN                                  0x5
#define _SMT1STAT_RST_POSITION                              0x5
#define _SMT1STAT_RST_SIZE                                  0x1
#define _SMT1STAT_RST_LENGTH                                0x1
#define _SMT1STAT_RST_MASK                                  0x20
#define _SMT1STAT_CPWUP_POSN                                0x6
#define _SMT1STAT_CPWUP_POSITION                            0x6
#define _SMT1STAT_CPWUP_SIZE                                0x1
#define _SMT1STAT_CPWUP_LENGTH                              0x1
#define _SMT1STAT_CPWUP_MASK                                0x40
#define _SMT1STAT_CPRUP_POSN                                0x7
#define _SMT1STAT_CPRUP_POSITION                            0x7
#define _SMT1STAT_CPRUP_SIZE                                0x1
#define _SMT1STAT_CPRUP_LENGTH                              0x1
#define _SMT1STAT_CPRUP_MASK                                0x80
#define _SMT1STAT_SMT1AS_POSN                               0x0
#define _SMT1STAT_SMT1AS_POSITION                           0x0
#define _SMT1STAT_SMT1AS_SIZE                               0x1
#define _SMT1STAT_SMT1AS_LENGTH                             0x1
#define _SMT1STAT_SMT1AS_MASK                               0x1
#define _SMT1STAT_SMT1WS_POSN                               0x1
#define _SMT1STAT_SMT1WS_POSITION                           0x1
#define _SMT1STAT_SMT1WS_SIZE                               0x1
#define _SMT1STAT_SMT1WS_LENGTH                             0x1
#define _SMT1STAT_SMT1WS_MASK                               0x2
#define _SMT1STAT_SMT1TS_POSN                               0x2
#define _SMT1STAT_SMT1TS_POSITION                           0x2
#define _SMT1STAT_SMT1TS_SIZE                               0x1
#define _SMT1STAT_SMT1TS_LENGTH                             0x1
#define _SMT1STAT_SMT1TS_MASK                               0x4
#define _SMT1STAT_SMT1RESET_POSN                            0x5
#define _SMT1STAT_SMT1RESET_POSITION                        0x5
#define _SMT1STAT_SMT1RESET_SIZE                            0x1
#define _SMT1STAT_SMT1RESET_LENGTH                          0x1
#define _SMT1STAT_SMT1RESET_MASK                            0x20
#define _SMT1STAT_SMT1CPWUP_POSN                            0x6
#define _SMT1STAT_SMT1CPWUP_POSITION                        0x6
#define _SMT1STAT_SMT1CPWUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPWUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPWUP_MASK                            0x40
#define _SMT1STAT_SMT1CPRUP_POSN                            0x7
#define _SMT1STAT_SMT1CPRUP_POSITION                        0x7
#define _SMT1STAT_SMT1CPRUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPRUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPRUP_MASK                            0x80

// Register: SMT1CLK
#define SMT1CLK SMT1CLK
extern volatile unsigned char           SMT1CLK             __at(0x30F);
#ifndef _LIB_BUILD
asm("SMT1CLK equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :8;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
        unsigned CSEL3                  :1;
    };
    struct {
        unsigned SMT1CSEL               :8;
    };
    struct {
        unsigned SMT1CSEL0              :1;
        unsigned SMT1CSEL1              :1;
        unsigned SMT1CSEL2              :1;
        unsigned SMT1CSEL3              :1;
    };
} SMT1CLKbits_t;
extern volatile SMT1CLKbits_t SMT1CLKbits __at(0x30F);
// bitfield macros
#define _SMT1CLK_CSEL_POSN                                  0x0
#define _SMT1CLK_CSEL_POSITION                              0x0
#define _SMT1CLK_CSEL_SIZE                                  0x8
#define _SMT1CLK_CSEL_LENGTH                                0x8
#define _SMT1CLK_CSEL_MASK                                  0xFF
#define _SMT1CLK_CSEL0_POSN                                 0x0
#define _SMT1CLK_CSEL0_POSITION                             0x0
#define _SMT1CLK_CSEL0_SIZE                                 0x1
#define _SMT1CLK_CSEL0_LENGTH                               0x1
#define _SMT1CLK_CSEL0_MASK                                 0x1
#define _SMT1CLK_CSEL1_POSN                                 0x1
#define _SMT1CLK_CSEL1_POSITION                             0x1
#define _SMT1CLK_CSEL1_SIZE                                 0x1
#define _SMT1CLK_CSEL1_LENGTH                               0x1
#define _SMT1CLK_CSEL1_MASK                                 0x2
#define _SMT1CLK_CSEL2_POSN                                 0x2
#define _SMT1CLK_CSEL2_POSITION                             0x2
#define _SMT1CLK_CSEL2_SIZE                                 0x1
#define _SMT1CLK_CSEL2_LENGTH                               0x1
#define _SMT1CLK_CSEL2_MASK                                 0x4
#define _SMT1CLK_CSEL3_POSN                                 0x3
#define _SMT1CLK_CSEL3_POSITION                             0x3
#define _SMT1CLK_CSEL3_SIZE                                 0x1
#define _SMT1CLK_CSEL3_LENGTH                               0x1
#define _SMT1CLK_CSEL3_MASK                                 0x8
#define _SMT1CLK_SMT1CSEL_POSN                              0x0
#define _SMT1CLK_SMT1CSEL_POSITION                          0x0
#define _SMT1CLK_SMT1CSEL_SIZE                              0x8
#define _SMT1CLK_SMT1CSEL_LENGTH                            0x8
#define _SMT1CLK_SMT1CSEL_MASK                              0xFF
#define _SMT1CLK_SMT1CSEL0_POSN                             0x0
#define _SMT1CLK_SMT1CSEL0_POSITION                         0x0
#define _SMT1CLK_SMT1CSEL0_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL0_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL0_MASK                             0x1
#define _SMT1CLK_SMT1CSEL1_POSN                             0x1
#define _SMT1CLK_SMT1CSEL1_POSITION                         0x1
#define _SMT1CLK_SMT1CSEL1_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL1_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL1_MASK                             0x2
#define _SMT1CLK_SMT1CSEL2_POSN                             0x2
#define _SMT1CLK_SMT1CSEL2_POSITION                         0x2
#define _SMT1CLK_SMT1CSEL2_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL2_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL2_MASK                             0x4
#define _SMT1CLK_SMT1CSEL3_POSN                             0x3
#define _SMT1CLK_SMT1CSEL3_POSITION                         0x3
#define _SMT1CLK_SMT1CSEL3_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL3_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL3_MASK                             0x8

// Register: SMT1SIG
#define SMT1SIG SMT1SIG
extern volatile unsigned char           SMT1SIG             __at(0x310);
#ifndef _LIB_BUILD
asm("SMT1SIG equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :8;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
        unsigned SSEL5                  :1;
    };
    struct {
        unsigned SMT1SSEL               :8;
    };
    struct {
        unsigned SMT1SSEL0              :1;
        unsigned SMT1SSEL1              :1;
        unsigned SMT1SSEL2              :1;
        unsigned SMT1SSEL3              :1;
        unsigned SMT1SSEL4              :1;
        unsigned SMT1SSEL5              :1;
    };
} SMT1SIGbits_t;
extern volatile SMT1SIGbits_t SMT1SIGbits __at(0x310);
// bitfield macros
#define _SMT1SIG_SSEL_POSN                                  0x0
#define _SMT1SIG_SSEL_POSITION                              0x0
#define _SMT1SIG_SSEL_SIZE                                  0x8
#define _SMT1SIG_SSEL_LENGTH                                0x8
#define _SMT1SIG_SSEL_MASK                                  0xFF
#define _SMT1SIG_SSEL0_POSN                                 0x0
#define _SMT1SIG_SSEL0_POSITION                             0x0
#define _SMT1SIG_SSEL0_SIZE                                 0x1
#define _SMT1SIG_SSEL0_LENGTH                               0x1
#define _SMT1SIG_SSEL0_MASK                                 0x1
#define _SMT1SIG_SSEL1_POSN                                 0x1
#define _SMT1SIG_SSEL1_POSITION                             0x1
#define _SMT1SIG_SSEL1_SIZE                                 0x1
#define _SMT1SIG_SSEL1_LENGTH                               0x1
#define _SMT1SIG_SSEL1_MASK                                 0x2
#define _SMT1SIG_SSEL2_POSN                                 0x2
#define _SMT1SIG_SSEL2_POSITION                             0x2
#define _SMT1SIG_SSEL2_SIZE                                 0x1
#define _SMT1SIG_SSEL2_LENGTH                               0x1
#define _SMT1SIG_SSEL2_MASK                                 0x4
#define _SMT1SIG_SSEL3_POSN                                 0x3
#define _SMT1SIG_SSEL3_POSITION                             0x3
#define _SMT1SIG_SSEL3_SIZE                                 0x1
#define _SMT1SIG_SSEL3_LENGTH                               0x1
#define _SMT1SIG_SSEL3_MASK                                 0x8
#define _SMT1SIG_SSEL4_POSN                                 0x4
#define _SMT1SIG_SSEL4_POSITION                             0x4
#define _SMT1SIG_SSEL4_SIZE                                 0x1
#define _SMT1SIG_SSEL4_LENGTH                               0x1
#define _SMT1SIG_SSEL4_MASK                                 0x10
#define _SMT1SIG_SSEL5_POSN                                 0x5
#define _SMT1SIG_SSEL5_POSITION                             0x5
#define _SMT1SIG_SSEL5_SIZE                                 0x1
#define _SMT1SIG_SSEL5_LENGTH                               0x1
#define _SMT1SIG_SSEL5_MASK                                 0x20
#define _SMT1SIG_SMT1SSEL_POSN                              0x0
#define _SMT1SIG_SMT1SSEL_POSITION                          0x0
#define _SMT1SIG_SMT1SSEL_SIZE                              0x8
#define _SMT1SIG_SMT1SSEL_LENGTH                            0x8
#define _SMT1SIG_SMT1SSEL_MASK                              0xFF
#define _SMT1SIG_SMT1SSEL0_POSN                             0x0
#define _SMT1SIG_SMT1SSEL0_POSITION                         0x0
#define _SMT1SIG_SMT1SSEL0_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL0_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL0_MASK                             0x1
#define _SMT1SIG_SMT1SSEL1_POSN                             0x1
#define _SMT1SIG_SMT1SSEL1_POSITION                         0x1
#define _SMT1SIG_SMT1SSEL1_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL1_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL1_MASK                             0x2
#define _SMT1SIG_SMT1SSEL2_POSN                             0x2
#define _SMT1SIG_SMT1SSEL2_POSITION                         0x2
#define _SMT1SIG_SMT1SSEL2_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL2_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL2_MASK                             0x4
#define _SMT1SIG_SMT1SSEL3_POSN                             0x3
#define _SMT1SIG_SMT1SSEL3_POSITION                         0x3
#define _SMT1SIG_SMT1SSEL3_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL3_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL3_MASK                             0x8
#define _SMT1SIG_SMT1SSEL4_POSN                             0x4
#define _SMT1SIG_SMT1SSEL4_POSITION                         0x4
#define _SMT1SIG_SMT1SSEL4_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL4_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL4_MASK                             0x10
#define _SMT1SIG_SMT1SSEL5_POSN                             0x5
#define _SMT1SIG_SMT1SSEL5_POSITION                         0x5
#define _SMT1SIG_SMT1SSEL5_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL5_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL5_MASK                             0x20

// Register: SMT1WIN
#define SMT1WIN SMT1WIN
extern volatile unsigned char           SMT1WIN             __at(0x311);
#ifndef _LIB_BUILD
asm("SMT1WIN equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :8;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
        unsigned WSEL5                  :1;
    };
    struct {
        unsigned SMT1WSEL               :8;
    };
    struct {
        unsigned SMT1WSEL0              :1;
        unsigned SMT1WSEL1              :1;
        unsigned SMT1WSEL2              :1;
        unsigned SMT1WSEL3              :1;
        unsigned SMT1WSEL4              :1;
        unsigned SMT1WSEL5              :1;
    };
} SMT1WINbits_t;
extern volatile SMT1WINbits_t SMT1WINbits __at(0x311);
// bitfield macros
#define _SMT1WIN_WSEL_POSN                                  0x0
#define _SMT1WIN_WSEL_POSITION                              0x0
#define _SMT1WIN_WSEL_SIZE                                  0x8
#define _SMT1WIN_WSEL_LENGTH                                0x8
#define _SMT1WIN_WSEL_MASK                                  0xFF
#define _SMT1WIN_WSEL0_POSN                                 0x0
#define _SMT1WIN_WSEL0_POSITION                             0x0
#define _SMT1WIN_WSEL0_SIZE                                 0x1
#define _SMT1WIN_WSEL0_LENGTH                               0x1
#define _SMT1WIN_WSEL0_MASK                                 0x1
#define _SMT1WIN_WSEL1_POSN                                 0x1
#define _SMT1WIN_WSEL1_POSITION                             0x1
#define _SMT1WIN_WSEL1_SIZE                                 0x1
#define _SMT1WIN_WSEL1_LENGTH                               0x1
#define _SMT1WIN_WSEL1_MASK                                 0x2
#define _SMT1WIN_WSEL2_POSN                                 0x2
#define _SMT1WIN_WSEL2_POSITION                             0x2
#define _SMT1WIN_WSEL2_SIZE                                 0x1
#define _SMT1WIN_WSEL2_LENGTH                               0x1
#define _SMT1WIN_WSEL2_MASK                                 0x4
#define _SMT1WIN_WSEL3_POSN                                 0x3
#define _SMT1WIN_WSEL3_POSITION                             0x3
#define _SMT1WIN_WSEL3_SIZE                                 0x1
#define _SMT1WIN_WSEL3_LENGTH                               0x1
#define _SMT1WIN_WSEL3_MASK                                 0x8
#define _SMT1WIN_WSEL4_POSN                                 0x4
#define _SMT1WIN_WSEL4_POSITION                             0x4
#define _SMT1WIN_WSEL4_SIZE                                 0x1
#define _SMT1WIN_WSEL4_LENGTH                               0x1
#define _SMT1WIN_WSEL4_MASK                                 0x10
#define _SMT1WIN_WSEL5_POSN                                 0x5
#define _SMT1WIN_WSEL5_POSITION                             0x5
#define _SMT1WIN_WSEL5_SIZE                                 0x1
#define _SMT1WIN_WSEL5_LENGTH                               0x1
#define _SMT1WIN_WSEL5_MASK                                 0x20
#define _SMT1WIN_SMT1WSEL_POSN                              0x0
#define _SMT1WIN_SMT1WSEL_POSITION                          0x0
#define _SMT1WIN_SMT1WSEL_SIZE                              0x8
#define _SMT1WIN_SMT1WSEL_LENGTH                            0x8
#define _SMT1WIN_SMT1WSEL_MASK                              0xFF
#define _SMT1WIN_SMT1WSEL0_POSN                             0x0
#define _SMT1WIN_SMT1WSEL0_POSITION                         0x0
#define _SMT1WIN_SMT1WSEL0_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL0_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL0_MASK                             0x1
#define _SMT1WIN_SMT1WSEL1_POSN                             0x1
#define _SMT1WIN_SMT1WSEL1_POSITION                         0x1
#define _SMT1WIN_SMT1WSEL1_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL1_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL1_MASK                             0x2
#define _SMT1WIN_SMT1WSEL2_POSN                             0x2
#define _SMT1WIN_SMT1WSEL2_POSITION                         0x2
#define _SMT1WIN_SMT1WSEL2_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL2_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL2_MASK                             0x4
#define _SMT1WIN_SMT1WSEL3_POSN                             0x3
#define _SMT1WIN_SMT1WSEL3_POSITION                         0x3
#define _SMT1WIN_SMT1WSEL3_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL3_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL3_MASK                             0x8
#define _SMT1WIN_SMT1WSEL4_POSN                             0x4
#define _SMT1WIN_SMT1WSEL4_POSITION                         0x4
#define _SMT1WIN_SMT1WSEL4_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL4_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL4_MASK                             0x10
#define _SMT1WIN_SMT1WSEL5_POSN                             0x5
#define _SMT1WIN_SMT1WSEL5_POSITION                         0x5
#define _SMT1WIN_SMT1WSEL5_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL5_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL5_MASK                             0x20

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x318);
#ifndef _LIB_BUILD
asm("TMR0L equ 0318h");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x318);
#ifndef _LIB_BUILD
asm("TMR0 equ 0318h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x318);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x318);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x319);
#ifndef _LIB_BUILD
asm("TMR0H equ 0319h");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x319);
#ifndef _LIB_BUILD
asm("PR0 equ 0319h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x319);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x319);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x31A);
#ifndef _LIB_BUILD
asm("T0CON0 equ 031Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned MD16                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned T0OUTPS                :4;
        unsigned T0MD16                 :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned T016BIT                :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x31A);
// bitfield macros
#define _T0CON0_OUTPS_POSN                                  0x0
#define _T0CON0_OUTPS_POSITION                              0x0
#define _T0CON0_OUTPS_SIZE                                  0x4
#define _T0CON0_OUTPS_LENGTH                                0x4
#define _T0CON0_OUTPS_MASK                                  0xF
#define _T0CON0_MD16_POSN                                   0x4
#define _T0CON0_MD16_POSITION                               0x4
#define _T0CON0_MD16_SIZE                                   0x1
#define _T0CON0_MD16_LENGTH                                 0x1
#define _T0CON0_MD16_MASK                                   0x10
#define _T0CON0_OUT_POSN                                    0x5
#define _T0CON0_OUT_POSITION                                0x5
#define _T0CON0_OUT_SIZE                                    0x1
#define _T0CON0_OUT_LENGTH                                  0x1
#define _T0CON0_OUT_MASK                                    0x20
#define _T0CON0_EN_POSN                                     0x7
#define _T0CON0_EN_POSITION                                 0x7
#define _T0CON0_EN_SIZE                                     0x1
#define _T0CON0_EN_LENGTH                                   0x1
#define _T0CON0_EN_MASK                                     0x80
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T0MD16_POSN                                 0x4
#define _T0CON0_T0MD16_POSITION                             0x4
#define _T0CON0_T0MD16_SIZE                                 0x1
#define _T0CON0_T0MD16_LENGTH                               0x1
#define _T0CON0_T0MD16_MASK                                 0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_OUTPS0_POSN                                 0x0
#define _T0CON0_OUTPS0_POSITION                             0x0
#define _T0CON0_OUTPS0_SIZE                                 0x1
#define _T0CON0_OUTPS0_LENGTH                               0x1
#define _T0CON0_OUTPS0_MASK                                 0x1
#define _T0CON0_OUTPS1_POSN                                 0x1
#define _T0CON0_OUTPS1_POSITION                             0x1
#define _T0CON0_OUTPS1_SIZE                                 0x1
#define _T0CON0_OUTPS1_LENGTH                               0x1
#define _T0CON0_OUTPS1_MASK                                 0x2
#define _T0CON0_OUTPS2_POSN                                 0x2
#define _T0CON0_OUTPS2_POSITION                             0x2
#define _T0CON0_OUTPS2_SIZE                                 0x1
#define _T0CON0_OUTPS2_LENGTH                               0x1
#define _T0CON0_OUTPS2_MASK                                 0x4
#define _T0CON0_OUTPS3_POSN                                 0x3
#define _T0CON0_OUTPS3_POSITION                             0x3
#define _T0CON0_OUTPS3_SIZE                                 0x1
#define _T0CON0_OUTPS3_LENGTH                               0x1
#define _T0CON0_OUTPS3_MASK                                 0x8
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x31B);
#ifndef _LIB_BUILD
asm("T0CON1 equ 031Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPS                   :4;
        unsigned ASYNC                  :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned CKPS3                  :1;
        unsigned T0ASYNC                :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned T0CKPS                 :4;
        unsigned                        :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x31B);
// bitfield macros
#define _T0CON1_CKPS_POSN                                   0x0
#define _T0CON1_CKPS_POSITION                               0x0
#define _T0CON1_CKPS_SIZE                                   0x4
#define _T0CON1_CKPS_LENGTH                                 0x4
#define _T0CON1_CKPS_MASK                                   0xF
#define _T0CON1_ASYNC_POSN                                  0x4
#define _T0CON1_ASYNC_POSITION                              0x4
#define _T0CON1_ASYNC_SIZE                                  0x1
#define _T0CON1_ASYNC_LENGTH                                0x1
#define _T0CON1_ASYNC_MASK                                  0x10
#define _T0CON1_CS_POSN                                     0x5
#define _T0CON1_CS_POSITION                                 0x5
#define _T0CON1_CS_SIZE                                     0x3
#define _T0CON1_CS_LENGTH                                   0x3
#define _T0CON1_CS_MASK                                     0xE0
#define _T0CON1_CKPS0_POSN                                  0x0
#define _T0CON1_CKPS0_POSITION                              0x0
#define _T0CON1_CKPS0_SIZE                                  0x1
#define _T0CON1_CKPS0_LENGTH                                0x1
#define _T0CON1_CKPS0_MASK                                  0x1
#define _T0CON1_CKPS1_POSN                                  0x1
#define _T0CON1_CKPS1_POSITION                              0x1
#define _T0CON1_CKPS1_SIZE                                  0x1
#define _T0CON1_CKPS1_LENGTH                                0x1
#define _T0CON1_CKPS1_MASK                                  0x2
#define _T0CON1_CKPS2_POSN                                  0x2
#define _T0CON1_CKPS2_POSITION                              0x2
#define _T0CON1_CKPS2_SIZE                                  0x1
#define _T0CON1_CKPS2_LENGTH                                0x1
#define _T0CON1_CKPS2_MASK                                  0x4
#define _T0CON1_CKPS3_POSN                                  0x3
#define _T0CON1_CKPS3_POSITION                              0x3
#define _T0CON1_CKPS3_SIZE                                  0x1
#define _T0CON1_CKPS3_LENGTH                                0x1
#define _T0CON1_CKPS3_MASK                                  0x8
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_CS0_POSN                                    0x5
#define _T0CON1_CS0_POSITION                                0x5
#define _T0CON1_CS0_SIZE                                    0x1
#define _T0CON1_CS0_LENGTH                                  0x1
#define _T0CON1_CS0_MASK                                    0x20
#define _T0CON1_CS1_POSN                                    0x6
#define _T0CON1_CS1_POSITION                                0x6
#define _T0CON1_CS1_SIZE                                    0x1
#define _T0CON1_CS1_LENGTH                                  0x1
#define _T0CON1_CS1_MASK                                    0x40
#define _T0CON1_CS2_POSN                                    0x7
#define _T0CON1_CS2_POSITION                                0x7
#define _T0CON1_CS2_SIZE                                    0x1
#define _T0CON1_CS2_LENGTH                                  0x1
#define _T0CON1_CS2_MASK                                    0x80
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x31C);
#ifndef _LIB_BUILD
asm("TMR1L equ 031Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x31C);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x31D);
#ifndef _LIB_BUILD
asm("TMR1H equ 031Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x31D);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x31E);
#ifndef _LIB_BUILD
asm("T1CON equ 031Eh");
#endif
// aliases
extern volatile unsigned char           TMR1CON             __at(0x31E);
#ifndef _LIB_BUILD
asm("TMR1CON equ 031Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x31E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_NOT_SYNC_POSN                                0x2
#define _T1CON_NOT_SYNC_POSITION                            0x2
#define _T1CON_NOT_SYNC_SIZE                                0x1
#define _T1CON_NOT_SYNC_LENGTH                              0x1
#define _T1CON_NOT_SYNC_MASK                                0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_NOT_T1SYNC_POSN                              0x2
#define _T1CON_NOT_T1SYNC_POSITION                          0x2
#define _T1CON_NOT_T1SYNC_SIZE                              0x1
#define _T1CON_NOT_T1SYNC_LENGTH                            0x1
#define _T1CON_NOT_T1SYNC_MASK                              0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} TMR1CONbits_t;
extern volatile TMR1CONbits_t TMR1CONbits __at(0x31E);
// bitfield macros
#define _TMR1CON_ON_POSN                                    0x0
#define _TMR1CON_ON_POSITION                                0x0
#define _TMR1CON_ON_SIZE                                    0x1
#define _TMR1CON_ON_LENGTH                                  0x1
#define _TMR1CON_ON_MASK                                    0x1
#define _TMR1CON_RD16_POSN                                  0x1
#define _TMR1CON_RD16_POSITION                              0x1
#define _TMR1CON_RD16_SIZE                                  0x1
#define _TMR1CON_RD16_LENGTH                                0x1
#define _TMR1CON_RD16_MASK                                  0x2
#define _TMR1CON_NOT_SYNC_POSN                              0x2
#define _TMR1CON_NOT_SYNC_POSITION                          0x2
#define _TMR1CON_NOT_SYNC_SIZE                              0x1
#define _TMR1CON_NOT_SYNC_LENGTH                            0x1
#define _TMR1CON_NOT_SYNC_MASK                              0x4
#define _TMR1CON_CKPS_POSN                                  0x4
#define _TMR1CON_CKPS_POSITION                              0x4
#define _TMR1CON_CKPS_SIZE                                  0x2
#define _TMR1CON_CKPS_LENGTH                                0x2
#define _TMR1CON_CKPS_MASK                                  0x30
#define _TMR1CON_TMR1ON_POSN                                0x0
#define _TMR1CON_TMR1ON_POSITION                            0x0
#define _TMR1CON_TMR1ON_SIZE                                0x1
#define _TMR1CON_TMR1ON_LENGTH                              0x1
#define _TMR1CON_TMR1ON_MASK                                0x1
#define _TMR1CON_T1RD16_POSN                                0x1
#define _TMR1CON_T1RD16_POSITION                            0x1
#define _TMR1CON_T1RD16_SIZE                                0x1
#define _TMR1CON_T1RD16_LENGTH                              0x1
#define _TMR1CON_T1RD16_MASK                                0x2
#define _TMR1CON_NOT_T1SYNC_POSN                            0x2
#define _TMR1CON_NOT_T1SYNC_POSITION                        0x2
#define _TMR1CON_NOT_T1SYNC_SIZE                            0x1
#define _TMR1CON_NOT_T1SYNC_LENGTH                          0x1
#define _TMR1CON_NOT_T1SYNC_MASK                            0x4
#define _TMR1CON_T1CKPS0_POSN                               0x4
#define _TMR1CON_T1CKPS0_POSITION                           0x4
#define _TMR1CON_T1CKPS0_SIZE                               0x1
#define _TMR1CON_T1CKPS0_LENGTH                             0x1
#define _TMR1CON_T1CKPS0_MASK                               0x10
#define _TMR1CON_T1CKPS1_POSN                               0x5
#define _TMR1CON_T1CKPS1_POSITION                           0x5
#define _TMR1CON_T1CKPS1_SIZE                               0x1
#define _TMR1CON_T1CKPS1_LENGTH                             0x1
#define _TMR1CON_T1CKPS1_MASK                               0x20
#define _TMR1CON_CKPS0_POSN                                 0x4
#define _TMR1CON_CKPS0_POSITION                             0x4
#define _TMR1CON_CKPS0_SIZE                                 0x1
#define _TMR1CON_CKPS0_LENGTH                               0x1
#define _TMR1CON_CKPS0_MASK                                 0x10
#define _TMR1CON_CKPS1_POSN                                 0x5
#define _TMR1CON_CKPS1_POSITION                             0x5
#define _TMR1CON_CKPS1_SIZE                                 0x1
#define _TMR1CON_CKPS1_LENGTH                               0x1
#define _TMR1CON_CKPS1_MASK                                 0x20
#define _TMR1CON_RD161_POSN                                 0x1
#define _TMR1CON_RD161_POSITION                             0x1
#define _TMR1CON_RD161_SIZE                                 0x1
#define _TMR1CON_RD161_LENGTH                               0x1
#define _TMR1CON_RD161_MASK                                 0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x31F);
#ifndef _LIB_BUILD
asm("T1GCON equ 031Fh");
#endif
// aliases
extern volatile unsigned char           TMR1GCON            __at(0x31F);
#ifndef _LIB_BUILD
asm("TMR1GCON equ 031Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x31F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_POSN                                    0x3
#define _T1GCON_GGO_POSITION                                0x3
#define _T1GCON_GGO_SIZE                                    0x1
#define _T1GCON_GGO_LENGTH                                  0x1
#define _T1GCON_GGO_MASK                                    0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_NOT_DONE_POSN                               0x3
#define _T1GCON_NOT_DONE_POSITION                           0x3
#define _T1GCON_NOT_DONE_SIZE                               0x1
#define _T1GCON_NOT_DONE_LENGTH                             0x1
#define _T1GCON_NOT_DONE_MASK                               0x8
#define _T1GCON_NOT_T1DONE_POSN                             0x3
#define _T1GCON_NOT_T1DONE_POSITION                         0x3
#define _T1GCON_NOT_T1DONE_SIZE                             0x1
#define _T1GCON_NOT_T1DONE_LENGTH                           0x1
#define _T1GCON_NOT_T1DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
} TMR1GCONbits_t;
extern volatile TMR1GCONbits_t TMR1GCONbits __at(0x31F);
// bitfield macros
#define _TMR1GCON_GVAL_POSN                                 0x2
#define _TMR1GCON_GVAL_POSITION                             0x2
#define _TMR1GCON_GVAL_SIZE                                 0x1
#define _TMR1GCON_GVAL_LENGTH                               0x1
#define _TMR1GCON_GVAL_MASK                                 0x4
#define _TMR1GCON_GGO_POSN                                  0x3
#define _TMR1GCON_GGO_POSITION                              0x3
#define _TMR1GCON_GGO_SIZE                                  0x1
#define _TMR1GCON_GGO_LENGTH                                0x1
#define _TMR1GCON_GGO_MASK                                  0x8
#define _TMR1GCON_GSPM_POSN                                 0x4
#define _TMR1GCON_GSPM_POSITION                             0x4
#define _TMR1GCON_GSPM_SIZE                                 0x1
#define _TMR1GCON_GSPM_LENGTH                               0x1
#define _TMR1GCON_GSPM_MASK                                 0x10
#define _TMR1GCON_GTM_POSN                                  0x5
#define _TMR1GCON_GTM_POSITION                              0x5
#define _TMR1GCON_GTM_SIZE                                  0x1
#define _TMR1GCON_GTM_LENGTH                                0x1
#define _TMR1GCON_GTM_MASK                                  0x20
#define _TMR1GCON_GPOL_POSN                                 0x6
#define _TMR1GCON_GPOL_POSITION                             0x6
#define _TMR1GCON_GPOL_SIZE                                 0x1
#define _TMR1GCON_GPOL_LENGTH                               0x1
#define _TMR1GCON_GPOL_MASK                                 0x40
#define _TMR1GCON_GE_POSN                                   0x7
#define _TMR1GCON_GE_POSITION                               0x7
#define _TMR1GCON_GE_SIZE                                   0x1
#define _TMR1GCON_GE_LENGTH                                 0x1
#define _TMR1GCON_GE_MASK                                   0x80
#define _TMR1GCON_T1GVAL_POSN                               0x2
#define _TMR1GCON_T1GVAL_POSITION                           0x2
#define _TMR1GCON_T1GVAL_SIZE                               0x1
#define _TMR1GCON_T1GVAL_LENGTH                             0x1
#define _TMR1GCON_T1GVAL_MASK                               0x4
#define _TMR1GCON_T1GGO_POSN                                0x3
#define _TMR1GCON_T1GGO_POSITION                            0x3
#define _TMR1GCON_T1GGO_SIZE                                0x1
#define _TMR1GCON_T1GGO_LENGTH                              0x1
#define _TMR1GCON_T1GGO_MASK                                0x8
#define _TMR1GCON_T1GSPM_POSN                               0x4
#define _TMR1GCON_T1GSPM_POSITION                           0x4
#define _TMR1GCON_T1GSPM_SIZE                               0x1
#define _TMR1GCON_T1GSPM_LENGTH                             0x1
#define _TMR1GCON_T1GSPM_MASK                               0x10
#define _TMR1GCON_T1GTM_POSN                                0x5
#define _TMR1GCON_T1GTM_POSITION                            0x5
#define _TMR1GCON_T1GTM_SIZE                                0x1
#define _TMR1GCON_T1GTM_LENGTH                              0x1
#define _TMR1GCON_T1GTM_MASK                                0x20
#define _TMR1GCON_T1GPOL_POSN                               0x6
#define _TMR1GCON_T1GPOL_POSITION                           0x6
#define _TMR1GCON_T1GPOL_SIZE                               0x1
#define _TMR1GCON_T1GPOL_LENGTH                             0x1
#define _TMR1GCON_T1GPOL_MASK                               0x40
#define _TMR1GCON_T1GE_POSN                                 0x7
#define _TMR1GCON_T1GE_POSITION                             0x7
#define _TMR1GCON_T1GE_SIZE                                 0x1
#define _TMR1GCON_T1GE_LENGTH                               0x1
#define _TMR1GCON_T1GE_MASK                                 0x80
#define _TMR1GCON_NOT_DONE_POSN                             0x3
#define _TMR1GCON_NOT_DONE_POSITION                         0x3
#define _TMR1GCON_NOT_DONE_SIZE                             0x1
#define _TMR1GCON_NOT_DONE_LENGTH                           0x1
#define _TMR1GCON_NOT_DONE_MASK                             0x8
#define _TMR1GCON_NOT_T1DONE_POSN                           0x3
#define _TMR1GCON_NOT_T1DONE_POSITION                       0x3
#define _TMR1GCON_NOT_T1DONE_SIZE                           0x1
#define _TMR1GCON_NOT_T1DONE_LENGTH                         0x1
#define _TMR1GCON_NOT_T1DONE_MASK                           0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x320);
#ifndef _LIB_BUILD
asm("T1GATE equ 0320h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x320);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0320h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
        unsigned T1GSS5                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x320);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x8
#define _T1GATE_GSS_LENGTH                                  0x8
#define _T1GATE_GSS_MASK                                    0xFF
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_GSS5_POSN                                   0x5
#define _T1GATE_GSS5_POSITION                               0x5
#define _T1GATE_GSS5_SIZE                                   0x1
#define _T1GATE_GSS5_LENGTH                                 0x1
#define _T1GATE_GSS5_MASK                                   0x20
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
#define _T1GATE_T1GSS5_POSN                                 0x5
#define _T1GATE_T1GSS5_POSITION                             0x5
#define _T1GATE_T1GSS5_SIZE                                 0x1
#define _T1GATE_T1GSS5_LENGTH                               0x1
#define _T1GATE_T1GSS5_MASK                                 0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
        unsigned T1GSS5                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x320);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x8
#define _TMR1GATE_GSS_LENGTH                                0x8
#define _TMR1GATE_GSS_MASK                                  0xFF
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_GSS5_POSN                                 0x5
#define _TMR1GATE_GSS5_POSITION                             0x5
#define _TMR1GATE_GSS5_SIZE                                 0x1
#define _TMR1GATE_GSS5_LENGTH                               0x1
#define _TMR1GATE_GSS5_MASK                                 0x20
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10
#define _TMR1GATE_T1GSS5_POSN                               0x5
#define _TMR1GATE_T1GSS5_POSITION                           0x5
#define _TMR1GATE_T1GSS5_SIZE                               0x1
#define _TMR1GATE_T1GSS5_LENGTH                             0x1
#define _TMR1GATE_T1GSS5_MASK                               0x20

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x321);
#ifndef _LIB_BUILD
asm("T1CLK equ 0321h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x321);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0321h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x321);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x8
#define _T1CLK_CS_LENGTH                                    0x8
#define _T1CLK_CS_MASK                                      0xFF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_T1CS4_POSN                                   0x4
#define _T1CLK_T1CS4_POSITION                               0x4
#define _T1CLK_T1CS4_SIZE                                   0x1
#define _T1CLK_T1CS4_LENGTH                                 0x1
#define _T1CLK_T1CS4_MASK                                   0x10
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
#define _T1CLK_CS4_POSN                                     0x4
#define _T1CLK_CS4_POSITION                                 0x4
#define _T1CLK_CS4_SIZE                                     0x1
#define _T1CLK_CS4_LENGTH                                   0x1
#define _T1CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x321);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x8
#define _TMR1CLK_CS_LENGTH                                  0x8
#define _TMR1CLK_CS_MASK                                    0xFF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_T1CS4_POSN                                 0x4
#define _TMR1CLK_T1CS4_POSITION                             0x4
#define _TMR1CLK_T1CS4_SIZE                                 0x1
#define _TMR1CLK_T1CS4_LENGTH                               0x1
#define _TMR1CLK_T1CS4_MASK                                 0x10
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8
#define _TMR1CLK_CS4_POSN                                   0x4
#define _TMR1CLK_CS4_POSITION                               0x4
#define _TMR1CLK_CS4_SIZE                                   0x1
#define _TMR1CLK_CS4_LENGTH                                 0x1
#define _TMR1CLK_CS4_MASK                                   0x10

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x322);
#ifndef _LIB_BUILD
asm("T2TMR equ 0322h");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x322);
#ifndef _LIB_BUILD
asm("TMR2 equ 0322h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x322);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x322);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x323);
#ifndef _LIB_BUILD
asm("T2PR equ 0323h");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x323);
#ifndef _LIB_BUILD
asm("PR2 equ 0323h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x323);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x323);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x324);
#ifndef _LIB_BUILD
asm("T2CON equ 0324h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x324);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x325);
#ifndef _LIB_BUILD
asm("T2HLT equ 0325h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x325);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x326);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0326h");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x326);
#ifndef _LIB_BUILD
asm("T2CLK equ 0326h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
        unsigned T2CS4                  :1;
        unsigned T2CS5                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x326);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x8
#define _T2CLKCON_CS_LENGTH                                 0x8
#define _T2CLKCON_CS_MASK                                   0xFF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_CS4_POSN                                  0x4
#define _T2CLKCON_CS4_POSITION                              0x4
#define _T2CLKCON_CS4_SIZE                                  0x1
#define _T2CLKCON_CS4_LENGTH                                0x1
#define _T2CLKCON_CS4_MASK                                  0x10
#define _T2CLKCON_CS5_POSN                                  0x5
#define _T2CLKCON_CS5_POSITION                              0x5
#define _T2CLKCON_CS5_SIZE                                  0x1
#define _T2CLKCON_CS5_LENGTH                                0x1
#define _T2CLKCON_CS5_MASK                                  0x20
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x8
#define _T2CLKCON_T2CS_LENGTH                               0x8
#define _T2CLKCON_T2CS_MASK                                 0xFF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
#define _T2CLKCON_T2CS4_POSN                                0x4
#define _T2CLKCON_T2CS4_POSITION                            0x4
#define _T2CLKCON_T2CS4_SIZE                                0x1
#define _T2CLKCON_T2CS4_LENGTH                              0x1
#define _T2CLKCON_T2CS4_MASK                                0x10
#define _T2CLKCON_T2CS5_POSN                                0x5
#define _T2CLKCON_T2CS5_POSITION                            0x5
#define _T2CLKCON_T2CS5_SIZE                                0x1
#define _T2CLKCON_T2CS5_LENGTH                              0x1
#define _T2CLKCON_T2CS5_MASK                                0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
        unsigned T2CS4                  :1;
        unsigned T2CS5                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x326);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x8
#define _T2CLK_CS_LENGTH                                    0x8
#define _T2CLK_CS_MASK                                      0xFF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_CS4_POSN                                     0x4
#define _T2CLK_CS4_POSITION                                 0x4
#define _T2CLK_CS4_SIZE                                     0x1
#define _T2CLK_CS4_LENGTH                                   0x1
#define _T2CLK_CS4_MASK                                     0x10
#define _T2CLK_CS5_POSN                                     0x5
#define _T2CLK_CS5_POSITION                                 0x5
#define _T2CLK_CS5_SIZE                                     0x1
#define _T2CLK_CS5_LENGTH                                   0x1
#define _T2CLK_CS5_MASK                                     0x20
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x8
#define _T2CLK_T2CS_LENGTH                                  0x8
#define _T2CLK_T2CS_MASK                                    0xFF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8
#define _T2CLK_T2CS4_POSN                                   0x4
#define _T2CLK_T2CS4_POSITION                               0x4
#define _T2CLK_T2CS4_SIZE                                   0x1
#define _T2CLK_T2CS4_LENGTH                                 0x1
#define _T2CLK_T2CS4_MASK                                   0x10
#define _T2CLK_T2CS5_POSN                                   0x5
#define _T2CLK_T2CS5_POSITION                               0x5
#define _T2CLK_T2CS5_SIZE                                   0x1
#define _T2CLK_T2CS5_LENGTH                                 0x1
#define _T2CLK_T2CS5_MASK                                   0x20

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x327);
#ifndef _LIB_BUILD
asm("T2RST equ 0327h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
        unsigned RSEL5                  :1;
        unsigned RSEL6                  :1;
    };
    struct {
        unsigned T2RSEL                 :8;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
        unsigned T2RSEL4                :1;
        unsigned T2RSEL5                :1;
        unsigned T2RSEL6                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x327);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x8
#define _T2RST_RSEL_LENGTH                                  0x8
#define _T2RST_RSEL_MASK                                    0xFF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_RSEL4_POSN                                   0x4
#define _T2RST_RSEL4_POSITION                               0x4
#define _T2RST_RSEL4_SIZE                                   0x1
#define _T2RST_RSEL4_LENGTH                                 0x1
#define _T2RST_RSEL4_MASK                                   0x10
#define _T2RST_RSEL5_POSN                                   0x5
#define _T2RST_RSEL5_POSITION                               0x5
#define _T2RST_RSEL5_SIZE                                   0x1
#define _T2RST_RSEL5_LENGTH                                 0x1
#define _T2RST_RSEL5_MASK                                   0x20
#define _T2RST_RSEL6_POSN                                   0x6
#define _T2RST_RSEL6_POSITION                               0x6
#define _T2RST_RSEL6_SIZE                                   0x1
#define _T2RST_RSEL6_LENGTH                                 0x1
#define _T2RST_RSEL6_MASK                                   0x40
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x8
#define _T2RST_T2RSEL_LENGTH                                0x8
#define _T2RST_T2RSEL_MASK                                  0xFF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8
#define _T2RST_T2RSEL4_POSN                                 0x4
#define _T2RST_T2RSEL4_POSITION                             0x4
#define _T2RST_T2RSEL4_SIZE                                 0x1
#define _T2RST_T2RSEL4_LENGTH                               0x1
#define _T2RST_T2RSEL4_MASK                                 0x10
#define _T2RST_T2RSEL5_POSN                                 0x5
#define _T2RST_T2RSEL5_POSITION                             0x5
#define _T2RST_T2RSEL5_SIZE                                 0x1
#define _T2RST_T2RSEL5_LENGTH                               0x1
#define _T2RST_T2RSEL5_MASK                                 0x20
#define _T2RST_T2RSEL6_POSN                                 0x6
#define _T2RST_T2RSEL6_POSITION                             0x6
#define _T2RST_T2RSEL6_SIZE                                 0x1
#define _T2RST_T2RSEL6_LENGTH                               0x1
#define _T2RST_T2RSEL6_MASK                                 0x40

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x328);
#ifndef _LIB_BUILD
asm("TMR3L equ 0328h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L                  :8;
    };
    struct {
        unsigned TMR3L0                 :1;
        unsigned TMR3L1                 :1;
        unsigned TMR3L2                 :1;
        unsigned TMR3L3                 :1;
        unsigned TMR3L4                 :1;
        unsigned TMR3L5                 :1;
        unsigned TMR3L6                 :1;
        unsigned TMR3L7                 :1;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x328);
// bitfield macros
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF
#define _TMR3L_TMR3L0_POSN                                  0x0
#define _TMR3L_TMR3L0_POSITION                              0x0
#define _TMR3L_TMR3L0_SIZE                                  0x1
#define _TMR3L_TMR3L0_LENGTH                                0x1
#define _TMR3L_TMR3L0_MASK                                  0x1
#define _TMR3L_TMR3L1_POSN                                  0x1
#define _TMR3L_TMR3L1_POSITION                              0x1
#define _TMR3L_TMR3L1_SIZE                                  0x1
#define _TMR3L_TMR3L1_LENGTH                                0x1
#define _TMR3L_TMR3L1_MASK                                  0x2
#define _TMR3L_TMR3L2_POSN                                  0x2
#define _TMR3L_TMR3L2_POSITION                              0x2
#define _TMR3L_TMR3L2_SIZE                                  0x1
#define _TMR3L_TMR3L2_LENGTH                                0x1
#define _TMR3L_TMR3L2_MASK                                  0x4
#define _TMR3L_TMR3L3_POSN                                  0x3
#define _TMR3L_TMR3L3_POSITION                              0x3
#define _TMR3L_TMR3L3_SIZE                                  0x1
#define _TMR3L_TMR3L3_LENGTH                                0x1
#define _TMR3L_TMR3L3_MASK                                  0x8
#define _TMR3L_TMR3L4_POSN                                  0x4
#define _TMR3L_TMR3L4_POSITION                              0x4
#define _TMR3L_TMR3L4_SIZE                                  0x1
#define _TMR3L_TMR3L4_LENGTH                                0x1
#define _TMR3L_TMR3L4_MASK                                  0x10
#define _TMR3L_TMR3L5_POSN                                  0x5
#define _TMR3L_TMR3L5_POSITION                              0x5
#define _TMR3L_TMR3L5_SIZE                                  0x1
#define _TMR3L_TMR3L5_LENGTH                                0x1
#define _TMR3L_TMR3L5_MASK                                  0x20
#define _TMR3L_TMR3L6_POSN                                  0x6
#define _TMR3L_TMR3L6_POSITION                              0x6
#define _TMR3L_TMR3L6_SIZE                                  0x1
#define _TMR3L_TMR3L6_LENGTH                                0x1
#define _TMR3L_TMR3L6_MASK                                  0x40
#define _TMR3L_TMR3L7_POSN                                  0x7
#define _TMR3L_TMR3L7_POSITION                              0x7
#define _TMR3L_TMR3L7_SIZE                                  0x1
#define _TMR3L_TMR3L7_LENGTH                                0x1
#define _TMR3L_TMR3L7_MASK                                  0x80

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x329);
#ifndef _LIB_BUILD
asm("TMR3H equ 0329h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H                  :8;
    };
    struct {
        unsigned TMR3H0                 :1;
        unsigned TMR3H1                 :1;
        unsigned TMR3H2                 :1;
        unsigned TMR3H3                 :1;
        unsigned TMR3H4                 :1;
        unsigned TMR3H5                 :1;
        unsigned TMR3H6                 :1;
        unsigned TMR3H7                 :1;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x329);
// bitfield macros
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF
#define _TMR3H_TMR3H0_POSN                                  0x0
#define _TMR3H_TMR3H0_POSITION                              0x0
#define _TMR3H_TMR3H0_SIZE                                  0x1
#define _TMR3H_TMR3H0_LENGTH                                0x1
#define _TMR3H_TMR3H0_MASK                                  0x1
#define _TMR3H_TMR3H1_POSN                                  0x1
#define _TMR3H_TMR3H1_POSITION                              0x1
#define _TMR3H_TMR3H1_SIZE                                  0x1
#define _TMR3H_TMR3H1_LENGTH                                0x1
#define _TMR3H_TMR3H1_MASK                                  0x2
#define _TMR3H_TMR3H2_POSN                                  0x2
#define _TMR3H_TMR3H2_POSITION                              0x2
#define _TMR3H_TMR3H2_SIZE                                  0x1
#define _TMR3H_TMR3H2_LENGTH                                0x1
#define _TMR3H_TMR3H2_MASK                                  0x4
#define _TMR3H_TMR3H3_POSN                                  0x3
#define _TMR3H_TMR3H3_POSITION                              0x3
#define _TMR3H_TMR3H3_SIZE                                  0x1
#define _TMR3H_TMR3H3_LENGTH                                0x1
#define _TMR3H_TMR3H3_MASK                                  0x8
#define _TMR3H_TMR3H4_POSN                                  0x4
#define _TMR3H_TMR3H4_POSITION                              0x4
#define _TMR3H_TMR3H4_SIZE                                  0x1
#define _TMR3H_TMR3H4_LENGTH                                0x1
#define _TMR3H_TMR3H4_MASK                                  0x10
#define _TMR3H_TMR3H5_POSN                                  0x5
#define _TMR3H_TMR3H5_POSITION                              0x5
#define _TMR3H_TMR3H5_SIZE                                  0x1
#define _TMR3H_TMR3H5_LENGTH                                0x1
#define _TMR3H_TMR3H5_MASK                                  0x20
#define _TMR3H_TMR3H6_POSN                                  0x6
#define _TMR3H_TMR3H6_POSITION                              0x6
#define _TMR3H_TMR3H6_SIZE                                  0x1
#define _TMR3H_TMR3H6_LENGTH                                0x1
#define _TMR3H_TMR3H6_MASK                                  0x40
#define _TMR3H_TMR3H7_POSN                                  0x7
#define _TMR3H_TMR3H7_POSITION                              0x7
#define _TMR3H_TMR3H7_SIZE                                  0x1
#define _TMR3H_TMR3H7_LENGTH                                0x1
#define _TMR3H_TMR3H7_MASK                                  0x80

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x32A);
#ifndef _LIB_BUILD
asm("T3CON equ 032Ah");
#endif
// aliases
extern volatile unsigned char           TMR3CON             __at(0x32A);
#ifndef _LIB_BUILD
asm("TMR3CON equ 032Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned NOT_T3SYNC             :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x32A);
// bitfield macros
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_NOT_SYNC_POSN                                0x2
#define _T3CON_NOT_SYNC_POSITION                            0x2
#define _T3CON_NOT_SYNC_SIZE                                0x1
#define _T3CON_NOT_SYNC_LENGTH                              0x1
#define _T3CON_NOT_SYNC_MASK                                0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_T3RD16_POSN                                  0x1
#define _T3CON_T3RD16_POSITION                              0x1
#define _T3CON_T3RD16_SIZE                                  0x1
#define _T3CON_T3RD16_LENGTH                                0x1
#define _T3CON_T3RD16_MASK                                  0x2
#define _T3CON_NOT_T3SYNC_POSN                              0x2
#define _T3CON_NOT_T3SYNC_POSITION                          0x2
#define _T3CON_NOT_T3SYNC_SIZE                              0x1
#define _T3CON_NOT_T3SYNC_LENGTH                            0x1
#define _T3CON_NOT_T3SYNC_MASK                              0x4
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_CKPS0_POSN                                   0x4
#define _T3CON_CKPS0_POSITION                               0x4
#define _T3CON_CKPS0_SIZE                                   0x1
#define _T3CON_CKPS0_LENGTH                                 0x1
#define _T3CON_CKPS0_MASK                                   0x10
#define _T3CON_CKPS1_POSN                                   0x5
#define _T3CON_CKPS1_POSITION                               0x5
#define _T3CON_CKPS1_SIZE                                   0x1
#define _T3CON_CKPS1_LENGTH                                 0x1
#define _T3CON_CKPS1_MASK                                   0x20
#define _T3CON_RD163_POSN                                   0x1
#define _T3CON_RD163_POSITION                               0x1
#define _T3CON_RD163_SIZE                                   0x1
#define _T3CON_RD163_LENGTH                                 0x1
#define _T3CON_RD163_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned NOT_T3SYNC             :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} TMR3CONbits_t;
extern volatile TMR3CONbits_t TMR3CONbits __at(0x32A);
// bitfield macros
#define _TMR3CON_ON_POSN                                    0x0
#define _TMR3CON_ON_POSITION                                0x0
#define _TMR3CON_ON_SIZE                                    0x1
#define _TMR3CON_ON_LENGTH                                  0x1
#define _TMR3CON_ON_MASK                                    0x1
#define _TMR3CON_RD16_POSN                                  0x1
#define _TMR3CON_RD16_POSITION                              0x1
#define _TMR3CON_RD16_SIZE                                  0x1
#define _TMR3CON_RD16_LENGTH                                0x1
#define _TMR3CON_RD16_MASK                                  0x2
#define _TMR3CON_NOT_SYNC_POSN                              0x2
#define _TMR3CON_NOT_SYNC_POSITION                          0x2
#define _TMR3CON_NOT_SYNC_SIZE                              0x1
#define _TMR3CON_NOT_SYNC_LENGTH                            0x1
#define _TMR3CON_NOT_SYNC_MASK                              0x4
#define _TMR3CON_CKPS_POSN                                  0x4
#define _TMR3CON_CKPS_POSITION                              0x4
#define _TMR3CON_CKPS_SIZE                                  0x2
#define _TMR3CON_CKPS_LENGTH                                0x2
#define _TMR3CON_CKPS_MASK                                  0x30
#define _TMR3CON_TMR3ON_POSN                                0x0
#define _TMR3CON_TMR3ON_POSITION                            0x0
#define _TMR3CON_TMR3ON_SIZE                                0x1
#define _TMR3CON_TMR3ON_LENGTH                              0x1
#define _TMR3CON_TMR3ON_MASK                                0x1
#define _TMR3CON_T3RD16_POSN                                0x1
#define _TMR3CON_T3RD16_POSITION                            0x1
#define _TMR3CON_T3RD16_SIZE                                0x1
#define _TMR3CON_T3RD16_LENGTH                              0x1
#define _TMR3CON_T3RD16_MASK                                0x2
#define _TMR3CON_NOT_T3SYNC_POSN                            0x2
#define _TMR3CON_NOT_T3SYNC_POSITION                        0x2
#define _TMR3CON_NOT_T3SYNC_SIZE                            0x1
#define _TMR3CON_NOT_T3SYNC_LENGTH                          0x1
#define _TMR3CON_NOT_T3SYNC_MASK                            0x4
#define _TMR3CON_T3CKPS0_POSN                               0x4
#define _TMR3CON_T3CKPS0_POSITION                           0x4
#define _TMR3CON_T3CKPS0_SIZE                               0x1
#define _TMR3CON_T3CKPS0_LENGTH                             0x1
#define _TMR3CON_T3CKPS0_MASK                               0x10
#define _TMR3CON_T3CKPS1_POSN                               0x5
#define _TMR3CON_T3CKPS1_POSITION                           0x5
#define _TMR3CON_T3CKPS1_SIZE                               0x1
#define _TMR3CON_T3CKPS1_LENGTH                             0x1
#define _TMR3CON_T3CKPS1_MASK                               0x20
#define _TMR3CON_CKPS0_POSN                                 0x4
#define _TMR3CON_CKPS0_POSITION                             0x4
#define _TMR3CON_CKPS0_SIZE                                 0x1
#define _TMR3CON_CKPS0_LENGTH                               0x1
#define _TMR3CON_CKPS0_MASK                                 0x10
#define _TMR3CON_CKPS1_POSN                                 0x5
#define _TMR3CON_CKPS1_POSITION                             0x5
#define _TMR3CON_CKPS1_SIZE                                 0x1
#define _TMR3CON_CKPS1_LENGTH                               0x1
#define _TMR3CON_CKPS1_MASK                                 0x20
#define _TMR3CON_RD163_POSN                                 0x1
#define _TMR3CON_RD163_POSITION                             0x1
#define _TMR3CON_RD163_SIZE                                 0x1
#define _TMR3CON_RD163_LENGTH                               0x1
#define _TMR3CON_RD163_MASK                                 0x2

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x32B);
#ifndef _LIB_BUILD
asm("T3GCON equ 032Bh");
#endif
// aliases
extern volatile unsigned char           TMR3GCON            __at(0x32B);
#ifndef _LIB_BUILD
asm("TMR3GCON equ 032Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO                  :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T3DONE             :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x32B);
// bitfield macros
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_POSN                                    0x3
#define _T3GCON_GGO_POSITION                                0x3
#define _T3GCON_GGO_SIZE                                    0x1
#define _T3GCON_GGO_LENGTH                                  0x1
#define _T3GCON_GGO_MASK                                    0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_POSN                                  0x3
#define _T3GCON_T3GGO_POSITION                              0x3
#define _T3GCON_T3GGO_SIZE                                  0x1
#define _T3GCON_T3GGO_LENGTH                                0x1
#define _T3GCON_T3GGO_MASK                                  0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_T3GE_POSN                                   0x7
#define _T3GCON_T3GE_POSITION                               0x7
#define _T3GCON_T3GE_SIZE                                   0x1
#define _T3GCON_T3GE_LENGTH                                 0x1
#define _T3GCON_T3GE_MASK                                   0x80
#define _T3GCON_NOT_DONE_POSN                               0x3
#define _T3GCON_NOT_DONE_POSITION                           0x3
#define _T3GCON_NOT_DONE_SIZE                               0x1
#define _T3GCON_NOT_DONE_LENGTH                             0x1
#define _T3GCON_NOT_DONE_MASK                               0x8
#define _T3GCON_NOT_T3DONE_POSN                             0x3
#define _T3GCON_NOT_T3DONE_POSITION                         0x3
#define _T3GCON_NOT_T3DONE_SIZE                             0x1
#define _T3GCON_NOT_T3DONE_LENGTH                           0x1
#define _T3GCON_NOT_T3DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO                  :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T3DONE             :1;
    };
} TMR3GCONbits_t;
extern volatile TMR3GCONbits_t TMR3GCONbits __at(0x32B);
// bitfield macros
#define _TMR3GCON_GVAL_POSN                                 0x2
#define _TMR3GCON_GVAL_POSITION                             0x2
#define _TMR3GCON_GVAL_SIZE                                 0x1
#define _TMR3GCON_GVAL_LENGTH                               0x1
#define _TMR3GCON_GVAL_MASK                                 0x4
#define _TMR3GCON_GGO_POSN                                  0x3
#define _TMR3GCON_GGO_POSITION                              0x3
#define _TMR3GCON_GGO_SIZE                                  0x1
#define _TMR3GCON_GGO_LENGTH                                0x1
#define _TMR3GCON_GGO_MASK                                  0x8
#define _TMR3GCON_GSPM_POSN                                 0x4
#define _TMR3GCON_GSPM_POSITION                             0x4
#define _TMR3GCON_GSPM_SIZE                                 0x1
#define _TMR3GCON_GSPM_LENGTH                               0x1
#define _TMR3GCON_GSPM_MASK                                 0x10
#define _TMR3GCON_GTM_POSN                                  0x5
#define _TMR3GCON_GTM_POSITION                              0x5
#define _TMR3GCON_GTM_SIZE                                  0x1
#define _TMR3GCON_GTM_LENGTH                                0x1
#define _TMR3GCON_GTM_MASK                                  0x20
#define _TMR3GCON_GPOL_POSN                                 0x6
#define _TMR3GCON_GPOL_POSITION                             0x6
#define _TMR3GCON_GPOL_SIZE                                 0x1
#define _TMR3GCON_GPOL_LENGTH                               0x1
#define _TMR3GCON_GPOL_MASK                                 0x40
#define _TMR3GCON_GE_POSN                                   0x7
#define _TMR3GCON_GE_POSITION                               0x7
#define _TMR3GCON_GE_SIZE                                   0x1
#define _TMR3GCON_GE_LENGTH                                 0x1
#define _TMR3GCON_GE_MASK                                   0x80
#define _TMR3GCON_T3GVAL_POSN                               0x2
#define _TMR3GCON_T3GVAL_POSITION                           0x2
#define _TMR3GCON_T3GVAL_SIZE                               0x1
#define _TMR3GCON_T3GVAL_LENGTH                             0x1
#define _TMR3GCON_T3GVAL_MASK                               0x4
#define _TMR3GCON_T3GGO_POSN                                0x3
#define _TMR3GCON_T3GGO_POSITION                            0x3
#define _TMR3GCON_T3GGO_SIZE                                0x1
#define _TMR3GCON_T3GGO_LENGTH                              0x1
#define _TMR3GCON_T3GGO_MASK                                0x8
#define _TMR3GCON_T3GSPM_POSN                               0x4
#define _TMR3GCON_T3GSPM_POSITION                           0x4
#define _TMR3GCON_T3GSPM_SIZE                               0x1
#define _TMR3GCON_T3GSPM_LENGTH                             0x1
#define _TMR3GCON_T3GSPM_MASK                               0x10
#define _TMR3GCON_T3GTM_POSN                                0x5
#define _TMR3GCON_T3GTM_POSITION                            0x5
#define _TMR3GCON_T3GTM_SIZE                                0x1
#define _TMR3GCON_T3GTM_LENGTH                              0x1
#define _TMR3GCON_T3GTM_MASK                                0x20
#define _TMR3GCON_T3GPOL_POSN                               0x6
#define _TMR3GCON_T3GPOL_POSITION                           0x6
#define _TMR3GCON_T3GPOL_SIZE                               0x1
#define _TMR3GCON_T3GPOL_LENGTH                             0x1
#define _TMR3GCON_T3GPOL_MASK                               0x40
#define _TMR3GCON_T3GE_POSN                                 0x7
#define _TMR3GCON_T3GE_POSITION                             0x7
#define _TMR3GCON_T3GE_SIZE                                 0x1
#define _TMR3GCON_T3GE_LENGTH                               0x1
#define _TMR3GCON_T3GE_MASK                                 0x80
#define _TMR3GCON_NOT_DONE_POSN                             0x3
#define _TMR3GCON_NOT_DONE_POSITION                         0x3
#define _TMR3GCON_NOT_DONE_SIZE                             0x1
#define _TMR3GCON_NOT_DONE_LENGTH                           0x1
#define _TMR3GCON_NOT_DONE_MASK                             0x8
#define _TMR3GCON_NOT_T3DONE_POSN                           0x3
#define _TMR3GCON_NOT_T3DONE_POSITION                       0x3
#define _TMR3GCON_NOT_T3DONE_SIZE                           0x1
#define _TMR3GCON_NOT_T3DONE_LENGTH                         0x1
#define _TMR3GCON_NOT_T3DONE_MASK                           0x8

// Register: T3GATE
#define T3GATE T3GATE
extern volatile unsigned char           T3GATE              __at(0x32C);
#ifndef _LIB_BUILD
asm("T3GATE equ 032Ch");
#endif
// aliases
extern volatile unsigned char           TMR3GATE            __at(0x32C);
#ifndef _LIB_BUILD
asm("TMR3GATE equ 032Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
        unsigned T3GSS5                 :1;
    };
} T3GATEbits_t;
extern volatile T3GATEbits_t T3GATEbits __at(0x32C);
// bitfield macros
#define _T3GATE_GSS_POSN                                    0x0
#define _T3GATE_GSS_POSITION                                0x0
#define _T3GATE_GSS_SIZE                                    0x8
#define _T3GATE_GSS_LENGTH                                  0x8
#define _T3GATE_GSS_MASK                                    0xFF
#define _T3GATE_GSS0_POSN                                   0x0
#define _T3GATE_GSS0_POSITION                               0x0
#define _T3GATE_GSS0_SIZE                                   0x1
#define _T3GATE_GSS0_LENGTH                                 0x1
#define _T3GATE_GSS0_MASK                                   0x1
#define _T3GATE_GSS1_POSN                                   0x1
#define _T3GATE_GSS1_POSITION                               0x1
#define _T3GATE_GSS1_SIZE                                   0x1
#define _T3GATE_GSS1_LENGTH                                 0x1
#define _T3GATE_GSS1_MASK                                   0x2
#define _T3GATE_GSS2_POSN                                   0x2
#define _T3GATE_GSS2_POSITION                               0x2
#define _T3GATE_GSS2_SIZE                                   0x1
#define _T3GATE_GSS2_LENGTH                                 0x1
#define _T3GATE_GSS2_MASK                                   0x4
#define _T3GATE_GSS3_POSN                                   0x3
#define _T3GATE_GSS3_POSITION                               0x3
#define _T3GATE_GSS3_SIZE                                   0x1
#define _T3GATE_GSS3_LENGTH                                 0x1
#define _T3GATE_GSS3_MASK                                   0x8
#define _T3GATE_GSS4_POSN                                   0x4
#define _T3GATE_GSS4_POSITION                               0x4
#define _T3GATE_GSS4_SIZE                                   0x1
#define _T3GATE_GSS4_LENGTH                                 0x1
#define _T3GATE_GSS4_MASK                                   0x10
#define _T3GATE_GSS5_POSN                                   0x5
#define _T3GATE_GSS5_POSITION                               0x5
#define _T3GATE_GSS5_SIZE                                   0x1
#define _T3GATE_GSS5_LENGTH                                 0x1
#define _T3GATE_GSS5_MASK                                   0x20
#define _T3GATE_T3GSS0_POSN                                 0x0
#define _T3GATE_T3GSS0_POSITION                             0x0
#define _T3GATE_T3GSS0_SIZE                                 0x1
#define _T3GATE_T3GSS0_LENGTH                               0x1
#define _T3GATE_T3GSS0_MASK                                 0x1
#define _T3GATE_T3GSS1_POSN                                 0x1
#define _T3GATE_T3GSS1_POSITION                             0x1
#define _T3GATE_T3GSS1_SIZE                                 0x1
#define _T3GATE_T3GSS1_LENGTH                               0x1
#define _T3GATE_T3GSS1_MASK                                 0x2
#define _T3GATE_T3GSS2_POSN                                 0x2
#define _T3GATE_T3GSS2_POSITION                             0x2
#define _T3GATE_T3GSS2_SIZE                                 0x1
#define _T3GATE_T3GSS2_LENGTH                               0x1
#define _T3GATE_T3GSS2_MASK                                 0x4
#define _T3GATE_T3GSS3_POSN                                 0x3
#define _T3GATE_T3GSS3_POSITION                             0x3
#define _T3GATE_T3GSS3_SIZE                                 0x1
#define _T3GATE_T3GSS3_LENGTH                               0x1
#define _T3GATE_T3GSS3_MASK                                 0x8
#define _T3GATE_T3GSS4_POSN                                 0x4
#define _T3GATE_T3GSS4_POSITION                             0x4
#define _T3GATE_T3GSS4_SIZE                                 0x1
#define _T3GATE_T3GSS4_LENGTH                               0x1
#define _T3GATE_T3GSS4_MASK                                 0x10
#define _T3GATE_T3GSS5_POSN                                 0x5
#define _T3GATE_T3GSS5_POSITION                             0x5
#define _T3GATE_T3GSS5_SIZE                                 0x1
#define _T3GATE_T3GSS5_LENGTH                               0x1
#define _T3GATE_T3GSS5_MASK                                 0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
        unsigned T3GSS5                 :1;
    };
} TMR3GATEbits_t;
extern volatile TMR3GATEbits_t TMR3GATEbits __at(0x32C);
// bitfield macros
#define _TMR3GATE_GSS_POSN                                  0x0
#define _TMR3GATE_GSS_POSITION                              0x0
#define _TMR3GATE_GSS_SIZE                                  0x8
#define _TMR3GATE_GSS_LENGTH                                0x8
#define _TMR3GATE_GSS_MASK                                  0xFF
#define _TMR3GATE_GSS0_POSN                                 0x0
#define _TMR3GATE_GSS0_POSITION                             0x0
#define _TMR3GATE_GSS0_SIZE                                 0x1
#define _TMR3GATE_GSS0_LENGTH                               0x1
#define _TMR3GATE_GSS0_MASK                                 0x1
#define _TMR3GATE_GSS1_POSN                                 0x1
#define _TMR3GATE_GSS1_POSITION                             0x1
#define _TMR3GATE_GSS1_SIZE                                 0x1
#define _TMR3GATE_GSS1_LENGTH                               0x1
#define _TMR3GATE_GSS1_MASK                                 0x2
#define _TMR3GATE_GSS2_POSN                                 0x2
#define _TMR3GATE_GSS2_POSITION                             0x2
#define _TMR3GATE_GSS2_SIZE                                 0x1
#define _TMR3GATE_GSS2_LENGTH                               0x1
#define _TMR3GATE_GSS2_MASK                                 0x4
#define _TMR3GATE_GSS3_POSN                                 0x3
#define _TMR3GATE_GSS3_POSITION                             0x3
#define _TMR3GATE_GSS3_SIZE                                 0x1
#define _TMR3GATE_GSS3_LENGTH                               0x1
#define _TMR3GATE_GSS3_MASK                                 0x8
#define _TMR3GATE_GSS4_POSN                                 0x4
#define _TMR3GATE_GSS4_POSITION                             0x4
#define _TMR3GATE_GSS4_SIZE                                 0x1
#define _TMR3GATE_GSS4_LENGTH                               0x1
#define _TMR3GATE_GSS4_MASK                                 0x10
#define _TMR3GATE_GSS5_POSN                                 0x5
#define _TMR3GATE_GSS5_POSITION                             0x5
#define _TMR3GATE_GSS5_SIZE                                 0x1
#define _TMR3GATE_GSS5_LENGTH                               0x1
#define _TMR3GATE_GSS5_MASK                                 0x20
#define _TMR3GATE_T3GSS0_POSN                               0x0
#define _TMR3GATE_T3GSS0_POSITION                           0x0
#define _TMR3GATE_T3GSS0_SIZE                               0x1
#define _TMR3GATE_T3GSS0_LENGTH                             0x1
#define _TMR3GATE_T3GSS0_MASK                               0x1
#define _TMR3GATE_T3GSS1_POSN                               0x1
#define _TMR3GATE_T3GSS1_POSITION                           0x1
#define _TMR3GATE_T3GSS1_SIZE                               0x1
#define _TMR3GATE_T3GSS1_LENGTH                             0x1
#define _TMR3GATE_T3GSS1_MASK                               0x2
#define _TMR3GATE_T3GSS2_POSN                               0x2
#define _TMR3GATE_T3GSS2_POSITION                           0x2
#define _TMR3GATE_T3GSS2_SIZE                               0x1
#define _TMR3GATE_T3GSS2_LENGTH                             0x1
#define _TMR3GATE_T3GSS2_MASK                               0x4
#define _TMR3GATE_T3GSS3_POSN                               0x3
#define _TMR3GATE_T3GSS3_POSITION                           0x3
#define _TMR3GATE_T3GSS3_SIZE                               0x1
#define _TMR3GATE_T3GSS3_LENGTH                             0x1
#define _TMR3GATE_T3GSS3_MASK                               0x8
#define _TMR3GATE_T3GSS4_POSN                               0x4
#define _TMR3GATE_T3GSS4_POSITION                           0x4
#define _TMR3GATE_T3GSS4_SIZE                               0x1
#define _TMR3GATE_T3GSS4_LENGTH                             0x1
#define _TMR3GATE_T3GSS4_MASK                               0x10
#define _TMR3GATE_T3GSS5_POSN                               0x5
#define _TMR3GATE_T3GSS5_POSITION                           0x5
#define _TMR3GATE_T3GSS5_SIZE                               0x1
#define _TMR3GATE_T3GSS5_LENGTH                             0x1
#define _TMR3GATE_T3GSS5_MASK                               0x20

// Register: T3CLK
#define T3CLK T3CLK
extern volatile unsigned char           T3CLK               __at(0x32D);
#ifndef _LIB_BUILD
asm("T3CLK equ 032Dh");
#endif
// aliases
extern volatile unsigned char           TMR3CLK             __at(0x32D);
#ifndef _LIB_BUILD
asm("TMR3CLK equ 032Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
        unsigned T3CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T3CLKbits_t;
extern volatile T3CLKbits_t T3CLKbits __at(0x32D);
// bitfield macros
#define _T3CLK_CS_POSN                                      0x0
#define _T3CLK_CS_POSITION                                  0x0
#define _T3CLK_CS_SIZE                                      0x8
#define _T3CLK_CS_LENGTH                                    0x8
#define _T3CLK_CS_MASK                                      0xFF
#define _T3CLK_T3CS0_POSN                                   0x0
#define _T3CLK_T3CS0_POSITION                               0x0
#define _T3CLK_T3CS0_SIZE                                   0x1
#define _T3CLK_T3CS0_LENGTH                                 0x1
#define _T3CLK_T3CS0_MASK                                   0x1
#define _T3CLK_T3CS1_POSN                                   0x1
#define _T3CLK_T3CS1_POSITION                               0x1
#define _T3CLK_T3CS1_SIZE                                   0x1
#define _T3CLK_T3CS1_LENGTH                                 0x1
#define _T3CLK_T3CS1_MASK                                   0x2
#define _T3CLK_T3CS2_POSN                                   0x2
#define _T3CLK_T3CS2_POSITION                               0x2
#define _T3CLK_T3CS2_SIZE                                   0x1
#define _T3CLK_T3CS2_LENGTH                                 0x1
#define _T3CLK_T3CS2_MASK                                   0x4
#define _T3CLK_T3CS3_POSN                                   0x3
#define _T3CLK_T3CS3_POSITION                               0x3
#define _T3CLK_T3CS3_SIZE                                   0x1
#define _T3CLK_T3CS3_LENGTH                                 0x1
#define _T3CLK_T3CS3_MASK                                   0x8
#define _T3CLK_T3CS4_POSN                                   0x4
#define _T3CLK_T3CS4_POSITION                               0x4
#define _T3CLK_T3CS4_SIZE                                   0x1
#define _T3CLK_T3CS4_LENGTH                                 0x1
#define _T3CLK_T3CS4_MASK                                   0x10
#define _T3CLK_CS0_POSN                                     0x0
#define _T3CLK_CS0_POSITION                                 0x0
#define _T3CLK_CS0_SIZE                                     0x1
#define _T3CLK_CS0_LENGTH                                   0x1
#define _T3CLK_CS0_MASK                                     0x1
#define _T3CLK_CS1_POSN                                     0x1
#define _T3CLK_CS1_POSITION                                 0x1
#define _T3CLK_CS1_SIZE                                     0x1
#define _T3CLK_CS1_LENGTH                                   0x1
#define _T3CLK_CS1_MASK                                     0x2
#define _T3CLK_CS2_POSN                                     0x2
#define _T3CLK_CS2_POSITION                                 0x2
#define _T3CLK_CS2_SIZE                                     0x1
#define _T3CLK_CS2_LENGTH                                   0x1
#define _T3CLK_CS2_MASK                                     0x4
#define _T3CLK_CS3_POSN                                     0x3
#define _T3CLK_CS3_POSITION                                 0x3
#define _T3CLK_CS3_SIZE                                     0x1
#define _T3CLK_CS3_LENGTH                                   0x1
#define _T3CLK_CS3_MASK                                     0x8
#define _T3CLK_CS4_POSN                                     0x4
#define _T3CLK_CS4_POSITION                                 0x4
#define _T3CLK_CS4_SIZE                                     0x1
#define _T3CLK_CS4_LENGTH                                   0x1
#define _T3CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
        unsigned T3CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR3CLKbits_t;
extern volatile TMR3CLKbits_t TMR3CLKbits __at(0x32D);
// bitfield macros
#define _TMR3CLK_CS_POSN                                    0x0
#define _TMR3CLK_CS_POSITION                                0x0
#define _TMR3CLK_CS_SIZE                                    0x8
#define _TMR3CLK_CS_LENGTH                                  0x8
#define _TMR3CLK_CS_MASK                                    0xFF
#define _TMR3CLK_T3CS0_POSN                                 0x0
#define _TMR3CLK_T3CS0_POSITION                             0x0
#define _TMR3CLK_T3CS0_SIZE                                 0x1
#define _TMR3CLK_T3CS0_LENGTH                               0x1
#define _TMR3CLK_T3CS0_MASK                                 0x1
#define _TMR3CLK_T3CS1_POSN                                 0x1
#define _TMR3CLK_T3CS1_POSITION                             0x1
#define _TMR3CLK_T3CS1_SIZE                                 0x1
#define _TMR3CLK_T3CS1_LENGTH                               0x1
#define _TMR3CLK_T3CS1_MASK                                 0x2
#define _TMR3CLK_T3CS2_POSN                                 0x2
#define _TMR3CLK_T3CS2_POSITION                             0x2
#define _TMR3CLK_T3CS2_SIZE                                 0x1
#define _TMR3CLK_T3CS2_LENGTH                               0x1
#define _TMR3CLK_T3CS2_MASK                                 0x4
#define _TMR3CLK_T3CS3_POSN                                 0x3
#define _TMR3CLK_T3CS3_POSITION                             0x3
#define _TMR3CLK_T3CS3_SIZE                                 0x1
#define _TMR3CLK_T3CS3_LENGTH                               0x1
#define _TMR3CLK_T3CS3_MASK                                 0x8
#define _TMR3CLK_T3CS4_POSN                                 0x4
#define _TMR3CLK_T3CS4_POSITION                             0x4
#define _TMR3CLK_T3CS4_SIZE                                 0x1
#define _TMR3CLK_T3CS4_LENGTH                               0x1
#define _TMR3CLK_T3CS4_MASK                                 0x10
#define _TMR3CLK_CS0_POSN                                   0x0
#define _TMR3CLK_CS0_POSITION                               0x0
#define _TMR3CLK_CS0_SIZE                                   0x1
#define _TMR3CLK_CS0_LENGTH                                 0x1
#define _TMR3CLK_CS0_MASK                                   0x1
#define _TMR3CLK_CS1_POSN                                   0x1
#define _TMR3CLK_CS1_POSITION                               0x1
#define _TMR3CLK_CS1_SIZE                                   0x1
#define _TMR3CLK_CS1_LENGTH                                 0x1
#define _TMR3CLK_CS1_MASK                                   0x2
#define _TMR3CLK_CS2_POSN                                   0x2
#define _TMR3CLK_CS2_POSITION                               0x2
#define _TMR3CLK_CS2_SIZE                                   0x1
#define _TMR3CLK_CS2_LENGTH                                 0x1
#define _TMR3CLK_CS2_MASK                                   0x4
#define _TMR3CLK_CS3_POSN                                   0x3
#define _TMR3CLK_CS3_POSITION                               0x3
#define _TMR3CLK_CS3_SIZE                                   0x1
#define _TMR3CLK_CS3_LENGTH                                 0x1
#define _TMR3CLK_CS3_MASK                                   0x8
#define _TMR3CLK_CS4_POSN                                   0x4
#define _TMR3CLK_CS4_POSITION                               0x4
#define _TMR3CLK_CS4_SIZE                                   0x1
#define _TMR3CLK_CS4_LENGTH                                 0x1
#define _TMR3CLK_CS4_MASK                                   0x10

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x32E);
#ifndef _LIB_BUILD
asm("T4TMR equ 032Eh");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x32E);
#ifndef _LIB_BUILD
asm("TMR4 equ 032Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x32E);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x32E);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x32F);
#ifndef _LIB_BUILD
asm("T4PR equ 032Fh");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x32F);
#ifndef _LIB_BUILD
asm("PR4 equ 032Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x32F);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x32F);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x330);
#ifndef _LIB_BUILD
asm("T4CON equ 0330h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x330);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x331);
#ifndef _LIB_BUILD
asm("T4HLT equ 0331h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x331);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x332);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0332h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0x332);
#ifndef _LIB_BUILD
asm("T4CLK equ 0332h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T4CS                   :8;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
        unsigned T4CS4                  :1;
        unsigned T4CS5                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x332);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x8
#define _T4CLKCON_CS_LENGTH                                 0x8
#define _T4CLKCON_CS_MASK                                   0xFF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_CS4_POSN                                  0x4
#define _T4CLKCON_CS4_POSITION                              0x4
#define _T4CLKCON_CS4_SIZE                                  0x1
#define _T4CLKCON_CS4_LENGTH                                0x1
#define _T4CLKCON_CS4_MASK                                  0x10
#define _T4CLKCON_CS5_POSN                                  0x5
#define _T4CLKCON_CS5_POSITION                              0x5
#define _T4CLKCON_CS5_SIZE                                  0x1
#define _T4CLKCON_CS5_LENGTH                                0x1
#define _T4CLKCON_CS5_MASK                                  0x20
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x8
#define _T4CLKCON_T4CS_LENGTH                               0x8
#define _T4CLKCON_T4CS_MASK                                 0xFF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
#define _T4CLKCON_T4CS4_POSN                                0x4
#define _T4CLKCON_T4CS4_POSITION                            0x4
#define _T4CLKCON_T4CS4_SIZE                                0x1
#define _T4CLKCON_T4CS4_LENGTH                              0x1
#define _T4CLKCON_T4CS4_MASK                                0x10
#define _T4CLKCON_T4CS5_POSN                                0x5
#define _T4CLKCON_T4CS5_POSITION                            0x5
#define _T4CLKCON_T4CS5_SIZE                                0x1
#define _T4CLKCON_T4CS5_LENGTH                              0x1
#define _T4CLKCON_T4CS5_MASK                                0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T4CS                   :8;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
        unsigned T4CS4                  :1;
        unsigned T4CS5                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0x332);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x8
#define _T4CLK_CS_LENGTH                                    0x8
#define _T4CLK_CS_MASK                                      0xFF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_CS4_POSN                                     0x4
#define _T4CLK_CS4_POSITION                                 0x4
#define _T4CLK_CS4_SIZE                                     0x1
#define _T4CLK_CS4_LENGTH                                   0x1
#define _T4CLK_CS4_MASK                                     0x10
#define _T4CLK_CS5_POSN                                     0x5
#define _T4CLK_CS5_POSITION                                 0x5
#define _T4CLK_CS5_SIZE                                     0x1
#define _T4CLK_CS5_LENGTH                                   0x1
#define _T4CLK_CS5_MASK                                     0x20
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x8
#define _T4CLK_T4CS_LENGTH                                  0x8
#define _T4CLK_T4CS_MASK                                    0xFF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8
#define _T4CLK_T4CS4_POSN                                   0x4
#define _T4CLK_T4CS4_POSITION                               0x4
#define _T4CLK_T4CS4_SIZE                                   0x1
#define _T4CLK_T4CS4_LENGTH                                 0x1
#define _T4CLK_T4CS4_MASK                                   0x10
#define _T4CLK_T4CS5_POSN                                   0x5
#define _T4CLK_T4CS5_POSITION                               0x5
#define _T4CLK_T4CS5_SIZE                                   0x1
#define _T4CLK_T4CS5_LENGTH                                 0x1
#define _T4CLK_T4CS5_MASK                                   0x20

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x333);
#ifndef _LIB_BUILD
asm("T4RST equ 0333h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
        unsigned RSEL5                  :1;
        unsigned RSEL6                  :1;
    };
    struct {
        unsigned T4RSEL                 :8;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
        unsigned T4RSEL4                :1;
        unsigned T4RSEL5                :1;
        unsigned T4RSEL6                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x333);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x8
#define _T4RST_RSEL_LENGTH                                  0x8
#define _T4RST_RSEL_MASK                                    0xFF
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_RSEL4_POSN                                   0x4
#define _T4RST_RSEL4_POSITION                               0x4
#define _T4RST_RSEL4_SIZE                                   0x1
#define _T4RST_RSEL4_LENGTH                                 0x1
#define _T4RST_RSEL4_MASK                                   0x10
#define _T4RST_RSEL5_POSN                                   0x5
#define _T4RST_RSEL5_POSITION                               0x5
#define _T4RST_RSEL5_SIZE                                   0x1
#define _T4RST_RSEL5_LENGTH                                 0x1
#define _T4RST_RSEL5_MASK                                   0x20
#define _T4RST_RSEL6_POSN                                   0x6
#define _T4RST_RSEL6_POSITION                               0x6
#define _T4RST_RSEL6_SIZE                                   0x1
#define _T4RST_RSEL6_LENGTH                                 0x1
#define _T4RST_RSEL6_MASK                                   0x40
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x8
#define _T4RST_T4RSEL_LENGTH                                0x8
#define _T4RST_T4RSEL_MASK                                  0xFF
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8
#define _T4RST_T4RSEL4_POSN                                 0x4
#define _T4RST_T4RSEL4_POSITION                             0x4
#define _T4RST_T4RSEL4_SIZE                                 0x1
#define _T4RST_T4RSEL4_LENGTH                               0x1
#define _T4RST_T4RSEL4_MASK                                 0x10
#define _T4RST_T4RSEL5_POSN                                 0x5
#define _T4RST_T4RSEL5_POSITION                             0x5
#define _T4RST_T4RSEL5_SIZE                                 0x1
#define _T4RST_T4RSEL5_LENGTH                               0x1
#define _T4RST_T4RSEL5_MASK                                 0x20
#define _T4RST_T4RSEL6_POSN                                 0x6
#define _T4RST_T4RSEL6_POSITION                             0x6
#define _T4RST_T4RSEL6_SIZE                                 0x1
#define _T4RST_T4RSEL6_LENGTH                               0x1
#define _T4RST_T4RSEL6_MASK                                 0x40

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0x334);
#ifndef _LIB_BUILD
asm("TMR5L equ 0334h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L                  :8;
    };
    struct {
        unsigned TMR5L0                 :1;
        unsigned TMR5L1                 :1;
        unsigned TMR5L2                 :1;
        unsigned TMR5L3                 :1;
        unsigned TMR5L4                 :1;
        unsigned TMR5L5                 :1;
        unsigned TMR5L6                 :1;
        unsigned TMR5L7                 :1;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0x334);
// bitfield macros
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF
#define _TMR5L_TMR5L0_POSN                                  0x0
#define _TMR5L_TMR5L0_POSITION                              0x0
#define _TMR5L_TMR5L0_SIZE                                  0x1
#define _TMR5L_TMR5L0_LENGTH                                0x1
#define _TMR5L_TMR5L0_MASK                                  0x1
#define _TMR5L_TMR5L1_POSN                                  0x1
#define _TMR5L_TMR5L1_POSITION                              0x1
#define _TMR5L_TMR5L1_SIZE                                  0x1
#define _TMR5L_TMR5L1_LENGTH                                0x1
#define _TMR5L_TMR5L1_MASK                                  0x2
#define _TMR5L_TMR5L2_POSN                                  0x2
#define _TMR5L_TMR5L2_POSITION                              0x2
#define _TMR5L_TMR5L2_SIZE                                  0x1
#define _TMR5L_TMR5L2_LENGTH                                0x1
#define _TMR5L_TMR5L2_MASK                                  0x4
#define _TMR5L_TMR5L3_POSN                                  0x3
#define _TMR5L_TMR5L3_POSITION                              0x3
#define _TMR5L_TMR5L3_SIZE                                  0x1
#define _TMR5L_TMR5L3_LENGTH                                0x1
#define _TMR5L_TMR5L3_MASK                                  0x8
#define _TMR5L_TMR5L4_POSN                                  0x4
#define _TMR5L_TMR5L4_POSITION                              0x4
#define _TMR5L_TMR5L4_SIZE                                  0x1
#define _TMR5L_TMR5L4_LENGTH                                0x1
#define _TMR5L_TMR5L4_MASK                                  0x10
#define _TMR5L_TMR5L5_POSN                                  0x5
#define _TMR5L_TMR5L5_POSITION                              0x5
#define _TMR5L_TMR5L5_SIZE                                  0x1
#define _TMR5L_TMR5L5_LENGTH                                0x1
#define _TMR5L_TMR5L5_MASK                                  0x20
#define _TMR5L_TMR5L6_POSN                                  0x6
#define _TMR5L_TMR5L6_POSITION                              0x6
#define _TMR5L_TMR5L6_SIZE                                  0x1
#define _TMR5L_TMR5L6_LENGTH                                0x1
#define _TMR5L_TMR5L6_MASK                                  0x40
#define _TMR5L_TMR5L7_POSN                                  0x7
#define _TMR5L_TMR5L7_POSITION                              0x7
#define _TMR5L_TMR5L7_SIZE                                  0x1
#define _TMR5L_TMR5L7_LENGTH                                0x1
#define _TMR5L_TMR5L7_MASK                                  0x80

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0x335);
#ifndef _LIB_BUILD
asm("TMR5H equ 0335h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H                  :8;
    };
    struct {
        unsigned TMR5H0                 :1;
        unsigned TMR5H1                 :1;
        unsigned TMR5H2                 :1;
        unsigned TMR5H3                 :1;
        unsigned TMR5H4                 :1;
        unsigned TMR5H5                 :1;
        unsigned TMR5H6                 :1;
        unsigned TMR5H7                 :1;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0x335);
// bitfield macros
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF
#define _TMR5H_TMR5H0_POSN                                  0x0
#define _TMR5H_TMR5H0_POSITION                              0x0
#define _TMR5H_TMR5H0_SIZE                                  0x1
#define _TMR5H_TMR5H0_LENGTH                                0x1
#define _TMR5H_TMR5H0_MASK                                  0x1
#define _TMR5H_TMR5H1_POSN                                  0x1
#define _TMR5H_TMR5H1_POSITION                              0x1
#define _TMR5H_TMR5H1_SIZE                                  0x1
#define _TMR5H_TMR5H1_LENGTH                                0x1
#define _TMR5H_TMR5H1_MASK                                  0x2
#define _TMR5H_TMR5H2_POSN                                  0x2
#define _TMR5H_TMR5H2_POSITION                              0x2
#define _TMR5H_TMR5H2_SIZE                                  0x1
#define _TMR5H_TMR5H2_LENGTH                                0x1
#define _TMR5H_TMR5H2_MASK                                  0x4
#define _TMR5H_TMR5H3_POSN                                  0x3
#define _TMR5H_TMR5H3_POSITION                              0x3
#define _TMR5H_TMR5H3_SIZE                                  0x1
#define _TMR5H_TMR5H3_LENGTH                                0x1
#define _TMR5H_TMR5H3_MASK                                  0x8
#define _TMR5H_TMR5H4_POSN                                  0x4
#define _TMR5H_TMR5H4_POSITION                              0x4
#define _TMR5H_TMR5H4_SIZE                                  0x1
#define _TMR5H_TMR5H4_LENGTH                                0x1
#define _TMR5H_TMR5H4_MASK                                  0x10
#define _TMR5H_TMR5H5_POSN                                  0x5
#define _TMR5H_TMR5H5_POSITION                              0x5
#define _TMR5H_TMR5H5_SIZE                                  0x1
#define _TMR5H_TMR5H5_LENGTH                                0x1
#define _TMR5H_TMR5H5_MASK                                  0x20
#define _TMR5H_TMR5H6_POSN                                  0x6
#define _TMR5H_TMR5H6_POSITION                              0x6
#define _TMR5H_TMR5H6_SIZE                                  0x1
#define _TMR5H_TMR5H6_LENGTH                                0x1
#define _TMR5H_TMR5H6_MASK                                  0x40
#define _TMR5H_TMR5H7_POSN                                  0x7
#define _TMR5H_TMR5H7_POSITION                              0x7
#define _TMR5H_TMR5H7_SIZE                                  0x1
#define _TMR5H_TMR5H7_LENGTH                                0x1
#define _TMR5H_TMR5H7_MASK                                  0x80

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0x336);
#ifndef _LIB_BUILD
asm("T5CON equ 0336h");
#endif
// aliases
extern volatile unsigned char           TMR5CON             __at(0x336);
#ifndef _LIB_BUILD
asm("TMR5CON equ 0336h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned NOT_T5SYNC             :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0x336);
// bitfield macros
#define _T5CON_ON_POSN                                      0x0
#define _T5CON_ON_POSITION                                  0x0
#define _T5CON_ON_SIZE                                      0x1
#define _T5CON_ON_LENGTH                                    0x1
#define _T5CON_ON_MASK                                      0x1
#define _T5CON_RD16_POSN                                    0x1
#define _T5CON_RD16_POSITION                                0x1
#define _T5CON_RD16_SIZE                                    0x1
#define _T5CON_RD16_LENGTH                                  0x1
#define _T5CON_RD16_MASK                                    0x2
#define _T5CON_NOT_SYNC_POSN                                0x2
#define _T5CON_NOT_SYNC_POSITION                            0x2
#define _T5CON_NOT_SYNC_SIZE                                0x1
#define _T5CON_NOT_SYNC_LENGTH                              0x1
#define _T5CON_NOT_SYNC_MASK                                0x4
#define _T5CON_CKPS_POSN                                    0x4
#define _T5CON_CKPS_POSITION                                0x4
#define _T5CON_CKPS_SIZE                                    0x2
#define _T5CON_CKPS_LENGTH                                  0x2
#define _T5CON_CKPS_MASK                                    0x30
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_T5RD16_POSN                                  0x1
#define _T5CON_T5RD16_POSITION                              0x1
#define _T5CON_T5RD16_SIZE                                  0x1
#define _T5CON_T5RD16_LENGTH                                0x1
#define _T5CON_T5RD16_MASK                                  0x2
#define _T5CON_NOT_T5SYNC_POSN                              0x2
#define _T5CON_NOT_T5SYNC_POSITION                          0x2
#define _T5CON_NOT_T5SYNC_SIZE                              0x1
#define _T5CON_NOT_T5SYNC_LENGTH                            0x1
#define _T5CON_NOT_T5SYNC_MASK                              0x4
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_CKPS0_POSN                                   0x4
#define _T5CON_CKPS0_POSITION                               0x4
#define _T5CON_CKPS0_SIZE                                   0x1
#define _T5CON_CKPS0_LENGTH                                 0x1
#define _T5CON_CKPS0_MASK                                   0x10
#define _T5CON_CKPS1_POSN                                   0x5
#define _T5CON_CKPS1_POSITION                               0x5
#define _T5CON_CKPS1_SIZE                                   0x1
#define _T5CON_CKPS1_LENGTH                                 0x1
#define _T5CON_CKPS1_MASK                                   0x20
#define _T5CON_RD165_POSN                                   0x1
#define _T5CON_RD165_POSITION                               0x1
#define _T5CON_RD165_SIZE                                   0x1
#define _T5CON_RD165_LENGTH                                 0x1
#define _T5CON_RD165_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned NOT_T5SYNC             :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} TMR5CONbits_t;
extern volatile TMR5CONbits_t TMR5CONbits __at(0x336);
// bitfield macros
#define _TMR5CON_ON_POSN                                    0x0
#define _TMR5CON_ON_POSITION                                0x0
#define _TMR5CON_ON_SIZE                                    0x1
#define _TMR5CON_ON_LENGTH                                  0x1
#define _TMR5CON_ON_MASK                                    0x1
#define _TMR5CON_RD16_POSN                                  0x1
#define _TMR5CON_RD16_POSITION                              0x1
#define _TMR5CON_RD16_SIZE                                  0x1
#define _TMR5CON_RD16_LENGTH                                0x1
#define _TMR5CON_RD16_MASK                                  0x2
#define _TMR5CON_NOT_SYNC_POSN                              0x2
#define _TMR5CON_NOT_SYNC_POSITION                          0x2
#define _TMR5CON_NOT_SYNC_SIZE                              0x1
#define _TMR5CON_NOT_SYNC_LENGTH                            0x1
#define _TMR5CON_NOT_SYNC_MASK                              0x4
#define _TMR5CON_CKPS_POSN                                  0x4
#define _TMR5CON_CKPS_POSITION                              0x4
#define _TMR5CON_CKPS_SIZE                                  0x2
#define _TMR5CON_CKPS_LENGTH                                0x2
#define _TMR5CON_CKPS_MASK                                  0x30
#define _TMR5CON_TMR5ON_POSN                                0x0
#define _TMR5CON_TMR5ON_POSITION                            0x0
#define _TMR5CON_TMR5ON_SIZE                                0x1
#define _TMR5CON_TMR5ON_LENGTH                              0x1
#define _TMR5CON_TMR5ON_MASK                                0x1
#define _TMR5CON_T5RD16_POSN                                0x1
#define _TMR5CON_T5RD16_POSITION                            0x1
#define _TMR5CON_T5RD16_SIZE                                0x1
#define _TMR5CON_T5RD16_LENGTH                              0x1
#define _TMR5CON_T5RD16_MASK                                0x2
#define _TMR5CON_NOT_T5SYNC_POSN                            0x2
#define _TMR5CON_NOT_T5SYNC_POSITION                        0x2
#define _TMR5CON_NOT_T5SYNC_SIZE                            0x1
#define _TMR5CON_NOT_T5SYNC_LENGTH                          0x1
#define _TMR5CON_NOT_T5SYNC_MASK                            0x4
#define _TMR5CON_T5CKPS0_POSN                               0x4
#define _TMR5CON_T5CKPS0_POSITION                           0x4
#define _TMR5CON_T5CKPS0_SIZE                               0x1
#define _TMR5CON_T5CKPS0_LENGTH                             0x1
#define _TMR5CON_T5CKPS0_MASK                               0x10
#define _TMR5CON_T5CKPS1_POSN                               0x5
#define _TMR5CON_T5CKPS1_POSITION                           0x5
#define _TMR5CON_T5CKPS1_SIZE                               0x1
#define _TMR5CON_T5CKPS1_LENGTH                             0x1
#define _TMR5CON_T5CKPS1_MASK                               0x20
#define _TMR5CON_CKPS0_POSN                                 0x4
#define _TMR5CON_CKPS0_POSITION                             0x4
#define _TMR5CON_CKPS0_SIZE                                 0x1
#define _TMR5CON_CKPS0_LENGTH                               0x1
#define _TMR5CON_CKPS0_MASK                                 0x10
#define _TMR5CON_CKPS1_POSN                                 0x5
#define _TMR5CON_CKPS1_POSITION                             0x5
#define _TMR5CON_CKPS1_SIZE                                 0x1
#define _TMR5CON_CKPS1_LENGTH                               0x1
#define _TMR5CON_CKPS1_MASK                                 0x20
#define _TMR5CON_RD165_POSN                                 0x1
#define _TMR5CON_RD165_POSITION                             0x1
#define _TMR5CON_RD165_SIZE                                 0x1
#define _TMR5CON_RD165_LENGTH                               0x1
#define _TMR5CON_RD165_MASK                                 0x2

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0x337);
#ifndef _LIB_BUILD
asm("T5GCON equ 0337h");
#endif
// aliases
extern volatile unsigned char           TMR5GCON            __at(0x337);
#ifndef _LIB_BUILD
asm("TMR5GCON equ 0337h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO                  :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T5DONE             :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0x337);
// bitfield macros
#define _T5GCON_GVAL_POSN                                   0x2
#define _T5GCON_GVAL_POSITION                               0x2
#define _T5GCON_GVAL_SIZE                                   0x1
#define _T5GCON_GVAL_LENGTH                                 0x1
#define _T5GCON_GVAL_MASK                                   0x4
#define _T5GCON_GGO_POSN                                    0x3
#define _T5GCON_GGO_POSITION                                0x3
#define _T5GCON_GGO_SIZE                                    0x1
#define _T5GCON_GGO_LENGTH                                  0x1
#define _T5GCON_GGO_MASK                                    0x8
#define _T5GCON_GSPM_POSN                                   0x4
#define _T5GCON_GSPM_POSITION                               0x4
#define _T5GCON_GSPM_SIZE                                   0x1
#define _T5GCON_GSPM_LENGTH                                 0x1
#define _T5GCON_GSPM_MASK                                   0x10
#define _T5GCON_GTM_POSN                                    0x5
#define _T5GCON_GTM_POSITION                                0x5
#define _T5GCON_GTM_SIZE                                    0x1
#define _T5GCON_GTM_LENGTH                                  0x1
#define _T5GCON_GTM_MASK                                    0x20
#define _T5GCON_GPOL_POSN                                   0x6
#define _T5GCON_GPOL_POSITION                               0x6
#define _T5GCON_GPOL_SIZE                                   0x1
#define _T5GCON_GPOL_LENGTH                                 0x1
#define _T5GCON_GPOL_MASK                                   0x40
#define _T5GCON_GE_POSN                                     0x7
#define _T5GCON_GE_POSITION                                 0x7
#define _T5GCON_GE_SIZE                                     0x1
#define _T5GCON_GE_LENGTH                                   0x1
#define _T5GCON_GE_MASK                                     0x80
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_POSN                                  0x3
#define _T5GCON_T5GGO_POSITION                              0x3
#define _T5GCON_T5GGO_SIZE                                  0x1
#define _T5GCON_T5GGO_LENGTH                                0x1
#define _T5GCON_T5GGO_MASK                                  0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_T5GE_POSN                                   0x7
#define _T5GCON_T5GE_POSITION                               0x7
#define _T5GCON_T5GE_SIZE                                   0x1
#define _T5GCON_T5GE_LENGTH                                 0x1
#define _T5GCON_T5GE_MASK                                   0x80
#define _T5GCON_NOT_DONE_POSN                               0x3
#define _T5GCON_NOT_DONE_POSITION                           0x3
#define _T5GCON_NOT_DONE_SIZE                               0x1
#define _T5GCON_NOT_DONE_LENGTH                             0x1
#define _T5GCON_NOT_DONE_MASK                               0x8
#define _T5GCON_NOT_T5DONE_POSN                             0x3
#define _T5GCON_NOT_T5DONE_POSITION                         0x3
#define _T5GCON_NOT_T5DONE_SIZE                             0x1
#define _T5GCON_NOT_T5DONE_LENGTH                           0x1
#define _T5GCON_NOT_T5DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO                  :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T5DONE             :1;
    };
} TMR5GCONbits_t;
extern volatile TMR5GCONbits_t TMR5GCONbits __at(0x337);
// bitfield macros
#define _TMR5GCON_GVAL_POSN                                 0x2
#define _TMR5GCON_GVAL_POSITION                             0x2
#define _TMR5GCON_GVAL_SIZE                                 0x1
#define _TMR5GCON_GVAL_LENGTH                               0x1
#define _TMR5GCON_GVAL_MASK                                 0x4
#define _TMR5GCON_GGO_POSN                                  0x3
#define _TMR5GCON_GGO_POSITION                              0x3
#define _TMR5GCON_GGO_SIZE                                  0x1
#define _TMR5GCON_GGO_LENGTH                                0x1
#define _TMR5GCON_GGO_MASK                                  0x8
#define _TMR5GCON_GSPM_POSN                                 0x4
#define _TMR5GCON_GSPM_POSITION                             0x4
#define _TMR5GCON_GSPM_SIZE                                 0x1
#define _TMR5GCON_GSPM_LENGTH                               0x1
#define _TMR5GCON_GSPM_MASK                                 0x10
#define _TMR5GCON_GTM_POSN                                  0x5
#define _TMR5GCON_GTM_POSITION                              0x5
#define _TMR5GCON_GTM_SIZE                                  0x1
#define _TMR5GCON_GTM_LENGTH                                0x1
#define _TMR5GCON_GTM_MASK                                  0x20
#define _TMR5GCON_GPOL_POSN                                 0x6
#define _TMR5GCON_GPOL_POSITION                             0x6
#define _TMR5GCON_GPOL_SIZE                                 0x1
#define _TMR5GCON_GPOL_LENGTH                               0x1
#define _TMR5GCON_GPOL_MASK                                 0x40
#define _TMR5GCON_GE_POSN                                   0x7
#define _TMR5GCON_GE_POSITION                               0x7
#define _TMR5GCON_GE_SIZE                                   0x1
#define _TMR5GCON_GE_LENGTH                                 0x1
#define _TMR5GCON_GE_MASK                                   0x80
#define _TMR5GCON_T5GVAL_POSN                               0x2
#define _TMR5GCON_T5GVAL_POSITION                           0x2
#define _TMR5GCON_T5GVAL_SIZE                               0x1
#define _TMR5GCON_T5GVAL_LENGTH                             0x1
#define _TMR5GCON_T5GVAL_MASK                               0x4
#define _TMR5GCON_T5GGO_POSN                                0x3
#define _TMR5GCON_T5GGO_POSITION                            0x3
#define _TMR5GCON_T5GGO_SIZE                                0x1
#define _TMR5GCON_T5GGO_LENGTH                              0x1
#define _TMR5GCON_T5GGO_MASK                                0x8
#define _TMR5GCON_T5GSPM_POSN                               0x4
#define _TMR5GCON_T5GSPM_POSITION                           0x4
#define _TMR5GCON_T5GSPM_SIZE                               0x1
#define _TMR5GCON_T5GSPM_LENGTH                             0x1
#define _TMR5GCON_T5GSPM_MASK                               0x10
#define _TMR5GCON_T5GTM_POSN                                0x5
#define _TMR5GCON_T5GTM_POSITION                            0x5
#define _TMR5GCON_T5GTM_SIZE                                0x1
#define _TMR5GCON_T5GTM_LENGTH                              0x1
#define _TMR5GCON_T5GTM_MASK                                0x20
#define _TMR5GCON_T5GPOL_POSN                               0x6
#define _TMR5GCON_T5GPOL_POSITION                           0x6
#define _TMR5GCON_T5GPOL_SIZE                               0x1
#define _TMR5GCON_T5GPOL_LENGTH                             0x1
#define _TMR5GCON_T5GPOL_MASK                               0x40
#define _TMR5GCON_T5GE_POSN                                 0x7
#define _TMR5GCON_T5GE_POSITION                             0x7
#define _TMR5GCON_T5GE_SIZE                                 0x1
#define _TMR5GCON_T5GE_LENGTH                               0x1
#define _TMR5GCON_T5GE_MASK                                 0x80
#define _TMR5GCON_NOT_DONE_POSN                             0x3
#define _TMR5GCON_NOT_DONE_POSITION                         0x3
#define _TMR5GCON_NOT_DONE_SIZE                             0x1
#define _TMR5GCON_NOT_DONE_LENGTH                           0x1
#define _TMR5GCON_NOT_DONE_MASK                             0x8
#define _TMR5GCON_NOT_T5DONE_POSN                           0x3
#define _TMR5GCON_NOT_T5DONE_POSITION                       0x3
#define _TMR5GCON_NOT_T5DONE_SIZE                           0x1
#define _TMR5GCON_NOT_T5DONE_LENGTH                         0x1
#define _TMR5GCON_NOT_T5DONE_MASK                           0x8

// Register: T5GATE
#define T5GATE T5GATE
extern volatile unsigned char           T5GATE              __at(0x338);
#ifndef _LIB_BUILD
asm("T5GATE equ 0338h");
#endif
// aliases
extern volatile unsigned char           TMR5GATE            __at(0x338);
#ifndef _LIB_BUILD
asm("TMR5GATE equ 0338h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
        unsigned T5GSS5                 :1;
    };
} T5GATEbits_t;
extern volatile T5GATEbits_t T5GATEbits __at(0x338);
// bitfield macros
#define _T5GATE_GSS_POSN                                    0x0
#define _T5GATE_GSS_POSITION                                0x0
#define _T5GATE_GSS_SIZE                                    0x8
#define _T5GATE_GSS_LENGTH                                  0x8
#define _T5GATE_GSS_MASK                                    0xFF
#define _T5GATE_GSS0_POSN                                   0x0
#define _T5GATE_GSS0_POSITION                               0x0
#define _T5GATE_GSS0_SIZE                                   0x1
#define _T5GATE_GSS0_LENGTH                                 0x1
#define _T5GATE_GSS0_MASK                                   0x1
#define _T5GATE_GSS1_POSN                                   0x1
#define _T5GATE_GSS1_POSITION                               0x1
#define _T5GATE_GSS1_SIZE                                   0x1
#define _T5GATE_GSS1_LENGTH                                 0x1
#define _T5GATE_GSS1_MASK                                   0x2
#define _T5GATE_GSS2_POSN                                   0x2
#define _T5GATE_GSS2_POSITION                               0x2
#define _T5GATE_GSS2_SIZE                                   0x1
#define _T5GATE_GSS2_LENGTH                                 0x1
#define _T5GATE_GSS2_MASK                                   0x4
#define _T5GATE_GSS3_POSN                                   0x3
#define _T5GATE_GSS3_POSITION                               0x3
#define _T5GATE_GSS3_SIZE                                   0x1
#define _T5GATE_GSS3_LENGTH                                 0x1
#define _T5GATE_GSS3_MASK                                   0x8
#define _T5GATE_GSS4_POSN                                   0x4
#define _T5GATE_GSS4_POSITION                               0x4
#define _T5GATE_GSS4_SIZE                                   0x1
#define _T5GATE_GSS4_LENGTH                                 0x1
#define _T5GATE_GSS4_MASK                                   0x10
#define _T5GATE_GSS5_POSN                                   0x5
#define _T5GATE_GSS5_POSITION                               0x5
#define _T5GATE_GSS5_SIZE                                   0x1
#define _T5GATE_GSS5_LENGTH                                 0x1
#define _T5GATE_GSS5_MASK                                   0x20
#define _T5GATE_T5GSS0_POSN                                 0x0
#define _T5GATE_T5GSS0_POSITION                             0x0
#define _T5GATE_T5GSS0_SIZE                                 0x1
#define _T5GATE_T5GSS0_LENGTH                               0x1
#define _T5GATE_T5GSS0_MASK                                 0x1
#define _T5GATE_T5GSS1_POSN                                 0x1
#define _T5GATE_T5GSS1_POSITION                             0x1
#define _T5GATE_T5GSS1_SIZE                                 0x1
#define _T5GATE_T5GSS1_LENGTH                               0x1
#define _T5GATE_T5GSS1_MASK                                 0x2
#define _T5GATE_T5GSS2_POSN                                 0x2
#define _T5GATE_T5GSS2_POSITION                             0x2
#define _T5GATE_T5GSS2_SIZE                                 0x1
#define _T5GATE_T5GSS2_LENGTH                               0x1
#define _T5GATE_T5GSS2_MASK                                 0x4
#define _T5GATE_T5GSS3_POSN                                 0x3
#define _T5GATE_T5GSS3_POSITION                             0x3
#define _T5GATE_T5GSS3_SIZE                                 0x1
#define _T5GATE_T5GSS3_LENGTH                               0x1
#define _T5GATE_T5GSS3_MASK                                 0x8
#define _T5GATE_T5GSS4_POSN                                 0x4
#define _T5GATE_T5GSS4_POSITION                             0x4
#define _T5GATE_T5GSS4_SIZE                                 0x1
#define _T5GATE_T5GSS4_LENGTH                               0x1
#define _T5GATE_T5GSS4_MASK                                 0x10
#define _T5GATE_T5GSS5_POSN                                 0x5
#define _T5GATE_T5GSS5_POSITION                             0x5
#define _T5GATE_T5GSS5_SIZE                                 0x1
#define _T5GATE_T5GSS5_LENGTH                               0x1
#define _T5GATE_T5GSS5_MASK                                 0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
        unsigned GSS5                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
        unsigned T5GSS5                 :1;
    };
} TMR5GATEbits_t;
extern volatile TMR5GATEbits_t TMR5GATEbits __at(0x338);
// bitfield macros
#define _TMR5GATE_GSS_POSN                                  0x0
#define _TMR5GATE_GSS_POSITION                              0x0
#define _TMR5GATE_GSS_SIZE                                  0x8
#define _TMR5GATE_GSS_LENGTH                                0x8
#define _TMR5GATE_GSS_MASK                                  0xFF
#define _TMR5GATE_GSS0_POSN                                 0x0
#define _TMR5GATE_GSS0_POSITION                             0x0
#define _TMR5GATE_GSS0_SIZE                                 0x1
#define _TMR5GATE_GSS0_LENGTH                               0x1
#define _TMR5GATE_GSS0_MASK                                 0x1
#define _TMR5GATE_GSS1_POSN                                 0x1
#define _TMR5GATE_GSS1_POSITION                             0x1
#define _TMR5GATE_GSS1_SIZE                                 0x1
#define _TMR5GATE_GSS1_LENGTH                               0x1
#define _TMR5GATE_GSS1_MASK                                 0x2
#define _TMR5GATE_GSS2_POSN                                 0x2
#define _TMR5GATE_GSS2_POSITION                             0x2
#define _TMR5GATE_GSS2_SIZE                                 0x1
#define _TMR5GATE_GSS2_LENGTH                               0x1
#define _TMR5GATE_GSS2_MASK                                 0x4
#define _TMR5GATE_GSS3_POSN                                 0x3
#define _TMR5GATE_GSS3_POSITION                             0x3
#define _TMR5GATE_GSS3_SIZE                                 0x1
#define _TMR5GATE_GSS3_LENGTH                               0x1
#define _TMR5GATE_GSS3_MASK                                 0x8
#define _TMR5GATE_GSS4_POSN                                 0x4
#define _TMR5GATE_GSS4_POSITION                             0x4
#define _TMR5GATE_GSS4_SIZE                                 0x1
#define _TMR5GATE_GSS4_LENGTH                               0x1
#define _TMR5GATE_GSS4_MASK                                 0x10
#define _TMR5GATE_GSS5_POSN                                 0x5
#define _TMR5GATE_GSS5_POSITION                             0x5
#define _TMR5GATE_GSS5_SIZE                                 0x1
#define _TMR5GATE_GSS5_LENGTH                               0x1
#define _TMR5GATE_GSS5_MASK                                 0x20
#define _TMR5GATE_T5GSS0_POSN                               0x0
#define _TMR5GATE_T5GSS0_POSITION                           0x0
#define _TMR5GATE_T5GSS0_SIZE                               0x1
#define _TMR5GATE_T5GSS0_LENGTH                             0x1
#define _TMR5GATE_T5GSS0_MASK                               0x1
#define _TMR5GATE_T5GSS1_POSN                               0x1
#define _TMR5GATE_T5GSS1_POSITION                           0x1
#define _TMR5GATE_T5GSS1_SIZE                               0x1
#define _TMR5GATE_T5GSS1_LENGTH                             0x1
#define _TMR5GATE_T5GSS1_MASK                               0x2
#define _TMR5GATE_T5GSS2_POSN                               0x2
#define _TMR5GATE_T5GSS2_POSITION                           0x2
#define _TMR5GATE_T5GSS2_SIZE                               0x1
#define _TMR5GATE_T5GSS2_LENGTH                             0x1
#define _TMR5GATE_T5GSS2_MASK                               0x4
#define _TMR5GATE_T5GSS3_POSN                               0x3
#define _TMR5GATE_T5GSS3_POSITION                           0x3
#define _TMR5GATE_T5GSS3_SIZE                               0x1
#define _TMR5GATE_T5GSS3_LENGTH                             0x1
#define _TMR5GATE_T5GSS3_MASK                               0x8
#define _TMR5GATE_T5GSS4_POSN                               0x4
#define _TMR5GATE_T5GSS4_POSITION                           0x4
#define _TMR5GATE_T5GSS4_SIZE                               0x1
#define _TMR5GATE_T5GSS4_LENGTH                             0x1
#define _TMR5GATE_T5GSS4_MASK                               0x10
#define _TMR5GATE_T5GSS5_POSN                               0x5
#define _TMR5GATE_T5GSS5_POSITION                           0x5
#define _TMR5GATE_T5GSS5_SIZE                               0x1
#define _TMR5GATE_T5GSS5_LENGTH                             0x1
#define _TMR5GATE_T5GSS5_MASK                               0x20

// Register: T5CLK
#define T5CLK T5CLK
extern volatile unsigned char           T5CLK               __at(0x339);
#ifndef _LIB_BUILD
asm("T5CLK equ 0339h");
#endif
// aliases
extern volatile unsigned char           TMR5CLK             __at(0x339);
#ifndef _LIB_BUILD
asm("TMR5CLK equ 0339h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
        unsigned T5CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T5CLKbits_t;
extern volatile T5CLKbits_t T5CLKbits __at(0x339);
// bitfield macros
#define _T5CLK_CS_POSN                                      0x0
#define _T5CLK_CS_POSITION                                  0x0
#define _T5CLK_CS_SIZE                                      0x8
#define _T5CLK_CS_LENGTH                                    0x8
#define _T5CLK_CS_MASK                                      0xFF
#define _T5CLK_T5CS0_POSN                                   0x0
#define _T5CLK_T5CS0_POSITION                               0x0
#define _T5CLK_T5CS0_SIZE                                   0x1
#define _T5CLK_T5CS0_LENGTH                                 0x1
#define _T5CLK_T5CS0_MASK                                   0x1
#define _T5CLK_T5CS1_POSN                                   0x1
#define _T5CLK_T5CS1_POSITION                               0x1
#define _T5CLK_T5CS1_SIZE                                   0x1
#define _T5CLK_T5CS1_LENGTH                                 0x1
#define _T5CLK_T5CS1_MASK                                   0x2
#define _T5CLK_T5CS2_POSN                                   0x2
#define _T5CLK_T5CS2_POSITION                               0x2
#define _T5CLK_T5CS2_SIZE                                   0x1
#define _T5CLK_T5CS2_LENGTH                                 0x1
#define _T5CLK_T5CS2_MASK                                   0x4
#define _T5CLK_T5CS3_POSN                                   0x3
#define _T5CLK_T5CS3_POSITION                               0x3
#define _T5CLK_T5CS3_SIZE                                   0x1
#define _T5CLK_T5CS3_LENGTH                                 0x1
#define _T5CLK_T5CS3_MASK                                   0x8
#define _T5CLK_T5CS4_POSN                                   0x4
#define _T5CLK_T5CS4_POSITION                               0x4
#define _T5CLK_T5CS4_SIZE                                   0x1
#define _T5CLK_T5CS4_LENGTH                                 0x1
#define _T5CLK_T5CS4_MASK                                   0x10
#define _T5CLK_CS0_POSN                                     0x0
#define _T5CLK_CS0_POSITION                                 0x0
#define _T5CLK_CS0_SIZE                                     0x1
#define _T5CLK_CS0_LENGTH                                   0x1
#define _T5CLK_CS0_MASK                                     0x1
#define _T5CLK_CS1_POSN                                     0x1
#define _T5CLK_CS1_POSITION                                 0x1
#define _T5CLK_CS1_SIZE                                     0x1
#define _T5CLK_CS1_LENGTH                                   0x1
#define _T5CLK_CS1_MASK                                     0x2
#define _T5CLK_CS2_POSN                                     0x2
#define _T5CLK_CS2_POSITION                                 0x2
#define _T5CLK_CS2_SIZE                                     0x1
#define _T5CLK_CS2_LENGTH                                   0x1
#define _T5CLK_CS2_MASK                                     0x4
#define _T5CLK_CS3_POSN                                     0x3
#define _T5CLK_CS3_POSITION                                 0x3
#define _T5CLK_CS3_SIZE                                     0x1
#define _T5CLK_CS3_LENGTH                                   0x1
#define _T5CLK_CS3_MASK                                     0x8
#define _T5CLK_CS4_POSN                                     0x4
#define _T5CLK_CS4_POSITION                                 0x4
#define _T5CLK_CS4_SIZE                                     0x1
#define _T5CLK_CS4_LENGTH                                   0x1
#define _T5CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
        unsigned T5CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR5CLKbits_t;
extern volatile TMR5CLKbits_t TMR5CLKbits __at(0x339);
// bitfield macros
#define _TMR5CLK_CS_POSN                                    0x0
#define _TMR5CLK_CS_POSITION                                0x0
#define _TMR5CLK_CS_SIZE                                    0x8
#define _TMR5CLK_CS_LENGTH                                  0x8
#define _TMR5CLK_CS_MASK                                    0xFF
#define _TMR5CLK_T5CS0_POSN                                 0x0
#define _TMR5CLK_T5CS0_POSITION                             0x0
#define _TMR5CLK_T5CS0_SIZE                                 0x1
#define _TMR5CLK_T5CS0_LENGTH                               0x1
#define _TMR5CLK_T5CS0_MASK                                 0x1
#define _TMR5CLK_T5CS1_POSN                                 0x1
#define _TMR5CLK_T5CS1_POSITION                             0x1
#define _TMR5CLK_T5CS1_SIZE                                 0x1
#define _TMR5CLK_T5CS1_LENGTH                               0x1
#define _TMR5CLK_T5CS1_MASK                                 0x2
#define _TMR5CLK_T5CS2_POSN                                 0x2
#define _TMR5CLK_T5CS2_POSITION                             0x2
#define _TMR5CLK_T5CS2_SIZE                                 0x1
#define _TMR5CLK_T5CS2_LENGTH                               0x1
#define _TMR5CLK_T5CS2_MASK                                 0x4
#define _TMR5CLK_T5CS3_POSN                                 0x3
#define _TMR5CLK_T5CS3_POSITION                             0x3
#define _TMR5CLK_T5CS3_SIZE                                 0x1
#define _TMR5CLK_T5CS3_LENGTH                               0x1
#define _TMR5CLK_T5CS3_MASK                                 0x8
#define _TMR5CLK_T5CS4_POSN                                 0x4
#define _TMR5CLK_T5CS4_POSITION                             0x4
#define _TMR5CLK_T5CS4_SIZE                                 0x1
#define _TMR5CLK_T5CS4_LENGTH                               0x1
#define _TMR5CLK_T5CS4_MASK                                 0x10
#define _TMR5CLK_CS0_POSN                                   0x0
#define _TMR5CLK_CS0_POSITION                               0x0
#define _TMR5CLK_CS0_SIZE                                   0x1
#define _TMR5CLK_CS0_LENGTH                                 0x1
#define _TMR5CLK_CS0_MASK                                   0x1
#define _TMR5CLK_CS1_POSN                                   0x1
#define _TMR5CLK_CS1_POSITION                               0x1
#define _TMR5CLK_CS1_SIZE                                   0x1
#define _TMR5CLK_CS1_LENGTH                                 0x1
#define _TMR5CLK_CS1_MASK                                   0x2
#define _TMR5CLK_CS2_POSN                                   0x2
#define _TMR5CLK_CS2_POSITION                               0x2
#define _TMR5CLK_CS2_SIZE                                   0x1
#define _TMR5CLK_CS2_LENGTH                                 0x1
#define _TMR5CLK_CS2_MASK                                   0x4
#define _TMR5CLK_CS3_POSN                                   0x3
#define _TMR5CLK_CS3_POSITION                               0x3
#define _TMR5CLK_CS3_SIZE                                   0x1
#define _TMR5CLK_CS3_LENGTH                                 0x1
#define _TMR5CLK_CS3_MASK                                   0x8
#define _TMR5CLK_CS4_POSN                                   0x4
#define _TMR5CLK_CS4_POSITION                               0x4
#define _TMR5CLK_CS4_SIZE                                   0x1
#define _TMR5CLK_CS4_LENGTH                                 0x1
#define _TMR5CLK_CS4_MASK                                   0x10

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0x33A);
#ifndef _LIB_BUILD
asm("T6TMR equ 033Ah");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0x33A);
#ifndef _LIB_BUILD
asm("TMR6 equ 033Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0x33A);
// bitfield macros
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0x33A);
// bitfield macros
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0x33B);
#ifndef _LIB_BUILD
asm("T6PR equ 033Bh");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0x33B);
#ifndef _LIB_BUILD
asm("PR6 equ 033Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0x33B);
// bitfield macros
#define _T6PR_PR6_POSN                                      0x0
#define _T6PR_PR6_POSITION                                  0x0
#define _T6PR_PR6_SIZE                                      0x8
#define _T6PR_PR6_LENGTH                                    0x8
#define _T6PR_PR6_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0x33B);
// bitfield macros
#define _PR6_PR6_POSN                                       0x0
#define _PR6_PR6_POSITION                                   0x0
#define _PR6_PR6_SIZE                                       0x8
#define _PR6_PR6_LENGTH                                     0x8
#define _PR6_PR6_MASK                                       0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0x33C);
#ifndef _LIB_BUILD
asm("T6CON equ 033Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0x33C);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0x33D);
#ifndef _LIB_BUILD
asm("T6HLT equ 033Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0x33D);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0x33E);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 033Eh");
#endif
// aliases
extern volatile unsigned char           T6CLK               __at(0x33E);
#ifndef _LIB_BUILD
asm("T6CLK equ 033Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T6CS                   :8;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
        unsigned T6CS4                  :1;
        unsigned T6CS5                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0x33E);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x8
#define _T6CLKCON_CS_LENGTH                                 0x8
#define _T6CLKCON_CS_MASK                                   0xFF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_CS4_POSN                                  0x4
#define _T6CLKCON_CS4_POSITION                              0x4
#define _T6CLKCON_CS4_SIZE                                  0x1
#define _T6CLKCON_CS4_LENGTH                                0x1
#define _T6CLKCON_CS4_MASK                                  0x10
#define _T6CLKCON_CS5_POSN                                  0x5
#define _T6CLKCON_CS5_POSITION                              0x5
#define _T6CLKCON_CS5_SIZE                                  0x1
#define _T6CLKCON_CS5_LENGTH                                0x1
#define _T6CLKCON_CS5_MASK                                  0x20
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x8
#define _T6CLKCON_T6CS_LENGTH                               0x8
#define _T6CLKCON_T6CS_MASK                                 0xFF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8
#define _T6CLKCON_T6CS4_POSN                                0x4
#define _T6CLKCON_T6CS4_POSITION                            0x4
#define _T6CLKCON_T6CS4_SIZE                                0x1
#define _T6CLKCON_T6CS4_LENGTH                              0x1
#define _T6CLKCON_T6CS4_MASK                                0x10
#define _T6CLKCON_T6CS5_POSN                                0x5
#define _T6CLKCON_T6CS5_POSITION                            0x5
#define _T6CLKCON_T6CS5_SIZE                                0x1
#define _T6CLKCON_T6CS5_LENGTH                              0x1
#define _T6CLKCON_T6CS5_MASK                                0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
    struct {
        unsigned T6CS                   :8;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
        unsigned T6CS4                  :1;
        unsigned T6CS5                  :1;
    };
} T6CLKbits_t;
extern volatile T6CLKbits_t T6CLKbits __at(0x33E);
// bitfield macros
#define _T6CLK_CS_POSN                                      0x0
#define _T6CLK_CS_POSITION                                  0x0
#define _T6CLK_CS_SIZE                                      0x8
#define _T6CLK_CS_LENGTH                                    0x8
#define _T6CLK_CS_MASK                                      0xFF
#define _T6CLK_CS0_POSN                                     0x0
#define _T6CLK_CS0_POSITION                                 0x0
#define _T6CLK_CS0_SIZE                                     0x1
#define _T6CLK_CS0_LENGTH                                   0x1
#define _T6CLK_CS0_MASK                                     0x1
#define _T6CLK_CS1_POSN                                     0x1
#define _T6CLK_CS1_POSITION                                 0x1
#define _T6CLK_CS1_SIZE                                     0x1
#define _T6CLK_CS1_LENGTH                                   0x1
#define _T6CLK_CS1_MASK                                     0x2
#define _T6CLK_CS2_POSN                                     0x2
#define _T6CLK_CS2_POSITION                                 0x2
#define _T6CLK_CS2_SIZE                                     0x1
#define _T6CLK_CS2_LENGTH                                   0x1
#define _T6CLK_CS2_MASK                                     0x4
#define _T6CLK_CS3_POSN                                     0x3
#define _T6CLK_CS3_POSITION                                 0x3
#define _T6CLK_CS3_SIZE                                     0x1
#define _T6CLK_CS3_LENGTH                                   0x1
#define _T6CLK_CS3_MASK                                     0x8
#define _T6CLK_CS4_POSN                                     0x4
#define _T6CLK_CS4_POSITION                                 0x4
#define _T6CLK_CS4_SIZE                                     0x1
#define _T6CLK_CS4_LENGTH                                   0x1
#define _T6CLK_CS4_MASK                                     0x10
#define _T6CLK_CS5_POSN                                     0x5
#define _T6CLK_CS5_POSITION                                 0x5
#define _T6CLK_CS5_SIZE                                     0x1
#define _T6CLK_CS5_LENGTH                                   0x1
#define _T6CLK_CS5_MASK                                     0x20
#define _T6CLK_T6CS_POSN                                    0x0
#define _T6CLK_T6CS_POSITION                                0x0
#define _T6CLK_T6CS_SIZE                                    0x8
#define _T6CLK_T6CS_LENGTH                                  0x8
#define _T6CLK_T6CS_MASK                                    0xFF
#define _T6CLK_T6CS0_POSN                                   0x0
#define _T6CLK_T6CS0_POSITION                               0x0
#define _T6CLK_T6CS0_SIZE                                   0x1
#define _T6CLK_T6CS0_LENGTH                                 0x1
#define _T6CLK_T6CS0_MASK                                   0x1
#define _T6CLK_T6CS1_POSN                                   0x1
#define _T6CLK_T6CS1_POSITION                               0x1
#define _T6CLK_T6CS1_SIZE                                   0x1
#define _T6CLK_T6CS1_LENGTH                                 0x1
#define _T6CLK_T6CS1_MASK                                   0x2
#define _T6CLK_T6CS2_POSN                                   0x2
#define _T6CLK_T6CS2_POSITION                               0x2
#define _T6CLK_T6CS2_SIZE                                   0x1
#define _T6CLK_T6CS2_LENGTH                                 0x1
#define _T6CLK_T6CS2_MASK                                   0x4
#define _T6CLK_T6CS3_POSN                                   0x3
#define _T6CLK_T6CS3_POSITION                               0x3
#define _T6CLK_T6CS3_SIZE                                   0x1
#define _T6CLK_T6CS3_LENGTH                                 0x1
#define _T6CLK_T6CS3_MASK                                   0x8
#define _T6CLK_T6CS4_POSN                                   0x4
#define _T6CLK_T6CS4_POSITION                               0x4
#define _T6CLK_T6CS4_SIZE                                   0x1
#define _T6CLK_T6CS4_LENGTH                                 0x1
#define _T6CLK_T6CS4_MASK                                   0x10
#define _T6CLK_T6CS5_POSN                                   0x5
#define _T6CLK_T6CS5_POSITION                               0x5
#define _T6CLK_T6CS5_SIZE                                   0x1
#define _T6CLK_T6CS5_LENGTH                                 0x1
#define _T6CLK_T6CS5_MASK                                   0x20

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0x33F);
#ifndef _LIB_BUILD
asm("T6RST equ 033Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
        unsigned RSEL5                  :1;
        unsigned RSEL6                  :1;
    };
    struct {
        unsigned T6RSEL                 :8;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
        unsigned T6RSEL4                :1;
        unsigned T6RSEL5                :1;
        unsigned T6RSEL6                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0x33F);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x8
#define _T6RST_RSEL_LENGTH                                  0x8
#define _T6RST_RSEL_MASK                                    0xFF
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_RSEL4_POSN                                   0x4
#define _T6RST_RSEL4_POSITION                               0x4
#define _T6RST_RSEL4_SIZE                                   0x1
#define _T6RST_RSEL4_LENGTH                                 0x1
#define _T6RST_RSEL4_MASK                                   0x10
#define _T6RST_RSEL5_POSN                                   0x5
#define _T6RST_RSEL5_POSITION                               0x5
#define _T6RST_RSEL5_SIZE                                   0x1
#define _T6RST_RSEL5_LENGTH                                 0x1
#define _T6RST_RSEL5_MASK                                   0x20
#define _T6RST_RSEL6_POSN                                   0x6
#define _T6RST_RSEL6_POSITION                               0x6
#define _T6RST_RSEL6_SIZE                                   0x1
#define _T6RST_RSEL6_LENGTH                                 0x1
#define _T6RST_RSEL6_MASK                                   0x40
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x8
#define _T6RST_T6RSEL_LENGTH                                0x8
#define _T6RST_T6RSEL_MASK                                  0xFF
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8
#define _T6RST_T6RSEL4_POSN                                 0x4
#define _T6RST_T6RSEL4_POSITION                             0x4
#define _T6RST_T6RSEL4_SIZE                                 0x1
#define _T6RST_T6RSEL4_LENGTH                               0x1
#define _T6RST_T6RSEL4_MASK                                 0x10
#define _T6RST_T6RSEL5_POSN                                 0x5
#define _T6RST_T6RSEL5_POSITION                             0x5
#define _T6RST_T6RSEL5_SIZE                                 0x1
#define _T6RST_T6RSEL5_LENGTH                               0x1
#define _T6RST_T6RSEL5_MASK                                 0x20
#define _T6RST_T6RSEL6_POSN                                 0x6
#define _T6RST_T6RSEL6_POSITION                             0x6
#define _T6RST_T6RSEL6_SIZE                                 0x1
#define _T6RST_T6RSEL6_LENGTH                               0x1
#define _T6RST_T6RSEL6_MASK                                 0x40

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x340);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0340h");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x340);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0340h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x340);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x341);
#ifndef _LIB_BUILD
asm("CCPR1H equ 0341h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x341);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x342);
#ifndef _LIB_BUILD
asm("CCP1CON equ 0342h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x342);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x343);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 0343h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
        unsigned CCP1CTS3               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x343);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CTS3_POSN                                  0x3
#define _CCP1CAP_CTS3_POSITION                              0x3
#define _CCP1CAP_CTS3_SIZE                                  0x1
#define _CCP1CAP_CTS3_LENGTH                                0x1
#define _CCP1CAP_CTS3_MASK                                  0x8
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4
#define _CCP1CAP_CCP1CTS3_POSN                              0x3
#define _CCP1CAP_CCP1CTS3_POSITION                          0x3
#define _CCP1CAP_CCP1CTS3_SIZE                              0x1
#define _CCP1CAP_CCP1CTS3_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS3_MASK                              0x8

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x344);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0344h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x344);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0344h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x344);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x345);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0345h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x345);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x346);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0346h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x346);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x347);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0347h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
        unsigned CCP2CTS3               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x347);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CTS3_POSN                                  0x3
#define _CCP2CAP_CTS3_POSITION                              0x3
#define _CCP2CAP_CTS3_SIZE                                  0x1
#define _CCP2CAP_CTS3_LENGTH                                0x1
#define _CCP2CAP_CTS3_MASK                                  0x8
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4
#define _CCP2CAP_CCP2CTS3_POSN                              0x3
#define _CCP2CAP_CCP2CTS3_POSITION                          0x3
#define _CCP2CAP_CCP2CTS3_SIZE                              0x1
#define _CCP2CAP_CCP2CTS3_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS3_MASK                              0x8

// Register: CCPR3
#define CCPR3 CCPR3
extern volatile unsigned short          CCPR3               __at(0x348);
#ifndef _LIB_BUILD
asm("CCPR3 equ 0348h");
#endif

// Register: CCPR3L
#define CCPR3L CCPR3L
extern volatile unsigned char           CCPR3L              __at(0x348);
#ifndef _LIB_BUILD
asm("CCPR3L equ 0348h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR3Lbits_t;
extern volatile CCPR3Lbits_t CCPR3Lbits __at(0x348);
// bitfield macros
#define _CCPR3L_RL_POSN                                     0x0
#define _CCPR3L_RL_POSITION                                 0x0
#define _CCPR3L_RL_SIZE                                     0x8
#define _CCPR3L_RL_LENGTH                                   0x8
#define _CCPR3L_RL_MASK                                     0xFF

// Register: CCPR3H
#define CCPR3H CCPR3H
extern volatile unsigned char           CCPR3H              __at(0x349);
#ifndef _LIB_BUILD
asm("CCPR3H equ 0349h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR3Hbits_t;
extern volatile CCPR3Hbits_t CCPR3Hbits __at(0x349);
// bitfield macros
#define _CCPR3H_RH_POSN                                     0x0
#define _CCPR3H_RH_POSITION                                 0x0
#define _CCPR3H_RH_SIZE                                     0x8
#define _CCPR3H_RH_LENGTH                                   0x8
#define _CCPR3H_RH_MASK                                     0xFF

// Register: CCP3CON
#define CCP3CON CCP3CON
extern volatile unsigned char           CCP3CON             __at(0x34A);
#ifndef _LIB_BUILD
asm("CCP3CON equ 034Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP3MODE               :4;
        unsigned CCP3FMT                :1;
        unsigned CCP3OUT                :1;
        unsigned                        :1;
        unsigned CCP3EN                 :1;
    };
    struct {
        unsigned CCP3MODE0              :1;
        unsigned CCP3MODE1              :1;
        unsigned CCP3MODE2              :1;
        unsigned CCP3MODE3              :1;
    };
} CCP3CONbits_t;
extern volatile CCP3CONbits_t CCP3CONbits __at(0x34A);
// bitfield macros
#define _CCP3CON_MODE_POSN                                  0x0
#define _CCP3CON_MODE_POSITION                              0x0
#define _CCP3CON_MODE_SIZE                                  0x4
#define _CCP3CON_MODE_LENGTH                                0x4
#define _CCP3CON_MODE_MASK                                  0xF
#define _CCP3CON_FMT_POSN                                   0x4
#define _CCP3CON_FMT_POSITION                               0x4
#define _CCP3CON_FMT_SIZE                                   0x1
#define _CCP3CON_FMT_LENGTH                                 0x1
#define _CCP3CON_FMT_MASK                                   0x10
#define _CCP3CON_OUT_POSN                                   0x5
#define _CCP3CON_OUT_POSITION                               0x5
#define _CCP3CON_OUT_SIZE                                   0x1
#define _CCP3CON_OUT_LENGTH                                 0x1
#define _CCP3CON_OUT_MASK                                   0x20
#define _CCP3CON_EN_POSN                                    0x7
#define _CCP3CON_EN_POSITION                                0x7
#define _CCP3CON_EN_SIZE                                    0x1
#define _CCP3CON_EN_LENGTH                                  0x1
#define _CCP3CON_EN_MASK                                    0x80
#define _CCP3CON_MODE0_POSN                                 0x0
#define _CCP3CON_MODE0_POSITION                             0x0
#define _CCP3CON_MODE0_SIZE                                 0x1
#define _CCP3CON_MODE0_LENGTH                               0x1
#define _CCP3CON_MODE0_MASK                                 0x1
#define _CCP3CON_MODE1_POSN                                 0x1
#define _CCP3CON_MODE1_POSITION                             0x1
#define _CCP3CON_MODE1_SIZE                                 0x1
#define _CCP3CON_MODE1_LENGTH                               0x1
#define _CCP3CON_MODE1_MASK                                 0x2
#define _CCP3CON_MODE2_POSN                                 0x2
#define _CCP3CON_MODE2_POSITION                             0x2
#define _CCP3CON_MODE2_SIZE                                 0x1
#define _CCP3CON_MODE2_LENGTH                               0x1
#define _CCP3CON_MODE2_MASK                                 0x4
#define _CCP3CON_MODE3_POSN                                 0x3
#define _CCP3CON_MODE3_POSITION                             0x3
#define _CCP3CON_MODE3_SIZE                                 0x1
#define _CCP3CON_MODE3_LENGTH                               0x1
#define _CCP3CON_MODE3_MASK                                 0x8
#define _CCP3CON_CCP3MODE_POSN                              0x0
#define _CCP3CON_CCP3MODE_POSITION                          0x0
#define _CCP3CON_CCP3MODE_SIZE                              0x4
#define _CCP3CON_CCP3MODE_LENGTH                            0x4
#define _CCP3CON_CCP3MODE_MASK                              0xF
#define _CCP3CON_CCP3FMT_POSN                               0x4
#define _CCP3CON_CCP3FMT_POSITION                           0x4
#define _CCP3CON_CCP3FMT_SIZE                               0x1
#define _CCP3CON_CCP3FMT_LENGTH                             0x1
#define _CCP3CON_CCP3FMT_MASK                               0x10
#define _CCP3CON_CCP3OUT_POSN                               0x5
#define _CCP3CON_CCP3OUT_POSITION                           0x5
#define _CCP3CON_CCP3OUT_SIZE                               0x1
#define _CCP3CON_CCP3OUT_LENGTH                             0x1
#define _CCP3CON_CCP3OUT_MASK                               0x20
#define _CCP3CON_CCP3EN_POSN                                0x7
#define _CCP3CON_CCP3EN_POSITION                            0x7
#define _CCP3CON_CCP3EN_SIZE                                0x1
#define _CCP3CON_CCP3EN_LENGTH                              0x1
#define _CCP3CON_CCP3EN_MASK                                0x80
#define _CCP3CON_CCP3MODE0_POSN                             0x0
#define _CCP3CON_CCP3MODE0_POSITION                         0x0
#define _CCP3CON_CCP3MODE0_SIZE                             0x1
#define _CCP3CON_CCP3MODE0_LENGTH                           0x1
#define _CCP3CON_CCP3MODE0_MASK                             0x1
#define _CCP3CON_CCP3MODE1_POSN                             0x1
#define _CCP3CON_CCP3MODE1_POSITION                         0x1
#define _CCP3CON_CCP3MODE1_SIZE                             0x1
#define _CCP3CON_CCP3MODE1_LENGTH                           0x1
#define _CCP3CON_CCP3MODE1_MASK                             0x2
#define _CCP3CON_CCP3MODE2_POSN                             0x2
#define _CCP3CON_CCP3MODE2_POSITION                         0x2
#define _CCP3CON_CCP3MODE2_SIZE                             0x1
#define _CCP3CON_CCP3MODE2_LENGTH                           0x1
#define _CCP3CON_CCP3MODE2_MASK                             0x4
#define _CCP3CON_CCP3MODE3_POSN                             0x3
#define _CCP3CON_CCP3MODE3_POSITION                         0x3
#define _CCP3CON_CCP3MODE3_SIZE                             0x1
#define _CCP3CON_CCP3MODE3_LENGTH                           0x1
#define _CCP3CON_CCP3MODE3_MASK                             0x8

// Register: CCP3CAP
#define CCP3CAP CCP3CAP
extern volatile unsigned char           CCP3CAP             __at(0x34B);
#ifndef _LIB_BUILD
asm("CCP3CAP equ 034Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP3CTS                :8;
    };
    struct {
        unsigned CCP3CTS0               :1;
        unsigned CCP3CTS1               :1;
        unsigned CCP3CTS2               :1;
        unsigned CCP3CTS3               :1;
    };
} CCP3CAPbits_t;
extern volatile CCP3CAPbits_t CCP3CAPbits __at(0x34B);
// bitfield macros
#define _CCP3CAP_CTS_POSN                                   0x0
#define _CCP3CAP_CTS_POSITION                               0x0
#define _CCP3CAP_CTS_SIZE                                   0x8
#define _CCP3CAP_CTS_LENGTH                                 0x8
#define _CCP3CAP_CTS_MASK                                   0xFF
#define _CCP3CAP_CTS0_POSN                                  0x0
#define _CCP3CAP_CTS0_POSITION                              0x0
#define _CCP3CAP_CTS0_SIZE                                  0x1
#define _CCP3CAP_CTS0_LENGTH                                0x1
#define _CCP3CAP_CTS0_MASK                                  0x1
#define _CCP3CAP_CTS1_POSN                                  0x1
#define _CCP3CAP_CTS1_POSITION                              0x1
#define _CCP3CAP_CTS1_SIZE                                  0x1
#define _CCP3CAP_CTS1_LENGTH                                0x1
#define _CCP3CAP_CTS1_MASK                                  0x2
#define _CCP3CAP_CTS2_POSN                                  0x2
#define _CCP3CAP_CTS2_POSITION                              0x2
#define _CCP3CAP_CTS2_SIZE                                  0x1
#define _CCP3CAP_CTS2_LENGTH                                0x1
#define _CCP3CAP_CTS2_MASK                                  0x4
#define _CCP3CAP_CTS3_POSN                                  0x3
#define _CCP3CAP_CTS3_POSITION                              0x3
#define _CCP3CAP_CTS3_SIZE                                  0x1
#define _CCP3CAP_CTS3_LENGTH                                0x1
#define _CCP3CAP_CTS3_MASK                                  0x8
#define _CCP3CAP_CCP3CTS_POSN                               0x0
#define _CCP3CAP_CCP3CTS_POSITION                           0x0
#define _CCP3CAP_CCP3CTS_SIZE                               0x8
#define _CCP3CAP_CCP3CTS_LENGTH                             0x8
#define _CCP3CAP_CCP3CTS_MASK                               0xFF
#define _CCP3CAP_CCP3CTS0_POSN                              0x0
#define _CCP3CAP_CCP3CTS0_POSITION                          0x0
#define _CCP3CAP_CCP3CTS0_SIZE                              0x1
#define _CCP3CAP_CCP3CTS0_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS0_MASK                              0x1
#define _CCP3CAP_CCP3CTS1_POSN                              0x1
#define _CCP3CAP_CCP3CTS1_POSITION                          0x1
#define _CCP3CAP_CCP3CTS1_SIZE                              0x1
#define _CCP3CAP_CCP3CTS1_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS1_MASK                              0x2
#define _CCP3CAP_CCP3CTS2_POSN                              0x2
#define _CCP3CAP_CCP3CTS2_POSITION                          0x2
#define _CCP3CAP_CCP3CTS2_SIZE                              0x1
#define _CCP3CAP_CCP3CTS2_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS2_MASK                              0x4
#define _CCP3CAP_CCP3CTS3_POSN                              0x3
#define _CCP3CAP_CCP3CTS3_POSITION                          0x3
#define _CCP3CAP_CCP3CTS3_SIZE                              0x1
#define _CCP3CAP_CCP3CTS3_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS3_MASK                              0x8

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x34C);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 034Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
        unsigned C3TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned C3TSEL0                :1;
        unsigned C3TSEL1                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x34C);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC
#define _CCPTMRS0_C3TSEL_POSN                               0x4
#define _CCPTMRS0_C3TSEL_POSITION                           0x4
#define _CCPTMRS0_C3TSEL_SIZE                               0x2
#define _CCPTMRS0_C3TSEL_LENGTH                             0x2
#define _CCPTMRS0_C3TSEL_MASK                               0x30
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C2TSEL0_POSN                              0x2
#define _CCPTMRS0_C2TSEL0_POSITION                          0x2
#define _CCPTMRS0_C2TSEL0_SIZE                              0x1
#define _CCPTMRS0_C2TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL0_MASK                              0x4
#define _CCPTMRS0_C2TSEL1_POSN                              0x3
#define _CCPTMRS0_C2TSEL1_POSITION                          0x3
#define _CCPTMRS0_C2TSEL1_SIZE                              0x1
#define _CCPTMRS0_C2TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL1_MASK                              0x8
#define _CCPTMRS0_C3TSEL0_POSN                              0x4
#define _CCPTMRS0_C3TSEL0_POSITION                          0x4
#define _CCPTMRS0_C3TSEL0_SIZE                              0x1
#define _CCPTMRS0_C3TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL0_MASK                              0x10
#define _CCPTMRS0_C3TSEL1_POSN                              0x5
#define _CCPTMRS0_C3TSEL1_POSITION                          0x5
#define _CCPTMRS0_C3TSEL1_SIZE                              0x1
#define _CCPTMRS0_C3TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL1_MASK                              0x20

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned short          CRCDATA             __at(0x34F);
#ifndef _LIB_BUILD
asm("CRCDATA equ 034Fh");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0x34F);
#ifndef _LIB_BUILD
asm("CRCDATL equ 034Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0x34F);
// bitfield macros
#define _CRCDATL_DATA0_POSN                                 0x0
#define _CRCDATL_DATA0_POSITION                             0x0
#define _CRCDATL_DATA0_SIZE                                 0x1
#define _CRCDATL_DATA0_LENGTH                               0x1
#define _CRCDATL_DATA0_MASK                                 0x1
#define _CRCDATL_DATA1_POSN                                 0x1
#define _CRCDATL_DATA1_POSITION                             0x1
#define _CRCDATL_DATA1_SIZE                                 0x1
#define _CRCDATL_DATA1_LENGTH                               0x1
#define _CRCDATL_DATA1_MASK                                 0x2
#define _CRCDATL_DATA2_POSN                                 0x2
#define _CRCDATL_DATA2_POSITION                             0x2
#define _CRCDATL_DATA2_SIZE                                 0x1
#define _CRCDATL_DATA2_LENGTH                               0x1
#define _CRCDATL_DATA2_MASK                                 0x4
#define _CRCDATL_DATA3_POSN                                 0x3
#define _CRCDATL_DATA3_POSITION                             0x3
#define _CRCDATL_DATA3_SIZE                                 0x1
#define _CRCDATL_DATA3_LENGTH                               0x1
#define _CRCDATL_DATA3_MASK                                 0x8
#define _CRCDATL_DATA4_POSN                                 0x4
#define _CRCDATL_DATA4_POSITION                             0x4
#define _CRCDATL_DATA4_SIZE                                 0x1
#define _CRCDATL_DATA4_LENGTH                               0x1
#define _CRCDATL_DATA4_MASK                                 0x10
#define _CRCDATL_DATA5_POSN                                 0x5
#define _CRCDATL_DATA5_POSITION                             0x5
#define _CRCDATL_DATA5_SIZE                                 0x1
#define _CRCDATL_DATA5_LENGTH                               0x1
#define _CRCDATL_DATA5_MASK                                 0x20
#define _CRCDATL_DATA6_POSN                                 0x6
#define _CRCDATL_DATA6_POSITION                             0x6
#define _CRCDATL_DATA6_SIZE                                 0x1
#define _CRCDATL_DATA6_LENGTH                               0x1
#define _CRCDATL_DATA6_MASK                                 0x40
#define _CRCDATL_DATA7_POSN                                 0x7
#define _CRCDATL_DATA7_POSITION                             0x7
#define _CRCDATL_DATA7_SIZE                                 0x1
#define _CRCDATL_DATA7_LENGTH                               0x1
#define _CRCDATL_DATA7_MASK                                 0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0x350);
#ifndef _LIB_BUILD
asm("CRCDATH equ 0350h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0x350);
// bitfield macros
#define _CRCDATH_DATA8_POSN                                 0x0
#define _CRCDATH_DATA8_POSITION                             0x0
#define _CRCDATH_DATA8_SIZE                                 0x1
#define _CRCDATH_DATA8_LENGTH                               0x1
#define _CRCDATH_DATA8_MASK                                 0x1
#define _CRCDATH_DATA9_POSN                                 0x1
#define _CRCDATH_DATA9_POSITION                             0x1
#define _CRCDATH_DATA9_SIZE                                 0x1
#define _CRCDATH_DATA9_LENGTH                               0x1
#define _CRCDATH_DATA9_MASK                                 0x2
#define _CRCDATH_DATA10_POSN                                0x2
#define _CRCDATH_DATA10_POSITION                            0x2
#define _CRCDATH_DATA10_SIZE                                0x1
#define _CRCDATH_DATA10_LENGTH                              0x1
#define _CRCDATH_DATA10_MASK                                0x4
#define _CRCDATH_DATA11_POSN                                0x3
#define _CRCDATH_DATA11_POSITION                            0x3
#define _CRCDATH_DATA11_SIZE                                0x1
#define _CRCDATH_DATA11_LENGTH                              0x1
#define _CRCDATH_DATA11_MASK                                0x8
#define _CRCDATH_DATA12_POSN                                0x4
#define _CRCDATH_DATA12_POSITION                            0x4
#define _CRCDATH_DATA12_SIZE                                0x1
#define _CRCDATH_DATA12_LENGTH                              0x1
#define _CRCDATH_DATA12_MASK                                0x10
#define _CRCDATH_DATA13_POSN                                0x5
#define _CRCDATH_DATA13_POSITION                            0x5
#define _CRCDATH_DATA13_SIZE                                0x1
#define _CRCDATH_DATA13_LENGTH                              0x1
#define _CRCDATH_DATA13_MASK                                0x20
#define _CRCDATH_DATA14_POSN                                0x6
#define _CRCDATH_DATA14_POSITION                            0x6
#define _CRCDATH_DATA14_SIZE                                0x1
#define _CRCDATH_DATA14_LENGTH                              0x1
#define _CRCDATH_DATA14_MASK                                0x40
#define _CRCDATH_DATA15_POSN                                0x7
#define _CRCDATH_DATA15_POSITION                            0x7
#define _CRCDATH_DATA15_SIZE                                0x1
#define _CRCDATH_DATA15_LENGTH                              0x1
#define _CRCDATH_DATA15_MASK                                0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0x351);
#ifndef _LIB_BUILD
asm("CRCACC equ 0351h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0x351);
#ifndef _LIB_BUILD
asm("CRCACCL equ 0351h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0x351);
// bitfield macros
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0x352);
#ifndef _LIB_BUILD
asm("CRCACCH equ 0352h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0x352);
// bitfield macros
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80

// Register: CRCSHFT
#define CRCSHFT CRCSHFT
extern volatile unsigned short          CRCSHFT             __at(0x353);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 0353h");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0x353);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 0353h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT0                  :1;
        unsigned SHFT1                  :1;
        unsigned SHFT2                  :1;
        unsigned SHFT3                  :1;
        unsigned SHFT4                  :1;
        unsigned SHFT5                  :1;
        unsigned SHFT6                  :1;
        unsigned SHFT7                  :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x353);
// bitfield macros
#define _CRCSHIFTL_SHFT0_POSN                               0x0
#define _CRCSHIFTL_SHFT0_POSITION                           0x0
#define _CRCSHIFTL_SHFT0_SIZE                               0x1
#define _CRCSHIFTL_SHFT0_LENGTH                             0x1
#define _CRCSHIFTL_SHFT0_MASK                               0x1
#define _CRCSHIFTL_SHFT1_POSN                               0x1
#define _CRCSHIFTL_SHFT1_POSITION                           0x1
#define _CRCSHIFTL_SHFT1_SIZE                               0x1
#define _CRCSHIFTL_SHFT1_LENGTH                             0x1
#define _CRCSHIFTL_SHFT1_MASK                               0x2
#define _CRCSHIFTL_SHFT2_POSN                               0x2
#define _CRCSHIFTL_SHFT2_POSITION                           0x2
#define _CRCSHIFTL_SHFT2_SIZE                               0x1
#define _CRCSHIFTL_SHFT2_LENGTH                             0x1
#define _CRCSHIFTL_SHFT2_MASK                               0x4
#define _CRCSHIFTL_SHFT3_POSN                               0x3
#define _CRCSHIFTL_SHFT3_POSITION                           0x3
#define _CRCSHIFTL_SHFT3_SIZE                               0x1
#define _CRCSHIFTL_SHFT3_LENGTH                             0x1
#define _CRCSHIFTL_SHFT3_MASK                               0x8
#define _CRCSHIFTL_SHFT4_POSN                               0x4
#define _CRCSHIFTL_SHFT4_POSITION                           0x4
#define _CRCSHIFTL_SHFT4_SIZE                               0x1
#define _CRCSHIFTL_SHFT4_LENGTH                             0x1
#define _CRCSHIFTL_SHFT4_MASK                               0x10
#define _CRCSHIFTL_SHFT5_POSN                               0x5
#define _CRCSHIFTL_SHFT5_POSITION                           0x5
#define _CRCSHIFTL_SHFT5_SIZE                               0x1
#define _CRCSHIFTL_SHFT5_LENGTH                             0x1
#define _CRCSHIFTL_SHFT5_MASK                               0x20
#define _CRCSHIFTL_SHFT6_POSN                               0x6
#define _CRCSHIFTL_SHFT6_POSITION                           0x6
#define _CRCSHIFTL_SHFT6_SIZE                               0x1
#define _CRCSHIFTL_SHFT6_LENGTH                             0x1
#define _CRCSHIFTL_SHFT6_MASK                               0x40
#define _CRCSHIFTL_SHFT7_POSN                               0x7
#define _CRCSHIFTL_SHFT7_POSITION                           0x7
#define _CRCSHIFTL_SHFT7_SIZE                               0x1
#define _CRCSHIFTL_SHFT7_LENGTH                             0x1
#define _CRCSHIFTL_SHFT7_MASK                               0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0x354);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 0354h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT8                  :1;
        unsigned SHFT9                  :1;
        unsigned SHFT10                 :1;
        unsigned SHFT11                 :1;
        unsigned SHFT12                 :1;
        unsigned SHFT13                 :1;
        unsigned SHFT14                 :1;
        unsigned SHFT15                 :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x354);
// bitfield macros
#define _CRCSHIFTH_SHFT8_POSN                               0x0
#define _CRCSHIFTH_SHFT8_POSITION                           0x0
#define _CRCSHIFTH_SHFT8_SIZE                               0x1
#define _CRCSHIFTH_SHFT8_LENGTH                             0x1
#define _CRCSHIFTH_SHFT8_MASK                               0x1
#define _CRCSHIFTH_SHFT9_POSN                               0x1
#define _CRCSHIFTH_SHFT9_POSITION                           0x1
#define _CRCSHIFTH_SHFT9_SIZE                               0x1
#define _CRCSHIFTH_SHFT9_LENGTH                             0x1
#define _CRCSHIFTH_SHFT9_MASK                               0x2
#define _CRCSHIFTH_SHFT10_POSN                              0x2
#define _CRCSHIFTH_SHFT10_POSITION                          0x2
#define _CRCSHIFTH_SHFT10_SIZE                              0x1
#define _CRCSHIFTH_SHFT10_LENGTH                            0x1
#define _CRCSHIFTH_SHFT10_MASK                              0x4
#define _CRCSHIFTH_SHFT11_POSN                              0x3
#define _CRCSHIFTH_SHFT11_POSITION                          0x3
#define _CRCSHIFTH_SHFT11_SIZE                              0x1
#define _CRCSHIFTH_SHFT11_LENGTH                            0x1
#define _CRCSHIFTH_SHFT11_MASK                              0x8
#define _CRCSHIFTH_SHFT12_POSN                              0x4
#define _CRCSHIFTH_SHFT12_POSITION                          0x4
#define _CRCSHIFTH_SHFT12_SIZE                              0x1
#define _CRCSHIFTH_SHFT12_LENGTH                            0x1
#define _CRCSHIFTH_SHFT12_MASK                              0x10
#define _CRCSHIFTH_SHFT13_POSN                              0x5
#define _CRCSHIFTH_SHFT13_POSITION                          0x5
#define _CRCSHIFTH_SHFT13_SIZE                              0x1
#define _CRCSHIFTH_SHFT13_LENGTH                            0x1
#define _CRCSHIFTH_SHFT13_MASK                              0x20
#define _CRCSHIFTH_SHFT14_POSN                              0x6
#define _CRCSHIFTH_SHFT14_POSITION                          0x6
#define _CRCSHIFTH_SHFT14_SIZE                              0x1
#define _CRCSHIFTH_SHFT14_LENGTH                            0x1
#define _CRCSHIFTH_SHFT14_MASK                              0x40
#define _CRCSHIFTH_SHFT15_POSN                              0x7
#define _CRCSHIFTH_SHFT15_POSITION                          0x7
#define _CRCSHIFTH_SHFT15_SIZE                              0x1
#define _CRCSHIFTH_SHFT15_LENGTH                            0x1
#define _CRCSHIFTH_SHFT15_MASK                              0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0x355);
#ifndef _LIB_BUILD
asm("CRCXOR equ 0355h");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x355);
#ifndef _LIB_BUILD
asm("CRCXORL equ 0355h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned X1                     :1;
        unsigned X2                     :1;
        unsigned X3                     :1;
        unsigned X4                     :1;
        unsigned X5                     :1;
        unsigned X6                     :1;
        unsigned X7                     :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x355);
// bitfield macros
#define _CRCXORL_X1_POSN                                    0x1
#define _CRCXORL_X1_POSITION                                0x1
#define _CRCXORL_X1_SIZE                                    0x1
#define _CRCXORL_X1_LENGTH                                  0x1
#define _CRCXORL_X1_MASK                                    0x2
#define _CRCXORL_X2_POSN                                    0x2
#define _CRCXORL_X2_POSITION                                0x2
#define _CRCXORL_X2_SIZE                                    0x1
#define _CRCXORL_X2_LENGTH                                  0x1
#define _CRCXORL_X2_MASK                                    0x4
#define _CRCXORL_X3_POSN                                    0x3
#define _CRCXORL_X3_POSITION                                0x3
#define _CRCXORL_X3_SIZE                                    0x1
#define _CRCXORL_X3_LENGTH                                  0x1
#define _CRCXORL_X3_MASK                                    0x8
#define _CRCXORL_X4_POSN                                    0x4
#define _CRCXORL_X4_POSITION                                0x4
#define _CRCXORL_X4_SIZE                                    0x1
#define _CRCXORL_X4_LENGTH                                  0x1
#define _CRCXORL_X4_MASK                                    0x10
#define _CRCXORL_X5_POSN                                    0x5
#define _CRCXORL_X5_POSITION                                0x5
#define _CRCXORL_X5_SIZE                                    0x1
#define _CRCXORL_X5_LENGTH                                  0x1
#define _CRCXORL_X5_MASK                                    0x20
#define _CRCXORL_X6_POSN                                    0x6
#define _CRCXORL_X6_POSITION                                0x6
#define _CRCXORL_X6_SIZE                                    0x1
#define _CRCXORL_X6_LENGTH                                  0x1
#define _CRCXORL_X6_MASK                                    0x40
#define _CRCXORL_X7_POSN                                    0x7
#define _CRCXORL_X7_POSITION                                0x7
#define _CRCXORL_X7_SIZE                                    0x1
#define _CRCXORL_X7_LENGTH                                  0x1
#define _CRCXORL_X7_MASK                                    0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x356);
#ifndef _LIB_BUILD
asm("CRCXORH equ 0356h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned X8                     :1;
        unsigned X9                     :1;
        unsigned X10                    :1;
        unsigned X11                    :1;
        unsigned X12                    :1;
        unsigned X13                    :1;
        unsigned X14                    :1;
        unsigned X15                    :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x356);
// bitfield macros
#define _CRCXORH_X8_POSN                                    0x0
#define _CRCXORH_X8_POSITION                                0x0
#define _CRCXORH_X8_SIZE                                    0x1
#define _CRCXORH_X8_LENGTH                                  0x1
#define _CRCXORH_X8_MASK                                    0x1
#define _CRCXORH_X9_POSN                                    0x1
#define _CRCXORH_X9_POSITION                                0x1
#define _CRCXORH_X9_SIZE                                    0x1
#define _CRCXORH_X9_LENGTH                                  0x1
#define _CRCXORH_X9_MASK                                    0x2
#define _CRCXORH_X10_POSN                                   0x2
#define _CRCXORH_X10_POSITION                               0x2
#define _CRCXORH_X10_SIZE                                   0x1
#define _CRCXORH_X10_LENGTH                                 0x1
#define _CRCXORH_X10_MASK                                   0x4
#define _CRCXORH_X11_POSN                                   0x3
#define _CRCXORH_X11_POSITION                               0x3
#define _CRCXORH_X11_SIZE                                   0x1
#define _CRCXORH_X11_LENGTH                                 0x1
#define _CRCXORH_X11_MASK                                   0x8
#define _CRCXORH_X12_POSN                                   0x4
#define _CRCXORH_X12_POSITION                               0x4
#define _CRCXORH_X12_SIZE                                   0x1
#define _CRCXORH_X12_LENGTH                                 0x1
#define _CRCXORH_X12_MASK                                   0x10
#define _CRCXORH_X13_POSN                                   0x5
#define _CRCXORH_X13_POSITION                               0x5
#define _CRCXORH_X13_SIZE                                   0x1
#define _CRCXORH_X13_LENGTH                                 0x1
#define _CRCXORH_X13_MASK                                   0x20
#define _CRCXORH_X14_POSN                                   0x6
#define _CRCXORH_X14_POSITION                               0x6
#define _CRCXORH_X14_SIZE                                   0x1
#define _CRCXORH_X14_LENGTH                                 0x1
#define _CRCXORH_X14_MASK                                   0x40
#define _CRCXORH_X15_POSN                                   0x7
#define _CRCXORH_X15_POSITION                               0x7
#define _CRCXORH_X15_SIZE                                   0x1
#define _CRCXORH_X15_LENGTH                                 0x1
#define _CRCXORH_X15_MASK                                   0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x357);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 0357h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x357);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x358);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 0358h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x358);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80

// Register: SCANLADR
#define SCANLADR SCANLADR
#ifndef __CCI__
extern volatile __uint24                SCANLADR            __at(0x35A);
#endif
#ifndef _LIB_BUILD
asm("SCANLADR equ 035Ah");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x35A);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 035Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x35A);
// bitfield macros
#define _SCANLADRL_LADR_POSN                                0x0
#define _SCANLADRL_LADR_POSITION                            0x0
#define _SCANLADRL_LADR_SIZE                                0x8
#define _SCANLADRL_LADR_LENGTH                              0x8
#define _SCANLADRL_LADR_MASK                                0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADR_POSN                            0x0
#define _SCANLADRL_SCANLADR_POSITION                        0x0
#define _SCANLADRL_SCANLADR_SIZE                            0x8
#define _SCANLADRL_SCANLADR_LENGTH                          0x8
#define _SCANLADRL_SCANLADR_MASK                            0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x35B);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 035Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x35B);
// bitfield macros
#define _SCANLADRH_LADR_POSN                                0x0
#define _SCANLADRH_LADR_POSITION                            0x0
#define _SCANLADRH_LADR_SIZE                                0x8
#define _SCANLADRH_LADR_LENGTH                              0x8
#define _SCANLADRH_LADR_MASK                                0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADR_POSN                            0x0
#define _SCANLADRH_SCANLADR_POSITION                        0x0
#define _SCANLADRH_SCANLADR_SIZE                            0x8
#define _SCANLADRH_SCANLADR_LENGTH                          0x8
#define _SCANLADRH_SCANLADR_MASK                            0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANLADRU
#define SCANLADRU SCANLADRU
extern volatile unsigned char           SCANLADRU           __at(0x35C);
#ifndef _LIB_BUILD
asm("SCANLADRU equ 035Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :6;
    };
    struct {
        unsigned LADR16                 :1;
        unsigned LADR17                 :1;
        unsigned LADR18                 :1;
        unsigned LADR19                 :1;
        unsigned LADR20                 :1;
        unsigned LADR21                 :1;
    };
    struct {
        unsigned SCANLADR               :6;
    };
    struct {
        unsigned SCANLADR16             :1;
        unsigned SCANLADR17             :1;
        unsigned SCANLADR18             :1;
        unsigned SCANLADR19             :1;
        unsigned SCANLADR20             :1;
        unsigned SCANLADR21             :1;
    };
} SCANLADRUbits_t;
extern volatile SCANLADRUbits_t SCANLADRUbits __at(0x35C);
// bitfield macros
#define _SCANLADRU_LADR_POSN                                0x0
#define _SCANLADRU_LADR_POSITION                            0x0
#define _SCANLADRU_LADR_SIZE                                0x6
#define _SCANLADRU_LADR_LENGTH                              0x6
#define _SCANLADRU_LADR_MASK                                0x3F
#define _SCANLADRU_LADR16_POSN                              0x0
#define _SCANLADRU_LADR16_POSITION                          0x0
#define _SCANLADRU_LADR16_SIZE                              0x1
#define _SCANLADRU_LADR16_LENGTH                            0x1
#define _SCANLADRU_LADR16_MASK                              0x1
#define _SCANLADRU_LADR17_POSN                              0x1
#define _SCANLADRU_LADR17_POSITION                          0x1
#define _SCANLADRU_LADR17_SIZE                              0x1
#define _SCANLADRU_LADR17_LENGTH                            0x1
#define _SCANLADRU_LADR17_MASK                              0x2
#define _SCANLADRU_LADR18_POSN                              0x2
#define _SCANLADRU_LADR18_POSITION                          0x2
#define _SCANLADRU_LADR18_SIZE                              0x1
#define _SCANLADRU_LADR18_LENGTH                            0x1
#define _SCANLADRU_LADR18_MASK                              0x4
#define _SCANLADRU_LADR19_POSN                              0x3
#define _SCANLADRU_LADR19_POSITION                          0x3
#define _SCANLADRU_LADR19_SIZE                              0x1
#define _SCANLADRU_LADR19_LENGTH                            0x1
#define _SCANLADRU_LADR19_MASK                              0x8
#define _SCANLADRU_LADR20_POSN                              0x4
#define _SCANLADRU_LADR20_POSITION                          0x4
#define _SCANLADRU_LADR20_SIZE                              0x1
#define _SCANLADRU_LADR20_LENGTH                            0x1
#define _SCANLADRU_LADR20_MASK                              0x10
#define _SCANLADRU_LADR21_POSN                              0x5
#define _SCANLADRU_LADR21_POSITION                          0x5
#define _SCANLADRU_LADR21_SIZE                              0x1
#define _SCANLADRU_LADR21_LENGTH                            0x1
#define _SCANLADRU_LADR21_MASK                              0x20
#define _SCANLADRU_SCANLADR_POSN                            0x0
#define _SCANLADRU_SCANLADR_POSITION                        0x0
#define _SCANLADRU_SCANLADR_SIZE                            0x6
#define _SCANLADRU_SCANLADR_LENGTH                          0x6
#define _SCANLADRU_SCANLADR_MASK                            0x3F
#define _SCANLADRU_SCANLADR16_POSN                          0x0
#define _SCANLADRU_SCANLADR16_POSITION                      0x0
#define _SCANLADRU_SCANLADR16_SIZE                          0x1
#define _SCANLADRU_SCANLADR16_LENGTH                        0x1
#define _SCANLADRU_SCANLADR16_MASK                          0x1
#define _SCANLADRU_SCANLADR17_POSN                          0x1
#define _SCANLADRU_SCANLADR17_POSITION                      0x1
#define _SCANLADRU_SCANLADR17_SIZE                          0x1
#define _SCANLADRU_SCANLADR17_LENGTH                        0x1
#define _SCANLADRU_SCANLADR17_MASK                          0x2
#define _SCANLADRU_SCANLADR18_POSN                          0x2
#define _SCANLADRU_SCANLADR18_POSITION                      0x2
#define _SCANLADRU_SCANLADR18_SIZE                          0x1
#define _SCANLADRU_SCANLADR18_LENGTH                        0x1
#define _SCANLADRU_SCANLADR18_MASK                          0x4
#define _SCANLADRU_SCANLADR19_POSN                          0x3
#define _SCANLADRU_SCANLADR19_POSITION                      0x3
#define _SCANLADRU_SCANLADR19_SIZE                          0x1
#define _SCANLADRU_SCANLADR19_LENGTH                        0x1
#define _SCANLADRU_SCANLADR19_MASK                          0x8
#define _SCANLADRU_SCANLADR20_POSN                          0x4
#define _SCANLADRU_SCANLADR20_POSITION                      0x4
#define _SCANLADRU_SCANLADR20_SIZE                          0x1
#define _SCANLADRU_SCANLADR20_LENGTH                        0x1
#define _SCANLADRU_SCANLADR20_MASK                          0x10
#define _SCANLADRU_SCANLADR21_POSN                          0x5
#define _SCANLADRU_SCANLADR21_POSITION                      0x5
#define _SCANLADRU_SCANLADR21_SIZE                          0x1
#define _SCANLADRU_SCANLADR21_LENGTH                        0x1
#define _SCANLADRU_SCANLADR21_MASK                          0x20

// Register: SCANHADR
#define SCANHADR SCANHADR
#ifndef __CCI__
extern volatile __uint24                SCANHADR            __at(0x35D);
#endif
#ifndef _LIB_BUILD
asm("SCANHADR equ 035Dh");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x35D);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 035Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x35D);
// bitfield macros
#define _SCANHADRL_HADR_POSN                                0x0
#define _SCANHADRL_HADR_POSITION                            0x0
#define _SCANHADRL_HADR_SIZE                                0x8
#define _SCANHADRL_HADR_LENGTH                              0x8
#define _SCANHADRL_HADR_MASK                                0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADR_POSN                            0x0
#define _SCANHADRL_SCANHADR_POSITION                        0x0
#define _SCANHADRL_SCANHADR_SIZE                            0x8
#define _SCANHADRL_SCANHADR_LENGTH                          0x8
#define _SCANHADRL_SCANHADR_MASK                            0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x35E);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 035Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x35E);
// bitfield macros
#define _SCANHADRH_HADR_POSN                                0x0
#define _SCANHADRH_HADR_POSITION                            0x0
#define _SCANHADRH_HADR_SIZE                                0x8
#define _SCANHADRH_HADR_LENGTH                              0x8
#define _SCANHADRH_HADR_MASK                                0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADR_POSN                            0x0
#define _SCANHADRH_SCANHADR_POSITION                        0x0
#define _SCANHADRH_SCANHADR_SIZE                            0x8
#define _SCANHADRH_SCANHADR_LENGTH                          0x8
#define _SCANHADRH_SCANHADR_MASK                            0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANHADRU
#define SCANHADRU SCANHADRU
extern volatile unsigned char           SCANHADRU           __at(0x35F);
#ifndef _LIB_BUILD
asm("SCANHADRU equ 035Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :6;
    };
    struct {
        unsigned HADR16                 :1;
        unsigned HADR17                 :1;
        unsigned HADR18                 :1;
        unsigned HADR19                 :1;
        unsigned HADR20                 :1;
        unsigned HADR21                 :1;
    };
    struct {
        unsigned SCANHADR               :6;
    };
    struct {
        unsigned SCANHADR16             :1;
        unsigned SCANHADR17             :1;
        unsigned SCANHADR18             :1;
        unsigned SCANHADR19             :1;
        unsigned SCANHADR20             :1;
        unsigned SCANHADR21             :1;
    };
} SCANHADRUbits_t;
extern volatile SCANHADRUbits_t SCANHADRUbits __at(0x35F);
// bitfield macros
#define _SCANHADRU_HADR_POSN                                0x0
#define _SCANHADRU_HADR_POSITION                            0x0
#define _SCANHADRU_HADR_SIZE                                0x6
#define _SCANHADRU_HADR_LENGTH                              0x6
#define _SCANHADRU_HADR_MASK                                0x3F
#define _SCANHADRU_HADR16_POSN                              0x0
#define _SCANHADRU_HADR16_POSITION                          0x0
#define _SCANHADRU_HADR16_SIZE                              0x1
#define _SCANHADRU_HADR16_LENGTH                            0x1
#define _SCANHADRU_HADR16_MASK                              0x1
#define _SCANHADRU_HADR17_POSN                              0x1
#define _SCANHADRU_HADR17_POSITION                          0x1
#define _SCANHADRU_HADR17_SIZE                              0x1
#define _SCANHADRU_HADR17_LENGTH                            0x1
#define _SCANHADRU_HADR17_MASK                              0x2
#define _SCANHADRU_HADR18_POSN                              0x2
#define _SCANHADRU_HADR18_POSITION                          0x2
#define _SCANHADRU_HADR18_SIZE                              0x1
#define _SCANHADRU_HADR18_LENGTH                            0x1
#define _SCANHADRU_HADR18_MASK                              0x4
#define _SCANHADRU_HADR19_POSN                              0x3
#define _SCANHADRU_HADR19_POSITION                          0x3
#define _SCANHADRU_HADR19_SIZE                              0x1
#define _SCANHADRU_HADR19_LENGTH                            0x1
#define _SCANHADRU_HADR19_MASK                              0x8
#define _SCANHADRU_HADR20_POSN                              0x4
#define _SCANHADRU_HADR20_POSITION                          0x4
#define _SCANHADRU_HADR20_SIZE                              0x1
#define _SCANHADRU_HADR20_LENGTH                            0x1
#define _SCANHADRU_HADR20_MASK                              0x10
#define _SCANHADRU_HADR21_POSN                              0x5
#define _SCANHADRU_HADR21_POSITION                          0x5
#define _SCANHADRU_HADR21_SIZE                              0x1
#define _SCANHADRU_HADR21_LENGTH                            0x1
#define _SCANHADRU_HADR21_MASK                              0x20
#define _SCANHADRU_SCANHADR_POSN                            0x0
#define _SCANHADRU_SCANHADR_POSITION                        0x0
#define _SCANHADRU_SCANHADR_SIZE                            0x6
#define _SCANHADRU_SCANHADR_LENGTH                          0x6
#define _SCANHADRU_SCANHADR_MASK                            0x3F
#define _SCANHADRU_SCANHADR16_POSN                          0x0
#define _SCANHADRU_SCANHADR16_POSITION                      0x0
#define _SCANHADRU_SCANHADR16_SIZE                          0x1
#define _SCANHADRU_SCANHADR16_LENGTH                        0x1
#define _SCANHADRU_SCANHADR16_MASK                          0x1
#define _SCANHADRU_SCANHADR17_POSN                          0x1
#define _SCANHADRU_SCANHADR17_POSITION                      0x1
#define _SCANHADRU_SCANHADR17_SIZE                          0x1
#define _SCANHADRU_SCANHADR17_LENGTH                        0x1
#define _SCANHADRU_SCANHADR17_MASK                          0x2
#define _SCANHADRU_SCANHADR18_POSN                          0x2
#define _SCANHADRU_SCANHADR18_POSITION                      0x2
#define _SCANHADRU_SCANHADR18_SIZE                          0x1
#define _SCANHADRU_SCANHADR18_LENGTH                        0x1
#define _SCANHADRU_SCANHADR18_MASK                          0x4
#define _SCANHADRU_SCANHADR19_POSN                          0x3
#define _SCANHADRU_SCANHADR19_POSITION                      0x3
#define _SCANHADRU_SCANHADR19_SIZE                          0x1
#define _SCANHADRU_SCANHADR19_LENGTH                        0x1
#define _SCANHADRU_SCANHADR19_MASK                          0x8
#define _SCANHADRU_SCANHADR20_POSN                          0x4
#define _SCANHADRU_SCANHADR20_POSITION                      0x4
#define _SCANHADRU_SCANHADR20_SIZE                          0x1
#define _SCANHADRU_SCANHADR20_LENGTH                        0x1
#define _SCANHADRU_SCANHADR20_MASK                          0x10
#define _SCANHADRU_SCANHADR21_POSN                          0x5
#define _SCANHADRU_SCANHADR21_POSITION                      0x5
#define _SCANHADRU_SCANHADR21_SIZE                          0x1
#define _SCANHADRU_SCANHADR21_LENGTH                        0x1
#define _SCANHADRU_SCANHADR21_MASK                          0x20

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x360);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 0360h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUSY                   :1;
        unsigned BURSTMD                :1;
        unsigned MREG                   :1;
        unsigned                        :2;
        unsigned SGO                    :1;
        unsigned TRIGEN                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned SCANEN                 :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x360);
// bitfield macros
#define _SCANCON0_BUSY_POSN                                 0x0
#define _SCANCON0_BUSY_POSITION                             0x0
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x1
#define _SCANCON0_BURSTMD_POSN                              0x1
#define _SCANCON0_BURSTMD_POSITION                          0x1
#define _SCANCON0_BURSTMD_SIZE                              0x1
#define _SCANCON0_BURSTMD_LENGTH                            0x1
#define _SCANCON0_BURSTMD_MASK                              0x2
#define _SCANCON0_MREG_POSN                                 0x2
#define _SCANCON0_MREG_POSITION                             0x2
#define _SCANCON0_MREG_SIZE                                 0x1
#define _SCANCON0_MREG_LENGTH                               0x1
#define _SCANCON0_MREG_MASK                                 0x4
#define _SCANCON0_SGO_POSN                                  0x5
#define _SCANCON0_SGO_POSITION                              0x5
#define _SCANCON0_SGO_SIZE                                  0x1
#define _SCANCON0_SGO_LENGTH                                0x1
#define _SCANCON0_SGO_MASK                                  0x20
#define _SCANCON0_TRIGEN_POSN                               0x6
#define _SCANCON0_TRIGEN_POSITION                           0x6
#define _SCANCON0_TRIGEN_SIZE                               0x1
#define _SCANCON0_TRIGEN_LENGTH                             0x1
#define _SCANCON0_TRIGEN_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_SCANEN_POSN                               0x7
#define _SCANCON0_SCANEN_POSITION                           0x7
#define _SCANCON0_SCANEN_SIZE                               0x1
#define _SCANCON0_SCANEN_LENGTH                             0x1
#define _SCANCON0_SCANEN_MASK                               0x80

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x361);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 0361h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :8;
    };
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
        unsigned TSEL3                  :1;
        unsigned TSEL4                  :1;
    };
    struct {
        unsigned SCANTSEL               :8;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x361);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x8
#define _SCANTRIG_TSEL_LENGTH                               0x8
#define _SCANTRIG_TSEL_MASK                                 0xFF
#define _SCANTRIG_TSEL0_POSN                                0x0
#define _SCANTRIG_TSEL0_POSITION                            0x0
#define _SCANTRIG_TSEL0_SIZE                                0x1
#define _SCANTRIG_TSEL0_LENGTH                              0x1
#define _SCANTRIG_TSEL0_MASK                                0x1
#define _SCANTRIG_TSEL1_POSN                                0x1
#define _SCANTRIG_TSEL1_POSITION                            0x1
#define _SCANTRIG_TSEL1_SIZE                                0x1
#define _SCANTRIG_TSEL1_LENGTH                              0x1
#define _SCANTRIG_TSEL1_MASK                                0x2
#define _SCANTRIG_TSEL2_POSN                                0x2
#define _SCANTRIG_TSEL2_POSITION                            0x2
#define _SCANTRIG_TSEL2_SIZE                                0x1
#define _SCANTRIG_TSEL2_LENGTH                              0x1
#define _SCANTRIG_TSEL2_MASK                                0x4
#define _SCANTRIG_TSEL3_POSN                                0x3
#define _SCANTRIG_TSEL3_POSITION                            0x3
#define _SCANTRIG_TSEL3_SIZE                                0x1
#define _SCANTRIG_TSEL3_LENGTH                              0x1
#define _SCANTRIG_TSEL3_MASK                                0x8
#define _SCANTRIG_TSEL4_POSN                                0x4
#define _SCANTRIG_TSEL4_POSITION                            0x4
#define _SCANTRIG_TSEL4_SIZE                                0x1
#define _SCANTRIG_TSEL4_LENGTH                              0x1
#define _SCANTRIG_TSEL4_MASK                                0x10
#define _SCANTRIG_SCANTSEL_POSN                             0x0
#define _SCANTRIG_SCANTSEL_POSITION                         0x0
#define _SCANTRIG_SCANTSEL_SIZE                             0x8
#define _SCANTRIG_SCANTSEL_LENGTH                           0x8
#define _SCANTRIG_SCANTSEL_MASK                             0xFF

// Register: IPR0
#define IPR0 IPR0
extern volatile unsigned char           IPR0                __at(0x362);
#ifndef _LIB_BUILD
asm("IPR0 equ 0362h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIP                   :1;
        unsigned HLVDIP                 :1;
        unsigned OSFIP                  :1;
        unsigned CSWIP                  :1;
        unsigned                        :1;
        unsigned CLC1IP                 :1;
        unsigned                        :1;
        unsigned IOCIP                  :1;
    };
} IPR0bits_t;
extern volatile IPR0bits_t IPR0bits __at(0x362);
// bitfield macros
#define _IPR0_SWIP_POSN                                     0x0
#define _IPR0_SWIP_POSITION                                 0x0
#define _IPR0_SWIP_SIZE                                     0x1
#define _IPR0_SWIP_LENGTH                                   0x1
#define _IPR0_SWIP_MASK                                     0x1
#define _IPR0_HLVDIP_POSN                                   0x1
#define _IPR0_HLVDIP_POSITION                               0x1
#define _IPR0_HLVDIP_SIZE                                   0x1
#define _IPR0_HLVDIP_LENGTH                                 0x1
#define _IPR0_HLVDIP_MASK                                   0x2
#define _IPR0_OSFIP_POSN                                    0x2
#define _IPR0_OSFIP_POSITION                                0x2
#define _IPR0_OSFIP_SIZE                                    0x1
#define _IPR0_OSFIP_LENGTH                                  0x1
#define _IPR0_OSFIP_MASK                                    0x4
#define _IPR0_CSWIP_POSN                                    0x3
#define _IPR0_CSWIP_POSITION                                0x3
#define _IPR0_CSWIP_SIZE                                    0x1
#define _IPR0_CSWIP_LENGTH                                  0x1
#define _IPR0_CSWIP_MASK                                    0x8
#define _IPR0_CLC1IP_POSN                                   0x5
#define _IPR0_CLC1IP_POSITION                               0x5
#define _IPR0_CLC1IP_SIZE                                   0x1
#define _IPR0_CLC1IP_LENGTH                                 0x1
#define _IPR0_CLC1IP_MASK                                   0x20
#define _IPR0_IOCIP_POSN                                    0x7
#define _IPR0_IOCIP_POSITION                                0x7
#define _IPR0_IOCIP_SIZE                                    0x1
#define _IPR0_IOCIP_LENGTH                                  0x1
#define _IPR0_IOCIP_MASK                                    0x80

// Register: IPR1
#define IPR1 IPR1
extern volatile unsigned char           IPR1                __at(0x363);
#ifndef _LIB_BUILD
asm("IPR1 equ 0363h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IP                 :1;
        unsigned ZCDIP                  :1;
        unsigned ADIP                   :1;
        unsigned ACTIP                  :1;
        unsigned C1IP                   :1;
        unsigned SMT1IP                 :1;
        unsigned SMT1PRAIP              :1;
        unsigned SMT1PWAIP              :1;
    };
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits __at(0x363);
// bitfield macros
#define _IPR1_INT0IP_POSN                                   0x0
#define _IPR1_INT0IP_POSITION                               0x0
#define _IPR1_INT0IP_SIZE                                   0x1
#define _IPR1_INT0IP_LENGTH                                 0x1
#define _IPR1_INT0IP_MASK                                   0x1
#define _IPR1_ZCDIP_POSN                                    0x1
#define _IPR1_ZCDIP_POSITION                                0x1
#define _IPR1_ZCDIP_SIZE                                    0x1
#define _IPR1_ZCDIP_LENGTH                                  0x1
#define _IPR1_ZCDIP_MASK                                    0x2
#define _IPR1_ADIP_POSN                                     0x2
#define _IPR1_ADIP_POSITION                                 0x2
#define _IPR1_ADIP_SIZE                                     0x1
#define _IPR1_ADIP_LENGTH                                   0x1
#define _IPR1_ADIP_MASK                                     0x4
#define _IPR1_ACTIP_POSN                                    0x3
#define _IPR1_ACTIP_POSITION                                0x3
#define _IPR1_ACTIP_SIZE                                    0x1
#define _IPR1_ACTIP_LENGTH                                  0x1
#define _IPR1_ACTIP_MASK                                    0x8
#define _IPR1_C1IP_POSN                                     0x4
#define _IPR1_C1IP_POSITION                                 0x4
#define _IPR1_C1IP_SIZE                                     0x1
#define _IPR1_C1IP_LENGTH                                   0x1
#define _IPR1_C1IP_MASK                                     0x10
#define _IPR1_SMT1IP_POSN                                   0x5
#define _IPR1_SMT1IP_POSITION                               0x5
#define _IPR1_SMT1IP_SIZE                                   0x1
#define _IPR1_SMT1IP_LENGTH                                 0x1
#define _IPR1_SMT1IP_MASK                                   0x20
#define _IPR1_SMT1PRAIP_POSN                                0x6
#define _IPR1_SMT1PRAIP_POSITION                            0x6
#define _IPR1_SMT1PRAIP_SIZE                                0x1
#define _IPR1_SMT1PRAIP_LENGTH                              0x1
#define _IPR1_SMT1PRAIP_MASK                                0x40
#define _IPR1_SMT1PWAIP_POSN                                0x7
#define _IPR1_SMT1PWAIP_POSITION                            0x7
#define _IPR1_SMT1PWAIP_SIZE                                0x1
#define _IPR1_SMT1PWAIP_LENGTH                              0x1
#define _IPR1_SMT1PWAIP_MASK                                0x80

// Register: IPR2
#define IPR2 IPR2
extern volatile unsigned char           IPR2                __at(0x364);
#ifndef _LIB_BUILD
asm("IPR2 equ 0364h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADTIP                  :1;
        unsigned                        :3;
        unsigned DMA1SCNTIP             :1;
        unsigned DMA1DCNTIP             :1;
        unsigned DMA1ORIP               :1;
        unsigned DMA1AIP                :1;
    };
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits __at(0x364);
// bitfield macros
#define _IPR2_ADTIP_POSN                                    0x0
#define _IPR2_ADTIP_POSITION                                0x0
#define _IPR2_ADTIP_SIZE                                    0x1
#define _IPR2_ADTIP_LENGTH                                  0x1
#define _IPR2_ADTIP_MASK                                    0x1
#define _IPR2_DMA1SCNTIP_POSN                               0x4
#define _IPR2_DMA1SCNTIP_POSITION                           0x4
#define _IPR2_DMA1SCNTIP_SIZE                               0x1
#define _IPR2_DMA1SCNTIP_LENGTH                             0x1
#define _IPR2_DMA1SCNTIP_MASK                               0x10
#define _IPR2_DMA1DCNTIP_POSN                               0x5
#define _IPR2_DMA1DCNTIP_POSITION                           0x5
#define _IPR2_DMA1DCNTIP_SIZE                               0x1
#define _IPR2_DMA1DCNTIP_LENGTH                             0x1
#define _IPR2_DMA1DCNTIP_MASK                               0x20
#define _IPR2_DMA1ORIP_POSN                                 0x6
#define _IPR2_DMA1ORIP_POSITION                             0x6
#define _IPR2_DMA1ORIP_SIZE                                 0x1
#define _IPR2_DMA1ORIP_LENGTH                               0x1
#define _IPR2_DMA1ORIP_MASK                                 0x40
#define _IPR2_DMA1AIP_POSN                                  0x7
#define _IPR2_DMA1AIP_POSITION                              0x7
#define _IPR2_DMA1AIP_SIZE                                  0x1
#define _IPR2_DMA1AIP_LENGTH                                0x1
#define _IPR2_DMA1AIP_MASK                                  0x80

// Register: IPR3
#define IPR3 IPR3
extern volatile unsigned char           IPR3                __at(0x365);
#ifndef _LIB_BUILD
asm("IPR3 equ 0365h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIP               :1;
        unsigned SPI1TXIP               :1;
        unsigned SPI1IP                 :1;
        unsigned TMR2IP                 :1;
        unsigned TMR1IP                 :1;
        unsigned TMR1GIP                :1;
        unsigned CCP1IP                 :1;
        unsigned TMR0IP                 :1;
    };
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits __at(0x365);
// bitfield macros
#define _IPR3_SPI1RXIP_POSN                                 0x0
#define _IPR3_SPI1RXIP_POSITION                             0x0
#define _IPR3_SPI1RXIP_SIZE                                 0x1
#define _IPR3_SPI1RXIP_LENGTH                               0x1
#define _IPR3_SPI1RXIP_MASK                                 0x1
#define _IPR3_SPI1TXIP_POSN                                 0x1
#define _IPR3_SPI1TXIP_POSITION                             0x1
#define _IPR3_SPI1TXIP_SIZE                                 0x1
#define _IPR3_SPI1TXIP_LENGTH                               0x1
#define _IPR3_SPI1TXIP_MASK                                 0x2
#define _IPR3_SPI1IP_POSN                                   0x2
#define _IPR3_SPI1IP_POSITION                               0x2
#define _IPR3_SPI1IP_SIZE                                   0x1
#define _IPR3_SPI1IP_LENGTH                                 0x1
#define _IPR3_SPI1IP_MASK                                   0x4
#define _IPR3_TMR2IP_POSN                                   0x3
#define _IPR3_TMR2IP_POSITION                               0x3
#define _IPR3_TMR2IP_SIZE                                   0x1
#define _IPR3_TMR2IP_LENGTH                                 0x1
#define _IPR3_TMR2IP_MASK                                   0x8
#define _IPR3_TMR1IP_POSN                                   0x4
#define _IPR3_TMR1IP_POSITION                               0x4
#define _IPR3_TMR1IP_SIZE                                   0x1
#define _IPR3_TMR1IP_LENGTH                                 0x1
#define _IPR3_TMR1IP_MASK                                   0x10
#define _IPR3_TMR1GIP_POSN                                  0x5
#define _IPR3_TMR1GIP_POSITION                              0x5
#define _IPR3_TMR1GIP_SIZE                                  0x1
#define _IPR3_TMR1GIP_LENGTH                                0x1
#define _IPR3_TMR1GIP_MASK                                  0x20
#define _IPR3_CCP1IP_POSN                                   0x6
#define _IPR3_CCP1IP_POSITION                               0x6
#define _IPR3_CCP1IP_SIZE                                   0x1
#define _IPR3_CCP1IP_LENGTH                                 0x1
#define _IPR3_CCP1IP_MASK                                   0x40
#define _IPR3_TMR0IP_POSN                                   0x7
#define _IPR3_TMR0IP_POSITION                               0x7
#define _IPR3_TMR0IP_SIZE                                   0x1
#define _IPR3_TMR0IP_LENGTH                                 0x1
#define _IPR3_TMR0IP_MASK                                   0x80

// Register: IPR4
#define IPR4 IPR4
extern volatile unsigned char           IPR4                __at(0x366);
#ifndef _LIB_BUILD
asm("IPR4 equ 0366h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIP                 :1;
        unsigned U1TXIP                 :1;
        unsigned U1EIP                  :1;
        unsigned U1IP                   :1;
        unsigned                        :2;
        unsigned PWM1PIP                :1;
        unsigned PWM1IP                 :1;
    };
} IPR4bits_t;
extern volatile IPR4bits_t IPR4bits __at(0x366);
// bitfield macros
#define _IPR4_U1RXIP_POSN                                   0x0
#define _IPR4_U1RXIP_POSITION                               0x0
#define _IPR4_U1RXIP_SIZE                                   0x1
#define _IPR4_U1RXIP_LENGTH                                 0x1
#define _IPR4_U1RXIP_MASK                                   0x1
#define _IPR4_U1TXIP_POSN                                   0x1
#define _IPR4_U1TXIP_POSITION                               0x1
#define _IPR4_U1TXIP_SIZE                                   0x1
#define _IPR4_U1TXIP_LENGTH                                 0x1
#define _IPR4_U1TXIP_MASK                                   0x2
#define _IPR4_U1EIP_POSN                                    0x2
#define _IPR4_U1EIP_POSITION                                0x2
#define _IPR4_U1EIP_SIZE                                    0x1
#define _IPR4_U1EIP_LENGTH                                  0x1
#define _IPR4_U1EIP_MASK                                    0x4
#define _IPR4_U1IP_POSN                                     0x3
#define _IPR4_U1IP_POSITION                                 0x3
#define _IPR4_U1IP_SIZE                                     0x1
#define _IPR4_U1IP_LENGTH                                   0x1
#define _IPR4_U1IP_MASK                                     0x8
#define _IPR4_PWM1PIP_POSN                                  0x6
#define _IPR4_PWM1PIP_POSITION                              0x6
#define _IPR4_PWM1PIP_SIZE                                  0x1
#define _IPR4_PWM1PIP_LENGTH                                0x1
#define _IPR4_PWM1PIP_MASK                                  0x40
#define _IPR4_PWM1IP_POSN                                   0x7
#define _IPR4_PWM1IP_POSITION                               0x7
#define _IPR4_PWM1IP_SIZE                                   0x1
#define _IPR4_PWM1IP_LENGTH                                 0x1
#define _IPR4_PWM1IP_MASK                                   0x80

// Register: IPR5
#define IPR5 IPR5
extern volatile unsigned char           IPR5                __at(0x367);
#ifndef _LIB_BUILD
asm("IPR5 equ 0367h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI2RXIP               :1;
        unsigned SPI2TXIP               :1;
        unsigned SPI2IP                 :1;
        unsigned                        :1;
        unsigned TMR3IP                 :1;
        unsigned TMR3GIP                :1;
        unsigned PWM2PIP                :1;
        unsigned PWM2IP                 :1;
    };
} IPR5bits_t;
extern volatile IPR5bits_t IPR5bits __at(0x367);
// bitfield macros
#define _IPR5_SPI2RXIP_POSN                                 0x0
#define _IPR5_SPI2RXIP_POSITION                             0x0
#define _IPR5_SPI2RXIP_SIZE                                 0x1
#define _IPR5_SPI2RXIP_LENGTH                               0x1
#define _IPR5_SPI2RXIP_MASK                                 0x1
#define _IPR5_SPI2TXIP_POSN                                 0x1
#define _IPR5_SPI2TXIP_POSITION                             0x1
#define _IPR5_SPI2TXIP_SIZE                                 0x1
#define _IPR5_SPI2TXIP_LENGTH                               0x1
#define _IPR5_SPI2TXIP_MASK                                 0x2
#define _IPR5_SPI2IP_POSN                                   0x2
#define _IPR5_SPI2IP_POSITION                               0x2
#define _IPR5_SPI2IP_SIZE                                   0x1
#define _IPR5_SPI2IP_LENGTH                                 0x1
#define _IPR5_SPI2IP_MASK                                   0x4
#define _IPR5_TMR3IP_POSN                                   0x4
#define _IPR5_TMR3IP_POSITION                               0x4
#define _IPR5_TMR3IP_SIZE                                   0x1
#define _IPR5_TMR3IP_LENGTH                                 0x1
#define _IPR5_TMR3IP_MASK                                   0x10
#define _IPR5_TMR3GIP_POSN                                  0x5
#define _IPR5_TMR3GIP_POSITION                              0x5
#define _IPR5_TMR3GIP_SIZE                                  0x1
#define _IPR5_TMR3GIP_LENGTH                                0x1
#define _IPR5_TMR3GIP_MASK                                  0x20
#define _IPR5_PWM2PIP_POSN                                  0x6
#define _IPR5_PWM2PIP_POSITION                              0x6
#define _IPR5_PWM2PIP_SIZE                                  0x1
#define _IPR5_PWM2PIP_LENGTH                                0x1
#define _IPR5_PWM2PIP_MASK                                  0x40
#define _IPR5_PWM2IP_POSN                                   0x7
#define _IPR5_PWM2IP_POSITION                               0x7
#define _IPR5_PWM2IP_SIZE                                   0x1
#define _IPR5_PWM2IP_LENGTH                                 0x1
#define _IPR5_PWM2IP_MASK                                   0x80

// Register: IPR6
#define IPR6 IPR6
extern volatile unsigned char           IPR6                __at(0x368);
#ifndef _LIB_BUILD
asm("IPR6 equ 0368h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IP                 :1;
        unsigned CLC2IP                 :1;
        unsigned CWG1IP                 :1;
        unsigned NCO1IP                 :1;
        unsigned DMA2SCNTIP             :1;
        unsigned DMA2DCNTIP             :1;
        unsigned DMA2ORIP               :1;
        unsigned DMA2AIP                :1;
    };
} IPR6bits_t;
extern volatile IPR6bits_t IPR6bits __at(0x368);
// bitfield macros
#define _IPR6_INT1IP_POSN                                   0x0
#define _IPR6_INT1IP_POSITION                               0x0
#define _IPR6_INT1IP_SIZE                                   0x1
#define _IPR6_INT1IP_LENGTH                                 0x1
#define _IPR6_INT1IP_MASK                                   0x1
#define _IPR6_CLC2IP_POSN                                   0x1
#define _IPR6_CLC2IP_POSITION                               0x1
#define _IPR6_CLC2IP_SIZE                                   0x1
#define _IPR6_CLC2IP_LENGTH                                 0x1
#define _IPR6_CLC2IP_MASK                                   0x2
#define _IPR6_CWG1IP_POSN                                   0x2
#define _IPR6_CWG1IP_POSITION                               0x2
#define _IPR6_CWG1IP_SIZE                                   0x1
#define _IPR6_CWG1IP_LENGTH                                 0x1
#define _IPR6_CWG1IP_MASK                                   0x4
#define _IPR6_NCO1IP_POSN                                   0x3
#define _IPR6_NCO1IP_POSITION                               0x3
#define _IPR6_NCO1IP_SIZE                                   0x1
#define _IPR6_NCO1IP_LENGTH                                 0x1
#define _IPR6_NCO1IP_MASK                                   0x8
#define _IPR6_DMA2SCNTIP_POSN                               0x4
#define _IPR6_DMA2SCNTIP_POSITION                           0x4
#define _IPR6_DMA2SCNTIP_SIZE                               0x1
#define _IPR6_DMA2SCNTIP_LENGTH                             0x1
#define _IPR6_DMA2SCNTIP_MASK                               0x10
#define _IPR6_DMA2DCNTIP_POSN                               0x5
#define _IPR6_DMA2DCNTIP_POSITION                           0x5
#define _IPR6_DMA2DCNTIP_SIZE                               0x1
#define _IPR6_DMA2DCNTIP_LENGTH                             0x1
#define _IPR6_DMA2DCNTIP_MASK                               0x20
#define _IPR6_DMA2ORIP_POSN                                 0x6
#define _IPR6_DMA2ORIP_POSITION                             0x6
#define _IPR6_DMA2ORIP_SIZE                                 0x1
#define _IPR6_DMA2ORIP_LENGTH                               0x1
#define _IPR6_DMA2ORIP_MASK                                 0x40
#define _IPR6_DMA2AIP_POSN                                  0x7
#define _IPR6_DMA2AIP_POSITION                              0x7
#define _IPR6_DMA2AIP_SIZE                                  0x1
#define _IPR6_DMA2AIP_LENGTH                                0x1
#define _IPR6_DMA2AIP_MASK                                  0x80

// Register: IPR7
#define IPR7 IPR7
extern volatile unsigned char           IPR7                __at(0x369);
#ifndef _LIB_BUILD
asm("IPR7 equ 0369h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1RXIP               :1;
        unsigned I2C1TXIP               :1;
        unsigned I2C1IP                 :1;
        unsigned I2C1EIP                :1;
        unsigned                        :1;
        unsigned CLC3IP                 :1;
        unsigned PWM3PIP                :1;
        unsigned PWM3IP                 :1;
    };
} IPR7bits_t;
extern volatile IPR7bits_t IPR7bits __at(0x369);
// bitfield macros
#define _IPR7_I2C1RXIP_POSN                                 0x0
#define _IPR7_I2C1RXIP_POSITION                             0x0
#define _IPR7_I2C1RXIP_SIZE                                 0x1
#define _IPR7_I2C1RXIP_LENGTH                               0x1
#define _IPR7_I2C1RXIP_MASK                                 0x1
#define _IPR7_I2C1TXIP_POSN                                 0x1
#define _IPR7_I2C1TXIP_POSITION                             0x1
#define _IPR7_I2C1TXIP_SIZE                                 0x1
#define _IPR7_I2C1TXIP_LENGTH                               0x1
#define _IPR7_I2C1TXIP_MASK                                 0x2
#define _IPR7_I2C1IP_POSN                                   0x2
#define _IPR7_I2C1IP_POSITION                               0x2
#define _IPR7_I2C1IP_SIZE                                   0x1
#define _IPR7_I2C1IP_LENGTH                                 0x1
#define _IPR7_I2C1IP_MASK                                   0x4
#define _IPR7_I2C1EIP_POSN                                  0x3
#define _IPR7_I2C1EIP_POSITION                              0x3
#define _IPR7_I2C1EIP_SIZE                                  0x1
#define _IPR7_I2C1EIP_LENGTH                                0x1
#define _IPR7_I2C1EIP_MASK                                  0x8
#define _IPR7_CLC3IP_POSN                                   0x5
#define _IPR7_CLC3IP_POSITION                               0x5
#define _IPR7_CLC3IP_SIZE                                   0x1
#define _IPR7_CLC3IP_LENGTH                                 0x1
#define _IPR7_CLC3IP_MASK                                   0x20
#define _IPR7_PWM3PIP_POSN                                  0x6
#define _IPR7_PWM3PIP_POSITION                              0x6
#define _IPR7_PWM3PIP_SIZE                                  0x1
#define _IPR7_PWM3PIP_LENGTH                                0x1
#define _IPR7_PWM3PIP_MASK                                  0x40
#define _IPR7_PWM3IP_POSN                                   0x7
#define _IPR7_PWM3IP_POSITION                               0x7
#define _IPR7_PWM3IP_SIZE                                   0x1
#define _IPR7_PWM3IP_LENGTH                                 0x1
#define _IPR7_PWM3IP_MASK                                   0x80

// Register: IPR8
#define IPR8 IPR8
extern volatile unsigned char           IPR8                __at(0x36A);
#ifndef _LIB_BUILD
asm("IPR8 equ 036Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXIP                 :1;
        unsigned U2TXIP                 :1;
        unsigned U2EIP                  :1;
        unsigned U2IP                   :1;
        unsigned TMR5IP                 :1;
        unsigned TMR5GIP                :1;
        unsigned CCP2IP                 :1;
        unsigned SCANIP                 :1;
    };
} IPR8bits_t;
extern volatile IPR8bits_t IPR8bits __at(0x36A);
// bitfield macros
#define _IPR8_U2RXIP_POSN                                   0x0
#define _IPR8_U2RXIP_POSITION                               0x0
#define _IPR8_U2RXIP_SIZE                                   0x1
#define _IPR8_U2RXIP_LENGTH                                 0x1
#define _IPR8_U2RXIP_MASK                                   0x1
#define _IPR8_U2TXIP_POSN                                   0x1
#define _IPR8_U2TXIP_POSITION                               0x1
#define _IPR8_U2TXIP_SIZE                                   0x1
#define _IPR8_U2TXIP_LENGTH                                 0x1
#define _IPR8_U2TXIP_MASK                                   0x2
#define _IPR8_U2EIP_POSN                                    0x2
#define _IPR8_U2EIP_POSITION                                0x2
#define _IPR8_U2EIP_SIZE                                    0x1
#define _IPR8_U2EIP_LENGTH                                  0x1
#define _IPR8_U2EIP_MASK                                    0x4
#define _IPR8_U2IP_POSN                                     0x3
#define _IPR8_U2IP_POSITION                                 0x3
#define _IPR8_U2IP_SIZE                                     0x1
#define _IPR8_U2IP_LENGTH                                   0x1
#define _IPR8_U2IP_MASK                                     0x8
#define _IPR8_TMR5IP_POSN                                   0x4
#define _IPR8_TMR5IP_POSITION                               0x4
#define _IPR8_TMR5IP_SIZE                                   0x1
#define _IPR8_TMR5IP_LENGTH                                 0x1
#define _IPR8_TMR5IP_MASK                                   0x10
#define _IPR8_TMR5GIP_POSN                                  0x5
#define _IPR8_TMR5GIP_POSITION                              0x5
#define _IPR8_TMR5GIP_SIZE                                  0x1
#define _IPR8_TMR5GIP_LENGTH                                0x1
#define _IPR8_TMR5GIP_MASK                                  0x20
#define _IPR8_CCP2IP_POSN                                   0x6
#define _IPR8_CCP2IP_POSITION                               0x6
#define _IPR8_CCP2IP_SIZE                                   0x1
#define _IPR8_CCP2IP_LENGTH                                 0x1
#define _IPR8_CCP2IP_MASK                                   0x40
#define _IPR8_SCANIP_POSN                                   0x7
#define _IPR8_SCANIP_POSITION                               0x7
#define _IPR8_SCANIP_SIZE                                   0x1
#define _IPR8_SCANIP_LENGTH                                 0x1
#define _IPR8_SCANIP_MASK                                   0x80

// Register: IPR9
#define IPR9 IPR9
extern volatile unsigned char           IPR9                __at(0x36B);
#ifndef _LIB_BUILD
asm("IPR9 equ 036Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U3RXIP                 :1;
        unsigned U3TXIP                 :1;
        unsigned U3EIP                  :1;
        unsigned U3IP                   :1;
        unsigned                        :1;
        unsigned CLC4IP                 :1;
    };
} IPR9bits_t;
extern volatile IPR9bits_t IPR9bits __at(0x36B);
// bitfield macros
#define _IPR9_U3RXIP_POSN                                   0x0
#define _IPR9_U3RXIP_POSITION                               0x0
#define _IPR9_U3RXIP_SIZE                                   0x1
#define _IPR9_U3RXIP_LENGTH                                 0x1
#define _IPR9_U3RXIP_MASK                                   0x1
#define _IPR9_U3TXIP_POSN                                   0x1
#define _IPR9_U3TXIP_POSITION                               0x1
#define _IPR9_U3TXIP_SIZE                                   0x1
#define _IPR9_U3TXIP_LENGTH                                 0x1
#define _IPR9_U3TXIP_MASK                                   0x2
#define _IPR9_U3EIP_POSN                                    0x2
#define _IPR9_U3EIP_POSITION                                0x2
#define _IPR9_U3EIP_SIZE                                    0x1
#define _IPR9_U3EIP_LENGTH                                  0x1
#define _IPR9_U3EIP_MASK                                    0x4
#define _IPR9_U3IP_POSN                                     0x3
#define _IPR9_U3IP_POSITION                                 0x3
#define _IPR9_U3IP_SIZE                                     0x1
#define _IPR9_U3IP_LENGTH                                   0x1
#define _IPR9_U3IP_MASK                                     0x8
#define _IPR9_CLC4IP_POSN                                   0x5
#define _IPR9_CLC4IP_POSITION                               0x5
#define _IPR9_CLC4IP_SIZE                                   0x1
#define _IPR9_CLC4IP_LENGTH                                 0x1
#define _IPR9_CLC4IP_MASK                                   0x20

// Register: IPR10
#define IPR10 IPR10
extern volatile unsigned char           IPR10               __at(0x36C);
#ifndef _LIB_BUILD
asm("IPR10 equ 036Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT2IP                 :1;
        unsigned CLC5IP                 :1;
        unsigned CWG2IP                 :1;
        unsigned NCO2IP                 :1;
        unsigned DMA3SCNTIP             :1;
        unsigned DMA3DCNTIP             :1;
        unsigned DMA3ORIP               :1;
        unsigned DMA3AIP                :1;
    };
} IPR10bits_t;
extern volatile IPR10bits_t IPR10bits __at(0x36C);
// bitfield macros
#define _IPR10_INT2IP_POSN                                  0x0
#define _IPR10_INT2IP_POSITION                              0x0
#define _IPR10_INT2IP_SIZE                                  0x1
#define _IPR10_INT2IP_LENGTH                                0x1
#define _IPR10_INT2IP_MASK                                  0x1
#define _IPR10_CLC5IP_POSN                                  0x1
#define _IPR10_CLC5IP_POSITION                              0x1
#define _IPR10_CLC5IP_SIZE                                  0x1
#define _IPR10_CLC5IP_LENGTH                                0x1
#define _IPR10_CLC5IP_MASK                                  0x2
#define _IPR10_CWG2IP_POSN                                  0x2
#define _IPR10_CWG2IP_POSITION                              0x2
#define _IPR10_CWG2IP_SIZE                                  0x1
#define _IPR10_CWG2IP_LENGTH                                0x1
#define _IPR10_CWG2IP_MASK                                  0x4
#define _IPR10_NCO2IP_POSN                                  0x3
#define _IPR10_NCO2IP_POSITION                              0x3
#define _IPR10_NCO2IP_SIZE                                  0x1
#define _IPR10_NCO2IP_LENGTH                                0x1
#define _IPR10_NCO2IP_MASK                                  0x8
#define _IPR10_DMA3SCNTIP_POSN                              0x4
#define _IPR10_DMA3SCNTIP_POSITION                          0x4
#define _IPR10_DMA3SCNTIP_SIZE                              0x1
#define _IPR10_DMA3SCNTIP_LENGTH                            0x1
#define _IPR10_DMA3SCNTIP_MASK                              0x10
#define _IPR10_DMA3DCNTIP_POSN                              0x5
#define _IPR10_DMA3DCNTIP_POSITION                          0x5
#define _IPR10_DMA3DCNTIP_SIZE                              0x1
#define _IPR10_DMA3DCNTIP_LENGTH                            0x1
#define _IPR10_DMA3DCNTIP_MASK                              0x20
#define _IPR10_DMA3ORIP_POSN                                0x6
#define _IPR10_DMA3ORIP_POSITION                            0x6
#define _IPR10_DMA3ORIP_SIZE                                0x1
#define _IPR10_DMA3ORIP_LENGTH                              0x1
#define _IPR10_DMA3ORIP_MASK                                0x40
#define _IPR10_DMA3AIP_POSN                                 0x7
#define _IPR10_DMA3AIP_POSITION                             0x7
#define _IPR10_DMA3AIP_SIZE                                 0x1
#define _IPR10_DMA3AIP_LENGTH                               0x1
#define _IPR10_DMA3AIP_MASK                                 0x80

// Register: IPR11
#define IPR11 IPR11
extern volatile unsigned char           IPR11               __at(0x36D);
#ifndef _LIB_BUILD
asm("IPR11 equ 036Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3IP                 :1;
        unsigned CLC6IP                 :1;
        unsigned CWG3IP                 :1;
        unsigned TMR4IP                 :1;
        unsigned DMA4SCNTIP             :1;
        unsigned DMA4DCNTIP             :1;
        unsigned DMA4ORIP               :1;
        unsigned DMA4AIP                :1;
    };
} IPR11bits_t;
extern volatile IPR11bits_t IPR11bits __at(0x36D);
// bitfield macros
#define _IPR11_CCP3IP_POSN                                  0x0
#define _IPR11_CCP3IP_POSITION                              0x0
#define _IPR11_CCP3IP_SIZE                                  0x1
#define _IPR11_CCP3IP_LENGTH                                0x1
#define _IPR11_CCP3IP_MASK                                  0x1
#define _IPR11_CLC6IP_POSN                                  0x1
#define _IPR11_CLC6IP_POSITION                              0x1
#define _IPR11_CLC6IP_SIZE                                  0x1
#define _IPR11_CLC6IP_LENGTH                                0x1
#define _IPR11_CLC6IP_MASK                                  0x2
#define _IPR11_CWG3IP_POSN                                  0x2
#define _IPR11_CWG3IP_POSITION                              0x2
#define _IPR11_CWG3IP_SIZE                                  0x1
#define _IPR11_CWG3IP_LENGTH                                0x1
#define _IPR11_CWG3IP_MASK                                  0x4
#define _IPR11_TMR4IP_POSN                                  0x3
#define _IPR11_TMR4IP_POSITION                              0x3
#define _IPR11_TMR4IP_SIZE                                  0x1
#define _IPR11_TMR4IP_LENGTH                                0x1
#define _IPR11_TMR4IP_MASK                                  0x8
#define _IPR11_DMA4SCNTIP_POSN                              0x4
#define _IPR11_DMA4SCNTIP_POSITION                          0x4
#define _IPR11_DMA4SCNTIP_SIZE                              0x1
#define _IPR11_DMA4SCNTIP_LENGTH                            0x1
#define _IPR11_DMA4SCNTIP_MASK                              0x10
#define _IPR11_DMA4DCNTIP_POSN                              0x5
#define _IPR11_DMA4DCNTIP_POSITION                          0x5
#define _IPR11_DMA4DCNTIP_SIZE                              0x1
#define _IPR11_DMA4DCNTIP_LENGTH                            0x1
#define _IPR11_DMA4DCNTIP_MASK                              0x20
#define _IPR11_DMA4ORIP_POSN                                0x6
#define _IPR11_DMA4ORIP_POSITION                            0x6
#define _IPR11_DMA4ORIP_SIZE                                0x1
#define _IPR11_DMA4ORIP_LENGTH                              0x1
#define _IPR11_DMA4ORIP_MASK                                0x40
#define _IPR11_DMA4AIP_POSN                                 0x7
#define _IPR11_DMA4AIP_POSITION                             0x7
#define _IPR11_DMA4AIP_SIZE                                 0x1
#define _IPR11_DMA4AIP_LENGTH                               0x1
#define _IPR11_DMA4AIP_MASK                                 0x80

// Register: IPR12
#define IPR12 IPR12
extern volatile unsigned char           IPR12               __at(0x36E);
#ifndef _LIB_BUILD
asm("IPR12 equ 036Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U4RXIP                 :1;
        unsigned U4TXIP                 :1;
        unsigned U4EIP                  :1;
        unsigned U4IP                   :1;
        unsigned DMA5SCNTIP             :1;
        unsigned DMA5DCNTIP             :1;
        unsigned DMA5ORIP               :1;
        unsigned DMA5AIP                :1;
    };
} IPR12bits_t;
extern volatile IPR12bits_t IPR12bits __at(0x36E);
// bitfield macros
#define _IPR12_U4RXIP_POSN                                  0x0
#define _IPR12_U4RXIP_POSITION                              0x0
#define _IPR12_U4RXIP_SIZE                                  0x1
#define _IPR12_U4RXIP_LENGTH                                0x1
#define _IPR12_U4RXIP_MASK                                  0x1
#define _IPR12_U4TXIP_POSN                                  0x1
#define _IPR12_U4TXIP_POSITION                              0x1
#define _IPR12_U4TXIP_SIZE                                  0x1
#define _IPR12_U4TXIP_LENGTH                                0x1
#define _IPR12_U4TXIP_MASK                                  0x2
#define _IPR12_U4EIP_POSN                                   0x2
#define _IPR12_U4EIP_POSITION                               0x2
#define _IPR12_U4EIP_SIZE                                   0x1
#define _IPR12_U4EIP_LENGTH                                 0x1
#define _IPR12_U4EIP_MASK                                   0x4
#define _IPR12_U4IP_POSN                                    0x3
#define _IPR12_U4IP_POSITION                                0x3
#define _IPR12_U4IP_SIZE                                    0x1
#define _IPR12_U4IP_LENGTH                                  0x1
#define _IPR12_U4IP_MASK                                    0x8
#define _IPR12_DMA5SCNTIP_POSN                              0x4
#define _IPR12_DMA5SCNTIP_POSITION                          0x4
#define _IPR12_DMA5SCNTIP_SIZE                              0x1
#define _IPR12_DMA5SCNTIP_LENGTH                            0x1
#define _IPR12_DMA5SCNTIP_MASK                              0x10
#define _IPR12_DMA5DCNTIP_POSN                              0x5
#define _IPR12_DMA5DCNTIP_POSITION                          0x5
#define _IPR12_DMA5DCNTIP_SIZE                              0x1
#define _IPR12_DMA5DCNTIP_LENGTH                            0x1
#define _IPR12_DMA5DCNTIP_MASK                              0x20
#define _IPR12_DMA5ORIP_POSN                                0x6
#define _IPR12_DMA5ORIP_POSITION                            0x6
#define _IPR12_DMA5ORIP_SIZE                                0x1
#define _IPR12_DMA5ORIP_LENGTH                              0x1
#define _IPR12_DMA5ORIP_MASK                                0x40
#define _IPR12_DMA5AIP_POSN                                 0x7
#define _IPR12_DMA5AIP_POSITION                             0x7
#define _IPR12_DMA5AIP_SIZE                                 0x1
#define _IPR12_DMA5AIP_LENGTH                               0x1
#define _IPR12_DMA5AIP_MASK                                 0x80

// Register: IPR13
#define IPR13 IPR13
extern volatile unsigned char           IPR13               __at(0x36F);
#ifndef _LIB_BUILD
asm("IPR13 equ 036Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U5RXIP                 :1;
        unsigned U5TXIP                 :1;
        unsigned U5EIP                  :1;
        unsigned U5IP                   :1;
        unsigned DMA6SCNTIP             :1;
        unsigned DMA6DCNTIP             :1;
        unsigned DMA6ORIP               :1;
        unsigned DMA6AIP                :1;
    };
} IPR13bits_t;
extern volatile IPR13bits_t IPR13bits __at(0x36F);
// bitfield macros
#define _IPR13_U5RXIP_POSN                                  0x0
#define _IPR13_U5RXIP_POSITION                              0x0
#define _IPR13_U5RXIP_SIZE                                  0x1
#define _IPR13_U5RXIP_LENGTH                                0x1
#define _IPR13_U5RXIP_MASK                                  0x1
#define _IPR13_U5TXIP_POSN                                  0x1
#define _IPR13_U5TXIP_POSITION                              0x1
#define _IPR13_U5TXIP_SIZE                                  0x1
#define _IPR13_U5TXIP_LENGTH                                0x1
#define _IPR13_U5TXIP_MASK                                  0x2
#define _IPR13_U5EIP_POSN                                   0x2
#define _IPR13_U5EIP_POSITION                               0x2
#define _IPR13_U5EIP_SIZE                                   0x1
#define _IPR13_U5EIP_LENGTH                                 0x1
#define _IPR13_U5EIP_MASK                                   0x4
#define _IPR13_U5IP_POSN                                    0x3
#define _IPR13_U5IP_POSITION                                0x3
#define _IPR13_U5IP_SIZE                                    0x1
#define _IPR13_U5IP_LENGTH                                  0x1
#define _IPR13_U5IP_MASK                                    0x8
#define _IPR13_DMA6SCNTIP_POSN                              0x4
#define _IPR13_DMA6SCNTIP_POSITION                          0x4
#define _IPR13_DMA6SCNTIP_SIZE                              0x1
#define _IPR13_DMA6SCNTIP_LENGTH                            0x1
#define _IPR13_DMA6SCNTIP_MASK                              0x10
#define _IPR13_DMA6DCNTIP_POSN                              0x5
#define _IPR13_DMA6DCNTIP_POSITION                          0x5
#define _IPR13_DMA6DCNTIP_SIZE                              0x1
#define _IPR13_DMA6DCNTIP_LENGTH                            0x1
#define _IPR13_DMA6DCNTIP_MASK                              0x20
#define _IPR13_DMA6ORIP_POSN                                0x6
#define _IPR13_DMA6ORIP_POSITION                            0x6
#define _IPR13_DMA6ORIP_SIZE                                0x1
#define _IPR13_DMA6ORIP_LENGTH                              0x1
#define _IPR13_DMA6ORIP_MASK                                0x40
#define _IPR13_DMA6AIP_POSN                                 0x7
#define _IPR13_DMA6AIP_POSITION                             0x7
#define _IPR13_DMA6AIP_SIZE                                 0x1
#define _IPR13_DMA6AIP_LENGTH                               0x1
#define _IPR13_DMA6AIP_MASK                                 0x80

// Register: IPR14
#define IPR14 IPR14
extern volatile unsigned char           IPR14               __at(0x370);
#ifndef _LIB_BUILD
asm("IPR14 equ 0370h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CLC7IP                 :1;
        unsigned C2IP                   :1;
        unsigned NCO3IP                 :1;
    };
} IPR14bits_t;
extern volatile IPR14bits_t IPR14bits __at(0x370);
// bitfield macros
#define _IPR14_CLC7IP_POSN                                  0x1
#define _IPR14_CLC7IP_POSITION                              0x1
#define _IPR14_CLC7IP_SIZE                                  0x1
#define _IPR14_CLC7IP_LENGTH                                0x1
#define _IPR14_CLC7IP_MASK                                  0x2
#define _IPR14_C2IP_POSN                                    0x2
#define _IPR14_C2IP_POSITION                                0x2
#define _IPR14_C2IP_SIZE                                    0x1
#define _IPR14_C2IP_LENGTH                                  0x1
#define _IPR14_C2IP_MASK                                    0x4
#define _IPR14_NCO3IP_POSN                                  0x3
#define _IPR14_NCO3IP_POSITION                              0x3
#define _IPR14_NCO3IP_SIZE                                  0x1
#define _IPR14_NCO3IP_LENGTH                                0x1
#define _IPR14_NCO3IP_MASK                                  0x8

// Register: IPR15
#define IPR15 IPR15
extern volatile unsigned char           IPR15               __at(0x371);
#ifndef _LIB_BUILD
asm("IPR15 equ 0371h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMIP                  :1;
        unsigned CLC8IP                 :1;
        unsigned CRCIP                  :1;
        unsigned TMR6IP                 :1;
    };
} IPR15bits_t;
extern volatile IPR15bits_t IPR15bits __at(0x371);
// bitfield macros
#define _IPR15_NVMIP_POSN                                   0x0
#define _IPR15_NVMIP_POSITION                               0x0
#define _IPR15_NVMIP_SIZE                                   0x1
#define _IPR15_NVMIP_LENGTH                                 0x1
#define _IPR15_NVMIP_MASK                                   0x1
#define _IPR15_CLC8IP_POSN                                  0x1
#define _IPR15_CLC8IP_POSITION                              0x1
#define _IPR15_CLC8IP_SIZE                                  0x1
#define _IPR15_CLC8IP_LENGTH                                0x1
#define _IPR15_CLC8IP_MASK                                  0x2
#define _IPR15_CRCIP_POSN                                   0x2
#define _IPR15_CRCIP_POSITION                               0x2
#define _IPR15_CRCIP_SIZE                                   0x1
#define _IPR15_CRCIP_LENGTH                                 0x1
#define _IPR15_CRCIP_MASK                                   0x4
#define _IPR15_TMR6IP_POSN                                  0x3
#define _IPR15_TMR6IP_POSITION                              0x3
#define _IPR15_TMR6IP_SIZE                                  0x1
#define _IPR15_TMR6IP_LENGTH                                0x1
#define _IPR15_TMR6IP_MASK                                  0x8

// Register: STATUS_CSHAD
#define STATUS_CSHAD STATUS_CSHAD
extern volatile unsigned char           STATUS_CSHAD        __at(0x373);
#ifndef _LIB_BUILD
asm("STATUS_CSHAD equ 0373h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_CSHADbits_t;
extern volatile STATUS_CSHADbits_t STATUS_CSHADbits __at(0x373);
// bitfield macros
#define _STATUS_CSHAD_NOT_PD_POSN                           0x5
#define _STATUS_CSHAD_NOT_PD_POSITION                       0x5
#define _STATUS_CSHAD_NOT_PD_SIZE                           0x1
#define _STATUS_CSHAD_NOT_PD_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_PD_MASK                           0x20
#define _STATUS_CSHAD_NOT_TO_POSN                           0x6
#define _STATUS_CSHAD_NOT_TO_POSITION                       0x6
#define _STATUS_CSHAD_NOT_TO_SIZE                           0x1
#define _STATUS_CSHAD_NOT_TO_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_TO_MASK                           0x40
#define _STATUS_CSHAD_C_POSN                                0x0
#define _STATUS_CSHAD_C_POSITION                            0x0
#define _STATUS_CSHAD_C_SIZE                                0x1
#define _STATUS_CSHAD_C_LENGTH                              0x1
#define _STATUS_CSHAD_C_MASK                                0x1
#define _STATUS_CSHAD_DC_POSN                               0x1
#define _STATUS_CSHAD_DC_POSITION                           0x1
#define _STATUS_CSHAD_DC_SIZE                               0x1
#define _STATUS_CSHAD_DC_LENGTH                             0x1
#define _STATUS_CSHAD_DC_MASK                               0x2
#define _STATUS_CSHAD_Z_POSN                                0x2
#define _STATUS_CSHAD_Z_POSITION                            0x2
#define _STATUS_CSHAD_Z_SIZE                                0x1
#define _STATUS_CSHAD_Z_LENGTH                              0x1
#define _STATUS_CSHAD_Z_MASK                                0x4
#define _STATUS_CSHAD_OV_POSN                               0x3
#define _STATUS_CSHAD_OV_POSITION                           0x3
#define _STATUS_CSHAD_OV_SIZE                               0x1
#define _STATUS_CSHAD_OV_LENGTH                             0x1
#define _STATUS_CSHAD_OV_MASK                               0x8
#define _STATUS_CSHAD_N_POSN                                0x4
#define _STATUS_CSHAD_N_POSITION                            0x4
#define _STATUS_CSHAD_N_SIZE                                0x1
#define _STATUS_CSHAD_N_LENGTH                              0x1
#define _STATUS_CSHAD_N_MASK                                0x10
#define _STATUS_CSHAD_nPD_POSN                              0x5
#define _STATUS_CSHAD_nPD_POSITION                          0x5
#define _STATUS_CSHAD_nPD_SIZE                              0x1
#define _STATUS_CSHAD_nPD_LENGTH                            0x1
#define _STATUS_CSHAD_nPD_MASK                              0x20
#define _STATUS_CSHAD_nTO_POSN                              0x6
#define _STATUS_CSHAD_nTO_POSITION                          0x6
#define _STATUS_CSHAD_nTO_SIZE                              0x1
#define _STATUS_CSHAD_nTO_LENGTH                            0x1
#define _STATUS_CSHAD_nTO_MASK                              0x40
#define _STATUS_CSHAD_PD_POSN                               0x5
#define _STATUS_CSHAD_PD_POSITION                           0x5
#define _STATUS_CSHAD_PD_SIZE                               0x1
#define _STATUS_CSHAD_PD_LENGTH                             0x1
#define _STATUS_CSHAD_PD_MASK                               0x20
#define _STATUS_CSHAD_TO_POSN                               0x6
#define _STATUS_CSHAD_TO_POSITION                           0x6
#define _STATUS_CSHAD_TO_SIZE                               0x1
#define _STATUS_CSHAD_TO_LENGTH                             0x1
#define _STATUS_CSHAD_TO_MASK                               0x40

// Register: WREG_CSHAD
#define WREG_CSHAD WREG_CSHAD
extern volatile unsigned char           WREG_CSHAD          __at(0x374);
#ifndef _LIB_BUILD
asm("WREG_CSHAD equ 0374h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_CSHADbits_t;
extern volatile WREG_CSHADbits_t WREG_CSHADbits __at(0x374);
// bitfield macros
#define _WREG_CSHAD_WREG_POSN                               0x0
#define _WREG_CSHAD_WREG_POSITION                           0x0
#define _WREG_CSHAD_WREG_SIZE                               0x8
#define _WREG_CSHAD_WREG_LENGTH                             0x8
#define _WREG_CSHAD_WREG_MASK                               0xFF

// Register: BSR_CSHAD
#define BSR_CSHAD BSR_CSHAD
extern volatile unsigned char           BSR_CSHAD           __at(0x375);
#ifndef _LIB_BUILD
asm("BSR_CSHAD equ 0375h");
#endif

// Register: SHADCON
#define SHADCON SHADCON
extern volatile unsigned char           SHADCON             __at(0x376);
#ifndef _LIB_BUILD
asm("SHADCON equ 0376h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHADLO                 :1;
    };
} SHADCONbits_t;
extern volatile SHADCONbits_t SHADCONbits __at(0x376);
// bitfield macros
#define _SHADCON_SHADLO_POSN                                0x0
#define _SHADCON_SHADLO_POSITION                            0x0
#define _SHADCON_SHADLO_SIZE                                0x1
#define _SHADCON_SHADLO_LENGTH                              0x1
#define _SHADCON_SHADLO_MASK                                0x1

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x377);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 0377h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x377);
// bitfield macros
#define _STATUS_SHAD_NOT_PD_POSN                            0x5
#define _STATUS_SHAD_NOT_PD_POSITION                        0x5
#define _STATUS_SHAD_NOT_PD_SIZE                            0x1
#define _STATUS_SHAD_NOT_PD_LENGTH                          0x1
#define _STATUS_SHAD_NOT_PD_MASK                            0x20
#define _STATUS_SHAD_NOT_TO_POSN                            0x6
#define _STATUS_SHAD_NOT_TO_POSITION                        0x6
#define _STATUS_SHAD_NOT_TO_SIZE                            0x1
#define _STATUS_SHAD_NOT_TO_LENGTH                          0x1
#define _STATUS_SHAD_NOT_TO_MASK                            0x40
#define _STATUS_SHAD_C_POSN                                 0x0
#define _STATUS_SHAD_C_POSITION                             0x0
#define _STATUS_SHAD_C_SIZE                                 0x1
#define _STATUS_SHAD_C_LENGTH                               0x1
#define _STATUS_SHAD_C_MASK                                 0x1
#define _STATUS_SHAD_DC_POSN                                0x1
#define _STATUS_SHAD_DC_POSITION                            0x1
#define _STATUS_SHAD_DC_SIZE                                0x1
#define _STATUS_SHAD_DC_LENGTH                              0x1
#define _STATUS_SHAD_DC_MASK                                0x2
#define _STATUS_SHAD_Z_POSN                                 0x2
#define _STATUS_SHAD_Z_POSITION                             0x2
#define _STATUS_SHAD_Z_SIZE                                 0x1
#define _STATUS_SHAD_Z_LENGTH                               0x1
#define _STATUS_SHAD_Z_MASK                                 0x4
#define _STATUS_SHAD_OV_POSN                                0x3
#define _STATUS_SHAD_OV_POSITION                            0x3
#define _STATUS_SHAD_OV_SIZE                                0x1
#define _STATUS_SHAD_OV_LENGTH                              0x1
#define _STATUS_SHAD_OV_MASK                                0x8
#define _STATUS_SHAD_N_POSN                                 0x4
#define _STATUS_SHAD_N_POSITION                             0x4
#define _STATUS_SHAD_N_SIZE                                 0x1
#define _STATUS_SHAD_N_LENGTH                               0x1
#define _STATUS_SHAD_N_MASK                                 0x10
#define _STATUS_SHAD_nPD_POSN                               0x5
#define _STATUS_SHAD_nPD_POSITION                           0x5
#define _STATUS_SHAD_nPD_SIZE                               0x1
#define _STATUS_SHAD_nPD_LENGTH                             0x1
#define _STATUS_SHAD_nPD_MASK                               0x20
#define _STATUS_SHAD_nTO_POSN                               0x6
#define _STATUS_SHAD_nTO_POSITION                           0x6
#define _STATUS_SHAD_nTO_SIZE                               0x1
#define _STATUS_SHAD_nTO_LENGTH                             0x1
#define _STATUS_SHAD_nTO_MASK                               0x40
#define _STATUS_SHAD_PD_POSN                                0x5
#define _STATUS_SHAD_PD_POSITION                            0x5
#define _STATUS_SHAD_PD_SIZE                                0x1
#define _STATUS_SHAD_PD_LENGTH                              0x1
#define _STATUS_SHAD_PD_MASK                                0x20
#define _STATUS_SHAD_TO_POSN                                0x6
#define _STATUS_SHAD_TO_POSITION                            0x6
#define _STATUS_SHAD_TO_SIZE                                0x1
#define _STATUS_SHAD_TO_LENGTH                              0x1
#define _STATUS_SHAD_TO_MASK                                0x40

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x378);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 0378h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x378);
// bitfield macros
#define _WREG_SHAD_WREG_POSN                                0x0
#define _WREG_SHAD_WREG_POSITION                            0x0
#define _WREG_SHAD_WREG_SIZE                                0x8
#define _WREG_SHAD_WREG_LENGTH                              0x8
#define _WREG_SHAD_WREG_MASK                                0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x379);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 0379h");
#endif

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x37A);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 037Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x37A);
// bitfield macros
#define _PCLATH_SHAD_PCH_POSN                               0x0
#define _PCLATH_SHAD_PCH_POSITION                           0x0
#define _PCLATH_SHAD_PCH_SIZE                               0x8
#define _PCLATH_SHAD_PCH_LENGTH                             0x8
#define _PCLATH_SHAD_PCH_MASK                               0xFF

// Register: PCLATU_SHAD
#define PCLATU_SHAD PCLATU_SHAD
extern volatile unsigned char           PCLATU_SHAD         __at(0x37B);
#ifndef _LIB_BUILD
asm("PCLATU_SHAD equ 037Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATU_SHADbits_t;
extern volatile PCLATU_SHADbits_t PCLATU_SHADbits __at(0x37B);
// bitfield macros
#define _PCLATU_SHAD_PCU_POSN                               0x0
#define _PCLATU_SHAD_PCU_POSITION                           0x0
#define _PCLATU_SHAD_PCU_SIZE                               0x5
#define _PCLATU_SHAD_PCU_LENGTH                             0x5
#define _PCLATU_SHAD_PCU_MASK                               0x1F

// Register: FSR0SH
#define FSR0SH FSR0SH
extern volatile unsigned short          FSR0SH              __at(0x37C);
#ifndef _LIB_BUILD
asm("FSR0SH equ 037Ch");
#endif

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x37C);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 037Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x37C);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_POSN                              0x0
#define _FSR0L_SHAD_FSR0L_POSITION                          0x0
#define _FSR0L_SHAD_FSR0L_SIZE                              0x8
#define _FSR0L_SHAD_FSR0L_LENGTH                            0x8
#define _FSR0L_SHAD_FSR0L_MASK                              0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x37D);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 037Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :6;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x37D);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_POSN                              0x0
#define _FSR0H_SHAD_FSR0H_POSITION                          0x0
#define _FSR0H_SHAD_FSR0H_SIZE                              0x6
#define _FSR0H_SHAD_FSR0H_LENGTH                            0x6
#define _FSR0H_SHAD_FSR0H_MASK                              0x3F

// Register: FSR1SH
#define FSR1SH FSR1SH
extern volatile unsigned short          FSR1SH              __at(0x37E);
#ifndef _LIB_BUILD
asm("FSR1SH equ 037Eh");
#endif

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x37E);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 037Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x37E);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_POSN                              0x0
#define _FSR1L_SHAD_FSR1L_POSITION                          0x0
#define _FSR1L_SHAD_FSR1L_SIZE                              0x8
#define _FSR1L_SHAD_FSR1L_LENGTH                            0x8
#define _FSR1L_SHAD_FSR1L_MASK                              0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x37F);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 037Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :6;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x37F);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_POSN                              0x0
#define _FSR1H_SHAD_FSR1H_POSITION                          0x0
#define _FSR1H_SHAD_FSR1H_SIZE                              0x6
#define _FSR1H_SHAD_FSR1H_LENGTH                            0x6
#define _FSR1H_SHAD_FSR1H_MASK                              0x3F

// Register: FSR2SH
#define FSR2SH FSR2SH
extern volatile unsigned short          FSR2SH              __at(0x380);
#ifndef _LIB_BUILD
asm("FSR2SH equ 0380h");
#endif

// Register: FSR2L_SHAD
#define FSR2L_SHAD FSR2L_SHAD
extern volatile unsigned char           FSR2L_SHAD          __at(0x380);
#ifndef _LIB_BUILD
asm("FSR2L_SHAD equ 0380h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2L_SHADbits_t;
extern volatile FSR2L_SHADbits_t FSR2L_SHADbits __at(0x380);
// bitfield macros
#define _FSR2L_SHAD_FSR2L_POSN                              0x0
#define _FSR2L_SHAD_FSR2L_POSITION                          0x0
#define _FSR2L_SHAD_FSR2L_SIZE                              0x8
#define _FSR2L_SHAD_FSR2L_LENGTH                            0x8
#define _FSR2L_SHAD_FSR2L_MASK                              0xFF

// Register: FSR2H_SHAD
#define FSR2H_SHAD FSR2H_SHAD
extern volatile unsigned char           FSR2H_SHAD          __at(0x381);
#ifndef _LIB_BUILD
asm("FSR2H_SHAD equ 0381h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2H                  :6;
    };
} FSR2H_SHADbits_t;
extern volatile FSR2H_SHADbits_t FSR2H_SHADbits __at(0x381);
// bitfield macros
#define _FSR2H_SHAD_FSR2H_POSN                              0x0
#define _FSR2H_SHAD_FSR2H_POSITION                          0x0
#define _FSR2H_SHAD_FSR2H_SIZE                              0x6
#define _FSR2H_SHAD_FSR2H_LENGTH                            0x6
#define _FSR2H_SHAD_FSR2H_MASK                              0x3F

// Register: PRODSH
#define PRODSH PRODSH
extern volatile unsigned short          PRODSH              __at(0x382);
#ifndef _LIB_BUILD
asm("PRODSH equ 0382h");
#endif

// Register: PRODL_SHAD
#define PRODL_SHAD PRODL_SHAD
extern volatile unsigned char           PRODL_SHAD          __at(0x382);
#ifndef _LIB_BUILD
asm("PRODL_SHAD equ 0382h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODL_SHADbits_t;
extern volatile PRODL_SHADbits_t PRODL_SHADbits __at(0x382);
// bitfield macros
#define _PRODL_SHAD_PRODL_POSN                              0x0
#define _PRODL_SHAD_PRODL_POSITION                          0x0
#define _PRODL_SHAD_PRODL_SIZE                              0x8
#define _PRODL_SHAD_PRODL_LENGTH                            0x8
#define _PRODL_SHAD_PRODL_MASK                              0xFF

// Register: PRODH_SHAD
#define PRODH_SHAD PRODH_SHAD
extern volatile unsigned char           PRODH_SHAD          __at(0x383);
#ifndef _LIB_BUILD
asm("PRODH_SHAD equ 0383h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODH_SHADbits_t;
extern volatile PRODH_SHADbits_t PRODH_SHADbits __at(0x383);
// bitfield macros
#define _PRODH_SHAD_PRODH_POSN                              0x0
#define _PRODH_SHAD_PRODH_POSITION                          0x0
#define _PRODH_SHAD_PRODH_SIZE                              0x8
#define _PRODH_SHAD_PRODH_LENGTH                            0x8
#define _PRODH_SHAD_PRODH_MASK                              0xFF

// Register: CWG1CLK
#define CWG1CLK CWG1CLK
extern volatile unsigned char           CWG1CLK             __at(0x3BC);
#ifndef _LIB_BUILD
asm("CWG1CLK equ 03BCh");
#endif
// aliases
extern volatile unsigned char           CWG1CLKCON          __at(0x3BC);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 03BCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKbits_t;
extern volatile CWG1CLKbits_t CWG1CLKbits __at(0x3BC);
// bitfield macros
#define _CWG1CLK_CS_POSN                                    0x0
#define _CWG1CLK_CS_POSITION                                0x0
#define _CWG1CLK_CS_SIZE                                    0x1
#define _CWG1CLK_CS_LENGTH                                  0x1
#define _CWG1CLK_CS_MASK                                    0x1
#define _CWG1CLK_CWG1CS_POSN                                0x0
#define _CWG1CLK_CWG1CS_POSITION                            0x0
#define _CWG1CLK_CWG1CS_SIZE                                0x1
#define _CWG1CLK_CWG1CS_LENGTH                              0x1
#define _CWG1CLK_CWG1CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x3BC);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x3BD);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 03BDh");
#endif
// aliases
extern volatile unsigned char           CWG1DAT             __at(0x3BD);
#ifndef _LIB_BUILD
asm("CWG1DAT equ 03BDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x3BD);
// bitfield macros
#define _CWG1ISM_ISM_POSN                                   0x0
#define _CWG1ISM_ISM_POSITION                               0x0
#define _CWG1ISM_ISM_SIZE                                   0x8
#define _CWG1ISM_ISM_LENGTH                                 0x8
#define _CWG1ISM_ISM_MASK                                   0xFF
#define _CWG1ISM_CWG1ISM_POSN                               0x0
#define _CWG1ISM_CWG1ISM_POSITION                           0x0
#define _CWG1ISM_CWG1ISM_SIZE                               0x8
#define _CWG1ISM_CWG1ISM_LENGTH                             0x8
#define _CWG1ISM_CWG1ISM_MASK                               0xFF
#define _CWG1ISM_ISM0_POSN                                  0x0
#define _CWG1ISM_ISM0_POSITION                              0x0
#define _CWG1ISM_ISM0_SIZE                                  0x1
#define _CWG1ISM_ISM0_LENGTH                                0x1
#define _CWG1ISM_ISM0_MASK                                  0x1
#define _CWG1ISM_ISM1_POSN                                  0x1
#define _CWG1ISM_ISM1_POSITION                              0x1
#define _CWG1ISM_ISM1_SIZE                                  0x1
#define _CWG1ISM_ISM1_LENGTH                                0x1
#define _CWG1ISM_ISM1_MASK                                  0x2
#define _CWG1ISM_ISM2_POSN                                  0x2
#define _CWG1ISM_ISM2_POSITION                              0x2
#define _CWG1ISM_ISM2_SIZE                                  0x1
#define _CWG1ISM_ISM2_LENGTH                                0x1
#define _CWG1ISM_ISM2_MASK                                  0x4
#define _CWG1ISM_ISM3_POSN                                  0x3
#define _CWG1ISM_ISM3_POSITION                              0x3
#define _CWG1ISM_ISM3_SIZE                                  0x1
#define _CWG1ISM_ISM3_LENGTH                                0x1
#define _CWG1ISM_ISM3_MASK                                  0x8
#define _CWG1ISM_ISM4_POSN                                  0x4
#define _CWG1ISM_ISM4_POSITION                              0x4
#define _CWG1ISM_ISM4_SIZE                                  0x1
#define _CWG1ISM_ISM4_LENGTH                                0x1
#define _CWG1ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1DATbits_t;
extern volatile CWG1DATbits_t CWG1DATbits __at(0x3BD);
// bitfield macros
#define _CWG1DAT_ISM_POSN                                   0x0
#define _CWG1DAT_ISM_POSITION                               0x0
#define _CWG1DAT_ISM_SIZE                                   0x8
#define _CWG1DAT_ISM_LENGTH                                 0x8
#define _CWG1DAT_ISM_MASK                                   0xFF
#define _CWG1DAT_CWG1ISM_POSN                               0x0
#define _CWG1DAT_CWG1ISM_POSITION                           0x0
#define _CWG1DAT_CWG1ISM_SIZE                               0x8
#define _CWG1DAT_CWG1ISM_LENGTH                             0x8
#define _CWG1DAT_CWG1ISM_MASK                               0xFF
#define _CWG1DAT_ISM0_POSN                                  0x0
#define _CWG1DAT_ISM0_POSITION                              0x0
#define _CWG1DAT_ISM0_SIZE                                  0x1
#define _CWG1DAT_ISM0_LENGTH                                0x1
#define _CWG1DAT_ISM0_MASK                                  0x1
#define _CWG1DAT_ISM1_POSN                                  0x1
#define _CWG1DAT_ISM1_POSITION                              0x1
#define _CWG1DAT_ISM1_SIZE                                  0x1
#define _CWG1DAT_ISM1_LENGTH                                0x1
#define _CWG1DAT_ISM1_MASK                                  0x2
#define _CWG1DAT_ISM2_POSN                                  0x2
#define _CWG1DAT_ISM2_POSITION                              0x2
#define _CWG1DAT_ISM2_SIZE                                  0x1
#define _CWG1DAT_ISM2_LENGTH                                0x1
#define _CWG1DAT_ISM2_MASK                                  0x4
#define _CWG1DAT_ISM3_POSN                                  0x3
#define _CWG1DAT_ISM3_POSITION                              0x3
#define _CWG1DAT_ISM3_SIZE                                  0x1
#define _CWG1DAT_ISM3_LENGTH                                0x1
#define _CWG1DAT_ISM3_MASK                                  0x8
#define _CWG1DAT_ISM4_POSN                                  0x4
#define _CWG1DAT_ISM4_POSITION                              0x4
#define _CWG1DAT_ISM4_SIZE                                  0x1
#define _CWG1DAT_ISM4_LENGTH                                0x1
#define _CWG1DAT_ISM4_MASK                                  0x10

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x3BE);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 03BEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :8;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x3BE);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x8
#define _CWG1DBR_DBR_LENGTH                                 0x8
#define _CWG1DBR_DBR_MASK                                   0xFF
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x8
#define _CWG1DBR_CWG1DBR_LENGTH                             0x8
#define _CWG1DBR_CWG1DBR_MASK                               0xFF
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x3BF);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 03BFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :8;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x3BF);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x8
#define _CWG1DBF_DBF_LENGTH                                 0x8
#define _CWG1DBF_DBF_MASK                                   0xFF
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x8
#define _CWG1DBF_CWG1DBF_LENGTH                             0x8
#define _CWG1DBF_CWG1DBF_MASK                               0xFF
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x3C0);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 03C0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x3C0);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x3C1);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 03C1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x3C1);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x3C2);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 03C2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSDB0              :1;
        unsigned CWG1LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD               :2;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x3C2);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSDBD_POSN                                 0x4
#define _CWG1AS0_LSDBD_POSITION                             0x4
#define _CWG1AS0_LSDBD_SIZE                                 0x2
#define _CWG1AS0_LSDBD_LENGTH                               0x2
#define _CWG1AS0_LSDBD_MASK                                 0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSCA1_POSN                                 0x3
#define _CWG1AS0_LSCA1_POSITION                             0x3
#define _CWG1AS0_LSCA1_SIZE                                 0x1
#define _CWG1AS0_LSCA1_LENGTH                               0x1
#define _CWG1AS0_LSCA1_MASK                                 0x8
#define _CWG1AS0_LSDB0_POSN                                 0x4
#define _CWG1AS0_LSDB0_POSITION                             0x4
#define _CWG1AS0_LSDB0_SIZE                                 0x1
#define _CWG1AS0_LSDB0_LENGTH                               0x1
#define _CWG1AS0_LSDB0_MASK                                 0x10
#define _CWG1AS0_LSDB1_POSN                                 0x5
#define _CWG1AS0_LSDB1_POSITION                             0x5
#define _CWG1AS0_LSDB1_SIZE                                 0x1
#define _CWG1AS0_LSDB1_LENGTH                               0x1
#define _CWG1AS0_LSDB1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSDB0_POSN                             0x4
#define _CWG1AS0_CWG1LSDB0_POSITION                         0x4
#define _CWG1AS0_CWG1LSDB0_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB0_MASK                             0x10
#define _CWG1AS0_CWG1LSDB1_POSN                             0x5
#define _CWG1AS0_CWG1LSDB1_POSITION                         0x5
#define _CWG1AS0_CWG1LSDB1_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB1_MASK                             0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSDB_POSN                              0x4
#define _CWG1AS0_CWG1LSDB_POSITION                          0x4
#define _CWG1AS0_CWG1LSDB_SIZE                              0x2
#define _CWG1AS0_CWG1LSDB_LENGTH                            0x2
#define _CWG1AS0_CWG1LSDB_MASK                              0x30
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x3C3);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 03C3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
        unsigned AS7E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x3C3);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10
#define _CWG1AS1_AS5E_POSN                                  0x5
#define _CWG1AS1_AS5E_POSITION                              0x5
#define _CWG1AS1_AS5E_SIZE                                  0x1
#define _CWG1AS1_AS5E_LENGTH                                0x1
#define _CWG1AS1_AS5E_MASK                                  0x20
#define _CWG1AS1_AS6E_POSN                                  0x6
#define _CWG1AS1_AS6E_POSITION                              0x6
#define _CWG1AS1_AS6E_SIZE                                  0x1
#define _CWG1AS1_AS6E_LENGTH                                0x1
#define _CWG1AS1_AS6E_MASK                                  0x40
#define _CWG1AS1_AS7E_POSN                                  0x7
#define _CWG1AS1_AS7E_POSITION                              0x7
#define _CWG1AS1_AS7E_SIZE                                  0x1
#define _CWG1AS1_AS7E_LENGTH                                0x1
#define _CWG1AS1_AS7E_MASK                                  0x80

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x3C4);
#ifndef _LIB_BUILD
asm("CWG1STR equ 03C4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x3C4);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: CWG2CLK
#define CWG2CLK CWG2CLK
extern volatile unsigned char           CWG2CLK             __at(0x3C5);
#ifndef _LIB_BUILD
asm("CWG2CLK equ 03C5h");
#endif
// aliases
extern volatile unsigned char           CWG2CLKCON          __at(0x3C5);
#ifndef _LIB_BUILD
asm("CWG2CLKCON equ 03C5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG2CS                 :1;
    };
} CWG2CLKbits_t;
extern volatile CWG2CLKbits_t CWG2CLKbits __at(0x3C5);
// bitfield macros
#define _CWG2CLK_CS_POSN                                    0x0
#define _CWG2CLK_CS_POSITION                                0x0
#define _CWG2CLK_CS_SIZE                                    0x1
#define _CWG2CLK_CS_LENGTH                                  0x1
#define _CWG2CLK_CS_MASK                                    0x1
#define _CWG2CLK_CWG2CS_POSN                                0x0
#define _CWG2CLK_CWG2CS_POSITION                            0x0
#define _CWG2CLK_CWG2CS_SIZE                                0x1
#define _CWG2CLK_CWG2CS_LENGTH                              0x1
#define _CWG2CLK_CWG2CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG2CS                 :1;
    };
} CWG2CLKCONbits_t;
extern volatile CWG2CLKCONbits_t CWG2CLKCONbits __at(0x3C5);
// bitfield macros
#define _CWG2CLKCON_CS_POSN                                 0x0
#define _CWG2CLKCON_CS_POSITION                             0x0
#define _CWG2CLKCON_CS_SIZE                                 0x1
#define _CWG2CLKCON_CS_LENGTH                               0x1
#define _CWG2CLKCON_CS_MASK                                 0x1
#define _CWG2CLKCON_CWG2CS_POSN                             0x0
#define _CWG2CLKCON_CWG2CS_POSITION                         0x0
#define _CWG2CLKCON_CWG2CS_SIZE                             0x1
#define _CWG2CLKCON_CWG2CS_LENGTH                           0x1
#define _CWG2CLKCON_CWG2CS_MASK                             0x1

// Register: CWG2ISM
#define CWG2ISM CWG2ISM
extern volatile unsigned char           CWG2ISM             __at(0x3C6);
#ifndef _LIB_BUILD
asm("CWG2ISM equ 03C6h");
#endif
// aliases
extern volatile unsigned char           CWG2DAT             __at(0x3C6);
#ifndef _LIB_BUILD
asm("CWG2DAT equ 03C6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG2ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG2ISMbits_t;
extern volatile CWG2ISMbits_t CWG2ISMbits __at(0x3C6);
// bitfield macros
#define _CWG2ISM_ISM_POSN                                   0x0
#define _CWG2ISM_ISM_POSITION                               0x0
#define _CWG2ISM_ISM_SIZE                                   0x8
#define _CWG2ISM_ISM_LENGTH                                 0x8
#define _CWG2ISM_ISM_MASK                                   0xFF
#define _CWG2ISM_CWG2ISM_POSN                               0x0
#define _CWG2ISM_CWG2ISM_POSITION                           0x0
#define _CWG2ISM_CWG2ISM_SIZE                               0x8
#define _CWG2ISM_CWG2ISM_LENGTH                             0x8
#define _CWG2ISM_CWG2ISM_MASK                               0xFF
#define _CWG2ISM_ISM0_POSN                                  0x0
#define _CWG2ISM_ISM0_POSITION                              0x0
#define _CWG2ISM_ISM0_SIZE                                  0x1
#define _CWG2ISM_ISM0_LENGTH                                0x1
#define _CWG2ISM_ISM0_MASK                                  0x1
#define _CWG2ISM_ISM1_POSN                                  0x1
#define _CWG2ISM_ISM1_POSITION                              0x1
#define _CWG2ISM_ISM1_SIZE                                  0x1
#define _CWG2ISM_ISM1_LENGTH                                0x1
#define _CWG2ISM_ISM1_MASK                                  0x2
#define _CWG2ISM_ISM2_POSN                                  0x2
#define _CWG2ISM_ISM2_POSITION                              0x2
#define _CWG2ISM_ISM2_SIZE                                  0x1
#define _CWG2ISM_ISM2_LENGTH                                0x1
#define _CWG2ISM_ISM2_MASK                                  0x4
#define _CWG2ISM_ISM3_POSN                                  0x3
#define _CWG2ISM_ISM3_POSITION                              0x3
#define _CWG2ISM_ISM3_SIZE                                  0x1
#define _CWG2ISM_ISM3_LENGTH                                0x1
#define _CWG2ISM_ISM3_MASK                                  0x8
#define _CWG2ISM_ISM4_POSN                                  0x4
#define _CWG2ISM_ISM4_POSITION                              0x4
#define _CWG2ISM_ISM4_SIZE                                  0x1
#define _CWG2ISM_ISM4_LENGTH                                0x1
#define _CWG2ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG2ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG2DATbits_t;
extern volatile CWG2DATbits_t CWG2DATbits __at(0x3C6);
// bitfield macros
#define _CWG2DAT_ISM_POSN                                   0x0
#define _CWG2DAT_ISM_POSITION                               0x0
#define _CWG2DAT_ISM_SIZE                                   0x8
#define _CWG2DAT_ISM_LENGTH                                 0x8
#define _CWG2DAT_ISM_MASK                                   0xFF
#define _CWG2DAT_CWG2ISM_POSN                               0x0
#define _CWG2DAT_CWG2ISM_POSITION                           0x0
#define _CWG2DAT_CWG2ISM_SIZE                               0x8
#define _CWG2DAT_CWG2ISM_LENGTH                             0x8
#define _CWG2DAT_CWG2ISM_MASK                               0xFF
#define _CWG2DAT_ISM0_POSN                                  0x0
#define _CWG2DAT_ISM0_POSITION                              0x0
#define _CWG2DAT_ISM0_SIZE                                  0x1
#define _CWG2DAT_ISM0_LENGTH                                0x1
#define _CWG2DAT_ISM0_MASK                                  0x1
#define _CWG2DAT_ISM1_POSN                                  0x1
#define _CWG2DAT_ISM1_POSITION                              0x1
#define _CWG2DAT_ISM1_SIZE                                  0x1
#define _CWG2DAT_ISM1_LENGTH                                0x1
#define _CWG2DAT_ISM1_MASK                                  0x2
#define _CWG2DAT_ISM2_POSN                                  0x2
#define _CWG2DAT_ISM2_POSITION                              0x2
#define _CWG2DAT_ISM2_SIZE                                  0x1
#define _CWG2DAT_ISM2_LENGTH                                0x1
#define _CWG2DAT_ISM2_MASK                                  0x4
#define _CWG2DAT_ISM3_POSN                                  0x3
#define _CWG2DAT_ISM3_POSITION                              0x3
#define _CWG2DAT_ISM3_SIZE                                  0x1
#define _CWG2DAT_ISM3_LENGTH                                0x1
#define _CWG2DAT_ISM3_MASK                                  0x8
#define _CWG2DAT_ISM4_POSN                                  0x4
#define _CWG2DAT_ISM4_POSITION                              0x4
#define _CWG2DAT_ISM4_SIZE                                  0x1
#define _CWG2DAT_ISM4_LENGTH                                0x1
#define _CWG2DAT_ISM4_MASK                                  0x10

// Register: CWG2DBR
#define CWG2DBR CWG2DBR
extern volatile unsigned char           CWG2DBR             __at(0x3C7);
#ifndef _LIB_BUILD
asm("CWG2DBR equ 03C7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG2DBR                :8;
    };
    struct {
        unsigned CWG2DBR0               :1;
        unsigned CWG2DBR1               :1;
        unsigned CWG2DBR2               :1;
        unsigned CWG2DBR3               :1;
        unsigned CWG2DBR4               :1;
        unsigned CWG2DBR5               :1;
    };
} CWG2DBRbits_t;
extern volatile CWG2DBRbits_t CWG2DBRbits __at(0x3C7);
// bitfield macros
#define _CWG2DBR_DBR_POSN                                   0x0
#define _CWG2DBR_DBR_POSITION                               0x0
#define _CWG2DBR_DBR_SIZE                                   0x8
#define _CWG2DBR_DBR_LENGTH                                 0x8
#define _CWG2DBR_DBR_MASK                                   0xFF
#define _CWG2DBR_DBR0_POSN                                  0x0
#define _CWG2DBR_DBR0_POSITION                              0x0
#define _CWG2DBR_DBR0_SIZE                                  0x1
#define _CWG2DBR_DBR0_LENGTH                                0x1
#define _CWG2DBR_DBR0_MASK                                  0x1
#define _CWG2DBR_DBR1_POSN                                  0x1
#define _CWG2DBR_DBR1_POSITION                              0x1
#define _CWG2DBR_DBR1_SIZE                                  0x1
#define _CWG2DBR_DBR1_LENGTH                                0x1
#define _CWG2DBR_DBR1_MASK                                  0x2
#define _CWG2DBR_DBR2_POSN                                  0x2
#define _CWG2DBR_DBR2_POSITION                              0x2
#define _CWG2DBR_DBR2_SIZE                                  0x1
#define _CWG2DBR_DBR2_LENGTH                                0x1
#define _CWG2DBR_DBR2_MASK                                  0x4
#define _CWG2DBR_DBR3_POSN                                  0x3
#define _CWG2DBR_DBR3_POSITION                              0x3
#define _CWG2DBR_DBR3_SIZE                                  0x1
#define _CWG2DBR_DBR3_LENGTH                                0x1
#define _CWG2DBR_DBR3_MASK                                  0x8
#define _CWG2DBR_DBR4_POSN                                  0x4
#define _CWG2DBR_DBR4_POSITION                              0x4
#define _CWG2DBR_DBR4_SIZE                                  0x1
#define _CWG2DBR_DBR4_LENGTH                                0x1
#define _CWG2DBR_DBR4_MASK                                  0x10
#define _CWG2DBR_DBR5_POSN                                  0x5
#define _CWG2DBR_DBR5_POSITION                              0x5
#define _CWG2DBR_DBR5_SIZE                                  0x1
#define _CWG2DBR_DBR5_LENGTH                                0x1
#define _CWG2DBR_DBR5_MASK                                  0x20
#define _CWG2DBR_CWG2DBR_POSN                               0x0
#define _CWG2DBR_CWG2DBR_POSITION                           0x0
#define _CWG2DBR_CWG2DBR_SIZE                               0x8
#define _CWG2DBR_CWG2DBR_LENGTH                             0x8
#define _CWG2DBR_CWG2DBR_MASK                               0xFF
#define _CWG2DBR_CWG2DBR0_POSN                              0x0
#define _CWG2DBR_CWG2DBR0_POSITION                          0x0
#define _CWG2DBR_CWG2DBR0_SIZE                              0x1
#define _CWG2DBR_CWG2DBR0_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR0_MASK                              0x1
#define _CWG2DBR_CWG2DBR1_POSN                              0x1
#define _CWG2DBR_CWG2DBR1_POSITION                          0x1
#define _CWG2DBR_CWG2DBR1_SIZE                              0x1
#define _CWG2DBR_CWG2DBR1_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR1_MASK                              0x2
#define _CWG2DBR_CWG2DBR2_POSN                              0x2
#define _CWG2DBR_CWG2DBR2_POSITION                          0x2
#define _CWG2DBR_CWG2DBR2_SIZE                              0x1
#define _CWG2DBR_CWG2DBR2_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR2_MASK                              0x4
#define _CWG2DBR_CWG2DBR3_POSN                              0x3
#define _CWG2DBR_CWG2DBR3_POSITION                          0x3
#define _CWG2DBR_CWG2DBR3_SIZE                              0x1
#define _CWG2DBR_CWG2DBR3_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR3_MASK                              0x8
#define _CWG2DBR_CWG2DBR4_POSN                              0x4
#define _CWG2DBR_CWG2DBR4_POSITION                          0x4
#define _CWG2DBR_CWG2DBR4_SIZE                              0x1
#define _CWG2DBR_CWG2DBR4_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR4_MASK                              0x10
#define _CWG2DBR_CWG2DBR5_POSN                              0x5
#define _CWG2DBR_CWG2DBR5_POSITION                          0x5
#define _CWG2DBR_CWG2DBR5_SIZE                              0x1
#define _CWG2DBR_CWG2DBR5_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR5_MASK                              0x20

// Register: CWG2DBF
#define CWG2DBF CWG2DBF
extern volatile unsigned char           CWG2DBF             __at(0x3C8);
#ifndef _LIB_BUILD
asm("CWG2DBF equ 03C8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG2DBF                :8;
    };
    struct {
        unsigned CWG2DBF0               :1;
        unsigned CWG2DBF1               :1;
        unsigned CWG2DBF2               :1;
        unsigned CWG2DBF3               :1;
        unsigned CWG2DBF4               :1;
        unsigned CWG2DBF5               :1;
    };
} CWG2DBFbits_t;
extern volatile CWG2DBFbits_t CWG2DBFbits __at(0x3C8);
// bitfield macros
#define _CWG2DBF_DBF_POSN                                   0x0
#define _CWG2DBF_DBF_POSITION                               0x0
#define _CWG2DBF_DBF_SIZE                                   0x8
#define _CWG2DBF_DBF_LENGTH                                 0x8
#define _CWG2DBF_DBF_MASK                                   0xFF
#define _CWG2DBF_DBF0_POSN                                  0x0
#define _CWG2DBF_DBF0_POSITION                              0x0
#define _CWG2DBF_DBF0_SIZE                                  0x1
#define _CWG2DBF_DBF0_LENGTH                                0x1
#define _CWG2DBF_DBF0_MASK                                  0x1
#define _CWG2DBF_DBF1_POSN                                  0x1
#define _CWG2DBF_DBF1_POSITION                              0x1
#define _CWG2DBF_DBF1_SIZE                                  0x1
#define _CWG2DBF_DBF1_LENGTH                                0x1
#define _CWG2DBF_DBF1_MASK                                  0x2
#define _CWG2DBF_DBF2_POSN                                  0x2
#define _CWG2DBF_DBF2_POSITION                              0x2
#define _CWG2DBF_DBF2_SIZE                                  0x1
#define _CWG2DBF_DBF2_LENGTH                                0x1
#define _CWG2DBF_DBF2_MASK                                  0x4
#define _CWG2DBF_DBF3_POSN                                  0x3
#define _CWG2DBF_DBF3_POSITION                              0x3
#define _CWG2DBF_DBF3_SIZE                                  0x1
#define _CWG2DBF_DBF3_LENGTH                                0x1
#define _CWG2DBF_DBF3_MASK                                  0x8
#define _CWG2DBF_DBF4_POSN                                  0x4
#define _CWG2DBF_DBF4_POSITION                              0x4
#define _CWG2DBF_DBF4_SIZE                                  0x1
#define _CWG2DBF_DBF4_LENGTH                                0x1
#define _CWG2DBF_DBF4_MASK                                  0x10
#define _CWG2DBF_DBF5_POSN                                  0x5
#define _CWG2DBF_DBF5_POSITION                              0x5
#define _CWG2DBF_DBF5_SIZE                                  0x1
#define _CWG2DBF_DBF5_LENGTH                                0x1
#define _CWG2DBF_DBF5_MASK                                  0x20
#define _CWG2DBF_CWG2DBF_POSN                               0x0
#define _CWG2DBF_CWG2DBF_POSITION                           0x0
#define _CWG2DBF_CWG2DBF_SIZE                               0x8
#define _CWG2DBF_CWG2DBF_LENGTH                             0x8
#define _CWG2DBF_CWG2DBF_MASK                               0xFF
#define _CWG2DBF_CWG2DBF0_POSN                              0x0
#define _CWG2DBF_CWG2DBF0_POSITION                          0x0
#define _CWG2DBF_CWG2DBF0_SIZE                              0x1
#define _CWG2DBF_CWG2DBF0_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF0_MASK                              0x1
#define _CWG2DBF_CWG2DBF1_POSN                              0x1
#define _CWG2DBF_CWG2DBF1_POSITION                          0x1
#define _CWG2DBF_CWG2DBF1_SIZE                              0x1
#define _CWG2DBF_CWG2DBF1_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF1_MASK                              0x2
#define _CWG2DBF_CWG2DBF2_POSN                              0x2
#define _CWG2DBF_CWG2DBF2_POSITION                          0x2
#define _CWG2DBF_CWG2DBF2_SIZE                              0x1
#define _CWG2DBF_CWG2DBF2_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF2_MASK                              0x4
#define _CWG2DBF_CWG2DBF3_POSN                              0x3
#define _CWG2DBF_CWG2DBF3_POSITION                          0x3
#define _CWG2DBF_CWG2DBF3_SIZE                              0x1
#define _CWG2DBF_CWG2DBF3_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF3_MASK                              0x8
#define _CWG2DBF_CWG2DBF4_POSN                              0x4
#define _CWG2DBF_CWG2DBF4_POSITION                          0x4
#define _CWG2DBF_CWG2DBF4_SIZE                              0x1
#define _CWG2DBF_CWG2DBF4_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF4_MASK                              0x10
#define _CWG2DBF_CWG2DBF5_POSN                              0x5
#define _CWG2DBF_CWG2DBF5_POSITION                          0x5
#define _CWG2DBF_CWG2DBF5_SIZE                              0x1
#define _CWG2DBF_CWG2DBF5_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF5_MASK                              0x20

// Register: CWG2CON0
#define CWG2CON0 CWG2CON0
extern volatile unsigned char           CWG2CON0            __at(0x3C9);
#ifndef _LIB_BUILD
asm("CWG2CON0 equ 03C9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G2EN                   :1;
    };
    struct {
        unsigned CWG2MODE               :3;
        unsigned                        :3;
        unsigned CWG2LD                 :1;
        unsigned CWG2EN                 :1;
    };
    struct {
        unsigned CWG2MODE0              :1;
        unsigned CWG2MODE1              :1;
        unsigned CWG2MODE2              :1;
    };
} CWG2CON0bits_t;
extern volatile CWG2CON0bits_t CWG2CON0bits __at(0x3C9);
// bitfield macros
#define _CWG2CON0_MODE_POSN                                 0x0
#define _CWG2CON0_MODE_POSITION                             0x0
#define _CWG2CON0_MODE_SIZE                                 0x3
#define _CWG2CON0_MODE_LENGTH                               0x3
#define _CWG2CON0_MODE_MASK                                 0x7
#define _CWG2CON0_LD_POSN                                   0x6
#define _CWG2CON0_LD_POSITION                               0x6
#define _CWG2CON0_LD_SIZE                                   0x1
#define _CWG2CON0_LD_LENGTH                                 0x1
#define _CWG2CON0_LD_MASK                                   0x40
#define _CWG2CON0_EN_POSN                                   0x7
#define _CWG2CON0_EN_POSITION                               0x7
#define _CWG2CON0_EN_SIZE                                   0x1
#define _CWG2CON0_EN_LENGTH                                 0x1
#define _CWG2CON0_EN_MASK                                   0x80
#define _CWG2CON0_MODE0_POSN                                0x0
#define _CWG2CON0_MODE0_POSITION                            0x0
#define _CWG2CON0_MODE0_SIZE                                0x1
#define _CWG2CON0_MODE0_LENGTH                              0x1
#define _CWG2CON0_MODE0_MASK                                0x1
#define _CWG2CON0_MODE1_POSN                                0x1
#define _CWG2CON0_MODE1_POSITION                            0x1
#define _CWG2CON0_MODE1_SIZE                                0x1
#define _CWG2CON0_MODE1_LENGTH                              0x1
#define _CWG2CON0_MODE1_MASK                                0x2
#define _CWG2CON0_MODE2_POSN                                0x2
#define _CWG2CON0_MODE2_POSITION                            0x2
#define _CWG2CON0_MODE2_SIZE                                0x1
#define _CWG2CON0_MODE2_LENGTH                              0x1
#define _CWG2CON0_MODE2_MASK                                0x4
#define _CWG2CON0_G2EN_POSN                                 0x7
#define _CWG2CON0_G2EN_POSITION                             0x7
#define _CWG2CON0_G2EN_SIZE                                 0x1
#define _CWG2CON0_G2EN_LENGTH                               0x1
#define _CWG2CON0_G2EN_MASK                                 0x80
#define _CWG2CON0_CWG2MODE_POSN                             0x0
#define _CWG2CON0_CWG2MODE_POSITION                         0x0
#define _CWG2CON0_CWG2MODE_SIZE                             0x3
#define _CWG2CON0_CWG2MODE_LENGTH                           0x3
#define _CWG2CON0_CWG2MODE_MASK                             0x7
#define _CWG2CON0_CWG2LD_POSN                               0x6
#define _CWG2CON0_CWG2LD_POSITION                           0x6
#define _CWG2CON0_CWG2LD_SIZE                               0x1
#define _CWG2CON0_CWG2LD_LENGTH                             0x1
#define _CWG2CON0_CWG2LD_MASK                               0x40
#define _CWG2CON0_CWG2EN_POSN                               0x7
#define _CWG2CON0_CWG2EN_POSITION                           0x7
#define _CWG2CON0_CWG2EN_SIZE                               0x1
#define _CWG2CON0_CWG2EN_LENGTH                             0x1
#define _CWG2CON0_CWG2EN_MASK                               0x80
#define _CWG2CON0_CWG2MODE0_POSN                            0x0
#define _CWG2CON0_CWG2MODE0_POSITION                        0x0
#define _CWG2CON0_CWG2MODE0_SIZE                            0x1
#define _CWG2CON0_CWG2MODE0_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE0_MASK                            0x1
#define _CWG2CON0_CWG2MODE1_POSN                            0x1
#define _CWG2CON0_CWG2MODE1_POSITION                        0x1
#define _CWG2CON0_CWG2MODE1_SIZE                            0x1
#define _CWG2CON0_CWG2MODE1_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE1_MASK                            0x2
#define _CWG2CON0_CWG2MODE2_POSN                            0x2
#define _CWG2CON0_CWG2MODE2_POSITION                        0x2
#define _CWG2CON0_CWG2MODE2_SIZE                            0x1
#define _CWG2CON0_CWG2MODE2_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE2_MASK                            0x4

// Register: CWG2CON1
#define CWG2CON1 CWG2CON1
extern volatile unsigned char           CWG2CON1            __at(0x3CA);
#ifndef _LIB_BUILD
asm("CWG2CON1 equ 03CAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG2POLA               :1;
        unsigned CWG2POLB               :1;
        unsigned CWG2POLC               :1;
        unsigned CWG2POLD               :1;
        unsigned                        :1;
        unsigned CWG2IN                 :1;
    };
} CWG2CON1bits_t;
extern volatile CWG2CON1bits_t CWG2CON1bits __at(0x3CA);
// bitfield macros
#define _CWG2CON1_POLA_POSN                                 0x0
#define _CWG2CON1_POLA_POSITION                             0x0
#define _CWG2CON1_POLA_SIZE                                 0x1
#define _CWG2CON1_POLA_LENGTH                               0x1
#define _CWG2CON1_POLA_MASK                                 0x1
#define _CWG2CON1_POLB_POSN                                 0x1
#define _CWG2CON1_POLB_POSITION                             0x1
#define _CWG2CON1_POLB_SIZE                                 0x1
#define _CWG2CON1_POLB_LENGTH                               0x1
#define _CWG2CON1_POLB_MASK                                 0x2
#define _CWG2CON1_POLC_POSN                                 0x2
#define _CWG2CON1_POLC_POSITION                             0x2
#define _CWG2CON1_POLC_SIZE                                 0x1
#define _CWG2CON1_POLC_LENGTH                               0x1
#define _CWG2CON1_POLC_MASK                                 0x4
#define _CWG2CON1_POLD_POSN                                 0x3
#define _CWG2CON1_POLD_POSITION                             0x3
#define _CWG2CON1_POLD_SIZE                                 0x1
#define _CWG2CON1_POLD_LENGTH                               0x1
#define _CWG2CON1_POLD_MASK                                 0x8
#define _CWG2CON1_IN_POSN                                   0x5
#define _CWG2CON1_IN_POSITION                               0x5
#define _CWG2CON1_IN_SIZE                                   0x1
#define _CWG2CON1_IN_LENGTH                                 0x1
#define _CWG2CON1_IN_MASK                                   0x20
#define _CWG2CON1_CWG2POLA_POSN                             0x0
#define _CWG2CON1_CWG2POLA_POSITION                         0x0
#define _CWG2CON1_CWG2POLA_SIZE                             0x1
#define _CWG2CON1_CWG2POLA_LENGTH                           0x1
#define _CWG2CON1_CWG2POLA_MASK                             0x1
#define _CWG2CON1_CWG2POLB_POSN                             0x1
#define _CWG2CON1_CWG2POLB_POSITION                         0x1
#define _CWG2CON1_CWG2POLB_SIZE                             0x1
#define _CWG2CON1_CWG2POLB_LENGTH                           0x1
#define _CWG2CON1_CWG2POLB_MASK                             0x2
#define _CWG2CON1_CWG2POLC_POSN                             0x2
#define _CWG2CON1_CWG2POLC_POSITION                         0x2
#define _CWG2CON1_CWG2POLC_SIZE                             0x1
#define _CWG2CON1_CWG2POLC_LENGTH                           0x1
#define _CWG2CON1_CWG2POLC_MASK                             0x4
#define _CWG2CON1_CWG2POLD_POSN                             0x3
#define _CWG2CON1_CWG2POLD_POSITION                         0x3
#define _CWG2CON1_CWG2POLD_SIZE                             0x1
#define _CWG2CON1_CWG2POLD_LENGTH                           0x1
#define _CWG2CON1_CWG2POLD_MASK                             0x8
#define _CWG2CON1_CWG2IN_POSN                               0x5
#define _CWG2CON1_CWG2IN_POSITION                           0x5
#define _CWG2CON1_CWG2IN_SIZE                               0x1
#define _CWG2CON1_CWG2IN_LENGTH                             0x1
#define _CWG2CON1_CWG2IN_MASK                               0x20

// Register: CWG2AS0
#define CWG2AS0 CWG2AS0
extern volatile unsigned char           CWG2AS0             __at(0x3CB);
#ifndef _LIB_BUILD
asm("CWG2AS0 equ 03CBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC0              :1;
        unsigned CWG2LSAC1              :1;
        unsigned CWG2LSDB0              :1;
        unsigned CWG2LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC               :2;
        unsigned CWG2LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG2LSBD0              :1;
        unsigned CWG2LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG2LSBD               :2;
    };
} CWG2AS0bits_t;
extern volatile CWG2AS0bits_t CWG2AS0bits __at(0x3CB);
// bitfield macros
#define _CWG2AS0_LSAC_POSN                                  0x2
#define _CWG2AS0_LSAC_POSITION                              0x2
#define _CWG2AS0_LSAC_SIZE                                  0x2
#define _CWG2AS0_LSAC_LENGTH                                0x2
#define _CWG2AS0_LSAC_MASK                                  0xC
#define _CWG2AS0_LSDBD_POSN                                 0x4
#define _CWG2AS0_LSDBD_POSITION                             0x4
#define _CWG2AS0_LSDBD_SIZE                                 0x2
#define _CWG2AS0_LSDBD_LENGTH                               0x2
#define _CWG2AS0_LSDBD_MASK                                 0x30
#define _CWG2AS0_REN_POSN                                   0x6
#define _CWG2AS0_REN_POSITION                               0x6
#define _CWG2AS0_REN_SIZE                                   0x1
#define _CWG2AS0_REN_LENGTH                                 0x1
#define _CWG2AS0_REN_MASK                                   0x40
#define _CWG2AS0_SHUTDOWN_POSN                              0x7
#define _CWG2AS0_SHUTDOWN_POSITION                          0x7
#define _CWG2AS0_SHUTDOWN_SIZE                              0x1
#define _CWG2AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG2AS0_SHUTDOWN_MASK                              0x80
#define _CWG2AS0_LSAC0_POSN                                 0x2
#define _CWG2AS0_LSAC0_POSITION                             0x2
#define _CWG2AS0_LSAC0_SIZE                                 0x1
#define _CWG2AS0_LSAC0_LENGTH                               0x1
#define _CWG2AS0_LSAC0_MASK                                 0x4
#define _CWG2AS0_LSCA1_POSN                                 0x3
#define _CWG2AS0_LSCA1_POSITION                             0x3
#define _CWG2AS0_LSCA1_SIZE                                 0x1
#define _CWG2AS0_LSCA1_LENGTH                               0x1
#define _CWG2AS0_LSCA1_MASK                                 0x8
#define _CWG2AS0_LSDB0_POSN                                 0x4
#define _CWG2AS0_LSDB0_POSITION                             0x4
#define _CWG2AS0_LSDB0_SIZE                                 0x1
#define _CWG2AS0_LSDB0_LENGTH                               0x1
#define _CWG2AS0_LSDB0_MASK                                 0x10
#define _CWG2AS0_LSDB1_POSN                                 0x5
#define _CWG2AS0_LSDB1_POSITION                             0x5
#define _CWG2AS0_LSDB1_SIZE                                 0x1
#define _CWG2AS0_LSDB1_LENGTH                               0x1
#define _CWG2AS0_LSDB1_MASK                                 0x20
#define _CWG2AS0_CWG2LSAC0_POSN                             0x2
#define _CWG2AS0_CWG2LSAC0_POSITION                         0x2
#define _CWG2AS0_CWG2LSAC0_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC0_MASK                             0x4
#define _CWG2AS0_CWG2LSAC1_POSN                             0x3
#define _CWG2AS0_CWG2LSAC1_POSITION                         0x3
#define _CWG2AS0_CWG2LSAC1_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC1_MASK                             0x8
#define _CWG2AS0_CWG2LSDB0_POSN                             0x4
#define _CWG2AS0_CWG2LSDB0_POSITION                         0x4
#define _CWG2AS0_CWG2LSDB0_SIZE                             0x1
#define _CWG2AS0_CWG2LSDB0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSDB0_MASK                             0x10
#define _CWG2AS0_CWG2LSDB1_POSN                             0x5
#define _CWG2AS0_CWG2LSDB1_POSITION                         0x5
#define _CWG2AS0_CWG2LSDB1_SIZE                             0x1
#define _CWG2AS0_CWG2LSDB1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSDB1_MASK                             0x20
#define _CWG2AS0_CWG2LSAC_POSN                              0x2
#define _CWG2AS0_CWG2LSAC_POSITION                          0x2
#define _CWG2AS0_CWG2LSAC_SIZE                              0x2
#define _CWG2AS0_CWG2LSAC_LENGTH                            0x2
#define _CWG2AS0_CWG2LSAC_MASK                              0xC
#define _CWG2AS0_CWG2LSDB_POSN                              0x4
#define _CWG2AS0_CWG2LSDB_POSITION                          0x4
#define _CWG2AS0_CWG2LSDB_SIZE                              0x2
#define _CWG2AS0_CWG2LSDB_LENGTH                            0x2
#define _CWG2AS0_CWG2LSDB_MASK                              0x30
#define _CWG2AS0_LSBD_POSN                                  0x4
#define _CWG2AS0_LSBD_POSITION                              0x4
#define _CWG2AS0_LSBD_SIZE                                  0x2
#define _CWG2AS0_LSBD_LENGTH                                0x2
#define _CWG2AS0_LSBD_MASK                                  0x30
#define _CWG2AS0_LSAC1_POSN                                 0x3
#define _CWG2AS0_LSAC1_POSITION                             0x3
#define _CWG2AS0_LSAC1_SIZE                                 0x1
#define _CWG2AS0_LSAC1_LENGTH                               0x1
#define _CWG2AS0_LSAC1_MASK                                 0x8
#define _CWG2AS0_LSBD0_POSN                                 0x4
#define _CWG2AS0_LSBD0_POSITION                             0x4
#define _CWG2AS0_LSBD0_SIZE                                 0x1
#define _CWG2AS0_LSBD0_LENGTH                               0x1
#define _CWG2AS0_LSBD0_MASK                                 0x10
#define _CWG2AS0_LSBD1_POSN                                 0x5
#define _CWG2AS0_LSBD1_POSITION                             0x5
#define _CWG2AS0_LSBD1_SIZE                                 0x1
#define _CWG2AS0_LSBD1_LENGTH                               0x1
#define _CWG2AS0_LSBD1_MASK                                 0x20
#define _CWG2AS0_CWG2LSBD0_POSN                             0x4
#define _CWG2AS0_CWG2LSBD0_POSITION                         0x4
#define _CWG2AS0_CWG2LSBD0_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD0_MASK                             0x10
#define _CWG2AS0_CWG2LSBD1_POSN                             0x5
#define _CWG2AS0_CWG2LSBD1_POSITION                         0x5
#define _CWG2AS0_CWG2LSBD1_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD1_MASK                             0x20
#define _CWG2AS0_CWG2LSBD_POSN                              0x4
#define _CWG2AS0_CWG2LSBD_POSITION                          0x4
#define _CWG2AS0_CWG2LSBD_SIZE                              0x2
#define _CWG2AS0_CWG2LSBD_LENGTH                            0x2
#define _CWG2AS0_CWG2LSBD_MASK                              0x30

// Register: CWG2AS1
#define CWG2AS1 CWG2AS1
extern volatile unsigned char           CWG2AS1             __at(0x3CC);
#ifndef _LIB_BUILD
asm("CWG2AS1 equ 03CCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
        unsigned AS7E                   :1;
    };
} CWG2AS1bits_t;
extern volatile CWG2AS1bits_t CWG2AS1bits __at(0x3CC);
// bitfield macros
#define _CWG2AS1_AS0E_POSN                                  0x0
#define _CWG2AS1_AS0E_POSITION                              0x0
#define _CWG2AS1_AS0E_SIZE                                  0x1
#define _CWG2AS1_AS0E_LENGTH                                0x1
#define _CWG2AS1_AS0E_MASK                                  0x1
#define _CWG2AS1_AS1E_POSN                                  0x1
#define _CWG2AS1_AS1E_POSITION                              0x1
#define _CWG2AS1_AS1E_SIZE                                  0x1
#define _CWG2AS1_AS1E_LENGTH                                0x1
#define _CWG2AS1_AS1E_MASK                                  0x2
#define _CWG2AS1_AS2E_POSN                                  0x2
#define _CWG2AS1_AS2E_POSITION                              0x2
#define _CWG2AS1_AS2E_SIZE                                  0x1
#define _CWG2AS1_AS2E_LENGTH                                0x1
#define _CWG2AS1_AS2E_MASK                                  0x4
#define _CWG2AS1_AS3E_POSN                                  0x3
#define _CWG2AS1_AS3E_POSITION                              0x3
#define _CWG2AS1_AS3E_SIZE                                  0x1
#define _CWG2AS1_AS3E_LENGTH                                0x1
#define _CWG2AS1_AS3E_MASK                                  0x8
#define _CWG2AS1_AS4E_POSN                                  0x4
#define _CWG2AS1_AS4E_POSITION                              0x4
#define _CWG2AS1_AS4E_SIZE                                  0x1
#define _CWG2AS1_AS4E_LENGTH                                0x1
#define _CWG2AS1_AS4E_MASK                                  0x10
#define _CWG2AS1_AS5E_POSN                                  0x5
#define _CWG2AS1_AS5E_POSITION                              0x5
#define _CWG2AS1_AS5E_SIZE                                  0x1
#define _CWG2AS1_AS5E_LENGTH                                0x1
#define _CWG2AS1_AS5E_MASK                                  0x20
#define _CWG2AS1_AS6E_POSN                                  0x6
#define _CWG2AS1_AS6E_POSITION                              0x6
#define _CWG2AS1_AS6E_SIZE                                  0x1
#define _CWG2AS1_AS6E_LENGTH                                0x1
#define _CWG2AS1_AS6E_MASK                                  0x40
#define _CWG2AS1_AS7E_POSN                                  0x7
#define _CWG2AS1_AS7E_POSITION                              0x7
#define _CWG2AS1_AS7E_SIZE                                  0x1
#define _CWG2AS1_AS7E_LENGTH                                0x1
#define _CWG2AS1_AS7E_MASK                                  0x80

// Register: CWG2STR
#define CWG2STR CWG2STR
extern volatile unsigned char           CWG2STR             __at(0x3CD);
#ifndef _LIB_BUILD
asm("CWG2STR equ 03CDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG2STRA               :1;
        unsigned CWG2STRB               :1;
        unsigned CWG2STRC               :1;
        unsigned CWG2STRD               :1;
        unsigned CWG2OVRA               :1;
        unsigned CWG2OVRB               :1;
        unsigned CWG2OVRC               :1;
        unsigned CWG2OVRD               :1;
    };
} CWG2STRbits_t;
extern volatile CWG2STRbits_t CWG2STRbits __at(0x3CD);
// bitfield macros
#define _CWG2STR_STRA_POSN                                  0x0
#define _CWG2STR_STRA_POSITION                              0x0
#define _CWG2STR_STRA_SIZE                                  0x1
#define _CWG2STR_STRA_LENGTH                                0x1
#define _CWG2STR_STRA_MASK                                  0x1
#define _CWG2STR_STRB_POSN                                  0x1
#define _CWG2STR_STRB_POSITION                              0x1
#define _CWG2STR_STRB_SIZE                                  0x1
#define _CWG2STR_STRB_LENGTH                                0x1
#define _CWG2STR_STRB_MASK                                  0x2
#define _CWG2STR_STRC_POSN                                  0x2
#define _CWG2STR_STRC_POSITION                              0x2
#define _CWG2STR_STRC_SIZE                                  0x1
#define _CWG2STR_STRC_LENGTH                                0x1
#define _CWG2STR_STRC_MASK                                  0x4
#define _CWG2STR_STRD_POSN                                  0x3
#define _CWG2STR_STRD_POSITION                              0x3
#define _CWG2STR_STRD_SIZE                                  0x1
#define _CWG2STR_STRD_LENGTH                                0x1
#define _CWG2STR_STRD_MASK                                  0x8
#define _CWG2STR_OVRA_POSN                                  0x4
#define _CWG2STR_OVRA_POSITION                              0x4
#define _CWG2STR_OVRA_SIZE                                  0x1
#define _CWG2STR_OVRA_LENGTH                                0x1
#define _CWG2STR_OVRA_MASK                                  0x10
#define _CWG2STR_OVRB_POSN                                  0x5
#define _CWG2STR_OVRB_POSITION                              0x5
#define _CWG2STR_OVRB_SIZE                                  0x1
#define _CWG2STR_OVRB_LENGTH                                0x1
#define _CWG2STR_OVRB_MASK                                  0x20
#define _CWG2STR_OVRC_POSN                                  0x6
#define _CWG2STR_OVRC_POSITION                              0x6
#define _CWG2STR_OVRC_SIZE                                  0x1
#define _CWG2STR_OVRC_LENGTH                                0x1
#define _CWG2STR_OVRC_MASK                                  0x40
#define _CWG2STR_OVRD_POSN                                  0x7
#define _CWG2STR_OVRD_POSITION                              0x7
#define _CWG2STR_OVRD_SIZE                                  0x1
#define _CWG2STR_OVRD_LENGTH                                0x1
#define _CWG2STR_OVRD_MASK                                  0x80
#define _CWG2STR_CWG2STRA_POSN                              0x0
#define _CWG2STR_CWG2STRA_POSITION                          0x0
#define _CWG2STR_CWG2STRA_SIZE                              0x1
#define _CWG2STR_CWG2STRA_LENGTH                            0x1
#define _CWG2STR_CWG2STRA_MASK                              0x1
#define _CWG2STR_CWG2STRB_POSN                              0x1
#define _CWG2STR_CWG2STRB_POSITION                          0x1
#define _CWG2STR_CWG2STRB_SIZE                              0x1
#define _CWG2STR_CWG2STRB_LENGTH                            0x1
#define _CWG2STR_CWG2STRB_MASK                              0x2
#define _CWG2STR_CWG2STRC_POSN                              0x2
#define _CWG2STR_CWG2STRC_POSITION                          0x2
#define _CWG2STR_CWG2STRC_SIZE                              0x1
#define _CWG2STR_CWG2STRC_LENGTH                            0x1
#define _CWG2STR_CWG2STRC_MASK                              0x4
#define _CWG2STR_CWG2STRD_POSN                              0x3
#define _CWG2STR_CWG2STRD_POSITION                          0x3
#define _CWG2STR_CWG2STRD_SIZE                              0x1
#define _CWG2STR_CWG2STRD_LENGTH                            0x1
#define _CWG2STR_CWG2STRD_MASK                              0x8
#define _CWG2STR_CWG2OVRA_POSN                              0x4
#define _CWG2STR_CWG2OVRA_POSITION                          0x4
#define _CWG2STR_CWG2OVRA_SIZE                              0x1
#define _CWG2STR_CWG2OVRA_LENGTH                            0x1
#define _CWG2STR_CWG2OVRA_MASK                              0x10
#define _CWG2STR_CWG2OVRB_POSN                              0x5
#define _CWG2STR_CWG2OVRB_POSITION                          0x5
#define _CWG2STR_CWG2OVRB_SIZE                              0x1
#define _CWG2STR_CWG2OVRB_LENGTH                            0x1
#define _CWG2STR_CWG2OVRB_MASK                              0x20
#define _CWG2STR_CWG2OVRC_POSN                              0x6
#define _CWG2STR_CWG2OVRC_POSITION                          0x6
#define _CWG2STR_CWG2OVRC_SIZE                              0x1
#define _CWG2STR_CWG2OVRC_LENGTH                            0x1
#define _CWG2STR_CWG2OVRC_MASK                              0x40
#define _CWG2STR_CWG2OVRD_POSN                              0x7
#define _CWG2STR_CWG2OVRD_POSITION                          0x7
#define _CWG2STR_CWG2OVRD_SIZE                              0x1
#define _CWG2STR_CWG2OVRD_LENGTH                            0x1
#define _CWG2STR_CWG2OVRD_MASK                              0x80

// Register: CWG3CLK
#define CWG3CLK CWG3CLK
extern volatile unsigned char           CWG3CLK             __at(0x3CE);
#ifndef _LIB_BUILD
asm("CWG3CLK equ 03CEh");
#endif
// aliases
extern volatile unsigned char           CWG3CLKCON          __at(0x3CE);
#ifndef _LIB_BUILD
asm("CWG3CLKCON equ 03CEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG3CS                 :1;
    };
} CWG3CLKbits_t;
extern volatile CWG3CLKbits_t CWG3CLKbits __at(0x3CE);
// bitfield macros
#define _CWG3CLK_CS_POSN                                    0x0
#define _CWG3CLK_CS_POSITION                                0x0
#define _CWG3CLK_CS_SIZE                                    0x1
#define _CWG3CLK_CS_LENGTH                                  0x1
#define _CWG3CLK_CS_MASK                                    0x1
#define _CWG3CLK_CWG3CS_POSN                                0x0
#define _CWG3CLK_CWG3CS_POSITION                            0x0
#define _CWG3CLK_CWG3CS_SIZE                                0x1
#define _CWG3CLK_CWG3CS_LENGTH                              0x1
#define _CWG3CLK_CWG3CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG3CS                 :1;
    };
} CWG3CLKCONbits_t;
extern volatile CWG3CLKCONbits_t CWG3CLKCONbits __at(0x3CE);
// bitfield macros
#define _CWG3CLKCON_CS_POSN                                 0x0
#define _CWG3CLKCON_CS_POSITION                             0x0
#define _CWG3CLKCON_CS_SIZE                                 0x1
#define _CWG3CLKCON_CS_LENGTH                               0x1
#define _CWG3CLKCON_CS_MASK                                 0x1
#define _CWG3CLKCON_CWG3CS_POSN                             0x0
#define _CWG3CLKCON_CWG3CS_POSITION                         0x0
#define _CWG3CLKCON_CWG3CS_SIZE                             0x1
#define _CWG3CLKCON_CWG3CS_LENGTH                           0x1
#define _CWG3CLKCON_CWG3CS_MASK                             0x1

// Register: CWG3ISM
#define CWG3ISM CWG3ISM
extern volatile unsigned char           CWG3ISM             __at(0x3CF);
#ifndef _LIB_BUILD
asm("CWG3ISM equ 03CFh");
#endif
// aliases
extern volatile unsigned char           CWG3DAT             __at(0x3CF);
#ifndef _LIB_BUILD
asm("CWG3DAT equ 03CFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG3ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG3ISMbits_t;
extern volatile CWG3ISMbits_t CWG3ISMbits __at(0x3CF);
// bitfield macros
#define _CWG3ISM_ISM_POSN                                   0x0
#define _CWG3ISM_ISM_POSITION                               0x0
#define _CWG3ISM_ISM_SIZE                                   0x8
#define _CWG3ISM_ISM_LENGTH                                 0x8
#define _CWG3ISM_ISM_MASK                                   0xFF
#define _CWG3ISM_CWG3ISM_POSN                               0x0
#define _CWG3ISM_CWG3ISM_POSITION                           0x0
#define _CWG3ISM_CWG3ISM_SIZE                               0x8
#define _CWG3ISM_CWG3ISM_LENGTH                             0x8
#define _CWG3ISM_CWG3ISM_MASK                               0xFF
#define _CWG3ISM_ISM0_POSN                                  0x0
#define _CWG3ISM_ISM0_POSITION                              0x0
#define _CWG3ISM_ISM0_SIZE                                  0x1
#define _CWG3ISM_ISM0_LENGTH                                0x1
#define _CWG3ISM_ISM0_MASK                                  0x1
#define _CWG3ISM_ISM1_POSN                                  0x1
#define _CWG3ISM_ISM1_POSITION                              0x1
#define _CWG3ISM_ISM1_SIZE                                  0x1
#define _CWG3ISM_ISM1_LENGTH                                0x1
#define _CWG3ISM_ISM1_MASK                                  0x2
#define _CWG3ISM_ISM2_POSN                                  0x2
#define _CWG3ISM_ISM2_POSITION                              0x2
#define _CWG3ISM_ISM2_SIZE                                  0x1
#define _CWG3ISM_ISM2_LENGTH                                0x1
#define _CWG3ISM_ISM2_MASK                                  0x4
#define _CWG3ISM_ISM3_POSN                                  0x3
#define _CWG3ISM_ISM3_POSITION                              0x3
#define _CWG3ISM_ISM3_SIZE                                  0x1
#define _CWG3ISM_ISM3_LENGTH                                0x1
#define _CWG3ISM_ISM3_MASK                                  0x8
#define _CWG3ISM_ISM4_POSN                                  0x4
#define _CWG3ISM_ISM4_POSITION                              0x4
#define _CWG3ISM_ISM4_SIZE                                  0x1
#define _CWG3ISM_ISM4_LENGTH                                0x1
#define _CWG3ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG3ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG3DATbits_t;
extern volatile CWG3DATbits_t CWG3DATbits __at(0x3CF);
// bitfield macros
#define _CWG3DAT_ISM_POSN                                   0x0
#define _CWG3DAT_ISM_POSITION                               0x0
#define _CWG3DAT_ISM_SIZE                                   0x8
#define _CWG3DAT_ISM_LENGTH                                 0x8
#define _CWG3DAT_ISM_MASK                                   0xFF
#define _CWG3DAT_CWG3ISM_POSN                               0x0
#define _CWG3DAT_CWG3ISM_POSITION                           0x0
#define _CWG3DAT_CWG3ISM_SIZE                               0x8
#define _CWG3DAT_CWG3ISM_LENGTH                             0x8
#define _CWG3DAT_CWG3ISM_MASK                               0xFF
#define _CWG3DAT_ISM0_POSN                                  0x0
#define _CWG3DAT_ISM0_POSITION                              0x0
#define _CWG3DAT_ISM0_SIZE                                  0x1
#define _CWG3DAT_ISM0_LENGTH                                0x1
#define _CWG3DAT_ISM0_MASK                                  0x1
#define _CWG3DAT_ISM1_POSN                                  0x1
#define _CWG3DAT_ISM1_POSITION                              0x1
#define _CWG3DAT_ISM1_SIZE                                  0x1
#define _CWG3DAT_ISM1_LENGTH                                0x1
#define _CWG3DAT_ISM1_MASK                                  0x2
#define _CWG3DAT_ISM2_POSN                                  0x2
#define _CWG3DAT_ISM2_POSITION                              0x2
#define _CWG3DAT_ISM2_SIZE                                  0x1
#define _CWG3DAT_ISM2_LENGTH                                0x1
#define _CWG3DAT_ISM2_MASK                                  0x4
#define _CWG3DAT_ISM3_POSN                                  0x3
#define _CWG3DAT_ISM3_POSITION                              0x3
#define _CWG3DAT_ISM3_SIZE                                  0x1
#define _CWG3DAT_ISM3_LENGTH                                0x1
#define _CWG3DAT_ISM3_MASK                                  0x8
#define _CWG3DAT_ISM4_POSN                                  0x4
#define _CWG3DAT_ISM4_POSITION                              0x4
#define _CWG3DAT_ISM4_SIZE                                  0x1
#define _CWG3DAT_ISM4_LENGTH                                0x1
#define _CWG3DAT_ISM4_MASK                                  0x10

// Register: CWG3DBR
#define CWG3DBR CWG3DBR
extern volatile unsigned char           CWG3DBR             __at(0x3D0);
#ifndef _LIB_BUILD
asm("CWG3DBR equ 03D0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG3DBR                :8;
    };
    struct {
        unsigned CWG3DBR0               :1;
        unsigned CWG3DBR1               :1;
        unsigned CWG3DBR2               :1;
        unsigned CWG3DBR3               :1;
        unsigned CWG3DBR4               :1;
        unsigned CWG3DBR5               :1;
    };
} CWG3DBRbits_t;
extern volatile CWG3DBRbits_t CWG3DBRbits __at(0x3D0);
// bitfield macros
#define _CWG3DBR_DBR_POSN                                   0x0
#define _CWG3DBR_DBR_POSITION                               0x0
#define _CWG3DBR_DBR_SIZE                                   0x8
#define _CWG3DBR_DBR_LENGTH                                 0x8
#define _CWG3DBR_DBR_MASK                                   0xFF
#define _CWG3DBR_DBR0_POSN                                  0x0
#define _CWG3DBR_DBR0_POSITION                              0x0
#define _CWG3DBR_DBR0_SIZE                                  0x1
#define _CWG3DBR_DBR0_LENGTH                                0x1
#define _CWG3DBR_DBR0_MASK                                  0x1
#define _CWG3DBR_DBR1_POSN                                  0x1
#define _CWG3DBR_DBR1_POSITION                              0x1
#define _CWG3DBR_DBR1_SIZE                                  0x1
#define _CWG3DBR_DBR1_LENGTH                                0x1
#define _CWG3DBR_DBR1_MASK                                  0x2
#define _CWG3DBR_DBR2_POSN                                  0x2
#define _CWG3DBR_DBR2_POSITION                              0x2
#define _CWG3DBR_DBR2_SIZE                                  0x1
#define _CWG3DBR_DBR2_LENGTH                                0x1
#define _CWG3DBR_DBR2_MASK                                  0x4
#define _CWG3DBR_DBR3_POSN                                  0x3
#define _CWG3DBR_DBR3_POSITION                              0x3
#define _CWG3DBR_DBR3_SIZE                                  0x1
#define _CWG3DBR_DBR3_LENGTH                                0x1
#define _CWG3DBR_DBR3_MASK                                  0x8
#define _CWG3DBR_DBR4_POSN                                  0x4
#define _CWG3DBR_DBR4_POSITION                              0x4
#define _CWG3DBR_DBR4_SIZE                                  0x1
#define _CWG3DBR_DBR4_LENGTH                                0x1
#define _CWG3DBR_DBR4_MASK                                  0x10
#define _CWG3DBR_DBR5_POSN                                  0x5
#define _CWG3DBR_DBR5_POSITION                              0x5
#define _CWG3DBR_DBR5_SIZE                                  0x1
#define _CWG3DBR_DBR5_LENGTH                                0x1
#define _CWG3DBR_DBR5_MASK                                  0x20
#define _CWG3DBR_CWG3DBR_POSN                               0x0
#define _CWG3DBR_CWG3DBR_POSITION                           0x0
#define _CWG3DBR_CWG3DBR_SIZE                               0x8
#define _CWG3DBR_CWG3DBR_LENGTH                             0x8
#define _CWG3DBR_CWG3DBR_MASK                               0xFF
#define _CWG3DBR_CWG3DBR0_POSN                              0x0
#define _CWG3DBR_CWG3DBR0_POSITION                          0x0
#define _CWG3DBR_CWG3DBR0_SIZE                              0x1
#define _CWG3DBR_CWG3DBR0_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR0_MASK                              0x1
#define _CWG3DBR_CWG3DBR1_POSN                              0x1
#define _CWG3DBR_CWG3DBR1_POSITION                          0x1
#define _CWG3DBR_CWG3DBR1_SIZE                              0x1
#define _CWG3DBR_CWG3DBR1_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR1_MASK                              0x2
#define _CWG3DBR_CWG3DBR2_POSN                              0x2
#define _CWG3DBR_CWG3DBR2_POSITION                          0x2
#define _CWG3DBR_CWG3DBR2_SIZE                              0x1
#define _CWG3DBR_CWG3DBR2_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR2_MASK                              0x4
#define _CWG3DBR_CWG3DBR3_POSN                              0x3
#define _CWG3DBR_CWG3DBR3_POSITION                          0x3
#define _CWG3DBR_CWG3DBR3_SIZE                              0x1
#define _CWG3DBR_CWG3DBR3_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR3_MASK                              0x8
#define _CWG3DBR_CWG3DBR4_POSN                              0x4
#define _CWG3DBR_CWG3DBR4_POSITION                          0x4
#define _CWG3DBR_CWG3DBR4_SIZE                              0x1
#define _CWG3DBR_CWG3DBR4_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR4_MASK                              0x10
#define _CWG3DBR_CWG3DBR5_POSN                              0x5
#define _CWG3DBR_CWG3DBR5_POSITION                          0x5
#define _CWG3DBR_CWG3DBR5_SIZE                              0x1
#define _CWG3DBR_CWG3DBR5_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR5_MASK                              0x20

// Register: CWG3DBF
#define CWG3DBF CWG3DBF
extern volatile unsigned char           CWG3DBF             __at(0x3D1);
#ifndef _LIB_BUILD
asm("CWG3DBF equ 03D1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG3DBF                :8;
    };
    struct {
        unsigned CWG3DBF0               :1;
        unsigned CWG3DBF1               :1;
        unsigned CWG3DBF2               :1;
        unsigned CWG3DBF3               :1;
        unsigned CWG3DBF4               :1;
        unsigned CWG3DBF5               :1;
    };
} CWG3DBFbits_t;
extern volatile CWG3DBFbits_t CWG3DBFbits __at(0x3D1);
// bitfield macros
#define _CWG3DBF_DBF_POSN                                   0x0
#define _CWG3DBF_DBF_POSITION                               0x0
#define _CWG3DBF_DBF_SIZE                                   0x8
#define _CWG3DBF_DBF_LENGTH                                 0x8
#define _CWG3DBF_DBF_MASK                                   0xFF
#define _CWG3DBF_DBF0_POSN                                  0x0
#define _CWG3DBF_DBF0_POSITION                              0x0
#define _CWG3DBF_DBF0_SIZE                                  0x1
#define _CWG3DBF_DBF0_LENGTH                                0x1
#define _CWG3DBF_DBF0_MASK                                  0x1
#define _CWG3DBF_DBF1_POSN                                  0x1
#define _CWG3DBF_DBF1_POSITION                              0x1
#define _CWG3DBF_DBF1_SIZE                                  0x1
#define _CWG3DBF_DBF1_LENGTH                                0x1
#define _CWG3DBF_DBF1_MASK                                  0x2
#define _CWG3DBF_DBF2_POSN                                  0x2
#define _CWG3DBF_DBF2_POSITION                              0x2
#define _CWG3DBF_DBF2_SIZE                                  0x1
#define _CWG3DBF_DBF2_LENGTH                                0x1
#define _CWG3DBF_DBF2_MASK                                  0x4
#define _CWG3DBF_DBF3_POSN                                  0x3
#define _CWG3DBF_DBF3_POSITION                              0x3
#define _CWG3DBF_DBF3_SIZE                                  0x1
#define _CWG3DBF_DBF3_LENGTH                                0x1
#define _CWG3DBF_DBF3_MASK                                  0x8
#define _CWG3DBF_DBF4_POSN                                  0x4
#define _CWG3DBF_DBF4_POSITION                              0x4
#define _CWG3DBF_DBF4_SIZE                                  0x1
#define _CWG3DBF_DBF4_LENGTH                                0x1
#define _CWG3DBF_DBF4_MASK                                  0x10
#define _CWG3DBF_DBF5_POSN                                  0x5
#define _CWG3DBF_DBF5_POSITION                              0x5
#define _CWG3DBF_DBF5_SIZE                                  0x1
#define _CWG3DBF_DBF5_LENGTH                                0x1
#define _CWG3DBF_DBF5_MASK                                  0x20
#define _CWG3DBF_CWG3DBF_POSN                               0x0
#define _CWG3DBF_CWG3DBF_POSITION                           0x0
#define _CWG3DBF_CWG3DBF_SIZE                               0x8
#define _CWG3DBF_CWG3DBF_LENGTH                             0x8
#define _CWG3DBF_CWG3DBF_MASK                               0xFF
#define _CWG3DBF_CWG3DBF0_POSN                              0x0
#define _CWG3DBF_CWG3DBF0_POSITION                          0x0
#define _CWG3DBF_CWG3DBF0_SIZE                              0x1
#define _CWG3DBF_CWG3DBF0_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF0_MASK                              0x1
#define _CWG3DBF_CWG3DBF1_POSN                              0x1
#define _CWG3DBF_CWG3DBF1_POSITION                          0x1
#define _CWG3DBF_CWG3DBF1_SIZE                              0x1
#define _CWG3DBF_CWG3DBF1_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF1_MASK                              0x2
#define _CWG3DBF_CWG3DBF2_POSN                              0x2
#define _CWG3DBF_CWG3DBF2_POSITION                          0x2
#define _CWG3DBF_CWG3DBF2_SIZE                              0x1
#define _CWG3DBF_CWG3DBF2_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF2_MASK                              0x4
#define _CWG3DBF_CWG3DBF3_POSN                              0x3
#define _CWG3DBF_CWG3DBF3_POSITION                          0x3
#define _CWG3DBF_CWG3DBF3_SIZE                              0x1
#define _CWG3DBF_CWG3DBF3_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF3_MASK                              0x8
#define _CWG3DBF_CWG3DBF4_POSN                              0x4
#define _CWG3DBF_CWG3DBF4_POSITION                          0x4
#define _CWG3DBF_CWG3DBF4_SIZE                              0x1
#define _CWG3DBF_CWG3DBF4_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF4_MASK                              0x10
#define _CWG3DBF_CWG3DBF5_POSN                              0x5
#define _CWG3DBF_CWG3DBF5_POSITION                          0x5
#define _CWG3DBF_CWG3DBF5_SIZE                              0x1
#define _CWG3DBF_CWG3DBF5_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF5_MASK                              0x20

// Register: CWG3CON0
#define CWG3CON0 CWG3CON0
extern volatile unsigned char           CWG3CON0            __at(0x3D2);
#ifndef _LIB_BUILD
asm("CWG3CON0 equ 03D2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G3EN                   :1;
    };
    struct {
        unsigned CWG3MODE               :3;
        unsigned                        :3;
        unsigned CWG3LD                 :1;
        unsigned CWG3EN                 :1;
    };
    struct {
        unsigned CWG3MODE0              :1;
        unsigned CWG3MODE1              :1;
        unsigned CWG3MODE2              :1;
    };
} CWG3CON0bits_t;
extern volatile CWG3CON0bits_t CWG3CON0bits __at(0x3D2);
// bitfield macros
#define _CWG3CON0_MODE_POSN                                 0x0
#define _CWG3CON0_MODE_POSITION                             0x0
#define _CWG3CON0_MODE_SIZE                                 0x3
#define _CWG3CON0_MODE_LENGTH                               0x3
#define _CWG3CON0_MODE_MASK                                 0x7
#define _CWG3CON0_LD_POSN                                   0x6
#define _CWG3CON0_LD_POSITION                               0x6
#define _CWG3CON0_LD_SIZE                                   0x1
#define _CWG3CON0_LD_LENGTH                                 0x1
#define _CWG3CON0_LD_MASK                                   0x40
#define _CWG3CON0_EN_POSN                                   0x7
#define _CWG3CON0_EN_POSITION                               0x7
#define _CWG3CON0_EN_SIZE                                   0x1
#define _CWG3CON0_EN_LENGTH                                 0x1
#define _CWG3CON0_EN_MASK                                   0x80
#define _CWG3CON0_MODE0_POSN                                0x0
#define _CWG3CON0_MODE0_POSITION                            0x0
#define _CWG3CON0_MODE0_SIZE                                0x1
#define _CWG3CON0_MODE0_LENGTH                              0x1
#define _CWG3CON0_MODE0_MASK                                0x1
#define _CWG3CON0_MODE1_POSN                                0x1
#define _CWG3CON0_MODE1_POSITION                            0x1
#define _CWG3CON0_MODE1_SIZE                                0x1
#define _CWG3CON0_MODE1_LENGTH                              0x1
#define _CWG3CON0_MODE1_MASK                                0x2
#define _CWG3CON0_MODE2_POSN                                0x2
#define _CWG3CON0_MODE2_POSITION                            0x2
#define _CWG3CON0_MODE2_SIZE                                0x1
#define _CWG3CON0_MODE2_LENGTH                              0x1
#define _CWG3CON0_MODE2_MASK                                0x4
#define _CWG3CON0_G3EN_POSN                                 0x7
#define _CWG3CON0_G3EN_POSITION                             0x7
#define _CWG3CON0_G3EN_SIZE                                 0x1
#define _CWG3CON0_G3EN_LENGTH                               0x1
#define _CWG3CON0_G3EN_MASK                                 0x80
#define _CWG3CON0_CWG3MODE_POSN                             0x0
#define _CWG3CON0_CWG3MODE_POSITION                         0x0
#define _CWG3CON0_CWG3MODE_SIZE                             0x3
#define _CWG3CON0_CWG3MODE_LENGTH                           0x3
#define _CWG3CON0_CWG3MODE_MASK                             0x7
#define _CWG3CON0_CWG3LD_POSN                               0x6
#define _CWG3CON0_CWG3LD_POSITION                           0x6
#define _CWG3CON0_CWG3LD_SIZE                               0x1
#define _CWG3CON0_CWG3LD_LENGTH                             0x1
#define _CWG3CON0_CWG3LD_MASK                               0x40
#define _CWG3CON0_CWG3EN_POSN                               0x7
#define _CWG3CON0_CWG3EN_POSITION                           0x7
#define _CWG3CON0_CWG3EN_SIZE                               0x1
#define _CWG3CON0_CWG3EN_LENGTH                             0x1
#define _CWG3CON0_CWG3EN_MASK                               0x80
#define _CWG3CON0_CWG3MODE0_POSN                            0x0
#define _CWG3CON0_CWG3MODE0_POSITION                        0x0
#define _CWG3CON0_CWG3MODE0_SIZE                            0x1
#define _CWG3CON0_CWG3MODE0_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE0_MASK                            0x1
#define _CWG3CON0_CWG3MODE1_POSN                            0x1
#define _CWG3CON0_CWG3MODE1_POSITION                        0x1
#define _CWG3CON0_CWG3MODE1_SIZE                            0x1
#define _CWG3CON0_CWG3MODE1_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE1_MASK                            0x2
#define _CWG3CON0_CWG3MODE2_POSN                            0x2
#define _CWG3CON0_CWG3MODE2_POSITION                        0x2
#define _CWG3CON0_CWG3MODE2_SIZE                            0x1
#define _CWG3CON0_CWG3MODE2_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE2_MASK                            0x4

// Register: CWG3CON1
#define CWG3CON1 CWG3CON1
extern volatile unsigned char           CWG3CON1            __at(0x3D3);
#ifndef _LIB_BUILD
asm("CWG3CON1 equ 03D3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG3POLA               :1;
        unsigned CWG3POLB               :1;
        unsigned CWG3POLC               :1;
        unsigned CWG3POLD               :1;
        unsigned                        :1;
        unsigned CWG3IN                 :1;
    };
} CWG3CON1bits_t;
extern volatile CWG3CON1bits_t CWG3CON1bits __at(0x3D3);
// bitfield macros
#define _CWG3CON1_POLA_POSN                                 0x0
#define _CWG3CON1_POLA_POSITION                             0x0
#define _CWG3CON1_POLA_SIZE                                 0x1
#define _CWG3CON1_POLA_LENGTH                               0x1
#define _CWG3CON1_POLA_MASK                                 0x1
#define _CWG3CON1_POLB_POSN                                 0x1
#define _CWG3CON1_POLB_POSITION                             0x1
#define _CWG3CON1_POLB_SIZE                                 0x1
#define _CWG3CON1_POLB_LENGTH                               0x1
#define _CWG3CON1_POLB_MASK                                 0x2
#define _CWG3CON1_POLC_POSN                                 0x2
#define _CWG3CON1_POLC_POSITION                             0x2
#define _CWG3CON1_POLC_SIZE                                 0x1
#define _CWG3CON1_POLC_LENGTH                               0x1
#define _CWG3CON1_POLC_MASK                                 0x4
#define _CWG3CON1_POLD_POSN                                 0x3
#define _CWG3CON1_POLD_POSITION                             0x3
#define _CWG3CON1_POLD_SIZE                                 0x1
#define _CWG3CON1_POLD_LENGTH                               0x1
#define _CWG3CON1_POLD_MASK                                 0x8
#define _CWG3CON1_IN_POSN                                   0x5
#define _CWG3CON1_IN_POSITION                               0x5
#define _CWG3CON1_IN_SIZE                                   0x1
#define _CWG3CON1_IN_LENGTH                                 0x1
#define _CWG3CON1_IN_MASK                                   0x20
#define _CWG3CON1_CWG3POLA_POSN                             0x0
#define _CWG3CON1_CWG3POLA_POSITION                         0x0
#define _CWG3CON1_CWG3POLA_SIZE                             0x1
#define _CWG3CON1_CWG3POLA_LENGTH                           0x1
#define _CWG3CON1_CWG3POLA_MASK                             0x1
#define _CWG3CON1_CWG3POLB_POSN                             0x1
#define _CWG3CON1_CWG3POLB_POSITION                         0x1
#define _CWG3CON1_CWG3POLB_SIZE                             0x1
#define _CWG3CON1_CWG3POLB_LENGTH                           0x1
#define _CWG3CON1_CWG3POLB_MASK                             0x2
#define _CWG3CON1_CWG3POLC_POSN                             0x2
#define _CWG3CON1_CWG3POLC_POSITION                         0x2
#define _CWG3CON1_CWG3POLC_SIZE                             0x1
#define _CWG3CON1_CWG3POLC_LENGTH                           0x1
#define _CWG3CON1_CWG3POLC_MASK                             0x4
#define _CWG3CON1_CWG3POLD_POSN                             0x3
#define _CWG3CON1_CWG3POLD_POSITION                         0x3
#define _CWG3CON1_CWG3POLD_SIZE                             0x1
#define _CWG3CON1_CWG3POLD_LENGTH                           0x1
#define _CWG3CON1_CWG3POLD_MASK                             0x8
#define _CWG3CON1_CWG3IN_POSN                               0x5
#define _CWG3CON1_CWG3IN_POSITION                           0x5
#define _CWG3CON1_CWG3IN_SIZE                               0x1
#define _CWG3CON1_CWG3IN_LENGTH                             0x1
#define _CWG3CON1_CWG3IN_MASK                               0x20

// Register: CWG3AS0
#define CWG3AS0 CWG3AS0
extern volatile unsigned char           CWG3AS0             __at(0x3D4);
#ifndef _LIB_BUILD
asm("CWG3AS0 equ 03D4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC0              :1;
        unsigned CWG3LSAC1              :1;
        unsigned CWG3LSDB0              :1;
        unsigned CWG3LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC               :2;
        unsigned CWG3LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG3LSBD0              :1;
        unsigned CWG3LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG3LSBD               :2;
    };
} CWG3AS0bits_t;
extern volatile CWG3AS0bits_t CWG3AS0bits __at(0x3D4);
// bitfield macros
#define _CWG3AS0_LSAC_POSN                                  0x2
#define _CWG3AS0_LSAC_POSITION                              0x2
#define _CWG3AS0_LSAC_SIZE                                  0x2
#define _CWG3AS0_LSAC_LENGTH                                0x2
#define _CWG3AS0_LSAC_MASK                                  0xC
#define _CWG3AS0_LSDBD_POSN                                 0x4
#define _CWG3AS0_LSDBD_POSITION                             0x4
#define _CWG3AS0_LSDBD_SIZE                                 0x2
#define _CWG3AS0_LSDBD_LENGTH                               0x2
#define _CWG3AS0_LSDBD_MASK                                 0x30
#define _CWG3AS0_REN_POSN                                   0x6
#define _CWG3AS0_REN_POSITION                               0x6
#define _CWG3AS0_REN_SIZE                                   0x1
#define _CWG3AS0_REN_LENGTH                                 0x1
#define _CWG3AS0_REN_MASK                                   0x40
#define _CWG3AS0_SHUTDOWN_POSN                              0x7
#define _CWG3AS0_SHUTDOWN_POSITION                          0x7
#define _CWG3AS0_SHUTDOWN_SIZE                              0x1
#define _CWG3AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG3AS0_SHUTDOWN_MASK                              0x80
#define _CWG3AS0_LSAC0_POSN                                 0x2
#define _CWG3AS0_LSAC0_POSITION                             0x2
#define _CWG3AS0_LSAC0_SIZE                                 0x1
#define _CWG3AS0_LSAC0_LENGTH                               0x1
#define _CWG3AS0_LSAC0_MASK                                 0x4
#define _CWG3AS0_LSCA1_POSN                                 0x3
#define _CWG3AS0_LSCA1_POSITION                             0x3
#define _CWG3AS0_LSCA1_SIZE                                 0x1
#define _CWG3AS0_LSCA1_LENGTH                               0x1
#define _CWG3AS0_LSCA1_MASK                                 0x8
#define _CWG3AS0_LSDB0_POSN                                 0x4
#define _CWG3AS0_LSDB0_POSITION                             0x4
#define _CWG3AS0_LSDB0_SIZE                                 0x1
#define _CWG3AS0_LSDB0_LENGTH                               0x1
#define _CWG3AS0_LSDB0_MASK                                 0x10
#define _CWG3AS0_LSDB1_POSN                                 0x5
#define _CWG3AS0_LSDB1_POSITION                             0x5
#define _CWG3AS0_LSDB1_SIZE                                 0x1
#define _CWG3AS0_LSDB1_LENGTH                               0x1
#define _CWG3AS0_LSDB1_MASK                                 0x20
#define _CWG3AS0_CWG3LSAC0_POSN                             0x2
#define _CWG3AS0_CWG3LSAC0_POSITION                         0x2
#define _CWG3AS0_CWG3LSAC0_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC0_MASK                             0x4
#define _CWG3AS0_CWG3LSAC1_POSN                             0x3
#define _CWG3AS0_CWG3LSAC1_POSITION                         0x3
#define _CWG3AS0_CWG3LSAC1_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC1_MASK                             0x8
#define _CWG3AS0_CWG3LSDB0_POSN                             0x4
#define _CWG3AS0_CWG3LSDB0_POSITION                         0x4
#define _CWG3AS0_CWG3LSDB0_SIZE                             0x1
#define _CWG3AS0_CWG3LSDB0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSDB0_MASK                             0x10
#define _CWG3AS0_CWG3LSDB1_POSN                             0x5
#define _CWG3AS0_CWG3LSDB1_POSITION                         0x5
#define _CWG3AS0_CWG3LSDB1_SIZE                             0x1
#define _CWG3AS0_CWG3LSDB1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSDB1_MASK                             0x20
#define _CWG3AS0_CWG3LSAC_POSN                              0x2
#define _CWG3AS0_CWG3LSAC_POSITION                          0x2
#define _CWG3AS0_CWG3LSAC_SIZE                              0x2
#define _CWG3AS0_CWG3LSAC_LENGTH                            0x2
#define _CWG3AS0_CWG3LSAC_MASK                              0xC
#define _CWG3AS0_CWG3LSDB_POSN                              0x4
#define _CWG3AS0_CWG3LSDB_POSITION                          0x4
#define _CWG3AS0_CWG3LSDB_SIZE                              0x2
#define _CWG3AS0_CWG3LSDB_LENGTH                            0x2
#define _CWG3AS0_CWG3LSDB_MASK                              0x30
#define _CWG3AS0_LSBD_POSN                                  0x4
#define _CWG3AS0_LSBD_POSITION                              0x4
#define _CWG3AS0_LSBD_SIZE                                  0x2
#define _CWG3AS0_LSBD_LENGTH                                0x2
#define _CWG3AS0_LSBD_MASK                                  0x30
#define _CWG3AS0_LSAC1_POSN                                 0x3
#define _CWG3AS0_LSAC1_POSITION                             0x3
#define _CWG3AS0_LSAC1_SIZE                                 0x1
#define _CWG3AS0_LSAC1_LENGTH                               0x1
#define _CWG3AS0_LSAC1_MASK                                 0x8
#define _CWG3AS0_LSBD0_POSN                                 0x4
#define _CWG3AS0_LSBD0_POSITION                             0x4
#define _CWG3AS0_LSBD0_SIZE                                 0x1
#define _CWG3AS0_LSBD0_LENGTH                               0x1
#define _CWG3AS0_LSBD0_MASK                                 0x10
#define _CWG3AS0_LSBD1_POSN                                 0x5
#define _CWG3AS0_LSBD1_POSITION                             0x5
#define _CWG3AS0_LSBD1_SIZE                                 0x1
#define _CWG3AS0_LSBD1_LENGTH                               0x1
#define _CWG3AS0_LSBD1_MASK                                 0x20
#define _CWG3AS0_CWG3LSBD0_POSN                             0x4
#define _CWG3AS0_CWG3LSBD0_POSITION                         0x4
#define _CWG3AS0_CWG3LSBD0_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD0_MASK                             0x10
#define _CWG3AS0_CWG3LSBD1_POSN                             0x5
#define _CWG3AS0_CWG3LSBD1_POSITION                         0x5
#define _CWG3AS0_CWG3LSBD1_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD1_MASK                             0x20
#define _CWG3AS0_CWG3LSBD_POSN                              0x4
#define _CWG3AS0_CWG3LSBD_POSITION                          0x4
#define _CWG3AS0_CWG3LSBD_SIZE                              0x2
#define _CWG3AS0_CWG3LSBD_LENGTH                            0x2
#define _CWG3AS0_CWG3LSBD_MASK                              0x30

// Register: CWG3AS1
#define CWG3AS1 CWG3AS1
extern volatile unsigned char           CWG3AS1             __at(0x3D5);
#ifndef _LIB_BUILD
asm("CWG3AS1 equ 03D5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
        unsigned AS7E                   :1;
    };
} CWG3AS1bits_t;
extern volatile CWG3AS1bits_t CWG3AS1bits __at(0x3D5);
// bitfield macros
#define _CWG3AS1_AS0E_POSN                                  0x0
#define _CWG3AS1_AS0E_POSITION                              0x0
#define _CWG3AS1_AS0E_SIZE                                  0x1
#define _CWG3AS1_AS0E_LENGTH                                0x1
#define _CWG3AS1_AS0E_MASK                                  0x1
#define _CWG3AS1_AS1E_POSN                                  0x1
#define _CWG3AS1_AS1E_POSITION                              0x1
#define _CWG3AS1_AS1E_SIZE                                  0x1
#define _CWG3AS1_AS1E_LENGTH                                0x1
#define _CWG3AS1_AS1E_MASK                                  0x2
#define _CWG3AS1_AS2E_POSN                                  0x2
#define _CWG3AS1_AS2E_POSITION                              0x2
#define _CWG3AS1_AS2E_SIZE                                  0x1
#define _CWG3AS1_AS2E_LENGTH                                0x1
#define _CWG3AS1_AS2E_MASK                                  0x4
#define _CWG3AS1_AS3E_POSN                                  0x3
#define _CWG3AS1_AS3E_POSITION                              0x3
#define _CWG3AS1_AS3E_SIZE                                  0x1
#define _CWG3AS1_AS3E_LENGTH                                0x1
#define _CWG3AS1_AS3E_MASK                                  0x8
#define _CWG3AS1_AS4E_POSN                                  0x4
#define _CWG3AS1_AS4E_POSITION                              0x4
#define _CWG3AS1_AS4E_SIZE                                  0x1
#define _CWG3AS1_AS4E_LENGTH                                0x1
#define _CWG3AS1_AS4E_MASK                                  0x10
#define _CWG3AS1_AS5E_POSN                                  0x5
#define _CWG3AS1_AS5E_POSITION                              0x5
#define _CWG3AS1_AS5E_SIZE                                  0x1
#define _CWG3AS1_AS5E_LENGTH                                0x1
#define _CWG3AS1_AS5E_MASK                                  0x20
#define _CWG3AS1_AS6E_POSN                                  0x6
#define _CWG3AS1_AS6E_POSITION                              0x6
#define _CWG3AS1_AS6E_SIZE                                  0x1
#define _CWG3AS1_AS6E_LENGTH                                0x1
#define _CWG3AS1_AS6E_MASK                                  0x40
#define _CWG3AS1_AS7E_POSN                                  0x7
#define _CWG3AS1_AS7E_POSITION                              0x7
#define _CWG3AS1_AS7E_SIZE                                  0x1
#define _CWG3AS1_AS7E_LENGTH                                0x1
#define _CWG3AS1_AS7E_MASK                                  0x80

// Register: CWG3STR
#define CWG3STR CWG3STR
extern volatile unsigned char           CWG3STR             __at(0x3D6);
#ifndef _LIB_BUILD
asm("CWG3STR equ 03D6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG3STRA               :1;
        unsigned CWG3STRB               :1;
        unsigned CWG3STRC               :1;
        unsigned CWG3STRD               :1;
        unsigned CWG3OVRA               :1;
        unsigned CWG3OVRB               :1;
        unsigned CWG3OVRC               :1;
        unsigned CWG3OVRD               :1;
    };
} CWG3STRbits_t;
extern volatile CWG3STRbits_t CWG3STRbits __at(0x3D6);
// bitfield macros
#define _CWG3STR_STRA_POSN                                  0x0
#define _CWG3STR_STRA_POSITION                              0x0
#define _CWG3STR_STRA_SIZE                                  0x1
#define _CWG3STR_STRA_LENGTH                                0x1
#define _CWG3STR_STRA_MASK                                  0x1
#define _CWG3STR_STRB_POSN                                  0x1
#define _CWG3STR_STRB_POSITION                              0x1
#define _CWG3STR_STRB_SIZE                                  0x1
#define _CWG3STR_STRB_LENGTH                                0x1
#define _CWG3STR_STRB_MASK                                  0x2
#define _CWG3STR_STRC_POSN                                  0x2
#define _CWG3STR_STRC_POSITION                              0x2
#define _CWG3STR_STRC_SIZE                                  0x1
#define _CWG3STR_STRC_LENGTH                                0x1
#define _CWG3STR_STRC_MASK                                  0x4
#define _CWG3STR_STRD_POSN                                  0x3
#define _CWG3STR_STRD_POSITION                              0x3
#define _CWG3STR_STRD_SIZE                                  0x1
#define _CWG3STR_STRD_LENGTH                                0x1
#define _CWG3STR_STRD_MASK                                  0x8
#define _CWG3STR_OVRA_POSN                                  0x4
#define _CWG3STR_OVRA_POSITION                              0x4
#define _CWG3STR_OVRA_SIZE                                  0x1
#define _CWG3STR_OVRA_LENGTH                                0x1
#define _CWG3STR_OVRA_MASK                                  0x10
#define _CWG3STR_OVRB_POSN                                  0x5
#define _CWG3STR_OVRB_POSITION                              0x5
#define _CWG3STR_OVRB_SIZE                                  0x1
#define _CWG3STR_OVRB_LENGTH                                0x1
#define _CWG3STR_OVRB_MASK                                  0x20
#define _CWG3STR_OVRC_POSN                                  0x6
#define _CWG3STR_OVRC_POSITION                              0x6
#define _CWG3STR_OVRC_SIZE                                  0x1
#define _CWG3STR_OVRC_LENGTH                                0x1
#define _CWG3STR_OVRC_MASK                                  0x40
#define _CWG3STR_OVRD_POSN                                  0x7
#define _CWG3STR_OVRD_POSITION                              0x7
#define _CWG3STR_OVRD_SIZE                                  0x1
#define _CWG3STR_OVRD_LENGTH                                0x1
#define _CWG3STR_OVRD_MASK                                  0x80
#define _CWG3STR_CWG3STRA_POSN                              0x0
#define _CWG3STR_CWG3STRA_POSITION                          0x0
#define _CWG3STR_CWG3STRA_SIZE                              0x1
#define _CWG3STR_CWG3STRA_LENGTH                            0x1
#define _CWG3STR_CWG3STRA_MASK                              0x1
#define _CWG3STR_CWG3STRB_POSN                              0x1
#define _CWG3STR_CWG3STRB_POSITION                          0x1
#define _CWG3STR_CWG3STRB_SIZE                              0x1
#define _CWG3STR_CWG3STRB_LENGTH                            0x1
#define _CWG3STR_CWG3STRB_MASK                              0x2
#define _CWG3STR_CWG3STRC_POSN                              0x2
#define _CWG3STR_CWG3STRC_POSITION                          0x2
#define _CWG3STR_CWG3STRC_SIZE                              0x1
#define _CWG3STR_CWG3STRC_LENGTH                            0x1
#define _CWG3STR_CWG3STRC_MASK                              0x4
#define _CWG3STR_CWG3STRD_POSN                              0x3
#define _CWG3STR_CWG3STRD_POSITION                          0x3
#define _CWG3STR_CWG3STRD_SIZE                              0x1
#define _CWG3STR_CWG3STRD_LENGTH                            0x1
#define _CWG3STR_CWG3STRD_MASK                              0x8
#define _CWG3STR_CWG3OVRA_POSN                              0x4
#define _CWG3STR_CWG3OVRA_POSITION                          0x4
#define _CWG3STR_CWG3OVRA_SIZE                              0x1
#define _CWG3STR_CWG3OVRA_LENGTH                            0x1
#define _CWG3STR_CWG3OVRA_MASK                              0x10
#define _CWG3STR_CWG3OVRB_POSN                              0x5
#define _CWG3STR_CWG3OVRB_POSITION                          0x5
#define _CWG3STR_CWG3OVRB_SIZE                              0x1
#define _CWG3STR_CWG3OVRB_LENGTH                            0x1
#define _CWG3STR_CWG3OVRB_MASK                              0x20
#define _CWG3STR_CWG3OVRC_POSN                              0x6
#define _CWG3STR_CWG3OVRC_POSITION                          0x6
#define _CWG3STR_CWG3OVRC_SIZE                              0x1
#define _CWG3STR_CWG3OVRC_LENGTH                            0x1
#define _CWG3STR_CWG3OVRC_MASK                              0x40
#define _CWG3STR_CWG3OVRD_POSN                              0x7
#define _CWG3STR_CWG3OVRD_POSITION                          0x7
#define _CWG3STR_CWG3OVRD_SIZE                              0x1
#define _CWG3STR_CWG3OVRD_LENGTH                            0x1
#define _CWG3STR_CWG3OVRD_MASK                              0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x3D7);
#ifndef _LIB_BUILD
asm("FVRCON equ 03D7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned RDY                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
        unsigned                        :2;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x3D7);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_RDY_POSN                                    0x6
#define _FVRCON_RDY_POSITION                                0x6
#define _FVRCON_RDY_SIZE                                    0x1
#define _FVRCON_RDY_LENGTH                                  0x1
#define _FVRCON_RDY_MASK                                    0x40
#define _FVRCON_EN_POSN                                     0x7
#define _FVRCON_EN_POSITION                                 0x7
#define _FVRCON_EN_SIZE                                     0x1
#define _FVRCON_EN_LENGTH                                   0x1
#define _FVRCON_EN_MASK                                     0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: ADCPCON
#define ADCPCON ADCPCON
extern volatile unsigned char           ADCPCON             __at(0x3D8);
#ifndef _LIB_BUILD
asm("ADCPCON equ 03D8h");
#endif
// aliases
extern volatile unsigned char           ADCP                __at(0x3D8);
#ifndef _LIB_BUILD
asm("ADCP equ 03D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRDY                  :1;
        unsigned                        :6;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADCPRDY                :1;
        unsigned                        :6;
        unsigned CPON                   :1;
    };
    struct {
        unsigned                        :7;
        unsigned ADCPON                 :1;
    };
} ADCPCONbits_t;
extern volatile ADCPCONbits_t ADCPCONbits __at(0x3D8);
// bitfield macros
#define _ADCPCON_CPRDY_POSN                                 0x0
#define _ADCPCON_CPRDY_POSITION                             0x0
#define _ADCPCON_CPRDY_SIZE                                 0x1
#define _ADCPCON_CPRDY_LENGTH                               0x1
#define _ADCPCON_CPRDY_MASK                                 0x1
#define _ADCPCON_ON_POSN                                    0x7
#define _ADCPCON_ON_POSITION                                0x7
#define _ADCPCON_ON_SIZE                                    0x1
#define _ADCPCON_ON_LENGTH                                  0x1
#define _ADCPCON_ON_MASK                                    0x80
#define _ADCPCON_ADCPRDY_POSN                               0x0
#define _ADCPCON_ADCPRDY_POSITION                           0x0
#define _ADCPCON_ADCPRDY_SIZE                               0x1
#define _ADCPCON_ADCPRDY_LENGTH                             0x1
#define _ADCPCON_ADCPRDY_MASK                               0x1
#define _ADCPCON_CPON_POSN                                  0x7
#define _ADCPCON_CPON_POSITION                              0x7
#define _ADCPCON_CPON_SIZE                                  0x1
#define _ADCPCON_CPON_LENGTH                                0x1
#define _ADCPCON_CPON_MASK                                  0x80
#define _ADCPCON_ADCPON_POSN                                0x7
#define _ADCPCON_ADCPON_POSITION                            0x7
#define _ADCPCON_ADCPON_SIZE                                0x1
#define _ADCPCON_ADCPON_LENGTH                              0x1
#define _ADCPCON_ADCPON_MASK                                0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned CPRDY                  :1;
        unsigned                        :6;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADCPRDY                :1;
        unsigned                        :6;
        unsigned CPON                   :1;
    };
    struct {
        unsigned                        :7;
        unsigned ADCPON                 :1;
    };
} ADCPbits_t;
extern volatile ADCPbits_t ADCPbits __at(0x3D8);
// bitfield macros
#define _ADCP_CPRDY_POSN                                    0x0
#define _ADCP_CPRDY_POSITION                                0x0
#define _ADCP_CPRDY_SIZE                                    0x1
#define _ADCP_CPRDY_LENGTH                                  0x1
#define _ADCP_CPRDY_MASK                                    0x1
#define _ADCP_ON_POSN                                       0x7
#define _ADCP_ON_POSITION                                   0x7
#define _ADCP_ON_SIZE                                       0x1
#define _ADCP_ON_LENGTH                                     0x1
#define _ADCP_ON_MASK                                       0x80
#define _ADCP_ADCPRDY_POSN                                  0x0
#define _ADCP_ADCPRDY_POSITION                              0x0
#define _ADCP_ADCPRDY_SIZE                                  0x1
#define _ADCP_ADCPRDY_LENGTH                                0x1
#define _ADCP_ADCPRDY_MASK                                  0x1
#define _ADCP_CPON_POSN                                     0x7
#define _ADCP_CPON_POSITION                                 0x7
#define _ADCP_CPON_SIZE                                     0x1
#define _ADCP_CPON_LENGTH                                   0x1
#define _ADCP_CPON_MASK                                     0x80
#define _ADCP_ADCPON_POSN                                   0x7
#define _ADCP_ADCPON_POSITION                               0x7
#define _ADCP_ADCPON_SIZE                                   0x1
#define _ADCP_ADCPON_LENGTH                                 0x1
#define _ADCP_ADCPON_MASK                                   0x80

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x3D9);
#ifndef _LIB_BUILD
asm("ADLTH equ 03D9h");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x3D9);
#ifndef _LIB_BUILD
asm("ADLTHL equ 03D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH0                   :1;
        unsigned LTH1                   :1;
        unsigned LTH2                   :1;
        unsigned LTH3                   :1;
        unsigned LTH4                   :1;
        unsigned LTH5                   :1;
        unsigned LTH6                   :1;
        unsigned LTH7                   :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x3D9);
// bitfield macros
#define _ADLTHL_LTH_POSN                                    0x0
#define _ADLTHL_LTH_POSITION                                0x0
#define _ADLTHL_LTH_SIZE                                    0x8
#define _ADLTHL_LTH_LENGTH                                  0x8
#define _ADLTHL_LTH_MASK                                    0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80
#define _ADLTHL_ADLTH_POSN                                  0x0
#define _ADLTHL_ADLTH_POSITION                              0x0
#define _ADLTHL_ADLTH_SIZE                                  0x8
#define _ADLTHL_ADLTH_LENGTH                                0x8
#define _ADLTHL_ADLTH_MASK                                  0xFF
#define _ADLTHL_LTH0_POSN                                   0x0
#define _ADLTHL_LTH0_POSITION                               0x0
#define _ADLTHL_LTH0_SIZE                                   0x1
#define _ADLTHL_LTH0_LENGTH                                 0x1
#define _ADLTHL_LTH0_MASK                                   0x1
#define _ADLTHL_LTH1_POSN                                   0x1
#define _ADLTHL_LTH1_POSITION                               0x1
#define _ADLTHL_LTH1_SIZE                                   0x1
#define _ADLTHL_LTH1_LENGTH                                 0x1
#define _ADLTHL_LTH1_MASK                                   0x2
#define _ADLTHL_LTH2_POSN                                   0x2
#define _ADLTHL_LTH2_POSITION                               0x2
#define _ADLTHL_LTH2_SIZE                                   0x1
#define _ADLTHL_LTH2_LENGTH                                 0x1
#define _ADLTHL_LTH2_MASK                                   0x4
#define _ADLTHL_LTH3_POSN                                   0x3
#define _ADLTHL_LTH3_POSITION                               0x3
#define _ADLTHL_LTH3_SIZE                                   0x1
#define _ADLTHL_LTH3_LENGTH                                 0x1
#define _ADLTHL_LTH3_MASK                                   0x8
#define _ADLTHL_LTH4_POSN                                   0x4
#define _ADLTHL_LTH4_POSITION                               0x4
#define _ADLTHL_LTH4_SIZE                                   0x1
#define _ADLTHL_LTH4_LENGTH                                 0x1
#define _ADLTHL_LTH4_MASK                                   0x10
#define _ADLTHL_LTH5_POSN                                   0x5
#define _ADLTHL_LTH5_POSITION                               0x5
#define _ADLTHL_LTH5_SIZE                                   0x1
#define _ADLTHL_LTH5_LENGTH                                 0x1
#define _ADLTHL_LTH5_MASK                                   0x20
#define _ADLTHL_LTH6_POSN                                   0x6
#define _ADLTHL_LTH6_POSITION                               0x6
#define _ADLTHL_LTH6_SIZE                                   0x1
#define _ADLTHL_LTH6_LENGTH                                 0x1
#define _ADLTHL_LTH6_MASK                                   0x40
#define _ADLTHL_LTH7_POSN                                   0x7
#define _ADLTHL_LTH7_POSITION                               0x7
#define _ADLTHL_LTH7_SIZE                                   0x1
#define _ADLTHL_LTH7_LENGTH                                 0x1
#define _ADLTHL_LTH7_MASK                                   0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x3DA);
#ifndef _LIB_BUILD
asm("ADLTHH equ 03DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH8                   :1;
        unsigned LTH9                   :1;
        unsigned LTH10                  :1;
        unsigned LTH11                  :1;
        unsigned LTH12                  :1;
        unsigned LTH13                  :1;
        unsigned LTH14                  :1;
        unsigned LTH15                  :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x3DA);
// bitfield macros
#define _ADLTHH_LTH_POSN                                    0x0
#define _ADLTHH_LTH_POSITION                                0x0
#define _ADLTHH_LTH_SIZE                                    0x8
#define _ADLTHH_LTH_LENGTH                                  0x8
#define _ADLTHH_LTH_MASK                                    0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80
#define _ADLTHH_ADLTH_POSN                                  0x0
#define _ADLTHH_ADLTH_POSITION                              0x0
#define _ADLTHH_ADLTH_SIZE                                  0x8
#define _ADLTHH_ADLTH_LENGTH                                0x8
#define _ADLTHH_ADLTH_MASK                                  0xFF
#define _ADLTHH_LTH8_POSN                                   0x0
#define _ADLTHH_LTH8_POSITION                               0x0
#define _ADLTHH_LTH8_SIZE                                   0x1
#define _ADLTHH_LTH8_LENGTH                                 0x1
#define _ADLTHH_LTH8_MASK                                   0x1
#define _ADLTHH_LTH9_POSN                                   0x1
#define _ADLTHH_LTH9_POSITION                               0x1
#define _ADLTHH_LTH9_SIZE                                   0x1
#define _ADLTHH_LTH9_LENGTH                                 0x1
#define _ADLTHH_LTH9_MASK                                   0x2
#define _ADLTHH_LTH10_POSN                                  0x2
#define _ADLTHH_LTH10_POSITION                              0x2
#define _ADLTHH_LTH10_SIZE                                  0x1
#define _ADLTHH_LTH10_LENGTH                                0x1
#define _ADLTHH_LTH10_MASK                                  0x4
#define _ADLTHH_LTH11_POSN                                  0x3
#define _ADLTHH_LTH11_POSITION                              0x3
#define _ADLTHH_LTH11_SIZE                                  0x1
#define _ADLTHH_LTH11_LENGTH                                0x1
#define _ADLTHH_LTH11_MASK                                  0x8
#define _ADLTHH_LTH12_POSN                                  0x4
#define _ADLTHH_LTH12_POSITION                              0x4
#define _ADLTHH_LTH12_SIZE                                  0x1
#define _ADLTHH_LTH12_LENGTH                                0x1
#define _ADLTHH_LTH12_MASK                                  0x10
#define _ADLTHH_LTH13_POSN                                  0x5
#define _ADLTHH_LTH13_POSITION                              0x5
#define _ADLTHH_LTH13_SIZE                                  0x1
#define _ADLTHH_LTH13_LENGTH                                0x1
#define _ADLTHH_LTH13_MASK                                  0x20
#define _ADLTHH_LTH14_POSN                                  0x6
#define _ADLTHH_LTH14_POSITION                              0x6
#define _ADLTHH_LTH14_SIZE                                  0x1
#define _ADLTHH_LTH14_LENGTH                                0x1
#define _ADLTHH_LTH14_MASK                                  0x40
#define _ADLTHH_LTH15_POSN                                  0x7
#define _ADLTHH_LTH15_POSITION                              0x7
#define _ADLTHH_LTH15_SIZE                                  0x1
#define _ADLTHH_LTH15_LENGTH                                0x1
#define _ADLTHH_LTH15_MASK                                  0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x3DB);
#ifndef _LIB_BUILD
asm("ADUTH equ 03DBh");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x3DB);
#ifndef _LIB_BUILD
asm("ADUTHL equ 03DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH0                   :1;
        unsigned UTH1                   :1;
        unsigned UTH2                   :1;
        unsigned UTH3                   :1;
        unsigned UTH4                   :1;
        unsigned UTH5                   :1;
        unsigned UTH6                   :1;
        unsigned UTH7                   :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x3DB);
// bitfield macros
#define _ADUTHL_UTH_POSN                                    0x0
#define _ADUTHL_UTH_POSITION                                0x0
#define _ADUTHL_UTH_SIZE                                    0x8
#define _ADUTHL_UTH_LENGTH                                  0x8
#define _ADUTHL_UTH_MASK                                    0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80
#define _ADUTHL_ADUTH_POSN                                  0x0
#define _ADUTHL_ADUTH_POSITION                              0x0
#define _ADUTHL_ADUTH_SIZE                                  0x8
#define _ADUTHL_ADUTH_LENGTH                                0x8
#define _ADUTHL_ADUTH_MASK                                  0xFF
#define _ADUTHL_UTH0_POSN                                   0x0
#define _ADUTHL_UTH0_POSITION                               0x0
#define _ADUTHL_UTH0_SIZE                                   0x1
#define _ADUTHL_UTH0_LENGTH                                 0x1
#define _ADUTHL_UTH0_MASK                                   0x1
#define _ADUTHL_UTH1_POSN                                   0x1
#define _ADUTHL_UTH1_POSITION                               0x1
#define _ADUTHL_UTH1_SIZE                                   0x1
#define _ADUTHL_UTH1_LENGTH                                 0x1
#define _ADUTHL_UTH1_MASK                                   0x2
#define _ADUTHL_UTH2_POSN                                   0x2
#define _ADUTHL_UTH2_POSITION                               0x2
#define _ADUTHL_UTH2_SIZE                                   0x1
#define _ADUTHL_UTH2_LENGTH                                 0x1
#define _ADUTHL_UTH2_MASK                                   0x4
#define _ADUTHL_UTH3_POSN                                   0x3
#define _ADUTHL_UTH3_POSITION                               0x3
#define _ADUTHL_UTH3_SIZE                                   0x1
#define _ADUTHL_UTH3_LENGTH                                 0x1
#define _ADUTHL_UTH3_MASK                                   0x8
#define _ADUTHL_UTH4_POSN                                   0x4
#define _ADUTHL_UTH4_POSITION                               0x4
#define _ADUTHL_UTH4_SIZE                                   0x1
#define _ADUTHL_UTH4_LENGTH                                 0x1
#define _ADUTHL_UTH4_MASK                                   0x10
#define _ADUTHL_UTH5_POSN                                   0x5
#define _ADUTHL_UTH5_POSITION                               0x5
#define _ADUTHL_UTH5_SIZE                                   0x1
#define _ADUTHL_UTH5_LENGTH                                 0x1
#define _ADUTHL_UTH5_MASK                                   0x20
#define _ADUTHL_UTH6_POSN                                   0x6
#define _ADUTHL_UTH6_POSITION                               0x6
#define _ADUTHL_UTH6_SIZE                                   0x1
#define _ADUTHL_UTH6_LENGTH                                 0x1
#define _ADUTHL_UTH6_MASK                                   0x40
#define _ADUTHL_UTH7_POSN                                   0x7
#define _ADUTHL_UTH7_POSITION                               0x7
#define _ADUTHL_UTH7_SIZE                                   0x1
#define _ADUTHL_UTH7_LENGTH                                 0x1
#define _ADUTHL_UTH7_MASK                                   0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x3DC);
#ifndef _LIB_BUILD
asm("ADUTHH equ 03DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH8                   :1;
        unsigned UTH9                   :1;
        unsigned UTH10                  :1;
        unsigned UTH11                  :1;
        unsigned UTH12                  :1;
        unsigned UTH13                  :1;
        unsigned UTH14                  :1;
        unsigned UTH15                  :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x3DC);
// bitfield macros
#define _ADUTHH_UTH_POSN                                    0x0
#define _ADUTHH_UTH_POSITION                                0x0
#define _ADUTHH_UTH_SIZE                                    0x8
#define _ADUTHH_UTH_LENGTH                                  0x8
#define _ADUTHH_UTH_MASK                                    0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80
#define _ADUTHH_ADUTH_POSN                                  0x0
#define _ADUTHH_ADUTH_POSITION                              0x0
#define _ADUTHH_ADUTH_SIZE                                  0x8
#define _ADUTHH_ADUTH_LENGTH                                0x8
#define _ADUTHH_ADUTH_MASK                                  0xFF
#define _ADUTHH_UTH8_POSN                                   0x0
#define _ADUTHH_UTH8_POSITION                               0x0
#define _ADUTHH_UTH8_SIZE                                   0x1
#define _ADUTHH_UTH8_LENGTH                                 0x1
#define _ADUTHH_UTH8_MASK                                   0x1
#define _ADUTHH_UTH9_POSN                                   0x1
#define _ADUTHH_UTH9_POSITION                               0x1
#define _ADUTHH_UTH9_SIZE                                   0x1
#define _ADUTHH_UTH9_LENGTH                                 0x1
#define _ADUTHH_UTH9_MASK                                   0x2
#define _ADUTHH_UTH10_POSN                                  0x2
#define _ADUTHH_UTH10_POSITION                              0x2
#define _ADUTHH_UTH10_SIZE                                  0x1
#define _ADUTHH_UTH10_LENGTH                                0x1
#define _ADUTHH_UTH10_MASK                                  0x4
#define _ADUTHH_UTH11_POSN                                  0x3
#define _ADUTHH_UTH11_POSITION                              0x3
#define _ADUTHH_UTH11_SIZE                                  0x1
#define _ADUTHH_UTH11_LENGTH                                0x1
#define _ADUTHH_UTH11_MASK                                  0x8
#define _ADUTHH_UTH12_POSN                                  0x4
#define _ADUTHH_UTH12_POSITION                              0x4
#define _ADUTHH_UTH12_SIZE                                  0x1
#define _ADUTHH_UTH12_LENGTH                                0x1
#define _ADUTHH_UTH12_MASK                                  0x10
#define _ADUTHH_UTH13_POSN                                  0x5
#define _ADUTHH_UTH13_POSITION                              0x5
#define _ADUTHH_UTH13_SIZE                                  0x1
#define _ADUTHH_UTH13_LENGTH                                0x1
#define _ADUTHH_UTH13_MASK                                  0x20
#define _ADUTHH_UTH14_POSN                                  0x6
#define _ADUTHH_UTH14_POSITION                              0x6
#define _ADUTHH_UTH14_SIZE                                  0x1
#define _ADUTHH_UTH14_LENGTH                                0x1
#define _ADUTHH_UTH14_MASK                                  0x40
#define _ADUTHH_UTH15_POSN                                  0x7
#define _ADUTHH_UTH15_POSITION                              0x7
#define _ADUTHH_UTH15_SIZE                                  0x1
#define _ADUTHH_UTH15_LENGTH                                0x1
#define _ADUTHH_UTH15_MASK                                  0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x3DD);
#ifndef _LIB_BUILD
asm("ADERR equ 03DDh");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x3DD);
#ifndef _LIB_BUILD
asm("ADERRL equ 03DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x3DD);
// bitfield macros
#define _ADERRL_ERR_POSN                                    0x0
#define _ADERRL_ERR_POSITION                                0x0
#define _ADERRL_ERR_SIZE                                    0x8
#define _ADERRL_ERR_LENGTH                                  0x8
#define _ADERRL_ERR_MASK                                    0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80
#define _ADERRL_ADERR_POSN                                  0x0
#define _ADERRL_ADERR_POSITION                              0x0
#define _ADERRL_ADERR_SIZE                                  0x8
#define _ADERRL_ADERR_LENGTH                                0x8
#define _ADERRL_ADERR_MASK                                  0xFF
#define _ADERRL_ERR0_POSN                                   0x0
#define _ADERRL_ERR0_POSITION                               0x0
#define _ADERRL_ERR0_SIZE                                   0x1
#define _ADERRL_ERR0_LENGTH                                 0x1
#define _ADERRL_ERR0_MASK                                   0x1
#define _ADERRL_ERR1_POSN                                   0x1
#define _ADERRL_ERR1_POSITION                               0x1
#define _ADERRL_ERR1_SIZE                                   0x1
#define _ADERRL_ERR1_LENGTH                                 0x1
#define _ADERRL_ERR1_MASK                                   0x2
#define _ADERRL_ERR2_POSN                                   0x2
#define _ADERRL_ERR2_POSITION                               0x2
#define _ADERRL_ERR2_SIZE                                   0x1
#define _ADERRL_ERR2_LENGTH                                 0x1
#define _ADERRL_ERR2_MASK                                   0x4
#define _ADERRL_ERR3_POSN                                   0x3
#define _ADERRL_ERR3_POSITION                               0x3
#define _ADERRL_ERR3_SIZE                                   0x1
#define _ADERRL_ERR3_LENGTH                                 0x1
#define _ADERRL_ERR3_MASK                                   0x8
#define _ADERRL_ERR4_POSN                                   0x4
#define _ADERRL_ERR4_POSITION                               0x4
#define _ADERRL_ERR4_SIZE                                   0x1
#define _ADERRL_ERR4_LENGTH                                 0x1
#define _ADERRL_ERR4_MASK                                   0x10
#define _ADERRL_ERR5_POSN                                   0x5
#define _ADERRL_ERR5_POSITION                               0x5
#define _ADERRL_ERR5_SIZE                                   0x1
#define _ADERRL_ERR5_LENGTH                                 0x1
#define _ADERRL_ERR5_MASK                                   0x20
#define _ADERRL_ERR6_POSN                                   0x6
#define _ADERRL_ERR6_POSITION                               0x6
#define _ADERRL_ERR6_SIZE                                   0x1
#define _ADERRL_ERR6_LENGTH                                 0x1
#define _ADERRL_ERR6_MASK                                   0x40
#define _ADERRL_ERR7_POSN                                   0x7
#define _ADERRL_ERR7_POSITION                               0x7
#define _ADERRL_ERR7_SIZE                                   0x1
#define _ADERRL_ERR7_LENGTH                                 0x1
#define _ADERRL_ERR7_MASK                                   0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x3DE);
#ifndef _LIB_BUILD
asm("ADERRH equ 03DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x3DE);
// bitfield macros
#define _ADERRH_ERR_POSN                                    0x0
#define _ADERRH_ERR_POSITION                                0x0
#define _ADERRH_ERR_SIZE                                    0x8
#define _ADERRH_ERR_LENGTH                                  0x8
#define _ADERRH_ERR_MASK                                    0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80
#define _ADERRH_ADERR_POSN                                  0x0
#define _ADERRH_ADERR_POSITION                              0x0
#define _ADERRH_ADERR_SIZE                                  0x8
#define _ADERRH_ADERR_LENGTH                                0x8
#define _ADERRH_ADERR_MASK                                  0xFF
#define _ADERRH_ERR8_POSN                                   0x0
#define _ADERRH_ERR8_POSITION                               0x0
#define _ADERRH_ERR8_SIZE                                   0x1
#define _ADERRH_ERR8_LENGTH                                 0x1
#define _ADERRH_ERR8_MASK                                   0x1
#define _ADERRH_ERR9_POSN                                   0x1
#define _ADERRH_ERR9_POSITION                               0x1
#define _ADERRH_ERR9_SIZE                                   0x1
#define _ADERRH_ERR9_LENGTH                                 0x1
#define _ADERRH_ERR9_MASK                                   0x2
#define _ADERRH_ERR10_POSN                                  0x2
#define _ADERRH_ERR10_POSITION                              0x2
#define _ADERRH_ERR10_SIZE                                  0x1
#define _ADERRH_ERR10_LENGTH                                0x1
#define _ADERRH_ERR10_MASK                                  0x4
#define _ADERRH_ERR11_POSN                                  0x3
#define _ADERRH_ERR11_POSITION                              0x3
#define _ADERRH_ERR11_SIZE                                  0x1
#define _ADERRH_ERR11_LENGTH                                0x1
#define _ADERRH_ERR11_MASK                                  0x8
#define _ADERRH_ERR12_POSN                                  0x4
#define _ADERRH_ERR12_POSITION                              0x4
#define _ADERRH_ERR12_SIZE                                  0x1
#define _ADERRH_ERR12_LENGTH                                0x1
#define _ADERRH_ERR12_MASK                                  0x10
#define _ADERRH_ERR13_POSN                                  0x5
#define _ADERRH_ERR13_POSITION                              0x5
#define _ADERRH_ERR13_SIZE                                  0x1
#define _ADERRH_ERR13_LENGTH                                0x1
#define _ADERRH_ERR13_MASK                                  0x20
#define _ADERRH_ERR14_POSN                                  0x6
#define _ADERRH_ERR14_POSITION                              0x6
#define _ADERRH_ERR14_SIZE                                  0x1
#define _ADERRH_ERR14_LENGTH                                0x1
#define _ADERRH_ERR14_MASK                                  0x40
#define _ADERRH_ERR15_POSN                                  0x7
#define _ADERRH_ERR15_POSITION                              0x7
#define _ADERRH_ERR15_SIZE                                  0x1
#define _ADERRH_ERR15_LENGTH                                0x1
#define _ADERRH_ERR15_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x3DF);
#ifndef _LIB_BUILD
asm("ADSTPT equ 03DFh");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x3DF);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 03DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x3DF);
// bitfield macros
#define _ADSTPTL_STPT_POSN                                  0x0
#define _ADSTPTL_STPT_POSITION                              0x0
#define _ADSTPTL_STPT_SIZE                                  0x8
#define _ADSTPTL_STPT_LENGTH                                0x8
#define _ADSTPTL_STPT_MASK                                  0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80
#define _ADSTPTL_ADSTPT_POSN                                0x0
#define _ADSTPTL_ADSTPT_POSITION                            0x0
#define _ADSTPTL_ADSTPT_SIZE                                0x8
#define _ADSTPTL_ADSTPT_LENGTH                              0x8
#define _ADSTPTL_ADSTPT_MASK                                0xFF
#define _ADSTPTL_STPT0_POSN                                 0x0
#define _ADSTPTL_STPT0_POSITION                             0x0
#define _ADSTPTL_STPT0_SIZE                                 0x1
#define _ADSTPTL_STPT0_LENGTH                               0x1
#define _ADSTPTL_STPT0_MASK                                 0x1
#define _ADSTPTL_STPT1_POSN                                 0x1
#define _ADSTPTL_STPT1_POSITION                             0x1
#define _ADSTPTL_STPT1_SIZE                                 0x1
#define _ADSTPTL_STPT1_LENGTH                               0x1
#define _ADSTPTL_STPT1_MASK                                 0x2
#define _ADSTPTL_STPT2_POSN                                 0x2
#define _ADSTPTL_STPT2_POSITION                             0x2
#define _ADSTPTL_STPT2_SIZE                                 0x1
#define _ADSTPTL_STPT2_LENGTH                               0x1
#define _ADSTPTL_STPT2_MASK                                 0x4
#define _ADSTPTL_STPT3_POSN                                 0x3
#define _ADSTPTL_STPT3_POSITION                             0x3
#define _ADSTPTL_STPT3_SIZE                                 0x1
#define _ADSTPTL_STPT3_LENGTH                               0x1
#define _ADSTPTL_STPT3_MASK                                 0x8
#define _ADSTPTL_STPT4_POSN                                 0x4
#define _ADSTPTL_STPT4_POSITION                             0x4
#define _ADSTPTL_STPT4_SIZE                                 0x1
#define _ADSTPTL_STPT4_LENGTH                               0x1
#define _ADSTPTL_STPT4_MASK                                 0x10
#define _ADSTPTL_STPT5_POSN                                 0x5
#define _ADSTPTL_STPT5_POSITION                             0x5
#define _ADSTPTL_STPT5_SIZE                                 0x1
#define _ADSTPTL_STPT5_LENGTH                               0x1
#define _ADSTPTL_STPT5_MASK                                 0x20
#define _ADSTPTL_STPT6_POSN                                 0x6
#define _ADSTPTL_STPT6_POSITION                             0x6
#define _ADSTPTL_STPT6_SIZE                                 0x1
#define _ADSTPTL_STPT6_LENGTH                               0x1
#define _ADSTPTL_STPT6_MASK                                 0x40
#define _ADSTPTL_STPT7_POSN                                 0x7
#define _ADSTPTL_STPT7_POSITION                             0x7
#define _ADSTPTL_STPT7_SIZE                                 0x1
#define _ADSTPTL_STPT7_LENGTH                               0x1
#define _ADSTPTL_STPT7_MASK                                 0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x3E0);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 03E0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT15                 :1;
        unsigned STPT16                 :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x3E0);
// bitfield macros
#define _ADSTPTH_STPT_POSN                                  0x0
#define _ADSTPTH_STPT_POSITION                              0x0
#define _ADSTPTH_STPT_SIZE                                  0x8
#define _ADSTPTH_STPT_LENGTH                                0x8
#define _ADSTPTH_STPT_MASK                                  0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80
#define _ADSTPTH_ADSTPT_POSN                                0x0
#define _ADSTPTH_ADSTPT_POSITION                            0x0
#define _ADSTPTH_ADSTPT_SIZE                                0x8
#define _ADSTPTH_ADSTPT_LENGTH                              0x8
#define _ADSTPTH_ADSTPT_MASK                                0xFF
#define _ADSTPTH_STPT8_POSN                                 0x0
#define _ADSTPTH_STPT8_POSITION                             0x0
#define _ADSTPTH_STPT8_SIZE                                 0x1
#define _ADSTPTH_STPT8_LENGTH                               0x1
#define _ADSTPTH_STPT8_MASK                                 0x1
#define _ADSTPTH_STPT9_POSN                                 0x1
#define _ADSTPTH_STPT9_POSITION                             0x1
#define _ADSTPTH_STPT9_SIZE                                 0x1
#define _ADSTPTH_STPT9_LENGTH                               0x1
#define _ADSTPTH_STPT9_MASK                                 0x2
#define _ADSTPTH_STPT10_POSN                                0x2
#define _ADSTPTH_STPT10_POSITION                            0x2
#define _ADSTPTH_STPT10_SIZE                                0x1
#define _ADSTPTH_STPT10_LENGTH                              0x1
#define _ADSTPTH_STPT10_MASK                                0x4
#define _ADSTPTH_STPT11_POSN                                0x3
#define _ADSTPTH_STPT11_POSITION                            0x3
#define _ADSTPTH_STPT11_SIZE                                0x1
#define _ADSTPTH_STPT11_LENGTH                              0x1
#define _ADSTPTH_STPT11_MASK                                0x8
#define _ADSTPTH_STPT12_POSN                                0x4
#define _ADSTPTH_STPT12_POSITION                            0x4
#define _ADSTPTH_STPT12_SIZE                                0x1
#define _ADSTPTH_STPT12_LENGTH                              0x1
#define _ADSTPTH_STPT12_MASK                                0x10
#define _ADSTPTH_STPT13_POSN                                0x5
#define _ADSTPTH_STPT13_POSITION                            0x5
#define _ADSTPTH_STPT13_SIZE                                0x1
#define _ADSTPTH_STPT13_LENGTH                              0x1
#define _ADSTPTH_STPT13_MASK                                0x20
#define _ADSTPTH_STPT15_POSN                                0x6
#define _ADSTPTH_STPT15_POSITION                            0x6
#define _ADSTPTH_STPT15_SIZE                                0x1
#define _ADSTPTH_STPT15_LENGTH                              0x1
#define _ADSTPTH_STPT15_MASK                                0x40
#define _ADSTPTH_STPT16_POSN                                0x7
#define _ADSTPTH_STPT16_POSITION                            0x7
#define _ADSTPTH_STPT16_SIZE                                0x1
#define _ADSTPTH_STPT16_LENGTH                              0x1
#define _ADSTPTH_STPT16_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x3E1);
#ifndef _LIB_BUILD
asm("ADFLTR equ 03E1h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x3E1);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 03E1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR0                  :1;
        unsigned FLTR1                  :1;
        unsigned FLTR2                  :1;
        unsigned FLTR3                  :1;
        unsigned FLTR4                  :1;
        unsigned FLTR5                  :1;
        unsigned FLTR6                  :1;
        unsigned FLTR7                  :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x3E1);
// bitfield macros
#define _ADFLTRL_FLTR_POSN                                  0x0
#define _ADFLTRL_FLTR_POSITION                              0x0
#define _ADFLTRL_FLTR_SIZE                                  0x8
#define _ADFLTRL_FLTR_LENGTH                                0x8
#define _ADFLTRL_FLTR_MASK                                  0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80
#define _ADFLTRL_ADFLTR_POSN                                0x0
#define _ADFLTRL_ADFLTR_POSITION                            0x0
#define _ADFLTRL_ADFLTR_SIZE                                0x8
#define _ADFLTRL_ADFLTR_LENGTH                              0x8
#define _ADFLTRL_ADFLTR_MASK                                0xFF
#define _ADFLTRL_FLTR0_POSN                                 0x0
#define _ADFLTRL_FLTR0_POSITION                             0x0
#define _ADFLTRL_FLTR0_SIZE                                 0x1
#define _ADFLTRL_FLTR0_LENGTH                               0x1
#define _ADFLTRL_FLTR0_MASK                                 0x1
#define _ADFLTRL_FLTR1_POSN                                 0x1
#define _ADFLTRL_FLTR1_POSITION                             0x1
#define _ADFLTRL_FLTR1_SIZE                                 0x1
#define _ADFLTRL_FLTR1_LENGTH                               0x1
#define _ADFLTRL_FLTR1_MASK                                 0x2
#define _ADFLTRL_FLTR2_POSN                                 0x2
#define _ADFLTRL_FLTR2_POSITION                             0x2
#define _ADFLTRL_FLTR2_SIZE                                 0x1
#define _ADFLTRL_FLTR2_LENGTH                               0x1
#define _ADFLTRL_FLTR2_MASK                                 0x4
#define _ADFLTRL_FLTR3_POSN                                 0x3
#define _ADFLTRL_FLTR3_POSITION                             0x3
#define _ADFLTRL_FLTR3_SIZE                                 0x1
#define _ADFLTRL_FLTR3_LENGTH                               0x1
#define _ADFLTRL_FLTR3_MASK                                 0x8
#define _ADFLTRL_FLTR4_POSN                                 0x4
#define _ADFLTRL_FLTR4_POSITION                             0x4
#define _ADFLTRL_FLTR4_SIZE                                 0x1
#define _ADFLTRL_FLTR4_LENGTH                               0x1
#define _ADFLTRL_FLTR4_MASK                                 0x10
#define _ADFLTRL_FLTR5_POSN                                 0x5
#define _ADFLTRL_FLTR5_POSITION                             0x5
#define _ADFLTRL_FLTR5_SIZE                                 0x1
#define _ADFLTRL_FLTR5_LENGTH                               0x1
#define _ADFLTRL_FLTR5_MASK                                 0x20
#define _ADFLTRL_FLTR6_POSN                                 0x6
#define _ADFLTRL_FLTR6_POSITION                             0x6
#define _ADFLTRL_FLTR6_SIZE                                 0x1
#define _ADFLTRL_FLTR6_LENGTH                               0x1
#define _ADFLTRL_FLTR6_MASK                                 0x40
#define _ADFLTRL_FLTR7_POSN                                 0x7
#define _ADFLTRL_FLTR7_POSITION                             0x7
#define _ADFLTRL_FLTR7_SIZE                                 0x1
#define _ADFLTRL_FLTR7_LENGTH                               0x1
#define _ADFLTRL_FLTR7_MASK                                 0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x3E2);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 03E2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR8                  :1;
        unsigned FLTR9                  :1;
        unsigned FLTR10                 :1;
        unsigned FLTR11                 :1;
        unsigned FLTR12                 :1;
        unsigned FLTR13                 :1;
        unsigned FLTR14                 :1;
        unsigned FLTR15                 :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x3E2);
// bitfield macros
#define _ADFLTRH_FLTR_POSN                                  0x0
#define _ADFLTRH_FLTR_POSITION                              0x0
#define _ADFLTRH_FLTR_SIZE                                  0x8
#define _ADFLTRH_FLTR_LENGTH                                0x8
#define _ADFLTRH_FLTR_MASK                                  0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80
#define _ADFLTRH_ADFLTR_POSN                                0x0
#define _ADFLTRH_ADFLTR_POSITION                            0x0
#define _ADFLTRH_ADFLTR_SIZE                                0x8
#define _ADFLTRH_ADFLTR_LENGTH                              0x8
#define _ADFLTRH_ADFLTR_MASK                                0xFF
#define _ADFLTRH_FLTR8_POSN                                 0x0
#define _ADFLTRH_FLTR8_POSITION                             0x0
#define _ADFLTRH_FLTR8_SIZE                                 0x1
#define _ADFLTRH_FLTR8_LENGTH                               0x1
#define _ADFLTRH_FLTR8_MASK                                 0x1
#define _ADFLTRH_FLTR9_POSN                                 0x1
#define _ADFLTRH_FLTR9_POSITION                             0x1
#define _ADFLTRH_FLTR9_SIZE                                 0x1
#define _ADFLTRH_FLTR9_LENGTH                               0x1
#define _ADFLTRH_FLTR9_MASK                                 0x2
#define _ADFLTRH_FLTR10_POSN                                0x2
#define _ADFLTRH_FLTR10_POSITION                            0x2
#define _ADFLTRH_FLTR10_SIZE                                0x1
#define _ADFLTRH_FLTR10_LENGTH                              0x1
#define _ADFLTRH_FLTR10_MASK                                0x4
#define _ADFLTRH_FLTR11_POSN                                0x3
#define _ADFLTRH_FLTR11_POSITION                            0x3
#define _ADFLTRH_FLTR11_SIZE                                0x1
#define _ADFLTRH_FLTR11_LENGTH                              0x1
#define _ADFLTRH_FLTR11_MASK                                0x8
#define _ADFLTRH_FLTR12_POSN                                0x4
#define _ADFLTRH_FLTR12_POSITION                            0x4
#define _ADFLTRH_FLTR12_SIZE                                0x1
#define _ADFLTRH_FLTR12_LENGTH                              0x1
#define _ADFLTRH_FLTR12_MASK                                0x10
#define _ADFLTRH_FLTR13_POSN                                0x5
#define _ADFLTRH_FLTR13_POSITION                            0x5
#define _ADFLTRH_FLTR13_SIZE                                0x1
#define _ADFLTRH_FLTR13_LENGTH                              0x1
#define _ADFLTRH_FLTR13_MASK                                0x20
#define _ADFLTRH_FLTR14_POSN                                0x6
#define _ADFLTRH_FLTR14_POSITION                            0x6
#define _ADFLTRH_FLTR14_SIZE                                0x1
#define _ADFLTRH_FLTR14_LENGTH                              0x1
#define _ADFLTRH_FLTR14_MASK                                0x40
#define _ADFLTRH_FLTR15_POSN                                0x7
#define _ADFLTRH_FLTR15_POSITION                            0x7
#define _ADFLTRH_FLTR15_SIZE                                0x1
#define _ADFLTRH_FLTR15_LENGTH                              0x1
#define _ADFLTRH_FLTR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
#ifndef __CCI__
extern volatile __uint24                ADACC               __at(0x3E3);
#endif
#ifndef _LIB_BUILD
asm("ADACC equ 03E3h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x3E3);
#ifndef _LIB_BUILD
asm("ADACCL equ 03E3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x3E3);
// bitfield macros
#define _ADACCL_ACC_POSN                                    0x0
#define _ADACCL_ACC_POSITION                                0x0
#define _ADACCL_ACC_SIZE                                    0x8
#define _ADACCL_ACC_LENGTH                                  0x8
#define _ADACCL_ACC_MASK                                    0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80
#define _ADACCL_ADACC_POSN                                  0x0
#define _ADACCL_ADACC_POSITION                              0x0
#define _ADACCL_ADACC_SIZE                                  0x8
#define _ADACCL_ADACC_LENGTH                                0x8
#define _ADACCL_ADACC_MASK                                  0xFF
#define _ADACCL_ACC0_POSN                                   0x0
#define _ADACCL_ACC0_POSITION                               0x0
#define _ADACCL_ACC0_SIZE                                   0x1
#define _ADACCL_ACC0_LENGTH                                 0x1
#define _ADACCL_ACC0_MASK                                   0x1
#define _ADACCL_ACC1_POSN                                   0x1
#define _ADACCL_ACC1_POSITION                               0x1
#define _ADACCL_ACC1_SIZE                                   0x1
#define _ADACCL_ACC1_LENGTH                                 0x1
#define _ADACCL_ACC1_MASK                                   0x2
#define _ADACCL_ACC2_POSN                                   0x2
#define _ADACCL_ACC2_POSITION                               0x2
#define _ADACCL_ACC2_SIZE                                   0x1
#define _ADACCL_ACC2_LENGTH                                 0x1
#define _ADACCL_ACC2_MASK                                   0x4
#define _ADACCL_ACC3_POSN                                   0x3
#define _ADACCL_ACC3_POSITION                               0x3
#define _ADACCL_ACC3_SIZE                                   0x1
#define _ADACCL_ACC3_LENGTH                                 0x1
#define _ADACCL_ACC3_MASK                                   0x8
#define _ADACCL_ACC4_POSN                                   0x4
#define _ADACCL_ACC4_POSITION                               0x4
#define _ADACCL_ACC4_SIZE                                   0x1
#define _ADACCL_ACC4_LENGTH                                 0x1
#define _ADACCL_ACC4_MASK                                   0x10
#define _ADACCL_ACC5_POSN                                   0x5
#define _ADACCL_ACC5_POSITION                               0x5
#define _ADACCL_ACC5_SIZE                                   0x1
#define _ADACCL_ACC5_LENGTH                                 0x1
#define _ADACCL_ACC5_MASK                                   0x20
#define _ADACCL_ACC6_POSN                                   0x6
#define _ADACCL_ACC6_POSITION                               0x6
#define _ADACCL_ACC6_SIZE                                   0x1
#define _ADACCL_ACC6_LENGTH                                 0x1
#define _ADACCL_ACC6_MASK                                   0x40
#define _ADACCL_ACC7_POSN                                   0x7
#define _ADACCL_ACC7_POSITION                               0x7
#define _ADACCL_ACC7_SIZE                                   0x1
#define _ADACCL_ACC7_LENGTH                                 0x1
#define _ADACCL_ACC7_MASK                                   0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x3E4);
#ifndef _LIB_BUILD
asm("ADACCH equ 03E4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x3E4);
// bitfield macros
#define _ADACCH_ACC_POSN                                    0x0
#define _ADACCH_ACC_POSITION                                0x0
#define _ADACCH_ACC_SIZE                                    0x8
#define _ADACCH_ACC_LENGTH                                  0x8
#define _ADACCH_ACC_MASK                                    0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80
#define _ADACCH_ADACC_POSN                                  0x0
#define _ADACCH_ADACC_POSITION                              0x0
#define _ADACCH_ADACC_SIZE                                  0x8
#define _ADACCH_ADACC_LENGTH                                0x8
#define _ADACCH_ADACC_MASK                                  0xFF
#define _ADACCH_ACC8_POSN                                   0x0
#define _ADACCH_ACC8_POSITION                               0x0
#define _ADACCH_ACC8_SIZE                                   0x1
#define _ADACCH_ACC8_LENGTH                                 0x1
#define _ADACCH_ACC8_MASK                                   0x1
#define _ADACCH_ACC9_POSN                                   0x1
#define _ADACCH_ACC9_POSITION                               0x1
#define _ADACCH_ACC9_SIZE                                   0x1
#define _ADACCH_ACC9_LENGTH                                 0x1
#define _ADACCH_ACC9_MASK                                   0x2
#define _ADACCH_ACC10_POSN                                  0x2
#define _ADACCH_ACC10_POSITION                              0x2
#define _ADACCH_ACC10_SIZE                                  0x1
#define _ADACCH_ACC10_LENGTH                                0x1
#define _ADACCH_ACC10_MASK                                  0x4
#define _ADACCH_ACC11_POSN                                  0x3
#define _ADACCH_ACC11_POSITION                              0x3
#define _ADACCH_ACC11_SIZE                                  0x1
#define _ADACCH_ACC11_LENGTH                                0x1
#define _ADACCH_ACC11_MASK                                  0x8
#define _ADACCH_ACC12_POSN                                  0x4
#define _ADACCH_ACC12_POSITION                              0x4
#define _ADACCH_ACC12_SIZE                                  0x1
#define _ADACCH_ACC12_LENGTH                                0x1
#define _ADACCH_ACC12_MASK                                  0x10
#define _ADACCH_ACC13_POSN                                  0x5
#define _ADACCH_ACC13_POSITION                              0x5
#define _ADACCH_ACC13_SIZE                                  0x1
#define _ADACCH_ACC13_LENGTH                                0x1
#define _ADACCH_ACC13_MASK                                  0x20
#define _ADACCH_ACC14_POSN                                  0x6
#define _ADACCH_ACC14_POSITION                              0x6
#define _ADACCH_ACC14_SIZE                                  0x1
#define _ADACCH_ACC14_LENGTH                                0x1
#define _ADACCH_ACC14_MASK                                  0x40
#define _ADACCH_ACC15_POSN                                  0x7
#define _ADACCH_ACC15_POSITION                              0x7
#define _ADACCH_ACC15_SIZE                                  0x1
#define _ADACCH_ACC15_LENGTH                                0x1
#define _ADACCH_ACC15_MASK                                  0x80

// Register: ADACCU
#define ADACCU ADACCU
extern volatile unsigned char           ADACCU              __at(0x3E5);
#ifndef _LIB_BUILD
asm("ADACCU equ 03E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC16                :1;
        unsigned ADACC17                :1;
        unsigned ADACC18                :1;
        unsigned ADACC19                :1;
        unsigned ADACC20                :1;
        unsigned ADACC21                :1;
        unsigned ADACC22                :1;
        unsigned ADACC23                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
        unsigned ACC20                  :1;
        unsigned ACC21                  :1;
        unsigned ACC22                  :1;
        unsigned ACC23                  :1;
    };
} ADACCUbits_t;
extern volatile ADACCUbits_t ADACCUbits __at(0x3E5);
// bitfield macros
#define _ADACCU_ACC_POSN                                    0x0
#define _ADACCU_ACC_POSITION                                0x0
#define _ADACCU_ACC_SIZE                                    0x8
#define _ADACCU_ACC_LENGTH                                  0x8
#define _ADACCU_ACC_MASK                                    0xFF
#define _ADACCU_ADACC16_POSN                                0x0
#define _ADACCU_ADACC16_POSITION                            0x0
#define _ADACCU_ADACC16_SIZE                                0x1
#define _ADACCU_ADACC16_LENGTH                              0x1
#define _ADACCU_ADACC16_MASK                                0x1
#define _ADACCU_ADACC17_POSN                                0x1
#define _ADACCU_ADACC17_POSITION                            0x1
#define _ADACCU_ADACC17_SIZE                                0x1
#define _ADACCU_ADACC17_LENGTH                              0x1
#define _ADACCU_ADACC17_MASK                                0x2
#define _ADACCU_ADACC18_POSN                                0x2
#define _ADACCU_ADACC18_POSITION                            0x2
#define _ADACCU_ADACC18_SIZE                                0x1
#define _ADACCU_ADACC18_LENGTH                              0x1
#define _ADACCU_ADACC18_MASK                                0x4
#define _ADACCU_ADACC19_POSN                                0x3
#define _ADACCU_ADACC19_POSITION                            0x3
#define _ADACCU_ADACC19_SIZE                                0x1
#define _ADACCU_ADACC19_LENGTH                              0x1
#define _ADACCU_ADACC19_MASK                                0x8
#define _ADACCU_ADACC20_POSN                                0x4
#define _ADACCU_ADACC20_POSITION                            0x4
#define _ADACCU_ADACC20_SIZE                                0x1
#define _ADACCU_ADACC20_LENGTH                              0x1
#define _ADACCU_ADACC20_MASK                                0x10
#define _ADACCU_ADACC21_POSN                                0x5
#define _ADACCU_ADACC21_POSITION                            0x5
#define _ADACCU_ADACC21_SIZE                                0x1
#define _ADACCU_ADACC21_LENGTH                              0x1
#define _ADACCU_ADACC21_MASK                                0x20
#define _ADACCU_ADACC22_POSN                                0x6
#define _ADACCU_ADACC22_POSITION                            0x6
#define _ADACCU_ADACC22_SIZE                                0x1
#define _ADACCU_ADACC22_LENGTH                              0x1
#define _ADACCU_ADACC22_MASK                                0x40
#define _ADACCU_ADACC23_POSN                                0x7
#define _ADACCU_ADACC23_POSITION                            0x7
#define _ADACCU_ADACC23_SIZE                                0x1
#define _ADACCU_ADACC23_LENGTH                              0x1
#define _ADACCU_ADACC23_MASK                                0x80
#define _ADACCU_ADACC_POSN                                  0x0
#define _ADACCU_ADACC_POSITION                              0x0
#define _ADACCU_ADACC_SIZE                                  0x8
#define _ADACCU_ADACC_LENGTH                                0x8
#define _ADACCU_ADACC_MASK                                  0xFF
#define _ADACCU_ACC16_POSN                                  0x0
#define _ADACCU_ACC16_POSITION                              0x0
#define _ADACCU_ACC16_SIZE                                  0x1
#define _ADACCU_ACC16_LENGTH                                0x1
#define _ADACCU_ACC16_MASK                                  0x1
#define _ADACCU_ACC17_POSN                                  0x1
#define _ADACCU_ACC17_POSITION                              0x1
#define _ADACCU_ACC17_SIZE                                  0x1
#define _ADACCU_ACC17_LENGTH                                0x1
#define _ADACCU_ACC17_MASK                                  0x2
#define _ADACCU_ACC18_POSN                                  0x2
#define _ADACCU_ACC18_POSITION                              0x2
#define _ADACCU_ACC18_SIZE                                  0x1
#define _ADACCU_ACC18_LENGTH                                0x1
#define _ADACCU_ACC18_MASK                                  0x4
#define _ADACCU_ACC19_POSN                                  0x3
#define _ADACCU_ACC19_POSITION                              0x3
#define _ADACCU_ACC19_SIZE                                  0x1
#define _ADACCU_ACC19_LENGTH                                0x1
#define _ADACCU_ACC19_MASK                                  0x8
#define _ADACCU_ACC20_POSN                                  0x4
#define _ADACCU_ACC20_POSITION                              0x4
#define _ADACCU_ACC20_SIZE                                  0x1
#define _ADACCU_ACC20_LENGTH                                0x1
#define _ADACCU_ACC20_MASK                                  0x10
#define _ADACCU_ACC21_POSN                                  0x5
#define _ADACCU_ACC21_POSITION                              0x5
#define _ADACCU_ACC21_SIZE                                  0x1
#define _ADACCU_ACC21_LENGTH                                0x1
#define _ADACCU_ACC21_MASK                                  0x20
#define _ADACCU_ACC22_POSN                                  0x6
#define _ADACCU_ACC22_POSITION                              0x6
#define _ADACCU_ACC22_SIZE                                  0x1
#define _ADACCU_ACC22_LENGTH                                0x1
#define _ADACCU_ACC22_MASK                                  0x40
#define _ADACCU_ACC23_POSN                                  0x7
#define _ADACCU_ACC23_POSITION                              0x7
#define _ADACCU_ACC23_SIZE                                  0x1
#define _ADACCU_ACC23_LENGTH                                0x1
#define _ADACCU_ACC23_MASK                                  0x80

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x3E6);
#ifndef _LIB_BUILD
asm("ADCNT equ 03E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x3E6);
// bitfield macros
#define _ADCNT_CNT_POSN                                     0x0
#define _ADCNT_CNT_POSITION                                 0x0
#define _ADCNT_CNT_SIZE                                     0x8
#define _ADCNT_CNT_LENGTH                                   0x8
#define _ADCNT_CNT_MASK                                     0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_CNT0_POSN                                    0x0
#define _ADCNT_CNT0_POSITION                                0x0
#define _ADCNT_CNT0_SIZE                                    0x1
#define _ADCNT_CNT0_LENGTH                                  0x1
#define _ADCNT_CNT0_MASK                                    0x1
#define _ADCNT_CNT1_POSN                                    0x1
#define _ADCNT_CNT1_POSITION                                0x1
#define _ADCNT_CNT1_SIZE                                    0x1
#define _ADCNT_CNT1_LENGTH                                  0x1
#define _ADCNT_CNT1_MASK                                    0x2
#define _ADCNT_CNT2_POSN                                    0x2
#define _ADCNT_CNT2_POSITION                                0x2
#define _ADCNT_CNT2_SIZE                                    0x1
#define _ADCNT_CNT2_LENGTH                                  0x1
#define _ADCNT_CNT2_MASK                                    0x4
#define _ADCNT_CNT3_POSN                                    0x3
#define _ADCNT_CNT3_POSITION                                0x3
#define _ADCNT_CNT3_SIZE                                    0x1
#define _ADCNT_CNT3_LENGTH                                  0x1
#define _ADCNT_CNT3_MASK                                    0x8
#define _ADCNT_CNT4_POSN                                    0x4
#define _ADCNT_CNT4_POSITION                                0x4
#define _ADCNT_CNT4_SIZE                                    0x1
#define _ADCNT_CNT4_LENGTH                                  0x1
#define _ADCNT_CNT4_MASK                                    0x10
#define _ADCNT_CNT5_POSN                                    0x5
#define _ADCNT_CNT5_POSITION                                0x5
#define _ADCNT_CNT5_SIZE                                    0x1
#define _ADCNT_CNT5_LENGTH                                  0x1
#define _ADCNT_CNT5_MASK                                    0x20
#define _ADCNT_CNT6_POSN                                    0x6
#define _ADCNT_CNT6_POSITION                                0x6
#define _ADCNT_CNT6_SIZE                                    0x1
#define _ADCNT_CNT6_LENGTH                                  0x1
#define _ADCNT_CNT6_MASK                                    0x40
#define _ADCNT_CNT7_POSN                                    0x7
#define _ADCNT_CNT7_POSITION                                0x7
#define _ADCNT_CNT7_SIZE                                    0x1
#define _ADCNT_CNT7_LENGTH                                  0x1
#define _ADCNT_CNT7_MASK                                    0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x3E7);
#ifndef _LIB_BUILD
asm("ADRPT equ 03E7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPT                    :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned RPT0                   :1;
        unsigned RPT1                   :1;
        unsigned RPT2                   :1;
        unsigned RPT3                   :1;
        unsigned RPT4                   :1;
        unsigned RPT5                   :1;
        unsigned RPT6                   :1;
        unsigned RPT7                   :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x3E7);
// bitfield macros
#define _ADRPT_RPT_POSN                                     0x0
#define _ADRPT_RPT_POSITION                                 0x0
#define _ADRPT_RPT_SIZE                                     0x8
#define _ADRPT_RPT_LENGTH                                   0x8
#define _ADRPT_RPT_MASK                                     0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_RPT0_POSN                                    0x0
#define _ADRPT_RPT0_POSITION                                0x0
#define _ADRPT_RPT0_SIZE                                    0x1
#define _ADRPT_RPT0_LENGTH                                  0x1
#define _ADRPT_RPT0_MASK                                    0x1
#define _ADRPT_RPT1_POSN                                    0x1
#define _ADRPT_RPT1_POSITION                                0x1
#define _ADRPT_RPT1_SIZE                                    0x1
#define _ADRPT_RPT1_LENGTH                                  0x1
#define _ADRPT_RPT1_MASK                                    0x2
#define _ADRPT_RPT2_POSN                                    0x2
#define _ADRPT_RPT2_POSITION                                0x2
#define _ADRPT_RPT2_SIZE                                    0x1
#define _ADRPT_RPT2_LENGTH                                  0x1
#define _ADRPT_RPT2_MASK                                    0x4
#define _ADRPT_RPT3_POSN                                    0x3
#define _ADRPT_RPT3_POSITION                                0x3
#define _ADRPT_RPT3_SIZE                                    0x1
#define _ADRPT_RPT3_LENGTH                                  0x1
#define _ADRPT_RPT3_MASK                                    0x8
#define _ADRPT_RPT4_POSN                                    0x4
#define _ADRPT_RPT4_POSITION                                0x4
#define _ADRPT_RPT4_SIZE                                    0x1
#define _ADRPT_RPT4_LENGTH                                  0x1
#define _ADRPT_RPT4_MASK                                    0x10
#define _ADRPT_RPT5_POSN                                    0x5
#define _ADRPT_RPT5_POSITION                                0x5
#define _ADRPT_RPT5_SIZE                                    0x1
#define _ADRPT_RPT5_LENGTH                                  0x1
#define _ADRPT_RPT5_MASK                                    0x20
#define _ADRPT_RPT6_POSN                                    0x6
#define _ADRPT_RPT6_POSITION                                0x6
#define _ADRPT_RPT6_SIZE                                    0x1
#define _ADRPT_RPT6_LENGTH                                  0x1
#define _ADRPT_RPT6_MASK                                    0x40
#define _ADRPT_RPT7_POSN                                    0x7
#define _ADRPT_RPT7_POSITION                                0x7
#define _ADRPT_RPT7_SIZE                                    0x1
#define _ADRPT_RPT7_LENGTH                                  0x1
#define _ADRPT_RPT7_MASK                                    0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x3E8);
#ifndef _LIB_BUILD
asm("ADPREV equ 03E8h");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x3E8);
#ifndef _LIB_BUILD
asm("ADPREVL equ 03E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV0                  :1;
        unsigned PREV1                  :1;
        unsigned PREV2                  :1;
        unsigned PREV3                  :1;
        unsigned PREV4                  :1;
        unsigned PREV5                  :1;
        unsigned PREV6                  :1;
        unsigned PREV7                  :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x3E8);
// bitfield macros
#define _ADPREVL_PREV_POSN                                  0x0
#define _ADPREVL_PREV_POSITION                              0x0
#define _ADPREVL_PREV_SIZE                                  0x8
#define _ADPREVL_PREV_LENGTH                                0x8
#define _ADPREVL_PREV_MASK                                  0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80
#define _ADPREVL_ADPREV_POSN                                0x0
#define _ADPREVL_ADPREV_POSITION                            0x0
#define _ADPREVL_ADPREV_SIZE                                0x8
#define _ADPREVL_ADPREV_LENGTH                              0x8
#define _ADPREVL_ADPREV_MASK                                0xFF
#define _ADPREVL_PREV0_POSN                                 0x0
#define _ADPREVL_PREV0_POSITION                             0x0
#define _ADPREVL_PREV0_SIZE                                 0x1
#define _ADPREVL_PREV0_LENGTH                               0x1
#define _ADPREVL_PREV0_MASK                                 0x1
#define _ADPREVL_PREV1_POSN                                 0x1
#define _ADPREVL_PREV1_POSITION                             0x1
#define _ADPREVL_PREV1_SIZE                                 0x1
#define _ADPREVL_PREV1_LENGTH                               0x1
#define _ADPREVL_PREV1_MASK                                 0x2
#define _ADPREVL_PREV2_POSN                                 0x2
#define _ADPREVL_PREV2_POSITION                             0x2
#define _ADPREVL_PREV2_SIZE                                 0x1
#define _ADPREVL_PREV2_LENGTH                               0x1
#define _ADPREVL_PREV2_MASK                                 0x4
#define _ADPREVL_PREV3_POSN                                 0x3
#define _ADPREVL_PREV3_POSITION                             0x3
#define _ADPREVL_PREV3_SIZE                                 0x1
#define _ADPREVL_PREV3_LENGTH                               0x1
#define _ADPREVL_PREV3_MASK                                 0x8
#define _ADPREVL_PREV4_POSN                                 0x4
#define _ADPREVL_PREV4_POSITION                             0x4
#define _ADPREVL_PREV4_SIZE                                 0x1
#define _ADPREVL_PREV4_LENGTH                               0x1
#define _ADPREVL_PREV4_MASK                                 0x10
#define _ADPREVL_PREV5_POSN                                 0x5
#define _ADPREVL_PREV5_POSITION                             0x5
#define _ADPREVL_PREV5_SIZE                                 0x1
#define _ADPREVL_PREV5_LENGTH                               0x1
#define _ADPREVL_PREV5_MASK                                 0x20
#define _ADPREVL_PREV6_POSN                                 0x6
#define _ADPREVL_PREV6_POSITION                             0x6
#define _ADPREVL_PREV6_SIZE                                 0x1
#define _ADPREVL_PREV6_LENGTH                               0x1
#define _ADPREVL_PREV6_MASK                                 0x40
#define _ADPREVL_PREV7_POSN                                 0x7
#define _ADPREVL_PREV7_POSITION                             0x7
#define _ADPREVL_PREV7_SIZE                                 0x1
#define _ADPREVL_PREV7_LENGTH                               0x1
#define _ADPREVL_PREV7_MASK                                 0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x3E9);
#ifndef _LIB_BUILD
asm("ADPREVH equ 03E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV8                  :1;
        unsigned PREV9                  :1;
        unsigned PREV10                 :1;
        unsigned PREV11                 :1;
        unsigned PREV12                 :1;
        unsigned PREV13                 :1;
        unsigned PREV14                 :1;
        unsigned PREV15                 :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x3E9);
// bitfield macros
#define _ADPREVH_PREV_POSN                                  0x0
#define _ADPREVH_PREV_POSITION                              0x0
#define _ADPREVH_PREV_SIZE                                  0x8
#define _ADPREVH_PREV_LENGTH                                0x8
#define _ADPREVH_PREV_MASK                                  0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80
#define _ADPREVH_ADPREV_POSN                                0x0
#define _ADPREVH_ADPREV_POSITION                            0x0
#define _ADPREVH_ADPREV_SIZE                                0x8
#define _ADPREVH_ADPREV_LENGTH                              0x8
#define _ADPREVH_ADPREV_MASK                                0xFF
#define _ADPREVH_PREV8_POSN                                 0x0
#define _ADPREVH_PREV8_POSITION                             0x0
#define _ADPREVH_PREV8_SIZE                                 0x1
#define _ADPREVH_PREV8_LENGTH                               0x1
#define _ADPREVH_PREV8_MASK                                 0x1
#define _ADPREVH_PREV9_POSN                                 0x1
#define _ADPREVH_PREV9_POSITION                             0x1
#define _ADPREVH_PREV9_SIZE                                 0x1
#define _ADPREVH_PREV9_LENGTH                               0x1
#define _ADPREVH_PREV9_MASK                                 0x2
#define _ADPREVH_PREV10_POSN                                0x2
#define _ADPREVH_PREV10_POSITION                            0x2
#define _ADPREVH_PREV10_SIZE                                0x1
#define _ADPREVH_PREV10_LENGTH                              0x1
#define _ADPREVH_PREV10_MASK                                0x4
#define _ADPREVH_PREV11_POSN                                0x3
#define _ADPREVH_PREV11_POSITION                            0x3
#define _ADPREVH_PREV11_SIZE                                0x1
#define _ADPREVH_PREV11_LENGTH                              0x1
#define _ADPREVH_PREV11_MASK                                0x8
#define _ADPREVH_PREV12_POSN                                0x4
#define _ADPREVH_PREV12_POSITION                            0x4
#define _ADPREVH_PREV12_SIZE                                0x1
#define _ADPREVH_PREV12_LENGTH                              0x1
#define _ADPREVH_PREV12_MASK                                0x10
#define _ADPREVH_PREV13_POSN                                0x5
#define _ADPREVH_PREV13_POSITION                            0x5
#define _ADPREVH_PREV13_SIZE                                0x1
#define _ADPREVH_PREV13_LENGTH                              0x1
#define _ADPREVH_PREV13_MASK                                0x20
#define _ADPREVH_PREV14_POSN                                0x6
#define _ADPREVH_PREV14_POSITION                            0x6
#define _ADPREVH_PREV14_SIZE                                0x1
#define _ADPREVH_PREV14_LENGTH                              0x1
#define _ADPREVH_PREV14_MASK                                0x40
#define _ADPREVH_PREV15_POSN                                0x7
#define _ADPREVH_PREV15_POSITION                            0x7
#define _ADPREVH_PREV15_SIZE                                0x1
#define _ADPREVH_PREV15_LENGTH                              0x1
#define _ADPREVH_PREV15_MASK                                0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x3EA);
#ifndef _LIB_BUILD
asm("ADRES equ 03EAh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x3EA);
#ifndef _LIB_BUILD
asm("ADRESL equ 03EAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RES                    :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x3EA);
// bitfield macros
#define _ADRESL_RES_POSN                                    0x0
#define _ADRESL_RES_POSITION                                0x0
#define _ADRESL_RES_SIZE                                    0x8
#define _ADRESL_RES_LENGTH                                  0x8
#define _ADRESL_RES_MASK                                    0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80
#define _ADRESL_ADRES_POSN                                  0x0
#define _ADRESL_ADRES_POSITION                              0x0
#define _ADRESL_ADRES_SIZE                                  0x8
#define _ADRESL_ADRES_LENGTH                                0x8
#define _ADRESL_ADRES_MASK                                  0xFF
#define _ADRESL_RES0_POSN                                   0x0
#define _ADRESL_RES0_POSITION                               0x0
#define _ADRESL_RES0_SIZE                                   0x1
#define _ADRESL_RES0_LENGTH                                 0x1
#define _ADRESL_RES0_MASK                                   0x1
#define _ADRESL_RES1_POSN                                   0x1
#define _ADRESL_RES1_POSITION                               0x1
#define _ADRESL_RES1_SIZE                                   0x1
#define _ADRESL_RES1_LENGTH                                 0x1
#define _ADRESL_RES1_MASK                                   0x2
#define _ADRESL_RES2_POSN                                   0x2
#define _ADRESL_RES2_POSITION                               0x2
#define _ADRESL_RES2_SIZE                                   0x1
#define _ADRESL_RES2_LENGTH                                 0x1
#define _ADRESL_RES2_MASK                                   0x4
#define _ADRESL_RES3_POSN                                   0x3
#define _ADRESL_RES3_POSITION                               0x3
#define _ADRESL_RES3_SIZE                                   0x1
#define _ADRESL_RES3_LENGTH                                 0x1
#define _ADRESL_RES3_MASK                                   0x8
#define _ADRESL_RES4_POSN                                   0x4
#define _ADRESL_RES4_POSITION                               0x4
#define _ADRESL_RES4_SIZE                                   0x1
#define _ADRESL_RES4_LENGTH                                 0x1
#define _ADRESL_RES4_MASK                                   0x10
#define _ADRESL_RES5_POSN                                   0x5
#define _ADRESL_RES5_POSITION                               0x5
#define _ADRESL_RES5_SIZE                                   0x1
#define _ADRESL_RES5_LENGTH                                 0x1
#define _ADRESL_RES5_MASK                                   0x20
#define _ADRESL_RES6_POSN                                   0x6
#define _ADRESL_RES6_POSITION                               0x6
#define _ADRESL_RES6_SIZE                                   0x1
#define _ADRESL_RES6_LENGTH                                 0x1
#define _ADRESL_RES6_MASK                                   0x40
#define _ADRESL_RES7_POSN                                   0x7
#define _ADRESL_RES7_POSITION                               0x7
#define _ADRESL_RES7_SIZE                                   0x1
#define _ADRESL_RES7_LENGTH                                 0x1
#define _ADRESL_RES7_MASK                                   0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x3EB);
#ifndef _LIB_BUILD
asm("ADRESH equ 03EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
        unsigned RES10                  :1;
        unsigned RES11                  :1;
        unsigned RES12                  :1;
        unsigned RES13                  :1;
        unsigned RES14                  :1;
        unsigned RES15                  :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x3EB);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80
#define _ADRESH_ADRES_POSN                                  0x0
#define _ADRESH_ADRES_POSITION                              0x0
#define _ADRESH_ADRES_SIZE                                  0x8
#define _ADRESH_ADRES_LENGTH                                0x8
#define _ADRESH_ADRES_MASK                                  0xFF
#define _ADRESH_RES8_POSN                                   0x0
#define _ADRESH_RES8_POSITION                               0x0
#define _ADRESH_RES8_SIZE                                   0x1
#define _ADRESH_RES8_LENGTH                                 0x1
#define _ADRESH_RES8_MASK                                   0x1
#define _ADRESH_RES9_POSN                                   0x1
#define _ADRESH_RES9_POSITION                               0x1
#define _ADRESH_RES9_SIZE                                   0x1
#define _ADRESH_RES9_LENGTH                                 0x1
#define _ADRESH_RES9_MASK                                   0x2
#define _ADRESH_RES10_POSN                                  0x2
#define _ADRESH_RES10_POSITION                              0x2
#define _ADRESH_RES10_SIZE                                  0x1
#define _ADRESH_RES10_LENGTH                                0x1
#define _ADRESH_RES10_MASK                                  0x4
#define _ADRESH_RES11_POSN                                  0x3
#define _ADRESH_RES11_POSITION                              0x3
#define _ADRESH_RES11_SIZE                                  0x1
#define _ADRESH_RES11_LENGTH                                0x1
#define _ADRESH_RES11_MASK                                  0x8
#define _ADRESH_RES12_POSN                                  0x4
#define _ADRESH_RES12_POSITION                              0x4
#define _ADRESH_RES12_SIZE                                  0x1
#define _ADRESH_RES12_LENGTH                                0x1
#define _ADRESH_RES12_MASK                                  0x10
#define _ADRESH_RES13_POSN                                  0x5
#define _ADRESH_RES13_POSITION                              0x5
#define _ADRESH_RES13_SIZE                                  0x1
#define _ADRESH_RES13_LENGTH                                0x1
#define _ADRESH_RES13_MASK                                  0x20
#define _ADRESH_RES14_POSN                                  0x6
#define _ADRESH_RES14_POSITION                              0x6
#define _ADRESH_RES14_SIZE                                  0x1
#define _ADRESH_RES14_LENGTH                                0x1
#define _ADRESH_RES14_MASK                                  0x40
#define _ADRESH_RES15_POSN                                  0x7
#define _ADRESH_RES15_POSITION                              0x7
#define _ADRESH_RES15_SIZE                                  0x1
#define _ADRESH_RES15_LENGTH                                0x1
#define _ADRESH_RES15_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x3EC);
#ifndef _LIB_BUILD
asm("ADPCH equ 03ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x3EC);
// bitfield macros
#define _ADPCH_PCH_POSN                                     0x0
#define _ADPCH_PCH_POSITION                                 0x0
#define _ADPCH_PCH_SIZE                                     0x8
#define _ADPCH_PCH_LENGTH                                   0x8
#define _ADPCH_PCH_MASK                                     0xFF
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned short          ADACQ               __at(0x3EE);
#ifndef _LIB_BUILD
asm("ADACQ equ 03EEh");
#endif

// Register: ADACQL
#define ADACQL ADACQL
extern volatile unsigned char           ADACQL              __at(0x3EE);
#ifndef _LIB_BUILD
asm("ADACQL equ 03EEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ACQ0                   :1;
        unsigned ACQ1                   :1;
        unsigned ACQ2                   :1;
        unsigned ACQ3                   :1;
        unsigned ACQ4                   :1;
        unsigned ACQ5                   :1;
        unsigned ACQ6                   :1;
        unsigned ACQ7                   :1;
    };
} ADACQLbits_t;
extern volatile ADACQLbits_t ADACQLbits __at(0x3EE);
// bitfield macros
#define _ADACQL_ACQ_POSN                                    0x0
#define _ADACQL_ACQ_POSITION                                0x0
#define _ADACQL_ACQ_SIZE                                    0x8
#define _ADACQL_ACQ_LENGTH                                  0x8
#define _ADACQL_ACQ_MASK                                    0xFF
#define _ADACQL_ADACQ0_POSN                                 0x0
#define _ADACQL_ADACQ0_POSITION                             0x0
#define _ADACQL_ADACQ0_SIZE                                 0x1
#define _ADACQL_ADACQ0_LENGTH                               0x1
#define _ADACQL_ADACQ0_MASK                                 0x1
#define _ADACQL_ADACQ1_POSN                                 0x1
#define _ADACQL_ADACQ1_POSITION                             0x1
#define _ADACQL_ADACQ1_SIZE                                 0x1
#define _ADACQL_ADACQ1_LENGTH                               0x1
#define _ADACQL_ADACQ1_MASK                                 0x2
#define _ADACQL_ADACQ2_POSN                                 0x2
#define _ADACQL_ADACQ2_POSITION                             0x2
#define _ADACQL_ADACQ2_SIZE                                 0x1
#define _ADACQL_ADACQ2_LENGTH                               0x1
#define _ADACQL_ADACQ2_MASK                                 0x4
#define _ADACQL_ADACQ3_POSN                                 0x3
#define _ADACQL_ADACQ3_POSITION                             0x3
#define _ADACQL_ADACQ3_SIZE                                 0x1
#define _ADACQL_ADACQ3_LENGTH                               0x1
#define _ADACQL_ADACQ3_MASK                                 0x8
#define _ADACQL_ADACQ4_POSN                                 0x4
#define _ADACQL_ADACQ4_POSITION                             0x4
#define _ADACQL_ADACQ4_SIZE                                 0x1
#define _ADACQL_ADACQ4_LENGTH                               0x1
#define _ADACQL_ADACQ4_MASK                                 0x10
#define _ADACQL_ADACQ5_POSN                                 0x5
#define _ADACQL_ADACQ5_POSITION                             0x5
#define _ADACQL_ADACQ5_SIZE                                 0x1
#define _ADACQL_ADACQ5_LENGTH                               0x1
#define _ADACQL_ADACQ5_MASK                                 0x20
#define _ADACQL_ADACQ6_POSN                                 0x6
#define _ADACQL_ADACQ6_POSITION                             0x6
#define _ADACQL_ADACQ6_SIZE                                 0x1
#define _ADACQL_ADACQ6_LENGTH                               0x1
#define _ADACQL_ADACQ6_MASK                                 0x40
#define _ADACQL_ADACQ7_POSN                                 0x7
#define _ADACQL_ADACQ7_POSITION                             0x7
#define _ADACQL_ADACQ7_SIZE                                 0x1
#define _ADACQL_ADACQ7_LENGTH                               0x1
#define _ADACQL_ADACQ7_MASK                                 0x80
#define _ADACQL_ADACQ_POSN                                  0x0
#define _ADACQL_ADACQ_POSITION                              0x0
#define _ADACQL_ADACQ_SIZE                                  0x8
#define _ADACQL_ADACQ_LENGTH                                0x8
#define _ADACQL_ADACQ_MASK                                  0xFF
#define _ADACQL_ACQ0_POSN                                   0x0
#define _ADACQL_ACQ0_POSITION                               0x0
#define _ADACQL_ACQ0_SIZE                                   0x1
#define _ADACQL_ACQ0_LENGTH                                 0x1
#define _ADACQL_ACQ0_MASK                                   0x1
#define _ADACQL_ACQ1_POSN                                   0x1
#define _ADACQL_ACQ1_POSITION                               0x1
#define _ADACQL_ACQ1_SIZE                                   0x1
#define _ADACQL_ACQ1_LENGTH                                 0x1
#define _ADACQL_ACQ1_MASK                                   0x2
#define _ADACQL_ACQ2_POSN                                   0x2
#define _ADACQL_ACQ2_POSITION                               0x2
#define _ADACQL_ACQ2_SIZE                                   0x1
#define _ADACQL_ACQ2_LENGTH                                 0x1
#define _ADACQL_ACQ2_MASK                                   0x4
#define _ADACQL_ACQ3_POSN                                   0x3
#define _ADACQL_ACQ3_POSITION                               0x3
#define _ADACQL_ACQ3_SIZE                                   0x1
#define _ADACQL_ACQ3_LENGTH                                 0x1
#define _ADACQL_ACQ3_MASK                                   0x8
#define _ADACQL_ACQ4_POSN                                   0x4
#define _ADACQL_ACQ4_POSITION                               0x4
#define _ADACQL_ACQ4_SIZE                                   0x1
#define _ADACQL_ACQ4_LENGTH                                 0x1
#define _ADACQL_ACQ4_MASK                                   0x10
#define _ADACQL_ACQ5_POSN                                   0x5
#define _ADACQL_ACQ5_POSITION                               0x5
#define _ADACQL_ACQ5_SIZE                                   0x1
#define _ADACQL_ACQ5_LENGTH                                 0x1
#define _ADACQL_ACQ5_MASK                                   0x20
#define _ADACQL_ACQ6_POSN                                   0x6
#define _ADACQL_ACQ6_POSITION                               0x6
#define _ADACQL_ACQ6_SIZE                                   0x1
#define _ADACQL_ACQ6_LENGTH                                 0x1
#define _ADACQL_ACQ6_MASK                                   0x40
#define _ADACQL_ACQ7_POSN                                   0x7
#define _ADACQL_ACQ7_POSITION                               0x7
#define _ADACQL_ACQ7_SIZE                                   0x1
#define _ADACQL_ACQ7_LENGTH                                 0x1
#define _ADACQL_ACQ7_MASK                                   0x80

// Register: ADACQH
#define ADACQH ADACQH
extern volatile unsigned char           ADACQH              __at(0x3EF);
#ifndef _LIB_BUILD
asm("ADACQH equ 03EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :5;
    };
    struct {
        unsigned ADACQ8                 :1;
        unsigned ADACQ9                 :1;
        unsigned ADACQ10                :1;
        unsigned ADACQ11                :1;
        unsigned ADACQ12                :1;
    };
    struct {
        unsigned ADACQ                  :5;
    };
    struct {
        unsigned ACQ8                   :1;
        unsigned ACQ9                   :1;
        unsigned ACQ10                  :1;
        unsigned ACQ11                  :1;
        unsigned ACQ12                  :1;
    };
} ADACQHbits_t;
extern volatile ADACQHbits_t ADACQHbits __at(0x3EF);
// bitfield macros
#define _ADACQH_ACQ_POSN                                    0x0
#define _ADACQH_ACQ_POSITION                                0x0
#define _ADACQH_ACQ_SIZE                                    0x5
#define _ADACQH_ACQ_LENGTH                                  0x5
#define _ADACQH_ACQ_MASK                                    0x1F
#define _ADACQH_ADACQ8_POSN                                 0x0
#define _ADACQH_ADACQ8_POSITION                             0x0
#define _ADACQH_ADACQ8_SIZE                                 0x1
#define _ADACQH_ADACQ8_LENGTH                               0x1
#define _ADACQH_ADACQ8_MASK                                 0x1
#define _ADACQH_ADACQ9_POSN                                 0x1
#define _ADACQH_ADACQ9_POSITION                             0x1
#define _ADACQH_ADACQ9_SIZE                                 0x1
#define _ADACQH_ADACQ9_LENGTH                               0x1
#define _ADACQH_ADACQ9_MASK                                 0x2
#define _ADACQH_ADACQ10_POSN                                0x2
#define _ADACQH_ADACQ10_POSITION                            0x2
#define _ADACQH_ADACQ10_SIZE                                0x1
#define _ADACQH_ADACQ10_LENGTH                              0x1
#define _ADACQH_ADACQ10_MASK                                0x4
#define _ADACQH_ADACQ11_POSN                                0x3
#define _ADACQH_ADACQ11_POSITION                            0x3
#define _ADACQH_ADACQ11_SIZE                                0x1
#define _ADACQH_ADACQ11_LENGTH                              0x1
#define _ADACQH_ADACQ11_MASK                                0x8
#define _ADACQH_ADACQ12_POSN                                0x4
#define _ADACQH_ADACQ12_POSITION                            0x4
#define _ADACQH_ADACQ12_SIZE                                0x1
#define _ADACQH_ADACQ12_LENGTH                              0x1
#define _ADACQH_ADACQ12_MASK                                0x10
#define _ADACQH_ADACQ_POSN                                  0x0
#define _ADACQH_ADACQ_POSITION                              0x0
#define _ADACQH_ADACQ_SIZE                                  0x5
#define _ADACQH_ADACQ_LENGTH                                0x5
#define _ADACQH_ADACQ_MASK                                  0x1F
#define _ADACQH_ACQ8_POSN                                   0x0
#define _ADACQH_ACQ8_POSITION                               0x0
#define _ADACQH_ACQ8_SIZE                                   0x1
#define _ADACQH_ACQ8_LENGTH                                 0x1
#define _ADACQH_ACQ8_MASK                                   0x1
#define _ADACQH_ACQ9_POSN                                   0x1
#define _ADACQH_ACQ9_POSITION                               0x1
#define _ADACQH_ACQ9_SIZE                                   0x1
#define _ADACQH_ACQ9_LENGTH                                 0x1
#define _ADACQH_ACQ9_MASK                                   0x2
#define _ADACQH_ACQ10_POSN                                  0x2
#define _ADACQH_ACQ10_POSITION                              0x2
#define _ADACQH_ACQ10_SIZE                                  0x1
#define _ADACQH_ACQ10_LENGTH                                0x1
#define _ADACQH_ACQ10_MASK                                  0x4
#define _ADACQH_ACQ11_POSN                                  0x3
#define _ADACQH_ACQ11_POSITION                              0x3
#define _ADACQH_ACQ11_SIZE                                  0x1
#define _ADACQH_ACQ11_LENGTH                                0x1
#define _ADACQH_ACQ11_MASK                                  0x8
#define _ADACQH_ACQ12_POSN                                  0x4
#define _ADACQH_ACQ12_POSITION                              0x4
#define _ADACQH_ACQ12_SIZE                                  0x1
#define _ADACQH_ACQ12_LENGTH                                0x1
#define _ADACQH_ACQ12_MASK                                  0x10

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x3F0);
#ifndef _LIB_BUILD
asm("ADCAP equ 03F0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CAP                    :8;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x3F0);
// bitfield macros
#define _ADCAP_CAP_POSN                                     0x0
#define _ADCAP_CAP_POSITION                                 0x0
#define _ADCAP_CAP_SIZE                                     0x8
#define _ADCAP_CAP_LENGTH                                   0x8
#define _ADCAP_CAP_MASK                                     0xFF
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned short          ADPRE               __at(0x3F1);
#ifndef _LIB_BUILD
asm("ADPRE equ 03F1h");
#endif

// Register: ADPREL
#define ADPREL ADPREL
extern volatile unsigned char           ADPREL              __at(0x3F1);
#ifndef _LIB_BUILD
asm("ADPREL equ 03F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :8;
    };
    struct {
        unsigned PRE0                   :1;
        unsigned PRE1                   :1;
        unsigned PRE2                   :1;
        unsigned PRE3                   :1;
        unsigned PRE4                   :1;
        unsigned PRE5                   :1;
        unsigned PRE6                   :1;
        unsigned PRE7                   :1;
    };
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPRELbits_t;
extern volatile ADPRELbits_t ADPRELbits __at(0x3F1);
// bitfield macros
#define _ADPREL_PRE_POSN                                    0x0
#define _ADPREL_PRE_POSITION                                0x0
#define _ADPREL_PRE_SIZE                                    0x8
#define _ADPREL_PRE_LENGTH                                  0x8
#define _ADPREL_PRE_MASK                                    0xFF
#define _ADPREL_PRE0_POSN                                   0x0
#define _ADPREL_PRE0_POSITION                               0x0
#define _ADPREL_PRE0_SIZE                                   0x1
#define _ADPREL_PRE0_LENGTH                                 0x1
#define _ADPREL_PRE0_MASK                                   0x1
#define _ADPREL_PRE1_POSN                                   0x1
#define _ADPREL_PRE1_POSITION                               0x1
#define _ADPREL_PRE1_SIZE                                   0x1
#define _ADPREL_PRE1_LENGTH                                 0x1
#define _ADPREL_PRE1_MASK                                   0x2
#define _ADPREL_PRE2_POSN                                   0x2
#define _ADPREL_PRE2_POSITION                               0x2
#define _ADPREL_PRE2_SIZE                                   0x1
#define _ADPREL_PRE2_LENGTH                                 0x1
#define _ADPREL_PRE2_MASK                                   0x4
#define _ADPREL_PRE3_POSN                                   0x3
#define _ADPREL_PRE3_POSITION                               0x3
#define _ADPREL_PRE3_SIZE                                   0x1
#define _ADPREL_PRE3_LENGTH                                 0x1
#define _ADPREL_PRE3_MASK                                   0x8
#define _ADPREL_PRE4_POSN                                   0x4
#define _ADPREL_PRE4_POSITION                               0x4
#define _ADPREL_PRE4_SIZE                                   0x1
#define _ADPREL_PRE4_LENGTH                                 0x1
#define _ADPREL_PRE4_MASK                                   0x10
#define _ADPREL_PRE5_POSN                                   0x5
#define _ADPREL_PRE5_POSITION                               0x5
#define _ADPREL_PRE5_SIZE                                   0x1
#define _ADPREL_PRE5_LENGTH                                 0x1
#define _ADPREL_PRE5_MASK                                   0x20
#define _ADPREL_PRE6_POSN                                   0x6
#define _ADPREL_PRE6_POSITION                               0x6
#define _ADPREL_PRE6_SIZE                                   0x1
#define _ADPREL_PRE6_LENGTH                                 0x1
#define _ADPREL_PRE6_MASK                                   0x40
#define _ADPREL_PRE7_POSN                                   0x7
#define _ADPREL_PRE7_POSITION                               0x7
#define _ADPREL_PRE7_SIZE                                   0x1
#define _ADPREL_PRE7_LENGTH                                 0x1
#define _ADPREL_PRE7_MASK                                   0x80
#define _ADPREL_ADPRE_POSN                                  0x0
#define _ADPREL_ADPRE_POSITION                              0x0
#define _ADPREL_ADPRE_SIZE                                  0x8
#define _ADPREL_ADPRE_LENGTH                                0x8
#define _ADPREL_ADPRE_MASK                                  0xFF
#define _ADPREL_ADPRE0_POSN                                 0x0
#define _ADPREL_ADPRE0_POSITION                             0x0
#define _ADPREL_ADPRE0_SIZE                                 0x1
#define _ADPREL_ADPRE0_LENGTH                               0x1
#define _ADPREL_ADPRE0_MASK                                 0x1
#define _ADPREL_ADPRE1_POSN                                 0x1
#define _ADPREL_ADPRE1_POSITION                             0x1
#define _ADPREL_ADPRE1_SIZE                                 0x1
#define _ADPREL_ADPRE1_LENGTH                               0x1
#define _ADPREL_ADPRE1_MASK                                 0x2
#define _ADPREL_ADPRE2_POSN                                 0x2
#define _ADPREL_ADPRE2_POSITION                             0x2
#define _ADPREL_ADPRE2_SIZE                                 0x1
#define _ADPREL_ADPRE2_LENGTH                               0x1
#define _ADPREL_ADPRE2_MASK                                 0x4
#define _ADPREL_ADPRE3_POSN                                 0x3
#define _ADPREL_ADPRE3_POSITION                             0x3
#define _ADPREL_ADPRE3_SIZE                                 0x1
#define _ADPREL_ADPRE3_LENGTH                               0x1
#define _ADPREL_ADPRE3_MASK                                 0x8
#define _ADPREL_ADPRE4_POSN                                 0x4
#define _ADPREL_ADPRE4_POSITION                             0x4
#define _ADPREL_ADPRE4_SIZE                                 0x1
#define _ADPREL_ADPRE4_LENGTH                               0x1
#define _ADPREL_ADPRE4_MASK                                 0x10
#define _ADPREL_ADPRE5_POSN                                 0x5
#define _ADPREL_ADPRE5_POSITION                             0x5
#define _ADPREL_ADPRE5_SIZE                                 0x1
#define _ADPREL_ADPRE5_LENGTH                               0x1
#define _ADPREL_ADPRE5_MASK                                 0x20
#define _ADPREL_ADPRE6_POSN                                 0x6
#define _ADPREL_ADPRE6_POSITION                             0x6
#define _ADPREL_ADPRE6_SIZE                                 0x1
#define _ADPREL_ADPRE6_LENGTH                               0x1
#define _ADPREL_ADPRE6_MASK                                 0x40
#define _ADPREL_ADPRE7_POSN                                 0x7
#define _ADPREL_ADPRE7_POSITION                             0x7
#define _ADPREL_ADPRE7_SIZE                                 0x1
#define _ADPREL_ADPRE7_LENGTH                               0x1
#define _ADPREL_ADPRE7_MASK                                 0x80

// Register: ADPREH
#define ADPREH ADPREH
extern volatile unsigned char           ADPREH              __at(0x3F2);
#ifndef _LIB_BUILD
asm("ADPREH equ 03F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :5;
    };
    struct {
        unsigned PRE8                   :1;
        unsigned PRE9                   :1;
        unsigned PRE10                  :1;
        unsigned PRE11                  :1;
        unsigned PRE12                  :1;
    };
    struct {
        unsigned ADPRE                  :5;
    };
    struct {
        unsigned ADPRE8                 :1;
        unsigned ADPRE9                 :1;
        unsigned ADPRE10                :1;
        unsigned ADPRE11                :1;
        unsigned ADPRE12                :1;
    };
} ADPREHbits_t;
extern volatile ADPREHbits_t ADPREHbits __at(0x3F2);
// bitfield macros
#define _ADPREH_PRE_POSN                                    0x0
#define _ADPREH_PRE_POSITION                                0x0
#define _ADPREH_PRE_SIZE                                    0x5
#define _ADPREH_PRE_LENGTH                                  0x5
#define _ADPREH_PRE_MASK                                    0x1F
#define _ADPREH_PRE8_POSN                                   0x0
#define _ADPREH_PRE8_POSITION                               0x0
#define _ADPREH_PRE8_SIZE                                   0x1
#define _ADPREH_PRE8_LENGTH                                 0x1
#define _ADPREH_PRE8_MASK                                   0x1
#define _ADPREH_PRE9_POSN                                   0x1
#define _ADPREH_PRE9_POSITION                               0x1
#define _ADPREH_PRE9_SIZE                                   0x1
#define _ADPREH_PRE9_LENGTH                                 0x1
#define _ADPREH_PRE9_MASK                                   0x2
#define _ADPREH_PRE10_POSN                                  0x2
#define _ADPREH_PRE10_POSITION                              0x2
#define _ADPREH_PRE10_SIZE                                  0x1
#define _ADPREH_PRE10_LENGTH                                0x1
#define _ADPREH_PRE10_MASK                                  0x4
#define _ADPREH_PRE11_POSN                                  0x3
#define _ADPREH_PRE11_POSITION                              0x3
#define _ADPREH_PRE11_SIZE                                  0x1
#define _ADPREH_PRE11_LENGTH                                0x1
#define _ADPREH_PRE11_MASK                                  0x8
#define _ADPREH_PRE12_POSN                                  0x4
#define _ADPREH_PRE12_POSITION                              0x4
#define _ADPREH_PRE12_SIZE                                  0x1
#define _ADPREH_PRE12_LENGTH                                0x1
#define _ADPREH_PRE12_MASK                                  0x10
#define _ADPREH_ADPRE_POSN                                  0x0
#define _ADPREH_ADPRE_POSITION                              0x0
#define _ADPREH_ADPRE_SIZE                                  0x5
#define _ADPREH_ADPRE_LENGTH                                0x5
#define _ADPREH_ADPRE_MASK                                  0x1F
#define _ADPREH_ADPRE8_POSN                                 0x0
#define _ADPREH_ADPRE8_POSITION                             0x0
#define _ADPREH_ADPRE8_SIZE                                 0x1
#define _ADPREH_ADPRE8_LENGTH                               0x1
#define _ADPREH_ADPRE8_MASK                                 0x1
#define _ADPREH_ADPRE9_POSN                                 0x1
#define _ADPREH_ADPRE9_POSITION                             0x1
#define _ADPREH_ADPRE9_SIZE                                 0x1
#define _ADPREH_ADPRE9_LENGTH                               0x1
#define _ADPREH_ADPRE9_MASK                                 0x2
#define _ADPREH_ADPRE10_POSN                                0x2
#define _ADPREH_ADPRE10_POSITION                            0x2
#define _ADPREH_ADPRE10_SIZE                                0x1
#define _ADPREH_ADPRE10_LENGTH                              0x1
#define _ADPREH_ADPRE10_MASK                                0x4
#define _ADPREH_ADPRE11_POSN                                0x3
#define _ADPREH_ADPRE11_POSITION                            0x3
#define _ADPREH_ADPRE11_SIZE                                0x1
#define _ADPREH_ADPRE11_LENGTH                              0x1
#define _ADPREH_ADPRE11_MASK                                0x8
#define _ADPREH_ADPRE12_POSN                                0x4
#define _ADPREH_ADPRE12_POSITION                            0x4
#define _ADPREH_ADPRE12_SIZE                                0x1
#define _ADPREH_ADPRE12_LENGTH                              0x1
#define _ADPREH_ADPRE12_MASK                                0x10

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x3F3);
#ifndef _LIB_BUILD
asm("ADCON0 equ 03F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned FM                     :2;
        unsigned CS                     :1;
        unsigned                        :1;
        unsigned CONT                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :2;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
        unsigned                        :1;
        unsigned FM0                    :1;
    };
    struct {
        unsigned GO_NOT_DONE            :1;
    };
    struct {
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x3F3);
// bitfield macros
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_FM_POSN                                     0x2
#define _ADCON0_FM_POSITION                                 0x2
#define _ADCON0_FM_SIZE                                     0x2
#define _ADCON0_FM_LENGTH                                   0x2
#define _ADCON0_FM_MASK                                     0xC
#define _ADCON0_CS_POSN                                     0x4
#define _ADCON0_CS_POSITION                                 0x4
#define _ADCON0_CS_SIZE                                     0x1
#define _ADCON0_CS_LENGTH                                   0x1
#define _ADCON0_CS_MASK                                     0x10
#define _ADCON0_CONT_POSN                                   0x6
#define _ADCON0_CONT_POSITION                               0x6
#define _ADCON0_CONT_SIZE                                   0x1
#define _ADCON0_CONT_LENGTH                                 0x1
#define _ADCON0_CONT_MASK                                   0x40
#define _ADCON0_ON_POSN                                     0x7
#define _ADCON0_ON_POSITION                                 0x7
#define _ADCON0_ON_SIZE                                     0x1
#define _ADCON0_ON_LENGTH                                   0x1
#define _ADCON0_ON_MASK                                     0x80
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x2
#define _ADCON0_ADFM_LENGTH                                 0x2
#define _ADCON0_ADFM_MASK                                   0xC
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_FM0_POSN                                    0x2
#define _ADCON0_FM0_POSITION                                0x2
#define _ADCON0_FM0_SIZE                                    0x1
#define _ADCON0_FM0_LENGTH                                  0x1
#define _ADCON0_FM0_MASK                                    0x4
#define _ADCON0_GO_NOT_DONE_POSN                            0x0
#define _ADCON0_GO_NOT_DONE_POSITION                        0x0
#define _ADCON0_GO_NOT_DONE_SIZE                            0x1
#define _ADCON0_GO_NOT_DONE_LENGTH                          0x1
#define _ADCON0_GO_NOT_DONE_MASK                            0x1
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x3F4);
#ifndef _LIB_BUILD
asm("ADCON1 equ 03F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSEN                   :1;
        unsigned                        :4;
        unsigned GPOL                   :1;
        unsigned IPEN                   :1;
        unsigned PPOL                   :1;
    };
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x3F4);
// bitfield macros
#define _ADCON1_DSEN_POSN                                   0x0
#define _ADCON1_DSEN_POSITION                               0x0
#define _ADCON1_DSEN_SIZE                                   0x1
#define _ADCON1_DSEN_LENGTH                                 0x1
#define _ADCON1_DSEN_MASK                                   0x1
#define _ADCON1_GPOL_POSN                                   0x5
#define _ADCON1_GPOL_POSITION                               0x5
#define _ADCON1_GPOL_SIZE                                   0x1
#define _ADCON1_GPOL_LENGTH                                 0x1
#define _ADCON1_GPOL_MASK                                   0x20
#define _ADCON1_IPEN_POSN                                   0x6
#define _ADCON1_IPEN_POSITION                               0x6
#define _ADCON1_IPEN_SIZE                                   0x1
#define _ADCON1_IPEN_LENGTH                                 0x1
#define _ADCON1_IPEN_MASK                                   0x40
#define _ADCON1_PPOL_POSN                                   0x7
#define _ADCON1_PPOL_POSITION                               0x7
#define _ADCON1_PPOL_SIZE                                   0x1
#define _ADCON1_PPOL_LENGTH                                 0x1
#define _ADCON1_PPOL_MASK                                   0x80
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x3F5);
#ifndef _LIB_BUILD
asm("ADCON2 equ 03F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD                     :3;
        unsigned ACLR                   :1;
        unsigned CRS                    :3;
        unsigned PSIS                   :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned ADACLR                 :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD                   :3;
        unsigned                        :1;
        unsigned ADCRS                  :3;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
        unsigned                        :1;
        unsigned CRS0                   :1;
        unsigned CRS1                   :1;
        unsigned CRS2                   :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x3F5);
// bitfield macros
#define _ADCON2_MD_POSN                                     0x0
#define _ADCON2_MD_POSITION                                 0x0
#define _ADCON2_MD_SIZE                                     0x3
#define _ADCON2_MD_LENGTH                                   0x3
#define _ADCON2_MD_MASK                                     0x7
#define _ADCON2_ACLR_POSN                                   0x3
#define _ADCON2_ACLR_POSITION                               0x3
#define _ADCON2_ACLR_SIZE                                   0x1
#define _ADCON2_ACLR_LENGTH                                 0x1
#define _ADCON2_ACLR_MASK                                   0x8
#define _ADCON2_CRS_POSN                                    0x4
#define _ADCON2_CRS_POSITION                                0x4
#define _ADCON2_CRS_SIZE                                    0x3
#define _ADCON2_CRS_LENGTH                                  0x3
#define _ADCON2_CRS_MASK                                    0x70
#define _ADCON2_PSIS_POSN                                   0x7
#define _ADCON2_PSIS_POSITION                               0x7
#define _ADCON2_PSIS_SIZE                                   0x1
#define _ADCON2_PSIS_LENGTH                                 0x1
#define _ADCON2_PSIS_MASK                                   0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_MD0_POSN                                    0x0
#define _ADCON2_MD0_POSITION                                0x0
#define _ADCON2_MD0_SIZE                                    0x1
#define _ADCON2_MD0_LENGTH                                  0x1
#define _ADCON2_MD0_MASK                                    0x1
#define _ADCON2_MD1_POSN                                    0x1
#define _ADCON2_MD1_POSITION                                0x1
#define _ADCON2_MD1_SIZE                                    0x1
#define _ADCON2_MD1_LENGTH                                  0x1
#define _ADCON2_MD1_MASK                                    0x2
#define _ADCON2_MD2_POSN                                    0x2
#define _ADCON2_MD2_POSITION                                0x2
#define _ADCON2_MD2_SIZE                                    0x1
#define _ADCON2_MD2_LENGTH                                  0x1
#define _ADCON2_MD2_MASK                                    0x4
#define _ADCON2_CRS0_POSN                                   0x4
#define _ADCON2_CRS0_POSITION                               0x4
#define _ADCON2_CRS0_SIZE                                   0x1
#define _ADCON2_CRS0_LENGTH                                 0x1
#define _ADCON2_CRS0_MASK                                   0x10
#define _ADCON2_CRS1_POSN                                   0x5
#define _ADCON2_CRS1_POSITION                               0x5
#define _ADCON2_CRS1_SIZE                                   0x1
#define _ADCON2_CRS1_LENGTH                                 0x1
#define _ADCON2_CRS1_MASK                                   0x20
#define _ADCON2_CRS2_POSN                                   0x6
#define _ADCON2_CRS2_POSITION                               0x6
#define _ADCON2_CRS2_SIZE                                   0x1
#define _ADCON2_CRS2_LENGTH                                 0x1
#define _ADCON2_CRS2_MASK                                   0x40

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x3F6);
#ifndef _LIB_BUILD
asm("ADCON3 equ 03F6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMD                    :3;
        unsigned SOI                    :1;
        unsigned CALC                   :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned ADSOI                  :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned                        :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned TMD0                   :1;
        unsigned TMD1                   :1;
        unsigned TMD2                   :1;
        unsigned                        :1;
        unsigned CALC0                  :1;
        unsigned CALC1                  :1;
        unsigned CALC2                  :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x3F6);
// bitfield macros
#define _ADCON3_TMD_POSN                                    0x0
#define _ADCON3_TMD_POSITION                                0x0
#define _ADCON3_TMD_SIZE                                    0x3
#define _ADCON3_TMD_LENGTH                                  0x3
#define _ADCON3_TMD_MASK                                    0x7
#define _ADCON3_SOI_POSN                                    0x3
#define _ADCON3_SOI_POSITION                                0x3
#define _ADCON3_SOI_SIZE                                    0x1
#define _ADCON3_SOI_LENGTH                                  0x1
#define _ADCON3_SOI_MASK                                    0x8
#define _ADCON3_CALC_POSN                                   0x4
#define _ADCON3_CALC_POSITION                               0x4
#define _ADCON3_CALC_SIZE                                   0x3
#define _ADCON3_CALC_LENGTH                                 0x3
#define _ADCON3_CALC_MASK                                   0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_TMD0_POSN                                   0x0
#define _ADCON3_TMD0_POSITION                               0x0
#define _ADCON3_TMD0_SIZE                                   0x1
#define _ADCON3_TMD0_LENGTH                                 0x1
#define _ADCON3_TMD0_MASK                                   0x1
#define _ADCON3_TMD1_POSN                                   0x1
#define _ADCON3_TMD1_POSITION                               0x1
#define _ADCON3_TMD1_SIZE                                   0x1
#define _ADCON3_TMD1_LENGTH                                 0x1
#define _ADCON3_TMD1_MASK                                   0x2
#define _ADCON3_TMD2_POSN                                   0x2
#define _ADCON3_TMD2_POSITION                               0x2
#define _ADCON3_TMD2_SIZE                                   0x1
#define _ADCON3_TMD2_LENGTH                                 0x1
#define _ADCON3_TMD2_MASK                                   0x4
#define _ADCON3_CALC0_POSN                                  0x4
#define _ADCON3_CALC0_POSITION                              0x4
#define _ADCON3_CALC0_SIZE                                  0x1
#define _ADCON3_CALC0_LENGTH                                0x1
#define _ADCON3_CALC0_MASK                                  0x10
#define _ADCON3_CALC1_POSN                                  0x5
#define _ADCON3_CALC1_POSITION                              0x5
#define _ADCON3_CALC1_SIZE                                  0x1
#define _ADCON3_CALC1_LENGTH                                0x1
#define _ADCON3_CALC1_MASK                                  0x20
#define _ADCON3_CALC2_POSN                                  0x6
#define _ADCON3_CALC2_POSITION                              0x6
#define _ADCON3_CALC2_SIZE                                  0x1
#define _ADCON3_CALC2_LENGTH                                0x1
#define _ADCON3_CALC2_MASK                                  0x40

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x3F7);
#ifndef _LIB_BUILD
asm("ADSTAT equ 03F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STAT                   :3;
        unsigned                        :1;
        unsigned MATH                   :1;
        unsigned LTHR                   :1;
        unsigned UTHR                   :1;
        unsigned AOV                    :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT                 :3;
        unsigned                        :4;
        unsigned ADOV                   :1;
    };
    struct {
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
        unsigned STAT2                  :1;
        unsigned                        :4;
        unsigned OV                     :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x3F7);
// bitfield macros
#define _ADSTAT_STAT_POSN                                   0x0
#define _ADSTAT_STAT_POSITION                               0x0
#define _ADSTAT_STAT_SIZE                                   0x3
#define _ADSTAT_STAT_LENGTH                                 0x3
#define _ADSTAT_STAT_MASK                                   0x7
#define _ADSTAT_MATH_POSN                                   0x4
#define _ADSTAT_MATH_POSITION                               0x4
#define _ADSTAT_MATH_SIZE                                   0x1
#define _ADSTAT_MATH_LENGTH                                 0x1
#define _ADSTAT_MATH_MASK                                   0x10
#define _ADSTAT_LTHR_POSN                                   0x5
#define _ADSTAT_LTHR_POSITION                               0x5
#define _ADSTAT_LTHR_SIZE                                   0x1
#define _ADSTAT_LTHR_LENGTH                                 0x1
#define _ADSTAT_LTHR_MASK                                   0x20
#define _ADSTAT_UTHR_POSN                                   0x6
#define _ADSTAT_UTHR_POSITION                               0x6
#define _ADSTAT_UTHR_SIZE                                   0x1
#define _ADSTAT_UTHR_LENGTH                                 0x1
#define _ADSTAT_UTHR_MASK                                   0x40
#define _ADSTAT_AOV_POSN                                    0x7
#define _ADSTAT_AOV_POSITION                                0x7
#define _ADSTAT_AOV_SIZE                                    0x1
#define _ADSTAT_AOV_LENGTH                                  0x1
#define _ADSTAT_AOV_MASK                                    0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADOV_POSN                                   0x7
#define _ADSTAT_ADOV_POSITION                               0x7
#define _ADSTAT_ADOV_SIZE                                   0x1
#define _ADSTAT_ADOV_LENGTH                                 0x1
#define _ADSTAT_ADOV_MASK                                   0x80
#define _ADSTAT_STAT0_POSN                                  0x0
#define _ADSTAT_STAT0_POSITION                              0x0
#define _ADSTAT_STAT0_SIZE                                  0x1
#define _ADSTAT_STAT0_LENGTH                                0x1
#define _ADSTAT_STAT0_MASK                                  0x1
#define _ADSTAT_STAT1_POSN                                  0x1
#define _ADSTAT_STAT1_POSITION                              0x1
#define _ADSTAT_STAT1_SIZE                                  0x1
#define _ADSTAT_STAT1_LENGTH                                0x1
#define _ADSTAT_STAT1_MASK                                  0x2
#define _ADSTAT_STAT2_POSN                                  0x2
#define _ADSTAT_STAT2_POSITION                              0x2
#define _ADSTAT_STAT2_SIZE                                  0x1
#define _ADSTAT_STAT2_LENGTH                                0x1
#define _ADSTAT_STAT2_MASK                                  0x4
#define _ADSTAT_OV_POSN                                     0x7
#define _ADSTAT_OV_POSITION                                 0x7
#define _ADSTAT_OV_SIZE                                     0x1
#define _ADSTAT_OV_LENGTH                                   0x1
#define _ADSTAT_OV_MASK                                     0x80

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x3F8);
#ifndef _LIB_BUILD
asm("ADREF equ 03F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREF                   :4;
        unsigned NREF                   :4;
    };
    struct {
        unsigned ADPREF                 :4;
        unsigned ADNREF                 :4;
    };
    struct {
        unsigned PREF0                  :1;
        unsigned PREF1                  :1;
        unsigned                        :2;
        unsigned NREF0                  :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
        unsigned                        :2;
        unsigned ADNREF0                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x3F8);
// bitfield macros
#define _ADREF_PREF_POSN                                    0x0
#define _ADREF_PREF_POSITION                                0x0
#define _ADREF_PREF_SIZE                                    0x4
#define _ADREF_PREF_LENGTH                                  0x4
#define _ADREF_PREF_MASK                                    0xF
#define _ADREF_NREF_POSN                                    0x4
#define _ADREF_NREF_POSITION                                0x4
#define _ADREF_NREF_SIZE                                    0x4
#define _ADREF_NREF_LENGTH                                  0x4
#define _ADREF_NREF_MASK                                    0xF0
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x4
#define _ADREF_ADPREF_LENGTH                                0x4
#define _ADREF_ADPREF_MASK                                  0xF
#define _ADREF_ADNREF_POSN                                  0x4
#define _ADREF_ADNREF_POSITION                              0x4
#define _ADREF_ADNREF_SIZE                                  0x4
#define _ADREF_ADNREF_LENGTH                                0x4
#define _ADREF_ADNREF_MASK                                  0xF0
#define _ADREF_PREF0_POSN                                   0x0
#define _ADREF_PREF0_POSITION                               0x0
#define _ADREF_PREF0_SIZE                                   0x1
#define _ADREF_PREF0_LENGTH                                 0x1
#define _ADREF_PREF0_MASK                                   0x1
#define _ADREF_PREF1_POSN                                   0x1
#define _ADREF_PREF1_POSITION                               0x1
#define _ADREF_PREF1_SIZE                                   0x1
#define _ADREF_PREF1_LENGTH                                 0x1
#define _ADREF_PREF1_MASK                                   0x2
#define _ADREF_NREF0_POSN                                   0x4
#define _ADREF_NREF0_POSITION                               0x4
#define _ADREF_NREF0_SIZE                                   0x1
#define _ADREF_NREF0_LENGTH                                 0x1
#define _ADREF_NREF0_MASK                                   0x10
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2
#define _ADREF_ADNREF0_POSN                                 0x4
#define _ADREF_ADNREF0_POSITION                             0x4
#define _ADREF_ADNREF0_SIZE                                 0x1
#define _ADREF_ADNREF0_LENGTH                               0x1
#define _ADREF_ADNREF0_MASK                                 0x10

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x3F9);
#ifndef _LIB_BUILD
asm("ADACT equ 03F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACT                    :8;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
        unsigned ADACT5                 :1;
    };
    struct {
        unsigned ADACT                  :8;
    };
    struct {
        unsigned ACT0                   :1;
        unsigned ACT1                   :1;
        unsigned ACT2                   :1;
        unsigned ACT3                   :1;
        unsigned ACT4                   :1;
        unsigned ACT5                   :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x3F9);
// bitfield macros
#define _ADACT_ACT_POSN                                     0x0
#define _ADACT_ACT_POSITION                                 0x0
#define _ADACT_ACT_SIZE                                     0x8
#define _ADACT_ACT_LENGTH                                   0x8
#define _ADACT_ACT_MASK                                     0xFF
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT5_POSN                                  0x5
#define _ADACT_ADACT5_POSITION                              0x5
#define _ADACT_ADACT5_SIZE                                  0x1
#define _ADACT_ADACT5_LENGTH                                0x1
#define _ADACT_ADACT5_MASK                                  0x20
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x8
#define _ADACT_ADACT_LENGTH                                 0x8
#define _ADACT_ADACT_MASK                                   0xFF
#define _ADACT_ACT0_POSN                                    0x0
#define _ADACT_ACT0_POSITION                                0x0
#define _ADACT_ACT0_SIZE                                    0x1
#define _ADACT_ACT0_LENGTH                                  0x1
#define _ADACT_ACT0_MASK                                    0x1
#define _ADACT_ACT1_POSN                                    0x1
#define _ADACT_ACT1_POSITION                                0x1
#define _ADACT_ACT1_SIZE                                    0x1
#define _ADACT_ACT1_LENGTH                                  0x1
#define _ADACT_ACT1_MASK                                    0x2
#define _ADACT_ACT2_POSN                                    0x2
#define _ADACT_ACT2_POSITION                                0x2
#define _ADACT_ACT2_SIZE                                    0x1
#define _ADACT_ACT2_LENGTH                                  0x1
#define _ADACT_ACT2_MASK                                    0x4
#define _ADACT_ACT3_POSN                                    0x3
#define _ADACT_ACT3_POSITION                                0x3
#define _ADACT_ACT3_SIZE                                    0x1
#define _ADACT_ACT3_LENGTH                                  0x1
#define _ADACT_ACT3_MASK                                    0x8
#define _ADACT_ACT4_POSN                                    0x4
#define _ADACT_ACT4_POSITION                                0x4
#define _ADACT_ACT4_SIZE                                    0x1
#define _ADACT_ACT4_LENGTH                                  0x1
#define _ADACT_ACT4_MASK                                    0x10
#define _ADACT_ACT5_POSN                                    0x5
#define _ADACT_ACT5_POSITION                                0x5
#define _ADACT_ACT5_SIZE                                    0x1
#define _ADACT_ACT5_LENGTH                                  0x1
#define _ADACT_ACT5_MASK                                    0x20

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x3FA);
#ifndef _LIB_BUILD
asm("ADCLK equ 03FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
    struct {
        unsigned ADCS                   :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x3FA);
// bitfield macros
#define _ADCLK_CS_POSN                                      0x0
#define _ADCLK_CS_POSITION                                  0x0
#define _ADCLK_CS_SIZE                                      0x8
#define _ADCLK_CS_LENGTH                                    0x8
#define _ADCLK_CS_MASK                                      0xFF
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x8
#define _ADCLK_ADCS_LENGTH                                  0x8
#define _ADCLK_ADCS_MASK                                    0xFF
#define _ADCLK_CS0_POSN                                     0x0
#define _ADCLK_CS0_POSITION                                 0x0
#define _ADCLK_CS0_SIZE                                     0x1
#define _ADCLK_CS0_LENGTH                                   0x1
#define _ADCLK_CS0_MASK                                     0x1
#define _ADCLK_CS1_POSN                                     0x1
#define _ADCLK_CS1_POSITION                                 0x1
#define _ADCLK_CS1_SIZE                                     0x1
#define _ADCLK_CS1_LENGTH                                   0x1
#define _ADCLK_CS1_MASK                                     0x2
#define _ADCLK_CS2_POSN                                     0x2
#define _ADCLK_CS2_POSITION                                 0x2
#define _ADCLK_CS2_SIZE                                     0x1
#define _ADCLK_CS2_LENGTH                                   0x1
#define _ADCLK_CS2_MASK                                     0x4
#define _ADCLK_CS3_POSN                                     0x3
#define _ADCLK_CS3_POSITION                                 0x3
#define _ADCLK_CS3_SIZE                                     0x1
#define _ADCLK_CS3_LENGTH                                   0x1
#define _ADCLK_CS3_MASK                                     0x8
#define _ADCLK_CS4_POSN                                     0x4
#define _ADCLK_CS4_POSITION                                 0x4
#define _ADCLK_CS4_SIZE                                     0x1
#define _ADCLK_CS4_LENGTH                                   0x1
#define _ADCLK_CS4_MASK                                     0x10
#define _ADCLK_CS5_POSN                                     0x5
#define _ADCLK_CS5_POSITION                                 0x5
#define _ADCLK_CS5_SIZE                                     0x1
#define _ADCLK_CS5_LENGTH                                   0x1
#define _ADCLK_CS5_MASK                                     0x20

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x400);
#ifndef _LIB_BUILD
asm("ANSELA equ 0400h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELA0                :1;
        unsigned ANSELA1                :1;
        unsigned ANSELA2                :1;
        unsigned ANSELA3                :1;
        unsigned ANSELA4                :1;
        unsigned ANSELA5                :1;
        unsigned ANSELA6                :1;
        unsigned ANSELA7                :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x400);
// bitfield macros
#define _ANSELA_ANSELA0_POSN                                0x0
#define _ANSELA_ANSELA0_POSITION                            0x0
#define _ANSELA_ANSELA0_SIZE                                0x1
#define _ANSELA_ANSELA0_LENGTH                              0x1
#define _ANSELA_ANSELA0_MASK                                0x1
#define _ANSELA_ANSELA1_POSN                                0x1
#define _ANSELA_ANSELA1_POSITION                            0x1
#define _ANSELA_ANSELA1_SIZE                                0x1
#define _ANSELA_ANSELA1_LENGTH                              0x1
#define _ANSELA_ANSELA1_MASK                                0x2
#define _ANSELA_ANSELA2_POSN                                0x2
#define _ANSELA_ANSELA2_POSITION                            0x2
#define _ANSELA_ANSELA2_SIZE                                0x1
#define _ANSELA_ANSELA2_LENGTH                              0x1
#define _ANSELA_ANSELA2_MASK                                0x4
#define _ANSELA_ANSELA3_POSN                                0x3
#define _ANSELA_ANSELA3_POSITION                            0x3
#define _ANSELA_ANSELA3_SIZE                                0x1
#define _ANSELA_ANSELA3_LENGTH                              0x1
#define _ANSELA_ANSELA3_MASK                                0x8
#define _ANSELA_ANSELA4_POSN                                0x4
#define _ANSELA_ANSELA4_POSITION                            0x4
#define _ANSELA_ANSELA4_SIZE                                0x1
#define _ANSELA_ANSELA4_LENGTH                              0x1
#define _ANSELA_ANSELA4_MASK                                0x10
#define _ANSELA_ANSELA5_POSN                                0x5
#define _ANSELA_ANSELA5_POSITION                            0x5
#define _ANSELA_ANSELA5_SIZE                                0x1
#define _ANSELA_ANSELA5_LENGTH                              0x1
#define _ANSELA_ANSELA5_MASK                                0x20
#define _ANSELA_ANSELA6_POSN                                0x6
#define _ANSELA_ANSELA6_POSITION                            0x6
#define _ANSELA_ANSELA6_SIZE                                0x1
#define _ANSELA_ANSELA6_LENGTH                              0x1
#define _ANSELA_ANSELA6_MASK                                0x40
#define _ANSELA_ANSELA7_POSN                                0x7
#define _ANSELA_ANSELA7_POSITION                            0x7
#define _ANSELA_ANSELA7_SIZE                                0x1
#define _ANSELA_ANSELA7_LENGTH                              0x1
#define _ANSELA_ANSELA7_MASK                                0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x401);
#ifndef _LIB_BUILD
asm("WPUA equ 0401h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x401);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x402);
#ifndef _LIB_BUILD
asm("ODCONA equ 0402h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x402);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x403);
#ifndef _LIB_BUILD
asm("SLRCONA equ 0403h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x403);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x404);
#ifndef _LIB_BUILD
asm("INLVLA equ 0404h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x404);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x405);
#ifndef _LIB_BUILD
asm("IOCAP equ 0405h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
        unsigned IOCAP6                 :1;
        unsigned IOCAP7                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x405);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP6_POSN                                  0x6
#define _IOCAP_IOCAP6_POSITION                              0x6
#define _IOCAP_IOCAP6_SIZE                                  0x1
#define _IOCAP_IOCAP6_LENGTH                                0x1
#define _IOCAP_IOCAP6_MASK                                  0x40
#define _IOCAP_IOCAP7_POSN                                  0x7
#define _IOCAP_IOCAP7_POSITION                              0x7
#define _IOCAP_IOCAP7_SIZE                                  0x1
#define _IOCAP_IOCAP7_LENGTH                                0x1
#define _IOCAP_IOCAP7_MASK                                  0x80

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x406);
#ifndef _LIB_BUILD
asm("IOCAN equ 0406h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
        unsigned IOCAN6                 :1;
        unsigned IOCAN7                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x406);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN6_POSN                                  0x6
#define _IOCAN_IOCAN6_POSITION                              0x6
#define _IOCAN_IOCAN6_SIZE                                  0x1
#define _IOCAN_IOCAN6_LENGTH                                0x1
#define _IOCAN_IOCAN6_MASK                                  0x40
#define _IOCAN_IOCAN7_POSN                                  0x7
#define _IOCAN_IOCAN7_POSITION                              0x7
#define _IOCAN_IOCAN7_SIZE                                  0x1
#define _IOCAN_IOCAN7_LENGTH                                0x1
#define _IOCAN_IOCAN7_MASK                                  0x80

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x407);
#ifndef _LIB_BUILD
asm("IOCAF equ 0407h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
        unsigned IOCAF6                 :1;
        unsigned IOCAF7                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x407);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF6_POSN                                  0x6
#define _IOCAF_IOCAF6_POSITION                              0x6
#define _IOCAF_IOCAF6_SIZE                                  0x1
#define _IOCAF_IOCAF6_LENGTH                                0x1
#define _IOCAF_IOCAF6_MASK                                  0x40
#define _IOCAF_IOCAF7_POSN                                  0x7
#define _IOCAF_IOCAF7_POSITION                              0x7
#define _IOCAF_IOCAF7_SIZE                                  0x1
#define _IOCAF_IOCAF7_LENGTH                                0x1
#define _IOCAF_IOCAF7_MASK                                  0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0x408);
#ifndef _LIB_BUILD
asm("ANSELB equ 0408h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELB0                :1;
        unsigned ANSELB1                :1;
        unsigned ANSELB2                :1;
        unsigned ANSELB3                :1;
        unsigned ANSELB4                :1;
        unsigned ANSELB5                :1;
        unsigned ANSELB6                :1;
        unsigned ANSELB7                :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0x408);
// bitfield macros
#define _ANSELB_ANSELB0_POSN                                0x0
#define _ANSELB_ANSELB0_POSITION                            0x0
#define _ANSELB_ANSELB0_SIZE                                0x1
#define _ANSELB_ANSELB0_LENGTH                              0x1
#define _ANSELB_ANSELB0_MASK                                0x1
#define _ANSELB_ANSELB1_POSN                                0x1
#define _ANSELB_ANSELB1_POSITION                            0x1
#define _ANSELB_ANSELB1_SIZE                                0x1
#define _ANSELB_ANSELB1_LENGTH                              0x1
#define _ANSELB_ANSELB1_MASK                                0x2
#define _ANSELB_ANSELB2_POSN                                0x2
#define _ANSELB_ANSELB2_POSITION                            0x2
#define _ANSELB_ANSELB2_SIZE                                0x1
#define _ANSELB_ANSELB2_LENGTH                              0x1
#define _ANSELB_ANSELB2_MASK                                0x4
#define _ANSELB_ANSELB3_POSN                                0x3
#define _ANSELB_ANSELB3_POSITION                            0x3
#define _ANSELB_ANSELB3_SIZE                                0x1
#define _ANSELB_ANSELB3_LENGTH                              0x1
#define _ANSELB_ANSELB3_MASK                                0x8
#define _ANSELB_ANSELB4_POSN                                0x4
#define _ANSELB_ANSELB4_POSITION                            0x4
#define _ANSELB_ANSELB4_SIZE                                0x1
#define _ANSELB_ANSELB4_LENGTH                              0x1
#define _ANSELB_ANSELB4_MASK                                0x10
#define _ANSELB_ANSELB5_POSN                                0x5
#define _ANSELB_ANSELB5_POSITION                            0x5
#define _ANSELB_ANSELB5_SIZE                                0x1
#define _ANSELB_ANSELB5_LENGTH                              0x1
#define _ANSELB_ANSELB5_MASK                                0x20
#define _ANSELB_ANSELB6_POSN                                0x6
#define _ANSELB_ANSELB6_POSITION                            0x6
#define _ANSELB_ANSELB6_SIZE                                0x1
#define _ANSELB_ANSELB6_LENGTH                              0x1
#define _ANSELB_ANSELB6_MASK                                0x40
#define _ANSELB_ANSELB7_POSN                                0x7
#define _ANSELB_ANSELB7_POSITION                            0x7
#define _ANSELB_ANSELB7_SIZE                                0x1
#define _ANSELB_ANSELB7_LENGTH                              0x1
#define _ANSELB_ANSELB7_MASK                                0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0x409);
#ifndef _LIB_BUILD
asm("WPUB equ 0409h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0x409);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0x40A);
#ifndef _LIB_BUILD
asm("ODCONB equ 040Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0x40A);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0x40B);
#ifndef _LIB_BUILD
asm("SLRCONB equ 040Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0x40B);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0x40C);
#ifndef _LIB_BUILD
asm("INLVLB equ 040Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0x40C);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0x40D);
#ifndef _LIB_BUILD
asm("IOCBP equ 040Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0x40D);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0x40E);
#ifndef _LIB_BUILD
asm("IOCBN equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0x40E);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0x40F);
#ifndef _LIB_BUILD
asm("IOCBF equ 040Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0x40F);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x410);
#ifndef _LIB_BUILD
asm("ANSELC equ 0410h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELC0                :1;
        unsigned ANSELC1                :1;
        unsigned ANSELC2                :1;
        unsigned ANSELC3                :1;
        unsigned ANSELC4                :1;
        unsigned ANSELC5                :1;
        unsigned ANSELC6                :1;
        unsigned ANSELC7                :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x410);
// bitfield macros
#define _ANSELC_ANSELC0_POSN                                0x0
#define _ANSELC_ANSELC0_POSITION                            0x0
#define _ANSELC_ANSELC0_SIZE                                0x1
#define _ANSELC_ANSELC0_LENGTH                              0x1
#define _ANSELC_ANSELC0_MASK                                0x1
#define _ANSELC_ANSELC1_POSN                                0x1
#define _ANSELC_ANSELC1_POSITION                            0x1
#define _ANSELC_ANSELC1_SIZE                                0x1
#define _ANSELC_ANSELC1_LENGTH                              0x1
#define _ANSELC_ANSELC1_MASK                                0x2
#define _ANSELC_ANSELC2_POSN                                0x2
#define _ANSELC_ANSELC2_POSITION                            0x2
#define _ANSELC_ANSELC2_SIZE                                0x1
#define _ANSELC_ANSELC2_LENGTH                              0x1
#define _ANSELC_ANSELC2_MASK                                0x4
#define _ANSELC_ANSELC3_POSN                                0x3
#define _ANSELC_ANSELC3_POSITION                            0x3
#define _ANSELC_ANSELC3_SIZE                                0x1
#define _ANSELC_ANSELC3_LENGTH                              0x1
#define _ANSELC_ANSELC3_MASK                                0x8
#define _ANSELC_ANSELC4_POSN                                0x4
#define _ANSELC_ANSELC4_POSITION                            0x4
#define _ANSELC_ANSELC4_SIZE                                0x1
#define _ANSELC_ANSELC4_LENGTH                              0x1
#define _ANSELC_ANSELC4_MASK                                0x10
#define _ANSELC_ANSELC5_POSN                                0x5
#define _ANSELC_ANSELC5_POSITION                            0x5
#define _ANSELC_ANSELC5_SIZE                                0x1
#define _ANSELC_ANSELC5_LENGTH                              0x1
#define _ANSELC_ANSELC5_MASK                                0x20
#define _ANSELC_ANSELC6_POSN                                0x6
#define _ANSELC_ANSELC6_POSITION                            0x6
#define _ANSELC_ANSELC6_SIZE                                0x1
#define _ANSELC_ANSELC6_LENGTH                              0x1
#define _ANSELC_ANSELC6_MASK                                0x40
#define _ANSELC_ANSELC7_POSN                                0x7
#define _ANSELC_ANSELC7_POSITION                            0x7
#define _ANSELC_ANSELC7_SIZE                                0x1
#define _ANSELC_ANSELC7_LENGTH                              0x1
#define _ANSELC_ANSELC7_MASK                                0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x411);
#ifndef _LIB_BUILD
asm("WPUC equ 0411h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x411);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x412);
#ifndef _LIB_BUILD
asm("ODCONC equ 0412h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x412);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x413);
#ifndef _LIB_BUILD
asm("SLRCONC equ 0413h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x413);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x414);
#ifndef _LIB_BUILD
asm("INLVLC equ 0414h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x414);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x415);
#ifndef _LIB_BUILD
asm("IOCCP equ 0415h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x415);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x416);
#ifndef _LIB_BUILD
asm("IOCCN equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x416);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x417);
#ifndef _LIB_BUILD
asm("IOCCF equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x417);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: ANSELE
#define ANSELE ANSELE
extern volatile unsigned char           ANSELE              __at(0x420);
#ifndef _LIB_BUILD
asm("ANSELE equ 0420h");
#endif

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0x421);
#ifndef _LIB_BUILD
asm("WPUE equ 0421h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned WPUE3                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0x421);
// bitfield macros
#define _WPUE_WPUE3_POSN                                    0x3
#define _WPUE_WPUE3_POSITION                                0x3
#define _WPUE_WPUE3_SIZE                                    0x1
#define _WPUE_WPUE3_LENGTH                                  0x1
#define _WPUE_WPUE3_MASK                                    0x8

// Register: ODCONE
#define ODCONE ODCONE
extern volatile unsigned char           ODCONE              __at(0x422);
#ifndef _LIB_BUILD
asm("ODCONE equ 0422h");
#endif

// Register: SLRCONE
#define SLRCONE SLRCONE
extern volatile unsigned char           SLRCONE             __at(0x423);
#ifndef _LIB_BUILD
asm("SLRCONE equ 0423h");
#endif

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0x424);
#ifndef _LIB_BUILD
asm("INLVLE equ 0424h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned INLVLE3                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0x424);
// bitfield macros
#define _INLVLE_INLVLE3_POSN                                0x3
#define _INLVLE_INLVLE3_POSITION                            0x3
#define _INLVLE_INLVLE3_SIZE                                0x1
#define _INLVLE_INLVLE3_LENGTH                              0x1
#define _INLVLE_INLVLE3_MASK                                0x8

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0x425);
#ifndef _LIB_BUILD
asm("IOCEP equ 0425h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEP3                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0x425);
// bitfield macros
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0x426);
#ifndef _LIB_BUILD
asm("IOCEN equ 0426h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEN3                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0x426);
// bitfield macros
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0x427);
#ifndef _LIB_BUILD
asm("IOCEF equ 0427h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEF3                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0x427);
// bitfield macros
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8

// Register: NCO1ACC
#define NCO1ACC NCO1ACC
#ifndef __CCI__
extern volatile __uint24                NCO1ACC             __at(0x440);
#endif
#ifndef _LIB_BUILD
asm("NCO1ACC equ 0440h");
#endif

// Register: NCO1ACCL
#define NCO1ACCL NCO1ACCL
extern volatile unsigned char           NCO1ACCL            __at(0x440);
#ifndef _LIB_BUILD
asm("NCO1ACCL equ 0440h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO1ACC0               :1;
        unsigned NCO1ACC1               :1;
        unsigned NCO1ACC2               :1;
        unsigned NCO1ACC3               :1;
        unsigned NCO1ACC4               :1;
        unsigned NCO1ACC5               :1;
        unsigned NCO1ACC6               :1;
        unsigned NCO1ACC7               :1;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCLbits_t;
extern volatile NCO1ACCLbits_t NCO1ACCLbits __at(0x440);
// bitfield macros
#define _NCO1ACCL_ACC_POSN                                  0x0
#define _NCO1ACCL_ACC_POSITION                              0x0
#define _NCO1ACCL_ACC_SIZE                                  0x8
#define _NCO1ACCL_ACC_LENGTH                                0x8
#define _NCO1ACCL_ACC_MASK                                  0xFF
#define _NCO1ACCL_NCO1ACC0_POSN                             0x0
#define _NCO1ACCL_NCO1ACC0_POSITION                         0x0
#define _NCO1ACCL_NCO1ACC0_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC0_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC0_MASK                             0x1
#define _NCO1ACCL_NCO1ACC1_POSN                             0x1
#define _NCO1ACCL_NCO1ACC1_POSITION                         0x1
#define _NCO1ACCL_NCO1ACC1_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC1_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC1_MASK                             0x2
#define _NCO1ACCL_NCO1ACC2_POSN                             0x2
#define _NCO1ACCL_NCO1ACC2_POSITION                         0x2
#define _NCO1ACCL_NCO1ACC2_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC2_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC2_MASK                             0x4
#define _NCO1ACCL_NCO1ACC3_POSN                             0x3
#define _NCO1ACCL_NCO1ACC3_POSITION                         0x3
#define _NCO1ACCL_NCO1ACC3_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC3_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC3_MASK                             0x8
#define _NCO1ACCL_NCO1ACC4_POSN                             0x4
#define _NCO1ACCL_NCO1ACC4_POSITION                         0x4
#define _NCO1ACCL_NCO1ACC4_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC4_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC4_MASK                             0x10
#define _NCO1ACCL_NCO1ACC5_POSN                             0x5
#define _NCO1ACCL_NCO1ACC5_POSITION                         0x5
#define _NCO1ACCL_NCO1ACC5_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC5_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC5_MASK                             0x20
#define _NCO1ACCL_NCO1ACC6_POSN                             0x6
#define _NCO1ACCL_NCO1ACC6_POSITION                         0x6
#define _NCO1ACCL_NCO1ACC6_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC6_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC6_MASK                             0x40
#define _NCO1ACCL_NCO1ACC7_POSN                             0x7
#define _NCO1ACCL_NCO1ACC7_POSITION                         0x7
#define _NCO1ACCL_NCO1ACC7_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC7_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC7_MASK                             0x80
#define _NCO1ACCL_ACC0_POSN                                 0x0
#define _NCO1ACCL_ACC0_POSITION                             0x0
#define _NCO1ACCL_ACC0_SIZE                                 0x1
#define _NCO1ACCL_ACC0_LENGTH                               0x1
#define _NCO1ACCL_ACC0_MASK                                 0x1
#define _NCO1ACCL_ACC1_POSN                                 0x1
#define _NCO1ACCL_ACC1_POSITION                             0x1
#define _NCO1ACCL_ACC1_SIZE                                 0x1
#define _NCO1ACCL_ACC1_LENGTH                               0x1
#define _NCO1ACCL_ACC1_MASK                                 0x2
#define _NCO1ACCL_ACC2_POSN                                 0x2
#define _NCO1ACCL_ACC2_POSITION                             0x2
#define _NCO1ACCL_ACC2_SIZE                                 0x1
#define _NCO1ACCL_ACC2_LENGTH                               0x1
#define _NCO1ACCL_ACC2_MASK                                 0x4
#define _NCO1ACCL_ACC3_POSN                                 0x3
#define _NCO1ACCL_ACC3_POSITION                             0x3
#define _NCO1ACCL_ACC3_SIZE                                 0x1
#define _NCO1ACCL_ACC3_LENGTH                               0x1
#define _NCO1ACCL_ACC3_MASK                                 0x8
#define _NCO1ACCL_ACC4_POSN                                 0x4
#define _NCO1ACCL_ACC4_POSITION                             0x4
#define _NCO1ACCL_ACC4_SIZE                                 0x1
#define _NCO1ACCL_ACC4_LENGTH                               0x1
#define _NCO1ACCL_ACC4_MASK                                 0x10
#define _NCO1ACCL_ACC5_POSN                                 0x5
#define _NCO1ACCL_ACC5_POSITION                             0x5
#define _NCO1ACCL_ACC5_SIZE                                 0x1
#define _NCO1ACCL_ACC5_LENGTH                               0x1
#define _NCO1ACCL_ACC5_MASK                                 0x20
#define _NCO1ACCL_ACC6_POSN                                 0x6
#define _NCO1ACCL_ACC6_POSITION                             0x6
#define _NCO1ACCL_ACC6_SIZE                                 0x1
#define _NCO1ACCL_ACC6_LENGTH                               0x1
#define _NCO1ACCL_ACC6_MASK                                 0x40
#define _NCO1ACCL_ACC7_POSN                                 0x7
#define _NCO1ACCL_ACC7_POSITION                             0x7
#define _NCO1ACCL_ACC7_SIZE                                 0x1
#define _NCO1ACCL_ACC7_LENGTH                               0x1
#define _NCO1ACCL_ACC7_MASK                                 0x80
#define _NCO1ACCL_NCO1ACC_POSN                              0x0
#define _NCO1ACCL_NCO1ACC_POSITION                          0x0
#define _NCO1ACCL_NCO1ACC_SIZE                              0x8
#define _NCO1ACCL_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCL_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCH
#define NCO1ACCH NCO1ACCH
extern volatile unsigned char           NCO1ACCH            __at(0x441);
#ifndef _LIB_BUILD
asm("NCO1ACCH equ 0441h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO1ACC8               :1;
        unsigned NCO1ACC9               :1;
        unsigned NCO1ACC10              :1;
        unsigned NCO1ACC11              :1;
        unsigned NCO1ACC12              :1;
        unsigned NCO1ACC13              :1;
        unsigned NCO1ACC14              :1;
        unsigned NCO1ACC15              :1;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCHbits_t;
extern volatile NCO1ACCHbits_t NCO1ACCHbits __at(0x441);
// bitfield macros
#define _NCO1ACCH_ACC_POSN                                  0x0
#define _NCO1ACCH_ACC_POSITION                              0x0
#define _NCO1ACCH_ACC_SIZE                                  0x8
#define _NCO1ACCH_ACC_LENGTH                                0x8
#define _NCO1ACCH_ACC_MASK                                  0xFF
#define _NCO1ACCH_NCO1ACC8_POSN                             0x0
#define _NCO1ACCH_NCO1ACC8_POSITION                         0x0
#define _NCO1ACCH_NCO1ACC8_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC8_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC8_MASK                             0x1
#define _NCO1ACCH_NCO1ACC9_POSN                             0x1
#define _NCO1ACCH_NCO1ACC9_POSITION                         0x1
#define _NCO1ACCH_NCO1ACC9_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC9_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC9_MASK                             0x2
#define _NCO1ACCH_NCO1ACC10_POSN                            0x2
#define _NCO1ACCH_NCO1ACC10_POSITION                        0x2
#define _NCO1ACCH_NCO1ACC10_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC10_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC10_MASK                            0x4
#define _NCO1ACCH_NCO1ACC11_POSN                            0x3
#define _NCO1ACCH_NCO1ACC11_POSITION                        0x3
#define _NCO1ACCH_NCO1ACC11_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC11_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC11_MASK                            0x8
#define _NCO1ACCH_NCO1ACC12_POSN                            0x4
#define _NCO1ACCH_NCO1ACC12_POSITION                        0x4
#define _NCO1ACCH_NCO1ACC12_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC12_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC12_MASK                            0x10
#define _NCO1ACCH_NCO1ACC13_POSN                            0x5
#define _NCO1ACCH_NCO1ACC13_POSITION                        0x5
#define _NCO1ACCH_NCO1ACC13_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC13_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC13_MASK                            0x20
#define _NCO1ACCH_NCO1ACC14_POSN                            0x6
#define _NCO1ACCH_NCO1ACC14_POSITION                        0x6
#define _NCO1ACCH_NCO1ACC14_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC14_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC14_MASK                            0x40
#define _NCO1ACCH_NCO1ACC15_POSN                            0x7
#define _NCO1ACCH_NCO1ACC15_POSITION                        0x7
#define _NCO1ACCH_NCO1ACC15_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC15_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC15_MASK                            0x80
#define _NCO1ACCH_ACC8_POSN                                 0x0
#define _NCO1ACCH_ACC8_POSITION                             0x0
#define _NCO1ACCH_ACC8_SIZE                                 0x1
#define _NCO1ACCH_ACC8_LENGTH                               0x1
#define _NCO1ACCH_ACC8_MASK                                 0x1
#define _NCO1ACCH_ACC9_POSN                                 0x1
#define _NCO1ACCH_ACC9_POSITION                             0x1
#define _NCO1ACCH_ACC9_SIZE                                 0x1
#define _NCO1ACCH_ACC9_LENGTH                               0x1
#define _NCO1ACCH_ACC9_MASK                                 0x2
#define _NCO1ACCH_ACC10_POSN                                0x2
#define _NCO1ACCH_ACC10_POSITION                            0x2
#define _NCO1ACCH_ACC10_SIZE                                0x1
#define _NCO1ACCH_ACC10_LENGTH                              0x1
#define _NCO1ACCH_ACC10_MASK                                0x4
#define _NCO1ACCH_ACC11_POSN                                0x3
#define _NCO1ACCH_ACC11_POSITION                            0x3
#define _NCO1ACCH_ACC11_SIZE                                0x1
#define _NCO1ACCH_ACC11_LENGTH                              0x1
#define _NCO1ACCH_ACC11_MASK                                0x8
#define _NCO1ACCH_ACC12_POSN                                0x4
#define _NCO1ACCH_ACC12_POSITION                            0x4
#define _NCO1ACCH_ACC12_SIZE                                0x1
#define _NCO1ACCH_ACC12_LENGTH                              0x1
#define _NCO1ACCH_ACC12_MASK                                0x10
#define _NCO1ACCH_ACC13_POSN                                0x5
#define _NCO1ACCH_ACC13_POSITION                            0x5
#define _NCO1ACCH_ACC13_SIZE                                0x1
#define _NCO1ACCH_ACC13_LENGTH                              0x1
#define _NCO1ACCH_ACC13_MASK                                0x20
#define _NCO1ACCH_ACC14_POSN                                0x6
#define _NCO1ACCH_ACC14_POSITION                            0x6
#define _NCO1ACCH_ACC14_SIZE                                0x1
#define _NCO1ACCH_ACC14_LENGTH                              0x1
#define _NCO1ACCH_ACC14_MASK                                0x40
#define _NCO1ACCH_ACC15_POSN                                0x7
#define _NCO1ACCH_ACC15_POSITION                            0x7
#define _NCO1ACCH_ACC15_SIZE                                0x1
#define _NCO1ACCH_ACC15_LENGTH                              0x1
#define _NCO1ACCH_ACC15_MASK                                0x80
#define _NCO1ACCH_NCO1ACC_POSN                              0x0
#define _NCO1ACCH_NCO1ACC_POSITION                          0x0
#define _NCO1ACCH_NCO1ACC_SIZE                              0x8
#define _NCO1ACCH_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCH_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCU
#define NCO1ACCU NCO1ACCU
extern volatile unsigned char           NCO1ACCU            __at(0x442);
#ifndef _LIB_BUILD
asm("NCO1ACCU equ 0442h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :4;
    };
    struct {
        unsigned NCO1ACC16              :1;
        unsigned NCO1ACC17              :1;
        unsigned NCO1ACC18              :1;
        unsigned NCO1ACC19              :1;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
    };
    struct {
        unsigned NCO1ACC                :4;
    };
} NCO1ACCUbits_t;
extern volatile NCO1ACCUbits_t NCO1ACCUbits __at(0x442);
// bitfield macros
#define _NCO1ACCU_ACC_POSN                                  0x0
#define _NCO1ACCU_ACC_POSITION                              0x0
#define _NCO1ACCU_ACC_SIZE                                  0x4
#define _NCO1ACCU_ACC_LENGTH                                0x4
#define _NCO1ACCU_ACC_MASK                                  0xF
#define _NCO1ACCU_NCO1ACC16_POSN                            0x0
#define _NCO1ACCU_NCO1ACC16_POSITION                        0x0
#define _NCO1ACCU_NCO1ACC16_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC16_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC16_MASK                            0x1
#define _NCO1ACCU_NCO1ACC17_POSN                            0x1
#define _NCO1ACCU_NCO1ACC17_POSITION                        0x1
#define _NCO1ACCU_NCO1ACC17_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC17_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC17_MASK                            0x2
#define _NCO1ACCU_NCO1ACC18_POSN                            0x2
#define _NCO1ACCU_NCO1ACC18_POSITION                        0x2
#define _NCO1ACCU_NCO1ACC18_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC18_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC18_MASK                            0x4
#define _NCO1ACCU_NCO1ACC19_POSN                            0x3
#define _NCO1ACCU_NCO1ACC19_POSITION                        0x3
#define _NCO1ACCU_NCO1ACC19_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC19_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC19_MASK                            0x8
#define _NCO1ACCU_ACC16_POSN                                0x0
#define _NCO1ACCU_ACC16_POSITION                            0x0
#define _NCO1ACCU_ACC16_SIZE                                0x1
#define _NCO1ACCU_ACC16_LENGTH                              0x1
#define _NCO1ACCU_ACC16_MASK                                0x1
#define _NCO1ACCU_ACC17_POSN                                0x1
#define _NCO1ACCU_ACC17_POSITION                            0x1
#define _NCO1ACCU_ACC17_SIZE                                0x1
#define _NCO1ACCU_ACC17_LENGTH                              0x1
#define _NCO1ACCU_ACC17_MASK                                0x2
#define _NCO1ACCU_ACC18_POSN                                0x2
#define _NCO1ACCU_ACC18_POSITION                            0x2
#define _NCO1ACCU_ACC18_SIZE                                0x1
#define _NCO1ACCU_ACC18_LENGTH                              0x1
#define _NCO1ACCU_ACC18_MASK                                0x4
#define _NCO1ACCU_ACC19_POSN                                0x3
#define _NCO1ACCU_ACC19_POSITION                            0x3
#define _NCO1ACCU_ACC19_SIZE                                0x1
#define _NCO1ACCU_ACC19_LENGTH                              0x1
#define _NCO1ACCU_ACC19_MASK                                0x8
#define _NCO1ACCU_NCO1ACC_POSN                              0x0
#define _NCO1ACCU_NCO1ACC_POSITION                          0x0
#define _NCO1ACCU_NCO1ACC_SIZE                              0x4
#define _NCO1ACCU_NCO1ACC_LENGTH                            0x4
#define _NCO1ACCU_NCO1ACC_MASK                              0xF

// Register: NCO1INC
#define NCO1INC NCO1INC
#ifndef __CCI__
extern volatile __uint24                NCO1INC             __at(0x443);
#endif
#ifndef _LIB_BUILD
asm("NCO1INC equ 0443h");
#endif

// Register: NCO1INCL
#define NCO1INCL NCO1INCL
extern volatile unsigned char           NCO1INCL            __at(0x443);
#ifndef _LIB_BUILD
asm("NCO1INCL equ 0443h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO1INC0               :1;
        unsigned NCO1INC1               :1;
        unsigned NCO1INC2               :1;
        unsigned NCO1INC3               :1;
        unsigned NCO1INC4               :1;
        unsigned NCO1INC5               :1;
        unsigned NCO1INC6               :1;
        unsigned NCO1INC7               :1;
    };
    struct {
        unsigned INC0                   :1;
        unsigned INC1                   :1;
        unsigned INC2                   :1;
        unsigned INC3                   :1;
        unsigned INC4                   :1;
        unsigned INC5                   :1;
        unsigned INC6                   :1;
        unsigned INC7                   :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCLbits_t;
extern volatile NCO1INCLbits_t NCO1INCLbits __at(0x443);
// bitfield macros
#define _NCO1INCL_INC_POSN                                  0x0
#define _NCO1INCL_INC_POSITION                              0x0
#define _NCO1INCL_INC_SIZE                                  0x8
#define _NCO1INCL_INC_LENGTH                                0x8
#define _NCO1INCL_INC_MASK                                  0xFF
#define _NCO1INCL_NCO1INC0_POSN                             0x0
#define _NCO1INCL_NCO1INC0_POSITION                         0x0
#define _NCO1INCL_NCO1INC0_SIZE                             0x1
#define _NCO1INCL_NCO1INC0_LENGTH                           0x1
#define _NCO1INCL_NCO1INC0_MASK                             0x1
#define _NCO1INCL_NCO1INC1_POSN                             0x1
#define _NCO1INCL_NCO1INC1_POSITION                         0x1
#define _NCO1INCL_NCO1INC1_SIZE                             0x1
#define _NCO1INCL_NCO1INC1_LENGTH                           0x1
#define _NCO1INCL_NCO1INC1_MASK                             0x2
#define _NCO1INCL_NCO1INC2_POSN                             0x2
#define _NCO1INCL_NCO1INC2_POSITION                         0x2
#define _NCO1INCL_NCO1INC2_SIZE                             0x1
#define _NCO1INCL_NCO1INC2_LENGTH                           0x1
#define _NCO1INCL_NCO1INC2_MASK                             0x4
#define _NCO1INCL_NCO1INC3_POSN                             0x3
#define _NCO1INCL_NCO1INC3_POSITION                         0x3
#define _NCO1INCL_NCO1INC3_SIZE                             0x1
#define _NCO1INCL_NCO1INC3_LENGTH                           0x1
#define _NCO1INCL_NCO1INC3_MASK                             0x8
#define _NCO1INCL_NCO1INC4_POSN                             0x4
#define _NCO1INCL_NCO1INC4_POSITION                         0x4
#define _NCO1INCL_NCO1INC4_SIZE                             0x1
#define _NCO1INCL_NCO1INC4_LENGTH                           0x1
#define _NCO1INCL_NCO1INC4_MASK                             0x10
#define _NCO1INCL_NCO1INC5_POSN                             0x5
#define _NCO1INCL_NCO1INC5_POSITION                         0x5
#define _NCO1INCL_NCO1INC5_SIZE                             0x1
#define _NCO1INCL_NCO1INC5_LENGTH                           0x1
#define _NCO1INCL_NCO1INC5_MASK                             0x20
#define _NCO1INCL_NCO1INC6_POSN                             0x6
#define _NCO1INCL_NCO1INC6_POSITION                         0x6
#define _NCO1INCL_NCO1INC6_SIZE                             0x1
#define _NCO1INCL_NCO1INC6_LENGTH                           0x1
#define _NCO1INCL_NCO1INC6_MASK                             0x40
#define _NCO1INCL_NCO1INC7_POSN                             0x7
#define _NCO1INCL_NCO1INC7_POSITION                         0x7
#define _NCO1INCL_NCO1INC7_SIZE                             0x1
#define _NCO1INCL_NCO1INC7_LENGTH                           0x1
#define _NCO1INCL_NCO1INC7_MASK                             0x80
#define _NCO1INCL_INC0_POSN                                 0x0
#define _NCO1INCL_INC0_POSITION                             0x0
#define _NCO1INCL_INC0_SIZE                                 0x1
#define _NCO1INCL_INC0_LENGTH                               0x1
#define _NCO1INCL_INC0_MASK                                 0x1
#define _NCO1INCL_INC1_POSN                                 0x1
#define _NCO1INCL_INC1_POSITION                             0x1
#define _NCO1INCL_INC1_SIZE                                 0x1
#define _NCO1INCL_INC1_LENGTH                               0x1
#define _NCO1INCL_INC1_MASK                                 0x2
#define _NCO1INCL_INC2_POSN                                 0x2
#define _NCO1INCL_INC2_POSITION                             0x2
#define _NCO1INCL_INC2_SIZE                                 0x1
#define _NCO1INCL_INC2_LENGTH                               0x1
#define _NCO1INCL_INC2_MASK                                 0x4
#define _NCO1INCL_INC3_POSN                                 0x3
#define _NCO1INCL_INC3_POSITION                             0x3
#define _NCO1INCL_INC3_SIZE                                 0x1
#define _NCO1INCL_INC3_LENGTH                               0x1
#define _NCO1INCL_INC3_MASK                                 0x8
#define _NCO1INCL_INC4_POSN                                 0x4
#define _NCO1INCL_INC4_POSITION                             0x4
#define _NCO1INCL_INC4_SIZE                                 0x1
#define _NCO1INCL_INC4_LENGTH                               0x1
#define _NCO1INCL_INC4_MASK                                 0x10
#define _NCO1INCL_INC5_POSN                                 0x5
#define _NCO1INCL_INC5_POSITION                             0x5
#define _NCO1INCL_INC5_SIZE                                 0x1
#define _NCO1INCL_INC5_LENGTH                               0x1
#define _NCO1INCL_INC5_MASK                                 0x20
#define _NCO1INCL_INC6_POSN                                 0x6
#define _NCO1INCL_INC6_POSITION                             0x6
#define _NCO1INCL_INC6_SIZE                                 0x1
#define _NCO1INCL_INC6_LENGTH                               0x1
#define _NCO1INCL_INC6_MASK                                 0x40
#define _NCO1INCL_INC7_POSN                                 0x7
#define _NCO1INCL_INC7_POSITION                             0x7
#define _NCO1INCL_INC7_SIZE                                 0x1
#define _NCO1INCL_INC7_LENGTH                               0x1
#define _NCO1INCL_INC7_MASK                                 0x80
#define _NCO1INCL_NCO1INC_POSN                              0x0
#define _NCO1INCL_NCO1INC_POSITION                          0x0
#define _NCO1INCL_NCO1INC_SIZE                              0x8
#define _NCO1INCL_NCO1INC_LENGTH                            0x8
#define _NCO1INCL_NCO1INC_MASK                              0xFF

// Register: NCO1INCH
#define NCO1INCH NCO1INCH
extern volatile unsigned char           NCO1INCH            __at(0x444);
#ifndef _LIB_BUILD
asm("NCO1INCH equ 0444h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO1INC8               :1;
        unsigned NCO1INC9               :1;
        unsigned NCO1INC10              :1;
        unsigned NCO1INC11              :1;
        unsigned NCO1INC12              :1;
        unsigned NCO1INC13              :1;
        unsigned NCO1INC14              :1;
        unsigned NCO1INC15              :1;
    };
    struct {
        unsigned INC8                   :1;
        unsigned INC9                   :1;
        unsigned INC10                  :1;
        unsigned INC11                  :1;
        unsigned INC12                  :1;
        unsigned INC13                  :1;
        unsigned INC14                  :1;
        unsigned INC15                  :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCHbits_t;
extern volatile NCO1INCHbits_t NCO1INCHbits __at(0x444);
// bitfield macros
#define _NCO1INCH_INC_POSN                                  0x0
#define _NCO1INCH_INC_POSITION                              0x0
#define _NCO1INCH_INC_SIZE                                  0x8
#define _NCO1INCH_INC_LENGTH                                0x8
#define _NCO1INCH_INC_MASK                                  0xFF
#define _NCO1INCH_NCO1INC8_POSN                             0x0
#define _NCO1INCH_NCO1INC8_POSITION                         0x0
#define _NCO1INCH_NCO1INC8_SIZE                             0x1
#define _NCO1INCH_NCO1INC8_LENGTH                           0x1
#define _NCO1INCH_NCO1INC8_MASK                             0x1
#define _NCO1INCH_NCO1INC9_POSN                             0x1
#define _NCO1INCH_NCO1INC9_POSITION                         0x1
#define _NCO1INCH_NCO1INC9_SIZE                             0x1
#define _NCO1INCH_NCO1INC9_LENGTH                           0x1
#define _NCO1INCH_NCO1INC9_MASK                             0x2
#define _NCO1INCH_NCO1INC10_POSN                            0x2
#define _NCO1INCH_NCO1INC10_POSITION                        0x2
#define _NCO1INCH_NCO1INC10_SIZE                            0x1
#define _NCO1INCH_NCO1INC10_LENGTH                          0x1
#define _NCO1INCH_NCO1INC10_MASK                            0x4
#define _NCO1INCH_NCO1INC11_POSN                            0x3
#define _NCO1INCH_NCO1INC11_POSITION                        0x3
#define _NCO1INCH_NCO1INC11_SIZE                            0x1
#define _NCO1INCH_NCO1INC11_LENGTH                          0x1
#define _NCO1INCH_NCO1INC11_MASK                            0x8
#define _NCO1INCH_NCO1INC12_POSN                            0x4
#define _NCO1INCH_NCO1INC12_POSITION                        0x4
#define _NCO1INCH_NCO1INC12_SIZE                            0x1
#define _NCO1INCH_NCO1INC12_LENGTH                          0x1
#define _NCO1INCH_NCO1INC12_MASK                            0x10
#define _NCO1INCH_NCO1INC13_POSN                            0x5
#define _NCO1INCH_NCO1INC13_POSITION                        0x5
#define _NCO1INCH_NCO1INC13_SIZE                            0x1
#define _NCO1INCH_NCO1INC13_LENGTH                          0x1
#define _NCO1INCH_NCO1INC13_MASK                            0x20
#define _NCO1INCH_NCO1INC14_POSN                            0x6
#define _NCO1INCH_NCO1INC14_POSITION                        0x6
#define _NCO1INCH_NCO1INC14_SIZE                            0x1
#define _NCO1INCH_NCO1INC14_LENGTH                          0x1
#define _NCO1INCH_NCO1INC14_MASK                            0x40
#define _NCO1INCH_NCO1INC15_POSN                            0x7
#define _NCO1INCH_NCO1INC15_POSITION                        0x7
#define _NCO1INCH_NCO1INC15_SIZE                            0x1
#define _NCO1INCH_NCO1INC15_LENGTH                          0x1
#define _NCO1INCH_NCO1INC15_MASK                            0x80
#define _NCO1INCH_INC8_POSN                                 0x0
#define _NCO1INCH_INC8_POSITION                             0x0
#define _NCO1INCH_INC8_SIZE                                 0x1
#define _NCO1INCH_INC8_LENGTH                               0x1
#define _NCO1INCH_INC8_MASK                                 0x1
#define _NCO1INCH_INC9_POSN                                 0x1
#define _NCO1INCH_INC9_POSITION                             0x1
#define _NCO1INCH_INC9_SIZE                                 0x1
#define _NCO1INCH_INC9_LENGTH                               0x1
#define _NCO1INCH_INC9_MASK                                 0x2
#define _NCO1INCH_INC10_POSN                                0x2
#define _NCO1INCH_INC10_POSITION                            0x2
#define _NCO1INCH_INC10_SIZE                                0x1
#define _NCO1INCH_INC10_LENGTH                              0x1
#define _NCO1INCH_INC10_MASK                                0x4
#define _NCO1INCH_INC11_POSN                                0x3
#define _NCO1INCH_INC11_POSITION                            0x3
#define _NCO1INCH_INC11_SIZE                                0x1
#define _NCO1INCH_INC11_LENGTH                              0x1
#define _NCO1INCH_INC11_MASK                                0x8
#define _NCO1INCH_INC12_POSN                                0x4
#define _NCO1INCH_INC12_POSITION                            0x4
#define _NCO1INCH_INC12_SIZE                                0x1
#define _NCO1INCH_INC12_LENGTH                              0x1
#define _NCO1INCH_INC12_MASK                                0x10
#define _NCO1INCH_INC13_POSN                                0x5
#define _NCO1INCH_INC13_POSITION                            0x5
#define _NCO1INCH_INC13_SIZE                                0x1
#define _NCO1INCH_INC13_LENGTH                              0x1
#define _NCO1INCH_INC13_MASK                                0x20
#define _NCO1INCH_INC14_POSN                                0x6
#define _NCO1INCH_INC14_POSITION                            0x6
#define _NCO1INCH_INC14_SIZE                                0x1
#define _NCO1INCH_INC14_LENGTH                              0x1
#define _NCO1INCH_INC14_MASK                                0x40
#define _NCO1INCH_INC15_POSN                                0x7
#define _NCO1INCH_INC15_POSITION                            0x7
#define _NCO1INCH_INC15_SIZE                                0x1
#define _NCO1INCH_INC15_LENGTH                              0x1
#define _NCO1INCH_INC15_MASK                                0x80
#define _NCO1INCH_NCO1INC_POSN                              0x0
#define _NCO1INCH_NCO1INC_POSITION                          0x0
#define _NCO1INCH_NCO1INC_SIZE                              0x8
#define _NCO1INCH_NCO1INC_LENGTH                            0x8
#define _NCO1INCH_NCO1INC_MASK                              0xFF

// Register: NCO1INCU
#define NCO1INCU NCO1INCU
extern volatile unsigned char           NCO1INCU            __at(0x445);
#ifndef _LIB_BUILD
asm("NCO1INCU equ 0445h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :4;
    };
    struct {
        unsigned NCO1INC16              :1;
        unsigned NCO1INC17              :1;
        unsigned NCO1INC18              :1;
        unsigned NCO1INC19              :1;
    };
    struct {
        unsigned INC16                  :1;
        unsigned INC17                  :1;
        unsigned INC18                  :1;
        unsigned INC19                  :1;
    };
    struct {
        unsigned NCO1INC                :4;
    };
} NCO1INCUbits_t;
extern volatile NCO1INCUbits_t NCO1INCUbits __at(0x445);
// bitfield macros
#define _NCO1INCU_INC_POSN                                  0x0
#define _NCO1INCU_INC_POSITION                              0x0
#define _NCO1INCU_INC_SIZE                                  0x4
#define _NCO1INCU_INC_LENGTH                                0x4
#define _NCO1INCU_INC_MASK                                  0xF
#define _NCO1INCU_NCO1INC16_POSN                            0x0
#define _NCO1INCU_NCO1INC16_POSITION                        0x0
#define _NCO1INCU_NCO1INC16_SIZE                            0x1
#define _NCO1INCU_NCO1INC16_LENGTH                          0x1
#define _NCO1INCU_NCO1INC16_MASK                            0x1
#define _NCO1INCU_NCO1INC17_POSN                            0x1
#define _NCO1INCU_NCO1INC17_POSITION                        0x1
#define _NCO1INCU_NCO1INC17_SIZE                            0x1
#define _NCO1INCU_NCO1INC17_LENGTH                          0x1
#define _NCO1INCU_NCO1INC17_MASK                            0x2
#define _NCO1INCU_NCO1INC18_POSN                            0x2
#define _NCO1INCU_NCO1INC18_POSITION                        0x2
#define _NCO1INCU_NCO1INC18_SIZE                            0x1
#define _NCO1INCU_NCO1INC18_LENGTH                          0x1
#define _NCO1INCU_NCO1INC18_MASK                            0x4
#define _NCO1INCU_NCO1INC19_POSN                            0x3
#define _NCO1INCU_NCO1INC19_POSITION                        0x3
#define _NCO1INCU_NCO1INC19_SIZE                            0x1
#define _NCO1INCU_NCO1INC19_LENGTH                          0x1
#define _NCO1INCU_NCO1INC19_MASK                            0x8
#define _NCO1INCU_INC16_POSN                                0x0
#define _NCO1INCU_INC16_POSITION                            0x0
#define _NCO1INCU_INC16_SIZE                                0x1
#define _NCO1INCU_INC16_LENGTH                              0x1
#define _NCO1INCU_INC16_MASK                                0x1
#define _NCO1INCU_INC17_POSN                                0x1
#define _NCO1INCU_INC17_POSITION                            0x1
#define _NCO1INCU_INC17_SIZE                                0x1
#define _NCO1INCU_INC17_LENGTH                              0x1
#define _NCO1INCU_INC17_MASK                                0x2
#define _NCO1INCU_INC18_POSN                                0x2
#define _NCO1INCU_INC18_POSITION                            0x2
#define _NCO1INCU_INC18_SIZE                                0x1
#define _NCO1INCU_INC18_LENGTH                              0x1
#define _NCO1INCU_INC18_MASK                                0x4
#define _NCO1INCU_INC19_POSN                                0x3
#define _NCO1INCU_INC19_POSITION                            0x3
#define _NCO1INCU_INC19_SIZE                                0x1
#define _NCO1INCU_INC19_LENGTH                              0x1
#define _NCO1INCU_INC19_MASK                                0x8
#define _NCO1INCU_NCO1INC_POSN                              0x0
#define _NCO1INCU_NCO1INC_POSITION                          0x0
#define _NCO1INCU_NCO1INC_SIZE                              0x4
#define _NCO1INCU_NCO1INC_LENGTH                            0x4
#define _NCO1INCU_NCO1INC_MASK                              0xF

// Register: NCO1CON
#define NCO1CON NCO1CON
extern volatile unsigned char           NCO1CON             __at(0x446);
#ifndef _LIB_BUILD
asm("NCO1CON equ 0446h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PFM                    :1;
        unsigned                        :3;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned NCO1PFM                :1;
        unsigned                        :3;
        unsigned NCO1POL                :1;
        unsigned NCO1OUT                :1;
        unsigned                        :1;
        unsigned NCO1EN                 :1;
    };
} NCO1CONbits_t;
extern volatile NCO1CONbits_t NCO1CONbits __at(0x446);
// bitfield macros
#define _NCO1CON_PFM_POSN                                   0x0
#define _NCO1CON_PFM_POSITION                               0x0
#define _NCO1CON_PFM_SIZE                                   0x1
#define _NCO1CON_PFM_LENGTH                                 0x1
#define _NCO1CON_PFM_MASK                                   0x1
#define _NCO1CON_POL_POSN                                   0x4
#define _NCO1CON_POL_POSITION                               0x4
#define _NCO1CON_POL_SIZE                                   0x1
#define _NCO1CON_POL_LENGTH                                 0x1
#define _NCO1CON_POL_MASK                                   0x10
#define _NCO1CON_OUT_POSN                                   0x5
#define _NCO1CON_OUT_POSITION                               0x5
#define _NCO1CON_OUT_SIZE                                   0x1
#define _NCO1CON_OUT_LENGTH                                 0x1
#define _NCO1CON_OUT_MASK                                   0x20
#define _NCO1CON_EN_POSN                                    0x7
#define _NCO1CON_EN_POSITION                                0x7
#define _NCO1CON_EN_SIZE                                    0x1
#define _NCO1CON_EN_LENGTH                                  0x1
#define _NCO1CON_EN_MASK                                    0x80
#define _NCO1CON_NCO1PFM_POSN                               0x0
#define _NCO1CON_NCO1PFM_POSITION                           0x0
#define _NCO1CON_NCO1PFM_SIZE                               0x1
#define _NCO1CON_NCO1PFM_LENGTH                             0x1
#define _NCO1CON_NCO1PFM_MASK                               0x1
#define _NCO1CON_NCO1POL_POSN                               0x4
#define _NCO1CON_NCO1POL_POSITION                           0x4
#define _NCO1CON_NCO1POL_SIZE                               0x1
#define _NCO1CON_NCO1POL_LENGTH                             0x1
#define _NCO1CON_NCO1POL_MASK                               0x10
#define _NCO1CON_NCO1OUT_POSN                               0x5
#define _NCO1CON_NCO1OUT_POSITION                           0x5
#define _NCO1CON_NCO1OUT_SIZE                               0x1
#define _NCO1CON_NCO1OUT_LENGTH                             0x1
#define _NCO1CON_NCO1OUT_MASK                               0x20
#define _NCO1CON_NCO1EN_POSN                                0x7
#define _NCO1CON_NCO1EN_POSITION                            0x7
#define _NCO1CON_NCO1EN_SIZE                                0x1
#define _NCO1CON_NCO1EN_LENGTH                              0x1
#define _NCO1CON_NCO1EN_MASK                                0x80

// Register: NCO1CLK
#define NCO1CLK NCO1CLK
extern volatile unsigned char           NCO1CLK             __at(0x447);
#ifndef _LIB_BUILD
asm("NCO1CLK equ 0447h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKS                    :5;
        unsigned PWS                    :3;
    };
    struct {
        unsigned CKS0                   :1;
        unsigned CKS1                   :1;
        unsigned CKS2                   :1;
        unsigned CKS3                   :1;
        unsigned CKS4                   :1;
        unsigned PWS0                   :1;
        unsigned PWS1                   :1;
        unsigned PWS2                   :1;
    };
    struct {
        unsigned NCO1CKS                :5;
        unsigned NCO1PWS                :3;
    };
    struct {
        unsigned NCO1CKS0               :1;
        unsigned NCO1CKS1               :1;
        unsigned NCO1CKS2               :1;
        unsigned NCO1CKS3               :1;
        unsigned NCO1CKS4               :1;
        unsigned NCO1PWS0               :1;
        unsigned NCO1PWS1               :1;
        unsigned NCO1PWS2               :1;
    };
} NCO1CLKbits_t;
extern volatile NCO1CLKbits_t NCO1CLKbits __at(0x447);
// bitfield macros
#define _NCO1CLK_CKS_POSN                                   0x0
#define _NCO1CLK_CKS_POSITION                               0x0
#define _NCO1CLK_CKS_SIZE                                   0x5
#define _NCO1CLK_CKS_LENGTH                                 0x5
#define _NCO1CLK_CKS_MASK                                   0x1F
#define _NCO1CLK_PWS_POSN                                   0x5
#define _NCO1CLK_PWS_POSITION                               0x5
#define _NCO1CLK_PWS_SIZE                                   0x3
#define _NCO1CLK_PWS_LENGTH                                 0x3
#define _NCO1CLK_PWS_MASK                                   0xE0
#define _NCO1CLK_CKS0_POSN                                  0x0
#define _NCO1CLK_CKS0_POSITION                              0x0
#define _NCO1CLK_CKS0_SIZE                                  0x1
#define _NCO1CLK_CKS0_LENGTH                                0x1
#define _NCO1CLK_CKS0_MASK                                  0x1
#define _NCO1CLK_CKS1_POSN                                  0x1
#define _NCO1CLK_CKS1_POSITION                              0x1
#define _NCO1CLK_CKS1_SIZE                                  0x1
#define _NCO1CLK_CKS1_LENGTH                                0x1
#define _NCO1CLK_CKS1_MASK                                  0x2
#define _NCO1CLK_CKS2_POSN                                  0x2
#define _NCO1CLK_CKS2_POSITION                              0x2
#define _NCO1CLK_CKS2_SIZE                                  0x1
#define _NCO1CLK_CKS2_LENGTH                                0x1
#define _NCO1CLK_CKS2_MASK                                  0x4
#define _NCO1CLK_CKS3_POSN                                  0x3
#define _NCO1CLK_CKS3_POSITION                              0x3
#define _NCO1CLK_CKS3_SIZE                                  0x1
#define _NCO1CLK_CKS3_LENGTH                                0x1
#define _NCO1CLK_CKS3_MASK                                  0x8
#define _NCO1CLK_CKS4_POSN                                  0x4
#define _NCO1CLK_CKS4_POSITION                              0x4
#define _NCO1CLK_CKS4_SIZE                                  0x1
#define _NCO1CLK_CKS4_LENGTH                                0x1
#define _NCO1CLK_CKS4_MASK                                  0x10
#define _NCO1CLK_PWS0_POSN                                  0x5
#define _NCO1CLK_PWS0_POSITION                              0x5
#define _NCO1CLK_PWS0_SIZE                                  0x1
#define _NCO1CLK_PWS0_LENGTH                                0x1
#define _NCO1CLK_PWS0_MASK                                  0x20
#define _NCO1CLK_PWS1_POSN                                  0x6
#define _NCO1CLK_PWS1_POSITION                              0x6
#define _NCO1CLK_PWS1_SIZE                                  0x1
#define _NCO1CLK_PWS1_LENGTH                                0x1
#define _NCO1CLK_PWS1_MASK                                  0x40
#define _NCO1CLK_PWS2_POSN                                  0x7
#define _NCO1CLK_PWS2_POSITION                              0x7
#define _NCO1CLK_PWS2_SIZE                                  0x1
#define _NCO1CLK_PWS2_LENGTH                                0x1
#define _NCO1CLK_PWS2_MASK                                  0x80
#define _NCO1CLK_NCO1CKS_POSN                               0x0
#define _NCO1CLK_NCO1CKS_POSITION                           0x0
#define _NCO1CLK_NCO1CKS_SIZE                               0x5
#define _NCO1CLK_NCO1CKS_LENGTH                             0x5
#define _NCO1CLK_NCO1CKS_MASK                               0x1F
#define _NCO1CLK_NCO1PWS_POSN                               0x5
#define _NCO1CLK_NCO1PWS_POSITION                           0x5
#define _NCO1CLK_NCO1PWS_SIZE                               0x3
#define _NCO1CLK_NCO1PWS_LENGTH                             0x3
#define _NCO1CLK_NCO1PWS_MASK                               0xE0
#define _NCO1CLK_NCO1CKS0_POSN                              0x0
#define _NCO1CLK_NCO1CKS0_POSITION                          0x0
#define _NCO1CLK_NCO1CKS0_SIZE                              0x1
#define _NCO1CLK_NCO1CKS0_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS0_MASK                              0x1
#define _NCO1CLK_NCO1CKS1_POSN                              0x1
#define _NCO1CLK_NCO1CKS1_POSITION                          0x1
#define _NCO1CLK_NCO1CKS1_SIZE                              0x1
#define _NCO1CLK_NCO1CKS1_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS1_MASK                              0x2
#define _NCO1CLK_NCO1CKS2_POSN                              0x2
#define _NCO1CLK_NCO1CKS2_POSITION                          0x2
#define _NCO1CLK_NCO1CKS2_SIZE                              0x1
#define _NCO1CLK_NCO1CKS2_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS2_MASK                              0x4
#define _NCO1CLK_NCO1CKS3_POSN                              0x3
#define _NCO1CLK_NCO1CKS3_POSITION                          0x3
#define _NCO1CLK_NCO1CKS3_SIZE                              0x1
#define _NCO1CLK_NCO1CKS3_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS3_MASK                              0x8
#define _NCO1CLK_NCO1CKS4_POSN                              0x4
#define _NCO1CLK_NCO1CKS4_POSITION                          0x4
#define _NCO1CLK_NCO1CKS4_SIZE                              0x1
#define _NCO1CLK_NCO1CKS4_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS4_MASK                              0x10
#define _NCO1CLK_NCO1PWS0_POSN                              0x5
#define _NCO1CLK_NCO1PWS0_POSITION                          0x5
#define _NCO1CLK_NCO1PWS0_SIZE                              0x1
#define _NCO1CLK_NCO1PWS0_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS0_MASK                              0x20
#define _NCO1CLK_NCO1PWS1_POSN                              0x6
#define _NCO1CLK_NCO1PWS1_POSITION                          0x6
#define _NCO1CLK_NCO1PWS1_SIZE                              0x1
#define _NCO1CLK_NCO1PWS1_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS1_MASK                              0x40
#define _NCO1CLK_NCO1PWS2_POSN                              0x7
#define _NCO1CLK_NCO1PWS2_POSITION                          0x7
#define _NCO1CLK_NCO1PWS2_SIZE                              0x1
#define _NCO1CLK_NCO1PWS2_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS2_MASK                              0x80

// Register: NCO2ACC
#define NCO2ACC NCO2ACC
#ifndef __CCI__
extern volatile __uint24                NCO2ACC             __at(0x448);
#endif
#ifndef _LIB_BUILD
asm("NCO2ACC equ 0448h");
#endif

// Register: NCO2ACCL
#define NCO2ACCL NCO2ACCL
extern volatile unsigned char           NCO2ACCL            __at(0x448);
#ifndef _LIB_BUILD
asm("NCO2ACCL equ 0448h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO2ACC0               :1;
        unsigned NCO2ACC1               :1;
        unsigned NCO2ACC2               :1;
        unsigned NCO2ACC3               :1;
        unsigned NCO2ACC4               :1;
        unsigned NCO2ACC5               :1;
        unsigned NCO2ACC6               :1;
        unsigned NCO2ACC7               :1;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
    struct {
        unsigned NCO2ACC                :8;
    };
} NCO2ACCLbits_t;
extern volatile NCO2ACCLbits_t NCO2ACCLbits __at(0x448);
// bitfield macros
#define _NCO2ACCL_ACC_POSN                                  0x0
#define _NCO2ACCL_ACC_POSITION                              0x0
#define _NCO2ACCL_ACC_SIZE                                  0x8
#define _NCO2ACCL_ACC_LENGTH                                0x8
#define _NCO2ACCL_ACC_MASK                                  0xFF
#define _NCO2ACCL_NCO2ACC0_POSN                             0x0
#define _NCO2ACCL_NCO2ACC0_POSITION                         0x0
#define _NCO2ACCL_NCO2ACC0_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC0_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC0_MASK                             0x1
#define _NCO2ACCL_NCO2ACC1_POSN                             0x1
#define _NCO2ACCL_NCO2ACC1_POSITION                         0x1
#define _NCO2ACCL_NCO2ACC1_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC1_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC1_MASK                             0x2
#define _NCO2ACCL_NCO2ACC2_POSN                             0x2
#define _NCO2ACCL_NCO2ACC2_POSITION                         0x2
#define _NCO2ACCL_NCO2ACC2_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC2_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC2_MASK                             0x4
#define _NCO2ACCL_NCO2ACC3_POSN                             0x3
#define _NCO2ACCL_NCO2ACC3_POSITION                         0x3
#define _NCO2ACCL_NCO2ACC3_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC3_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC3_MASK                             0x8
#define _NCO2ACCL_NCO2ACC4_POSN                             0x4
#define _NCO2ACCL_NCO2ACC4_POSITION                         0x4
#define _NCO2ACCL_NCO2ACC4_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC4_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC4_MASK                             0x10
#define _NCO2ACCL_NCO2ACC5_POSN                             0x5
#define _NCO2ACCL_NCO2ACC5_POSITION                         0x5
#define _NCO2ACCL_NCO2ACC5_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC5_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC5_MASK                             0x20
#define _NCO2ACCL_NCO2ACC6_POSN                             0x6
#define _NCO2ACCL_NCO2ACC6_POSITION                         0x6
#define _NCO2ACCL_NCO2ACC6_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC6_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC6_MASK                             0x40
#define _NCO2ACCL_NCO2ACC7_POSN                             0x7
#define _NCO2ACCL_NCO2ACC7_POSITION                         0x7
#define _NCO2ACCL_NCO2ACC7_SIZE                             0x1
#define _NCO2ACCL_NCO2ACC7_LENGTH                           0x1
#define _NCO2ACCL_NCO2ACC7_MASK                             0x80
#define _NCO2ACCL_ACC0_POSN                                 0x0
#define _NCO2ACCL_ACC0_POSITION                             0x0
#define _NCO2ACCL_ACC0_SIZE                                 0x1
#define _NCO2ACCL_ACC0_LENGTH                               0x1
#define _NCO2ACCL_ACC0_MASK                                 0x1
#define _NCO2ACCL_ACC1_POSN                                 0x1
#define _NCO2ACCL_ACC1_POSITION                             0x1
#define _NCO2ACCL_ACC1_SIZE                                 0x1
#define _NCO2ACCL_ACC1_LENGTH                               0x1
#define _NCO2ACCL_ACC1_MASK                                 0x2
#define _NCO2ACCL_ACC2_POSN                                 0x2
#define _NCO2ACCL_ACC2_POSITION                             0x2
#define _NCO2ACCL_ACC2_SIZE                                 0x1
#define _NCO2ACCL_ACC2_LENGTH                               0x1
#define _NCO2ACCL_ACC2_MASK                                 0x4
#define _NCO2ACCL_ACC3_POSN                                 0x3
#define _NCO2ACCL_ACC3_POSITION                             0x3
#define _NCO2ACCL_ACC3_SIZE                                 0x1
#define _NCO2ACCL_ACC3_LENGTH                               0x1
#define _NCO2ACCL_ACC3_MASK                                 0x8
#define _NCO2ACCL_ACC4_POSN                                 0x4
#define _NCO2ACCL_ACC4_POSITION                             0x4
#define _NCO2ACCL_ACC4_SIZE                                 0x1
#define _NCO2ACCL_ACC4_LENGTH                               0x1
#define _NCO2ACCL_ACC4_MASK                                 0x10
#define _NCO2ACCL_ACC5_POSN                                 0x5
#define _NCO2ACCL_ACC5_POSITION                             0x5
#define _NCO2ACCL_ACC5_SIZE                                 0x1
#define _NCO2ACCL_ACC5_LENGTH                               0x1
#define _NCO2ACCL_ACC5_MASK                                 0x20
#define _NCO2ACCL_ACC6_POSN                                 0x6
#define _NCO2ACCL_ACC6_POSITION                             0x6
#define _NCO2ACCL_ACC6_SIZE                                 0x1
#define _NCO2ACCL_ACC6_LENGTH                               0x1
#define _NCO2ACCL_ACC6_MASK                                 0x40
#define _NCO2ACCL_ACC7_POSN                                 0x7
#define _NCO2ACCL_ACC7_POSITION                             0x7
#define _NCO2ACCL_ACC7_SIZE                                 0x1
#define _NCO2ACCL_ACC7_LENGTH                               0x1
#define _NCO2ACCL_ACC7_MASK                                 0x80
#define _NCO2ACCL_NCO2ACC_POSN                              0x0
#define _NCO2ACCL_NCO2ACC_POSITION                          0x0
#define _NCO2ACCL_NCO2ACC_SIZE                              0x8
#define _NCO2ACCL_NCO2ACC_LENGTH                            0x8
#define _NCO2ACCL_NCO2ACC_MASK                              0xFF

// Register: NCO2ACCH
#define NCO2ACCH NCO2ACCH
extern volatile unsigned char           NCO2ACCH            __at(0x449);
#ifndef _LIB_BUILD
asm("NCO2ACCH equ 0449h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO2ACC8               :1;
        unsigned NCO2ACC9               :1;
        unsigned NCO2ACC10              :1;
        unsigned NCO2ACC11              :1;
        unsigned NCO2ACC12              :1;
        unsigned NCO2ACC13              :1;
        unsigned NCO2ACC14              :1;
        unsigned NCO2ACC15              :1;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
    struct {
        unsigned NCO2ACC                :8;
    };
} NCO2ACCHbits_t;
extern volatile NCO2ACCHbits_t NCO2ACCHbits __at(0x449);
// bitfield macros
#define _NCO2ACCH_ACC_POSN                                  0x0
#define _NCO2ACCH_ACC_POSITION                              0x0
#define _NCO2ACCH_ACC_SIZE                                  0x8
#define _NCO2ACCH_ACC_LENGTH                                0x8
#define _NCO2ACCH_ACC_MASK                                  0xFF
#define _NCO2ACCH_NCO2ACC8_POSN                             0x0
#define _NCO2ACCH_NCO2ACC8_POSITION                         0x0
#define _NCO2ACCH_NCO2ACC8_SIZE                             0x1
#define _NCO2ACCH_NCO2ACC8_LENGTH                           0x1
#define _NCO2ACCH_NCO2ACC8_MASK                             0x1
#define _NCO2ACCH_NCO2ACC9_POSN                             0x1
#define _NCO2ACCH_NCO2ACC9_POSITION                         0x1
#define _NCO2ACCH_NCO2ACC9_SIZE                             0x1
#define _NCO2ACCH_NCO2ACC9_LENGTH                           0x1
#define _NCO2ACCH_NCO2ACC9_MASK                             0x2
#define _NCO2ACCH_NCO2ACC10_POSN                            0x2
#define _NCO2ACCH_NCO2ACC10_POSITION                        0x2
#define _NCO2ACCH_NCO2ACC10_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC10_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC10_MASK                            0x4
#define _NCO2ACCH_NCO2ACC11_POSN                            0x3
#define _NCO2ACCH_NCO2ACC11_POSITION                        0x3
#define _NCO2ACCH_NCO2ACC11_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC11_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC11_MASK                            0x8
#define _NCO2ACCH_NCO2ACC12_POSN                            0x4
#define _NCO2ACCH_NCO2ACC12_POSITION                        0x4
#define _NCO2ACCH_NCO2ACC12_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC12_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC12_MASK                            0x10
#define _NCO2ACCH_NCO2ACC13_POSN                            0x5
#define _NCO2ACCH_NCO2ACC13_POSITION                        0x5
#define _NCO2ACCH_NCO2ACC13_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC13_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC13_MASK                            0x20
#define _NCO2ACCH_NCO2ACC14_POSN                            0x6
#define _NCO2ACCH_NCO2ACC14_POSITION                        0x6
#define _NCO2ACCH_NCO2ACC14_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC14_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC14_MASK                            0x40
#define _NCO2ACCH_NCO2ACC15_POSN                            0x7
#define _NCO2ACCH_NCO2ACC15_POSITION                        0x7
#define _NCO2ACCH_NCO2ACC15_SIZE                            0x1
#define _NCO2ACCH_NCO2ACC15_LENGTH                          0x1
#define _NCO2ACCH_NCO2ACC15_MASK                            0x80
#define _NCO2ACCH_ACC8_POSN                                 0x0
#define _NCO2ACCH_ACC8_POSITION                             0x0
#define _NCO2ACCH_ACC8_SIZE                                 0x1
#define _NCO2ACCH_ACC8_LENGTH                               0x1
#define _NCO2ACCH_ACC8_MASK                                 0x1
#define _NCO2ACCH_ACC9_POSN                                 0x1
#define _NCO2ACCH_ACC9_POSITION                             0x1
#define _NCO2ACCH_ACC9_SIZE                                 0x1
#define _NCO2ACCH_ACC9_LENGTH                               0x1
#define _NCO2ACCH_ACC9_MASK                                 0x2
#define _NCO2ACCH_ACC10_POSN                                0x2
#define _NCO2ACCH_ACC10_POSITION                            0x2
#define _NCO2ACCH_ACC10_SIZE                                0x1
#define _NCO2ACCH_ACC10_LENGTH                              0x1
#define _NCO2ACCH_ACC10_MASK                                0x4
#define _NCO2ACCH_ACC11_POSN                                0x3
#define _NCO2ACCH_ACC11_POSITION                            0x3
#define _NCO2ACCH_ACC11_SIZE                                0x1
#define _NCO2ACCH_ACC11_LENGTH                              0x1
#define _NCO2ACCH_ACC11_MASK                                0x8
#define _NCO2ACCH_ACC12_POSN                                0x4
#define _NCO2ACCH_ACC12_POSITION                            0x4
#define _NCO2ACCH_ACC12_SIZE                                0x1
#define _NCO2ACCH_ACC12_LENGTH                              0x1
#define _NCO2ACCH_ACC12_MASK                                0x10
#define _NCO2ACCH_ACC13_POSN                                0x5
#define _NCO2ACCH_ACC13_POSITION                            0x5
#define _NCO2ACCH_ACC13_SIZE                                0x1
#define _NCO2ACCH_ACC13_LENGTH                              0x1
#define _NCO2ACCH_ACC13_MASK                                0x20
#define _NCO2ACCH_ACC14_POSN                                0x6
#define _NCO2ACCH_ACC14_POSITION                            0x6
#define _NCO2ACCH_ACC14_SIZE                                0x1
#define _NCO2ACCH_ACC14_LENGTH                              0x1
#define _NCO2ACCH_ACC14_MASK                                0x40
#define _NCO2ACCH_ACC15_POSN                                0x7
#define _NCO2ACCH_ACC15_POSITION                            0x7
#define _NCO2ACCH_ACC15_SIZE                                0x1
#define _NCO2ACCH_ACC15_LENGTH                              0x1
#define _NCO2ACCH_ACC15_MASK                                0x80
#define _NCO2ACCH_NCO2ACC_POSN                              0x0
#define _NCO2ACCH_NCO2ACC_POSITION                          0x0
#define _NCO2ACCH_NCO2ACC_SIZE                              0x8
#define _NCO2ACCH_NCO2ACC_LENGTH                            0x8
#define _NCO2ACCH_NCO2ACC_MASK                              0xFF

// Register: NCO2ACCU
#define NCO2ACCU NCO2ACCU
extern volatile unsigned char           NCO2ACCU            __at(0x44A);
#ifndef _LIB_BUILD
asm("NCO2ACCU equ 044Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :4;
    };
    struct {
        unsigned NCO2ACC16              :1;
        unsigned NCO2ACC17              :1;
        unsigned NCO2ACC18              :1;
        unsigned NCO2ACC19              :1;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
    };
    struct {
        unsigned NCO2ACC                :4;
    };
} NCO2ACCUbits_t;
extern volatile NCO2ACCUbits_t NCO2ACCUbits __at(0x44A);
// bitfield macros
#define _NCO2ACCU_ACC_POSN                                  0x0
#define _NCO2ACCU_ACC_POSITION                              0x0
#define _NCO2ACCU_ACC_SIZE                                  0x4
#define _NCO2ACCU_ACC_LENGTH                                0x4
#define _NCO2ACCU_ACC_MASK                                  0xF
#define _NCO2ACCU_NCO2ACC16_POSN                            0x0
#define _NCO2ACCU_NCO2ACC16_POSITION                        0x0
#define _NCO2ACCU_NCO2ACC16_SIZE                            0x1
#define _NCO2ACCU_NCO2ACC16_LENGTH                          0x1
#define _NCO2ACCU_NCO2ACC16_MASK                            0x1
#define _NCO2ACCU_NCO2ACC17_POSN                            0x1
#define _NCO2ACCU_NCO2ACC17_POSITION                        0x1
#define _NCO2ACCU_NCO2ACC17_SIZE                            0x1
#define _NCO2ACCU_NCO2ACC17_LENGTH                          0x1
#define _NCO2ACCU_NCO2ACC17_MASK                            0x2
#define _NCO2ACCU_NCO2ACC18_POSN                            0x2
#define _NCO2ACCU_NCO2ACC18_POSITION                        0x2
#define _NCO2ACCU_NCO2ACC18_SIZE                            0x1
#define _NCO2ACCU_NCO2ACC18_LENGTH                          0x1
#define _NCO2ACCU_NCO2ACC18_MASK                            0x4
#define _NCO2ACCU_NCO2ACC19_POSN                            0x3
#define _NCO2ACCU_NCO2ACC19_POSITION                        0x3
#define _NCO2ACCU_NCO2ACC19_SIZE                            0x1
#define _NCO2ACCU_NCO2ACC19_LENGTH                          0x1
#define _NCO2ACCU_NCO2ACC19_MASK                            0x8
#define _NCO2ACCU_ACC16_POSN                                0x0
#define _NCO2ACCU_ACC16_POSITION                            0x0
#define _NCO2ACCU_ACC16_SIZE                                0x1
#define _NCO2ACCU_ACC16_LENGTH                              0x1
#define _NCO2ACCU_ACC16_MASK                                0x1
#define _NCO2ACCU_ACC17_POSN                                0x1
#define _NCO2ACCU_ACC17_POSITION                            0x1
#define _NCO2ACCU_ACC17_SIZE                                0x1
#define _NCO2ACCU_ACC17_LENGTH                              0x1
#define _NCO2ACCU_ACC17_MASK                                0x2
#define _NCO2ACCU_ACC18_POSN                                0x2
#define _NCO2ACCU_ACC18_POSITION                            0x2
#define _NCO2ACCU_ACC18_SIZE                                0x1
#define _NCO2ACCU_ACC18_LENGTH                              0x1
#define _NCO2ACCU_ACC18_MASK                                0x4
#define _NCO2ACCU_ACC19_POSN                                0x3
#define _NCO2ACCU_ACC19_POSITION                            0x3
#define _NCO2ACCU_ACC19_SIZE                                0x1
#define _NCO2ACCU_ACC19_LENGTH                              0x1
#define _NCO2ACCU_ACC19_MASK                                0x8
#define _NCO2ACCU_NCO2ACC_POSN                              0x0
#define _NCO2ACCU_NCO2ACC_POSITION                          0x0
#define _NCO2ACCU_NCO2ACC_SIZE                              0x4
#define _NCO2ACCU_NCO2ACC_LENGTH                            0x4
#define _NCO2ACCU_NCO2ACC_MASK                              0xF

// Register: NCO2INC
#define NCO2INC NCO2INC
#ifndef __CCI__
extern volatile __uint24                NCO2INC             __at(0x44B);
#endif
#ifndef _LIB_BUILD
asm("NCO2INC equ 044Bh");
#endif

// Register: NCO2INCL
#define NCO2INCL NCO2INCL
extern volatile unsigned char           NCO2INCL            __at(0x44B);
#ifndef _LIB_BUILD
asm("NCO2INCL equ 044Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO2INC0               :1;
        unsigned NCO2INC1               :1;
        unsigned NCO2INC2               :1;
        unsigned NCO2INC3               :1;
        unsigned NCO2INC4               :1;
        unsigned NCO2INC5               :1;
        unsigned NCO2INC6               :1;
        unsigned NCO2INC7               :1;
    };
    struct {
        unsigned INC0                   :1;
        unsigned INC1                   :1;
        unsigned INC2                   :1;
        unsigned INC3                   :1;
        unsigned INC4                   :1;
        unsigned INC5                   :1;
        unsigned INC6                   :1;
        unsigned INC7                   :1;
    };
    struct {
        unsigned NCO2INC                :8;
    };
} NCO2INCLbits_t;
extern volatile NCO2INCLbits_t NCO2INCLbits __at(0x44B);
// bitfield macros
#define _NCO2INCL_INC_POSN                                  0x0
#define _NCO2INCL_INC_POSITION                              0x0
#define _NCO2INCL_INC_SIZE                                  0x8
#define _NCO2INCL_INC_LENGTH                                0x8
#define _NCO2INCL_INC_MASK                                  0xFF
#define _NCO2INCL_NCO2INC0_POSN                             0x0
#define _NCO2INCL_NCO2INC0_POSITION                         0x0
#define _NCO2INCL_NCO2INC0_SIZE                             0x1
#define _NCO2INCL_NCO2INC0_LENGTH                           0x1
#define _NCO2INCL_NCO2INC0_MASK                             0x1
#define _NCO2INCL_NCO2INC1_POSN                             0x1
#define _NCO2INCL_NCO2INC1_POSITION                         0x1
#define _NCO2INCL_NCO2INC1_SIZE                             0x1
#define _NCO2INCL_NCO2INC1_LENGTH                           0x1
#define _NCO2INCL_NCO2INC1_MASK                             0x2
#define _NCO2INCL_NCO2INC2_POSN                             0x2
#define _NCO2INCL_NCO2INC2_POSITION                         0x2
#define _NCO2INCL_NCO2INC2_SIZE                             0x1
#define _NCO2INCL_NCO2INC2_LENGTH                           0x1
#define _NCO2INCL_NCO2INC2_MASK                             0x4
#define _NCO2INCL_NCO2INC3_POSN                             0x3
#define _NCO2INCL_NCO2INC3_POSITION                         0x3
#define _NCO2INCL_NCO2INC3_SIZE                             0x1
#define _NCO2INCL_NCO2INC3_LENGTH                           0x1
#define _NCO2INCL_NCO2INC3_MASK                             0x8
#define _NCO2INCL_NCO2INC4_POSN                             0x4
#define _NCO2INCL_NCO2INC4_POSITION                         0x4
#define _NCO2INCL_NCO2INC4_SIZE                             0x1
#define _NCO2INCL_NCO2INC4_LENGTH                           0x1
#define _NCO2INCL_NCO2INC4_MASK                             0x10
#define _NCO2INCL_NCO2INC5_POSN                             0x5
#define _NCO2INCL_NCO2INC5_POSITION                         0x5
#define _NCO2INCL_NCO2INC5_SIZE                             0x1
#define _NCO2INCL_NCO2INC5_LENGTH                           0x1
#define _NCO2INCL_NCO2INC5_MASK                             0x20
#define _NCO2INCL_NCO2INC6_POSN                             0x6
#define _NCO2INCL_NCO2INC6_POSITION                         0x6
#define _NCO2INCL_NCO2INC6_SIZE                             0x1
#define _NCO2INCL_NCO2INC6_LENGTH                           0x1
#define _NCO2INCL_NCO2INC6_MASK                             0x40
#define _NCO2INCL_NCO2INC7_POSN                             0x7
#define _NCO2INCL_NCO2INC7_POSITION                         0x7
#define _NCO2INCL_NCO2INC7_SIZE                             0x1
#define _NCO2INCL_NCO2INC7_LENGTH                           0x1
#define _NCO2INCL_NCO2INC7_MASK                             0x80
#define _NCO2INCL_INC0_POSN                                 0x0
#define _NCO2INCL_INC0_POSITION                             0x0
#define _NCO2INCL_INC0_SIZE                                 0x1
#define _NCO2INCL_INC0_LENGTH                               0x1
#define _NCO2INCL_INC0_MASK                                 0x1
#define _NCO2INCL_INC1_POSN                                 0x1
#define _NCO2INCL_INC1_POSITION                             0x1
#define _NCO2INCL_INC1_SIZE                                 0x1
#define _NCO2INCL_INC1_LENGTH                               0x1
#define _NCO2INCL_INC1_MASK                                 0x2
#define _NCO2INCL_INC2_POSN                                 0x2
#define _NCO2INCL_INC2_POSITION                             0x2
#define _NCO2INCL_INC2_SIZE                                 0x1
#define _NCO2INCL_INC2_LENGTH                               0x1
#define _NCO2INCL_INC2_MASK                                 0x4
#define _NCO2INCL_INC3_POSN                                 0x3
#define _NCO2INCL_INC3_POSITION                             0x3
#define _NCO2INCL_INC3_SIZE                                 0x1
#define _NCO2INCL_INC3_LENGTH                               0x1
#define _NCO2INCL_INC3_MASK                                 0x8
#define _NCO2INCL_INC4_POSN                                 0x4
#define _NCO2INCL_INC4_POSITION                             0x4
#define _NCO2INCL_INC4_SIZE                                 0x1
#define _NCO2INCL_INC4_LENGTH                               0x1
#define _NCO2INCL_INC4_MASK                                 0x10
#define _NCO2INCL_INC5_POSN                                 0x5
#define _NCO2INCL_INC5_POSITION                             0x5
#define _NCO2INCL_INC5_SIZE                                 0x1
#define _NCO2INCL_INC5_LENGTH                               0x1
#define _NCO2INCL_INC5_MASK                                 0x20
#define _NCO2INCL_INC6_POSN                                 0x6
#define _NCO2INCL_INC6_POSITION                             0x6
#define _NCO2INCL_INC6_SIZE                                 0x1
#define _NCO2INCL_INC6_LENGTH                               0x1
#define _NCO2INCL_INC6_MASK                                 0x40
#define _NCO2INCL_INC7_POSN                                 0x7
#define _NCO2INCL_INC7_POSITION                             0x7
#define _NCO2INCL_INC7_SIZE                                 0x1
#define _NCO2INCL_INC7_LENGTH                               0x1
#define _NCO2INCL_INC7_MASK                                 0x80
#define _NCO2INCL_NCO2INC_POSN                              0x0
#define _NCO2INCL_NCO2INC_POSITION                          0x0
#define _NCO2INCL_NCO2INC_SIZE                              0x8
#define _NCO2INCL_NCO2INC_LENGTH                            0x8
#define _NCO2INCL_NCO2INC_MASK                              0xFF

// Register: NCO2INCH
#define NCO2INCH NCO2INCH
extern volatile unsigned char           NCO2INCH            __at(0x44C);
#ifndef _LIB_BUILD
asm("NCO2INCH equ 044Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO2INC8               :1;
        unsigned NCO2INC9               :1;
        unsigned NCO2INC10              :1;
        unsigned NCO2INC11              :1;
        unsigned NCO2INC12              :1;
        unsigned NCO2INC13              :1;
        unsigned NCO2INC14              :1;
        unsigned NCO2INC15              :1;
    };
    struct {
        unsigned INC8                   :1;
        unsigned INC9                   :1;
        unsigned INC10                  :1;
        unsigned INC11                  :1;
        unsigned INC12                  :1;
        unsigned INC13                  :1;
        unsigned INC14                  :1;
        unsigned INC15                  :1;
    };
    struct {
        unsigned NCO2INC                :8;
    };
} NCO2INCHbits_t;
extern volatile NCO2INCHbits_t NCO2INCHbits __at(0x44C);
// bitfield macros
#define _NCO2INCH_INC_POSN                                  0x0
#define _NCO2INCH_INC_POSITION                              0x0
#define _NCO2INCH_INC_SIZE                                  0x8
#define _NCO2INCH_INC_LENGTH                                0x8
#define _NCO2INCH_INC_MASK                                  0xFF
#define _NCO2INCH_NCO2INC8_POSN                             0x0
#define _NCO2INCH_NCO2INC8_POSITION                         0x0
#define _NCO2INCH_NCO2INC8_SIZE                             0x1
#define _NCO2INCH_NCO2INC8_LENGTH                           0x1
#define _NCO2INCH_NCO2INC8_MASK                             0x1
#define _NCO2INCH_NCO2INC9_POSN                             0x1
#define _NCO2INCH_NCO2INC9_POSITION                         0x1
#define _NCO2INCH_NCO2INC9_SIZE                             0x1
#define _NCO2INCH_NCO2INC9_LENGTH                           0x1
#define _NCO2INCH_NCO2INC9_MASK                             0x2
#define _NCO2INCH_NCO2INC10_POSN                            0x2
#define _NCO2INCH_NCO2INC10_POSITION                        0x2
#define _NCO2INCH_NCO2INC10_SIZE                            0x1
#define _NCO2INCH_NCO2INC10_LENGTH                          0x1
#define _NCO2INCH_NCO2INC10_MASK                            0x4
#define _NCO2INCH_NCO2INC11_POSN                            0x3
#define _NCO2INCH_NCO2INC11_POSITION                        0x3
#define _NCO2INCH_NCO2INC11_SIZE                            0x1
#define _NCO2INCH_NCO2INC11_LENGTH                          0x1
#define _NCO2INCH_NCO2INC11_MASK                            0x8
#define _NCO2INCH_NCO2INC12_POSN                            0x4
#define _NCO2INCH_NCO2INC12_POSITION                        0x4
#define _NCO2INCH_NCO2INC12_SIZE                            0x1
#define _NCO2INCH_NCO2INC12_LENGTH                          0x1
#define _NCO2INCH_NCO2INC12_MASK                            0x10
#define _NCO2INCH_NCO2INC13_POSN                            0x5
#define _NCO2INCH_NCO2INC13_POSITION                        0x5
#define _NCO2INCH_NCO2INC13_SIZE                            0x1
#define _NCO2INCH_NCO2INC13_LENGTH                          0x1
#define _NCO2INCH_NCO2INC13_MASK                            0x20
#define _NCO2INCH_NCO2INC14_POSN                            0x6
#define _NCO2INCH_NCO2INC14_POSITION                        0x6
#define _NCO2INCH_NCO2INC14_SIZE                            0x1
#define _NCO2INCH_NCO2INC14_LENGTH                          0x1
#define _NCO2INCH_NCO2INC14_MASK                            0x40
#define _NCO2INCH_NCO2INC15_POSN                            0x7
#define _NCO2INCH_NCO2INC15_POSITION                        0x7
#define _NCO2INCH_NCO2INC15_SIZE                            0x1
#define _NCO2INCH_NCO2INC15_LENGTH                          0x1
#define _NCO2INCH_NCO2INC15_MASK                            0x80
#define _NCO2INCH_INC8_POSN                                 0x0
#define _NCO2INCH_INC8_POSITION                             0x0
#define _NCO2INCH_INC8_SIZE                                 0x1
#define _NCO2INCH_INC8_LENGTH                               0x1
#define _NCO2INCH_INC8_MASK                                 0x1
#define _NCO2INCH_INC9_POSN                                 0x1
#define _NCO2INCH_INC9_POSITION                             0x1
#define _NCO2INCH_INC9_SIZE                                 0x1
#define _NCO2INCH_INC9_LENGTH                               0x1
#define _NCO2INCH_INC9_MASK                                 0x2
#define _NCO2INCH_INC10_POSN                                0x2
#define _NCO2INCH_INC10_POSITION                            0x2
#define _NCO2INCH_INC10_SIZE                                0x1
#define _NCO2INCH_INC10_LENGTH                              0x1
#define _NCO2INCH_INC10_MASK                                0x4
#define _NCO2INCH_INC11_POSN                                0x3
#define _NCO2INCH_INC11_POSITION                            0x3
#define _NCO2INCH_INC11_SIZE                                0x1
#define _NCO2INCH_INC11_LENGTH                              0x1
#define _NCO2INCH_INC11_MASK                                0x8
#define _NCO2INCH_INC12_POSN                                0x4
#define _NCO2INCH_INC12_POSITION                            0x4
#define _NCO2INCH_INC12_SIZE                                0x1
#define _NCO2INCH_INC12_LENGTH                              0x1
#define _NCO2INCH_INC12_MASK                                0x10
#define _NCO2INCH_INC13_POSN                                0x5
#define _NCO2INCH_INC13_POSITION                            0x5
#define _NCO2INCH_INC13_SIZE                                0x1
#define _NCO2INCH_INC13_LENGTH                              0x1
#define _NCO2INCH_INC13_MASK                                0x20
#define _NCO2INCH_INC14_POSN                                0x6
#define _NCO2INCH_INC14_POSITION                            0x6
#define _NCO2INCH_INC14_SIZE                                0x1
#define _NCO2INCH_INC14_LENGTH                              0x1
#define _NCO2INCH_INC14_MASK                                0x40
#define _NCO2INCH_INC15_POSN                                0x7
#define _NCO2INCH_INC15_POSITION                            0x7
#define _NCO2INCH_INC15_SIZE                                0x1
#define _NCO2INCH_INC15_LENGTH                              0x1
#define _NCO2INCH_INC15_MASK                                0x80
#define _NCO2INCH_NCO2INC_POSN                              0x0
#define _NCO2INCH_NCO2INC_POSITION                          0x0
#define _NCO2INCH_NCO2INC_SIZE                              0x8
#define _NCO2INCH_NCO2INC_LENGTH                            0x8
#define _NCO2INCH_NCO2INC_MASK                              0xFF

// Register: NCO2INCU
#define NCO2INCU NCO2INCU
extern volatile unsigned char           NCO2INCU            __at(0x44D);
#ifndef _LIB_BUILD
asm("NCO2INCU equ 044Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :4;
    };
    struct {
        unsigned NCO2INC16              :1;
        unsigned NCO2INC17              :1;
        unsigned NCO2INC18              :1;
        unsigned NCO2INC19              :1;
    };
    struct {
        unsigned INC16                  :1;
        unsigned INC17                  :1;
        unsigned INC18                  :1;
        unsigned INC19                  :1;
    };
    struct {
        unsigned NCO2INC                :4;
    };
} NCO2INCUbits_t;
extern volatile NCO2INCUbits_t NCO2INCUbits __at(0x44D);
// bitfield macros
#define _NCO2INCU_INC_POSN                                  0x0
#define _NCO2INCU_INC_POSITION                              0x0
#define _NCO2INCU_INC_SIZE                                  0x4
#define _NCO2INCU_INC_LENGTH                                0x4
#define _NCO2INCU_INC_MASK                                  0xF
#define _NCO2INCU_NCO2INC16_POSN                            0x0
#define _NCO2INCU_NCO2INC16_POSITION                        0x0
#define _NCO2INCU_NCO2INC16_SIZE                            0x1
#define _NCO2INCU_NCO2INC16_LENGTH                          0x1
#define _NCO2INCU_NCO2INC16_MASK                            0x1
#define _NCO2INCU_NCO2INC17_POSN                            0x1
#define _NCO2INCU_NCO2INC17_POSITION                        0x1
#define _NCO2INCU_NCO2INC17_SIZE                            0x1
#define _NCO2INCU_NCO2INC17_LENGTH                          0x1
#define _NCO2INCU_NCO2INC17_MASK                            0x2
#define _NCO2INCU_NCO2INC18_POSN                            0x2
#define _NCO2INCU_NCO2INC18_POSITION                        0x2
#define _NCO2INCU_NCO2INC18_SIZE                            0x1
#define _NCO2INCU_NCO2INC18_LENGTH                          0x1
#define _NCO2INCU_NCO2INC18_MASK                            0x4
#define _NCO2INCU_NCO2INC19_POSN                            0x3
#define _NCO2INCU_NCO2INC19_POSITION                        0x3
#define _NCO2INCU_NCO2INC19_SIZE                            0x1
#define _NCO2INCU_NCO2INC19_LENGTH                          0x1
#define _NCO2INCU_NCO2INC19_MASK                            0x8
#define _NCO2INCU_INC16_POSN                                0x0
#define _NCO2INCU_INC16_POSITION                            0x0
#define _NCO2INCU_INC16_SIZE                                0x1
#define _NCO2INCU_INC16_LENGTH                              0x1
#define _NCO2INCU_INC16_MASK                                0x1
#define _NCO2INCU_INC17_POSN                                0x1
#define _NCO2INCU_INC17_POSITION                            0x1
#define _NCO2INCU_INC17_SIZE                                0x1
#define _NCO2INCU_INC17_LENGTH                              0x1
#define _NCO2INCU_INC17_MASK                                0x2
#define _NCO2INCU_INC18_POSN                                0x2
#define _NCO2INCU_INC18_POSITION                            0x2
#define _NCO2INCU_INC18_SIZE                                0x1
#define _NCO2INCU_INC18_LENGTH                              0x1
#define _NCO2INCU_INC18_MASK                                0x4
#define _NCO2INCU_INC19_POSN                                0x3
#define _NCO2INCU_INC19_POSITION                            0x3
#define _NCO2INCU_INC19_SIZE                                0x1
#define _NCO2INCU_INC19_LENGTH                              0x1
#define _NCO2INCU_INC19_MASK                                0x8
#define _NCO2INCU_NCO2INC_POSN                              0x0
#define _NCO2INCU_NCO2INC_POSITION                          0x0
#define _NCO2INCU_NCO2INC_SIZE                              0x4
#define _NCO2INCU_NCO2INC_LENGTH                            0x4
#define _NCO2INCU_NCO2INC_MASK                              0xF

// Register: NCO2CON
#define NCO2CON NCO2CON
extern volatile unsigned char           NCO2CON             __at(0x44E);
#ifndef _LIB_BUILD
asm("NCO2CON equ 044Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PFM                    :1;
        unsigned                        :3;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned NCO2PFM                :1;
        unsigned                        :3;
        unsigned NCO2POL                :1;
        unsigned NCO2OUT                :1;
        unsigned                        :1;
        unsigned NCO2EN                 :1;
    };
} NCO2CONbits_t;
extern volatile NCO2CONbits_t NCO2CONbits __at(0x44E);
// bitfield macros
#define _NCO2CON_PFM_POSN                                   0x0
#define _NCO2CON_PFM_POSITION                               0x0
#define _NCO2CON_PFM_SIZE                                   0x1
#define _NCO2CON_PFM_LENGTH                                 0x1
#define _NCO2CON_PFM_MASK                                   0x1
#define _NCO2CON_POL_POSN                                   0x4
#define _NCO2CON_POL_POSITION                               0x4
#define _NCO2CON_POL_SIZE                                   0x1
#define _NCO2CON_POL_LENGTH                                 0x1
#define _NCO2CON_POL_MASK                                   0x10
#define _NCO2CON_OUT_POSN                                   0x5
#define _NCO2CON_OUT_POSITION                               0x5
#define _NCO2CON_OUT_SIZE                                   0x1
#define _NCO2CON_OUT_LENGTH                                 0x1
#define _NCO2CON_OUT_MASK                                   0x20
#define _NCO2CON_EN_POSN                                    0x7
#define _NCO2CON_EN_POSITION                                0x7
#define _NCO2CON_EN_SIZE                                    0x1
#define _NCO2CON_EN_LENGTH                                  0x1
#define _NCO2CON_EN_MASK                                    0x80
#define _NCO2CON_NCO2PFM_POSN                               0x0
#define _NCO2CON_NCO2PFM_POSITION                           0x0
#define _NCO2CON_NCO2PFM_SIZE                               0x1
#define _NCO2CON_NCO2PFM_LENGTH                             0x1
#define _NCO2CON_NCO2PFM_MASK                               0x1
#define _NCO2CON_NCO2POL_POSN                               0x4
#define _NCO2CON_NCO2POL_POSITION                           0x4
#define _NCO2CON_NCO2POL_SIZE                               0x1
#define _NCO2CON_NCO2POL_LENGTH                             0x1
#define _NCO2CON_NCO2POL_MASK                               0x10
#define _NCO2CON_NCO2OUT_POSN                               0x5
#define _NCO2CON_NCO2OUT_POSITION                           0x5
#define _NCO2CON_NCO2OUT_SIZE                               0x1
#define _NCO2CON_NCO2OUT_LENGTH                             0x1
#define _NCO2CON_NCO2OUT_MASK                               0x20
#define _NCO2CON_NCO2EN_POSN                                0x7
#define _NCO2CON_NCO2EN_POSITION                            0x7
#define _NCO2CON_NCO2EN_SIZE                                0x1
#define _NCO2CON_NCO2EN_LENGTH                              0x1
#define _NCO2CON_NCO2EN_MASK                                0x80

// Register: NCO2CLK
#define NCO2CLK NCO2CLK
extern volatile unsigned char           NCO2CLK             __at(0x44F);
#ifndef _LIB_BUILD
asm("NCO2CLK equ 044Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKS                    :5;
        unsigned PWS                    :3;
    };
    struct {
        unsigned CKS0                   :1;
        unsigned CKS1                   :1;
        unsigned CKS2                   :1;
        unsigned CKS3                   :1;
        unsigned CKS4                   :1;
        unsigned PWS0                   :1;
        unsigned PWS1                   :1;
        unsigned PWS2                   :1;
    };
    struct {
        unsigned NCO2CKS                :5;
        unsigned NCO2PWS                :3;
    };
    struct {
        unsigned NCO2CKS0               :1;
        unsigned NCO2CKS1               :1;
        unsigned NCO2CKS2               :1;
        unsigned NCO2CKS3               :1;
        unsigned NCO2CKS4               :1;
        unsigned NCO2PWS0               :1;
        unsigned NCO2PWS1               :1;
        unsigned NCO2PWS2               :1;
    };
} NCO2CLKbits_t;
extern volatile NCO2CLKbits_t NCO2CLKbits __at(0x44F);
// bitfield macros
#define _NCO2CLK_CKS_POSN                                   0x0
#define _NCO2CLK_CKS_POSITION                               0x0
#define _NCO2CLK_CKS_SIZE                                   0x5
#define _NCO2CLK_CKS_LENGTH                                 0x5
#define _NCO2CLK_CKS_MASK                                   0x1F
#define _NCO2CLK_PWS_POSN                                   0x5
#define _NCO2CLK_PWS_POSITION                               0x5
#define _NCO2CLK_PWS_SIZE                                   0x3
#define _NCO2CLK_PWS_LENGTH                                 0x3
#define _NCO2CLK_PWS_MASK                                   0xE0
#define _NCO2CLK_CKS0_POSN                                  0x0
#define _NCO2CLK_CKS0_POSITION                              0x0
#define _NCO2CLK_CKS0_SIZE                                  0x1
#define _NCO2CLK_CKS0_LENGTH                                0x1
#define _NCO2CLK_CKS0_MASK                                  0x1
#define _NCO2CLK_CKS1_POSN                                  0x1
#define _NCO2CLK_CKS1_POSITION                              0x1
#define _NCO2CLK_CKS1_SIZE                                  0x1
#define _NCO2CLK_CKS1_LENGTH                                0x1
#define _NCO2CLK_CKS1_MASK                                  0x2
#define _NCO2CLK_CKS2_POSN                                  0x2
#define _NCO2CLK_CKS2_POSITION                              0x2
#define _NCO2CLK_CKS2_SIZE                                  0x1
#define _NCO2CLK_CKS2_LENGTH                                0x1
#define _NCO2CLK_CKS2_MASK                                  0x4
#define _NCO2CLK_CKS3_POSN                                  0x3
#define _NCO2CLK_CKS3_POSITION                              0x3
#define _NCO2CLK_CKS3_SIZE                                  0x1
#define _NCO2CLK_CKS3_LENGTH                                0x1
#define _NCO2CLK_CKS3_MASK                                  0x8
#define _NCO2CLK_CKS4_POSN                                  0x4
#define _NCO2CLK_CKS4_POSITION                              0x4
#define _NCO2CLK_CKS4_SIZE                                  0x1
#define _NCO2CLK_CKS4_LENGTH                                0x1
#define _NCO2CLK_CKS4_MASK                                  0x10
#define _NCO2CLK_PWS0_POSN                                  0x5
#define _NCO2CLK_PWS0_POSITION                              0x5
#define _NCO2CLK_PWS0_SIZE                                  0x1
#define _NCO2CLK_PWS0_LENGTH                                0x1
#define _NCO2CLK_PWS0_MASK                                  0x20
#define _NCO2CLK_PWS1_POSN                                  0x6
#define _NCO2CLK_PWS1_POSITION                              0x6
#define _NCO2CLK_PWS1_SIZE                                  0x1
#define _NCO2CLK_PWS1_LENGTH                                0x1
#define _NCO2CLK_PWS1_MASK                                  0x40
#define _NCO2CLK_PWS2_POSN                                  0x7
#define _NCO2CLK_PWS2_POSITION                              0x7
#define _NCO2CLK_PWS2_SIZE                                  0x1
#define _NCO2CLK_PWS2_LENGTH                                0x1
#define _NCO2CLK_PWS2_MASK                                  0x80
#define _NCO2CLK_NCO2CKS_POSN                               0x0
#define _NCO2CLK_NCO2CKS_POSITION                           0x0
#define _NCO2CLK_NCO2CKS_SIZE                               0x5
#define _NCO2CLK_NCO2CKS_LENGTH                             0x5
#define _NCO2CLK_NCO2CKS_MASK                               0x1F
#define _NCO2CLK_NCO2PWS_POSN                               0x5
#define _NCO2CLK_NCO2PWS_POSITION                           0x5
#define _NCO2CLK_NCO2PWS_SIZE                               0x3
#define _NCO2CLK_NCO2PWS_LENGTH                             0x3
#define _NCO2CLK_NCO2PWS_MASK                               0xE0
#define _NCO2CLK_NCO2CKS0_POSN                              0x0
#define _NCO2CLK_NCO2CKS0_POSITION                          0x0
#define _NCO2CLK_NCO2CKS0_SIZE                              0x1
#define _NCO2CLK_NCO2CKS0_LENGTH                            0x1
#define _NCO2CLK_NCO2CKS0_MASK                              0x1
#define _NCO2CLK_NCO2CKS1_POSN                              0x1
#define _NCO2CLK_NCO2CKS1_POSITION                          0x1
#define _NCO2CLK_NCO2CKS1_SIZE                              0x1
#define _NCO2CLK_NCO2CKS1_LENGTH                            0x1
#define _NCO2CLK_NCO2CKS1_MASK                              0x2
#define _NCO2CLK_NCO2CKS2_POSN                              0x2
#define _NCO2CLK_NCO2CKS2_POSITION                          0x2
#define _NCO2CLK_NCO2CKS2_SIZE                              0x1
#define _NCO2CLK_NCO2CKS2_LENGTH                            0x1
#define _NCO2CLK_NCO2CKS2_MASK                              0x4
#define _NCO2CLK_NCO2CKS3_POSN                              0x3
#define _NCO2CLK_NCO2CKS3_POSITION                          0x3
#define _NCO2CLK_NCO2CKS3_SIZE                              0x1
#define _NCO2CLK_NCO2CKS3_LENGTH                            0x1
#define _NCO2CLK_NCO2CKS3_MASK                              0x8
#define _NCO2CLK_NCO2CKS4_POSN                              0x4
#define _NCO2CLK_NCO2CKS4_POSITION                          0x4
#define _NCO2CLK_NCO2CKS4_SIZE                              0x1
#define _NCO2CLK_NCO2CKS4_LENGTH                            0x1
#define _NCO2CLK_NCO2CKS4_MASK                              0x10
#define _NCO2CLK_NCO2PWS0_POSN                              0x5
#define _NCO2CLK_NCO2PWS0_POSITION                          0x5
#define _NCO2CLK_NCO2PWS0_SIZE                              0x1
#define _NCO2CLK_NCO2PWS0_LENGTH                            0x1
#define _NCO2CLK_NCO2PWS0_MASK                              0x20
#define _NCO2CLK_NCO2PWS1_POSN                              0x6
#define _NCO2CLK_NCO2PWS1_POSITION                          0x6
#define _NCO2CLK_NCO2PWS1_SIZE                              0x1
#define _NCO2CLK_NCO2PWS1_LENGTH                            0x1
#define _NCO2CLK_NCO2PWS1_MASK                              0x40
#define _NCO2CLK_NCO2PWS2_POSN                              0x7
#define _NCO2CLK_NCO2PWS2_POSITION                          0x7
#define _NCO2CLK_NCO2PWS2_SIZE                              0x1
#define _NCO2CLK_NCO2PWS2_LENGTH                            0x1
#define _NCO2CLK_NCO2PWS2_MASK                              0x80

// Register: NCO3ACC
#define NCO3ACC NCO3ACC
#ifndef __CCI__
extern volatile __uint24                NCO3ACC             __at(0x450);
#endif
#ifndef _LIB_BUILD
asm("NCO3ACC equ 0450h");
#endif

// Register: NCO3ACCL
#define NCO3ACCL NCO3ACCL
extern volatile unsigned char           NCO3ACCL            __at(0x450);
#ifndef _LIB_BUILD
asm("NCO3ACCL equ 0450h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO3ACC0               :1;
        unsigned NCO3ACC1               :1;
        unsigned NCO3ACC2               :1;
        unsigned NCO3ACC3               :1;
        unsigned NCO3ACC4               :1;
        unsigned NCO3ACC5               :1;
        unsigned NCO3ACC6               :1;
        unsigned NCO3ACC7               :1;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
    struct {
        unsigned NCO3ACC                :8;
    };
} NCO3ACCLbits_t;
extern volatile NCO3ACCLbits_t NCO3ACCLbits __at(0x450);
// bitfield macros
#define _NCO3ACCL_ACC_POSN                                  0x0
#define _NCO3ACCL_ACC_POSITION                              0x0
#define _NCO3ACCL_ACC_SIZE                                  0x8
#define _NCO3ACCL_ACC_LENGTH                                0x8
#define _NCO3ACCL_ACC_MASK                                  0xFF
#define _NCO3ACCL_NCO3ACC0_POSN                             0x0
#define _NCO3ACCL_NCO3ACC0_POSITION                         0x0
#define _NCO3ACCL_NCO3ACC0_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC0_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC0_MASK                             0x1
#define _NCO3ACCL_NCO3ACC1_POSN                             0x1
#define _NCO3ACCL_NCO3ACC1_POSITION                         0x1
#define _NCO3ACCL_NCO3ACC1_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC1_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC1_MASK                             0x2
#define _NCO3ACCL_NCO3ACC2_POSN                             0x2
#define _NCO3ACCL_NCO3ACC2_POSITION                         0x2
#define _NCO3ACCL_NCO3ACC2_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC2_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC2_MASK                             0x4
#define _NCO3ACCL_NCO3ACC3_POSN                             0x3
#define _NCO3ACCL_NCO3ACC3_POSITION                         0x3
#define _NCO3ACCL_NCO3ACC3_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC3_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC3_MASK                             0x8
#define _NCO3ACCL_NCO3ACC4_POSN                             0x4
#define _NCO3ACCL_NCO3ACC4_POSITION                         0x4
#define _NCO3ACCL_NCO3ACC4_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC4_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC4_MASK                             0x10
#define _NCO3ACCL_NCO3ACC5_POSN                             0x5
#define _NCO3ACCL_NCO3ACC5_POSITION                         0x5
#define _NCO3ACCL_NCO3ACC5_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC5_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC5_MASK                             0x20
#define _NCO3ACCL_NCO3ACC6_POSN                             0x6
#define _NCO3ACCL_NCO3ACC6_POSITION                         0x6
#define _NCO3ACCL_NCO3ACC6_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC6_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC6_MASK                             0x40
#define _NCO3ACCL_NCO3ACC7_POSN                             0x7
#define _NCO3ACCL_NCO3ACC7_POSITION                         0x7
#define _NCO3ACCL_NCO3ACC7_SIZE                             0x1
#define _NCO3ACCL_NCO3ACC7_LENGTH                           0x1
#define _NCO3ACCL_NCO3ACC7_MASK                             0x80
#define _NCO3ACCL_ACC0_POSN                                 0x0
#define _NCO3ACCL_ACC0_POSITION                             0x0
#define _NCO3ACCL_ACC0_SIZE                                 0x1
#define _NCO3ACCL_ACC0_LENGTH                               0x1
#define _NCO3ACCL_ACC0_MASK                                 0x1
#define _NCO3ACCL_ACC1_POSN                                 0x1
#define _NCO3ACCL_ACC1_POSITION                             0x1
#define _NCO3ACCL_ACC1_SIZE                                 0x1
#define _NCO3ACCL_ACC1_LENGTH                               0x1
#define _NCO3ACCL_ACC1_MASK                                 0x2
#define _NCO3ACCL_ACC2_POSN                                 0x2
#define _NCO3ACCL_ACC2_POSITION                             0x2
#define _NCO3ACCL_ACC2_SIZE                                 0x1
#define _NCO3ACCL_ACC2_LENGTH                               0x1
#define _NCO3ACCL_ACC2_MASK                                 0x4
#define _NCO3ACCL_ACC3_POSN                                 0x3
#define _NCO3ACCL_ACC3_POSITION                             0x3
#define _NCO3ACCL_ACC3_SIZE                                 0x1
#define _NCO3ACCL_ACC3_LENGTH                               0x1
#define _NCO3ACCL_ACC3_MASK                                 0x8
#define _NCO3ACCL_ACC4_POSN                                 0x4
#define _NCO3ACCL_ACC4_POSITION                             0x4
#define _NCO3ACCL_ACC4_SIZE                                 0x1
#define _NCO3ACCL_ACC4_LENGTH                               0x1
#define _NCO3ACCL_ACC4_MASK                                 0x10
#define _NCO3ACCL_ACC5_POSN                                 0x5
#define _NCO3ACCL_ACC5_POSITION                             0x5
#define _NCO3ACCL_ACC5_SIZE                                 0x1
#define _NCO3ACCL_ACC5_LENGTH                               0x1
#define _NCO3ACCL_ACC5_MASK                                 0x20
#define _NCO3ACCL_ACC6_POSN                                 0x6
#define _NCO3ACCL_ACC6_POSITION                             0x6
#define _NCO3ACCL_ACC6_SIZE                                 0x1
#define _NCO3ACCL_ACC6_LENGTH                               0x1
#define _NCO3ACCL_ACC6_MASK                                 0x40
#define _NCO3ACCL_ACC7_POSN                                 0x7
#define _NCO3ACCL_ACC7_POSITION                             0x7
#define _NCO3ACCL_ACC7_SIZE                                 0x1
#define _NCO3ACCL_ACC7_LENGTH                               0x1
#define _NCO3ACCL_ACC7_MASK                                 0x80
#define _NCO3ACCL_NCO3ACC_POSN                              0x0
#define _NCO3ACCL_NCO3ACC_POSITION                          0x0
#define _NCO3ACCL_NCO3ACC_SIZE                              0x8
#define _NCO3ACCL_NCO3ACC_LENGTH                            0x8
#define _NCO3ACCL_NCO3ACC_MASK                              0xFF

// Register: NCO3ACCH
#define NCO3ACCH NCO3ACCH
extern volatile unsigned char           NCO3ACCH            __at(0x451);
#ifndef _LIB_BUILD
asm("NCO3ACCH equ 0451h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO3ACC8               :1;
        unsigned NCO3ACC9               :1;
        unsigned NCO3ACC10              :1;
        unsigned NCO3ACC11              :1;
        unsigned NCO3ACC12              :1;
        unsigned NCO3ACC13              :1;
        unsigned NCO3ACC14              :1;
        unsigned NCO3ACC15              :1;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
    struct {
        unsigned NCO3ACC                :8;
    };
} NCO3ACCHbits_t;
extern volatile NCO3ACCHbits_t NCO3ACCHbits __at(0x451);
// bitfield macros
#define _NCO3ACCH_ACC_POSN                                  0x0
#define _NCO3ACCH_ACC_POSITION                              0x0
#define _NCO3ACCH_ACC_SIZE                                  0x8
#define _NCO3ACCH_ACC_LENGTH                                0x8
#define _NCO3ACCH_ACC_MASK                                  0xFF
#define _NCO3ACCH_NCO3ACC8_POSN                             0x0
#define _NCO3ACCH_NCO3ACC8_POSITION                         0x0
#define _NCO3ACCH_NCO3ACC8_SIZE                             0x1
#define _NCO3ACCH_NCO3ACC8_LENGTH                           0x1
#define _NCO3ACCH_NCO3ACC8_MASK                             0x1
#define _NCO3ACCH_NCO3ACC9_POSN                             0x1
#define _NCO3ACCH_NCO3ACC9_POSITION                         0x1
#define _NCO3ACCH_NCO3ACC9_SIZE                             0x1
#define _NCO3ACCH_NCO3ACC9_LENGTH                           0x1
#define _NCO3ACCH_NCO3ACC9_MASK                             0x2
#define _NCO3ACCH_NCO3ACC10_POSN                            0x2
#define _NCO3ACCH_NCO3ACC10_POSITION                        0x2
#define _NCO3ACCH_NCO3ACC10_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC10_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC10_MASK                            0x4
#define _NCO3ACCH_NCO3ACC11_POSN                            0x3
#define _NCO3ACCH_NCO3ACC11_POSITION                        0x3
#define _NCO3ACCH_NCO3ACC11_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC11_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC11_MASK                            0x8
#define _NCO3ACCH_NCO3ACC12_POSN                            0x4
#define _NCO3ACCH_NCO3ACC12_POSITION                        0x4
#define _NCO3ACCH_NCO3ACC12_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC12_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC12_MASK                            0x10
#define _NCO3ACCH_NCO3ACC13_POSN                            0x5
#define _NCO3ACCH_NCO3ACC13_POSITION                        0x5
#define _NCO3ACCH_NCO3ACC13_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC13_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC13_MASK                            0x20
#define _NCO3ACCH_NCO3ACC14_POSN                            0x6
#define _NCO3ACCH_NCO3ACC14_POSITION                        0x6
#define _NCO3ACCH_NCO3ACC14_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC14_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC14_MASK                            0x40
#define _NCO3ACCH_NCO3ACC15_POSN                            0x7
#define _NCO3ACCH_NCO3ACC15_POSITION                        0x7
#define _NCO3ACCH_NCO3ACC15_SIZE                            0x1
#define _NCO3ACCH_NCO3ACC15_LENGTH                          0x1
#define _NCO3ACCH_NCO3ACC15_MASK                            0x80
#define _NCO3ACCH_ACC8_POSN                                 0x0
#define _NCO3ACCH_ACC8_POSITION                             0x0
#define _NCO3ACCH_ACC8_SIZE                                 0x1
#define _NCO3ACCH_ACC8_LENGTH                               0x1
#define _NCO3ACCH_ACC8_MASK                                 0x1
#define _NCO3ACCH_ACC9_POSN                                 0x1
#define _NCO3ACCH_ACC9_POSITION                             0x1
#define _NCO3ACCH_ACC9_SIZE                                 0x1
#define _NCO3ACCH_ACC9_LENGTH                               0x1
#define _NCO3ACCH_ACC9_MASK                                 0x2
#define _NCO3ACCH_ACC10_POSN                                0x2
#define _NCO3ACCH_ACC10_POSITION                            0x2
#define _NCO3ACCH_ACC10_SIZE                                0x1
#define _NCO3ACCH_ACC10_LENGTH                              0x1
#define _NCO3ACCH_ACC10_MASK                                0x4
#define _NCO3ACCH_ACC11_POSN                                0x3
#define _NCO3ACCH_ACC11_POSITION                            0x3
#define _NCO3ACCH_ACC11_SIZE                                0x1
#define _NCO3ACCH_ACC11_LENGTH                              0x1
#define _NCO3ACCH_ACC11_MASK                                0x8
#define _NCO3ACCH_ACC12_POSN                                0x4
#define _NCO3ACCH_ACC12_POSITION                            0x4
#define _NCO3ACCH_ACC12_SIZE                                0x1
#define _NCO3ACCH_ACC12_LENGTH                              0x1
#define _NCO3ACCH_ACC12_MASK                                0x10
#define _NCO3ACCH_ACC13_POSN                                0x5
#define _NCO3ACCH_ACC13_POSITION                            0x5
#define _NCO3ACCH_ACC13_SIZE                                0x1
#define _NCO3ACCH_ACC13_LENGTH                              0x1
#define _NCO3ACCH_ACC13_MASK                                0x20
#define _NCO3ACCH_ACC14_POSN                                0x6
#define _NCO3ACCH_ACC14_POSITION                            0x6
#define _NCO3ACCH_ACC14_SIZE                                0x1
#define _NCO3ACCH_ACC14_LENGTH                              0x1
#define _NCO3ACCH_ACC14_MASK                                0x40
#define _NCO3ACCH_ACC15_POSN                                0x7
#define _NCO3ACCH_ACC15_POSITION                            0x7
#define _NCO3ACCH_ACC15_SIZE                                0x1
#define _NCO3ACCH_ACC15_LENGTH                              0x1
#define _NCO3ACCH_ACC15_MASK                                0x80
#define _NCO3ACCH_NCO3ACC_POSN                              0x0
#define _NCO3ACCH_NCO3ACC_POSITION                          0x0
#define _NCO3ACCH_NCO3ACC_SIZE                              0x8
#define _NCO3ACCH_NCO3ACC_LENGTH                            0x8
#define _NCO3ACCH_NCO3ACC_MASK                              0xFF

// Register: NCO3ACCU
#define NCO3ACCU NCO3ACCU
extern volatile unsigned char           NCO3ACCU            __at(0x452);
#ifndef _LIB_BUILD
asm("NCO3ACCU equ 0452h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :4;
    };
    struct {
        unsigned NCO3ACC16              :1;
        unsigned NCO3ACC17              :1;
        unsigned NCO3ACC18              :1;
        unsigned NCO3ACC19              :1;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
    };
    struct {
        unsigned NCO3ACC                :4;
    };
} NCO3ACCUbits_t;
extern volatile NCO3ACCUbits_t NCO3ACCUbits __at(0x452);
// bitfield macros
#define _NCO3ACCU_ACC_POSN                                  0x0
#define _NCO3ACCU_ACC_POSITION                              0x0
#define _NCO3ACCU_ACC_SIZE                                  0x4
#define _NCO3ACCU_ACC_LENGTH                                0x4
#define _NCO3ACCU_ACC_MASK                                  0xF
#define _NCO3ACCU_NCO3ACC16_POSN                            0x0
#define _NCO3ACCU_NCO3ACC16_POSITION                        0x0
#define _NCO3ACCU_NCO3ACC16_SIZE                            0x1
#define _NCO3ACCU_NCO3ACC16_LENGTH                          0x1
#define _NCO3ACCU_NCO3ACC16_MASK                            0x1
#define _NCO3ACCU_NCO3ACC17_POSN                            0x1
#define _NCO3ACCU_NCO3ACC17_POSITION                        0x1
#define _NCO3ACCU_NCO3ACC17_SIZE                            0x1
#define _NCO3ACCU_NCO3ACC17_LENGTH                          0x1
#define _NCO3ACCU_NCO3ACC17_MASK                            0x2
#define _NCO3ACCU_NCO3ACC18_POSN                            0x2
#define _NCO3ACCU_NCO3ACC18_POSITION                        0x2
#define _NCO3ACCU_NCO3ACC18_SIZE                            0x1
#define _NCO3ACCU_NCO3ACC18_LENGTH                          0x1
#define _NCO3ACCU_NCO3ACC18_MASK                            0x4
#define _NCO3ACCU_NCO3ACC19_POSN                            0x3
#define _NCO3ACCU_NCO3ACC19_POSITION                        0x3
#define _NCO3ACCU_NCO3ACC19_SIZE                            0x1
#define _NCO3ACCU_NCO3ACC19_LENGTH                          0x1
#define _NCO3ACCU_NCO3ACC19_MASK                            0x8
#define _NCO3ACCU_ACC16_POSN                                0x0
#define _NCO3ACCU_ACC16_POSITION                            0x0
#define _NCO3ACCU_ACC16_SIZE                                0x1
#define _NCO3ACCU_ACC16_LENGTH                              0x1
#define _NCO3ACCU_ACC16_MASK                                0x1
#define _NCO3ACCU_ACC17_POSN                                0x1
#define _NCO3ACCU_ACC17_POSITION                            0x1
#define _NCO3ACCU_ACC17_SIZE                                0x1
#define _NCO3ACCU_ACC17_LENGTH                              0x1
#define _NCO3ACCU_ACC17_MASK                                0x2
#define _NCO3ACCU_ACC18_POSN                                0x2
#define _NCO3ACCU_ACC18_POSITION                            0x2
#define _NCO3ACCU_ACC18_SIZE                                0x1
#define _NCO3ACCU_ACC18_LENGTH                              0x1
#define _NCO3ACCU_ACC18_MASK                                0x4
#define _NCO3ACCU_ACC19_POSN                                0x3
#define _NCO3ACCU_ACC19_POSITION                            0x3
#define _NCO3ACCU_ACC19_SIZE                                0x1
#define _NCO3ACCU_ACC19_LENGTH                              0x1
#define _NCO3ACCU_ACC19_MASK                                0x8
#define _NCO3ACCU_NCO3ACC_POSN                              0x0
#define _NCO3ACCU_NCO3ACC_POSITION                          0x0
#define _NCO3ACCU_NCO3ACC_SIZE                              0x4
#define _NCO3ACCU_NCO3ACC_LENGTH                            0x4
#define _NCO3ACCU_NCO3ACC_MASK                              0xF

// Register: NCO3INC
#define NCO3INC NCO3INC
#ifndef __CCI__
extern volatile __uint24                NCO3INC             __at(0x453);
#endif
#ifndef _LIB_BUILD
asm("NCO3INC equ 0453h");
#endif

// Register: NCO3INCL
#define NCO3INCL NCO3INCL
extern volatile unsigned char           NCO3INCL            __at(0x453);
#ifndef _LIB_BUILD
asm("NCO3INCL equ 0453h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO3INC0               :1;
        unsigned NCO3INC1               :1;
        unsigned NCO3INC2               :1;
        unsigned NCO3INC3               :1;
        unsigned NCO3INC4               :1;
        unsigned NCO3INC5               :1;
        unsigned NCO3INC6               :1;
        unsigned NCO3INC7               :1;
    };
    struct {
        unsigned INC0                   :1;
        unsigned INC1                   :1;
        unsigned INC2                   :1;
        unsigned INC3                   :1;
        unsigned INC4                   :1;
        unsigned INC5                   :1;
        unsigned INC6                   :1;
        unsigned INC7                   :1;
    };
    struct {
        unsigned NCO3INC                :8;
    };
} NCO3INCLbits_t;
extern volatile NCO3INCLbits_t NCO3INCLbits __at(0x453);
// bitfield macros
#define _NCO3INCL_INC_POSN                                  0x0
#define _NCO3INCL_INC_POSITION                              0x0
#define _NCO3INCL_INC_SIZE                                  0x8
#define _NCO3INCL_INC_LENGTH                                0x8
#define _NCO3INCL_INC_MASK                                  0xFF
#define _NCO3INCL_NCO3INC0_POSN                             0x0
#define _NCO3INCL_NCO3INC0_POSITION                         0x0
#define _NCO3INCL_NCO3INC0_SIZE                             0x1
#define _NCO3INCL_NCO3INC0_LENGTH                           0x1
#define _NCO3INCL_NCO3INC0_MASK                             0x1
#define _NCO3INCL_NCO3INC1_POSN                             0x1
#define _NCO3INCL_NCO3INC1_POSITION                         0x1
#define _NCO3INCL_NCO3INC1_SIZE                             0x1
#define _NCO3INCL_NCO3INC1_LENGTH                           0x1
#define _NCO3INCL_NCO3INC1_MASK                             0x2
#define _NCO3INCL_NCO3INC2_POSN                             0x2
#define _NCO3INCL_NCO3INC2_POSITION                         0x2
#define _NCO3INCL_NCO3INC2_SIZE                             0x1
#define _NCO3INCL_NCO3INC2_LENGTH                           0x1
#define _NCO3INCL_NCO3INC2_MASK                             0x4
#define _NCO3INCL_NCO3INC3_POSN                             0x3
#define _NCO3INCL_NCO3INC3_POSITION                         0x3
#define _NCO3INCL_NCO3INC3_SIZE                             0x1
#define _NCO3INCL_NCO3INC3_LENGTH                           0x1
#define _NCO3INCL_NCO3INC3_MASK                             0x8
#define _NCO3INCL_NCO3INC4_POSN                             0x4
#define _NCO3INCL_NCO3INC4_POSITION                         0x4
#define _NCO3INCL_NCO3INC4_SIZE                             0x1
#define _NCO3INCL_NCO3INC4_LENGTH                           0x1
#define _NCO3INCL_NCO3INC4_MASK                             0x10
#define _NCO3INCL_NCO3INC5_POSN                             0x5
#define _NCO3INCL_NCO3INC5_POSITION                         0x5
#define _NCO3INCL_NCO3INC5_SIZE                             0x1
#define _NCO3INCL_NCO3INC5_LENGTH                           0x1
#define _NCO3INCL_NCO3INC5_MASK                             0x20
#define _NCO3INCL_NCO3INC6_POSN                             0x6
#define _NCO3INCL_NCO3INC6_POSITION                         0x6
#define _NCO3INCL_NCO3INC6_SIZE                             0x1
#define _NCO3INCL_NCO3INC6_LENGTH                           0x1
#define _NCO3INCL_NCO3INC6_MASK                             0x40
#define _NCO3INCL_NCO3INC7_POSN                             0x7
#define _NCO3INCL_NCO3INC7_POSITION                         0x7
#define _NCO3INCL_NCO3INC7_SIZE                             0x1
#define _NCO3INCL_NCO3INC7_LENGTH                           0x1
#define _NCO3INCL_NCO3INC7_MASK                             0x80
#define _NCO3INCL_INC0_POSN                                 0x0
#define _NCO3INCL_INC0_POSITION                             0x0
#define _NCO3INCL_INC0_SIZE                                 0x1
#define _NCO3INCL_INC0_LENGTH                               0x1
#define _NCO3INCL_INC0_MASK                                 0x1
#define _NCO3INCL_INC1_POSN                                 0x1
#define _NCO3INCL_INC1_POSITION                             0x1
#define _NCO3INCL_INC1_SIZE                                 0x1
#define _NCO3INCL_INC1_LENGTH                               0x1
#define _NCO3INCL_INC1_MASK                                 0x2
#define _NCO3INCL_INC2_POSN                                 0x2
#define _NCO3INCL_INC2_POSITION                             0x2
#define _NCO3INCL_INC2_SIZE                                 0x1
#define _NCO3INCL_INC2_LENGTH                               0x1
#define _NCO3INCL_INC2_MASK                                 0x4
#define _NCO3INCL_INC3_POSN                                 0x3
#define _NCO3INCL_INC3_POSITION                             0x3
#define _NCO3INCL_INC3_SIZE                                 0x1
#define _NCO3INCL_INC3_LENGTH                               0x1
#define _NCO3INCL_INC3_MASK                                 0x8
#define _NCO3INCL_INC4_POSN                                 0x4
#define _NCO3INCL_INC4_POSITION                             0x4
#define _NCO3INCL_INC4_SIZE                                 0x1
#define _NCO3INCL_INC4_LENGTH                               0x1
#define _NCO3INCL_INC4_MASK                                 0x10
#define _NCO3INCL_INC5_POSN                                 0x5
#define _NCO3INCL_INC5_POSITION                             0x5
#define _NCO3INCL_INC5_SIZE                                 0x1
#define _NCO3INCL_INC5_LENGTH                               0x1
#define _NCO3INCL_INC5_MASK                                 0x20
#define _NCO3INCL_INC6_POSN                                 0x6
#define _NCO3INCL_INC6_POSITION                             0x6
#define _NCO3INCL_INC6_SIZE                                 0x1
#define _NCO3INCL_INC6_LENGTH                               0x1
#define _NCO3INCL_INC6_MASK                                 0x40
#define _NCO3INCL_INC7_POSN                                 0x7
#define _NCO3INCL_INC7_POSITION                             0x7
#define _NCO3INCL_INC7_SIZE                                 0x1
#define _NCO3INCL_INC7_LENGTH                               0x1
#define _NCO3INCL_INC7_MASK                                 0x80
#define _NCO3INCL_NCO3INC_POSN                              0x0
#define _NCO3INCL_NCO3INC_POSITION                          0x0
#define _NCO3INCL_NCO3INC_SIZE                              0x8
#define _NCO3INCL_NCO3INC_LENGTH                            0x8
#define _NCO3INCL_NCO3INC_MASK                              0xFF

// Register: NCO3INCH
#define NCO3INCH NCO3INCH
extern volatile unsigned char           NCO3INCH            __at(0x454);
#ifndef _LIB_BUILD
asm("NCO3INCH equ 0454h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO3INC8               :1;
        unsigned NCO3INC9               :1;
        unsigned NCO3INC10              :1;
        unsigned NCO3INC11              :1;
        unsigned NCO3INC12              :1;
        unsigned NCO3INC13              :1;
        unsigned NCO3INC14              :1;
        unsigned NCO3INC15              :1;
    };
    struct {
        unsigned INC8                   :1;
        unsigned INC9                   :1;
        unsigned INC10                  :1;
        unsigned INC11                  :1;
        unsigned INC12                  :1;
        unsigned INC13                  :1;
        unsigned INC14                  :1;
        unsigned INC15                  :1;
    };
    struct {
        unsigned NCO3INC                :8;
    };
} NCO3INCHbits_t;
extern volatile NCO3INCHbits_t NCO3INCHbits __at(0x454);
// bitfield macros
#define _NCO3INCH_INC_POSN                                  0x0
#define _NCO3INCH_INC_POSITION                              0x0
#define _NCO3INCH_INC_SIZE                                  0x8
#define _NCO3INCH_INC_LENGTH                                0x8
#define _NCO3INCH_INC_MASK                                  0xFF
#define _NCO3INCH_NCO3INC8_POSN                             0x0
#define _NCO3INCH_NCO3INC8_POSITION                         0x0
#define _NCO3INCH_NCO3INC8_SIZE                             0x1
#define _NCO3INCH_NCO3INC8_LENGTH                           0x1
#define _NCO3INCH_NCO3INC8_MASK                             0x1
#define _NCO3INCH_NCO3INC9_POSN                             0x1
#define _NCO3INCH_NCO3INC9_POSITION                         0x1
#define _NCO3INCH_NCO3INC9_SIZE                             0x1
#define _NCO3INCH_NCO3INC9_LENGTH                           0x1
#define _NCO3INCH_NCO3INC9_MASK                             0x2
#define _NCO3INCH_NCO3INC10_POSN                            0x2
#define _NCO3INCH_NCO3INC10_POSITION                        0x2
#define _NCO3INCH_NCO3INC10_SIZE                            0x1
#define _NCO3INCH_NCO3INC10_LENGTH                          0x1
#define _NCO3INCH_NCO3INC10_MASK                            0x4
#define _NCO3INCH_NCO3INC11_POSN                            0x3
#define _NCO3INCH_NCO3INC11_POSITION                        0x3
#define _NCO3INCH_NCO3INC11_SIZE                            0x1
#define _NCO3INCH_NCO3INC11_LENGTH                          0x1
#define _NCO3INCH_NCO3INC11_MASK                            0x8
#define _NCO3INCH_NCO3INC12_POSN                            0x4
#define _NCO3INCH_NCO3INC12_POSITION                        0x4
#define _NCO3INCH_NCO3INC12_SIZE                            0x1
#define _NCO3INCH_NCO3INC12_LENGTH                          0x1
#define _NCO3INCH_NCO3INC12_MASK                            0x10
#define _NCO3INCH_NCO3INC13_POSN                            0x5
#define _NCO3INCH_NCO3INC13_POSITION                        0x5
#define _NCO3INCH_NCO3INC13_SIZE                            0x1
#define _NCO3INCH_NCO3INC13_LENGTH                          0x1
#define _NCO3INCH_NCO3INC13_MASK                            0x20
#define _NCO3INCH_NCO3INC14_POSN                            0x6
#define _NCO3INCH_NCO3INC14_POSITION                        0x6
#define _NCO3INCH_NCO3INC14_SIZE                            0x1
#define _NCO3INCH_NCO3INC14_LENGTH                          0x1
#define _NCO3INCH_NCO3INC14_MASK                            0x40
#define _NCO3INCH_NCO3INC15_POSN                            0x7
#define _NCO3INCH_NCO3INC15_POSITION                        0x7
#define _NCO3INCH_NCO3INC15_SIZE                            0x1
#define _NCO3INCH_NCO3INC15_LENGTH                          0x1
#define _NCO3INCH_NCO3INC15_MASK                            0x80
#define _NCO3INCH_INC8_POSN                                 0x0
#define _NCO3INCH_INC8_POSITION                             0x0
#define _NCO3INCH_INC8_SIZE                                 0x1
#define _NCO3INCH_INC8_LENGTH                               0x1
#define _NCO3INCH_INC8_MASK                                 0x1
#define _NCO3INCH_INC9_POSN                                 0x1
#define _NCO3INCH_INC9_POSITION                             0x1
#define _NCO3INCH_INC9_SIZE                                 0x1
#define _NCO3INCH_INC9_LENGTH                               0x1
#define _NCO3INCH_INC9_MASK                                 0x2
#define _NCO3INCH_INC10_POSN                                0x2
#define _NCO3INCH_INC10_POSITION                            0x2
#define _NCO3INCH_INC10_SIZE                                0x1
#define _NCO3INCH_INC10_LENGTH                              0x1
#define _NCO3INCH_INC10_MASK                                0x4
#define _NCO3INCH_INC11_POSN                                0x3
#define _NCO3INCH_INC11_POSITION                            0x3
#define _NCO3INCH_INC11_SIZE                                0x1
#define _NCO3INCH_INC11_LENGTH                              0x1
#define _NCO3INCH_INC11_MASK                                0x8
#define _NCO3INCH_INC12_POSN                                0x4
#define _NCO3INCH_INC12_POSITION                            0x4
#define _NCO3INCH_INC12_SIZE                                0x1
#define _NCO3INCH_INC12_LENGTH                              0x1
#define _NCO3INCH_INC12_MASK                                0x10
#define _NCO3INCH_INC13_POSN                                0x5
#define _NCO3INCH_INC13_POSITION                            0x5
#define _NCO3INCH_INC13_SIZE                                0x1
#define _NCO3INCH_INC13_LENGTH                              0x1
#define _NCO3INCH_INC13_MASK                                0x20
#define _NCO3INCH_INC14_POSN                                0x6
#define _NCO3INCH_INC14_POSITION                            0x6
#define _NCO3INCH_INC14_SIZE                                0x1
#define _NCO3INCH_INC14_LENGTH                              0x1
#define _NCO3INCH_INC14_MASK                                0x40
#define _NCO3INCH_INC15_POSN                                0x7
#define _NCO3INCH_INC15_POSITION                            0x7
#define _NCO3INCH_INC15_SIZE                                0x1
#define _NCO3INCH_INC15_LENGTH                              0x1
#define _NCO3INCH_INC15_MASK                                0x80
#define _NCO3INCH_NCO3INC_POSN                              0x0
#define _NCO3INCH_NCO3INC_POSITION                          0x0
#define _NCO3INCH_NCO3INC_SIZE                              0x8
#define _NCO3INCH_NCO3INC_LENGTH                            0x8
#define _NCO3INCH_NCO3INC_MASK                              0xFF

// Register: NCO3INCU
#define NCO3INCU NCO3INCU
extern volatile unsigned char           NCO3INCU            __at(0x455);
#ifndef _LIB_BUILD
asm("NCO3INCU equ 0455h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :4;
    };
    struct {
        unsigned NCO3INC16              :1;
        unsigned NCO3INC17              :1;
        unsigned NCO3INC18              :1;
        unsigned NCO3INC19              :1;
    };
    struct {
        unsigned INC16                  :1;
        unsigned INC17                  :1;
        unsigned INC18                  :1;
        unsigned INC19                  :1;
    };
    struct {
        unsigned NCO3INC                :4;
    };
} NCO3INCUbits_t;
extern volatile NCO3INCUbits_t NCO3INCUbits __at(0x455);
// bitfield macros
#define _NCO3INCU_INC_POSN                                  0x0
#define _NCO3INCU_INC_POSITION                              0x0
#define _NCO3INCU_INC_SIZE                                  0x4
#define _NCO3INCU_INC_LENGTH                                0x4
#define _NCO3INCU_INC_MASK                                  0xF
#define _NCO3INCU_NCO3INC16_POSN                            0x0
#define _NCO3INCU_NCO3INC16_POSITION                        0x0
#define _NCO3INCU_NCO3INC16_SIZE                            0x1
#define _NCO3INCU_NCO3INC16_LENGTH                          0x1
#define _NCO3INCU_NCO3INC16_MASK                            0x1
#define _NCO3INCU_NCO3INC17_POSN                            0x1
#define _NCO3INCU_NCO3INC17_POSITION                        0x1
#define _NCO3INCU_NCO3INC17_SIZE                            0x1
#define _NCO3INCU_NCO3INC17_LENGTH                          0x1
#define _NCO3INCU_NCO3INC17_MASK                            0x2
#define _NCO3INCU_NCO3INC18_POSN                            0x2
#define _NCO3INCU_NCO3INC18_POSITION                        0x2
#define _NCO3INCU_NCO3INC18_SIZE                            0x1
#define _NCO3INCU_NCO3INC18_LENGTH                          0x1
#define _NCO3INCU_NCO3INC18_MASK                            0x4
#define _NCO3INCU_NCO3INC19_POSN                            0x3
#define _NCO3INCU_NCO3INC19_POSITION                        0x3
#define _NCO3INCU_NCO3INC19_SIZE                            0x1
#define _NCO3INCU_NCO3INC19_LENGTH                          0x1
#define _NCO3INCU_NCO3INC19_MASK                            0x8
#define _NCO3INCU_INC16_POSN                                0x0
#define _NCO3INCU_INC16_POSITION                            0x0
#define _NCO3INCU_INC16_SIZE                                0x1
#define _NCO3INCU_INC16_LENGTH                              0x1
#define _NCO3INCU_INC16_MASK                                0x1
#define _NCO3INCU_INC17_POSN                                0x1
#define _NCO3INCU_INC17_POSITION                            0x1
#define _NCO3INCU_INC17_SIZE                                0x1
#define _NCO3INCU_INC17_LENGTH                              0x1
#define _NCO3INCU_INC17_MASK                                0x2
#define _NCO3INCU_INC18_POSN                                0x2
#define _NCO3INCU_INC18_POSITION                            0x2
#define _NCO3INCU_INC18_SIZE                                0x1
#define _NCO3INCU_INC18_LENGTH                              0x1
#define _NCO3INCU_INC18_MASK                                0x4
#define _NCO3INCU_INC19_POSN                                0x3
#define _NCO3INCU_INC19_POSITION                            0x3
#define _NCO3INCU_INC19_SIZE                                0x1
#define _NCO3INCU_INC19_LENGTH                              0x1
#define _NCO3INCU_INC19_MASK                                0x8
#define _NCO3INCU_NCO3INC_POSN                              0x0
#define _NCO3INCU_NCO3INC_POSITION                          0x0
#define _NCO3INCU_NCO3INC_SIZE                              0x4
#define _NCO3INCU_NCO3INC_LENGTH                            0x4
#define _NCO3INCU_NCO3INC_MASK                              0xF

// Register: NCO3CON
#define NCO3CON NCO3CON
extern volatile unsigned char           NCO3CON             __at(0x456);
#ifndef _LIB_BUILD
asm("NCO3CON equ 0456h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PFM                    :1;
        unsigned                        :3;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned NCO3PFM                :1;
        unsigned                        :3;
        unsigned NCO3POL                :1;
        unsigned NCO3OUT                :1;
        unsigned                        :1;
        unsigned NCO3EN                 :1;
    };
} NCO3CONbits_t;
extern volatile NCO3CONbits_t NCO3CONbits __at(0x456);
// bitfield macros
#define _NCO3CON_PFM_POSN                                   0x0
#define _NCO3CON_PFM_POSITION                               0x0
#define _NCO3CON_PFM_SIZE                                   0x1
#define _NCO3CON_PFM_LENGTH                                 0x1
#define _NCO3CON_PFM_MASK                                   0x1
#define _NCO3CON_POL_POSN                                   0x4
#define _NCO3CON_POL_POSITION                               0x4
#define _NCO3CON_POL_SIZE                                   0x1
#define _NCO3CON_POL_LENGTH                                 0x1
#define _NCO3CON_POL_MASK                                   0x10
#define _NCO3CON_OUT_POSN                                   0x5
#define _NCO3CON_OUT_POSITION                               0x5
#define _NCO3CON_OUT_SIZE                                   0x1
#define _NCO3CON_OUT_LENGTH                                 0x1
#define _NCO3CON_OUT_MASK                                   0x20
#define _NCO3CON_EN_POSN                                    0x7
#define _NCO3CON_EN_POSITION                                0x7
#define _NCO3CON_EN_SIZE                                    0x1
#define _NCO3CON_EN_LENGTH                                  0x1
#define _NCO3CON_EN_MASK                                    0x80
#define _NCO3CON_NCO3PFM_POSN                               0x0
#define _NCO3CON_NCO3PFM_POSITION                           0x0
#define _NCO3CON_NCO3PFM_SIZE                               0x1
#define _NCO3CON_NCO3PFM_LENGTH                             0x1
#define _NCO3CON_NCO3PFM_MASK                               0x1
#define _NCO3CON_NCO3POL_POSN                               0x4
#define _NCO3CON_NCO3POL_POSITION                           0x4
#define _NCO3CON_NCO3POL_SIZE                               0x1
#define _NCO3CON_NCO3POL_LENGTH                             0x1
#define _NCO3CON_NCO3POL_MASK                               0x10
#define _NCO3CON_NCO3OUT_POSN                               0x5
#define _NCO3CON_NCO3OUT_POSITION                           0x5
#define _NCO3CON_NCO3OUT_SIZE                               0x1
#define _NCO3CON_NCO3OUT_LENGTH                             0x1
#define _NCO3CON_NCO3OUT_MASK                               0x20
#define _NCO3CON_NCO3EN_POSN                                0x7
#define _NCO3CON_NCO3EN_POSITION                            0x7
#define _NCO3CON_NCO3EN_SIZE                                0x1
#define _NCO3CON_NCO3EN_LENGTH                              0x1
#define _NCO3CON_NCO3EN_MASK                                0x80

// Register: NCO3CLK
#define NCO3CLK NCO3CLK
extern volatile unsigned char           NCO3CLK             __at(0x457);
#ifndef _LIB_BUILD
asm("NCO3CLK equ 0457h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKS                    :5;
        unsigned PWS                    :3;
    };
    struct {
        unsigned CKS0                   :1;
        unsigned CKS1                   :1;
        unsigned CKS2                   :1;
        unsigned CKS3                   :1;
        unsigned CKS4                   :1;
        unsigned PWS0                   :1;
        unsigned PWS1                   :1;
        unsigned PWS2                   :1;
    };
    struct {
        unsigned NCO3CKS                :5;
        unsigned NCO3PWS                :3;
    };
    struct {
        unsigned NCO3CKS0               :1;
        unsigned NCO3CKS1               :1;
        unsigned NCO3CKS2               :1;
        unsigned NCO3CKS3               :1;
        unsigned NCO3CKS4               :1;
        unsigned NCO3PWS0               :1;
        unsigned NCO3PWS1               :1;
        unsigned NCO3PWS2               :1;
    };
} NCO3CLKbits_t;
extern volatile NCO3CLKbits_t NCO3CLKbits __at(0x457);
// bitfield macros
#define _NCO3CLK_CKS_POSN                                   0x0
#define _NCO3CLK_CKS_POSITION                               0x0
#define _NCO3CLK_CKS_SIZE                                   0x5
#define _NCO3CLK_CKS_LENGTH                                 0x5
#define _NCO3CLK_CKS_MASK                                   0x1F
#define _NCO3CLK_PWS_POSN                                   0x5
#define _NCO3CLK_PWS_POSITION                               0x5
#define _NCO3CLK_PWS_SIZE                                   0x3
#define _NCO3CLK_PWS_LENGTH                                 0x3
#define _NCO3CLK_PWS_MASK                                   0xE0
#define _NCO3CLK_CKS0_POSN                                  0x0
#define _NCO3CLK_CKS0_POSITION                              0x0
#define _NCO3CLK_CKS0_SIZE                                  0x1
#define _NCO3CLK_CKS0_LENGTH                                0x1
#define _NCO3CLK_CKS0_MASK                                  0x1
#define _NCO3CLK_CKS1_POSN                                  0x1
#define _NCO3CLK_CKS1_POSITION                              0x1
#define _NCO3CLK_CKS1_SIZE                                  0x1
#define _NCO3CLK_CKS1_LENGTH                                0x1
#define _NCO3CLK_CKS1_MASK                                  0x2
#define _NCO3CLK_CKS2_POSN                                  0x2
#define _NCO3CLK_CKS2_POSITION                              0x2
#define _NCO3CLK_CKS2_SIZE                                  0x1
#define _NCO3CLK_CKS2_LENGTH                                0x1
#define _NCO3CLK_CKS2_MASK                                  0x4
#define _NCO3CLK_CKS3_POSN                                  0x3
#define _NCO3CLK_CKS3_POSITION                              0x3
#define _NCO3CLK_CKS3_SIZE                                  0x1
#define _NCO3CLK_CKS3_LENGTH                                0x1
#define _NCO3CLK_CKS3_MASK                                  0x8
#define _NCO3CLK_CKS4_POSN                                  0x4
#define _NCO3CLK_CKS4_POSITION                              0x4
#define _NCO3CLK_CKS4_SIZE                                  0x1
#define _NCO3CLK_CKS4_LENGTH                                0x1
#define _NCO3CLK_CKS4_MASK                                  0x10
#define _NCO3CLK_PWS0_POSN                                  0x5
#define _NCO3CLK_PWS0_POSITION                              0x5
#define _NCO3CLK_PWS0_SIZE                                  0x1
#define _NCO3CLK_PWS0_LENGTH                                0x1
#define _NCO3CLK_PWS0_MASK                                  0x20
#define _NCO3CLK_PWS1_POSN                                  0x6
#define _NCO3CLK_PWS1_POSITION                              0x6
#define _NCO3CLK_PWS1_SIZE                                  0x1
#define _NCO3CLK_PWS1_LENGTH                                0x1
#define _NCO3CLK_PWS1_MASK                                  0x40
#define _NCO3CLK_PWS2_POSN                                  0x7
#define _NCO3CLK_PWS2_POSITION                              0x7
#define _NCO3CLK_PWS2_SIZE                                  0x1
#define _NCO3CLK_PWS2_LENGTH                                0x1
#define _NCO3CLK_PWS2_MASK                                  0x80
#define _NCO3CLK_NCO3CKS_POSN                               0x0
#define _NCO3CLK_NCO3CKS_POSITION                           0x0
#define _NCO3CLK_NCO3CKS_SIZE                               0x5
#define _NCO3CLK_NCO3CKS_LENGTH                             0x5
#define _NCO3CLK_NCO3CKS_MASK                               0x1F
#define _NCO3CLK_NCO3PWS_POSN                               0x5
#define _NCO3CLK_NCO3PWS_POSITION                           0x5
#define _NCO3CLK_NCO3PWS_SIZE                               0x3
#define _NCO3CLK_NCO3PWS_LENGTH                             0x3
#define _NCO3CLK_NCO3PWS_MASK                               0xE0
#define _NCO3CLK_NCO3CKS0_POSN                              0x0
#define _NCO3CLK_NCO3CKS0_POSITION                          0x0
#define _NCO3CLK_NCO3CKS0_SIZE                              0x1
#define _NCO3CLK_NCO3CKS0_LENGTH                            0x1
#define _NCO3CLK_NCO3CKS0_MASK                              0x1
#define _NCO3CLK_NCO3CKS1_POSN                              0x1
#define _NCO3CLK_NCO3CKS1_POSITION                          0x1
#define _NCO3CLK_NCO3CKS1_SIZE                              0x1
#define _NCO3CLK_NCO3CKS1_LENGTH                            0x1
#define _NCO3CLK_NCO3CKS1_MASK                              0x2
#define _NCO3CLK_NCO3CKS2_POSN                              0x2
#define _NCO3CLK_NCO3CKS2_POSITION                          0x2
#define _NCO3CLK_NCO3CKS2_SIZE                              0x1
#define _NCO3CLK_NCO3CKS2_LENGTH                            0x1
#define _NCO3CLK_NCO3CKS2_MASK                              0x4
#define _NCO3CLK_NCO3CKS3_POSN                              0x3
#define _NCO3CLK_NCO3CKS3_POSITION                          0x3
#define _NCO3CLK_NCO3CKS3_SIZE                              0x1
#define _NCO3CLK_NCO3CKS3_LENGTH                            0x1
#define _NCO3CLK_NCO3CKS3_MASK                              0x8
#define _NCO3CLK_NCO3CKS4_POSN                              0x4
#define _NCO3CLK_NCO3CKS4_POSITION                          0x4
#define _NCO3CLK_NCO3CKS4_SIZE                              0x1
#define _NCO3CLK_NCO3CKS4_LENGTH                            0x1
#define _NCO3CLK_NCO3CKS4_MASK                              0x10
#define _NCO3CLK_NCO3PWS0_POSN                              0x5
#define _NCO3CLK_NCO3PWS0_POSITION                          0x5
#define _NCO3CLK_NCO3PWS0_SIZE                              0x1
#define _NCO3CLK_NCO3PWS0_LENGTH                            0x1
#define _NCO3CLK_NCO3PWS0_MASK                              0x20
#define _NCO3CLK_NCO3PWS1_POSN                              0x6
#define _NCO3CLK_NCO3PWS1_POSITION                          0x6
#define _NCO3CLK_NCO3PWS1_SIZE                              0x1
#define _NCO3CLK_NCO3PWS1_LENGTH                            0x1
#define _NCO3CLK_NCO3PWS1_MASK                              0x40
#define _NCO3CLK_NCO3PWS2_POSN                              0x7
#define _NCO3CLK_NCO3PWS2_POSITION                          0x7
#define _NCO3CLK_NCO3PWS2_SIZE                              0x1
#define _NCO3CLK_NCO3PWS2_LENGTH                            0x1
#define _NCO3CLK_NCO3PWS2_MASK                              0x80

// Register: IVTLOCK
#define IVTLOCK IVTLOCK
extern volatile unsigned char           IVTLOCK             __at(0x459);
#ifndef _LIB_BUILD
asm("IVTLOCK equ 0459h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTLOCKED              :1;
    };
} IVTLOCKbits_t;
extern volatile IVTLOCKbits_t IVTLOCKbits __at(0x459);
// bitfield macros
#define _IVTLOCK_IVTLOCKED_POSN                             0x0
#define _IVTLOCK_IVTLOCKED_POSITION                         0x0
#define _IVTLOCK_IVTLOCKED_SIZE                             0x1
#define _IVTLOCK_IVTLOCKED_LENGTH                           0x1
#define _IVTLOCK_IVTLOCKED_MASK                             0x1

// Register: IVTAD
#define IVTAD IVTAD
#ifndef __CCI__
extern volatile __uint24                IVTAD               __at(0x45A);
#endif
#ifndef _LIB_BUILD
asm("IVTAD equ 045Ah");
#endif

// Register: IVTADL
#define IVTADL IVTADL
extern volatile unsigned char           IVTADL              __at(0x45A);
#ifndef _LIB_BUILD
asm("IVTADL equ 045Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD0                    :1;
        unsigned AD1                    :1;
        unsigned AD2                    :1;
        unsigned AD3                    :1;
        unsigned AD4                    :1;
        unsigned AD5                    :1;
        unsigned AD6                    :1;
        unsigned AD7                    :1;
    };
} IVTADLbits_t;
extern volatile IVTADLbits_t IVTADLbits __at(0x45A);
// bitfield macros
#define _IVTADL_AD0_POSN                                    0x0
#define _IVTADL_AD0_POSITION                                0x0
#define _IVTADL_AD0_SIZE                                    0x1
#define _IVTADL_AD0_LENGTH                                  0x1
#define _IVTADL_AD0_MASK                                    0x1
#define _IVTADL_AD1_POSN                                    0x1
#define _IVTADL_AD1_POSITION                                0x1
#define _IVTADL_AD1_SIZE                                    0x1
#define _IVTADL_AD1_LENGTH                                  0x1
#define _IVTADL_AD1_MASK                                    0x2
#define _IVTADL_AD2_POSN                                    0x2
#define _IVTADL_AD2_POSITION                                0x2
#define _IVTADL_AD2_SIZE                                    0x1
#define _IVTADL_AD2_LENGTH                                  0x1
#define _IVTADL_AD2_MASK                                    0x4
#define _IVTADL_AD3_POSN                                    0x3
#define _IVTADL_AD3_POSITION                                0x3
#define _IVTADL_AD3_SIZE                                    0x1
#define _IVTADL_AD3_LENGTH                                  0x1
#define _IVTADL_AD3_MASK                                    0x8
#define _IVTADL_AD4_POSN                                    0x4
#define _IVTADL_AD4_POSITION                                0x4
#define _IVTADL_AD4_SIZE                                    0x1
#define _IVTADL_AD4_LENGTH                                  0x1
#define _IVTADL_AD4_MASK                                    0x10
#define _IVTADL_AD5_POSN                                    0x5
#define _IVTADL_AD5_POSITION                                0x5
#define _IVTADL_AD5_SIZE                                    0x1
#define _IVTADL_AD5_LENGTH                                  0x1
#define _IVTADL_AD5_MASK                                    0x20
#define _IVTADL_AD6_POSN                                    0x6
#define _IVTADL_AD6_POSITION                                0x6
#define _IVTADL_AD6_SIZE                                    0x1
#define _IVTADL_AD6_LENGTH                                  0x1
#define _IVTADL_AD6_MASK                                    0x40
#define _IVTADL_AD7_POSN                                    0x7
#define _IVTADL_AD7_POSITION                                0x7
#define _IVTADL_AD7_SIZE                                    0x1
#define _IVTADL_AD7_LENGTH                                  0x1
#define _IVTADL_AD7_MASK                                    0x80

// Register: IVTADH
#define IVTADH IVTADH
extern volatile unsigned char           IVTADH              __at(0x45B);
#ifndef _LIB_BUILD
asm("IVTADH equ 045Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD8                    :1;
        unsigned AD9                    :1;
        unsigned AD10                   :1;
        unsigned AD11                   :1;
        unsigned AD12                   :1;
        unsigned AD13                   :1;
        unsigned AD14                   :1;
        unsigned AD15                   :1;
    };
} IVTADHbits_t;
extern volatile IVTADHbits_t IVTADHbits __at(0x45B);
// bitfield macros
#define _IVTADH_AD8_POSN                                    0x0
#define _IVTADH_AD8_POSITION                                0x0
#define _IVTADH_AD8_SIZE                                    0x1
#define _IVTADH_AD8_LENGTH                                  0x1
#define _IVTADH_AD8_MASK                                    0x1
#define _IVTADH_AD9_POSN                                    0x1
#define _IVTADH_AD9_POSITION                                0x1
#define _IVTADH_AD9_SIZE                                    0x1
#define _IVTADH_AD9_LENGTH                                  0x1
#define _IVTADH_AD9_MASK                                    0x2
#define _IVTADH_AD10_POSN                                   0x2
#define _IVTADH_AD10_POSITION                               0x2
#define _IVTADH_AD10_SIZE                                   0x1
#define _IVTADH_AD10_LENGTH                                 0x1
#define _IVTADH_AD10_MASK                                   0x4
#define _IVTADH_AD11_POSN                                   0x3
#define _IVTADH_AD11_POSITION                               0x3
#define _IVTADH_AD11_SIZE                                   0x1
#define _IVTADH_AD11_LENGTH                                 0x1
#define _IVTADH_AD11_MASK                                   0x8
#define _IVTADH_AD12_POSN                                   0x4
#define _IVTADH_AD12_POSITION                               0x4
#define _IVTADH_AD12_SIZE                                   0x1
#define _IVTADH_AD12_LENGTH                                 0x1
#define _IVTADH_AD12_MASK                                   0x10
#define _IVTADH_AD13_POSN                                   0x5
#define _IVTADH_AD13_POSITION                               0x5
#define _IVTADH_AD13_SIZE                                   0x1
#define _IVTADH_AD13_LENGTH                                 0x1
#define _IVTADH_AD13_MASK                                   0x20
#define _IVTADH_AD14_POSN                                   0x6
#define _IVTADH_AD14_POSITION                               0x6
#define _IVTADH_AD14_SIZE                                   0x1
#define _IVTADH_AD14_LENGTH                                 0x1
#define _IVTADH_AD14_MASK                                   0x40
#define _IVTADH_AD15_POSN                                   0x7
#define _IVTADH_AD15_POSITION                               0x7
#define _IVTADH_AD15_SIZE                                   0x1
#define _IVTADH_AD15_LENGTH                                 0x1
#define _IVTADH_AD15_MASK                                   0x80

// Register: IVTADU
#define IVTADU IVTADU
extern volatile unsigned char           IVTADU              __at(0x45C);
#ifndef _LIB_BUILD
asm("IVTADU equ 045Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD16                   :1;
        unsigned AD17                   :1;
        unsigned AD18                   :1;
        unsigned AD19                   :1;
        unsigned AD20                   :1;
    };
} IVTADUbits_t;
extern volatile IVTADUbits_t IVTADUbits __at(0x45C);
// bitfield macros
#define _IVTADU_AD16_POSN                                   0x0
#define _IVTADU_AD16_POSITION                               0x0
#define _IVTADU_AD16_SIZE                                   0x1
#define _IVTADU_AD16_LENGTH                                 0x1
#define _IVTADU_AD16_MASK                                   0x1
#define _IVTADU_AD17_POSN                                   0x1
#define _IVTADU_AD17_POSITION                               0x1
#define _IVTADU_AD17_SIZE                                   0x1
#define _IVTADU_AD17_LENGTH                                 0x1
#define _IVTADU_AD17_MASK                                   0x2
#define _IVTADU_AD18_POSN                                   0x2
#define _IVTADU_AD18_POSITION                               0x2
#define _IVTADU_AD18_SIZE                                   0x1
#define _IVTADU_AD18_LENGTH                                 0x1
#define _IVTADU_AD18_MASK                                   0x4
#define _IVTADU_AD19_POSN                                   0x3
#define _IVTADU_AD19_POSITION                               0x3
#define _IVTADU_AD19_SIZE                                   0x1
#define _IVTADU_AD19_LENGTH                                 0x1
#define _IVTADU_AD19_MASK                                   0x8
#define _IVTADU_AD20_POSN                                   0x4
#define _IVTADU_AD20_POSITION                               0x4
#define _IVTADU_AD20_SIZE                                   0x1
#define _IVTADU_AD20_LENGTH                                 0x1
#define _IVTADU_AD20_MASK                                   0x10

// Register: IVTBASE
#define IVTBASE IVTBASE
#ifndef __CCI__
extern volatile __uint24                IVTBASE             __at(0x45D);
#endif
#ifndef _LIB_BUILD
asm("IVTBASE equ 045Dh");
#endif

// Register: IVTBASEL
#define IVTBASEL IVTBASEL
extern volatile unsigned char           IVTBASEL            __at(0x45D);
#ifndef _LIB_BUILD
asm("IVTBASEL equ 045Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE0                  :1;
        unsigned BASE1                  :1;
        unsigned BASE2                  :1;
        unsigned BASE3                  :1;
        unsigned BASE4                  :1;
        unsigned BASE5                  :1;
        unsigned BASE6                  :1;
        unsigned BASE7                  :1;
    };
} IVTBASELbits_t;
extern volatile IVTBASELbits_t IVTBASELbits __at(0x45D);
// bitfield macros
#define _IVTBASEL_BASE0_POSN                                0x0
#define _IVTBASEL_BASE0_POSITION                            0x0
#define _IVTBASEL_BASE0_SIZE                                0x1
#define _IVTBASEL_BASE0_LENGTH                              0x1
#define _IVTBASEL_BASE0_MASK                                0x1
#define _IVTBASEL_BASE1_POSN                                0x1
#define _IVTBASEL_BASE1_POSITION                            0x1
#define _IVTBASEL_BASE1_SIZE                                0x1
#define _IVTBASEL_BASE1_LENGTH                              0x1
#define _IVTBASEL_BASE1_MASK                                0x2
#define _IVTBASEL_BASE2_POSN                                0x2
#define _IVTBASEL_BASE2_POSITION                            0x2
#define _IVTBASEL_BASE2_SIZE                                0x1
#define _IVTBASEL_BASE2_LENGTH                              0x1
#define _IVTBASEL_BASE2_MASK                                0x4
#define _IVTBASEL_BASE3_POSN                                0x3
#define _IVTBASEL_BASE3_POSITION                            0x3
#define _IVTBASEL_BASE3_SIZE                                0x1
#define _IVTBASEL_BASE3_LENGTH                              0x1
#define _IVTBASEL_BASE3_MASK                                0x8
#define _IVTBASEL_BASE4_POSN                                0x4
#define _IVTBASEL_BASE4_POSITION                            0x4
#define _IVTBASEL_BASE4_SIZE                                0x1
#define _IVTBASEL_BASE4_LENGTH                              0x1
#define _IVTBASEL_BASE4_MASK                                0x10
#define _IVTBASEL_BASE5_POSN                                0x5
#define _IVTBASEL_BASE5_POSITION                            0x5
#define _IVTBASEL_BASE5_SIZE                                0x1
#define _IVTBASEL_BASE5_LENGTH                              0x1
#define _IVTBASEL_BASE5_MASK                                0x20
#define _IVTBASEL_BASE6_POSN                                0x6
#define _IVTBASEL_BASE6_POSITION                            0x6
#define _IVTBASEL_BASE6_SIZE                                0x1
#define _IVTBASEL_BASE6_LENGTH                              0x1
#define _IVTBASEL_BASE6_MASK                                0x40
#define _IVTBASEL_BASE7_POSN                                0x7
#define _IVTBASEL_BASE7_POSITION                            0x7
#define _IVTBASEL_BASE7_SIZE                                0x1
#define _IVTBASEL_BASE7_LENGTH                              0x1
#define _IVTBASEL_BASE7_MASK                                0x80

// Register: IVTBASEH
#define IVTBASEH IVTBASEH
extern volatile unsigned char           IVTBASEH            __at(0x45E);
#ifndef _LIB_BUILD
asm("IVTBASEH equ 045Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE8                  :1;
        unsigned BASE9                  :1;
        unsigned BASE10                 :1;
        unsigned BASE11                 :1;
        unsigned BASE12                 :1;
        unsigned BASE13                 :1;
        unsigned BASE14                 :1;
        unsigned BASE15                 :1;
    };
} IVTBASEHbits_t;
extern volatile IVTBASEHbits_t IVTBASEHbits __at(0x45E);
// bitfield macros
#define _IVTBASEH_BASE8_POSN                                0x0
#define _IVTBASEH_BASE8_POSITION                            0x0
#define _IVTBASEH_BASE8_SIZE                                0x1
#define _IVTBASEH_BASE8_LENGTH                              0x1
#define _IVTBASEH_BASE8_MASK                                0x1
#define _IVTBASEH_BASE9_POSN                                0x1
#define _IVTBASEH_BASE9_POSITION                            0x1
#define _IVTBASEH_BASE9_SIZE                                0x1
#define _IVTBASEH_BASE9_LENGTH                              0x1
#define _IVTBASEH_BASE9_MASK                                0x2
#define _IVTBASEH_BASE10_POSN                               0x2
#define _IVTBASEH_BASE10_POSITION                           0x2
#define _IVTBASEH_BASE10_SIZE                               0x1
#define _IVTBASEH_BASE10_LENGTH                             0x1
#define _IVTBASEH_BASE10_MASK                               0x4
#define _IVTBASEH_BASE11_POSN                               0x3
#define _IVTBASEH_BASE11_POSITION                           0x3
#define _IVTBASEH_BASE11_SIZE                               0x1
#define _IVTBASEH_BASE11_LENGTH                             0x1
#define _IVTBASEH_BASE11_MASK                               0x8
#define _IVTBASEH_BASE12_POSN                               0x4
#define _IVTBASEH_BASE12_POSITION                           0x4
#define _IVTBASEH_BASE12_SIZE                               0x1
#define _IVTBASEH_BASE12_LENGTH                             0x1
#define _IVTBASEH_BASE12_MASK                               0x10
#define _IVTBASEH_BASE13_POSN                               0x5
#define _IVTBASEH_BASE13_POSITION                           0x5
#define _IVTBASEH_BASE13_SIZE                               0x1
#define _IVTBASEH_BASE13_LENGTH                             0x1
#define _IVTBASEH_BASE13_MASK                               0x20
#define _IVTBASEH_BASE14_POSN                               0x6
#define _IVTBASEH_BASE14_POSITION                           0x6
#define _IVTBASEH_BASE14_SIZE                               0x1
#define _IVTBASEH_BASE14_LENGTH                             0x1
#define _IVTBASEH_BASE14_MASK                               0x40
#define _IVTBASEH_BASE15_POSN                               0x7
#define _IVTBASEH_BASE15_POSITION                           0x7
#define _IVTBASEH_BASE15_SIZE                               0x1
#define _IVTBASEH_BASE15_LENGTH                             0x1
#define _IVTBASEH_BASE15_MASK                               0x80

// Register: IVTBASEU
#define IVTBASEU IVTBASEU
extern volatile unsigned char           IVTBASEU            __at(0x45F);
#ifndef _LIB_BUILD
asm("IVTBASEU equ 045Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE16                 :1;
        unsigned BASE17                 :1;
        unsigned BASE18                 :1;
        unsigned BASE19                 :1;
        unsigned BASE20                 :1;
    };
} IVTBASEUbits_t;
extern volatile IVTBASEUbits_t IVTBASEUbits __at(0x45F);
// bitfield macros
#define _IVTBASEU_BASE16_POSN                               0x0
#define _IVTBASEU_BASE16_POSITION                           0x0
#define _IVTBASEU_BASE16_SIZE                               0x1
#define _IVTBASEU_BASE16_LENGTH                             0x1
#define _IVTBASEU_BASE16_MASK                               0x1
#define _IVTBASEU_BASE17_POSN                               0x1
#define _IVTBASEU_BASE17_POSITION                           0x1
#define _IVTBASEU_BASE17_SIZE                               0x1
#define _IVTBASEU_BASE17_LENGTH                             0x1
#define _IVTBASEU_BASE17_MASK                               0x2
#define _IVTBASEU_BASE18_POSN                               0x2
#define _IVTBASEU_BASE18_POSITION                           0x2
#define _IVTBASEU_BASE18_SIZE                               0x1
#define _IVTBASEU_BASE18_LENGTH                             0x1
#define _IVTBASEU_BASE18_MASK                               0x4
#define _IVTBASEU_BASE19_POSN                               0x3
#define _IVTBASEU_BASE19_POSITION                           0x3
#define _IVTBASEU_BASE19_SIZE                               0x1
#define _IVTBASEU_BASE19_LENGTH                             0x1
#define _IVTBASEU_BASE19_MASK                               0x8
#define _IVTBASEU_BASE20_POSN                               0x4
#define _IVTBASEU_BASE20_POSITION                           0x4
#define _IVTBASEU_BASE20_SIZE                               0x1
#define _IVTBASEU_BASE20_LENGTH                             0x1
#define _IVTBASEU_BASE20_MASK                               0x10

// Register: PWM1ERS
#define PWM1ERS PWM1ERS
extern volatile unsigned char           PWM1ERS             __at(0x460);
#ifndef _LIB_BUILD
asm("PWM1ERS equ 0460h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
        unsigned ERS4                   :1;
        unsigned ERS5                   :1;
        unsigned ERS6                   :1;
        unsigned ERS7                   :1;
    };
} PWM1ERSbits_t;
extern volatile PWM1ERSbits_t PWM1ERSbits __at(0x460);
// bitfield macros
#define _PWM1ERS_ERS_POSN                                   0x0
#define _PWM1ERS_ERS_POSITION                               0x0
#define _PWM1ERS_ERS_SIZE                                   0x8
#define _PWM1ERS_ERS_LENGTH                                 0x8
#define _PWM1ERS_ERS_MASK                                   0xFF
#define _PWM1ERS_ERS0_POSN                                  0x0
#define _PWM1ERS_ERS0_POSITION                              0x0
#define _PWM1ERS_ERS0_SIZE                                  0x1
#define _PWM1ERS_ERS0_LENGTH                                0x1
#define _PWM1ERS_ERS0_MASK                                  0x1
#define _PWM1ERS_ERS1_POSN                                  0x1
#define _PWM1ERS_ERS1_POSITION                              0x1
#define _PWM1ERS_ERS1_SIZE                                  0x1
#define _PWM1ERS_ERS1_LENGTH                                0x1
#define _PWM1ERS_ERS1_MASK                                  0x2
#define _PWM1ERS_ERS2_POSN                                  0x2
#define _PWM1ERS_ERS2_POSITION                              0x2
#define _PWM1ERS_ERS2_SIZE                                  0x1
#define _PWM1ERS_ERS2_LENGTH                                0x1
#define _PWM1ERS_ERS2_MASK                                  0x4
#define _PWM1ERS_ERS3_POSN                                  0x3
#define _PWM1ERS_ERS3_POSITION                              0x3
#define _PWM1ERS_ERS3_SIZE                                  0x1
#define _PWM1ERS_ERS3_LENGTH                                0x1
#define _PWM1ERS_ERS3_MASK                                  0x8
#define _PWM1ERS_ERS4_POSN                                  0x4
#define _PWM1ERS_ERS4_POSITION                              0x4
#define _PWM1ERS_ERS4_SIZE                                  0x1
#define _PWM1ERS_ERS4_LENGTH                                0x1
#define _PWM1ERS_ERS4_MASK                                  0x10
#define _PWM1ERS_ERS5_POSN                                  0x5
#define _PWM1ERS_ERS5_POSITION                              0x5
#define _PWM1ERS_ERS5_SIZE                                  0x1
#define _PWM1ERS_ERS5_LENGTH                                0x1
#define _PWM1ERS_ERS5_MASK                                  0x20
#define _PWM1ERS_ERS6_POSN                                  0x6
#define _PWM1ERS_ERS6_POSITION                              0x6
#define _PWM1ERS_ERS6_SIZE                                  0x1
#define _PWM1ERS_ERS6_LENGTH                                0x1
#define _PWM1ERS_ERS6_MASK                                  0x40
#define _PWM1ERS_ERS7_POSN                                  0x7
#define _PWM1ERS_ERS7_POSITION                              0x7
#define _PWM1ERS_ERS7_SIZE                                  0x1
#define _PWM1ERS_ERS7_LENGTH                                0x1
#define _PWM1ERS_ERS7_MASK                                  0x80

// Register: PWM1CLK
#define PWM1CLK PWM1CLK
extern volatile unsigned char           PWM1CLK             __at(0x461);
#ifndef _LIB_BUILD
asm("PWM1CLK equ 0461h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
        unsigned CLK5                   :1;
        unsigned CLK6                   :1;
        unsigned CLK7                   :1;
    };
} PWM1CLKbits_t;
extern volatile PWM1CLKbits_t PWM1CLKbits __at(0x461);
// bitfield macros
#define _PWM1CLK_CLK_POSN                                   0x0
#define _PWM1CLK_CLK_POSITION                               0x0
#define _PWM1CLK_CLK_SIZE                                   0x8
#define _PWM1CLK_CLK_LENGTH                                 0x8
#define _PWM1CLK_CLK_MASK                                   0xFF
#define _PWM1CLK_CLK0_POSN                                  0x0
#define _PWM1CLK_CLK0_POSITION                              0x0
#define _PWM1CLK_CLK0_SIZE                                  0x1
#define _PWM1CLK_CLK0_LENGTH                                0x1
#define _PWM1CLK_CLK0_MASK                                  0x1
#define _PWM1CLK_CLK1_POSN                                  0x1
#define _PWM1CLK_CLK1_POSITION                              0x1
#define _PWM1CLK_CLK1_SIZE                                  0x1
#define _PWM1CLK_CLK1_LENGTH                                0x1
#define _PWM1CLK_CLK1_MASK                                  0x2
#define _PWM1CLK_CLK2_POSN                                  0x2
#define _PWM1CLK_CLK2_POSITION                              0x2
#define _PWM1CLK_CLK2_SIZE                                  0x1
#define _PWM1CLK_CLK2_LENGTH                                0x1
#define _PWM1CLK_CLK2_MASK                                  0x4
#define _PWM1CLK_CLK3_POSN                                  0x3
#define _PWM1CLK_CLK3_POSITION                              0x3
#define _PWM1CLK_CLK3_SIZE                                  0x1
#define _PWM1CLK_CLK3_LENGTH                                0x1
#define _PWM1CLK_CLK3_MASK                                  0x8
#define _PWM1CLK_CLK4_POSN                                  0x4
#define _PWM1CLK_CLK4_POSITION                              0x4
#define _PWM1CLK_CLK4_SIZE                                  0x1
#define _PWM1CLK_CLK4_LENGTH                                0x1
#define _PWM1CLK_CLK4_MASK                                  0x10
#define _PWM1CLK_CLK5_POSN                                  0x5
#define _PWM1CLK_CLK5_POSITION                              0x5
#define _PWM1CLK_CLK5_SIZE                                  0x1
#define _PWM1CLK_CLK5_LENGTH                                0x1
#define _PWM1CLK_CLK5_MASK                                  0x20
#define _PWM1CLK_CLK6_POSN                                  0x6
#define _PWM1CLK_CLK6_POSITION                              0x6
#define _PWM1CLK_CLK6_SIZE                                  0x1
#define _PWM1CLK_CLK6_LENGTH                                0x1
#define _PWM1CLK_CLK6_MASK                                  0x40
#define _PWM1CLK_CLK7_POSN                                  0x7
#define _PWM1CLK_CLK7_POSITION                              0x7
#define _PWM1CLK_CLK7_SIZE                                  0x1
#define _PWM1CLK_CLK7_LENGTH                                0x1
#define _PWM1CLK_CLK7_MASK                                  0x80

// Register: PWM1LDS
#define PWM1LDS PWM1LDS
extern volatile unsigned char           PWM1LDS             __at(0x462);
#ifndef _LIB_BUILD
asm("PWM1LDS equ 0462h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LDS                    :8;
    };
    struct {
        unsigned LDS0                   :1;
        unsigned LDS1                   :1;
        unsigned LDS2                   :1;
        unsigned LDS3                   :1;
        unsigned LDS4                   :1;
        unsigned LDS5                   :1;
        unsigned LDS6                   :1;
        unsigned LDS7                   :1;
    };
} PWM1LDSbits_t;
extern volatile PWM1LDSbits_t PWM1LDSbits __at(0x462);
// bitfield macros
#define _PWM1LDS_LDS_POSN                                   0x0
#define _PWM1LDS_LDS_POSITION                               0x0
#define _PWM1LDS_LDS_SIZE                                   0x8
#define _PWM1LDS_LDS_LENGTH                                 0x8
#define _PWM1LDS_LDS_MASK                                   0xFF
#define _PWM1LDS_LDS0_POSN                                  0x0
#define _PWM1LDS_LDS0_POSITION                              0x0
#define _PWM1LDS_LDS0_SIZE                                  0x1
#define _PWM1LDS_LDS0_LENGTH                                0x1
#define _PWM1LDS_LDS0_MASK                                  0x1
#define _PWM1LDS_LDS1_POSN                                  0x1
#define _PWM1LDS_LDS1_POSITION                              0x1
#define _PWM1LDS_LDS1_SIZE                                  0x1
#define _PWM1LDS_LDS1_LENGTH                                0x1
#define _PWM1LDS_LDS1_MASK                                  0x2
#define _PWM1LDS_LDS2_POSN                                  0x2
#define _PWM1LDS_LDS2_POSITION                              0x2
#define _PWM1LDS_LDS2_SIZE                                  0x1
#define _PWM1LDS_LDS2_LENGTH                                0x1
#define _PWM1LDS_LDS2_MASK                                  0x4
#define _PWM1LDS_LDS3_POSN                                  0x3
#define _PWM1LDS_LDS3_POSITION                              0x3
#define _PWM1LDS_LDS3_SIZE                                  0x1
#define _PWM1LDS_LDS3_LENGTH                                0x1
#define _PWM1LDS_LDS3_MASK                                  0x8
#define _PWM1LDS_LDS4_POSN                                  0x4
#define _PWM1LDS_LDS4_POSITION                              0x4
#define _PWM1LDS_LDS4_SIZE                                  0x1
#define _PWM1LDS_LDS4_LENGTH                                0x1
#define _PWM1LDS_LDS4_MASK                                  0x10
#define _PWM1LDS_LDS5_POSN                                  0x5
#define _PWM1LDS_LDS5_POSITION                              0x5
#define _PWM1LDS_LDS5_SIZE                                  0x1
#define _PWM1LDS_LDS5_LENGTH                                0x1
#define _PWM1LDS_LDS5_MASK                                  0x20
#define _PWM1LDS_LDS6_POSN                                  0x6
#define _PWM1LDS_LDS6_POSITION                              0x6
#define _PWM1LDS_LDS6_SIZE                                  0x1
#define _PWM1LDS_LDS6_LENGTH                                0x1
#define _PWM1LDS_LDS6_MASK                                  0x40
#define _PWM1LDS_LDS7_POSN                                  0x7
#define _PWM1LDS_LDS7_POSITION                              0x7
#define _PWM1LDS_LDS7_SIZE                                  0x1
#define _PWM1LDS_LDS7_LENGTH                                0x1
#define _PWM1LDS_LDS7_MASK                                  0x80

// Register: PWM1PR
#define PWM1PR PWM1PR
extern volatile unsigned short          PWM1PR              __at(0x463);
#ifndef _LIB_BUILD
asm("PWM1PR equ 0463h");
#endif

// Register: PWM1PRL
#define PWM1PRL PWM1PRL
extern volatile unsigned char           PWM1PRL             __at(0x463);
#ifndef _LIB_BUILD
asm("PWM1PRL equ 0463h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
} PWM1PRLbits_t;
extern volatile PWM1PRLbits_t PWM1PRLbits __at(0x463);
// bitfield macros
#define _PWM1PRL_PRL_POSN                                   0x0
#define _PWM1PRL_PRL_POSITION                               0x0
#define _PWM1PRL_PRL_SIZE                                   0x8
#define _PWM1PRL_PRL_LENGTH                                 0x8
#define _PWM1PRL_PRL_MASK                                   0xFF

// Register: PWM1PRH
#define PWM1PRH PWM1PRH
extern volatile unsigned char           PWM1PRH             __at(0x464);
#ifndef _LIB_BUILD
asm("PWM1PRH equ 0464h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
} PWM1PRHbits_t;
extern volatile PWM1PRHbits_t PWM1PRHbits __at(0x464);
// bitfield macros
#define _PWM1PRH_PRH_POSN                                   0x0
#define _PWM1PRH_PRH_POSITION                               0x0
#define _PWM1PRH_PRH_SIZE                                   0x8
#define _PWM1PRH_PRH_LENGTH                                 0x8
#define _PWM1PRH_PRH_MASK                                   0xFF

// Register: PWM1CPRE
#define PWM1CPRE PWM1CPRE
extern volatile unsigned char           PWM1CPRE            __at(0x465);
#ifndef _LIB_BUILD
asm("PWM1CPRE equ 0465h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRE                   :8;
    };
} PWM1CPREbits_t;
extern volatile PWM1CPREbits_t PWM1CPREbits __at(0x465);
// bitfield macros
#define _PWM1CPRE_CPRE_POSN                                 0x0
#define _PWM1CPRE_CPRE_POSITION                             0x0
#define _PWM1CPRE_CPRE_SIZE                                 0x8
#define _PWM1CPRE_CPRE_LENGTH                               0x8
#define _PWM1CPRE_CPRE_MASK                                 0xFF

// Register: PWM1PIPOS
#define PWM1PIPOS PWM1PIPOS
extern volatile unsigned char           PWM1PIPOS           __at(0x466);
#ifndef _LIB_BUILD
asm("PWM1PIPOS equ 0466h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIPOS                  :8;
    };
} PWM1PIPOSbits_t;
extern volatile PWM1PIPOSbits_t PWM1PIPOSbits __at(0x466);
// bitfield macros
#define _PWM1PIPOS_PIPOS_POSN                               0x0
#define _PWM1PIPOS_PIPOS_POSITION                           0x0
#define _PWM1PIPOS_PIPOS_SIZE                               0x8
#define _PWM1PIPOS_PIPOS_LENGTH                             0x8
#define _PWM1PIPOS_PIPOS_MASK                               0xFF

// Register: PWM1GIR
#define PWM1GIR PWM1GIR
extern volatile unsigned char           PWM1GIR             __at(0x467);
#ifndef _LIB_BUILD
asm("PWM1GIR equ 0467h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IF                 :1;
        unsigned S1P2IF                 :1;
    };
} PWM1GIRbits_t;
extern volatile PWM1GIRbits_t PWM1GIRbits __at(0x467);
// bitfield macros
#define _PWM1GIR_S1P1IF_POSN                                0x0
#define _PWM1GIR_S1P1IF_POSITION                            0x0
#define _PWM1GIR_S1P1IF_SIZE                                0x1
#define _PWM1GIR_S1P1IF_LENGTH                              0x1
#define _PWM1GIR_S1P1IF_MASK                                0x1
#define _PWM1GIR_S1P2IF_POSN                                0x1
#define _PWM1GIR_S1P2IF_POSITION                            0x1
#define _PWM1GIR_S1P2IF_SIZE                                0x1
#define _PWM1GIR_S1P2IF_LENGTH                              0x1
#define _PWM1GIR_S1P2IF_MASK                                0x2

// Register: PWM1GIE
#define PWM1GIE PWM1GIE
extern volatile unsigned char           PWM1GIE             __at(0x468);
#ifndef _LIB_BUILD
asm("PWM1GIE equ 0468h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IE                 :1;
        unsigned S1P2IE                 :1;
    };
} PWM1GIEbits_t;
extern volatile PWM1GIEbits_t PWM1GIEbits __at(0x468);
// bitfield macros
#define _PWM1GIE_S1P1IE_POSN                                0x0
#define _PWM1GIE_S1P1IE_POSITION                            0x0
#define _PWM1GIE_S1P1IE_SIZE                                0x1
#define _PWM1GIE_S1P1IE_LENGTH                              0x1
#define _PWM1GIE_S1P1IE_MASK                                0x1
#define _PWM1GIE_S1P2IE_POSN                                0x1
#define _PWM1GIE_S1P2IE_POSITION                            0x1
#define _PWM1GIE_S1P2IE_SIZE                                0x1
#define _PWM1GIE_S1P2IE_LENGTH                              0x1
#define _PWM1GIE_S1P2IE_MASK                                0x2

// Register: PWM1CON
#define PWM1CON PWM1CON
extern volatile unsigned char           PWM1CON             __at(0x469);
#ifndef _LIB_BUILD
asm("PWM1CON equ 0469h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERSNOW                 :1;
        unsigned ERSPOL                 :1;
        unsigned LD                     :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
} PWM1CONbits_t;
extern volatile PWM1CONbits_t PWM1CONbits __at(0x469);
// bitfield macros
#define _PWM1CON_ERSNOW_POSN                                0x0
#define _PWM1CON_ERSNOW_POSITION                            0x0
#define _PWM1CON_ERSNOW_SIZE                                0x1
#define _PWM1CON_ERSNOW_LENGTH                              0x1
#define _PWM1CON_ERSNOW_MASK                                0x1
#define _PWM1CON_ERSPOL_POSN                                0x1
#define _PWM1CON_ERSPOL_POSITION                            0x1
#define _PWM1CON_ERSPOL_SIZE                                0x1
#define _PWM1CON_ERSPOL_LENGTH                              0x1
#define _PWM1CON_ERSPOL_MASK                                0x2
#define _PWM1CON_LD_POSN                                    0x2
#define _PWM1CON_LD_POSITION                                0x2
#define _PWM1CON_LD_SIZE                                    0x1
#define _PWM1CON_LD_LENGTH                                  0x1
#define _PWM1CON_LD_MASK                                    0x4
#define _PWM1CON_EN_POSN                                    0x7
#define _PWM1CON_EN_POSITION                                0x7
#define _PWM1CON_EN_SIZE                                    0x1
#define _PWM1CON_EN_LENGTH                                  0x1
#define _PWM1CON_EN_MASK                                    0x80

// Register: PWM1S1CFG
#define PWM1S1CFG PWM1S1CFG
extern volatile unsigned char           PWM1S1CFG           __at(0x46A);
#ifndef _LIB_BUILD
asm("PWM1S1CFG equ 046Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned PPEN                   :1;
        unsigned                        :2;
        unsigned POL1                   :1;
        unsigned POL2                   :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} PWM1S1CFGbits_t;
extern volatile PWM1S1CFGbits_t PWM1S1CFGbits __at(0x46A);
// bitfield macros
#define _PWM1S1CFG_MODE_POSN                                0x0
#define _PWM1S1CFG_MODE_POSITION                            0x0
#define _PWM1S1CFG_MODE_SIZE                                0x3
#define _PWM1S1CFG_MODE_LENGTH                              0x3
#define _PWM1S1CFG_MODE_MASK                                0x7
#define _PWM1S1CFG_PPEN_POSN                                0x3
#define _PWM1S1CFG_PPEN_POSITION                            0x3
#define _PWM1S1CFG_PPEN_SIZE                                0x1
#define _PWM1S1CFG_PPEN_LENGTH                              0x1
#define _PWM1S1CFG_PPEN_MASK                                0x8
#define _PWM1S1CFG_POL1_POSN                                0x6
#define _PWM1S1CFG_POL1_POSITION                            0x6
#define _PWM1S1CFG_POL1_SIZE                                0x1
#define _PWM1S1CFG_POL1_LENGTH                              0x1
#define _PWM1S1CFG_POL1_MASK                                0x40
#define _PWM1S1CFG_POL2_POSN                                0x7
#define _PWM1S1CFG_POL2_POSITION                            0x7
#define _PWM1S1CFG_POL2_SIZE                                0x1
#define _PWM1S1CFG_POL2_LENGTH                              0x1
#define _PWM1S1CFG_POL2_MASK                                0x80
#define _PWM1S1CFG_MODE0_POSN                               0x0
#define _PWM1S1CFG_MODE0_POSITION                           0x0
#define _PWM1S1CFG_MODE0_SIZE                               0x1
#define _PWM1S1CFG_MODE0_LENGTH                             0x1
#define _PWM1S1CFG_MODE0_MASK                               0x1
#define _PWM1S1CFG_MODE1_POSN                               0x1
#define _PWM1S1CFG_MODE1_POSITION                           0x1
#define _PWM1S1CFG_MODE1_SIZE                               0x1
#define _PWM1S1CFG_MODE1_LENGTH                             0x1
#define _PWM1S1CFG_MODE1_MASK                               0x2
#define _PWM1S1CFG_MODE2_POSN                               0x2
#define _PWM1S1CFG_MODE2_POSITION                           0x2
#define _PWM1S1CFG_MODE2_SIZE                               0x1
#define _PWM1S1CFG_MODE2_LENGTH                             0x1
#define _PWM1S1CFG_MODE2_MASK                               0x4

// Register: PWM1S1P1
#define PWM1S1P1 PWM1S1P1
extern volatile unsigned short          PWM1S1P1            __at(0x46B);
#ifndef _LIB_BUILD
asm("PWM1S1P1 equ 046Bh");
#endif

// Register: PWM1S1P1L
#define PWM1S1P1L PWM1S1P1L
extern volatile unsigned char           PWM1S1P1L           __at(0x46B);
#ifndef _LIB_BUILD
asm("PWM1S1P1L equ 046Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1L                  :8;
    };
} PWM1S1P1Lbits_t;
extern volatile PWM1S1P1Lbits_t PWM1S1P1Lbits __at(0x46B);
// bitfield macros
#define _PWM1S1P1L_S1P1L_POSN                               0x0
#define _PWM1S1P1L_S1P1L_POSITION                           0x0
#define _PWM1S1P1L_S1P1L_SIZE                               0x8
#define _PWM1S1P1L_S1P1L_LENGTH                             0x8
#define _PWM1S1P1L_S1P1L_MASK                               0xFF

// Register: PWM1S1P1H
#define PWM1S1P1H PWM1S1P1H
extern volatile unsigned char           PWM1S1P1H           __at(0x46C);
#ifndef _LIB_BUILD
asm("PWM1S1P1H equ 046Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1H                  :8;
    };
} PWM1S1P1Hbits_t;
extern volatile PWM1S1P1Hbits_t PWM1S1P1Hbits __at(0x46C);
// bitfield macros
#define _PWM1S1P1H_S1P1H_POSN                               0x0
#define _PWM1S1P1H_S1P1H_POSITION                           0x0
#define _PWM1S1P1H_S1P1H_SIZE                               0x8
#define _PWM1S1P1H_S1P1H_LENGTH                             0x8
#define _PWM1S1P1H_S1P1H_MASK                               0xFF

// Register: PWM1S1P2
#define PWM1S1P2 PWM1S1P2
extern volatile unsigned short          PWM1S1P2            __at(0x46D);
#ifndef _LIB_BUILD
asm("PWM1S1P2 equ 046Dh");
#endif

// Register: PWM1S1P2L
#define PWM1S1P2L PWM1S1P2L
extern volatile unsigned char           PWM1S1P2L           __at(0x46D);
#ifndef _LIB_BUILD
asm("PWM1S1P2L equ 046Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2L                  :8;
    };
} PWM1S1P2Lbits_t;
extern volatile PWM1S1P2Lbits_t PWM1S1P2Lbits __at(0x46D);
// bitfield macros
#define _PWM1S1P2L_S1P2L_POSN                               0x0
#define _PWM1S1P2L_S1P2L_POSITION                           0x0
#define _PWM1S1P2L_S1P2L_SIZE                               0x8
#define _PWM1S1P2L_S1P2L_LENGTH                             0x8
#define _PWM1S1P2L_S1P2L_MASK                               0xFF

// Register: PWM1S1P2H
#define PWM1S1P2H PWM1S1P2H
extern volatile unsigned char           PWM1S1P2H           __at(0x46E);
#ifndef _LIB_BUILD
asm("PWM1S1P2H equ 046Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2H                  :8;
    };
} PWM1S1P2Hbits_t;
extern volatile PWM1S1P2Hbits_t PWM1S1P2Hbits __at(0x46E);
// bitfield macros
#define _PWM1S1P2H_S1P2H_POSN                               0x0
#define _PWM1S1P2H_S1P2H_POSITION                           0x0
#define _PWM1S1P2H_S1P2H_SIZE                               0x8
#define _PWM1S1P2H_S1P2H_LENGTH                             0x8
#define _PWM1S1P2H_S1P2H_MASK                               0xFF

// Register: PWM2ERS
#define PWM2ERS PWM2ERS
extern volatile unsigned char           PWM2ERS             __at(0x46F);
#ifndef _LIB_BUILD
asm("PWM2ERS equ 046Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
        unsigned ERS4                   :1;
        unsigned ERS5                   :1;
        unsigned ERS6                   :1;
        unsigned ERS7                   :1;
    };
} PWM2ERSbits_t;
extern volatile PWM2ERSbits_t PWM2ERSbits __at(0x46F);
// bitfield macros
#define _PWM2ERS_ERS_POSN                                   0x0
#define _PWM2ERS_ERS_POSITION                               0x0
#define _PWM2ERS_ERS_SIZE                                   0x8
#define _PWM2ERS_ERS_LENGTH                                 0x8
#define _PWM2ERS_ERS_MASK                                   0xFF
#define _PWM2ERS_ERS0_POSN                                  0x0
#define _PWM2ERS_ERS0_POSITION                              0x0
#define _PWM2ERS_ERS0_SIZE                                  0x1
#define _PWM2ERS_ERS0_LENGTH                                0x1
#define _PWM2ERS_ERS0_MASK                                  0x1
#define _PWM2ERS_ERS1_POSN                                  0x1
#define _PWM2ERS_ERS1_POSITION                              0x1
#define _PWM2ERS_ERS1_SIZE                                  0x1
#define _PWM2ERS_ERS1_LENGTH                                0x1
#define _PWM2ERS_ERS1_MASK                                  0x2
#define _PWM2ERS_ERS2_POSN                                  0x2
#define _PWM2ERS_ERS2_POSITION                              0x2
#define _PWM2ERS_ERS2_SIZE                                  0x1
#define _PWM2ERS_ERS2_LENGTH                                0x1
#define _PWM2ERS_ERS2_MASK                                  0x4
#define _PWM2ERS_ERS3_POSN                                  0x3
#define _PWM2ERS_ERS3_POSITION                              0x3
#define _PWM2ERS_ERS3_SIZE                                  0x1
#define _PWM2ERS_ERS3_LENGTH                                0x1
#define _PWM2ERS_ERS3_MASK                                  0x8
#define _PWM2ERS_ERS4_POSN                                  0x4
#define _PWM2ERS_ERS4_POSITION                              0x4
#define _PWM2ERS_ERS4_SIZE                                  0x1
#define _PWM2ERS_ERS4_LENGTH                                0x1
#define _PWM2ERS_ERS4_MASK                                  0x10
#define _PWM2ERS_ERS5_POSN                                  0x5
#define _PWM2ERS_ERS5_POSITION                              0x5
#define _PWM2ERS_ERS5_SIZE                                  0x1
#define _PWM2ERS_ERS5_LENGTH                                0x1
#define _PWM2ERS_ERS5_MASK                                  0x20
#define _PWM2ERS_ERS6_POSN                                  0x6
#define _PWM2ERS_ERS6_POSITION                              0x6
#define _PWM2ERS_ERS6_SIZE                                  0x1
#define _PWM2ERS_ERS6_LENGTH                                0x1
#define _PWM2ERS_ERS6_MASK                                  0x40
#define _PWM2ERS_ERS7_POSN                                  0x7
#define _PWM2ERS_ERS7_POSITION                              0x7
#define _PWM2ERS_ERS7_SIZE                                  0x1
#define _PWM2ERS_ERS7_LENGTH                                0x1
#define _PWM2ERS_ERS7_MASK                                  0x80

// Register: PWM2CLK
#define PWM2CLK PWM2CLK
extern volatile unsigned char           PWM2CLK             __at(0x470);
#ifndef _LIB_BUILD
asm("PWM2CLK equ 0470h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
        unsigned CLK5                   :1;
        unsigned CLK6                   :1;
        unsigned CLK7                   :1;
    };
} PWM2CLKbits_t;
extern volatile PWM2CLKbits_t PWM2CLKbits __at(0x470);
// bitfield macros
#define _PWM2CLK_CLK_POSN                                   0x0
#define _PWM2CLK_CLK_POSITION                               0x0
#define _PWM2CLK_CLK_SIZE                                   0x8
#define _PWM2CLK_CLK_LENGTH                                 0x8
#define _PWM2CLK_CLK_MASK                                   0xFF
#define _PWM2CLK_CLK0_POSN                                  0x0
#define _PWM2CLK_CLK0_POSITION                              0x0
#define _PWM2CLK_CLK0_SIZE                                  0x1
#define _PWM2CLK_CLK0_LENGTH                                0x1
#define _PWM2CLK_CLK0_MASK                                  0x1
#define _PWM2CLK_CLK1_POSN                                  0x1
#define _PWM2CLK_CLK1_POSITION                              0x1
#define _PWM2CLK_CLK1_SIZE                                  0x1
#define _PWM2CLK_CLK1_LENGTH                                0x1
#define _PWM2CLK_CLK1_MASK                                  0x2
#define _PWM2CLK_CLK2_POSN                                  0x2
#define _PWM2CLK_CLK2_POSITION                              0x2
#define _PWM2CLK_CLK2_SIZE                                  0x1
#define _PWM2CLK_CLK2_LENGTH                                0x1
#define _PWM2CLK_CLK2_MASK                                  0x4
#define _PWM2CLK_CLK3_POSN                                  0x3
#define _PWM2CLK_CLK3_POSITION                              0x3
#define _PWM2CLK_CLK3_SIZE                                  0x1
#define _PWM2CLK_CLK3_LENGTH                                0x1
#define _PWM2CLK_CLK3_MASK                                  0x8
#define _PWM2CLK_CLK4_POSN                                  0x4
#define _PWM2CLK_CLK4_POSITION                              0x4
#define _PWM2CLK_CLK4_SIZE                                  0x1
#define _PWM2CLK_CLK4_LENGTH                                0x1
#define _PWM2CLK_CLK4_MASK                                  0x10
#define _PWM2CLK_CLK5_POSN                                  0x5
#define _PWM2CLK_CLK5_POSITION                              0x5
#define _PWM2CLK_CLK5_SIZE                                  0x1
#define _PWM2CLK_CLK5_LENGTH                                0x1
#define _PWM2CLK_CLK5_MASK                                  0x20
#define _PWM2CLK_CLK6_POSN                                  0x6
#define _PWM2CLK_CLK6_POSITION                              0x6
#define _PWM2CLK_CLK6_SIZE                                  0x1
#define _PWM2CLK_CLK6_LENGTH                                0x1
#define _PWM2CLK_CLK6_MASK                                  0x40
#define _PWM2CLK_CLK7_POSN                                  0x7
#define _PWM2CLK_CLK7_POSITION                              0x7
#define _PWM2CLK_CLK7_SIZE                                  0x1
#define _PWM2CLK_CLK7_LENGTH                                0x1
#define _PWM2CLK_CLK7_MASK                                  0x80

// Register: PWM2LDS
#define PWM2LDS PWM2LDS
extern volatile unsigned char           PWM2LDS             __at(0x471);
#ifndef _LIB_BUILD
asm("PWM2LDS equ 0471h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LDS                    :8;
    };
    struct {
        unsigned LDS0                   :1;
        unsigned LDS1                   :1;
        unsigned LDS2                   :1;
        unsigned LDS3                   :1;
        unsigned LDS4                   :1;
        unsigned LDS5                   :1;
        unsigned LDS6                   :1;
        unsigned LDS7                   :1;
    };
} PWM2LDSbits_t;
extern volatile PWM2LDSbits_t PWM2LDSbits __at(0x471);
// bitfield macros
#define _PWM2LDS_LDS_POSN                                   0x0
#define _PWM2LDS_LDS_POSITION                               0x0
#define _PWM2LDS_LDS_SIZE                                   0x8
#define _PWM2LDS_LDS_LENGTH                                 0x8
#define _PWM2LDS_LDS_MASK                                   0xFF
#define _PWM2LDS_LDS0_POSN                                  0x0
#define _PWM2LDS_LDS0_POSITION                              0x0
#define _PWM2LDS_LDS0_SIZE                                  0x1
#define _PWM2LDS_LDS0_LENGTH                                0x1
#define _PWM2LDS_LDS0_MASK                                  0x1
#define _PWM2LDS_LDS1_POSN                                  0x1
#define _PWM2LDS_LDS1_POSITION                              0x1
#define _PWM2LDS_LDS1_SIZE                                  0x1
#define _PWM2LDS_LDS1_LENGTH                                0x1
#define _PWM2LDS_LDS1_MASK                                  0x2
#define _PWM2LDS_LDS2_POSN                                  0x2
#define _PWM2LDS_LDS2_POSITION                              0x2
#define _PWM2LDS_LDS2_SIZE                                  0x1
#define _PWM2LDS_LDS2_LENGTH                                0x1
#define _PWM2LDS_LDS2_MASK                                  0x4
#define _PWM2LDS_LDS3_POSN                                  0x3
#define _PWM2LDS_LDS3_POSITION                              0x3
#define _PWM2LDS_LDS3_SIZE                                  0x1
#define _PWM2LDS_LDS3_LENGTH                                0x1
#define _PWM2LDS_LDS3_MASK                                  0x8
#define _PWM2LDS_LDS4_POSN                                  0x4
#define _PWM2LDS_LDS4_POSITION                              0x4
#define _PWM2LDS_LDS4_SIZE                                  0x1
#define _PWM2LDS_LDS4_LENGTH                                0x1
#define _PWM2LDS_LDS4_MASK                                  0x10
#define _PWM2LDS_LDS5_POSN                                  0x5
#define _PWM2LDS_LDS5_POSITION                              0x5
#define _PWM2LDS_LDS5_SIZE                                  0x1
#define _PWM2LDS_LDS5_LENGTH                                0x1
#define _PWM2LDS_LDS5_MASK                                  0x20
#define _PWM2LDS_LDS6_POSN                                  0x6
#define _PWM2LDS_LDS6_POSITION                              0x6
#define _PWM2LDS_LDS6_SIZE                                  0x1
#define _PWM2LDS_LDS6_LENGTH                                0x1
#define _PWM2LDS_LDS6_MASK                                  0x40
#define _PWM2LDS_LDS7_POSN                                  0x7
#define _PWM2LDS_LDS7_POSITION                              0x7
#define _PWM2LDS_LDS7_SIZE                                  0x1
#define _PWM2LDS_LDS7_LENGTH                                0x1
#define _PWM2LDS_LDS7_MASK                                  0x80

// Register: PWM2PR
#define PWM2PR PWM2PR
extern volatile unsigned short          PWM2PR              __at(0x472);
#ifndef _LIB_BUILD
asm("PWM2PR equ 0472h");
#endif

// Register: PWM2PRL
#define PWM2PRL PWM2PRL
extern volatile unsigned char           PWM2PRL             __at(0x472);
#ifndef _LIB_BUILD
asm("PWM2PRL equ 0472h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
} PWM2PRLbits_t;
extern volatile PWM2PRLbits_t PWM2PRLbits __at(0x472);
// bitfield macros
#define _PWM2PRL_PRL_POSN                                   0x0
#define _PWM2PRL_PRL_POSITION                               0x0
#define _PWM2PRL_PRL_SIZE                                   0x8
#define _PWM2PRL_PRL_LENGTH                                 0x8
#define _PWM2PRL_PRL_MASK                                   0xFF

// Register: PWM2PRH
#define PWM2PRH PWM2PRH
extern volatile unsigned char           PWM2PRH             __at(0x473);
#ifndef _LIB_BUILD
asm("PWM2PRH equ 0473h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
} PWM2PRHbits_t;
extern volatile PWM2PRHbits_t PWM2PRHbits __at(0x473);
// bitfield macros
#define _PWM2PRH_PRH_POSN                                   0x0
#define _PWM2PRH_PRH_POSITION                               0x0
#define _PWM2PRH_PRH_SIZE                                   0x8
#define _PWM2PRH_PRH_LENGTH                                 0x8
#define _PWM2PRH_PRH_MASK                                   0xFF

// Register: PWM2CPRE
#define PWM2CPRE PWM2CPRE
extern volatile unsigned char           PWM2CPRE            __at(0x474);
#ifndef _LIB_BUILD
asm("PWM2CPRE equ 0474h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRE                   :8;
    };
} PWM2CPREbits_t;
extern volatile PWM2CPREbits_t PWM2CPREbits __at(0x474);
// bitfield macros
#define _PWM2CPRE_CPRE_POSN                                 0x0
#define _PWM2CPRE_CPRE_POSITION                             0x0
#define _PWM2CPRE_CPRE_SIZE                                 0x8
#define _PWM2CPRE_CPRE_LENGTH                               0x8
#define _PWM2CPRE_CPRE_MASK                                 0xFF

// Register: PWM2PIPOS
#define PWM2PIPOS PWM2PIPOS
extern volatile unsigned char           PWM2PIPOS           __at(0x475);
#ifndef _LIB_BUILD
asm("PWM2PIPOS equ 0475h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIPOS                  :8;
    };
} PWM2PIPOSbits_t;
extern volatile PWM2PIPOSbits_t PWM2PIPOSbits __at(0x475);
// bitfield macros
#define _PWM2PIPOS_PIPOS_POSN                               0x0
#define _PWM2PIPOS_PIPOS_POSITION                           0x0
#define _PWM2PIPOS_PIPOS_SIZE                               0x8
#define _PWM2PIPOS_PIPOS_LENGTH                             0x8
#define _PWM2PIPOS_PIPOS_MASK                               0xFF

// Register: PWM2GIR
#define PWM2GIR PWM2GIR
extern volatile unsigned char           PWM2GIR             __at(0x476);
#ifndef _LIB_BUILD
asm("PWM2GIR equ 0476h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IF                 :1;
        unsigned S1P2IF                 :1;
    };
} PWM2GIRbits_t;
extern volatile PWM2GIRbits_t PWM2GIRbits __at(0x476);
// bitfield macros
#define _PWM2GIR_S1P1IF_POSN                                0x0
#define _PWM2GIR_S1P1IF_POSITION                            0x0
#define _PWM2GIR_S1P1IF_SIZE                                0x1
#define _PWM2GIR_S1P1IF_LENGTH                              0x1
#define _PWM2GIR_S1P1IF_MASK                                0x1
#define _PWM2GIR_S1P2IF_POSN                                0x1
#define _PWM2GIR_S1P2IF_POSITION                            0x1
#define _PWM2GIR_S1P2IF_SIZE                                0x1
#define _PWM2GIR_S1P2IF_LENGTH                              0x1
#define _PWM2GIR_S1P2IF_MASK                                0x2

// Register: PWM2GIE
#define PWM2GIE PWM2GIE
extern volatile unsigned char           PWM2GIE             __at(0x477);
#ifndef _LIB_BUILD
asm("PWM2GIE equ 0477h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IE                 :1;
        unsigned S1P2IE                 :1;
    };
} PWM2GIEbits_t;
extern volatile PWM2GIEbits_t PWM2GIEbits __at(0x477);
// bitfield macros
#define _PWM2GIE_S1P1IE_POSN                                0x0
#define _PWM2GIE_S1P1IE_POSITION                            0x0
#define _PWM2GIE_S1P1IE_SIZE                                0x1
#define _PWM2GIE_S1P1IE_LENGTH                              0x1
#define _PWM2GIE_S1P1IE_MASK                                0x1
#define _PWM2GIE_S1P2IE_POSN                                0x1
#define _PWM2GIE_S1P2IE_POSITION                            0x1
#define _PWM2GIE_S1P2IE_SIZE                                0x1
#define _PWM2GIE_S1P2IE_LENGTH                              0x1
#define _PWM2GIE_S1P2IE_MASK                                0x2

// Register: PWM2CON
#define PWM2CON PWM2CON
extern volatile unsigned char           PWM2CON             __at(0x478);
#ifndef _LIB_BUILD
asm("PWM2CON equ 0478h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERSNOW                 :1;
        unsigned ERSPOL                 :1;
        unsigned LD                     :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
} PWM2CONbits_t;
extern volatile PWM2CONbits_t PWM2CONbits __at(0x478);
// bitfield macros
#define _PWM2CON_ERSNOW_POSN                                0x0
#define _PWM2CON_ERSNOW_POSITION                            0x0
#define _PWM2CON_ERSNOW_SIZE                                0x1
#define _PWM2CON_ERSNOW_LENGTH                              0x1
#define _PWM2CON_ERSNOW_MASK                                0x1
#define _PWM2CON_ERSPOL_POSN                                0x1
#define _PWM2CON_ERSPOL_POSITION                            0x1
#define _PWM2CON_ERSPOL_SIZE                                0x1
#define _PWM2CON_ERSPOL_LENGTH                              0x1
#define _PWM2CON_ERSPOL_MASK                                0x2
#define _PWM2CON_LD_POSN                                    0x2
#define _PWM2CON_LD_POSITION                                0x2
#define _PWM2CON_LD_SIZE                                    0x1
#define _PWM2CON_LD_LENGTH                                  0x1
#define _PWM2CON_LD_MASK                                    0x4
#define _PWM2CON_EN_POSN                                    0x7
#define _PWM2CON_EN_POSITION                                0x7
#define _PWM2CON_EN_SIZE                                    0x1
#define _PWM2CON_EN_LENGTH                                  0x1
#define _PWM2CON_EN_MASK                                    0x80

// Register: PWM2S1CFG
#define PWM2S1CFG PWM2S1CFG
extern volatile unsigned char           PWM2S1CFG           __at(0x479);
#ifndef _LIB_BUILD
asm("PWM2S1CFG equ 0479h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned PPEN                   :1;
        unsigned                        :2;
        unsigned POL1                   :1;
        unsigned POL2                   :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} PWM2S1CFGbits_t;
extern volatile PWM2S1CFGbits_t PWM2S1CFGbits __at(0x479);
// bitfield macros
#define _PWM2S1CFG_MODE_POSN                                0x0
#define _PWM2S1CFG_MODE_POSITION                            0x0
#define _PWM2S1CFG_MODE_SIZE                                0x3
#define _PWM2S1CFG_MODE_LENGTH                              0x3
#define _PWM2S1CFG_MODE_MASK                                0x7
#define _PWM2S1CFG_PPEN_POSN                                0x3
#define _PWM2S1CFG_PPEN_POSITION                            0x3
#define _PWM2S1CFG_PPEN_SIZE                                0x1
#define _PWM2S1CFG_PPEN_LENGTH                              0x1
#define _PWM2S1CFG_PPEN_MASK                                0x8
#define _PWM2S1CFG_POL1_POSN                                0x6
#define _PWM2S1CFG_POL1_POSITION                            0x6
#define _PWM2S1CFG_POL1_SIZE                                0x1
#define _PWM2S1CFG_POL1_LENGTH                              0x1
#define _PWM2S1CFG_POL1_MASK                                0x40
#define _PWM2S1CFG_POL2_POSN                                0x7
#define _PWM2S1CFG_POL2_POSITION                            0x7
#define _PWM2S1CFG_POL2_SIZE                                0x1
#define _PWM2S1CFG_POL2_LENGTH                              0x1
#define _PWM2S1CFG_POL2_MASK                                0x80
#define _PWM2S1CFG_MODE0_POSN                               0x0
#define _PWM2S1CFG_MODE0_POSITION                           0x0
#define _PWM2S1CFG_MODE0_SIZE                               0x1
#define _PWM2S1CFG_MODE0_LENGTH                             0x1
#define _PWM2S1CFG_MODE0_MASK                               0x1
#define _PWM2S1CFG_MODE1_POSN                               0x1
#define _PWM2S1CFG_MODE1_POSITION                           0x1
#define _PWM2S1CFG_MODE1_SIZE                               0x1
#define _PWM2S1CFG_MODE1_LENGTH                             0x1
#define _PWM2S1CFG_MODE1_MASK                               0x2
#define _PWM2S1CFG_MODE2_POSN                               0x2
#define _PWM2S1CFG_MODE2_POSITION                           0x2
#define _PWM2S1CFG_MODE2_SIZE                               0x1
#define _PWM2S1CFG_MODE2_LENGTH                             0x1
#define _PWM2S1CFG_MODE2_MASK                               0x4

// Register: PWM2S1P1
#define PWM2S1P1 PWM2S1P1
extern volatile unsigned short          PWM2S1P1            __at(0x47A);
#ifndef _LIB_BUILD
asm("PWM2S1P1 equ 047Ah");
#endif

// Register: PWM2S1P1L
#define PWM2S1P1L PWM2S1P1L
extern volatile unsigned char           PWM2S1P1L           __at(0x47A);
#ifndef _LIB_BUILD
asm("PWM2S1P1L equ 047Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1L                  :8;
    };
} PWM2S1P1Lbits_t;
extern volatile PWM2S1P1Lbits_t PWM2S1P1Lbits __at(0x47A);
// bitfield macros
#define _PWM2S1P1L_S1P1L_POSN                               0x0
#define _PWM2S1P1L_S1P1L_POSITION                           0x0
#define _PWM2S1P1L_S1P1L_SIZE                               0x8
#define _PWM2S1P1L_S1P1L_LENGTH                             0x8
#define _PWM2S1P1L_S1P1L_MASK                               0xFF

// Register: PWM2S1P1H
#define PWM2S1P1H PWM2S1P1H
extern volatile unsigned char           PWM2S1P1H           __at(0x47B);
#ifndef _LIB_BUILD
asm("PWM2S1P1H equ 047Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1H                  :8;
    };
} PWM2S1P1Hbits_t;
extern volatile PWM2S1P1Hbits_t PWM2S1P1Hbits __at(0x47B);
// bitfield macros
#define _PWM2S1P1H_S1P1H_POSN                               0x0
#define _PWM2S1P1H_S1P1H_POSITION                           0x0
#define _PWM2S1P1H_S1P1H_SIZE                               0x8
#define _PWM2S1P1H_S1P1H_LENGTH                             0x8
#define _PWM2S1P1H_S1P1H_MASK                               0xFF

// Register: PWM2S1P2
#define PWM2S1P2 PWM2S1P2
extern volatile unsigned short          PWM2S1P2            __at(0x47C);
#ifndef _LIB_BUILD
asm("PWM2S1P2 equ 047Ch");
#endif

// Register: PWM2S1P2L
#define PWM2S1P2L PWM2S1P2L
extern volatile unsigned char           PWM2S1P2L           __at(0x47C);
#ifndef _LIB_BUILD
asm("PWM2S1P2L equ 047Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2L                  :8;
    };
} PWM2S1P2Lbits_t;
extern volatile PWM2S1P2Lbits_t PWM2S1P2Lbits __at(0x47C);
// bitfield macros
#define _PWM2S1P2L_S1P2L_POSN                               0x0
#define _PWM2S1P2L_S1P2L_POSITION                           0x0
#define _PWM2S1P2L_S1P2L_SIZE                               0x8
#define _PWM2S1P2L_S1P2L_LENGTH                             0x8
#define _PWM2S1P2L_S1P2L_MASK                               0xFF

// Register: PWM2S1P2H
#define PWM2S1P2H PWM2S1P2H
extern volatile unsigned char           PWM2S1P2H           __at(0x47D);
#ifndef _LIB_BUILD
asm("PWM2S1P2H equ 047Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2H                  :8;
    };
} PWM2S1P2Hbits_t;
extern volatile PWM2S1P2Hbits_t PWM2S1P2Hbits __at(0x47D);
// bitfield macros
#define _PWM2S1P2H_S1P2H_POSN                               0x0
#define _PWM2S1P2H_S1P2H_POSITION                           0x0
#define _PWM2S1P2H_S1P2H_SIZE                               0x8
#define _PWM2S1P2H_S1P2H_LENGTH                             0x8
#define _PWM2S1P2H_S1P2H_MASK                               0xFF

// Register: PWM3ERS
#define PWM3ERS PWM3ERS
extern volatile unsigned char           PWM3ERS             __at(0x47E);
#ifndef _LIB_BUILD
asm("PWM3ERS equ 047Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
        unsigned ERS4                   :1;
        unsigned ERS5                   :1;
        unsigned ERS6                   :1;
        unsigned ERS7                   :1;
    };
} PWM3ERSbits_t;
extern volatile PWM3ERSbits_t PWM3ERSbits __at(0x47E);
// bitfield macros
#define _PWM3ERS_ERS_POSN                                   0x0
#define _PWM3ERS_ERS_POSITION                               0x0
#define _PWM3ERS_ERS_SIZE                                   0x8
#define _PWM3ERS_ERS_LENGTH                                 0x8
#define _PWM3ERS_ERS_MASK                                   0xFF
#define _PWM3ERS_ERS0_POSN                                  0x0
#define _PWM3ERS_ERS0_POSITION                              0x0
#define _PWM3ERS_ERS0_SIZE                                  0x1
#define _PWM3ERS_ERS0_LENGTH                                0x1
#define _PWM3ERS_ERS0_MASK                                  0x1
#define _PWM3ERS_ERS1_POSN                                  0x1
#define _PWM3ERS_ERS1_POSITION                              0x1
#define _PWM3ERS_ERS1_SIZE                                  0x1
#define _PWM3ERS_ERS1_LENGTH                                0x1
#define _PWM3ERS_ERS1_MASK                                  0x2
#define _PWM3ERS_ERS2_POSN                                  0x2
#define _PWM3ERS_ERS2_POSITION                              0x2
#define _PWM3ERS_ERS2_SIZE                                  0x1
#define _PWM3ERS_ERS2_LENGTH                                0x1
#define _PWM3ERS_ERS2_MASK                                  0x4
#define _PWM3ERS_ERS3_POSN                                  0x3
#define _PWM3ERS_ERS3_POSITION                              0x3
#define _PWM3ERS_ERS3_SIZE                                  0x1
#define _PWM3ERS_ERS3_LENGTH                                0x1
#define _PWM3ERS_ERS3_MASK                                  0x8
#define _PWM3ERS_ERS4_POSN                                  0x4
#define _PWM3ERS_ERS4_POSITION                              0x4
#define _PWM3ERS_ERS4_SIZE                                  0x1
#define _PWM3ERS_ERS4_LENGTH                                0x1
#define _PWM3ERS_ERS4_MASK                                  0x10
#define _PWM3ERS_ERS5_POSN                                  0x5
#define _PWM3ERS_ERS5_POSITION                              0x5
#define _PWM3ERS_ERS5_SIZE                                  0x1
#define _PWM3ERS_ERS5_LENGTH                                0x1
#define _PWM3ERS_ERS5_MASK                                  0x20
#define _PWM3ERS_ERS6_POSN                                  0x6
#define _PWM3ERS_ERS6_POSITION                              0x6
#define _PWM3ERS_ERS6_SIZE                                  0x1
#define _PWM3ERS_ERS6_LENGTH                                0x1
#define _PWM3ERS_ERS6_MASK                                  0x40
#define _PWM3ERS_ERS7_POSN                                  0x7
#define _PWM3ERS_ERS7_POSITION                              0x7
#define _PWM3ERS_ERS7_SIZE                                  0x1
#define _PWM3ERS_ERS7_LENGTH                                0x1
#define _PWM3ERS_ERS7_MASK                                  0x80

// Register: PWM3CLK
#define PWM3CLK PWM3CLK
extern volatile unsigned char           PWM3CLK             __at(0x47F);
#ifndef _LIB_BUILD
asm("PWM3CLK equ 047Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
        unsigned CLK5                   :1;
        unsigned CLK6                   :1;
        unsigned CLK7                   :1;
    };
} PWM3CLKbits_t;
extern volatile PWM3CLKbits_t PWM3CLKbits __at(0x47F);
// bitfield macros
#define _PWM3CLK_CLK_POSN                                   0x0
#define _PWM3CLK_CLK_POSITION                               0x0
#define _PWM3CLK_CLK_SIZE                                   0x8
#define _PWM3CLK_CLK_LENGTH                                 0x8
#define _PWM3CLK_CLK_MASK                                   0xFF
#define _PWM3CLK_CLK0_POSN                                  0x0
#define _PWM3CLK_CLK0_POSITION                              0x0
#define _PWM3CLK_CLK0_SIZE                                  0x1
#define _PWM3CLK_CLK0_LENGTH                                0x1
#define _PWM3CLK_CLK0_MASK                                  0x1
#define _PWM3CLK_CLK1_POSN                                  0x1
#define _PWM3CLK_CLK1_POSITION                              0x1
#define _PWM3CLK_CLK1_SIZE                                  0x1
#define _PWM3CLK_CLK1_LENGTH                                0x1
#define _PWM3CLK_CLK1_MASK                                  0x2
#define _PWM3CLK_CLK2_POSN                                  0x2
#define _PWM3CLK_CLK2_POSITION                              0x2
#define _PWM3CLK_CLK2_SIZE                                  0x1
#define _PWM3CLK_CLK2_LENGTH                                0x1
#define _PWM3CLK_CLK2_MASK                                  0x4
#define _PWM3CLK_CLK3_POSN                                  0x3
#define _PWM3CLK_CLK3_POSITION                              0x3
#define _PWM3CLK_CLK3_SIZE                                  0x1
#define _PWM3CLK_CLK3_LENGTH                                0x1
#define _PWM3CLK_CLK3_MASK                                  0x8
#define _PWM3CLK_CLK4_POSN                                  0x4
#define _PWM3CLK_CLK4_POSITION                              0x4
#define _PWM3CLK_CLK4_SIZE                                  0x1
#define _PWM3CLK_CLK4_LENGTH                                0x1
#define _PWM3CLK_CLK4_MASK                                  0x10
#define _PWM3CLK_CLK5_POSN                                  0x5
#define _PWM3CLK_CLK5_POSITION                              0x5
#define _PWM3CLK_CLK5_SIZE                                  0x1
#define _PWM3CLK_CLK5_LENGTH                                0x1
#define _PWM3CLK_CLK5_MASK                                  0x20
#define _PWM3CLK_CLK6_POSN                                  0x6
#define _PWM3CLK_CLK6_POSITION                              0x6
#define _PWM3CLK_CLK6_SIZE                                  0x1
#define _PWM3CLK_CLK6_LENGTH                                0x1
#define _PWM3CLK_CLK6_MASK                                  0x40
#define _PWM3CLK_CLK7_POSN                                  0x7
#define _PWM3CLK_CLK7_POSITION                              0x7
#define _PWM3CLK_CLK7_SIZE                                  0x1
#define _PWM3CLK_CLK7_LENGTH                                0x1
#define _PWM3CLK_CLK7_MASK                                  0x80

// Register: PWM3LDS
#define PWM3LDS PWM3LDS
extern volatile unsigned char           PWM3LDS             __at(0x480);
#ifndef _LIB_BUILD
asm("PWM3LDS equ 0480h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LDS                    :8;
    };
    struct {
        unsigned LDS0                   :1;
        unsigned LDS1                   :1;
        unsigned LDS2                   :1;
        unsigned LDS3                   :1;
        unsigned LDS4                   :1;
        unsigned LDS5                   :1;
        unsigned LDS6                   :1;
        unsigned LDS7                   :1;
    };
} PWM3LDSbits_t;
extern volatile PWM3LDSbits_t PWM3LDSbits __at(0x480);
// bitfield macros
#define _PWM3LDS_LDS_POSN                                   0x0
#define _PWM3LDS_LDS_POSITION                               0x0
#define _PWM3LDS_LDS_SIZE                                   0x8
#define _PWM3LDS_LDS_LENGTH                                 0x8
#define _PWM3LDS_LDS_MASK                                   0xFF
#define _PWM3LDS_LDS0_POSN                                  0x0
#define _PWM3LDS_LDS0_POSITION                              0x0
#define _PWM3LDS_LDS0_SIZE                                  0x1
#define _PWM3LDS_LDS0_LENGTH                                0x1
#define _PWM3LDS_LDS0_MASK                                  0x1
#define _PWM3LDS_LDS1_POSN                                  0x1
#define _PWM3LDS_LDS1_POSITION                              0x1
#define _PWM3LDS_LDS1_SIZE                                  0x1
#define _PWM3LDS_LDS1_LENGTH                                0x1
#define _PWM3LDS_LDS1_MASK                                  0x2
#define _PWM3LDS_LDS2_POSN                                  0x2
#define _PWM3LDS_LDS2_POSITION                              0x2
#define _PWM3LDS_LDS2_SIZE                                  0x1
#define _PWM3LDS_LDS2_LENGTH                                0x1
#define _PWM3LDS_LDS2_MASK                                  0x4
#define _PWM3LDS_LDS3_POSN                                  0x3
#define _PWM3LDS_LDS3_POSITION                              0x3
#define _PWM3LDS_LDS3_SIZE                                  0x1
#define _PWM3LDS_LDS3_LENGTH                                0x1
#define _PWM3LDS_LDS3_MASK                                  0x8
#define _PWM3LDS_LDS4_POSN                                  0x4
#define _PWM3LDS_LDS4_POSITION                              0x4
#define _PWM3LDS_LDS4_SIZE                                  0x1
#define _PWM3LDS_LDS4_LENGTH                                0x1
#define _PWM3LDS_LDS4_MASK                                  0x10
#define _PWM3LDS_LDS5_POSN                                  0x5
#define _PWM3LDS_LDS5_POSITION                              0x5
#define _PWM3LDS_LDS5_SIZE                                  0x1
#define _PWM3LDS_LDS5_LENGTH                                0x1
#define _PWM3LDS_LDS5_MASK                                  0x20
#define _PWM3LDS_LDS6_POSN                                  0x6
#define _PWM3LDS_LDS6_POSITION                              0x6
#define _PWM3LDS_LDS6_SIZE                                  0x1
#define _PWM3LDS_LDS6_LENGTH                                0x1
#define _PWM3LDS_LDS6_MASK                                  0x40
#define _PWM3LDS_LDS7_POSN                                  0x7
#define _PWM3LDS_LDS7_POSITION                              0x7
#define _PWM3LDS_LDS7_SIZE                                  0x1
#define _PWM3LDS_LDS7_LENGTH                                0x1
#define _PWM3LDS_LDS7_MASK                                  0x80

// Register: PWM3PR
#define PWM3PR PWM3PR
extern volatile unsigned short          PWM3PR              __at(0x481);
#ifndef _LIB_BUILD
asm("PWM3PR equ 0481h");
#endif

// Register: PWM3PRL
#define PWM3PRL PWM3PRL
extern volatile unsigned char           PWM3PRL             __at(0x481);
#ifndef _LIB_BUILD
asm("PWM3PRL equ 0481h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
} PWM3PRLbits_t;
extern volatile PWM3PRLbits_t PWM3PRLbits __at(0x481);
// bitfield macros
#define _PWM3PRL_PRL_POSN                                   0x0
#define _PWM3PRL_PRL_POSITION                               0x0
#define _PWM3PRL_PRL_SIZE                                   0x8
#define _PWM3PRL_PRL_LENGTH                                 0x8
#define _PWM3PRL_PRL_MASK                                   0xFF

// Register: PWM3PRH
#define PWM3PRH PWM3PRH
extern volatile unsigned char           PWM3PRH             __at(0x482);
#ifndef _LIB_BUILD
asm("PWM3PRH equ 0482h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
} PWM3PRHbits_t;
extern volatile PWM3PRHbits_t PWM3PRHbits __at(0x482);
// bitfield macros
#define _PWM3PRH_PRH_POSN                                   0x0
#define _PWM3PRH_PRH_POSITION                               0x0
#define _PWM3PRH_PRH_SIZE                                   0x8
#define _PWM3PRH_PRH_LENGTH                                 0x8
#define _PWM3PRH_PRH_MASK                                   0xFF

// Register: PWM3CPRE
#define PWM3CPRE PWM3CPRE
extern volatile unsigned char           PWM3CPRE            __at(0x483);
#ifndef _LIB_BUILD
asm("PWM3CPRE equ 0483h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRE                   :8;
    };
} PWM3CPREbits_t;
extern volatile PWM3CPREbits_t PWM3CPREbits __at(0x483);
// bitfield macros
#define _PWM3CPRE_CPRE_POSN                                 0x0
#define _PWM3CPRE_CPRE_POSITION                             0x0
#define _PWM3CPRE_CPRE_SIZE                                 0x8
#define _PWM3CPRE_CPRE_LENGTH                               0x8
#define _PWM3CPRE_CPRE_MASK                                 0xFF

// Register: PWM3PIPOS
#define PWM3PIPOS PWM3PIPOS
extern volatile unsigned char           PWM3PIPOS           __at(0x484);
#ifndef _LIB_BUILD
asm("PWM3PIPOS equ 0484h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIPOS                  :8;
    };
} PWM3PIPOSbits_t;
extern volatile PWM3PIPOSbits_t PWM3PIPOSbits __at(0x484);
// bitfield macros
#define _PWM3PIPOS_PIPOS_POSN                               0x0
#define _PWM3PIPOS_PIPOS_POSITION                           0x0
#define _PWM3PIPOS_PIPOS_SIZE                               0x8
#define _PWM3PIPOS_PIPOS_LENGTH                             0x8
#define _PWM3PIPOS_PIPOS_MASK                               0xFF

// Register: PWM3GIR
#define PWM3GIR PWM3GIR
extern volatile unsigned char           PWM3GIR             __at(0x485);
#ifndef _LIB_BUILD
asm("PWM3GIR equ 0485h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IF                 :1;
        unsigned S1P2IF                 :1;
    };
} PWM3GIRbits_t;
extern volatile PWM3GIRbits_t PWM3GIRbits __at(0x485);
// bitfield macros
#define _PWM3GIR_S1P1IF_POSN                                0x0
#define _PWM3GIR_S1P1IF_POSITION                            0x0
#define _PWM3GIR_S1P1IF_SIZE                                0x1
#define _PWM3GIR_S1P1IF_LENGTH                              0x1
#define _PWM3GIR_S1P1IF_MASK                                0x1
#define _PWM3GIR_S1P2IF_POSN                                0x1
#define _PWM3GIR_S1P2IF_POSITION                            0x1
#define _PWM3GIR_S1P2IF_SIZE                                0x1
#define _PWM3GIR_S1P2IF_LENGTH                              0x1
#define _PWM3GIR_S1P2IF_MASK                                0x2

// Register: PWM3GIE
#define PWM3GIE PWM3GIE
extern volatile unsigned char           PWM3GIE             __at(0x486);
#ifndef _LIB_BUILD
asm("PWM3GIE equ 0486h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IE                 :1;
        unsigned S1P2IE                 :1;
    };
} PWM3GIEbits_t;
extern volatile PWM3GIEbits_t PWM3GIEbits __at(0x486);
// bitfield macros
#define _PWM3GIE_S1P1IE_POSN                                0x0
#define _PWM3GIE_S1P1IE_POSITION                            0x0
#define _PWM3GIE_S1P1IE_SIZE                                0x1
#define _PWM3GIE_S1P1IE_LENGTH                              0x1
#define _PWM3GIE_S1P1IE_MASK                                0x1
#define _PWM3GIE_S1P2IE_POSN                                0x1
#define _PWM3GIE_S1P2IE_POSITION                            0x1
#define _PWM3GIE_S1P2IE_SIZE                                0x1
#define _PWM3GIE_S1P2IE_LENGTH                              0x1
#define _PWM3GIE_S1P2IE_MASK                                0x2

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0x487);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0487h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERSNOW                 :1;
        unsigned ERSPOL                 :1;
        unsigned LD                     :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0x487);
// bitfield macros
#define _PWM3CON_ERSNOW_POSN                                0x0
#define _PWM3CON_ERSNOW_POSITION                            0x0
#define _PWM3CON_ERSNOW_SIZE                                0x1
#define _PWM3CON_ERSNOW_LENGTH                              0x1
#define _PWM3CON_ERSNOW_MASK                                0x1
#define _PWM3CON_ERSPOL_POSN                                0x1
#define _PWM3CON_ERSPOL_POSITION                            0x1
#define _PWM3CON_ERSPOL_SIZE                                0x1
#define _PWM3CON_ERSPOL_LENGTH                              0x1
#define _PWM3CON_ERSPOL_MASK                                0x2
#define _PWM3CON_LD_POSN                                    0x2
#define _PWM3CON_LD_POSITION                                0x2
#define _PWM3CON_LD_SIZE                                    0x1
#define _PWM3CON_LD_LENGTH                                  0x1
#define _PWM3CON_LD_MASK                                    0x4
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80

// Register: PWM3S1CFG
#define PWM3S1CFG PWM3S1CFG
extern volatile unsigned char           PWM3S1CFG           __at(0x488);
#ifndef _LIB_BUILD
asm("PWM3S1CFG equ 0488h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned PPEN                   :1;
        unsigned                        :2;
        unsigned POL1                   :1;
        unsigned POL2                   :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} PWM3S1CFGbits_t;
extern volatile PWM3S1CFGbits_t PWM3S1CFGbits __at(0x488);
// bitfield macros
#define _PWM3S1CFG_MODE_POSN                                0x0
#define _PWM3S1CFG_MODE_POSITION                            0x0
#define _PWM3S1CFG_MODE_SIZE                                0x3
#define _PWM3S1CFG_MODE_LENGTH                              0x3
#define _PWM3S1CFG_MODE_MASK                                0x7
#define _PWM3S1CFG_PPEN_POSN                                0x3
#define _PWM3S1CFG_PPEN_POSITION                            0x3
#define _PWM3S1CFG_PPEN_SIZE                                0x1
#define _PWM3S1CFG_PPEN_LENGTH                              0x1
#define _PWM3S1CFG_PPEN_MASK                                0x8
#define _PWM3S1CFG_POL1_POSN                                0x6
#define _PWM3S1CFG_POL1_POSITION                            0x6
#define _PWM3S1CFG_POL1_SIZE                                0x1
#define _PWM3S1CFG_POL1_LENGTH                              0x1
#define _PWM3S1CFG_POL1_MASK                                0x40
#define _PWM3S1CFG_POL2_POSN                                0x7
#define _PWM3S1CFG_POL2_POSITION                            0x7
#define _PWM3S1CFG_POL2_SIZE                                0x1
#define _PWM3S1CFG_POL2_LENGTH                              0x1
#define _PWM3S1CFG_POL2_MASK                                0x80
#define _PWM3S1CFG_MODE0_POSN                               0x0
#define _PWM3S1CFG_MODE0_POSITION                           0x0
#define _PWM3S1CFG_MODE0_SIZE                               0x1
#define _PWM3S1CFG_MODE0_LENGTH                             0x1
#define _PWM3S1CFG_MODE0_MASK                               0x1
#define _PWM3S1CFG_MODE1_POSN                               0x1
#define _PWM3S1CFG_MODE1_POSITION                           0x1
#define _PWM3S1CFG_MODE1_SIZE                               0x1
#define _PWM3S1CFG_MODE1_LENGTH                             0x1
#define _PWM3S1CFG_MODE1_MASK                               0x2
#define _PWM3S1CFG_MODE2_POSN                               0x2
#define _PWM3S1CFG_MODE2_POSITION                           0x2
#define _PWM3S1CFG_MODE2_SIZE                               0x1
#define _PWM3S1CFG_MODE2_LENGTH                             0x1
#define _PWM3S1CFG_MODE2_MASK                               0x4

// Register: PWM3S1P1
#define PWM3S1P1 PWM3S1P1
extern volatile unsigned short          PWM3S1P1            __at(0x489);
#ifndef _LIB_BUILD
asm("PWM3S1P1 equ 0489h");
#endif

// Register: PWM3S1P1L
#define PWM3S1P1L PWM3S1P1L
extern volatile unsigned char           PWM3S1P1L           __at(0x489);
#ifndef _LIB_BUILD
asm("PWM3S1P1L equ 0489h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1L                  :8;
    };
} PWM3S1P1Lbits_t;
extern volatile PWM3S1P1Lbits_t PWM3S1P1Lbits __at(0x489);
// bitfield macros
#define _PWM3S1P1L_S1P1L_POSN                               0x0
#define _PWM3S1P1L_S1P1L_POSITION                           0x0
#define _PWM3S1P1L_S1P1L_SIZE                               0x8
#define _PWM3S1P1L_S1P1L_LENGTH                             0x8
#define _PWM3S1P1L_S1P1L_MASK                               0xFF

// Register: PWM3S1P1H
#define PWM3S1P1H PWM3S1P1H
extern volatile unsigned char           PWM3S1P1H           __at(0x48A);
#ifndef _LIB_BUILD
asm("PWM3S1P1H equ 048Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1H                  :8;
    };
} PWM3S1P1Hbits_t;
extern volatile PWM3S1P1Hbits_t PWM3S1P1Hbits __at(0x48A);
// bitfield macros
#define _PWM3S1P1H_S1P1H_POSN                               0x0
#define _PWM3S1P1H_S1P1H_POSITION                           0x0
#define _PWM3S1P1H_S1P1H_SIZE                               0x8
#define _PWM3S1P1H_S1P1H_LENGTH                             0x8
#define _PWM3S1P1H_S1P1H_MASK                               0xFF

// Register: PWM3S1P2
#define PWM3S1P2 PWM3S1P2
extern volatile unsigned short          PWM3S1P2            __at(0x48B);
#ifndef _LIB_BUILD
asm("PWM3S1P2 equ 048Bh");
#endif

// Register: PWM3S1P2L
#define PWM3S1P2L PWM3S1P2L
extern volatile unsigned char           PWM3S1P2L           __at(0x48B);
#ifndef _LIB_BUILD
asm("PWM3S1P2L equ 048Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2L                  :8;
    };
} PWM3S1P2Lbits_t;
extern volatile PWM3S1P2Lbits_t PWM3S1P2Lbits __at(0x48B);
// bitfield macros
#define _PWM3S1P2L_S1P2L_POSN                               0x0
#define _PWM3S1P2L_S1P2L_POSITION                           0x0
#define _PWM3S1P2L_S1P2L_SIZE                               0x8
#define _PWM3S1P2L_S1P2L_LENGTH                             0x8
#define _PWM3S1P2L_S1P2L_MASK                               0xFF

// Register: PWM3S1P2H
#define PWM3S1P2H PWM3S1P2H
extern volatile unsigned char           PWM3S1P2H           __at(0x48C);
#ifndef _LIB_BUILD
asm("PWM3S1P2H equ 048Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2H                  :8;
    };
} PWM3S1P2Hbits_t;
extern volatile PWM3S1P2Hbits_t PWM3S1P2Hbits __at(0x48C);
// bitfield macros
#define _PWM3S1P2H_S1P2H_POSN                               0x0
#define _PWM3S1P2H_S1P2H_POSITION                           0x0
#define _PWM3S1P2H_S1P2H_SIZE                               0x8
#define _PWM3S1P2H_S1P2H_LENGTH                             0x8
#define _PWM3S1P2H_S1P2H_MASK                               0xFF

// Register: PWMLOAD
#define PWMLOAD PWMLOAD
extern volatile unsigned char           PWMLOAD             __at(0x49C);
#ifndef _LIB_BUILD
asm("PWMLOAD equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MPWM1LD                :1;
        unsigned MPWM2LD                :1;
        unsigned MPWM3LD                :1;
    };
} PWMLOADbits_t;
extern volatile PWMLOADbits_t PWMLOADbits __at(0x49C);
// bitfield macros
#define _PWMLOAD_MPWM1LD_POSN                               0x0
#define _PWMLOAD_MPWM1LD_POSITION                           0x0
#define _PWMLOAD_MPWM1LD_SIZE                               0x1
#define _PWMLOAD_MPWM1LD_LENGTH                             0x1
#define _PWMLOAD_MPWM1LD_MASK                               0x1
#define _PWMLOAD_MPWM2LD_POSN                               0x1
#define _PWMLOAD_MPWM2LD_POSITION                           0x1
#define _PWMLOAD_MPWM2LD_SIZE                               0x1
#define _PWMLOAD_MPWM2LD_LENGTH                             0x1
#define _PWMLOAD_MPWM2LD_MASK                               0x2
#define _PWMLOAD_MPWM3LD_POSN                               0x2
#define _PWMLOAD_MPWM3LD_POSITION                           0x2
#define _PWMLOAD_MPWM3LD_SIZE                               0x1
#define _PWMLOAD_MPWM3LD_LENGTH                             0x1
#define _PWMLOAD_MPWM3LD_MASK                               0x4

// Register: PWMEN
#define PWMEN PWMEN
extern volatile unsigned char           PWMEN               __at(0x49D);
#ifndef _LIB_BUILD
asm("PWMEN equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MPWM1EN                :1;
        unsigned MPWM2EN                :1;
        unsigned MPWM3EN                :1;
    };
} PWMENbits_t;
extern volatile PWMENbits_t PWMENbits __at(0x49D);
// bitfield macros
#define _PWMEN_MPWM1EN_POSN                                 0x0
#define _PWMEN_MPWM1EN_POSITION                             0x0
#define _PWMEN_MPWM1EN_SIZE                                 0x1
#define _PWMEN_MPWM1EN_LENGTH                               0x1
#define _PWMEN_MPWM1EN_MASK                                 0x1
#define _PWMEN_MPWM2EN_POSN                                 0x1
#define _PWMEN_MPWM2EN_POSITION                             0x1
#define _PWMEN_MPWM2EN_SIZE                                 0x1
#define _PWMEN_MPWM2EN_LENGTH                               0x1
#define _PWMEN_MPWM2EN_MASK                                 0x2
#define _PWMEN_MPWM3EN_POSN                                 0x2
#define _PWMEN_MPWM3EN_POSITION                             0x2
#define _PWMEN_MPWM3EN_SIZE                                 0x1
#define _PWMEN_MPWM3EN_LENGTH                               0x1
#define _PWMEN_MPWM3EN_MASK                                 0x4

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x49E);
#ifndef _LIB_BUILD
asm("PIE0 equ 049Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIE                   :1;
        unsigned HLVDIE                 :1;
        unsigned OSFIE                  :1;
        unsigned CSWIE                  :1;
        unsigned                        :1;
        unsigned CLC1IE                 :1;
        unsigned                        :1;
        unsigned IOCIE                  :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x49E);
// bitfield macros
#define _PIE0_SWIE_POSN                                     0x0
#define _PIE0_SWIE_POSITION                                 0x0
#define _PIE0_SWIE_SIZE                                     0x1
#define _PIE0_SWIE_LENGTH                                   0x1
#define _PIE0_SWIE_MASK                                     0x1
#define _PIE0_HLVDIE_POSN                                   0x1
#define _PIE0_HLVDIE_POSITION                               0x1
#define _PIE0_HLVDIE_SIZE                                   0x1
#define _PIE0_HLVDIE_LENGTH                                 0x1
#define _PIE0_HLVDIE_MASK                                   0x2
#define _PIE0_OSFIE_POSN                                    0x2
#define _PIE0_OSFIE_POSITION                                0x2
#define _PIE0_OSFIE_SIZE                                    0x1
#define _PIE0_OSFIE_LENGTH                                  0x1
#define _PIE0_OSFIE_MASK                                    0x4
#define _PIE0_CSWIE_POSN                                    0x3
#define _PIE0_CSWIE_POSITION                                0x3
#define _PIE0_CSWIE_SIZE                                    0x1
#define _PIE0_CSWIE_LENGTH                                  0x1
#define _PIE0_CSWIE_MASK                                    0x8
#define _PIE0_CLC1IE_POSN                                   0x5
#define _PIE0_CLC1IE_POSITION                               0x5
#define _PIE0_CLC1IE_SIZE                                   0x1
#define _PIE0_CLC1IE_LENGTH                                 0x1
#define _PIE0_CLC1IE_MASK                                   0x20
#define _PIE0_IOCIE_POSN                                    0x7
#define _PIE0_IOCIE_POSITION                                0x7
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x80

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x49F);
#ifndef _LIB_BUILD
asm("PIE1 equ 049Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IE                 :1;
        unsigned ZCDIE                  :1;
        unsigned ADIE                   :1;
        unsigned ACTIE                  :1;
        unsigned C1IE                   :1;
        unsigned SMT1IE                 :1;
        unsigned SMT1PRAIE              :1;
        unsigned SMT1PWAIE              :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x49F);
// bitfield macros
#define _PIE1_INT0IE_POSN                                   0x0
#define _PIE1_INT0IE_POSITION                               0x0
#define _PIE1_INT0IE_SIZE                                   0x1
#define _PIE1_INT0IE_LENGTH                                 0x1
#define _PIE1_INT0IE_MASK                                   0x1
#define _PIE1_ZCDIE_POSN                                    0x1
#define _PIE1_ZCDIE_POSITION                                0x1
#define _PIE1_ZCDIE_SIZE                                    0x1
#define _PIE1_ZCDIE_LENGTH                                  0x1
#define _PIE1_ZCDIE_MASK                                    0x2
#define _PIE1_ADIE_POSN                                     0x2
#define _PIE1_ADIE_POSITION                                 0x2
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x4
#define _PIE1_ACTIE_POSN                                    0x3
#define _PIE1_ACTIE_POSITION                                0x3
#define _PIE1_ACTIE_SIZE                                    0x1
#define _PIE1_ACTIE_LENGTH                                  0x1
#define _PIE1_ACTIE_MASK                                    0x8
#define _PIE1_C1IE_POSN                                     0x4
#define _PIE1_C1IE_POSITION                                 0x4
#define _PIE1_C1IE_SIZE                                     0x1
#define _PIE1_C1IE_LENGTH                                   0x1
#define _PIE1_C1IE_MASK                                     0x10
#define _PIE1_SMT1IE_POSN                                   0x5
#define _PIE1_SMT1IE_POSITION                               0x5
#define _PIE1_SMT1IE_SIZE                                   0x1
#define _PIE1_SMT1IE_LENGTH                                 0x1
#define _PIE1_SMT1IE_MASK                                   0x20
#define _PIE1_SMT1PRAIE_POSN                                0x6
#define _PIE1_SMT1PRAIE_POSITION                            0x6
#define _PIE1_SMT1PRAIE_SIZE                                0x1
#define _PIE1_SMT1PRAIE_LENGTH                              0x1
#define _PIE1_SMT1PRAIE_MASK                                0x40
#define _PIE1_SMT1PWAIE_POSN                                0x7
#define _PIE1_SMT1PWAIE_POSITION                            0x7
#define _PIE1_SMT1PWAIE_SIZE                                0x1
#define _PIE1_SMT1PWAIE_LENGTH                              0x1
#define _PIE1_SMT1PWAIE_MASK                                0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x4A0);
#ifndef _LIB_BUILD
asm("PIE2 equ 04A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADTIE                  :1;
        unsigned                        :3;
        unsigned DMA1SCNTIE             :1;
        unsigned DMA1DCNTIE             :1;
        unsigned DMA1ORIE               :1;
        unsigned DMA1AIE                :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x4A0);
// bitfield macros
#define _PIE2_ADTIE_POSN                                    0x0
#define _PIE2_ADTIE_POSITION                                0x0
#define _PIE2_ADTIE_SIZE                                    0x1
#define _PIE2_ADTIE_LENGTH                                  0x1
#define _PIE2_ADTIE_MASK                                    0x1
#define _PIE2_DMA1SCNTIE_POSN                               0x4
#define _PIE2_DMA1SCNTIE_POSITION                           0x4
#define _PIE2_DMA1SCNTIE_SIZE                               0x1
#define _PIE2_DMA1SCNTIE_LENGTH                             0x1
#define _PIE2_DMA1SCNTIE_MASK                               0x10
#define _PIE2_DMA1DCNTIE_POSN                               0x5
#define _PIE2_DMA1DCNTIE_POSITION                           0x5
#define _PIE2_DMA1DCNTIE_SIZE                               0x1
#define _PIE2_DMA1DCNTIE_LENGTH                             0x1
#define _PIE2_DMA1DCNTIE_MASK                               0x20
#define _PIE2_DMA1ORIE_POSN                                 0x6
#define _PIE2_DMA1ORIE_POSITION                             0x6
#define _PIE2_DMA1ORIE_SIZE                                 0x1
#define _PIE2_DMA1ORIE_LENGTH                               0x1
#define _PIE2_DMA1ORIE_MASK                                 0x40
#define _PIE2_DMA1AIE_POSN                                  0x7
#define _PIE2_DMA1AIE_POSITION                              0x7
#define _PIE2_DMA1AIE_SIZE                                  0x1
#define _PIE2_DMA1AIE_LENGTH                                0x1
#define _PIE2_DMA1AIE_MASK                                  0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x4A1);
#ifndef _LIB_BUILD
asm("PIE3 equ 04A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIE               :1;
        unsigned SPI1TXIE               :1;
        unsigned SPI1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned TMR1IE                 :1;
        unsigned TMR1GIE                :1;
        unsigned CCP1IE                 :1;
        unsigned TMR0IE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x4A1);
// bitfield macros
#define _PIE3_SPI1RXIE_POSN                                 0x0
#define _PIE3_SPI1RXIE_POSITION                             0x0
#define _PIE3_SPI1RXIE_SIZE                                 0x1
#define _PIE3_SPI1RXIE_LENGTH                               0x1
#define _PIE3_SPI1RXIE_MASK                                 0x1
#define _PIE3_SPI1TXIE_POSN                                 0x1
#define _PIE3_SPI1TXIE_POSITION                             0x1
#define _PIE3_SPI1TXIE_SIZE                                 0x1
#define _PIE3_SPI1TXIE_LENGTH                               0x1
#define _PIE3_SPI1TXIE_MASK                                 0x2
#define _PIE3_SPI1IE_POSN                                   0x2
#define _PIE3_SPI1IE_POSITION                               0x2
#define _PIE3_SPI1IE_SIZE                                   0x1
#define _PIE3_SPI1IE_LENGTH                                 0x1
#define _PIE3_SPI1IE_MASK                                   0x4
#define _PIE3_TMR2IE_POSN                                   0x3
#define _PIE3_TMR2IE_POSITION                               0x3
#define _PIE3_TMR2IE_SIZE                                   0x1
#define _PIE3_TMR2IE_LENGTH                                 0x1
#define _PIE3_TMR2IE_MASK                                   0x8
#define _PIE3_TMR1IE_POSN                                   0x4
#define _PIE3_TMR1IE_POSITION                               0x4
#define _PIE3_TMR1IE_SIZE                                   0x1
#define _PIE3_TMR1IE_LENGTH                                 0x1
#define _PIE3_TMR1IE_MASK                                   0x10
#define _PIE3_TMR1GIE_POSN                                  0x5
#define _PIE3_TMR1GIE_POSITION                              0x5
#define _PIE3_TMR1GIE_SIZE                                  0x1
#define _PIE3_TMR1GIE_LENGTH                                0x1
#define _PIE3_TMR1GIE_MASK                                  0x20
#define _PIE3_CCP1IE_POSN                                   0x6
#define _PIE3_CCP1IE_POSITION                               0x6
#define _PIE3_CCP1IE_SIZE                                   0x1
#define _PIE3_CCP1IE_LENGTH                                 0x1
#define _PIE3_CCP1IE_MASK                                   0x40
#define _PIE3_TMR0IE_POSN                                   0x7
#define _PIE3_TMR0IE_POSITION                               0x7
#define _PIE3_TMR0IE_SIZE                                   0x1
#define _PIE3_TMR0IE_LENGTH                                 0x1
#define _PIE3_TMR0IE_MASK                                   0x80

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x4A2);
#ifndef _LIB_BUILD
asm("PIE4 equ 04A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIE                 :1;
        unsigned U1TXIE                 :1;
        unsigned U1EIE                  :1;
        unsigned U1IE                   :1;
        unsigned                        :2;
        unsigned PWM1PIE                :1;
        unsigned PWM1IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x4A2);
// bitfield macros
#define _PIE4_U1RXIE_POSN                                   0x0
#define _PIE4_U1RXIE_POSITION                               0x0
#define _PIE4_U1RXIE_SIZE                                   0x1
#define _PIE4_U1RXIE_LENGTH                                 0x1
#define _PIE4_U1RXIE_MASK                                   0x1
#define _PIE4_U1TXIE_POSN                                   0x1
#define _PIE4_U1TXIE_POSITION                               0x1
#define _PIE4_U1TXIE_SIZE                                   0x1
#define _PIE4_U1TXIE_LENGTH                                 0x1
#define _PIE4_U1TXIE_MASK                                   0x2
#define _PIE4_U1EIE_POSN                                    0x2
#define _PIE4_U1EIE_POSITION                                0x2
#define _PIE4_U1EIE_SIZE                                    0x1
#define _PIE4_U1EIE_LENGTH                                  0x1
#define _PIE4_U1EIE_MASK                                    0x4
#define _PIE4_U1IE_POSN                                     0x3
#define _PIE4_U1IE_POSITION                                 0x3
#define _PIE4_U1IE_SIZE                                     0x1
#define _PIE4_U1IE_LENGTH                                   0x1
#define _PIE4_U1IE_MASK                                     0x8
#define _PIE4_PWM1PIE_POSN                                  0x6
#define _PIE4_PWM1PIE_POSITION                              0x6
#define _PIE4_PWM1PIE_SIZE                                  0x1
#define _PIE4_PWM1PIE_LENGTH                                0x1
#define _PIE4_PWM1PIE_MASK                                  0x40
#define _PIE4_PWM1IE_POSN                                   0x7
#define _PIE4_PWM1IE_POSITION                               0x7
#define _PIE4_PWM1IE_SIZE                                   0x1
#define _PIE4_PWM1IE_LENGTH                                 0x1
#define _PIE4_PWM1IE_MASK                                   0x80

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x4A3);
#ifndef _LIB_BUILD
asm("PIE5 equ 04A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI2RXIE               :1;
        unsigned SPI2TXIE               :1;
        unsigned SPI2IE                 :1;
        unsigned                        :1;
        unsigned TMR3IE                 :1;
        unsigned TMR3GIE                :1;
        unsigned PWM2PIE                :1;
        unsigned PWM2IE                 :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x4A3);
// bitfield macros
#define _PIE5_SPI2RXIE_POSN                                 0x0
#define _PIE5_SPI2RXIE_POSITION                             0x0
#define _PIE5_SPI2RXIE_SIZE                                 0x1
#define _PIE5_SPI2RXIE_LENGTH                               0x1
#define _PIE5_SPI2RXIE_MASK                                 0x1
#define _PIE5_SPI2TXIE_POSN                                 0x1
#define _PIE5_SPI2TXIE_POSITION                             0x1
#define _PIE5_SPI2TXIE_SIZE                                 0x1
#define _PIE5_SPI2TXIE_LENGTH                               0x1
#define _PIE5_SPI2TXIE_MASK                                 0x2
#define _PIE5_SPI2IE_POSN                                   0x2
#define _PIE5_SPI2IE_POSITION                               0x2
#define _PIE5_SPI2IE_SIZE                                   0x1
#define _PIE5_SPI2IE_LENGTH                                 0x1
#define _PIE5_SPI2IE_MASK                                   0x4
#define _PIE5_TMR3IE_POSN                                   0x4
#define _PIE5_TMR3IE_POSITION                               0x4
#define _PIE5_TMR3IE_SIZE                                   0x1
#define _PIE5_TMR3IE_LENGTH                                 0x1
#define _PIE5_TMR3IE_MASK                                   0x10
#define _PIE5_TMR3GIE_POSN                                  0x5
#define _PIE5_TMR3GIE_POSITION                              0x5
#define _PIE5_TMR3GIE_SIZE                                  0x1
#define _PIE5_TMR3GIE_LENGTH                                0x1
#define _PIE5_TMR3GIE_MASK                                  0x20
#define _PIE5_PWM2PIE_POSN                                  0x6
#define _PIE5_PWM2PIE_POSITION                              0x6
#define _PIE5_PWM2PIE_SIZE                                  0x1
#define _PIE5_PWM2PIE_LENGTH                                0x1
#define _PIE5_PWM2PIE_MASK                                  0x40
#define _PIE5_PWM2IE_POSN                                   0x7
#define _PIE5_PWM2IE_POSITION                               0x7
#define _PIE5_PWM2IE_SIZE                                   0x1
#define _PIE5_PWM2IE_LENGTH                                 0x1
#define _PIE5_PWM2IE_MASK                                   0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x4A4);
#ifndef _LIB_BUILD
asm("PIE6 equ 04A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CWG1IE                 :1;
        unsigned NCO1IE                 :1;
        unsigned DMA2SCNTIE             :1;
        unsigned DMA2DCNTIE             :1;
        unsigned DMA2ORIE               :1;
        unsigned DMA2AIE                :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x4A4);
// bitfield macros
#define _PIE6_INT1IE_POSN                                   0x0
#define _PIE6_INT1IE_POSITION                               0x0
#define _PIE6_INT1IE_SIZE                                   0x1
#define _PIE6_INT1IE_LENGTH                                 0x1
#define _PIE6_INT1IE_MASK                                   0x1
#define _PIE6_CLC2IE_POSN                                   0x1
#define _PIE6_CLC2IE_POSITION                               0x1
#define _PIE6_CLC2IE_SIZE                                   0x1
#define _PIE6_CLC2IE_LENGTH                                 0x1
#define _PIE6_CLC2IE_MASK                                   0x2
#define _PIE6_CWG1IE_POSN                                   0x2
#define _PIE6_CWG1IE_POSITION                               0x2
#define _PIE6_CWG1IE_SIZE                                   0x1
#define _PIE6_CWG1IE_LENGTH                                 0x1
#define _PIE6_CWG1IE_MASK                                   0x4
#define _PIE6_NCO1IE_POSN                                   0x3
#define _PIE6_NCO1IE_POSITION                               0x3
#define _PIE6_NCO1IE_SIZE                                   0x1
#define _PIE6_NCO1IE_LENGTH                                 0x1
#define _PIE6_NCO1IE_MASK                                   0x8
#define _PIE6_DMA2SCNTIE_POSN                               0x4
#define _PIE6_DMA2SCNTIE_POSITION                           0x4
#define _PIE6_DMA2SCNTIE_SIZE                               0x1
#define _PIE6_DMA2SCNTIE_LENGTH                             0x1
#define _PIE6_DMA2SCNTIE_MASK                               0x10
#define _PIE6_DMA2DCNTIE_POSN                               0x5
#define _PIE6_DMA2DCNTIE_POSITION                           0x5
#define _PIE6_DMA2DCNTIE_SIZE                               0x1
#define _PIE6_DMA2DCNTIE_LENGTH                             0x1
#define _PIE6_DMA2DCNTIE_MASK                               0x20
#define _PIE6_DMA2ORIE_POSN                                 0x6
#define _PIE6_DMA2ORIE_POSITION                             0x6
#define _PIE6_DMA2ORIE_SIZE                                 0x1
#define _PIE6_DMA2ORIE_LENGTH                               0x1
#define _PIE6_DMA2ORIE_MASK                                 0x40
#define _PIE6_DMA2AIE_POSN                                  0x7
#define _PIE6_DMA2AIE_POSITION                              0x7
#define _PIE6_DMA2AIE_SIZE                                  0x1
#define _PIE6_DMA2AIE_LENGTH                                0x1
#define _PIE6_DMA2AIE_MASK                                  0x80

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x4A5);
#ifndef _LIB_BUILD
asm("PIE7 equ 04A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1RXIE               :1;
        unsigned I2C1TXIE               :1;
        unsigned I2C1IE                 :1;
        unsigned I2C1EIE                :1;
        unsigned                        :1;
        unsigned CLC3IE                 :1;
        unsigned PWM3PIE                :1;
        unsigned PWM3IE                 :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x4A5);
// bitfield macros
#define _PIE7_I2C1RXIE_POSN                                 0x0
#define _PIE7_I2C1RXIE_POSITION                             0x0
#define _PIE7_I2C1RXIE_SIZE                                 0x1
#define _PIE7_I2C1RXIE_LENGTH                               0x1
#define _PIE7_I2C1RXIE_MASK                                 0x1
#define _PIE7_I2C1TXIE_POSN                                 0x1
#define _PIE7_I2C1TXIE_POSITION                             0x1
#define _PIE7_I2C1TXIE_SIZE                                 0x1
#define _PIE7_I2C1TXIE_LENGTH                               0x1
#define _PIE7_I2C1TXIE_MASK                                 0x2
#define _PIE7_I2C1IE_POSN                                   0x2
#define _PIE7_I2C1IE_POSITION                               0x2
#define _PIE7_I2C1IE_SIZE                                   0x1
#define _PIE7_I2C1IE_LENGTH                                 0x1
#define _PIE7_I2C1IE_MASK                                   0x4
#define _PIE7_I2C1EIE_POSN                                  0x3
#define _PIE7_I2C1EIE_POSITION                              0x3
#define _PIE7_I2C1EIE_SIZE                                  0x1
#define _PIE7_I2C1EIE_LENGTH                                0x1
#define _PIE7_I2C1EIE_MASK                                  0x8
#define _PIE7_CLC3IE_POSN                                   0x5
#define _PIE7_CLC3IE_POSITION                               0x5
#define _PIE7_CLC3IE_SIZE                                   0x1
#define _PIE7_CLC3IE_LENGTH                                 0x1
#define _PIE7_CLC3IE_MASK                                   0x20
#define _PIE7_PWM3PIE_POSN                                  0x6
#define _PIE7_PWM3PIE_POSITION                              0x6
#define _PIE7_PWM3PIE_SIZE                                  0x1
#define _PIE7_PWM3PIE_LENGTH                                0x1
#define _PIE7_PWM3PIE_MASK                                  0x40
#define _PIE7_PWM3IE_POSN                                   0x7
#define _PIE7_PWM3IE_POSITION                               0x7
#define _PIE7_PWM3IE_SIZE                                   0x1
#define _PIE7_PWM3IE_LENGTH                                 0x1
#define _PIE7_PWM3IE_MASK                                   0x80

// Register: PIE8
#define PIE8 PIE8
extern volatile unsigned char           PIE8                __at(0x4A6);
#ifndef _LIB_BUILD
asm("PIE8 equ 04A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXIE                 :1;
        unsigned U2TXIE                 :1;
        unsigned U2EIE                  :1;
        unsigned U2IE                   :1;
        unsigned TMR5IE                 :1;
        unsigned TMR5GIE                :1;
        unsigned CCP2IE                 :1;
        unsigned SCANIE                 :1;
    };
} PIE8bits_t;
extern volatile PIE8bits_t PIE8bits __at(0x4A6);
// bitfield macros
#define _PIE8_U2RXIE_POSN                                   0x0
#define _PIE8_U2RXIE_POSITION                               0x0
#define _PIE8_U2RXIE_SIZE                                   0x1
#define _PIE8_U2RXIE_LENGTH                                 0x1
#define _PIE8_U2RXIE_MASK                                   0x1
#define _PIE8_U2TXIE_POSN                                   0x1
#define _PIE8_U2TXIE_POSITION                               0x1
#define _PIE8_U2TXIE_SIZE                                   0x1
#define _PIE8_U2TXIE_LENGTH                                 0x1
#define _PIE8_U2TXIE_MASK                                   0x2
#define _PIE8_U2EIE_POSN                                    0x2
#define _PIE8_U2EIE_POSITION                                0x2
#define _PIE8_U2EIE_SIZE                                    0x1
#define _PIE8_U2EIE_LENGTH                                  0x1
#define _PIE8_U2EIE_MASK                                    0x4
#define _PIE8_U2IE_POSN                                     0x3
#define _PIE8_U2IE_POSITION                                 0x3
#define _PIE8_U2IE_SIZE                                     0x1
#define _PIE8_U2IE_LENGTH                                   0x1
#define _PIE8_U2IE_MASK                                     0x8
#define _PIE8_TMR5IE_POSN                                   0x4
#define _PIE8_TMR5IE_POSITION                               0x4
#define _PIE8_TMR5IE_SIZE                                   0x1
#define _PIE8_TMR5IE_LENGTH                                 0x1
#define _PIE8_TMR5IE_MASK                                   0x10
#define _PIE8_TMR5GIE_POSN                                  0x5
#define _PIE8_TMR5GIE_POSITION                              0x5
#define _PIE8_TMR5GIE_SIZE                                  0x1
#define _PIE8_TMR5GIE_LENGTH                                0x1
#define _PIE8_TMR5GIE_MASK                                  0x20
#define _PIE8_CCP2IE_POSN                                   0x6
#define _PIE8_CCP2IE_POSITION                               0x6
#define _PIE8_CCP2IE_SIZE                                   0x1
#define _PIE8_CCP2IE_LENGTH                                 0x1
#define _PIE8_CCP2IE_MASK                                   0x40
#define _PIE8_SCANIE_POSN                                   0x7
#define _PIE8_SCANIE_POSITION                               0x7
#define _PIE8_SCANIE_SIZE                                   0x1
#define _PIE8_SCANIE_LENGTH                                 0x1
#define _PIE8_SCANIE_MASK                                   0x80

// Register: PIE9
#define PIE9 PIE9
extern volatile unsigned char           PIE9                __at(0x4A7);
#ifndef _LIB_BUILD
asm("PIE9 equ 04A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U3RXIE                 :1;
        unsigned U3TXIE                 :1;
        unsigned U3EIE                  :1;
        unsigned U3IE                   :1;
        unsigned                        :1;
        unsigned CLC4IE                 :1;
    };
} PIE9bits_t;
extern volatile PIE9bits_t PIE9bits __at(0x4A7);
// bitfield macros
#define _PIE9_U3RXIE_POSN                                   0x0
#define _PIE9_U3RXIE_POSITION                               0x0
#define _PIE9_U3RXIE_SIZE                                   0x1
#define _PIE9_U3RXIE_LENGTH                                 0x1
#define _PIE9_U3RXIE_MASK                                   0x1
#define _PIE9_U3TXIE_POSN                                   0x1
#define _PIE9_U3TXIE_POSITION                               0x1
#define _PIE9_U3TXIE_SIZE                                   0x1
#define _PIE9_U3TXIE_LENGTH                                 0x1
#define _PIE9_U3TXIE_MASK                                   0x2
#define _PIE9_U3EIE_POSN                                    0x2
#define _PIE9_U3EIE_POSITION                                0x2
#define _PIE9_U3EIE_SIZE                                    0x1
#define _PIE9_U3EIE_LENGTH                                  0x1
#define _PIE9_U3EIE_MASK                                    0x4
#define _PIE9_U3IE_POSN                                     0x3
#define _PIE9_U3IE_POSITION                                 0x3
#define _PIE9_U3IE_SIZE                                     0x1
#define _PIE9_U3IE_LENGTH                                   0x1
#define _PIE9_U3IE_MASK                                     0x8
#define _PIE9_CLC4IE_POSN                                   0x5
#define _PIE9_CLC4IE_POSITION                               0x5
#define _PIE9_CLC4IE_SIZE                                   0x1
#define _PIE9_CLC4IE_LENGTH                                 0x1
#define _PIE9_CLC4IE_MASK                                   0x20

// Register: PIE10
#define PIE10 PIE10
extern volatile unsigned char           PIE10               __at(0x4A8);
#ifndef _LIB_BUILD
asm("PIE10 equ 04A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT2IE                 :1;
        unsigned CLC5IE                 :1;
        unsigned CWG2IE                 :1;
        unsigned NCO2IE                 :1;
        unsigned DMA3SCNTIE             :1;
        unsigned DMA3DCNTIE             :1;
        unsigned DMA3ORIE               :1;
        unsigned DMA3AIE                :1;
    };
} PIE10bits_t;
extern volatile PIE10bits_t PIE10bits __at(0x4A8);
// bitfield macros
#define _PIE10_INT2IE_POSN                                  0x0
#define _PIE10_INT2IE_POSITION                              0x0
#define _PIE10_INT2IE_SIZE                                  0x1
#define _PIE10_INT2IE_LENGTH                                0x1
#define _PIE10_INT2IE_MASK                                  0x1
#define _PIE10_CLC5IE_POSN                                  0x1
#define _PIE10_CLC5IE_POSITION                              0x1
#define _PIE10_CLC5IE_SIZE                                  0x1
#define _PIE10_CLC5IE_LENGTH                                0x1
#define _PIE10_CLC5IE_MASK                                  0x2
#define _PIE10_CWG2IE_POSN                                  0x2
#define _PIE10_CWG2IE_POSITION                              0x2
#define _PIE10_CWG2IE_SIZE                                  0x1
#define _PIE10_CWG2IE_LENGTH                                0x1
#define _PIE10_CWG2IE_MASK                                  0x4
#define _PIE10_NCO2IE_POSN                                  0x3
#define _PIE10_NCO2IE_POSITION                              0x3
#define _PIE10_NCO2IE_SIZE                                  0x1
#define _PIE10_NCO2IE_LENGTH                                0x1
#define _PIE10_NCO2IE_MASK                                  0x8
#define _PIE10_DMA3SCNTIE_POSN                              0x4
#define _PIE10_DMA3SCNTIE_POSITION                          0x4
#define _PIE10_DMA3SCNTIE_SIZE                              0x1
#define _PIE10_DMA3SCNTIE_LENGTH                            0x1
#define _PIE10_DMA3SCNTIE_MASK                              0x10
#define _PIE10_DMA3DCNTIE_POSN                              0x5
#define _PIE10_DMA3DCNTIE_POSITION                          0x5
#define _PIE10_DMA3DCNTIE_SIZE                              0x1
#define _PIE10_DMA3DCNTIE_LENGTH                            0x1
#define _PIE10_DMA3DCNTIE_MASK                              0x20
#define _PIE10_DMA3ORIE_POSN                                0x6
#define _PIE10_DMA3ORIE_POSITION                            0x6
#define _PIE10_DMA3ORIE_SIZE                                0x1
#define _PIE10_DMA3ORIE_LENGTH                              0x1
#define _PIE10_DMA3ORIE_MASK                                0x40
#define _PIE10_DMA3AIE_POSN                                 0x7
#define _PIE10_DMA3AIE_POSITION                             0x7
#define _PIE10_DMA3AIE_SIZE                                 0x1
#define _PIE10_DMA3AIE_LENGTH                               0x1
#define _PIE10_DMA3AIE_MASK                                 0x80

// Register: PIE11
#define PIE11 PIE11
extern volatile unsigned char           PIE11               __at(0x4A9);
#ifndef _LIB_BUILD
asm("PIE11 equ 04A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3IE                 :1;
        unsigned CLC6IE                 :1;
        unsigned CWG3IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned DMA4SCNTIE             :1;
        unsigned DMA4DCNTIE             :1;
        unsigned DMA4ORIE               :1;
        unsigned DMA4AIE                :1;
    };
} PIE11bits_t;
extern volatile PIE11bits_t PIE11bits __at(0x4A9);
// bitfield macros
#define _PIE11_CCP3IE_POSN                                  0x0
#define _PIE11_CCP3IE_POSITION                              0x0
#define _PIE11_CCP3IE_SIZE                                  0x1
#define _PIE11_CCP3IE_LENGTH                                0x1
#define _PIE11_CCP3IE_MASK                                  0x1
#define _PIE11_CLC6IE_POSN                                  0x1
#define _PIE11_CLC6IE_POSITION                              0x1
#define _PIE11_CLC6IE_SIZE                                  0x1
#define _PIE11_CLC6IE_LENGTH                                0x1
#define _PIE11_CLC6IE_MASK                                  0x2
#define _PIE11_CWG3IE_POSN                                  0x2
#define _PIE11_CWG3IE_POSITION                              0x2
#define _PIE11_CWG3IE_SIZE                                  0x1
#define _PIE11_CWG3IE_LENGTH                                0x1
#define _PIE11_CWG3IE_MASK                                  0x4
#define _PIE11_TMR4IE_POSN                                  0x3
#define _PIE11_TMR4IE_POSITION                              0x3
#define _PIE11_TMR4IE_SIZE                                  0x1
#define _PIE11_TMR4IE_LENGTH                                0x1
#define _PIE11_TMR4IE_MASK                                  0x8
#define _PIE11_DMA4SCNTIE_POSN                              0x4
#define _PIE11_DMA4SCNTIE_POSITION                          0x4
#define _PIE11_DMA4SCNTIE_SIZE                              0x1
#define _PIE11_DMA4SCNTIE_LENGTH                            0x1
#define _PIE11_DMA4SCNTIE_MASK                              0x10
#define _PIE11_DMA4DCNTIE_POSN                              0x5
#define _PIE11_DMA4DCNTIE_POSITION                          0x5
#define _PIE11_DMA4DCNTIE_SIZE                              0x1
#define _PIE11_DMA4DCNTIE_LENGTH                            0x1
#define _PIE11_DMA4DCNTIE_MASK                              0x20
#define _PIE11_DMA4ORIE_POSN                                0x6
#define _PIE11_DMA4ORIE_POSITION                            0x6
#define _PIE11_DMA4ORIE_SIZE                                0x1
#define _PIE11_DMA4ORIE_LENGTH                              0x1
#define _PIE11_DMA4ORIE_MASK                                0x40
#define _PIE11_DMA4AIE_POSN                                 0x7
#define _PIE11_DMA4AIE_POSITION                             0x7
#define _PIE11_DMA4AIE_SIZE                                 0x1
#define _PIE11_DMA4AIE_LENGTH                               0x1
#define _PIE11_DMA4AIE_MASK                                 0x80

// Register: PIE12
#define PIE12 PIE12
extern volatile unsigned char           PIE12               __at(0x4AA);
#ifndef _LIB_BUILD
asm("PIE12 equ 04AAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U4RXIE                 :1;
        unsigned U4TXIE                 :1;
        unsigned U4EIE                  :1;
        unsigned U4IE                   :1;
        unsigned DMA5SCNTIE             :1;
        unsigned DMA5DCNTIE             :1;
        unsigned DMA5ORIE               :1;
        unsigned DMA5AIE                :1;
    };
} PIE12bits_t;
extern volatile PIE12bits_t PIE12bits __at(0x4AA);
// bitfield macros
#define _PIE12_U4RXIE_POSN                                  0x0
#define _PIE12_U4RXIE_POSITION                              0x0
#define _PIE12_U4RXIE_SIZE                                  0x1
#define _PIE12_U4RXIE_LENGTH                                0x1
#define _PIE12_U4RXIE_MASK                                  0x1
#define _PIE12_U4TXIE_POSN                                  0x1
#define _PIE12_U4TXIE_POSITION                              0x1
#define _PIE12_U4TXIE_SIZE                                  0x1
#define _PIE12_U4TXIE_LENGTH                                0x1
#define _PIE12_U4TXIE_MASK                                  0x2
#define _PIE12_U4EIE_POSN                                   0x2
#define _PIE12_U4EIE_POSITION                               0x2
#define _PIE12_U4EIE_SIZE                                   0x1
#define _PIE12_U4EIE_LENGTH                                 0x1
#define _PIE12_U4EIE_MASK                                   0x4
#define _PIE12_U4IE_POSN                                    0x3
#define _PIE12_U4IE_POSITION                                0x3
#define _PIE12_U4IE_SIZE                                    0x1
#define _PIE12_U4IE_LENGTH                                  0x1
#define _PIE12_U4IE_MASK                                    0x8
#define _PIE12_DMA5SCNTIE_POSN                              0x4
#define _PIE12_DMA5SCNTIE_POSITION                          0x4
#define _PIE12_DMA5SCNTIE_SIZE                              0x1
#define _PIE12_DMA5SCNTIE_LENGTH                            0x1
#define _PIE12_DMA5SCNTIE_MASK                              0x10
#define _PIE12_DMA5DCNTIE_POSN                              0x5
#define _PIE12_DMA5DCNTIE_POSITION                          0x5
#define _PIE12_DMA5DCNTIE_SIZE                              0x1
#define _PIE12_DMA5DCNTIE_LENGTH                            0x1
#define _PIE12_DMA5DCNTIE_MASK                              0x20
#define _PIE12_DMA5ORIE_POSN                                0x6
#define _PIE12_DMA5ORIE_POSITION                            0x6
#define _PIE12_DMA5ORIE_SIZE                                0x1
#define _PIE12_DMA5ORIE_LENGTH                              0x1
#define _PIE12_DMA5ORIE_MASK                                0x40
#define _PIE12_DMA5AIE_POSN                                 0x7
#define _PIE12_DMA5AIE_POSITION                             0x7
#define _PIE12_DMA5AIE_SIZE                                 0x1
#define _PIE12_DMA5AIE_LENGTH                               0x1
#define _PIE12_DMA5AIE_MASK                                 0x80

// Register: PIE13
#define PIE13 PIE13
extern volatile unsigned char           PIE13               __at(0x4AB);
#ifndef _LIB_BUILD
asm("PIE13 equ 04ABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U5RXIE                 :1;
        unsigned U5TXIE                 :1;
        unsigned U5EIE                  :1;
        unsigned U5IE                   :1;
        unsigned DMA6SCNTIE             :1;
        unsigned DMA6DCNTIE             :1;
        unsigned DMA6ORIE               :1;
        unsigned DMA6AIE                :1;
    };
} PIE13bits_t;
extern volatile PIE13bits_t PIE13bits __at(0x4AB);
// bitfield macros
#define _PIE13_U5RXIE_POSN                                  0x0
#define _PIE13_U5RXIE_POSITION                              0x0
#define _PIE13_U5RXIE_SIZE                                  0x1
#define _PIE13_U5RXIE_LENGTH                                0x1
#define _PIE13_U5RXIE_MASK                                  0x1
#define _PIE13_U5TXIE_POSN                                  0x1
#define _PIE13_U5TXIE_POSITION                              0x1
#define _PIE13_U5TXIE_SIZE                                  0x1
#define _PIE13_U5TXIE_LENGTH                                0x1
#define _PIE13_U5TXIE_MASK                                  0x2
#define _PIE13_U5EIE_POSN                                   0x2
#define _PIE13_U5EIE_POSITION                               0x2
#define _PIE13_U5EIE_SIZE                                   0x1
#define _PIE13_U5EIE_LENGTH                                 0x1
#define _PIE13_U5EIE_MASK                                   0x4
#define _PIE13_U5IE_POSN                                    0x3
#define _PIE13_U5IE_POSITION                                0x3
#define _PIE13_U5IE_SIZE                                    0x1
#define _PIE13_U5IE_LENGTH                                  0x1
#define _PIE13_U5IE_MASK                                    0x8
#define _PIE13_DMA6SCNTIE_POSN                              0x4
#define _PIE13_DMA6SCNTIE_POSITION                          0x4
#define _PIE13_DMA6SCNTIE_SIZE                              0x1
#define _PIE13_DMA6SCNTIE_LENGTH                            0x1
#define _PIE13_DMA6SCNTIE_MASK                              0x10
#define _PIE13_DMA6DCNTIE_POSN                              0x5
#define _PIE13_DMA6DCNTIE_POSITION                          0x5
#define _PIE13_DMA6DCNTIE_SIZE                              0x1
#define _PIE13_DMA6DCNTIE_LENGTH                            0x1
#define _PIE13_DMA6DCNTIE_MASK                              0x20
#define _PIE13_DMA6ORIE_POSN                                0x6
#define _PIE13_DMA6ORIE_POSITION                            0x6
#define _PIE13_DMA6ORIE_SIZE                                0x1
#define _PIE13_DMA6ORIE_LENGTH                              0x1
#define _PIE13_DMA6ORIE_MASK                                0x40
#define _PIE13_DMA6AIE_POSN                                 0x7
#define _PIE13_DMA6AIE_POSITION                             0x7
#define _PIE13_DMA6AIE_SIZE                                 0x1
#define _PIE13_DMA6AIE_LENGTH                               0x1
#define _PIE13_DMA6AIE_MASK                                 0x80

// Register: PIE14
#define PIE14 PIE14
extern volatile unsigned char           PIE14               __at(0x4AC);
#ifndef _LIB_BUILD
asm("PIE14 equ 04ACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CLC7IE                 :1;
        unsigned C2IE                   :1;
        unsigned NCO3IE                 :1;
    };
} PIE14bits_t;
extern volatile PIE14bits_t PIE14bits __at(0x4AC);
// bitfield macros
#define _PIE14_CLC7IE_POSN                                  0x1
#define _PIE14_CLC7IE_POSITION                              0x1
#define _PIE14_CLC7IE_SIZE                                  0x1
#define _PIE14_CLC7IE_LENGTH                                0x1
#define _PIE14_CLC7IE_MASK                                  0x2
#define _PIE14_C2IE_POSN                                    0x2
#define _PIE14_C2IE_POSITION                                0x2
#define _PIE14_C2IE_SIZE                                    0x1
#define _PIE14_C2IE_LENGTH                                  0x1
#define _PIE14_C2IE_MASK                                    0x4
#define _PIE14_NCO3IE_POSN                                  0x3
#define _PIE14_NCO3IE_POSITION                              0x3
#define _PIE14_NCO3IE_SIZE                                  0x1
#define _PIE14_NCO3IE_LENGTH                                0x1
#define _PIE14_NCO3IE_MASK                                  0x8

// Register: PIE15
#define PIE15 PIE15
extern volatile unsigned char           PIE15               __at(0x4AD);
#ifndef _LIB_BUILD
asm("PIE15 equ 04ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMIE                  :1;
        unsigned CLC8IE                 :1;
        unsigned CRCIE                  :1;
        unsigned TMR6IE                 :1;
    };
} PIE15bits_t;
extern volatile PIE15bits_t PIE15bits __at(0x4AD);
// bitfield macros
#define _PIE15_NVMIE_POSN                                   0x0
#define _PIE15_NVMIE_POSITION                               0x0
#define _PIE15_NVMIE_SIZE                                   0x1
#define _PIE15_NVMIE_LENGTH                                 0x1
#define _PIE15_NVMIE_MASK                                   0x1
#define _PIE15_CLC8IE_POSN                                  0x1
#define _PIE15_CLC8IE_POSITION                              0x1
#define _PIE15_CLC8IE_SIZE                                  0x1
#define _PIE15_CLC8IE_LENGTH                                0x1
#define _PIE15_CLC8IE_MASK                                  0x2
#define _PIE15_CRCIE_POSN                                   0x2
#define _PIE15_CRCIE_POSITION                               0x2
#define _PIE15_CRCIE_SIZE                                   0x1
#define _PIE15_CRCIE_LENGTH                                 0x1
#define _PIE15_CRCIE_MASK                                   0x4
#define _PIE15_TMR6IE_POSN                                  0x3
#define _PIE15_TMR6IE_POSITION                              0x3
#define _PIE15_TMR6IE_SIZE                                  0x1
#define _PIE15_TMR6IE_LENGTH                                0x1
#define _PIE15_TMR6IE_MASK                                  0x8

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x4AE);
#ifndef _LIB_BUILD
asm("PIR0 equ 04AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIF                   :1;
        unsigned HLVDIF                 :1;
        unsigned OSFIF                  :1;
        unsigned CSWIF                  :1;
        unsigned                        :1;
        unsigned CLC1IF                 :1;
        unsigned                        :1;
        unsigned IOCIF                  :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x4AE);
// bitfield macros
#define _PIR0_SWIF_POSN                                     0x0
#define _PIR0_SWIF_POSITION                                 0x0
#define _PIR0_SWIF_SIZE                                     0x1
#define _PIR0_SWIF_LENGTH                                   0x1
#define _PIR0_SWIF_MASK                                     0x1
#define _PIR0_HLVDIF_POSN                                   0x1
#define _PIR0_HLVDIF_POSITION                               0x1
#define _PIR0_HLVDIF_SIZE                                   0x1
#define _PIR0_HLVDIF_LENGTH                                 0x1
#define _PIR0_HLVDIF_MASK                                   0x2
#define _PIR0_OSFIF_POSN                                    0x2
#define _PIR0_OSFIF_POSITION                                0x2
#define _PIR0_OSFIF_SIZE                                    0x1
#define _PIR0_OSFIF_LENGTH                                  0x1
#define _PIR0_OSFIF_MASK                                    0x4
#define _PIR0_CSWIF_POSN                                    0x3
#define _PIR0_CSWIF_POSITION                                0x3
#define _PIR0_CSWIF_SIZE                                    0x1
#define _PIR0_CSWIF_LENGTH                                  0x1
#define _PIR0_CSWIF_MASK                                    0x8
#define _PIR0_CLC1IF_POSN                                   0x5
#define _PIR0_CLC1IF_POSITION                               0x5
#define _PIR0_CLC1IF_SIZE                                   0x1
#define _PIR0_CLC1IF_LENGTH                                 0x1
#define _PIR0_CLC1IF_MASK                                   0x20
#define _PIR0_IOCIF_POSN                                    0x7
#define _PIR0_IOCIF_POSITION                                0x7
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x80

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x4AF);
#ifndef _LIB_BUILD
asm("PIR1 equ 04AFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IF                 :1;
        unsigned ZCDIF                  :1;
        unsigned ADIF                   :1;
        unsigned ACTIF                  :1;
        unsigned C1IF                   :1;
        unsigned SMT1IF                 :1;
        unsigned SMT1PRAIF              :1;
        unsigned SMT1PWAIF              :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x4AF);
// bitfield macros
#define _PIR1_INT0IF_POSN                                   0x0
#define _PIR1_INT0IF_POSITION                               0x0
#define _PIR1_INT0IF_SIZE                                   0x1
#define _PIR1_INT0IF_LENGTH                                 0x1
#define _PIR1_INT0IF_MASK                                   0x1
#define _PIR1_ZCDIF_POSN                                    0x1
#define _PIR1_ZCDIF_POSITION                                0x1
#define _PIR1_ZCDIF_SIZE                                    0x1
#define _PIR1_ZCDIF_LENGTH                                  0x1
#define _PIR1_ZCDIF_MASK                                    0x2
#define _PIR1_ADIF_POSN                                     0x2
#define _PIR1_ADIF_POSITION                                 0x2
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x4
#define _PIR1_ACTIF_POSN                                    0x3
#define _PIR1_ACTIF_POSITION                                0x3
#define _PIR1_ACTIF_SIZE                                    0x1
#define _PIR1_ACTIF_LENGTH                                  0x1
#define _PIR1_ACTIF_MASK                                    0x8
#define _PIR1_C1IF_POSN                                     0x4
#define _PIR1_C1IF_POSITION                                 0x4
#define _PIR1_C1IF_SIZE                                     0x1
#define _PIR1_C1IF_LENGTH                                   0x1
#define _PIR1_C1IF_MASK                                     0x10
#define _PIR1_SMT1IF_POSN                                   0x5
#define _PIR1_SMT1IF_POSITION                               0x5
#define _PIR1_SMT1IF_SIZE                                   0x1
#define _PIR1_SMT1IF_LENGTH                                 0x1
#define _PIR1_SMT1IF_MASK                                   0x20
#define _PIR1_SMT1PRAIF_POSN                                0x6
#define _PIR1_SMT1PRAIF_POSITION                            0x6
#define _PIR1_SMT1PRAIF_SIZE                                0x1
#define _PIR1_SMT1PRAIF_LENGTH                              0x1
#define _PIR1_SMT1PRAIF_MASK                                0x40
#define _PIR1_SMT1PWAIF_POSN                                0x7
#define _PIR1_SMT1PWAIF_POSITION                            0x7
#define _PIR1_SMT1PWAIF_SIZE                                0x1
#define _PIR1_SMT1PWAIF_LENGTH                              0x1
#define _PIR1_SMT1PWAIF_MASK                                0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x4B0);
#ifndef _LIB_BUILD
asm("PIR2 equ 04B0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADTIF                  :1;
        unsigned                        :3;
        unsigned DMA1SCNTIF             :1;
        unsigned DMA1DCNTIF             :1;
        unsigned DMA1ORIF               :1;
        unsigned DMA1AIF                :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x4B0);
// bitfield macros
#define _PIR2_ADTIF_POSN                                    0x0
#define _PIR2_ADTIF_POSITION                                0x0
#define _PIR2_ADTIF_SIZE                                    0x1
#define _PIR2_ADTIF_LENGTH                                  0x1
#define _PIR2_ADTIF_MASK                                    0x1
#define _PIR2_DMA1SCNTIF_POSN                               0x4
#define _PIR2_DMA1SCNTIF_POSITION                           0x4
#define _PIR2_DMA1SCNTIF_SIZE                               0x1
#define _PIR2_DMA1SCNTIF_LENGTH                             0x1
#define _PIR2_DMA1SCNTIF_MASK                               0x10
#define _PIR2_DMA1DCNTIF_POSN                               0x5
#define _PIR2_DMA1DCNTIF_POSITION                           0x5
#define _PIR2_DMA1DCNTIF_SIZE                               0x1
#define _PIR2_DMA1DCNTIF_LENGTH                             0x1
#define _PIR2_DMA1DCNTIF_MASK                               0x20
#define _PIR2_DMA1ORIF_POSN                                 0x6
#define _PIR2_DMA1ORIF_POSITION                             0x6
#define _PIR2_DMA1ORIF_SIZE                                 0x1
#define _PIR2_DMA1ORIF_LENGTH                               0x1
#define _PIR2_DMA1ORIF_MASK                                 0x40
#define _PIR2_DMA1AIF_POSN                                  0x7
#define _PIR2_DMA1AIF_POSITION                              0x7
#define _PIR2_DMA1AIF_SIZE                                  0x1
#define _PIR2_DMA1AIF_LENGTH                                0x1
#define _PIR2_DMA1AIF_MASK                                  0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x4B1);
#ifndef _LIB_BUILD
asm("PIR3 equ 04B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIF               :1;
        unsigned SPI1TXIF               :1;
        unsigned SPI1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned TMR1IF                 :1;
        unsigned TMR1GIF                :1;
        unsigned CCP1IF                 :1;
        unsigned TMR0IF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x4B1);
// bitfield macros
#define _PIR3_SPI1RXIF_POSN                                 0x0
#define _PIR3_SPI1RXIF_POSITION                             0x0
#define _PIR3_SPI1RXIF_SIZE                                 0x1
#define _PIR3_SPI1RXIF_LENGTH                               0x1
#define _PIR3_SPI1RXIF_MASK                                 0x1
#define _PIR3_SPI1TXIF_POSN                                 0x1
#define _PIR3_SPI1TXIF_POSITION                             0x1
#define _PIR3_SPI1TXIF_SIZE                                 0x1
#define _PIR3_SPI1TXIF_LENGTH                               0x1
#define _PIR3_SPI1TXIF_MASK                                 0x2
#define _PIR3_SPI1IF_POSN                                   0x2
#define _PIR3_SPI1IF_POSITION                               0x2
#define _PIR3_SPI1IF_SIZE                                   0x1
#define _PIR3_SPI1IF_LENGTH                                 0x1
#define _PIR3_SPI1IF_MASK                                   0x4
#define _PIR3_TMR2IF_POSN                                   0x3
#define _PIR3_TMR2IF_POSITION                               0x3
#define _PIR3_TMR2IF_SIZE                                   0x1
#define _PIR3_TMR2IF_LENGTH                                 0x1
#define _PIR3_TMR2IF_MASK                                   0x8
#define _PIR3_TMR1IF_POSN                                   0x4
#define _PIR3_TMR1IF_POSITION                               0x4
#define _PIR3_TMR1IF_SIZE                                   0x1
#define _PIR3_TMR1IF_LENGTH                                 0x1
#define _PIR3_TMR1IF_MASK                                   0x10
#define _PIR3_TMR1GIF_POSN                                  0x5
#define _PIR3_TMR1GIF_POSITION                              0x5
#define _PIR3_TMR1GIF_SIZE                                  0x1
#define _PIR3_TMR1GIF_LENGTH                                0x1
#define _PIR3_TMR1GIF_MASK                                  0x20
#define _PIR3_CCP1IF_POSN                                   0x6
#define _PIR3_CCP1IF_POSITION                               0x6
#define _PIR3_CCP1IF_SIZE                                   0x1
#define _PIR3_CCP1IF_LENGTH                                 0x1
#define _PIR3_CCP1IF_MASK                                   0x40
#define _PIR3_TMR0IF_POSN                                   0x7
#define _PIR3_TMR0IF_POSITION                               0x7
#define _PIR3_TMR0IF_SIZE                                   0x1
#define _PIR3_TMR0IF_LENGTH                                 0x1
#define _PIR3_TMR0IF_MASK                                   0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x4B2);
#ifndef _LIB_BUILD
asm("PIR4 equ 04B2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIF                 :1;
        unsigned U1TXIF                 :1;
        unsigned U1EIF                  :1;
        unsigned U1IF                   :1;
        unsigned                        :2;
        unsigned PWM1PIF                :1;
        unsigned PWM1IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x4B2);
// bitfield macros
#define _PIR4_U1RXIF_POSN                                   0x0
#define _PIR4_U1RXIF_POSITION                               0x0
#define _PIR4_U1RXIF_SIZE                                   0x1
#define _PIR4_U1RXIF_LENGTH                                 0x1
#define _PIR4_U1RXIF_MASK                                   0x1
#define _PIR4_U1TXIF_POSN                                   0x1
#define _PIR4_U1TXIF_POSITION                               0x1
#define _PIR4_U1TXIF_SIZE                                   0x1
#define _PIR4_U1TXIF_LENGTH                                 0x1
#define _PIR4_U1TXIF_MASK                                   0x2
#define _PIR4_U1EIF_POSN                                    0x2
#define _PIR4_U1EIF_POSITION                                0x2
#define _PIR4_U1EIF_SIZE                                    0x1
#define _PIR4_U1EIF_LENGTH                                  0x1
#define _PIR4_U1EIF_MASK                                    0x4
#define _PIR4_U1IF_POSN                                     0x3
#define _PIR4_U1IF_POSITION                                 0x3
#define _PIR4_U1IF_SIZE                                     0x1
#define _PIR4_U1IF_LENGTH                                   0x1
#define _PIR4_U1IF_MASK                                     0x8
#define _PIR4_PWM1PIF_POSN                                  0x6
#define _PIR4_PWM1PIF_POSITION                              0x6
#define _PIR4_PWM1PIF_SIZE                                  0x1
#define _PIR4_PWM1PIF_LENGTH                                0x1
#define _PIR4_PWM1PIF_MASK                                  0x40
#define _PIR4_PWM1IF_POSN                                   0x7
#define _PIR4_PWM1IF_POSITION                               0x7
#define _PIR4_PWM1IF_SIZE                                   0x1
#define _PIR4_PWM1IF_LENGTH                                 0x1
#define _PIR4_PWM1IF_MASK                                   0x80

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x4B3);
#ifndef _LIB_BUILD
asm("PIR5 equ 04B3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI2RXIF               :1;
        unsigned SPI2TXIF               :1;
        unsigned SPI2IF                 :1;
        unsigned                        :1;
        unsigned TMR3IF                 :1;
        unsigned TMR3GIF                :1;
        unsigned PWM2PIF                :1;
        unsigned PWM2IF                 :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x4B3);
// bitfield macros
#define _PIR5_SPI2RXIF_POSN                                 0x0
#define _PIR5_SPI2RXIF_POSITION                             0x0
#define _PIR5_SPI2RXIF_SIZE                                 0x1
#define _PIR5_SPI2RXIF_LENGTH                               0x1
#define _PIR5_SPI2RXIF_MASK                                 0x1
#define _PIR5_SPI2TXIF_POSN                                 0x1
#define _PIR5_SPI2TXIF_POSITION                             0x1
#define _PIR5_SPI2TXIF_SIZE                                 0x1
#define _PIR5_SPI2TXIF_LENGTH                               0x1
#define _PIR5_SPI2TXIF_MASK                                 0x2
#define _PIR5_SPI2IF_POSN                                   0x2
#define _PIR5_SPI2IF_POSITION                               0x2
#define _PIR5_SPI2IF_SIZE                                   0x1
#define _PIR5_SPI2IF_LENGTH                                 0x1
#define _PIR5_SPI2IF_MASK                                   0x4
#define _PIR5_TMR3IF_POSN                                   0x4
#define _PIR5_TMR3IF_POSITION                               0x4
#define _PIR5_TMR3IF_SIZE                                   0x1
#define _PIR5_TMR3IF_LENGTH                                 0x1
#define _PIR5_TMR3IF_MASK                                   0x10
#define _PIR5_TMR3GIF_POSN                                  0x5
#define _PIR5_TMR3GIF_POSITION                              0x5
#define _PIR5_TMR3GIF_SIZE                                  0x1
#define _PIR5_TMR3GIF_LENGTH                                0x1
#define _PIR5_TMR3GIF_MASK                                  0x20
#define _PIR5_PWM2PIF_POSN                                  0x6
#define _PIR5_PWM2PIF_POSITION                              0x6
#define _PIR5_PWM2PIF_SIZE                                  0x1
#define _PIR5_PWM2PIF_LENGTH                                0x1
#define _PIR5_PWM2PIF_MASK                                  0x40
#define _PIR5_PWM2IF_POSN                                   0x7
#define _PIR5_PWM2IF_POSITION                               0x7
#define _PIR5_PWM2IF_SIZE                                   0x1
#define _PIR5_PWM2IF_LENGTH                                 0x1
#define _PIR5_PWM2IF_MASK                                   0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x4B4);
#ifndef _LIB_BUILD
asm("PIR6 equ 04B4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CWG1IF                 :1;
        unsigned NCO1IF                 :1;
        unsigned DMA2SCNTIF             :1;
        unsigned DMA2DCNTIF             :1;
        unsigned DMA2ORIF               :1;
        unsigned DMA2AIF                :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x4B4);
// bitfield macros
#define _PIR6_INT1IF_POSN                                   0x0
#define _PIR6_INT1IF_POSITION                               0x0
#define _PIR6_INT1IF_SIZE                                   0x1
#define _PIR6_INT1IF_LENGTH                                 0x1
#define _PIR6_INT1IF_MASK                                   0x1
#define _PIR6_CLC2IF_POSN                                   0x1
#define _PIR6_CLC2IF_POSITION                               0x1
#define _PIR6_CLC2IF_SIZE                                   0x1
#define _PIR6_CLC2IF_LENGTH                                 0x1
#define _PIR6_CLC2IF_MASK                                   0x2
#define _PIR6_CWG1IF_POSN                                   0x2
#define _PIR6_CWG1IF_POSITION                               0x2
#define _PIR6_CWG1IF_SIZE                                   0x1
#define _PIR6_CWG1IF_LENGTH                                 0x1
#define _PIR6_CWG1IF_MASK                                   0x4
#define _PIR6_NCO1IF_POSN                                   0x3
#define _PIR6_NCO1IF_POSITION                               0x3
#define _PIR6_NCO1IF_SIZE                                   0x1
#define _PIR6_NCO1IF_LENGTH                                 0x1
#define _PIR6_NCO1IF_MASK                                   0x8
#define _PIR6_DMA2SCNTIF_POSN                               0x4
#define _PIR6_DMA2SCNTIF_POSITION                           0x4
#define _PIR6_DMA2SCNTIF_SIZE                               0x1
#define _PIR6_DMA2SCNTIF_LENGTH                             0x1
#define _PIR6_DMA2SCNTIF_MASK                               0x10
#define _PIR6_DMA2DCNTIF_POSN                               0x5
#define _PIR6_DMA2DCNTIF_POSITION                           0x5
#define _PIR6_DMA2DCNTIF_SIZE                               0x1
#define _PIR6_DMA2DCNTIF_LENGTH                             0x1
#define _PIR6_DMA2DCNTIF_MASK                               0x20
#define _PIR6_DMA2ORIF_POSN                                 0x6
#define _PIR6_DMA2ORIF_POSITION                             0x6
#define _PIR6_DMA2ORIF_SIZE                                 0x1
#define _PIR6_DMA2ORIF_LENGTH                               0x1
#define _PIR6_DMA2ORIF_MASK                                 0x40
#define _PIR6_DMA2AIF_POSN                                  0x7
#define _PIR6_DMA2AIF_POSITION                              0x7
#define _PIR6_DMA2AIF_SIZE                                  0x1
#define _PIR6_DMA2AIF_LENGTH                                0x1
#define _PIR6_DMA2AIF_MASK                                  0x80

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x4B5);
#ifndef _LIB_BUILD
asm("PIR7 equ 04B5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1RXIF               :1;
        unsigned I2C1TXIF               :1;
        unsigned I2C1IF                 :1;
        unsigned I2C1EIF                :1;
        unsigned                        :1;
        unsigned CLC3IF                 :1;
        unsigned PWM3PIF                :1;
        unsigned PWM3IF                 :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x4B5);
// bitfield macros
#define _PIR7_I2C1RXIF_POSN                                 0x0
#define _PIR7_I2C1RXIF_POSITION                             0x0
#define _PIR7_I2C1RXIF_SIZE                                 0x1
#define _PIR7_I2C1RXIF_LENGTH                               0x1
#define _PIR7_I2C1RXIF_MASK                                 0x1
#define _PIR7_I2C1TXIF_POSN                                 0x1
#define _PIR7_I2C1TXIF_POSITION                             0x1
#define _PIR7_I2C1TXIF_SIZE                                 0x1
#define _PIR7_I2C1TXIF_LENGTH                               0x1
#define _PIR7_I2C1TXIF_MASK                                 0x2
#define _PIR7_I2C1IF_POSN                                   0x2
#define _PIR7_I2C1IF_POSITION                               0x2
#define _PIR7_I2C1IF_SIZE                                   0x1
#define _PIR7_I2C1IF_LENGTH                                 0x1
#define _PIR7_I2C1IF_MASK                                   0x4
#define _PIR7_I2C1EIF_POSN                                  0x3
#define _PIR7_I2C1EIF_POSITION                              0x3
#define _PIR7_I2C1EIF_SIZE                                  0x1
#define _PIR7_I2C1EIF_LENGTH                                0x1
#define _PIR7_I2C1EIF_MASK                                  0x8
#define _PIR7_CLC3IF_POSN                                   0x5
#define _PIR7_CLC3IF_POSITION                               0x5
#define _PIR7_CLC3IF_SIZE                                   0x1
#define _PIR7_CLC3IF_LENGTH                                 0x1
#define _PIR7_CLC3IF_MASK                                   0x20
#define _PIR7_PWM3PIF_POSN                                  0x6
#define _PIR7_PWM3PIF_POSITION                              0x6
#define _PIR7_PWM3PIF_SIZE                                  0x1
#define _PIR7_PWM3PIF_LENGTH                                0x1
#define _PIR7_PWM3PIF_MASK                                  0x40
#define _PIR7_PWM3IF_POSN                                   0x7
#define _PIR7_PWM3IF_POSITION                               0x7
#define _PIR7_PWM3IF_SIZE                                   0x1
#define _PIR7_PWM3IF_LENGTH                                 0x1
#define _PIR7_PWM3IF_MASK                                   0x80

// Register: PIR8
#define PIR8 PIR8
extern volatile unsigned char           PIR8                __at(0x4B6);
#ifndef _LIB_BUILD
asm("PIR8 equ 04B6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXIF                 :1;
        unsigned U2TXIF                 :1;
        unsigned U2EIF                  :1;
        unsigned U2IF                   :1;
        unsigned TMR5IF                 :1;
        unsigned TMR5GIF                :1;
        unsigned CCP2IF                 :1;
        unsigned SCANIF                 :1;
    };
} PIR8bits_t;
extern volatile PIR8bits_t PIR8bits __at(0x4B6);
// bitfield macros
#define _PIR8_U2RXIF_POSN                                   0x0
#define _PIR8_U2RXIF_POSITION                               0x0
#define _PIR8_U2RXIF_SIZE                                   0x1
#define _PIR8_U2RXIF_LENGTH                                 0x1
#define _PIR8_U2RXIF_MASK                                   0x1
#define _PIR8_U2TXIF_POSN                                   0x1
#define _PIR8_U2TXIF_POSITION                               0x1
#define _PIR8_U2TXIF_SIZE                                   0x1
#define _PIR8_U2TXIF_LENGTH                                 0x1
#define _PIR8_U2TXIF_MASK                                   0x2
#define _PIR8_U2EIF_POSN                                    0x2
#define _PIR8_U2EIF_POSITION                                0x2
#define _PIR8_U2EIF_SIZE                                    0x1
#define _PIR8_U2EIF_LENGTH                                  0x1
#define _PIR8_U2EIF_MASK                                    0x4
#define _PIR8_U2IF_POSN                                     0x3
#define _PIR8_U2IF_POSITION                                 0x3
#define _PIR8_U2IF_SIZE                                     0x1
#define _PIR8_U2IF_LENGTH                                   0x1
#define _PIR8_U2IF_MASK                                     0x8
#define _PIR8_TMR5IF_POSN                                   0x4
#define _PIR8_TMR5IF_POSITION                               0x4
#define _PIR8_TMR5IF_SIZE                                   0x1
#define _PIR8_TMR5IF_LENGTH                                 0x1
#define _PIR8_TMR5IF_MASK                                   0x10
#define _PIR8_TMR5GIF_POSN                                  0x5
#define _PIR8_TMR5GIF_POSITION                              0x5
#define _PIR8_TMR5GIF_SIZE                                  0x1
#define _PIR8_TMR5GIF_LENGTH                                0x1
#define _PIR8_TMR5GIF_MASK                                  0x20
#define _PIR8_CCP2IF_POSN                                   0x6
#define _PIR8_CCP2IF_POSITION                               0x6
#define _PIR8_CCP2IF_SIZE                                   0x1
#define _PIR8_CCP2IF_LENGTH                                 0x1
#define _PIR8_CCP2IF_MASK                                   0x40
#define _PIR8_SCANIF_POSN                                   0x7
#define _PIR8_SCANIF_POSITION                               0x7
#define _PIR8_SCANIF_SIZE                                   0x1
#define _PIR8_SCANIF_LENGTH                                 0x1
#define _PIR8_SCANIF_MASK                                   0x80

// Register: PIR9
#define PIR9 PIR9
extern volatile unsigned char           PIR9                __at(0x4B7);
#ifndef _LIB_BUILD
asm("PIR9 equ 04B7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U3RXIF                 :1;
        unsigned U3TXIF                 :1;
        unsigned U3EIF                  :1;
        unsigned U3IF                   :1;
        unsigned                        :1;
        unsigned CLC4IF                 :1;
    };
} PIR9bits_t;
extern volatile PIR9bits_t PIR9bits __at(0x4B7);
// bitfield macros
#define _PIR9_U3RXIF_POSN                                   0x0
#define _PIR9_U3RXIF_POSITION                               0x0
#define _PIR9_U3RXIF_SIZE                                   0x1
#define _PIR9_U3RXIF_LENGTH                                 0x1
#define _PIR9_U3RXIF_MASK                                   0x1
#define _PIR9_U3TXIF_POSN                                   0x1
#define _PIR9_U3TXIF_POSITION                               0x1
#define _PIR9_U3TXIF_SIZE                                   0x1
#define _PIR9_U3TXIF_LENGTH                                 0x1
#define _PIR9_U3TXIF_MASK                                   0x2
#define _PIR9_U3EIF_POSN                                    0x2
#define _PIR9_U3EIF_POSITION                                0x2
#define _PIR9_U3EIF_SIZE                                    0x1
#define _PIR9_U3EIF_LENGTH                                  0x1
#define _PIR9_U3EIF_MASK                                    0x4
#define _PIR9_U3IF_POSN                                     0x3
#define _PIR9_U3IF_POSITION                                 0x3
#define _PIR9_U3IF_SIZE                                     0x1
#define _PIR9_U3IF_LENGTH                                   0x1
#define _PIR9_U3IF_MASK                                     0x8
#define _PIR9_CLC4IF_POSN                                   0x5
#define _PIR9_CLC4IF_POSITION                               0x5
#define _PIR9_CLC4IF_SIZE                                   0x1
#define _PIR9_CLC4IF_LENGTH                                 0x1
#define _PIR9_CLC4IF_MASK                                   0x20

// Register: PIR10
#define PIR10 PIR10
extern volatile unsigned char           PIR10               __at(0x4B8);
#ifndef _LIB_BUILD
asm("PIR10 equ 04B8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT2IF                 :1;
        unsigned CLC5IF                 :1;
        unsigned CWG2IF                 :1;
        unsigned NCO2IF                 :1;
        unsigned DMA3SCNTIF             :1;
        unsigned DMA3DCNTIF             :1;
        unsigned DMA3ORIF               :1;
        unsigned DMA3AIF                :1;
    };
} PIR10bits_t;
extern volatile PIR10bits_t PIR10bits __at(0x4B8);
// bitfield macros
#define _PIR10_INT2IF_POSN                                  0x0
#define _PIR10_INT2IF_POSITION                              0x0
#define _PIR10_INT2IF_SIZE                                  0x1
#define _PIR10_INT2IF_LENGTH                                0x1
#define _PIR10_INT2IF_MASK                                  0x1
#define _PIR10_CLC5IF_POSN                                  0x1
#define _PIR10_CLC5IF_POSITION                              0x1
#define _PIR10_CLC5IF_SIZE                                  0x1
#define _PIR10_CLC5IF_LENGTH                                0x1
#define _PIR10_CLC5IF_MASK                                  0x2
#define _PIR10_CWG2IF_POSN                                  0x2
#define _PIR10_CWG2IF_POSITION                              0x2
#define _PIR10_CWG2IF_SIZE                                  0x1
#define _PIR10_CWG2IF_LENGTH                                0x1
#define _PIR10_CWG2IF_MASK                                  0x4
#define _PIR10_NCO2IF_POSN                                  0x3
#define _PIR10_NCO2IF_POSITION                              0x3
#define _PIR10_NCO2IF_SIZE                                  0x1
#define _PIR10_NCO2IF_LENGTH                                0x1
#define _PIR10_NCO2IF_MASK                                  0x8
#define _PIR10_DMA3SCNTIF_POSN                              0x4
#define _PIR10_DMA3SCNTIF_POSITION                          0x4
#define _PIR10_DMA3SCNTIF_SIZE                              0x1
#define _PIR10_DMA3SCNTIF_LENGTH                            0x1
#define _PIR10_DMA3SCNTIF_MASK                              0x10
#define _PIR10_DMA3DCNTIF_POSN                              0x5
#define _PIR10_DMA3DCNTIF_POSITION                          0x5
#define _PIR10_DMA3DCNTIF_SIZE                              0x1
#define _PIR10_DMA3DCNTIF_LENGTH                            0x1
#define _PIR10_DMA3DCNTIF_MASK                              0x20
#define _PIR10_DMA3ORIF_POSN                                0x6
#define _PIR10_DMA3ORIF_POSITION                            0x6
#define _PIR10_DMA3ORIF_SIZE                                0x1
#define _PIR10_DMA3ORIF_LENGTH                              0x1
#define _PIR10_DMA3ORIF_MASK                                0x40
#define _PIR10_DMA3AIF_POSN                                 0x7
#define _PIR10_DMA3AIF_POSITION                             0x7
#define _PIR10_DMA3AIF_SIZE                                 0x1
#define _PIR10_DMA3AIF_LENGTH                               0x1
#define _PIR10_DMA3AIF_MASK                                 0x80

// Register: PIR11
#define PIR11 PIR11
extern volatile unsigned char           PIR11               __at(0x4B9);
#ifndef _LIB_BUILD
asm("PIR11 equ 04B9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3IF                 :1;
        unsigned CLC6IF                 :1;
        unsigned CWG3IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned DMA4SCNTIF             :1;
        unsigned DMA4DCNTIF             :1;
        unsigned DMA4ORIF               :1;
        unsigned DMA4AIF                :1;
    };
} PIR11bits_t;
extern volatile PIR11bits_t PIR11bits __at(0x4B9);
// bitfield macros
#define _PIR11_CCP3IF_POSN                                  0x0
#define _PIR11_CCP3IF_POSITION                              0x0
#define _PIR11_CCP3IF_SIZE                                  0x1
#define _PIR11_CCP3IF_LENGTH                                0x1
#define _PIR11_CCP3IF_MASK                                  0x1
#define _PIR11_CLC6IF_POSN                                  0x1
#define _PIR11_CLC6IF_POSITION                              0x1
#define _PIR11_CLC6IF_SIZE                                  0x1
#define _PIR11_CLC6IF_LENGTH                                0x1
#define _PIR11_CLC6IF_MASK                                  0x2
#define _PIR11_CWG3IF_POSN                                  0x2
#define _PIR11_CWG3IF_POSITION                              0x2
#define _PIR11_CWG3IF_SIZE                                  0x1
#define _PIR11_CWG3IF_LENGTH                                0x1
#define _PIR11_CWG3IF_MASK                                  0x4
#define _PIR11_TMR4IF_POSN                                  0x3
#define _PIR11_TMR4IF_POSITION                              0x3
#define _PIR11_TMR4IF_SIZE                                  0x1
#define _PIR11_TMR4IF_LENGTH                                0x1
#define _PIR11_TMR4IF_MASK                                  0x8
#define _PIR11_DMA4SCNTIF_POSN                              0x4
#define _PIR11_DMA4SCNTIF_POSITION                          0x4
#define _PIR11_DMA4SCNTIF_SIZE                              0x1
#define _PIR11_DMA4SCNTIF_LENGTH                            0x1
#define _PIR11_DMA4SCNTIF_MASK                              0x10
#define _PIR11_DMA4DCNTIF_POSN                              0x5
#define _PIR11_DMA4DCNTIF_POSITION                          0x5
#define _PIR11_DMA4DCNTIF_SIZE                              0x1
#define _PIR11_DMA4DCNTIF_LENGTH                            0x1
#define _PIR11_DMA4DCNTIF_MASK                              0x20
#define _PIR11_DMA4ORIF_POSN                                0x6
#define _PIR11_DMA4ORIF_POSITION                            0x6
#define _PIR11_DMA4ORIF_SIZE                                0x1
#define _PIR11_DMA4ORIF_LENGTH                              0x1
#define _PIR11_DMA4ORIF_MASK                                0x40
#define _PIR11_DMA4AIF_POSN                                 0x7
#define _PIR11_DMA4AIF_POSITION                             0x7
#define _PIR11_DMA4AIF_SIZE                                 0x1
#define _PIR11_DMA4AIF_LENGTH                               0x1
#define _PIR11_DMA4AIF_MASK                                 0x80

// Register: PIR12
#define PIR12 PIR12
extern volatile unsigned char           PIR12               __at(0x4BA);
#ifndef _LIB_BUILD
asm("PIR12 equ 04BAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U4RXIF                 :1;
        unsigned U4TXIF                 :1;
        unsigned U4EIF                  :1;
        unsigned U4IF                   :1;
        unsigned DMA5SCNTIF             :1;
        unsigned DMA5DCNTIF             :1;
        unsigned DMA5ORIF               :1;
        unsigned DMA5AIF                :1;
    };
} PIR12bits_t;
extern volatile PIR12bits_t PIR12bits __at(0x4BA);
// bitfield macros
#define _PIR12_U4RXIF_POSN                                  0x0
#define _PIR12_U4RXIF_POSITION                              0x0
#define _PIR12_U4RXIF_SIZE                                  0x1
#define _PIR12_U4RXIF_LENGTH                                0x1
#define _PIR12_U4RXIF_MASK                                  0x1
#define _PIR12_U4TXIF_POSN                                  0x1
#define _PIR12_U4TXIF_POSITION                              0x1
#define _PIR12_U4TXIF_SIZE                                  0x1
#define _PIR12_U4TXIF_LENGTH                                0x1
#define _PIR12_U4TXIF_MASK                                  0x2
#define _PIR12_U4EIF_POSN                                   0x2
#define _PIR12_U4EIF_POSITION                               0x2
#define _PIR12_U4EIF_SIZE                                   0x1
#define _PIR12_U4EIF_LENGTH                                 0x1
#define _PIR12_U4EIF_MASK                                   0x4
#define _PIR12_U4IF_POSN                                    0x3
#define _PIR12_U4IF_POSITION                                0x3
#define _PIR12_U4IF_SIZE                                    0x1
#define _PIR12_U4IF_LENGTH                                  0x1
#define _PIR12_U4IF_MASK                                    0x8
#define _PIR12_DMA5SCNTIF_POSN                              0x4
#define _PIR12_DMA5SCNTIF_POSITION                          0x4
#define _PIR12_DMA5SCNTIF_SIZE                              0x1
#define _PIR12_DMA5SCNTIF_LENGTH                            0x1
#define _PIR12_DMA5SCNTIF_MASK                              0x10
#define _PIR12_DMA5DCNTIF_POSN                              0x5
#define _PIR12_DMA5DCNTIF_POSITION                          0x5
#define _PIR12_DMA5DCNTIF_SIZE                              0x1
#define _PIR12_DMA5DCNTIF_LENGTH                            0x1
#define _PIR12_DMA5DCNTIF_MASK                              0x20
#define _PIR12_DMA5ORIF_POSN                                0x6
#define _PIR12_DMA5ORIF_POSITION                            0x6
#define _PIR12_DMA5ORIF_SIZE                                0x1
#define _PIR12_DMA5ORIF_LENGTH                              0x1
#define _PIR12_DMA5ORIF_MASK                                0x40
#define _PIR12_DMA5AIF_POSN                                 0x7
#define _PIR12_DMA5AIF_POSITION                             0x7
#define _PIR12_DMA5AIF_SIZE                                 0x1
#define _PIR12_DMA5AIF_LENGTH                               0x1
#define _PIR12_DMA5AIF_MASK                                 0x80

// Register: PIR13
#define PIR13 PIR13
extern volatile unsigned char           PIR13               __at(0x4BB);
#ifndef _LIB_BUILD
asm("PIR13 equ 04BBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U5RXIF                 :1;
        unsigned U5TXIF                 :1;
        unsigned U5EIF                  :1;
        unsigned U5IF                   :1;
        unsigned DMA6SCNTIF             :1;
        unsigned DMA6DCNTIF             :1;
        unsigned DMA6ORIF               :1;
        unsigned DMA6AIF                :1;
    };
} PIR13bits_t;
extern volatile PIR13bits_t PIR13bits __at(0x4BB);
// bitfield macros
#define _PIR13_U5RXIF_POSN                                  0x0
#define _PIR13_U5RXIF_POSITION                              0x0
#define _PIR13_U5RXIF_SIZE                                  0x1
#define _PIR13_U5RXIF_LENGTH                                0x1
#define _PIR13_U5RXIF_MASK                                  0x1
#define _PIR13_U5TXIF_POSN                                  0x1
#define _PIR13_U5TXIF_POSITION                              0x1
#define _PIR13_U5TXIF_SIZE                                  0x1
#define _PIR13_U5TXIF_LENGTH                                0x1
#define _PIR13_U5TXIF_MASK                                  0x2
#define _PIR13_U5EIF_POSN                                   0x2
#define _PIR13_U5EIF_POSITION                               0x2
#define _PIR13_U5EIF_SIZE                                   0x1
#define _PIR13_U5EIF_LENGTH                                 0x1
#define _PIR13_U5EIF_MASK                                   0x4
#define _PIR13_U5IF_POSN                                    0x3
#define _PIR13_U5IF_POSITION                                0x3
#define _PIR13_U5IF_SIZE                                    0x1
#define _PIR13_U5IF_LENGTH                                  0x1
#define _PIR13_U5IF_MASK                                    0x8
#define _PIR13_DMA6SCNTIF_POSN                              0x4
#define _PIR13_DMA6SCNTIF_POSITION                          0x4
#define _PIR13_DMA6SCNTIF_SIZE                              0x1
#define _PIR13_DMA6SCNTIF_LENGTH                            0x1
#define _PIR13_DMA6SCNTIF_MASK                              0x10
#define _PIR13_DMA6DCNTIF_POSN                              0x5
#define _PIR13_DMA6DCNTIF_POSITION                          0x5
#define _PIR13_DMA6DCNTIF_SIZE                              0x1
#define _PIR13_DMA6DCNTIF_LENGTH                            0x1
#define _PIR13_DMA6DCNTIF_MASK                              0x20
#define _PIR13_DMA6ORIF_POSN                                0x6
#define _PIR13_DMA6ORIF_POSITION                            0x6
#define _PIR13_DMA6ORIF_SIZE                                0x1
#define _PIR13_DMA6ORIF_LENGTH                              0x1
#define _PIR13_DMA6ORIF_MASK                                0x40
#define _PIR13_DMA6AIF_POSN                                 0x7
#define _PIR13_DMA6AIF_POSITION                             0x7
#define _PIR13_DMA6AIF_SIZE                                 0x1
#define _PIR13_DMA6AIF_LENGTH                               0x1
#define _PIR13_DMA6AIF_MASK                                 0x80

// Register: PIR14
#define PIR14 PIR14
extern volatile unsigned char           PIR14               __at(0x4BC);
#ifndef _LIB_BUILD
asm("PIR14 equ 04BCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CLC7IF                 :1;
        unsigned C2IF                   :1;
        unsigned NCO3IF                 :1;
    };
} PIR14bits_t;
extern volatile PIR14bits_t PIR14bits __at(0x4BC);
// bitfield macros
#define _PIR14_CLC7IF_POSN                                  0x1
#define _PIR14_CLC7IF_POSITION                              0x1
#define _PIR14_CLC7IF_SIZE                                  0x1
#define _PIR14_CLC7IF_LENGTH                                0x1
#define _PIR14_CLC7IF_MASK                                  0x2
#define _PIR14_C2IF_POSN                                    0x2
#define _PIR14_C2IF_POSITION                                0x2
#define _PIR14_C2IF_SIZE                                    0x1
#define _PIR14_C2IF_LENGTH                                  0x1
#define _PIR14_C2IF_MASK                                    0x4
#define _PIR14_NCO3IF_POSN                                  0x3
#define _PIR14_NCO3IF_POSITION                              0x3
#define _PIR14_NCO3IF_SIZE                                  0x1
#define _PIR14_NCO3IF_LENGTH                                0x1
#define _PIR14_NCO3IF_MASK                                  0x8

// Register: PIR15
#define PIR15 PIR15
extern volatile unsigned char           PIR15               __at(0x4BD);
#ifndef _LIB_BUILD
asm("PIR15 equ 04BDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMIF                  :1;
        unsigned CLC8IF                 :1;
        unsigned CRCIF                  :1;
        unsigned TMR6IF                 :1;
    };
} PIR15bits_t;
extern volatile PIR15bits_t PIR15bits __at(0x4BD);
// bitfield macros
#define _PIR15_NVMIF_POSN                                   0x0
#define _PIR15_NVMIF_POSITION                               0x0
#define _PIR15_NVMIF_SIZE                                   0x1
#define _PIR15_NVMIF_LENGTH                                 0x1
#define _PIR15_NVMIF_MASK                                   0x1
#define _PIR15_CLC8IF_POSN                                  0x1
#define _PIR15_CLC8IF_POSITION                              0x1
#define _PIR15_CLC8IF_SIZE                                  0x1
#define _PIR15_CLC8IF_LENGTH                                0x1
#define _PIR15_CLC8IF_MASK                                  0x2
#define _PIR15_CRCIF_POSN                                   0x2
#define _PIR15_CRCIF_POSITION                               0x2
#define _PIR15_CRCIF_SIZE                                   0x1
#define _PIR15_CRCIF_LENGTH                                 0x1
#define _PIR15_CRCIF_MASK                                   0x4
#define _PIR15_TMR6IF_POSN                                  0x3
#define _PIR15_TMR6IF_POSITION                              0x3
#define _PIR15_TMR6IF_SIZE                                  0x1
#define _PIR15_TMR6IF_LENGTH                                0x1
#define _PIR15_TMR6IF_MASK                                  0x8

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x4BE);
#ifndef _LIB_BUILD
asm("LATA equ 04BEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x4BE);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x4BF);
#ifndef _LIB_BUILD
asm("LATB equ 04BFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x4BF);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x4C0);
#ifndef _LIB_BUILD
asm("LATC equ 04C0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x4C0);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80

// Register: LATD
#define LATD LATD
extern volatile unsigned char           LATD                __at(0x4C1);
#ifndef _LIB_BUILD
asm("LATD equ 04C1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATD0                  :1;
        unsigned LATD1                  :1;
        unsigned LATD2                  :1;
        unsigned LATD3                  :1;
        unsigned LATD4                  :1;
        unsigned LATD5                  :1;
        unsigned LATD6                  :1;
        unsigned LATD7                  :1;
    };
} LATDbits_t;
extern volatile LATDbits_t LATDbits __at(0x4C1);
// bitfield macros
#define _LATD_LATD0_POSN                                    0x0
#define _LATD_LATD0_POSITION                                0x0
#define _LATD_LATD0_SIZE                                    0x1
#define _LATD_LATD0_LENGTH                                  0x1
#define _LATD_LATD0_MASK                                    0x1
#define _LATD_LATD1_POSN                                    0x1
#define _LATD_LATD1_POSITION                                0x1
#define _LATD_LATD1_SIZE                                    0x1
#define _LATD_LATD1_LENGTH                                  0x1
#define _LATD_LATD1_MASK                                    0x2
#define _LATD_LATD2_POSN                                    0x2
#define _LATD_LATD2_POSITION                                0x2
#define _LATD_LATD2_SIZE                                    0x1
#define _LATD_LATD2_LENGTH                                  0x1
#define _LATD_LATD2_MASK                                    0x4
#define _LATD_LATD3_POSN                                    0x3
#define _LATD_LATD3_POSITION                                0x3
#define _LATD_LATD3_SIZE                                    0x1
#define _LATD_LATD3_LENGTH                                  0x1
#define _LATD_LATD3_MASK                                    0x8
#define _LATD_LATD4_POSN                                    0x4
#define _LATD_LATD4_POSITION                                0x4
#define _LATD_LATD4_SIZE                                    0x1
#define _LATD_LATD4_LENGTH                                  0x1
#define _LATD_LATD4_MASK                                    0x10
#define _LATD_LATD5_POSN                                    0x5
#define _LATD_LATD5_POSITION                                0x5
#define _LATD_LATD5_SIZE                                    0x1
#define _LATD_LATD5_LENGTH                                  0x1
#define _LATD_LATD5_MASK                                    0x20
#define _LATD_LATD6_POSN                                    0x6
#define _LATD_LATD6_POSITION                                0x6
#define _LATD_LATD6_SIZE                                    0x1
#define _LATD_LATD6_LENGTH                                  0x1
#define _LATD_LATD6_MASK                                    0x40
#define _LATD_LATD7_POSN                                    0x7
#define _LATD_LATD7_POSITION                                0x7
#define _LATD_LATD7_SIZE                                    0x1
#define _LATD_LATD7_LENGTH                                  0x1
#define _LATD_LATD7_MASK                                    0x80

// Register: LATE
#define LATE LATE
extern volatile unsigned char           LATE                __at(0x4C2);
#ifndef _LIB_BUILD
asm("LATE equ 04C2h");
#endif

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x4C6);
#ifndef _LIB_BUILD
asm("TRISA equ 04C6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x4C6);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x4C7);
#ifndef _LIB_BUILD
asm("TRISB equ 04C7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x4C7);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x4C8);
#ifndef _LIB_BUILD
asm("TRISC equ 04C8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x4C8);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: TRISD
#define TRISD TRISD
extern volatile unsigned char           TRISD               __at(0x4C9);
#ifndef _LIB_BUILD
asm("TRISD equ 04C9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISD0                 :1;
        unsigned TRISD1                 :1;
        unsigned TRISD2                 :1;
        unsigned TRISD3                 :1;
        unsigned TRISD4                 :1;
        unsigned TRISD5                 :1;
        unsigned TRISD6                 :1;
        unsigned TRISD7                 :1;
    };
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits __at(0x4C9);
// bitfield macros
#define _TRISD_TRISD0_POSN                                  0x0
#define _TRISD_TRISD0_POSITION                              0x0
#define _TRISD_TRISD0_SIZE                                  0x1
#define _TRISD_TRISD0_LENGTH                                0x1
#define _TRISD_TRISD0_MASK                                  0x1
#define _TRISD_TRISD1_POSN                                  0x1
#define _TRISD_TRISD1_POSITION                              0x1
#define _TRISD_TRISD1_SIZE                                  0x1
#define _TRISD_TRISD1_LENGTH                                0x1
#define _TRISD_TRISD1_MASK                                  0x2
#define _TRISD_TRISD2_POSN                                  0x2
#define _TRISD_TRISD2_POSITION                              0x2
#define _TRISD_TRISD2_SIZE                                  0x1
#define _TRISD_TRISD2_LENGTH                                0x1
#define _TRISD_TRISD2_MASK                                  0x4
#define _TRISD_TRISD3_POSN                                  0x3
#define _TRISD_TRISD3_POSITION                              0x3
#define _TRISD_TRISD3_SIZE                                  0x1
#define _TRISD_TRISD3_LENGTH                                0x1
#define _TRISD_TRISD3_MASK                                  0x8
#define _TRISD_TRISD4_POSN                                  0x4
#define _TRISD_TRISD4_POSITION                              0x4
#define _TRISD_TRISD4_SIZE                                  0x1
#define _TRISD_TRISD4_LENGTH                                0x1
#define _TRISD_TRISD4_MASK                                  0x10
#define _TRISD_TRISD5_POSN                                  0x5
#define _TRISD_TRISD5_POSITION                              0x5
#define _TRISD_TRISD5_SIZE                                  0x1
#define _TRISD_TRISD5_LENGTH                                0x1
#define _TRISD_TRISD5_MASK                                  0x20
#define _TRISD_TRISD6_POSN                                  0x6
#define _TRISD_TRISD6_POSITION                              0x6
#define _TRISD_TRISD6_SIZE                                  0x1
#define _TRISD_TRISD6_LENGTH                                0x1
#define _TRISD_TRISD6_MASK                                  0x40
#define _TRISD_TRISD7_POSN                                  0x7
#define _TRISD_TRISD7_POSITION                              0x7
#define _TRISD_TRISD7_SIZE                                  0x1
#define _TRISD_TRISD7_LENGTH                                0x1
#define _TRISD_TRISD7_MASK                                  0x80

// Register: TRISE
#define TRISE TRISE
extern volatile unsigned char           TRISE               __at(0x4CA);
#ifndef _LIB_BUILD
asm("TRISE equ 04CAh");
#endif

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x4CE);
#ifndef _LIB_BUILD
asm("PORTA equ 04CEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x4CE);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x4CF);
#ifndef _LIB_BUILD
asm("PORTB equ 04CFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x4CF);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x4D0);
#ifndef _LIB_BUILD
asm("PORTC equ 04D0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x4D0);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: PORTD
#define PORTD PORTD
extern volatile unsigned char           PORTD               __at(0x4D1);
#ifndef _LIB_BUILD
asm("PORTD equ 04D1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD0                    :1;
        unsigned RD1                    :1;
        unsigned RD2                    :1;
        unsigned RD3                    :1;
        unsigned RD4                    :1;
        unsigned RD5                    :1;
        unsigned RD6                    :1;
        unsigned RD7                    :1;
    };
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits __at(0x4D1);
// bitfield macros
#define _PORTD_RD0_POSN                                     0x0
#define _PORTD_RD0_POSITION                                 0x0
#define _PORTD_RD0_SIZE                                     0x1
#define _PORTD_RD0_LENGTH                                   0x1
#define _PORTD_RD0_MASK                                     0x1
#define _PORTD_RD1_POSN                                     0x1
#define _PORTD_RD1_POSITION                                 0x1
#define _PORTD_RD1_SIZE                                     0x1
#define _PORTD_RD1_LENGTH                                   0x1
#define _PORTD_RD1_MASK                                     0x2
#define _PORTD_RD2_POSN                                     0x2
#define _PORTD_RD2_POSITION                                 0x2
#define _PORTD_RD2_SIZE                                     0x1
#define _PORTD_RD2_LENGTH                                   0x1
#define _PORTD_RD2_MASK                                     0x4
#define _PORTD_RD3_POSN                                     0x3
#define _PORTD_RD3_POSITION                                 0x3
#define _PORTD_RD3_SIZE                                     0x1
#define _PORTD_RD3_LENGTH                                   0x1
#define _PORTD_RD3_MASK                                     0x8
#define _PORTD_RD4_POSN                                     0x4
#define _PORTD_RD4_POSITION                                 0x4
#define _PORTD_RD4_SIZE                                     0x1
#define _PORTD_RD4_LENGTH                                   0x1
#define _PORTD_RD4_MASK                                     0x10
#define _PORTD_RD5_POSN                                     0x5
#define _PORTD_RD5_POSITION                                 0x5
#define _PORTD_RD5_SIZE                                     0x1
#define _PORTD_RD5_LENGTH                                   0x1
#define _PORTD_RD5_MASK                                     0x20
#define _PORTD_RD6_POSN                                     0x6
#define _PORTD_RD6_POSITION                                 0x6
#define _PORTD_RD6_SIZE                                     0x1
#define _PORTD_RD6_LENGTH                                   0x1
#define _PORTD_RD6_MASK                                     0x40
#define _PORTD_RD7_POSN                                     0x7
#define _PORTD_RD7_POSITION                                 0x7
#define _PORTD_RD7_SIZE                                     0x1
#define _PORTD_RD7_LENGTH                                   0x1
#define _PORTD_RD7_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0x4D2);
#ifndef _LIB_BUILD
asm("PORTE equ 04D2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned RE3                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0x4D2);
// bitfield macros
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8

// Register: INTCON0
#define INTCON0 INTCON0
extern volatile unsigned char           INTCON0             __at(0x4D6);
#ifndef _LIB_BUILD
asm("INTCON0 equ 04D6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0EDG                :1;
        unsigned INT1EDG                :1;
        unsigned INT2EDG                :1;
        unsigned                        :2;
        unsigned IPEN                   :1;
        unsigned GIEL                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :7;
        unsigned GIEH                   :1;
    };
} INTCON0bits_t;
extern volatile INTCON0bits_t INTCON0bits __at(0x4D6);
// bitfield macros
#define _INTCON0_INT0EDG_POSN                               0x0
#define _INTCON0_INT0EDG_POSITION                           0x0
#define _INTCON0_INT0EDG_SIZE                               0x1
#define _INTCON0_INT0EDG_LENGTH                             0x1
#define _INTCON0_INT0EDG_MASK                               0x1
#define _INTCON0_INT1EDG_POSN                               0x1
#define _INTCON0_INT1EDG_POSITION                           0x1
#define _INTCON0_INT1EDG_SIZE                               0x1
#define _INTCON0_INT1EDG_LENGTH                             0x1
#define _INTCON0_INT1EDG_MASK                               0x2
#define _INTCON0_INT2EDG_POSN                               0x2
#define _INTCON0_INT2EDG_POSITION                           0x2
#define _INTCON0_INT2EDG_SIZE                               0x1
#define _INTCON0_INT2EDG_LENGTH                             0x1
#define _INTCON0_INT2EDG_MASK                               0x4
#define _INTCON0_IPEN_POSN                                  0x5
#define _INTCON0_IPEN_POSITION                              0x5
#define _INTCON0_IPEN_SIZE                                  0x1
#define _INTCON0_IPEN_LENGTH                                0x1
#define _INTCON0_IPEN_MASK                                  0x20
#define _INTCON0_GIEL_POSN                                  0x6
#define _INTCON0_GIEL_POSITION                              0x6
#define _INTCON0_GIEL_SIZE                                  0x1
#define _INTCON0_GIEL_LENGTH                                0x1
#define _INTCON0_GIEL_MASK                                  0x40
#define _INTCON0_GIE_POSN                                   0x7
#define _INTCON0_GIE_POSITION                               0x7
#define _INTCON0_GIE_SIZE                                   0x1
#define _INTCON0_GIE_LENGTH                                 0x1
#define _INTCON0_GIE_MASK                                   0x80
#define _INTCON0_GIEH_POSN                                  0x7
#define _INTCON0_GIEH_POSITION                              0x7
#define _INTCON0_GIEH_SIZE                                  0x1
#define _INTCON0_GIEH_LENGTH                                0x1
#define _INTCON0_GIEH_MASK                                  0x80

// Register: INTCON1
#define INTCON1 INTCON1
extern volatile unsigned char           INTCON1             __at(0x4D7);
#ifndef _LIB_BUILD
asm("INTCON1 equ 04D7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned STAT                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
    };
} INTCON1bits_t;
extern volatile INTCON1bits_t INTCON1bits __at(0x4D7);
// bitfield macros
#define _INTCON1_STAT_POSN                                  0x6
#define _INTCON1_STAT_POSITION                              0x6
#define _INTCON1_STAT_SIZE                                  0x2
#define _INTCON1_STAT_LENGTH                                0x2
#define _INTCON1_STAT_MASK                                  0xC0
#define _INTCON1_STAT0_POSN                                 0x6
#define _INTCON1_STAT0_POSITION                             0x6
#define _INTCON1_STAT0_SIZE                                 0x1
#define _INTCON1_STAT0_LENGTH                               0x1
#define _INTCON1_STAT0_MASK                                 0x40
#define _INTCON1_STAT1_POSN                                 0x7
#define _INTCON1_STAT1_POSITION                             0x7
#define _INTCON1_STAT1_SIZE                                 0x1
#define _INTCON1_STAT1_LENGTH                               0x1
#define _INTCON1_STAT1_MASK                                 0x80

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x4D8);
#ifndef _LIB_BUILD
asm("STATUS equ 04D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x4D8);
// bitfield macros
#define _STATUS_NOT_PD_POSN                                 0x5
#define _STATUS_NOT_PD_POSITION                             0x5
#define _STATUS_NOT_PD_SIZE                                 0x1
#define _STATUS_NOT_PD_LENGTH                               0x1
#define _STATUS_NOT_PD_MASK                                 0x20
#define _STATUS_NOT_TO_POSN                                 0x6
#define _STATUS_NOT_TO_POSITION                             0x6
#define _STATUS_NOT_TO_SIZE                                 0x1
#define _STATUS_NOT_TO_LENGTH                               0x1
#define _STATUS_NOT_TO_MASK                                 0x40
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_OV_POSN                                     0x3
#define _STATUS_OV_POSITION                                 0x3
#define _STATUS_OV_SIZE                                     0x1
#define _STATUS_OV_LENGTH                                   0x1
#define _STATUS_OV_MASK                                     0x8
#define _STATUS_N_POSN                                      0x4
#define _STATUS_N_POSITION                                  0x4
#define _STATUS_N_SIZE                                      0x1
#define _STATUS_N_LENGTH                                    0x1
#define _STATUS_N_MASK                                      0x10
#define _STATUS_nPD_POSN                                    0x5
#define _STATUS_nPD_POSITION                                0x5
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x20
#define _STATUS_nTO_POSN                                    0x6
#define _STATUS_nTO_POSITION                                0x6
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x40
#define _STATUS_PD_POSN                                     0x5
#define _STATUS_PD_POSITION                                 0x5
#define _STATUS_PD_SIZE                                     0x1
#define _STATUS_PD_LENGTH                                   0x1
#define _STATUS_PD_MASK                                     0x20
#define _STATUS_TO_POSN                                     0x6
#define _STATUS_TO_POSITION                                 0x6
#define _STATUS_TO_SIZE                                     0x1
#define _STATUS_TO_LENGTH                                   0x1
#define _STATUS_TO_MASK                                     0x40

// Register: FSR2
#define FSR2 FSR2
extern volatile unsigned short          FSR2                __at(0x4D9);
#ifndef _LIB_BUILD
asm("FSR2 equ 04D9h");
#endif

// Register: FSR2L
#define FSR2L FSR2L
extern volatile unsigned char           FSR2L               __at(0x4D9);
#ifndef _LIB_BUILD
asm("FSR2L equ 04D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2Lbits_t;
extern volatile FSR2Lbits_t FSR2Lbits __at(0x4D9);
// bitfield macros
#define _FSR2L_FSR2L_POSN                                   0x0
#define _FSR2L_FSR2L_POSITION                               0x0
#define _FSR2L_FSR2L_SIZE                                   0x8
#define _FSR2L_FSR2L_LENGTH                                 0x8
#define _FSR2L_FSR2L_MASK                                   0xFF

// Register: FSR2H
#define FSR2H FSR2H
extern volatile unsigned char           FSR2H               __at(0x4DA);
#ifndef _LIB_BUILD
asm("FSR2H equ 04DAh");
#endif

// Register: PLUSW2
#define PLUSW2 PLUSW2
extern volatile unsigned char           PLUSW2              __at(0x4DB);
#ifndef _LIB_BUILD
asm("PLUSW2 equ 04DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW2                 :8;
    };
} PLUSW2bits_t;
extern volatile PLUSW2bits_t PLUSW2bits __at(0x4DB);
// bitfield macros
#define _PLUSW2_PLUSW2_POSN                                 0x0
#define _PLUSW2_PLUSW2_POSITION                             0x0
#define _PLUSW2_PLUSW2_SIZE                                 0x8
#define _PLUSW2_PLUSW2_LENGTH                               0x8
#define _PLUSW2_PLUSW2_MASK                                 0xFF

// Register: PREINC2
#define PREINC2 PREINC2
extern volatile unsigned char           PREINC2             __at(0x4DC);
#ifndef _LIB_BUILD
asm("PREINC2 equ 04DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC2                :8;
    };
} PREINC2bits_t;
extern volatile PREINC2bits_t PREINC2bits __at(0x4DC);
// bitfield macros
#define _PREINC2_PREINC2_POSN                               0x0
#define _PREINC2_PREINC2_POSITION                           0x0
#define _PREINC2_PREINC2_SIZE                               0x8
#define _PREINC2_PREINC2_LENGTH                             0x8
#define _PREINC2_PREINC2_MASK                               0xFF

// Register: POSTDEC2
#define POSTDEC2 POSTDEC2
extern volatile unsigned char           POSTDEC2            __at(0x4DD);
#ifndef _LIB_BUILD
asm("POSTDEC2 equ 04DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC2               :8;
    };
} POSTDEC2bits_t;
extern volatile POSTDEC2bits_t POSTDEC2bits __at(0x4DD);
// bitfield macros
#define _POSTDEC2_POSTDEC2_POSN                             0x0
#define _POSTDEC2_POSTDEC2_POSITION                         0x0
#define _POSTDEC2_POSTDEC2_SIZE                             0x8
#define _POSTDEC2_POSTDEC2_LENGTH                           0x8
#define _POSTDEC2_POSTDEC2_MASK                             0xFF

// Register: POSTINC2
#define POSTINC2 POSTINC2
extern volatile unsigned char           POSTINC2            __at(0x4DE);
#ifndef _LIB_BUILD
asm("POSTINC2 equ 04DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC2               :8;
    };
} POSTINC2bits_t;
extern volatile POSTINC2bits_t POSTINC2bits __at(0x4DE);
// bitfield macros
#define _POSTINC2_POSTINC2_POSN                             0x0
#define _POSTINC2_POSTINC2_POSITION                         0x0
#define _POSTINC2_POSTINC2_SIZE                             0x8
#define _POSTINC2_POSTINC2_LENGTH                           0x8
#define _POSTINC2_POSTINC2_MASK                             0xFF

// Register: INDF2
#define INDF2 INDF2
extern volatile unsigned char           INDF2               __at(0x4DF);
#ifndef _LIB_BUILD
asm("INDF2 equ 04DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF2                  :8;
    };
} INDF2bits_t;
extern volatile INDF2bits_t INDF2bits __at(0x4DF);
// bitfield macros
#define _INDF2_INDF2_POSN                                   0x0
#define _INDF2_INDF2_POSITION                               0x0
#define _INDF2_INDF2_SIZE                                   0x8
#define _INDF2_INDF2_LENGTH                                 0x8
#define _INDF2_INDF2_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x4E0);
#ifndef _LIB_BUILD
asm("BSR equ 04E0h");
#endif

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x4E1);
#ifndef _LIB_BUILD
asm("FSR1 equ 04E1h");
#endif

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x4E1);
#ifndef _LIB_BUILD
asm("FSR1L equ 04E1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x4E1);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x4E2);
#ifndef _LIB_BUILD
asm("FSR1H equ 04E2h");
#endif

// Register: PLUSW1
#define PLUSW1 PLUSW1
extern volatile unsigned char           PLUSW1              __at(0x4E3);
#ifndef _LIB_BUILD
asm("PLUSW1 equ 04E3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW1                 :8;
    };
} PLUSW1bits_t;
extern volatile PLUSW1bits_t PLUSW1bits __at(0x4E3);
// bitfield macros
#define _PLUSW1_PLUSW1_POSN                                 0x0
#define _PLUSW1_PLUSW1_POSITION                             0x0
#define _PLUSW1_PLUSW1_SIZE                                 0x8
#define _PLUSW1_PLUSW1_LENGTH                               0x8
#define _PLUSW1_PLUSW1_MASK                                 0xFF

// Register: PREINC1
#define PREINC1 PREINC1
extern volatile unsigned char           PREINC1             __at(0x4E4);
#ifndef _LIB_BUILD
asm("PREINC1 equ 04E4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC1                :8;
    };
} PREINC1bits_t;
extern volatile PREINC1bits_t PREINC1bits __at(0x4E4);
// bitfield macros
#define _PREINC1_PREINC1_POSN                               0x0
#define _PREINC1_PREINC1_POSITION                           0x0
#define _PREINC1_PREINC1_SIZE                               0x8
#define _PREINC1_PREINC1_LENGTH                             0x8
#define _PREINC1_PREINC1_MASK                               0xFF

// Register: POSTDEC1
#define POSTDEC1 POSTDEC1
extern volatile unsigned char           POSTDEC1            __at(0x4E5);
#ifndef _LIB_BUILD
asm("POSTDEC1 equ 04E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC1               :8;
    };
} POSTDEC1bits_t;
extern volatile POSTDEC1bits_t POSTDEC1bits __at(0x4E5);
// bitfield macros
#define _POSTDEC1_POSTDEC1_POSN                             0x0
#define _POSTDEC1_POSTDEC1_POSITION                         0x0
#define _POSTDEC1_POSTDEC1_SIZE                             0x8
#define _POSTDEC1_POSTDEC1_LENGTH                           0x8
#define _POSTDEC1_POSTDEC1_MASK                             0xFF

// Register: POSTINC1
#define POSTINC1 POSTINC1
extern volatile unsigned char           POSTINC1            __at(0x4E6);
#ifndef _LIB_BUILD
asm("POSTINC1 equ 04E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC1               :8;
    };
} POSTINC1bits_t;
extern volatile POSTINC1bits_t POSTINC1bits __at(0x4E6);
// bitfield macros
#define _POSTINC1_POSTINC1_POSN                             0x0
#define _POSTINC1_POSTINC1_POSITION                         0x0
#define _POSTINC1_POSTINC1_SIZE                             0x8
#define _POSTINC1_POSTINC1_LENGTH                           0x8
#define _POSTINC1_POSTINC1_MASK                             0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x4E7);
#ifndef _LIB_BUILD
asm("INDF1 equ 04E7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x4E7);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x4E8);
#ifndef _LIB_BUILD
asm("WREG equ 04E8h");
#endif
// aliases
// extern volatile unsigned char           W                   __at(0x4E8);
#ifndef _LIB_BUILD
// asm("W equ 04E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x4E8);
// bitfield macros
#define _WREG_WREG_POSN                                     0x0
#define _WREG_WREG_POSITION                                 0x0
#define _WREG_WREG_SIZE                                     0x8
#define _WREG_WREG_LENGTH                                   0x8
#define _WREG_WREG_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} Wbits_t;
extern volatile Wbits_t Wbits __at(0x4E8);
// bitfield macros
#define _W_WREG_POSN                                        0x0
#define _W_WREG_POSITION                                    0x0
#define _W_WREG_SIZE                                        0x8
#define _W_WREG_LENGTH                                      0x8
#define _W_WREG_MASK                                        0xFF

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x4E9);
#ifndef _LIB_BUILD
asm("FSR0 equ 04E9h");
#endif

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x4E9);
#ifndef _LIB_BUILD
asm("FSR0L equ 04E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x4E9);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x4EA);
#ifndef _LIB_BUILD
asm("FSR0H equ 04EAh");
#endif

// Register: PLUSW0
#define PLUSW0 PLUSW0
extern volatile unsigned char           PLUSW0              __at(0x4EB);
#ifndef _LIB_BUILD
asm("PLUSW0 equ 04EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW0                 :8;
    };
} PLUSW0bits_t;
extern volatile PLUSW0bits_t PLUSW0bits __at(0x4EB);
// bitfield macros
#define _PLUSW0_PLUSW0_POSN                                 0x0
#define _PLUSW0_PLUSW0_POSITION                             0x0
#define _PLUSW0_PLUSW0_SIZE                                 0x8
#define _PLUSW0_PLUSW0_LENGTH                               0x8
#define _PLUSW0_PLUSW0_MASK                                 0xFF

// Register: PREINC0
#define PREINC0 PREINC0
extern volatile unsigned char           PREINC0             __at(0x4EC);
#ifndef _LIB_BUILD
asm("PREINC0 equ 04ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC0                :8;
    };
} PREINC0bits_t;
extern volatile PREINC0bits_t PREINC0bits __at(0x4EC);
// bitfield macros
#define _PREINC0_PREINC0_POSN                               0x0
#define _PREINC0_PREINC0_POSITION                           0x0
#define _PREINC0_PREINC0_SIZE                               0x8
#define _PREINC0_PREINC0_LENGTH                             0x8
#define _PREINC0_PREINC0_MASK                               0xFF

// Register: POSTDEC0
#define POSTDEC0 POSTDEC0
extern volatile unsigned char           POSTDEC0            __at(0x4ED);
#ifndef _LIB_BUILD
asm("POSTDEC0 equ 04EDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC0               :8;
    };
} POSTDEC0bits_t;
extern volatile POSTDEC0bits_t POSTDEC0bits __at(0x4ED);
// bitfield macros
#define _POSTDEC0_POSTDEC0_POSN                             0x0
#define _POSTDEC0_POSTDEC0_POSITION                         0x0
#define _POSTDEC0_POSTDEC0_SIZE                             0x8
#define _POSTDEC0_POSTDEC0_LENGTH                           0x8
#define _POSTDEC0_POSTDEC0_MASK                             0xFF

// Register: POSTINC0
#define POSTINC0 POSTINC0
extern volatile unsigned char           POSTINC0            __at(0x4EE);
#ifndef _LIB_BUILD
asm("POSTINC0 equ 04EEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC0               :8;
    };
} POSTINC0bits_t;
extern volatile POSTINC0bits_t POSTINC0bits __at(0x4EE);
// bitfield macros
#define _POSTINC0_POSTINC0_POSN                             0x0
#define _POSTINC0_POSTINC0_POSITION                         0x0
#define _POSTINC0_POSTINC0_SIZE                             0x8
#define _POSTINC0_POSTINC0_LENGTH                           0x8
#define _POSTINC0_POSTINC0_MASK                             0xFF

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x4EF);
#ifndef _LIB_BUILD
asm("INDF0 equ 04EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x4EF);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x4F0);
#ifndef _LIB_BUILD
asm("PCON0 equ 04F0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_BOR                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_POR                :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RI                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_RMCLR              :1;
    };
    struct {
        unsigned                        :4;
        unsigned NOT_RWDT               :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_WDTWV              :1;
    };
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
    struct {
        unsigned BOR                    :1;
        unsigned POR                    :1;
        unsigned RI                     :1;
        unsigned RMCLR                  :1;
        unsigned RWDT                   :1;
        unsigned WDTWV                  :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x4F0);
// bitfield macros
#define _PCON0_NOT_BOR_POSN                                 0x0
#define _PCON0_NOT_BOR_POSITION                             0x0
#define _PCON0_NOT_BOR_SIZE                                 0x1
#define _PCON0_NOT_BOR_LENGTH                               0x1
#define _PCON0_NOT_BOR_MASK                                 0x1
#define _PCON0_NOT_POR_POSN                                 0x1
#define _PCON0_NOT_POR_POSITION                             0x1
#define _PCON0_NOT_POR_SIZE                                 0x1
#define _PCON0_NOT_POR_LENGTH                               0x1
#define _PCON0_NOT_POR_MASK                                 0x2
#define _PCON0_NOT_RI_POSN                                  0x2
#define _PCON0_NOT_RI_POSITION                              0x2
#define _PCON0_NOT_RI_SIZE                                  0x1
#define _PCON0_NOT_RI_LENGTH                                0x1
#define _PCON0_NOT_RI_MASK                                  0x4
#define _PCON0_NOT_RMCLR_POSN                               0x3
#define _PCON0_NOT_RMCLR_POSITION                           0x3
#define _PCON0_NOT_RMCLR_SIZE                               0x1
#define _PCON0_NOT_RMCLR_LENGTH                             0x1
#define _PCON0_NOT_RMCLR_MASK                               0x8
#define _PCON0_NOT_RWDT_POSN                                0x4
#define _PCON0_NOT_RWDT_POSITION                            0x4
#define _PCON0_NOT_RWDT_SIZE                                0x1
#define _PCON0_NOT_RWDT_LENGTH                              0x1
#define _PCON0_NOT_RWDT_MASK                                0x10
#define _PCON0_NOT_WDTWV_POSN                               0x5
#define _PCON0_NOT_WDTWV_POSITION                           0x5
#define _PCON0_NOT_WDTWV_SIZE                               0x1
#define _PCON0_NOT_WDTWV_LENGTH                             0x1
#define _PCON0_NOT_WDTWV_MASK                               0x20
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80
#define _PCON0_BOR_POSN                                     0x0
#define _PCON0_BOR_POSITION                                 0x0
#define _PCON0_BOR_SIZE                                     0x1
#define _PCON0_BOR_LENGTH                                   0x1
#define _PCON0_BOR_MASK                                     0x1
#define _PCON0_POR_POSN                                     0x1
#define _PCON0_POR_POSITION                                 0x1
#define _PCON0_POR_SIZE                                     0x1
#define _PCON0_POR_LENGTH                                   0x1
#define _PCON0_POR_MASK                                     0x2
#define _PCON0_RI_POSN                                      0x2
#define _PCON0_RI_POSITION                                  0x2
#define _PCON0_RI_SIZE                                      0x1
#define _PCON0_RI_LENGTH                                    0x1
#define _PCON0_RI_MASK                                      0x4
#define _PCON0_RMCLR_POSN                                   0x3
#define _PCON0_RMCLR_POSITION                               0x3
#define _PCON0_RMCLR_SIZE                                   0x1
#define _PCON0_RMCLR_LENGTH                                 0x1
#define _PCON0_RMCLR_MASK                                   0x8
#define _PCON0_RWDT_POSN                                    0x4
#define _PCON0_RWDT_POSITION                                0x4
#define _PCON0_RWDT_SIZE                                    0x1
#define _PCON0_RWDT_LENGTH                                  0x1
#define _PCON0_RWDT_MASK                                    0x10
#define _PCON0_WDTWV_POSN                                   0x5
#define _PCON0_WDTWV_POSITION                               0x5
#define _PCON0_WDTWV_SIZE                                   0x1
#define _PCON0_WDTWV_LENGTH                                 0x1
#define _PCON0_WDTWV_MASK                                   0x20

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x4F1);
#ifndef _LIB_BUILD
asm("PCON1 equ 04F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_RCM                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_MEMV               :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RVREG              :1;
    };
    struct {
        unsigned nRCM                   :1;
        unsigned nMEMV                  :1;
        unsigned nRVREG                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned MEMV                   :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x4F1);
// bitfield macros
#define _PCON1_NOT_RCM_POSN                                 0x0
#define _PCON1_NOT_RCM_POSITION                             0x0
#define _PCON1_NOT_RCM_SIZE                                 0x1
#define _PCON1_NOT_RCM_LENGTH                               0x1
#define _PCON1_NOT_RCM_MASK                                 0x1
#define _PCON1_NOT_MEMV_POSN                                0x1
#define _PCON1_NOT_MEMV_POSITION                            0x1
#define _PCON1_NOT_MEMV_SIZE                                0x1
#define _PCON1_NOT_MEMV_LENGTH                              0x1
#define _PCON1_NOT_MEMV_MASK                                0x2
#define _PCON1_NOT_RVREG_POSN                               0x2
#define _PCON1_NOT_RVREG_POSITION                           0x2
#define _PCON1_NOT_RVREG_SIZE                               0x1
#define _PCON1_NOT_RVREG_LENGTH                             0x1
#define _PCON1_NOT_RVREG_MASK                               0x4
#define _PCON1_nRCM_POSN                                    0x0
#define _PCON1_nRCM_POSITION                                0x0
#define _PCON1_nRCM_SIZE                                    0x1
#define _PCON1_nRCM_LENGTH                                  0x1
#define _PCON1_nRCM_MASK                                    0x1
#define _PCON1_nMEMV_POSN                                   0x1
#define _PCON1_nMEMV_POSITION                               0x1
#define _PCON1_nMEMV_SIZE                                   0x1
#define _PCON1_nMEMV_LENGTH                                 0x1
#define _PCON1_nMEMV_MASK                                   0x2
#define _PCON1_nRVREG_POSN                                  0x2
#define _PCON1_nRVREG_POSITION                              0x2
#define _PCON1_nRVREG_SIZE                                  0x1
#define _PCON1_nRVREG_LENGTH                                0x1
#define _PCON1_nRVREG_MASK                                  0x4
#define _PCON1_MEMV_POSN                                    0x1
#define _PCON1_MEMV_POSITION                                0x1
#define _PCON1_MEMV_SIZE                                    0x1
#define _PCON1_MEMV_LENGTH                                  0x1
#define _PCON1_MEMV_MASK                                    0x2

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x4F2);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 04F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x4F2);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4

// Register: PROD
#define PROD PROD
extern volatile unsigned short          PROD                __at(0x4F3);
#ifndef _LIB_BUILD
asm("PROD equ 04F3h");
#endif

// Register: PRODL
#define PRODL PRODL
extern volatile unsigned char           PRODL               __at(0x4F3);
#ifndef _LIB_BUILD
asm("PRODL equ 04F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODLbits_t;
extern volatile PRODLbits_t PRODLbits __at(0x4F3);
// bitfield macros
#define _PRODL_PRODL_POSN                                   0x0
#define _PRODL_PRODL_POSITION                               0x0
#define _PRODL_PRODL_SIZE                                   0x8
#define _PRODL_PRODL_LENGTH                                 0x8
#define _PRODL_PRODL_MASK                                   0xFF

// Register: PRODH
#define PRODH PRODH
extern volatile unsigned char           PRODH               __at(0x4F4);
#ifndef _LIB_BUILD
asm("PRODH equ 04F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODHbits_t;
extern volatile PRODHbits_t PRODHbits __at(0x4F4);
// bitfield macros
#define _PRODH_PRODH_POSN                                   0x0
#define _PRODH_PRODH_POSITION                               0x0
#define _PRODH_PRODH_SIZE                                   0x8
#define _PRODH_PRODH_LENGTH                                 0x8
#define _PRODH_PRODH_MASK                                   0xFF

// Register: TABLAT
#define TABLAT TABLAT
extern volatile unsigned char           TABLAT              __at(0x4F5);
#ifndef _LIB_BUILD
asm("TABLAT equ 04F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TABLAT                 :8;
    };
} TABLATbits_t;
extern volatile TABLATbits_t TABLATbits __at(0x4F5);
// bitfield macros
#define _TABLAT_TABLAT_POSN                                 0x0
#define _TABLAT_TABLAT_POSITION                             0x0
#define _TABLAT_TABLAT_SIZE                                 0x8
#define _TABLAT_TABLAT_LENGTH                               0x8
#define _TABLAT_TABLAT_MASK                                 0xFF

// Register: TBLPTR
#define TBLPTR TBLPTR
#ifndef __CCI__
extern volatile __uint24                TBLPTR              __at(0x4F6);
#endif
#ifndef _LIB_BUILD
asm("TBLPTR equ 04F6h");
#endif

// Register: TBLPTRL
#define TBLPTRL TBLPTRL
extern volatile unsigned char           TBLPTRL             __at(0x4F6);
#ifndef _LIB_BUILD
asm("TBLPTRL equ 04F6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRL                :8;
    };
} TBLPTRLbits_t;
extern volatile TBLPTRLbits_t TBLPTRLbits __at(0x4F6);
// bitfield macros
#define _TBLPTRL_TBLPTRL_POSN                               0x0
#define _TBLPTRL_TBLPTRL_POSITION                           0x0
#define _TBLPTRL_TBLPTRL_SIZE                               0x8
#define _TBLPTRL_TBLPTRL_LENGTH                             0x8
#define _TBLPTRL_TBLPTRL_MASK                               0xFF

// Register: TBLPTRH
#define TBLPTRH TBLPTRH
extern volatile unsigned char           TBLPTRH             __at(0x4F7);
#ifndef _LIB_BUILD
asm("TBLPTRH equ 04F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRH                :8;
    };
} TBLPTRHbits_t;
extern volatile TBLPTRHbits_t TBLPTRHbits __at(0x4F7);
// bitfield macros
#define _TBLPTRH_TBLPTRH_POSN                               0x0
#define _TBLPTRH_TBLPTRH_POSITION                           0x0
#define _TBLPTRH_TBLPTRH_SIZE                               0x8
#define _TBLPTRH_TBLPTRH_LENGTH                             0x8
#define _TBLPTRH_TBLPTRH_MASK                               0xFF

// Register: TBLPTRU
#define TBLPTRU TBLPTRU
extern volatile unsigned char           TBLPTRU             __at(0x4F8);
#ifndef _LIB_BUILD
asm("TBLPTRU equ 04F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRU                :6;
    };
    struct {
        unsigned                        :5;
        unsigned ACSS                   :1;
    };
} TBLPTRUbits_t;
extern volatile TBLPTRUbits_t TBLPTRUbits __at(0x4F8);
// bitfield macros
#define _TBLPTRU_TBLPTRU_POSN                               0x0
#define _TBLPTRU_TBLPTRU_POSITION                           0x0
#define _TBLPTRU_TBLPTRU_SIZE                               0x6
#define _TBLPTRU_TBLPTRU_LENGTH                             0x6
#define _TBLPTRU_TBLPTRU_MASK                               0x3F
#define _TBLPTRU_ACSS_POSN                                  0x5
#define _TBLPTRU_ACSS_POSITION                              0x5
#define _TBLPTRU_ACSS_SIZE                                  0x1
#define _TBLPTRU_ACSS_LENGTH                                0x1
#define _TBLPTRU_ACSS_MASK                                  0x20

// Register: PCLAT
#define PCLAT PCLAT
#ifndef __CCI__
extern volatile __uint24                PCLAT               __at(0x4F9);
#endif
#ifndef _LIB_BUILD
asm("PCLAT equ 04F9h");
#endif

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x4F9);
#ifndef _LIB_BUILD
asm("PCL equ 04F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x4F9);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x4FA);
#ifndef _LIB_BUILD
asm("PCLATH equ 04FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x4FA);
// bitfield macros
#define _PCLATH_PCH_POSN                                    0x0
#define _PCLATH_PCH_POSITION                                0x0
#define _PCLATH_PCH_SIZE                                    0x8
#define _PCLATH_PCH_LENGTH                                  0x8
#define _PCLATH_PCH_MASK                                    0xFF

// Register: PCLATU
#define PCLATU PCLATU
extern volatile unsigned char           PCLATU              __at(0x4FB);
#ifndef _LIB_BUILD
asm("PCLATU equ 04FBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATUbits_t;
extern volatile PCLATUbits_t PCLATUbits __at(0x4FB);
// bitfield macros
#define _PCLATU_PCU_POSN                                    0x0
#define _PCLATU_PCU_POSITION                                0x0
#define _PCLATU_PCU_SIZE                                    0x5
#define _PCLATU_PCU_LENGTH                                  0x5
#define _PCLATU_PCU_MASK                                    0x1F

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x4FC);
#ifndef _LIB_BUILD
asm("STKPTR equ 04FCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :6;
    };
    struct {
        unsigned STKPTR0                :1;
        unsigned STKPTR1                :1;
        unsigned STKPTR2                :1;
        unsigned STKPTR3                :1;
        unsigned STKPTR4                :1;
        unsigned STKPTR5                :1;
    };
    struct {
        unsigned SP0                    :1;
        unsigned SP1                    :1;
        unsigned SP2                    :1;
        unsigned SP3                    :1;
        unsigned SP4                    :1;
        unsigned SP5                    :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x4FC);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x6
#define _STKPTR_STKPTR_LENGTH                               0x6
#define _STKPTR_STKPTR_MASK                                 0x3F
#define _STKPTR_STKPTR0_POSN                                0x0
#define _STKPTR_STKPTR0_POSITION                            0x0
#define _STKPTR_STKPTR0_SIZE                                0x1
#define _STKPTR_STKPTR0_LENGTH                              0x1
#define _STKPTR_STKPTR0_MASK                                0x1
#define _STKPTR_STKPTR1_POSN                                0x1
#define _STKPTR_STKPTR1_POSITION                            0x1
#define _STKPTR_STKPTR1_SIZE                                0x1
#define _STKPTR_STKPTR1_LENGTH                              0x1
#define _STKPTR_STKPTR1_MASK                                0x2
#define _STKPTR_STKPTR2_POSN                                0x2
#define _STKPTR_STKPTR2_POSITION                            0x2
#define _STKPTR_STKPTR2_SIZE                                0x1
#define _STKPTR_STKPTR2_LENGTH                              0x1
#define _STKPTR_STKPTR2_MASK                                0x4
#define _STKPTR_STKPTR3_POSN                                0x3
#define _STKPTR_STKPTR3_POSITION                            0x3
#define _STKPTR_STKPTR3_SIZE                                0x1
#define _STKPTR_STKPTR3_LENGTH                              0x1
#define _STKPTR_STKPTR3_MASK                                0x8
#define _STKPTR_STKPTR4_POSN                                0x4
#define _STKPTR_STKPTR4_POSITION                            0x4
#define _STKPTR_STKPTR4_SIZE                                0x1
#define _STKPTR_STKPTR4_LENGTH                              0x1
#define _STKPTR_STKPTR4_MASK                                0x10
#define _STKPTR_STKPTR5_POSN                                0x5
#define _STKPTR_STKPTR5_POSITION                            0x5
#define _STKPTR_STKPTR5_SIZE                                0x1
#define _STKPTR_STKPTR5_LENGTH                              0x1
#define _STKPTR_STKPTR5_MASK                                0x20
#define _STKPTR_SP0_POSN                                    0x0
#define _STKPTR_SP0_POSITION                                0x0
#define _STKPTR_SP0_SIZE                                    0x1
#define _STKPTR_SP0_LENGTH                                  0x1
#define _STKPTR_SP0_MASK                                    0x1
#define _STKPTR_SP1_POSN                                    0x1
#define _STKPTR_SP1_POSITION                                0x1
#define _STKPTR_SP1_SIZE                                    0x1
#define _STKPTR_SP1_LENGTH                                  0x1
#define _STKPTR_SP1_MASK                                    0x2
#define _STKPTR_SP2_POSN                                    0x2
#define _STKPTR_SP2_POSITION                                0x2
#define _STKPTR_SP2_SIZE                                    0x1
#define _STKPTR_SP2_LENGTH                                  0x1
#define _STKPTR_SP2_MASK                                    0x4
#define _STKPTR_SP3_POSN                                    0x3
#define _STKPTR_SP3_POSITION                                0x3
#define _STKPTR_SP3_SIZE                                    0x1
#define _STKPTR_SP3_LENGTH                                  0x1
#define _STKPTR_SP3_MASK                                    0x8
#define _STKPTR_SP4_POSN                                    0x4
#define _STKPTR_SP4_POSITION                                0x4
#define _STKPTR_SP4_SIZE                                    0x1
#define _STKPTR_SP4_LENGTH                                  0x1
#define _STKPTR_SP4_MASK                                    0x10
#define _STKPTR_SP5_POSN                                    0x5
#define _STKPTR_SP5_POSITION                                0x5
#define _STKPTR_SP5_SIZE                                    0x1
#define _STKPTR_SP5_LENGTH                                  0x1
#define _STKPTR_SP5_MASK                                    0x20

// Register: TOS
#define TOS TOS
#ifndef __CCI__
extern volatile __uint24                TOS                 __at(0x4FD);
#endif
#ifndef _LIB_BUILD
asm("TOS equ 04FDh");
#endif

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x4FD);
#ifndef _LIB_BUILD
asm("TOSL equ 04FDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x4FD);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x4FE);
#ifndef _LIB_BUILD
asm("TOSH equ 04FEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x4FE);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF

// Register: TOSU
#define TOSU TOSU
extern volatile unsigned char           TOSU                __at(0x4FF);
#ifndef _LIB_BUILD
asm("TOSU equ 04FFh");
#endif

/*
 * Register Mirrors in DMA Space
 */

// Register: CCPR1L
#define                                 CCPR1L_M1           0x4000
// Register: CCPR1H
#define                                 CCPR1H_M1           0x4001
// Register: CCPR2L
#define                                 CCPR2L_M1           0x4002
// Register: CCPR2H
#define                                 CCPR2H_M1           0x4003
// Register: CCPR3L
#define                                 CCPR3L_M1           0x4004
// Register: CCPR3H
#define                                 CCPR3H_M1           0x4005
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M1        0x4006
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M1        0x4007
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M1        0x4008
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M1        0x4009
// Register: PWM3S1P1L
#define                                 PWM3S1P1L_M1        0x400A
// Register: PWM3S1P1H
#define                                 PWM3S1P1H_M1        0x400B
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M2        0x4010
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M2        0x4011
// Register: PWM1S1P2L
#define                                 PWM1S1P2L_M1        0x4012
// Register: PWM1S1P2H
#define                                 PWM1S1P2H_M1        0x4013
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M2        0x4014
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M2        0x4015
// Register: PWM2S1P2L
#define                                 PWM2S1P2L_M1        0x4016
// Register: PWM2S1P2H
#define                                 PWM2S1P2H_M1        0x4017
// Register: PWM3S1P1L
#define                                 PWM3S1P1L_M2        0x4018
// Register: PWM3S1P1H
#define                                 PWM3S1P1H_M2        0x4019
// Register: PWM3S1P2L
#define                                 PWM3S1P2L_M1        0x401A
// Register: PWM3S1P2H
#define                                 PWM3S1P2H_M1        0x401B
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M3        0x4020
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M3        0x4021
// Register: PWM1S1P2L
#define                                 PWM1S1P2L_M2        0x4022
// Register: PWM1S1P2H
#define                                 PWM1S1P2H_M2        0x4023
// Register: PWM1PRL
#define                                 PWM1PRL_M1          0x4024
// Register: PWM1PRH
#define                                 PWM1PRH_M1          0x4025
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M3        0x4026
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M3        0x4027
// Register: PWM2S1P2L
#define                                 PWM2S1P2L_M2        0x4028
// Register: PWM2S1P2H
#define                                 PWM2S1P2H_M2        0x4029
// Register: PWM2PRL
#define                                 PWM2PRL_M1          0x402A
// Register: PWM2PRH
#define                                 PWM2PRH_M1          0x402B
// Register: PWM3S1P1L
#define                                 PWM3S1P1L_M3        0x402C
// Register: PWM3S1P1H
#define                                 PWM3S1P1H_M3        0x402D
// Register: PWM3S1P2L
#define                                 PWM3S1P2L_M2        0x402E
// Register: PWM3S1P2H
#define                                 PWM3S1P2H_M2        0x402F
// Register: PWM3PRL
#define                                 PWM3PRL_M1          0x4030
// Register: PWM3PRH
#define                                 PWM3PRH_M1          0x4031
// Register: CCPR1L
#define                                 CCPR1L_M2           0x4040
// Register: CCPR1H
#define                                 CCPR1H_M2           0x4041
// Register: T2PR
#define                                 T2PR_M1             0x4042
// Register: CCPR2L
#define                                 CCPR2L_M2           0x4043
// Register: CCPR2H
#define                                 CCPR2H_M2           0x4044
// Register: T4PR
#define                                 T4PR_M1             0x4045
// Register: CCPR3L
#define                                 CCPR3L_M2           0x4046
// Register: CCPR3H
#define                                 CCPR3H_M2           0x4047
// Register: T6PR
#define                                 T6PR_M1             0x4048
// Register: ADLTHL
#define                                 ADLTHL_M1           0x4060
// Register: ADLTHH
#define                                 ADLTHH_M1           0x4061
// Register: ADUTHL
#define                                 ADUTHL_M1           0x4062
// Register: ADUTHH
#define                                 ADUTHH_M1           0x4063
// Register: ADERRL
#define                                 ADERRL_M1           0x4064
// Register: ADERRH
#define                                 ADERRH_M1           0x4065
// Register: ADSTPTL
#define                                 ADSTPTL_M1          0x4066
// Register: ADSTPTH
#define                                 ADSTPTH_M1          0x4067
// Register: ADFLTRL
#define                                 ADFLTRL_M1          0x4068
// Register: ADFLTRH
#define                                 ADFLTRH_M1          0x4069
// Register: ADACCL
#define                                 ADACCL_M1           0x406A
// Register: ADACCH
#define                                 ADACCH_M1           0x406B
// Register: ADACCU
#define                                 ADACCU_M1           0x406C
// Register: ADCNT
#define                                 ADCNT_M1            0x406D
// Register: ADRPT
#define                                 ADRPT_M1            0x406E
// Register: ADPREVL
#define                                 ADPREVL_M1          0x406F
// Register: ADPREVH
#define                                 ADPREVH_M1          0x4070
// Register: ADACQL
#define                                 ADACQL_M1           0x4071
// Register: ADACQH
#define                                 ADACQH_M1           0x4072
// Register: ADCAP
#define                                 ADCAP_M1            0x4073
// Register: ADCON0
#define                                 ADCON0_M1           0x4074
// Register: ADCON1
#define                                 ADCON1_M1           0x4075
// Register: ADCON2
#define                                 ADCON2_M1           0x4076
// Register: ADCON3
#define                                 ADCON3_M1           0x4077
// Register: ADREF
#define                                 ADREF_M1            0x4078
// Register: ADACT
#define                                 ADACT_M1            0x4079
// Register: ADCLK
#define                                 ADCLK_M1            0x407A
// Register: ADPCH
#define                                 ADPCH_M1            0x407B
// Register: ADRESL
#define                                 ADRESL_M1           0x407C
// Register: ADRESH
#define                                 ADRESH_M1           0x407D
// Register: ADLTHL
#define                                 ADLTHL_M2           0x40E0
// Register: ADLTHH
#define                                 ADLTHH_M2           0x40E1
// Register: ADUTHL
#define                                 ADUTHL_M2           0x40E2
// Register: ADUTHH
#define                                 ADUTHH_M2           0x40E3
// Register: ADERRL
#define                                 ADERRL_M2           0x40E4
// Register: ADERRH
#define                                 ADERRH_M2           0x40E5
// Register: ADSTPTL
#define                                 ADSTPTL_M2          0x40E6
// Register: ADSTPTH
#define                                 ADSTPTH_M2          0x40E7
// Register: ADFLTRL
#define                                 ADFLTRL_M2          0x40E8
// Register: ADFLTRH
#define                                 ADFLTRH_M2          0x40E9
// Register: ADACCL
#define                                 ADACCL_M2           0x40EA
// Register: ADACCH
#define                                 ADACCH_M2           0x40EB
// Register: ADACCU
#define                                 ADACCU_M2           0x40EC
// Register: ADCNT
#define                                 ADCNT_M2            0x40ED
// Register: ADRPT
#define                                 ADRPT_M2            0x40EE
// Register: ADPREVL
#define                                 ADPREVL_M2          0x40EF
// Register: ADPREVH
#define                                 ADPREVH_M2          0x40F0
// Register: ADACQL
#define                                 ADACQL_M2           0x40F1
// Register: ADACQH
#define                                 ADACQH_M2           0x40F2
// Register: ADCAP
#define                                 ADCAP_M2            0x40F3
// Register: ADPCH
#define                                 ADPCH_M2            0x40F4
// Register: ADRESL
#define                                 ADRESL_M2           0x40F5
// Register: ADRESH
#define                                 ADRESH_M2           0x40F6
// Register: DMAnBUF
#define                                 DMAnBUF_DMA1        0x4100
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA1      0x4101
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA1      0x4102
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA1      0x4103
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA1      0x4104
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA1       0x4105
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA1       0x4106
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA1       0x4107
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA1       0x4108
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA1      0x4109
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA1      0x410A
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA1      0x410B
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA1      0x410C
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA1      0x410D
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA1       0x410E
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA1       0x410F
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA1       0x4110
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA1       0x4111
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA1       0x4112
// Register: DMAnCON0
#define                                 DMAnCON0_DMA1       0x4113
// Register: DMAnCON1
#define                                 DMAnCON1_DMA1       0x4114
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA1       0x4115
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA1       0x4116
// Register: DMAnBUF
#define                                 DMAnBUF_DMA2        0x4117
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA2      0x4118
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA2      0x4119
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA2      0x411A
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA2      0x411B
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA2       0x411C
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA2       0x411D
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA2       0x411E
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA2       0x411F
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA2      0x4120
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA2      0x4121
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA2      0x4122
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA2      0x4123
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA2      0x4124
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA2       0x4125
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA2       0x4126
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA2       0x4127
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA2       0x4128
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA2       0x4129
// Register: DMAnCON0
#define                                 DMAnCON0_DMA2       0x412A
// Register: DMAnCON1
#define                                 DMAnCON1_DMA2       0x412B
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA2       0x412C
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA2       0x412D
// Register: DMAnBUF
#define                                 DMAnBUF_DMA3        0x412E
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA3      0x412F
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA3      0x4130
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA3      0x4131
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA3      0x4132
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA3       0x4133
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA3       0x4134
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA3       0x4135
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA3       0x4136
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA3      0x4137
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA3      0x4138
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA3      0x4139
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA3      0x413A
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA3      0x413B
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA3       0x413C
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA3       0x413D
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA3       0x413E
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA3       0x413F
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA3       0x4140
// Register: DMAnCON0
#define                                 DMAnCON0_DMA3       0x4141
// Register: DMAnCON1
#define                                 DMAnCON1_DMA3       0x4142
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA3       0x4143
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA3       0x4144
// Register: DMAnBUF
#define                                 DMAnBUF_DMA4        0x4145
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA4      0x4146
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA4      0x4147
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA4      0x4148
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA4      0x4149
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA4       0x414A
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA4       0x414B
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA4       0x414C
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA4       0x414D
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA4      0x414E
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA4      0x414F
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA4      0x4150
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA4      0x4151
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA4      0x4152
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA4       0x4153
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA4       0x4154
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA4       0x4155
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA4       0x4156
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA4       0x4157
// Register: DMAnCON0
#define                                 DMAnCON0_DMA4       0x4158
// Register: DMAnCON1
#define                                 DMAnCON1_DMA4       0x4159
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA4       0x415A
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA4       0x415B
// Register: DMAnBUF
#define                                 DMAnBUF_DMA5        0x415C
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA5      0x415D
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA5      0x415E
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA5      0x415F
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA5      0x4160
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA5       0x4161
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA5       0x4162
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA5       0x4163
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA5       0x4164
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA5      0x4165
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA5      0x4166
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA5      0x4167
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA5      0x4168
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA5      0x4169
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA5       0x416A
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA5       0x416B
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA5       0x416C
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA5       0x416D
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA5       0x416E
// Register: DMAnCON0
#define                                 DMAnCON0_DMA5       0x416F
// Register: DMAnCON1
#define                                 DMAnCON1_DMA5       0x4170
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA5       0x4171
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA5       0x4172
// Register: DMAnBUF
#define                                 DMAnBUF_DMA6        0x4173
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA6      0x4174
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA6      0x4175
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA6      0x4176
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA6      0x4177
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA6       0x4178
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA6       0x4179
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA6       0x417A
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA6       0x417B
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA6      0x417C
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA6      0x417D
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA6      0x417E
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA6      0x417F
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA6      0x4180
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA6       0x4181
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA6       0x4182
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA6       0x4183
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA6       0x4184
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA6       0x4185
// Register: DMAnCON0
#define                                 DMAnCON0_DMA6       0x4186
// Register: DMAnCON1
#define                                 DMAnCON1_DMA6       0x4187
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA6       0x4188
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA6       0x4189
// Register: IOCAF
#define                                 IOCAF_M1            0x41E0
// Register: IOCBF
#define                                 IOCBF_M1            0x41E1
// Register: IOCCF
#define                                 IOCCF_M1            0x41E2
// Register: IOCEF
#define                                 IOCEF_M1            0x41E3
// Register: TMR1L
#define                                 TMR1L_M1            0x41F6
// Register: TMR1H
#define                                 TMR1H_M1            0x41F7
// Register: TMR3L
#define                                 TMR3L_M1            0x41F8
// Register: TMR3H
#define                                 TMR3H_M1            0x41F9
// Register: TMR5L
#define                                 TMR5L_M1            0x41FA
// Register: TMR5H
#define                                 TMR5H_M1            0x41FB
/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&0FFh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&0FFFFFh)
#endif
// I2C1CON2<ABD>
extern volatile __bit                   ABD                 __at(0x14B4);	// @ (0x296 * 8 + 4)
#define                                 ABD_bit             _BIT_ACCESS(I2C1CON2,4)
// ADACCU<ACC20>
extern volatile __bit                   ACC20               __at(0x1F2C);	// @ (0x3E5 * 8 + 4)
#define                                 ACC20_bit           _BIT_ACCESS(ADACCU,4)
// ADACCU<ACC21>
extern volatile __bit                   ACC21               __at(0x1F2D);	// @ (0x3E5 * 8 + 5)
#define                                 ACC21_bit           _BIT_ACCESS(ADACCU,5)
// ADACCU<ACC22>
extern volatile __bit                   ACC22               __at(0x1F2E);	// @ (0x3E5 * 8 + 6)
#define                                 ACC22_bit           _BIT_ACCESS(ADACCU,6)
// ADACCU<ACC23>
extern volatile __bit                   ACC23               __at(0x1F2F);	// @ (0x3E5 * 8 + 7)
#define                                 ACC23_bit           _BIT_ACCESS(ADACCU,7)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x1ABC);	// @ (0x357 * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// I2C1CON1<ACKCNT>
extern volatile __bit                   ACKCNT              __at(0x14AF);	// @ (0x295 * 8 + 7)
#define                                 ACKCNT_bit          _BIT_ACCESS(I2C1CON1,7)
// I2C1CON1<ACKDT>
extern volatile __bit                   ACKDT               __at(0x14AE);	// @ (0x295 * 8 + 6)
#define                                 ACKDT_bit           _BIT_ACCESS(I2C1CON1,6)
// I2C1CON1<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0x14AD);	// @ (0x295 * 8 + 5)
#define                                 ACKSTAT_bit         _BIT_ACCESS(I2C1CON1,5)
// I2C1CON1<ACKT>
extern volatile __bit                   ACKT                __at(0x14AC);	// @ (0x295 * 8 + 4)
#define                                 ACKT_bit            _BIT_ACCESS(I2C1CON1,4)
// I2C1PIE<ACKT1IE>
extern volatile __bit                   ACKT1IE             __at(0x14DE);	// @ (0x29B * 8 + 6)
#define                                 ACKT1IE_bit         _BIT_ACCESS(I2C1PIE,6)
// I2C1PIR<ACKT1IF>
extern volatile __bit                   ACKT1IF             __at(0x14D6);	// @ (0x29A * 8 + 6)
#define                                 ACKT1IF_bit         _BIT_ACCESS(I2C1PIR,6)
// I2C1PIE<ACKTIE>
extern volatile __bit                   ACKTIE              __at(0x14DE);	// @ (0x29B * 8 + 6)
#define                                 ACKTIE_bit          _BIT_ACCESS(I2C1PIE,6)
// I2C1PIR<ACKTIF>
extern volatile __bit                   ACKTIF              __at(0x14D6);	// @ (0x29A * 8 + 6)
#define                                 ACKTIF_bit          _BIT_ACCESS(I2C1PIR,6)
// ADCON2<ACLR>
extern volatile __bit                   ACLR                __at(0x1FAB);	// @ (0x3F5 * 8 + 3)
#define                                 ACLR_bit            _BIT_ACCESS(ADCON2,3)
// I2C1CON2<ACNT>
extern volatile __bit                   ACNT                __at(0x14B7);	// @ (0x296 * 8 + 7)
#define                                 ACNT_bit            _BIT_ACCESS(I2C1CON2,7)
// ADACQL<ACQ0>
extern volatile __bit                   ACQ0                __at(0x1F70);	// @ (0x3EE * 8 + 0)
#define                                 ACQ0_bit            _BIT_ACCESS(ADACQL,0)
// ADACQL<ACQ1>
extern volatile __bit                   ACQ1                __at(0x1F71);	// @ (0x3EE * 8 + 1)
#define                                 ACQ1_bit            _BIT_ACCESS(ADACQL,1)
// ADACQH<ACQ10>
extern volatile __bit                   ACQ10               __at(0x1F7A);	// @ (0x3EF * 8 + 2)
#define                                 ACQ10_bit           _BIT_ACCESS(ADACQH,2)
// ADACQH<ACQ11>
extern volatile __bit                   ACQ11               __at(0x1F7B);	// @ (0x3EF * 8 + 3)
#define                                 ACQ11_bit           _BIT_ACCESS(ADACQH,3)
// ADACQH<ACQ12>
extern volatile __bit                   ACQ12               __at(0x1F7C);	// @ (0x3EF * 8 + 4)
#define                                 ACQ12_bit           _BIT_ACCESS(ADACQH,4)
// ADACQL<ACQ2>
extern volatile __bit                   ACQ2                __at(0x1F72);	// @ (0x3EE * 8 + 2)
#define                                 ACQ2_bit            _BIT_ACCESS(ADACQL,2)
// ADACQL<ACQ3>
extern volatile __bit                   ACQ3                __at(0x1F73);	// @ (0x3EE * 8 + 3)
#define                                 ACQ3_bit            _BIT_ACCESS(ADACQL,3)
// ADACQL<ACQ4>
extern volatile __bit                   ACQ4                __at(0x1F74);	// @ (0x3EE * 8 + 4)
#define                                 ACQ4_bit            _BIT_ACCESS(ADACQL,4)
// ADACQL<ACQ5>
extern volatile __bit                   ACQ5                __at(0x1F75);	// @ (0x3EE * 8 + 5)
#define                                 ACQ5_bit            _BIT_ACCESS(ADACQL,5)
// ADACQL<ACQ6>
extern volatile __bit                   ACQ6                __at(0x1F76);	// @ (0x3EE * 8 + 6)
#define                                 ACQ6_bit            _BIT_ACCESS(ADACQL,6)
// ADACQL<ACQ7>
extern volatile __bit                   ACQ7                __at(0x1F77);	// @ (0x3EE * 8 + 7)
#define                                 ACQ7_bit            _BIT_ACCESS(ADACQL,7)
// ADACQH<ACQ8>
extern volatile __bit                   ACQ8                __at(0x1F78);	// @ (0x3EF * 8 + 0)
#define                                 ACQ8_bit            _BIT_ACCESS(ADACQH,0)
// ADACQH<ACQ9>
extern volatile __bit                   ACQ9                __at(0x1F79);	// @ (0x3EF * 8 + 1)
#define                                 ACQ9_bit            _BIT_ACCESS(ADACQH,1)
// TBLPTRU<ACSS>
extern volatile __bit                   ACSS                __at(0x27C5);	// @ (0x4F8 * 8 + 5)
#define                                 ACSS_bit            _BIT_ACCESS(TBLPTRU,5)
// ADACT<ACT0>
extern volatile __bit                   ACT0                __at(0x1FC8);	// @ (0x3F9 * 8 + 0)
#define                                 ACT0_bit            _BIT_ACCESS(ADACT,0)
// ADACT<ACT1>
extern volatile __bit                   ACT1                __at(0x1FC9);	// @ (0x3F9 * 8 + 1)
#define                                 ACT1_bit            _BIT_ACCESS(ADACT,1)
// ADACT<ACT2>
extern volatile __bit                   ACT2                __at(0x1FCA);	// @ (0x3F9 * 8 + 2)
#define                                 ACT2_bit            _BIT_ACCESS(ADACT,2)
// ADACT<ACT3>
extern volatile __bit                   ACT3                __at(0x1FCB);	// @ (0x3F9 * 8 + 3)
#define                                 ACT3_bit            _BIT_ACCESS(ADACT,3)
// ADACT<ACT4>
extern volatile __bit                   ACT4                __at(0x1FCC);	// @ (0x3F9 * 8 + 4)
#define                                 ACT4_bit            _BIT_ACCESS(ADACT,4)
// ADACT<ACT5>
extern volatile __bit                   ACT5                __at(0x1FCD);	// @ (0x3F9 * 8 + 5)
#define                                 ACT5_bit            _BIT_ACCESS(ADACT,5)
// ACTCON<ACTEN>
extern volatile __bit                   ACTEN               __at(0x567);	// @ (0xAC * 8 + 7)
#define                                 ACTEN_bit           _BIT_ACCESS(ACTCON,7)
// PIE1<ACTIE>
extern volatile __bit                   ACTIE               __at(0x24FB);	// @ (0x49F * 8 + 3)
#define                                 ACTIE_bit           _BIT_ACCESS(PIE1,3)
// PIR1<ACTIF>
extern volatile __bit                   ACTIF               __at(0x257B);	// @ (0x4AF * 8 + 3)
#define                                 ACTIF_bit           _BIT_ACCESS(PIR1,3)
// IPR1<ACTIP>
extern volatile __bit                   ACTIP               __at(0x1B1B);	// @ (0x363 * 8 + 3)
#define                                 ACTIP_bit           _BIT_ACCESS(IPR1,3)
// ACTCON<ACTLOCK>
extern volatile __bit                   ACTLOCK             __at(0x563);	// @ (0xAC * 8 + 3)
#define                                 ACTLOCK_bit         _BIT_ACCESS(ACTCON,3)
// PMD3<ACTMD>
extern volatile __bit                   ACTMD               __at(0x31F);	// @ (0x63 * 8 + 7)
#define                                 ACTMD_bit           _BIT_ACCESS(PMD3,7)
// ACTCON<ACTORS>
extern volatile __bit                   ACTORS              __at(0x561);	// @ (0xAC * 8 + 1)
#define                                 ACTORS_bit          _BIT_ACCESS(ACTCON,1)
// ACTCON<ACTUD>
extern volatile __bit                   ACTUD               __at(0x566);	// @ (0xAC * 8 + 6)
#define                                 ACTUD_bit           _BIT_ACCESS(ACTCON,6)
// IVTADL<AD0>
extern volatile __bit                   AD0                 __at(0x22D0);	// @ (0x45A * 8 + 0)
#define                                 AD0_bit             _BIT_ACCESS(IVTADL,0)
// IVTADL<AD1>
extern volatile __bit                   AD1                 __at(0x22D1);	// @ (0x45A * 8 + 1)
#define                                 AD1_bit             _BIT_ACCESS(IVTADL,1)
// IVTADH<AD10>
extern volatile __bit                   AD10                __at(0x22DA);	// @ (0x45B * 8 + 2)
#define                                 AD10_bit            _BIT_ACCESS(IVTADH,2)
// IVTADH<AD11>
extern volatile __bit                   AD11                __at(0x22DB);	// @ (0x45B * 8 + 3)
#define                                 AD11_bit            _BIT_ACCESS(IVTADH,3)
// IVTADH<AD12>
extern volatile __bit                   AD12                __at(0x22DC);	// @ (0x45B * 8 + 4)
#define                                 AD12_bit            _BIT_ACCESS(IVTADH,4)
// IVTADH<AD13>
extern volatile __bit                   AD13                __at(0x22DD);	// @ (0x45B * 8 + 5)
#define                                 AD13_bit            _BIT_ACCESS(IVTADH,5)
// IVTADH<AD14>
extern volatile __bit                   AD14                __at(0x22DE);	// @ (0x45B * 8 + 6)
#define                                 AD14_bit            _BIT_ACCESS(IVTADH,6)
// IVTADH<AD15>
extern volatile __bit                   AD15                __at(0x22DF);	// @ (0x45B * 8 + 7)
#define                                 AD15_bit            _BIT_ACCESS(IVTADH,7)
// IVTADU<AD16>
extern volatile __bit                   AD16                __at(0x22E0);	// @ (0x45C * 8 + 0)
#define                                 AD16_bit            _BIT_ACCESS(IVTADU,0)
// IVTADU<AD17>
extern volatile __bit                   AD17                __at(0x22E1);	// @ (0x45C * 8 + 1)
#define                                 AD17_bit            _BIT_ACCESS(IVTADU,1)
// IVTADU<AD18>
extern volatile __bit                   AD18                __at(0x22E2);	// @ (0x45C * 8 + 2)
#define                                 AD18_bit            _BIT_ACCESS(IVTADU,2)
// IVTADU<AD19>
extern volatile __bit                   AD19                __at(0x22E3);	// @ (0x45C * 8 + 3)
#define                                 AD19_bit            _BIT_ACCESS(IVTADU,3)
// IVTADL<AD2>
extern volatile __bit                   AD2                 __at(0x22D2);	// @ (0x45A * 8 + 2)
#define                                 AD2_bit             _BIT_ACCESS(IVTADL,2)
// IVTADU<AD20>
extern volatile __bit                   AD20                __at(0x22E4);	// @ (0x45C * 8 + 4)
#define                                 AD20_bit            _BIT_ACCESS(IVTADU,4)
// IVTADL<AD3>
extern volatile __bit                   AD3                 __at(0x22D3);	// @ (0x45A * 8 + 3)
#define                                 AD3_bit             _BIT_ACCESS(IVTADL,3)
// IVTADL<AD4>
extern volatile __bit                   AD4                 __at(0x22D4);	// @ (0x45A * 8 + 4)
#define                                 AD4_bit             _BIT_ACCESS(IVTADL,4)
// IVTADL<AD5>
extern volatile __bit                   AD5                 __at(0x22D5);	// @ (0x45A * 8 + 5)
#define                                 AD5_bit             _BIT_ACCESS(IVTADL,5)
// IVTADL<AD6>
extern volatile __bit                   AD6                 __at(0x22D6);	// @ (0x45A * 8 + 6)
#define                                 AD6_bit             _BIT_ACCESS(IVTADL,6)
// IVTADL<AD7>
extern volatile __bit                   AD7                 __at(0x22D7);	// @ (0x45A * 8 + 7)
#define                                 AD7_bit             _BIT_ACCESS(IVTADL,7)
// IVTADH<AD8>
extern volatile __bit                   AD8                 __at(0x22D8);	// @ (0x45B * 8 + 0)
#define                                 AD8_bit             _BIT_ACCESS(IVTADH,0)
// IVTADH<AD9>
extern volatile __bit                   AD9                 __at(0x22D9);	// @ (0x45B * 8 + 1)
#define                                 AD9_bit             _BIT_ACCESS(IVTADH,1)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x1F18);	// @ (0x3E3 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x1F19);	// @ (0x3E3 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x1F22);	// @ (0x3E4 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x1F23);	// @ (0x3E4 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x1F24);	// @ (0x3E4 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x1F25);	// @ (0x3E4 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x1F26);	// @ (0x3E4 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x1F27);	// @ (0x3E4 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCU<ADACC16>
extern volatile __bit                   ADACC16             __at(0x1F28);	// @ (0x3E5 * 8 + 0)
#define                                 ADACC16_bit         _BIT_ACCESS(ADACCU,0)
// ADACCU<ADACC17>
extern volatile __bit                   ADACC17             __at(0x1F29);	// @ (0x3E5 * 8 + 1)
#define                                 ADACC17_bit         _BIT_ACCESS(ADACCU,1)
// ADACCU<ADACC18>
extern volatile __bit                   ADACC18             __at(0x1F2A);	// @ (0x3E5 * 8 + 2)
#define                                 ADACC18_bit         _BIT_ACCESS(ADACCU,2)
// ADACCU<ADACC19>
extern volatile __bit                   ADACC19             __at(0x1F2B);	// @ (0x3E5 * 8 + 3)
#define                                 ADACC19_bit         _BIT_ACCESS(ADACCU,3)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x1F1A);	// @ (0x3E3 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCU<ADACC20>
extern volatile __bit                   ADACC20             __at(0x1F2C);	// @ (0x3E5 * 8 + 4)
#define                                 ADACC20_bit         _BIT_ACCESS(ADACCU,4)
// ADACCU<ADACC21>
extern volatile __bit                   ADACC21             __at(0x1F2D);	// @ (0x3E5 * 8 + 5)
#define                                 ADACC21_bit         _BIT_ACCESS(ADACCU,5)
// ADACCU<ADACC22>
extern volatile __bit                   ADACC22             __at(0x1F2E);	// @ (0x3E5 * 8 + 6)
#define                                 ADACC22_bit         _BIT_ACCESS(ADACCU,6)
// ADACCU<ADACC23>
extern volatile __bit                   ADACC23             __at(0x1F2F);	// @ (0x3E5 * 8 + 7)
#define                                 ADACC23_bit         _BIT_ACCESS(ADACCU,7)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x1F1B);	// @ (0x3E3 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x1F1C);	// @ (0x3E3 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x1F1D);	// @ (0x3E3 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x1F1E);	// @ (0x3E3 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x1F1F);	// @ (0x3E3 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x1F20);	// @ (0x3E4 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x1F21);	// @ (0x3E4 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x1FAB);	// @ (0x3F5 * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQL<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x1F70);	// @ (0x3EE * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQL,0)
// ADACQL<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x1F71);	// @ (0x3EE * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQL,1)
// ADACQH<ADACQ10>
extern volatile __bit                   ADACQ10             __at(0x1F7A);	// @ (0x3EF * 8 + 2)
#define                                 ADACQ10_bit         _BIT_ACCESS(ADACQH,2)
// ADACQH<ADACQ11>
extern volatile __bit                   ADACQ11             __at(0x1F7B);	// @ (0x3EF * 8 + 3)
#define                                 ADACQ11_bit         _BIT_ACCESS(ADACQH,3)
// ADACQH<ADACQ12>
extern volatile __bit                   ADACQ12             __at(0x1F7C);	// @ (0x3EF * 8 + 4)
#define                                 ADACQ12_bit         _BIT_ACCESS(ADACQH,4)
// ADACQL<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x1F72);	// @ (0x3EE * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQL,2)
// ADACQL<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x1F73);	// @ (0x3EE * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQL,3)
// ADACQL<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x1F74);	// @ (0x3EE * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQL,4)
// ADACQL<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x1F75);	// @ (0x3EE * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQL,5)
// ADACQL<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x1F76);	// @ (0x3EE * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQL,6)
// ADACQL<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x1F77);	// @ (0x3EE * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQL,7)
// ADACQH<ADACQ8>
extern volatile __bit                   ADACQ8              __at(0x1F78);	// @ (0x3EF * 8 + 0)
#define                                 ADACQ8_bit          _BIT_ACCESS(ADACQH,0)
// ADACQH<ADACQ9>
extern volatile __bit                   ADACQ9              __at(0x1F79);	// @ (0x3EF * 8 + 1)
#define                                 ADACQ9_bit          _BIT_ACCESS(ADACQH,1)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x1FC8);	// @ (0x3F9 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x1FC9);	// @ (0x3F9 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x1FCA);	// @ (0x3F9 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x1FCB);	// @ (0x3F9 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x1FCC);	// @ (0x3F9 * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACT<ADACT5>
extern volatile __bit                   ADACT5              __at(0x1FCD);	// @ (0x3F9 * 8 + 5)
#define                                 ADACT5_bit          _BIT_ACCESS(ADACT,5)
// ADACTPPS<ADACTPPS0>
extern volatile __bit                   ADACTPPS0           __at(0x1348);	// @ (0x269 * 8 + 0)
#define                                 ADACTPPS0_bit       _BIT_ACCESS(ADACTPPS,0)
// ADACTPPS<ADACTPPS1>
extern volatile __bit                   ADACTPPS1           __at(0x1349);	// @ (0x269 * 8 + 1)
#define                                 ADACTPPS1_bit       _BIT_ACCESS(ADACTPPS,1)
// ADACTPPS<ADACTPPS2>
extern volatile __bit                   ADACTPPS2           __at(0x134A);	// @ (0x269 * 8 + 2)
#define                                 ADACTPPS2_bit       _BIT_ACCESS(ADACTPPS,2)
// ADACTPPS<ADACTPPS3>
extern volatile __bit                   ADACTPPS3           __at(0x134B);	// @ (0x269 * 8 + 3)
#define                                 ADACTPPS3_bit       _BIT_ACCESS(ADACTPPS,3)
// ADACTPPS<ADACTPPS4>
extern volatile __bit                   ADACTPPS4           __at(0x134C);	// @ (0x269 * 8 + 4)
#define                                 ADACTPPS4_bit       _BIT_ACCESS(ADACTPPS,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x1FBF);	// @ (0x3F7 * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x1FB4);	// @ (0x3F6 * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x1FB5);	// @ (0x3F6 * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x1FB6);	// @ (0x3F6 * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x1F80);	// @ (0x3F0 * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x1F81);	// @ (0x3F0 * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x1F82);	// @ (0x3F0 * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x1F83);	// @ (0x3F0 * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x1F84);	// @ (0x3F0 * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD3<ADCMD>
extern volatile __bit                   ADCMD               __at(0x31D);	// @ (0x63 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD3,5)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x1F30);	// @ (0x3E6 * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x1F31);	// @ (0x3E6 * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x1F32);	// @ (0x3E6 * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x1F33);	// @ (0x3E6 * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x1F34);	// @ (0x3E6 * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x1F35);	// @ (0x3E6 * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x1F36);	// @ (0x3E6 * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x1F37);	// @ (0x3E6 * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x1F9E);	// @ (0x3F3 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCPCON<ADCPON>
extern volatile __bit                   ADCPON              __at(0x1EC7);	// @ (0x3D8 * 8 + 7)
#define                                 ADCPON_bit          _BIT_ACCESS(ADCPCON,7)
// ADCPCON<ADCPRDY>
extern volatile __bit                   ADCPRDY             __at(0x1EC0);	// @ (0x3D8 * 8 + 0)
#define                                 ADCPRDY_bit         _BIT_ACCESS(ADCPCON,0)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x1FAC);	// @ (0x3F5 * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x1FAD);	// @ (0x3F5 * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x1FAE);	// @ (0x3F5 * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x1F9C);	// @ (0x3F3 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0x1FD0);	// @ (0x3FA * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0x1FD1);	// @ (0x3FA * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0x1FD2);	// @ (0x3FA * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0x1FD3);	// @ (0x3FA * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0x1FD4);	// @ (0x3FA * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0x1FD5);	// @ (0x3FA * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x1FA0);	// @ (0x3F4 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x1EE8);	// @ (0x3DD * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x1EE9);	// @ (0x3DD * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x1EF2);	// @ (0x3DE * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x1EF3);	// @ (0x3DE * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x1EF4);	// @ (0x3DE * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x1EF5);	// @ (0x3DE * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x1EF6);	// @ (0x3DE * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x1EF7);	// @ (0x3DE * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x1EEA);	// @ (0x3DD * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x1EEB);	// @ (0x3DD * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x1EEC);	// @ (0x3DD * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x1EED);	// @ (0x3DD * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x1EEE);	// @ (0x3DD * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x1EEF);	// @ (0x3DD * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x1EF0);	// @ (0x3DE * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x1EF1);	// @ (0x3DE * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x1F08);	// @ (0x3E1 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x1F09);	// @ (0x3E1 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x1F12);	// @ (0x3E2 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x1F13);	// @ (0x3E2 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x1F14);	// @ (0x3E2 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x1F15);	// @ (0x3E2 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x1F16);	// @ (0x3E2 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x1F17);	// @ (0x3E2 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x1F0A);	// @ (0x3E1 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x1F0B);	// @ (0x3E1 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x1F0C);	// @ (0x3E1 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x1F0D);	// @ (0x3E1 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x1F0E);	// @ (0x3E1 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x1F0F);	// @ (0x3E1 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x1F10);	// @ (0x3E2 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x1F11);	// @ (0x3E2 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0x1F9A);	// @ (0x3F3 * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x1EB8);	// @ (0x3D7 * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x1EB9);	// @ (0x3D7 * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x1F98);	// @ (0x3F3 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x1FA5);	// @ (0x3F4 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x24FA);	// @ (0x49F * 8 + 2)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,2)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x257A);	// @ (0x4AF * 8 + 2)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,2)
// IPR1<ADIP>
extern volatile __bit                   ADIP                __at(0x1B1A);	// @ (0x363 * 8 + 2)
#define                                 ADIP_bit            _BIT_ACCESS(IPR1,2)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x1FA6);	// @ (0x3F4 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x1EC8);	// @ (0x3D9 * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x1EC9);	// @ (0x3D9 * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x1ED2);	// @ (0x3DA * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x1ED3);	// @ (0x3DA * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x1ED4);	// @ (0x3DA * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x1ED5);	// @ (0x3DA * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x1ED6);	// @ (0x3DA * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x1ED7);	// @ (0x3DA * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x1ECA);	// @ (0x3D9 * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x1ECB);	// @ (0x3D9 * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x1ECC);	// @ (0x3D9 * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x1ECD);	// @ (0x3D9 * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x1ECE);	// @ (0x3D9 * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x1ECF);	// @ (0x3D9 * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x1ED0);	// @ (0x3DA * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x1ED1);	// @ (0x3DA * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x1FBD);	// @ (0x3F7 * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x1FBC);	// @ (0x3F7 * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x1FA8);	// @ (0x3F5 * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x1FA9);	// @ (0x3F5 * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x1FAA);	// @ (0x3F5 * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// ADREF<ADNREF0>
extern volatile __bit                   ADNREF0             __at(0x1FC4);	// @ (0x3F8 * 8 + 4)
#define                                 ADNREF0_bit         _BIT_ACCESS(ADREF,4)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x59A);	// @ (0xB3 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x1F9F);	// @ (0x3F3 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x592);	// @ (0xB2 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADSTAT<ADOV>
extern volatile __bit                   ADOV                __at(0x1FBF);	// @ (0x3F7 * 8 + 7)
#define                                 ADOV_bit            _BIT_ACCESS(ADSTAT,7)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x1F60);	// @ (0x3EC * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x1F61);	// @ (0x3EC * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x1F62);	// @ (0x3EC * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x1F63);	// @ (0x3EC * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x1F64);	// @ (0x3EC * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x1F65);	// @ (0x3EC * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x1FA7);	// @ (0x3F4 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPREL<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x1F88);	// @ (0x3F1 * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPREL,0)
// ADPREL<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x1F89);	// @ (0x3F1 * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPREL,1)
// ADPREH<ADPRE10>
extern volatile __bit                   ADPRE10             __at(0x1F92);	// @ (0x3F2 * 8 + 2)
#define                                 ADPRE10_bit         _BIT_ACCESS(ADPREH,2)
// ADPREH<ADPRE11>
extern volatile __bit                   ADPRE11             __at(0x1F93);	// @ (0x3F2 * 8 + 3)
#define                                 ADPRE11_bit         _BIT_ACCESS(ADPREH,3)
// ADPREH<ADPRE12>
extern volatile __bit                   ADPRE12             __at(0x1F94);	// @ (0x3F2 * 8 + 4)
#define                                 ADPRE12_bit         _BIT_ACCESS(ADPREH,4)
// ADPREL<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x1F8A);	// @ (0x3F1 * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPREL,2)
// ADPREL<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x1F8B);	// @ (0x3F1 * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPREL,3)
// ADPREL<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x1F8C);	// @ (0x3F1 * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPREL,4)
// ADPREL<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x1F8D);	// @ (0x3F1 * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPREL,5)
// ADPREL<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x1F8E);	// @ (0x3F1 * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPREL,6)
// ADPREL<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x1F8F);	// @ (0x3F1 * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPREL,7)
// ADPREH<ADPRE8>
extern volatile __bit                   ADPRE8              __at(0x1F90);	// @ (0x3F2 * 8 + 0)
#define                                 ADPRE8_bit          _BIT_ACCESS(ADPREH,0)
// ADPREH<ADPRE9>
extern volatile __bit                   ADPRE9              __at(0x1F91);	// @ (0x3F2 * 8 + 1)
#define                                 ADPRE9_bit          _BIT_ACCESS(ADPREH,1)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x1FC0);	// @ (0x3F8 * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x1FC1);	// @ (0x3F8 * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x1F40);	// @ (0x3E8 * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x1F41);	// @ (0x3E8 * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x1F4A);	// @ (0x3E9 * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x1F4B);	// @ (0x3E9 * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x1F4C);	// @ (0x3E9 * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x1F4D);	// @ (0x3E9 * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x1F4E);	// @ (0x3E9 * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x1F4F);	// @ (0x3E9 * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x1F42);	// @ (0x3E8 * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x1F43);	// @ (0x3E8 * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x1F44);	// @ (0x3E8 * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x1F45);	// @ (0x3E8 * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x1F46);	// @ (0x3E8 * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x1F47);	// @ (0x3E8 * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x1F48);	// @ (0x3E9 * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x1F49);	// @ (0x3E9 * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x1FAF);	// @ (0x3F5 * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// I2C1PIE<ADR1IE>
extern volatile __bit                   ADR1IE              __at(0x14DB);	// @ (0x29B * 8 + 3)
#define                                 ADR1IE_bit          _BIT_ACCESS(I2C1PIE,3)
// I2C1PIR<ADR1IF>
extern volatile __bit                   ADR1IF              __at(0x14D3);	// @ (0x29A * 8 + 3)
#define                                 ADR1IF_bit          _BIT_ACCESS(I2C1PIR,3)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0x1F50);	// @ (0x3EA * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0x1F51);	// @ (0x3EA * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0x1F5A);	// @ (0x3EB * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0x1F5B);	// @ (0x3EB * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0x1F5C);	// @ (0x3EB * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0x1F5D);	// @ (0x3EB * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0x1F5E);	// @ (0x3EB * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0x1F5F);	// @ (0x3EB * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0x1F52);	// @ (0x3EA * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0x1F53);	// @ (0x3EA * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0x1F54);	// @ (0x3EA * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0x1F55);	// @ (0x3EA * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0x1F56);	// @ (0x3EA * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0x1F57);	// @ (0x3EA * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0x1F58);	// @ (0x3EB * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0x1F59);	// @ (0x3EB * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// I2C1PIE<ADRIE>
extern volatile __bit                   ADRIE               __at(0x14DB);	// @ (0x29B * 8 + 3)
#define                                 ADRIE_bit           _BIT_ACCESS(I2C1PIE,3)
// I2C1PIR<ADRIF>
extern volatile __bit                   ADRIF               __at(0x14D3);	// @ (0x29A * 8 + 3)
#define                                 ADRIF_bit           _BIT_ACCESS(I2C1PIR,3)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x1F38);	// @ (0x3E7 * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x1F39);	// @ (0x3E7 * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x1F3A);	// @ (0x3E7 * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x1F3B);	// @ (0x3E7 * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x1F3C);	// @ (0x3E7 * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x1F3D);	// @ (0x3E7 * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x1F3E);	// @ (0x3E7 * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x1F3F);	// @ (0x3E7 * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x1FB3);	// @ (0x3F6 * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x1FB8);	// @ (0x3F7 * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x1FB9);	// @ (0x3F7 * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x1FBA);	// @ (0x3F7 * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x1EF8);	// @ (0x3DF * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x1EF9);	// @ (0x3DF * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x1F02);	// @ (0x3E0 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x1F03);	// @ (0x3E0 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x1F04);	// @ (0x3E0 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x1F05);	// @ (0x3E0 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x1F06);	// @ (0x3E0 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x1F07);	// @ (0x3E0 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x1EFA);	// @ (0x3DF * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x1EFB);	// @ (0x3DF * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x1EFC);	// @ (0x3DF * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x1EFD);	// @ (0x3DF * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x1EFE);	// @ (0x3DF * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x1EFF);	// @ (0x3DF * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x1F00);	// @ (0x3E0 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x1F01);	// @ (0x3E0 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE2<ADTIE>
extern volatile __bit                   ADTIE               __at(0x2500);	// @ (0x4A0 * 8 + 0)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE2,0)
// PIR2<ADTIF>
extern volatile __bit                   ADTIF               __at(0x2580);	// @ (0x4B0 * 8 + 0)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR2,0)
// IPR2<ADTIP>
extern volatile __bit                   ADTIP               __at(0x1B20);	// @ (0x364 * 8 + 0)
#define                                 ADTIP_bit           _BIT_ACCESS(IPR2,0)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x1FB0);	// @ (0x3F6 * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x1FB1);	// @ (0x3F6 * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x1FB2);	// @ (0x3F6 * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x1ED8);	// @ (0x3DB * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x1ED9);	// @ (0x3DB * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x1EE2);	// @ (0x3DC * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x1EE3);	// @ (0x3DC * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x1EE4);	// @ (0x3DC * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x1EE5);	// @ (0x3DC * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x1EE6);	// @ (0x3DC * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x1EE7);	// @ (0x3DC * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x1EDA);	// @ (0x3DB * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x1EDB);	// @ (0x3DB * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x1EDC);	// @ (0x3DB * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x1EDD);	// @ (0x3DB * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x1EDE);	// @ (0x3DB * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x1EDF);	// @ (0x3DB * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x1EE0);	// @ (0x3DC * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x1EE1);	// @ (0x3DC * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x1FBE);	// @ (0x3F7 * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// DMAnAIRQ<AIRQ0>
extern volatile __bit                   AIRQ0               __at(0x7F0);	// @ (0xFE * 8 + 0)
#define                                 AIRQ0_bit           _BIT_ACCESS(DMAnAIRQ,0)
// DMAnAIRQ<AIRQ1>
extern volatile __bit                   AIRQ1               __at(0x7F1);	// @ (0xFE * 8 + 1)
#define                                 AIRQ1_bit           _BIT_ACCESS(DMAnAIRQ,1)
// DMAnAIRQ<AIRQ2>
extern volatile __bit                   AIRQ2               __at(0x7F2);	// @ (0xFE * 8 + 2)
#define                                 AIRQ2_bit           _BIT_ACCESS(DMAnAIRQ,2)
// DMAnAIRQ<AIRQ3>
extern volatile __bit                   AIRQ3               __at(0x7F3);	// @ (0xFE * 8 + 3)
#define                                 AIRQ3_bit           _BIT_ACCESS(DMAnAIRQ,3)
// DMAnAIRQ<AIRQ4>
extern volatile __bit                   AIRQ4               __at(0x7F4);	// @ (0xFE * 8 + 4)
#define                                 AIRQ4_bit           _BIT_ACCESS(DMAnAIRQ,4)
// DMAnAIRQ<AIRQ5>
extern volatile __bit                   AIRQ5               __at(0x7F5);	// @ (0xFE * 8 + 5)
#define                                 AIRQ5_bit           _BIT_ACCESS(DMAnAIRQ,5)
// DMAnAIRQ<AIRQ6>
extern volatile __bit                   AIRQ6               __at(0x7F6);	// @ (0xFE * 8 + 6)
#define                                 AIRQ6_bit           _BIT_ACCESS(DMAnAIRQ,6)
// DMAnAIRQ<AIRQ7>
extern volatile __bit                   AIRQ7               __at(0x7F7);	// @ (0xFE * 8 + 7)
#define                                 AIRQ7_bit           _BIT_ACCESS(DMAnAIRQ,7)
// DMAnCON0<AIRQEN>
extern volatile __bit                   AIRQEN              __at(0x7E2);	// @ (0xFC * 8 + 2)
#define                                 AIRQEN_bit          _BIT_ACCESS(DMAnCON0,2)
// ANSELA<ANSELA0>
extern volatile __bit                   ANSELA0             __at(0x2000);	// @ (0x400 * 8 + 0)
#define                                 ANSELA0_bit         _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSELA1>
extern volatile __bit                   ANSELA1             __at(0x2001);	// @ (0x400 * 8 + 1)
#define                                 ANSELA1_bit         _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSELA2>
extern volatile __bit                   ANSELA2             __at(0x2002);	// @ (0x400 * 8 + 2)
#define                                 ANSELA2_bit         _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSELA3>
extern volatile __bit                   ANSELA3             __at(0x2003);	// @ (0x400 * 8 + 3)
#define                                 ANSELA3_bit         _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSELA4>
extern volatile __bit                   ANSELA4             __at(0x2004);	// @ (0x400 * 8 + 4)
#define                                 ANSELA4_bit         _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSELA5>
extern volatile __bit                   ANSELA5             __at(0x2005);	// @ (0x400 * 8 + 5)
#define                                 ANSELA5_bit         _BIT_ACCESS(ANSELA,5)
// ANSELA<ANSELA6>
extern volatile __bit                   ANSELA6             __at(0x2006);	// @ (0x400 * 8 + 6)
#define                                 ANSELA6_bit         _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSELA7>
extern volatile __bit                   ANSELA7             __at(0x2007);	// @ (0x400 * 8 + 7)
#define                                 ANSELA7_bit         _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSELB0>
extern volatile __bit                   ANSELB0             __at(0x2040);	// @ (0x408 * 8 + 0)
#define                                 ANSELB0_bit         _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSELB1>
extern volatile __bit                   ANSELB1             __at(0x2041);	// @ (0x408 * 8 + 1)
#define                                 ANSELB1_bit         _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSELB2>
extern volatile __bit                   ANSELB2             __at(0x2042);	// @ (0x408 * 8 + 2)
#define                                 ANSELB2_bit         _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSELB3>
extern volatile __bit                   ANSELB3             __at(0x2043);	// @ (0x408 * 8 + 3)
#define                                 ANSELB3_bit         _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSELB4>
extern volatile __bit                   ANSELB4             __at(0x2044);	// @ (0x408 * 8 + 4)
#define                                 ANSELB4_bit         _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSELB5>
extern volatile __bit                   ANSELB5             __at(0x2045);	// @ (0x408 * 8 + 5)
#define                                 ANSELB5_bit         _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSELB6>
extern volatile __bit                   ANSELB6             __at(0x2046);	// @ (0x408 * 8 + 6)
#define                                 ANSELB6_bit         _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSELB7>
extern volatile __bit                   ANSELB7             __at(0x2047);	// @ (0x408 * 8 + 7)
#define                                 ANSELB7_bit         _BIT_ACCESS(ANSELB,7)
// ANSELC<ANSELC0>
extern volatile __bit                   ANSELC0             __at(0x2080);	// @ (0x410 * 8 + 0)
#define                                 ANSELC0_bit         _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSELC1>
extern volatile __bit                   ANSELC1             __at(0x2081);	// @ (0x410 * 8 + 1)
#define                                 ANSELC1_bit         _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSELC2>
extern volatile __bit                   ANSELC2             __at(0x2082);	// @ (0x410 * 8 + 2)
#define                                 ANSELC2_bit         _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSELC3>
extern volatile __bit                   ANSELC3             __at(0x2083);	// @ (0x410 * 8 + 3)
#define                                 ANSELC3_bit         _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSELC4>
extern volatile __bit                   ANSELC4             __at(0x2084);	// @ (0x410 * 8 + 4)
#define                                 ANSELC4_bit         _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSELC5>
extern volatile __bit                   ANSELC5             __at(0x2085);	// @ (0x410 * 8 + 5)
#define                                 ANSELC5_bit         _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSELC6>
extern volatile __bit                   ANSELC6             __at(0x2086);	// @ (0x410 * 8 + 6)
#define                                 ANSELC6_bit         _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSELC7>
extern volatile __bit                   ANSELC7             __at(0x2087);	// @ (0x410 * 8 + 7)
#define                                 ANSELC7_bit         _BIT_ACCESS(ANSELC,7)
// ADSTAT<AOV>
extern volatile __bit                   AOV                 __at(0x1FBF);	// @ (0x3F7 * 8 + 7)
#define                                 AOV_bit             _BIT_ACCESS(ADSTAT,7)
// SMT1STAT<AS>
extern volatile __bit                   AS                  __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 AS_bit              _BIT_ACCESS(SMT1STAT,0)
// T0CON1<ASYNC>
extern volatile __bit                   ASYNC               __at(0x18DC);	// @ (0x31B * 8 + 4)
#define                                 ASYNC_bit           _BIT_ACCESS(T0CON1,4)
// IVTBASEL<BASE0>
extern volatile __bit                   BASE0               __at(0x22E8);	// @ (0x45D * 8 + 0)
#define                                 BASE0_bit           _BIT_ACCESS(IVTBASEL,0)
// IVTBASEL<BASE1>
extern volatile __bit                   BASE1               __at(0x22E9);	// @ (0x45D * 8 + 1)
#define                                 BASE1_bit           _BIT_ACCESS(IVTBASEL,1)
// IVTBASEH<BASE10>
extern volatile __bit                   BASE10              __at(0x22F2);	// @ (0x45E * 8 + 2)
#define                                 BASE10_bit          _BIT_ACCESS(IVTBASEH,2)
// IVTBASEH<BASE11>
extern volatile __bit                   BASE11              __at(0x22F3);	// @ (0x45E * 8 + 3)
#define                                 BASE11_bit          _BIT_ACCESS(IVTBASEH,3)
// IVTBASEH<BASE12>
extern volatile __bit                   BASE12              __at(0x22F4);	// @ (0x45E * 8 + 4)
#define                                 BASE12_bit          _BIT_ACCESS(IVTBASEH,4)
// IVTBASEH<BASE13>
extern volatile __bit                   BASE13              __at(0x22F5);	// @ (0x45E * 8 + 5)
#define                                 BASE13_bit          _BIT_ACCESS(IVTBASEH,5)
// IVTBASEH<BASE14>
extern volatile __bit                   BASE14              __at(0x22F6);	// @ (0x45E * 8 + 6)
#define                                 BASE14_bit          _BIT_ACCESS(IVTBASEH,6)
// IVTBASEH<BASE15>
extern volatile __bit                   BASE15              __at(0x22F7);	// @ (0x45E * 8 + 7)
#define                                 BASE15_bit          _BIT_ACCESS(IVTBASEH,7)
// IVTBASEU<BASE16>
extern volatile __bit                   BASE16              __at(0x22F8);	// @ (0x45F * 8 + 0)
#define                                 BASE16_bit          _BIT_ACCESS(IVTBASEU,0)
// IVTBASEU<BASE17>
extern volatile __bit                   BASE17              __at(0x22F9);	// @ (0x45F * 8 + 1)
#define                                 BASE17_bit          _BIT_ACCESS(IVTBASEU,1)
// IVTBASEU<BASE18>
extern volatile __bit                   BASE18              __at(0x22FA);	// @ (0x45F * 8 + 2)
#define                                 BASE18_bit          _BIT_ACCESS(IVTBASEU,2)
// IVTBASEU<BASE19>
extern volatile __bit                   BASE19              __at(0x22FB);	// @ (0x45F * 8 + 3)
#define                                 BASE19_bit          _BIT_ACCESS(IVTBASEU,3)
// IVTBASEL<BASE2>
extern volatile __bit                   BASE2               __at(0x22EA);	// @ (0x45D * 8 + 2)
#define                                 BASE2_bit           _BIT_ACCESS(IVTBASEL,2)
// IVTBASEU<BASE20>
extern volatile __bit                   BASE20              __at(0x22FC);	// @ (0x45F * 8 + 4)
#define                                 BASE20_bit          _BIT_ACCESS(IVTBASEU,4)
// IVTBASEL<BASE3>
extern volatile __bit                   BASE3               __at(0x22EB);	// @ (0x45D * 8 + 3)
#define                                 BASE3_bit           _BIT_ACCESS(IVTBASEL,3)
// IVTBASEL<BASE4>
extern volatile __bit                   BASE4               __at(0x22EC);	// @ (0x45D * 8 + 4)
#define                                 BASE4_bit           _BIT_ACCESS(IVTBASEL,4)
// IVTBASEL<BASE5>
extern volatile __bit                   BASE5               __at(0x22ED);	// @ (0x45D * 8 + 5)
#define                                 BASE5_bit           _BIT_ACCESS(IVTBASEL,5)
// IVTBASEL<BASE6>
extern volatile __bit                   BASE6               __at(0x22EE);	// @ (0x45D * 8 + 6)
#define                                 BASE6_bit           _BIT_ACCESS(IVTBASEL,6)
// IVTBASEL<BASE7>
extern volatile __bit                   BASE7               __at(0x22EF);	// @ (0x45D * 8 + 7)
#define                                 BASE7_bit           _BIT_ACCESS(IVTBASEL,7)
// IVTBASEH<BASE8>
extern volatile __bit                   BASE8               __at(0x22F0);	// @ (0x45E * 8 + 0)
#define                                 BASE8_bit           _BIT_ACCESS(IVTBASEH,0)
// IVTBASEH<BASE9>
extern volatile __bit                   BASE9               __at(0x22F1);	// @ (0x45E * 8 + 1)
#define                                 BASE9_bit           _BIT_ACCESS(IVTBASEH,1)
// I2C1ERR<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x14B9);	// @ (0x297 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(I2C1ERR,1)
// I2C1ERR<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x14BD);	// @ (0x297 * 8 + 5)
#define                                 BCL1IF_bit          _BIT_ACCESS(I2C1ERR,5)
// I2C1ERR<BCLIE>
extern volatile __bit                   BCLIE               __at(0x14B9);	// @ (0x297 * 8 + 1)
#define                                 BCLIE_bit           _BIT_ACCESS(I2C1ERR,1)
// I2C1ERR<BCLIF>
extern volatile __bit                   BCLIF               __at(0x14BD);	// @ (0x297 * 8 + 5)
#define                                 BCLIF_bit           _BIT_ACCESS(I2C1ERR,5)
// I2C1STAT0<BFRE>
extern volatile __bit                   BFRE                __at(0x14C7);	// @ (0x298 * 8 + 7)
#define                                 BFRE_bit            _BIT_ACCESS(I2C1STAT0,7)
// I2C1CON2<BFRET0>
extern volatile __bit                   BFRET0              __at(0x14B0);	// @ (0x296 * 8 + 0)
#define                                 BFRET0_bit          _BIT_ACCESS(I2C1CON2,0)
// I2C1CON2<BFRET1>
extern volatile __bit                   BFRET1              __at(0x14B1);	// @ (0x296 * 8 + 1)
#define                                 BFRET1_bit          _BIT_ACCESS(I2C1CON2,1)
// MD1CON0<BIT>
extern volatile __bit                   BIT                 __at(0x350);	// @ (0x6A * 8 + 0)
#define                                 BIT_bit             _BIT_ACCESS(MD1CON0,0)
// PCON0<BOR>
extern volatile __bit                   BOR                 __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 BOR_bit             _BIT_ACCESS(PCON0,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x248);	// @ (0x49 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// I2C1BTO<BTO0>
extern volatile __bit                   BTO0                __at(0x14E8);	// @ (0x29D * 8 + 0)
#define                                 BTO0_bit            _BIT_ACCESS(I2C1BTO,0)
// I2C1BTO<BTO1>
extern volatile __bit                   BTO1                __at(0x14E9);	// @ (0x29D * 8 + 1)
#define                                 BTO1_bit            _BIT_ACCESS(I2C1BTO,1)
// I2C1ERR<BTO1IE>
extern volatile __bit                   BTO1IE              __at(0x14BA);	// @ (0x297 * 8 + 2)
#define                                 BTO1IE_bit          _BIT_ACCESS(I2C1ERR,2)
// I2C1ERR<BTO1IF>
extern volatile __bit                   BTO1IF              __at(0x14BE);	// @ (0x297 * 8 + 6)
#define                                 BTO1IF_bit          _BIT_ACCESS(I2C1ERR,6)
// I2C1BTO<BTO2>
extern volatile __bit                   BTO2                __at(0x14EA);	// @ (0x29D * 8 + 2)
#define                                 BTO2_bit            _BIT_ACCESS(I2C1BTO,2)
// I2C1BTO<BTO3>
extern volatile __bit                   BTO3                __at(0x14EB);	// @ (0x29D * 8 + 3)
#define                                 BTO3_bit            _BIT_ACCESS(I2C1BTO,3)
// I2C1ERR<BTOIE>
extern volatile __bit                   BTOIE               __at(0x14BA);	// @ (0x297 * 8 + 2)
#define                                 BTOIE_bit           _BIT_ACCESS(I2C1ERR,2)
// I2C1ERR<BTOIF>
extern volatile __bit                   BTOIF               __at(0x14BE);	// @ (0x297 * 8 + 6)
#define                                 BTOIF_bit           _BIT_ACCESS(I2C1ERR,6)
// DMAnBUF<BUF0>
extern volatile __bit                   BUF0                __at(0x748);	// @ (0xE9 * 8 + 0)
#define                                 BUF0_bit            _BIT_ACCESS(DMAnBUF,0)
// DMAnBUF<BUF1>
extern volatile __bit                   BUF1                __at(0x749);	// @ (0xE9 * 8 + 1)
#define                                 BUF1_bit            _BIT_ACCESS(DMAnBUF,1)
// DMAnBUF<BUF2>
extern volatile __bit                   BUF2                __at(0x74A);	// @ (0xE9 * 8 + 2)
#define                                 BUF2_bit            _BIT_ACCESS(DMAnBUF,2)
// DMAnBUF<BUF3>
extern volatile __bit                   BUF3                __at(0x74B);	// @ (0xE9 * 8 + 3)
#define                                 BUF3_bit            _BIT_ACCESS(DMAnBUF,3)
// DMAnBUF<BUF4>
extern volatile __bit                   BUF4                __at(0x74C);	// @ (0xE9 * 8 + 4)
#define                                 BUF4_bit            _BIT_ACCESS(DMAnBUF,4)
// DMAnBUF<BUF5>
extern volatile __bit                   BUF5                __at(0x74D);	// @ (0xE9 * 8 + 5)
#define                                 BUF5_bit            _BIT_ACCESS(DMAnBUF,5)
// DMAnBUF<BUF6>
extern volatile __bit                   BUF6                __at(0x74E);	// @ (0xE9 * 8 + 6)
#define                                 BUF6_bit            _BIT_ACCESS(DMAnBUF,6)
// DMAnBUF<BUF7>
extern volatile __bit                   BUF7                __at(0x74F);	// @ (0xE9 * 8 + 7)
#define                                 BUF7_bit            _BIT_ACCESS(DMAnBUF,7)
// SCANCON0<BURSTMD>
extern volatile __bit                   BURSTMD             __at(0x1B01);	// @ (0x360 * 8 + 1)
#define                                 BURSTMD_bit         _BIT_ACCESS(SCANCON0,1)
// U1CON2<C0EN>
extern volatile __bit                   C0EN                __at(0x156B);	// @ (0x2AD * 8 + 3)
#define                                 C0EN_bit            _BIT_ACCESS(U1CON2,3)
// CM1CON0<C1EN>
extern volatile __bit                   C1EN                __at(0x387);	// @ (0x70 * 8 + 7)
#define                                 C1EN_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x381);	// @ (0x70 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE1<C1IE>
extern volatile __bit                   C1IE                __at(0x24FC);	// @ (0x49F * 8 + 4)
#define                                 C1IE_bit            _BIT_ACCESS(PIE1,4)
// PIR1<C1IF>
extern volatile __bit                   C1IF                __at(0x257C);	// @ (0x4AF * 8 + 4)
#define                                 C1IF_bit            _BIT_ACCESS(PIR1,4)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x388);	// @ (0x71 * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x389);	// @ (0x71 * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// IPR1<C1IP>
extern volatile __bit                   C1IP                __at(0x1B1C);	// @ (0x363 * 8 + 4)
#define                                 C1IP_bit            _BIT_ACCESS(IPR1,4)
// CM1NCH<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x390);	// @ (0x72 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NCH,0)
// CM1NCH<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x391);	// @ (0x72 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NCH,1)
// CM1NCH<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x392);	// @ (0x72 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NCH,2)
// CM1CON0<C1OUT>
extern volatile __bit                   C1OUT               __at(0x386);	// @ (0x70 * 8 + 6)
#define                                 C1OUT_bit           _BIT_ACCESS(CM1CON0,6)
// CM1PCH<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x398);	// @ (0x73 * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PCH,0)
// CM1PCH<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x399);	// @ (0x73 * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PCH,1)
// CM1PCH<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x39A);	// @ (0x73 * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PCH,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x384);	// @ (0x70 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x380);	// @ (0x70 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x1A60);	// @ (0x34C * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x1A61);	// @ (0x34C * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CM2CON0<C2EN>
extern volatile __bit                   C2EN                __at(0x3A7);	// @ (0x74 * 8 + 7)
#define                                 C2EN_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x3A1);	// @ (0x74 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE14<C2IE>
extern volatile __bit                   C2IE                __at(0x2562);	// @ (0x4AC * 8 + 2)
#define                                 C2IE_bit            _BIT_ACCESS(PIE14,2)
// PIR14<C2IF>
extern volatile __bit                   C2IF                __at(0x25E2);	// @ (0x4BC * 8 + 2)
#define                                 C2IF_bit            _BIT_ACCESS(PIR14,2)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x3A8);	// @ (0x75 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x3A9);	// @ (0x75 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// IPR14<C2IP>
extern volatile __bit                   C2IP                __at(0x1B82);	// @ (0x370 * 8 + 2)
#define                                 C2IP_bit            _BIT_ACCESS(IPR14,2)
// CM2NCH<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x3B0);	// @ (0x76 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NCH,0)
// CM2NCH<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x3B1);	// @ (0x76 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NCH,1)
// CM2NCH<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x3B2);	// @ (0x76 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NCH,2)
// CM2CON0<C2OUT>
extern volatile __bit                   C2OUT               __at(0x3A6);	// @ (0x74 * 8 + 6)
#define                                 C2OUT_bit           _BIT_ACCESS(CM2CON0,6)
// CM2PCH<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x3B8);	// @ (0x77 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PCH,0)
// CM2PCH<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x3B9);	// @ (0x77 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PCH,1)
// CM2PCH<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x3BA);	// @ (0x77 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PCH,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x3A4);	// @ (0x74 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x3A0);	// @ (0x74 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CCPTMRS0<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x1A62);	// @ (0x34C * 8 + 2)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS0,2)
// CCPTMRS0<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x1A63);	// @ (0x34C * 8 + 3)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS0,3)
// CCPTMRS0<C3TSEL0>
extern volatile __bit                   C3TSEL0             __at(0x1A64);	// @ (0x34C * 8 + 4)
#define                                 C3TSEL0_bit         _BIT_ACCESS(CCPTMRS0,4)
// CCPTMRS0<C3TSEL1>
extern volatile __bit                   C3TSEL1             __at(0x1A65);	// @ (0x34C * 8 + 5)
#define                                 C3TSEL1_bit         _BIT_ACCESS(CCPTMRS0,5)
// ADCON3<CALC0>
extern volatile __bit                   CALC0               __at(0x1FB4);	// @ (0x3F6 * 8 + 4)
#define                                 CALC0_bit           _BIT_ACCESS(ADCON3,4)
// ADCON3<CALC1>
extern volatile __bit                   CALC1               __at(0x1FB5);	// @ (0x3F6 * 8 + 5)
#define                                 CALC1_bit           _BIT_ACCESS(ADCON3,5)
// ADCON3<CALC2>
extern volatile __bit                   CALC2               __at(0x1FB6);	// @ (0x3F6 * 8 + 6)
#define                                 CALC2_bit           _BIT_ACCESS(ADCON3,6)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x1A18);	// @ (0x343 * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x1A19);	// @ (0x343 * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x1A1A);	// @ (0x343 * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CAP<CCP1CTS3>
extern volatile __bit                   CCP1CTS3            __at(0x1A1B);	// @ (0x343 * 8 + 3)
#define                                 CCP1CTS3_bit        _BIT_ACCESS(CCP1CAP,3)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x1A17);	// @ (0x342 * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x1A14);	// @ (0x342 * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE3<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x250E);	// @ (0x4A1 * 8 + 6)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE3,6)
// PIR3<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x258E);	// @ (0x4B1 * 8 + 6)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR3,6)
// IPR3<CCP1IP>
extern volatile __bit                   CCP1IP              __at(0x1B2E);	// @ (0x365 * 8 + 6)
#define                                 CCP1IP_bit          _BIT_ACCESS(IPR3,6)
// PMD5<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x328);	// @ (0x65 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD5,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1A10);	// @ (0x342 * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1A11);	// @ (0x342 * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x1A12);	// @ (0x342 * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x1A13);	// @ (0x342 * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x1A15);	// @ (0x342 * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0x1278);	// @ (0x24F * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0x1279);	// @ (0x24F * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0x127A);	// @ (0x24F * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0x127B);	// @ (0x24F * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0x127C);	// @ (0x24F * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP1PPS<CCP1PPS5>
extern volatile __bit                   CCP1PPS5            __at(0x127D);	// @ (0x24F * 8 + 5)
#define                                 CCP1PPS5_bit        _BIT_ACCESS(CCP1PPS,5)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x1A38);	// @ (0x347 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x1A39);	// @ (0x347 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x1A3A);	// @ (0x347 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CAP<CCP2CTS3>
extern volatile __bit                   CCP2CTS3            __at(0x1A3B);	// @ (0x347 * 8 + 3)
#define                                 CCP2CTS3_bit        _BIT_ACCESS(CCP2CAP,3)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x1A37);	// @ (0x346 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x1A34);	// @ (0x346 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE8<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x2536);	// @ (0x4A6 * 8 + 6)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE8,6)
// PIR8<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x25B6);	// @ (0x4B6 * 8 + 6)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR8,6)
// IPR8<CCP2IP>
extern volatile __bit                   CCP2IP              __at(0x1B56);	// @ (0x36A * 8 + 6)
#define                                 CCP2IP_bit          _BIT_ACCESS(IPR8,6)
// PMD5<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x329);	// @ (0x65 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD5,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x1A30);	// @ (0x346 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x1A31);	// @ (0x346 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x1A32);	// @ (0x346 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x1A33);	// @ (0x346 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x1A35);	// @ (0x346 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0x1280);	// @ (0x250 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0x1281);	// @ (0x250 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0x1282);	// @ (0x250 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0x1283);	// @ (0x250 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0x1284);	// @ (0x250 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// CCP2PPS<CCP2PPS5>
extern volatile __bit                   CCP2PPS5            __at(0x1285);	// @ (0x250 * 8 + 5)
#define                                 CCP2PPS5_bit        _BIT_ACCESS(CCP2PPS,5)
// CCP3CAP<CCP3CTS0>
extern volatile __bit                   CCP3CTS0            __at(0x1A58);	// @ (0x34B * 8 + 0)
#define                                 CCP3CTS0_bit        _BIT_ACCESS(CCP3CAP,0)
// CCP3CAP<CCP3CTS1>
extern volatile __bit                   CCP3CTS1            __at(0x1A59);	// @ (0x34B * 8 + 1)
#define                                 CCP3CTS1_bit        _BIT_ACCESS(CCP3CAP,1)
// CCP3CAP<CCP3CTS2>
extern volatile __bit                   CCP3CTS2            __at(0x1A5A);	// @ (0x34B * 8 + 2)
#define                                 CCP3CTS2_bit        _BIT_ACCESS(CCP3CAP,2)
// CCP3CAP<CCP3CTS3>
extern volatile __bit                   CCP3CTS3            __at(0x1A5B);	// @ (0x34B * 8 + 3)
#define                                 CCP3CTS3_bit        _BIT_ACCESS(CCP3CAP,3)
// CCP3CON<CCP3EN>
extern volatile __bit                   CCP3EN              __at(0x1A57);	// @ (0x34A * 8 + 7)
#define                                 CCP3EN_bit          _BIT_ACCESS(CCP3CON,7)
// CCP3CON<CCP3FMT>
extern volatile __bit                   CCP3FMT             __at(0x1A54);	// @ (0x34A * 8 + 4)
#define                                 CCP3FMT_bit         _BIT_ACCESS(CCP3CON,4)
// PIE11<CCP3IE>
extern volatile __bit                   CCP3IE              __at(0x2548);	// @ (0x4A9 * 8 + 0)
#define                                 CCP3IE_bit          _BIT_ACCESS(PIE11,0)
// PIR11<CCP3IF>
extern volatile __bit                   CCP3IF              __at(0x25C8);	// @ (0x4B9 * 8 + 0)
#define                                 CCP3IF_bit          _BIT_ACCESS(PIR11,0)
// IPR11<CCP3IP>
extern volatile __bit                   CCP3IP              __at(0x1B68);	// @ (0x36D * 8 + 0)
#define                                 CCP3IP_bit          _BIT_ACCESS(IPR11,0)
// PMD5<CCP3MD>
extern volatile __bit                   CCP3MD              __at(0x32A);	// @ (0x65 * 8 + 2)
#define                                 CCP3MD_bit          _BIT_ACCESS(PMD5,2)
// CCP3CON<CCP3MODE0>
extern volatile __bit                   CCP3MODE0           __at(0x1A50);	// @ (0x34A * 8 + 0)
#define                                 CCP3MODE0_bit       _BIT_ACCESS(CCP3CON,0)
// CCP3CON<CCP3MODE1>
extern volatile __bit                   CCP3MODE1           __at(0x1A51);	// @ (0x34A * 8 + 1)
#define                                 CCP3MODE1_bit       _BIT_ACCESS(CCP3CON,1)
// CCP3CON<CCP3MODE2>
extern volatile __bit                   CCP3MODE2           __at(0x1A52);	// @ (0x34A * 8 + 2)
#define                                 CCP3MODE2_bit       _BIT_ACCESS(CCP3CON,2)
// CCP3CON<CCP3MODE3>
extern volatile __bit                   CCP3MODE3           __at(0x1A53);	// @ (0x34A * 8 + 3)
#define                                 CCP3MODE3_bit       _BIT_ACCESS(CCP3CON,3)
// CCP3CON<CCP3OUT>
extern volatile __bit                   CCP3OUT             __at(0x1A55);	// @ (0x34A * 8 + 5)
#define                                 CCP3OUT_bit         _BIT_ACCESS(CCP3CON,5)
// CCP3PPS<CCP3PPS0>
extern volatile __bit                   CCP3PPS0            __at(0x1288);	// @ (0x251 * 8 + 0)
#define                                 CCP3PPS0_bit        _BIT_ACCESS(CCP3PPS,0)
// CCP3PPS<CCP3PPS1>
extern volatile __bit                   CCP3PPS1            __at(0x1289);	// @ (0x251 * 8 + 1)
#define                                 CCP3PPS1_bit        _BIT_ACCESS(CCP3PPS,1)
// CCP3PPS<CCP3PPS2>
extern volatile __bit                   CCP3PPS2            __at(0x128A);	// @ (0x251 * 8 + 2)
#define                                 CCP3PPS2_bit        _BIT_ACCESS(CCP3PPS,2)
// CCP3PPS<CCP3PPS3>
extern volatile __bit                   CCP3PPS3            __at(0x128B);	// @ (0x251 * 8 + 3)
#define                                 CCP3PPS3_bit        _BIT_ACCESS(CCP3PPS,3)
// CCP3PPS<CCP3PPS4>
extern volatile __bit                   CCP3PPS4            __at(0x128C);	// @ (0x251 * 8 + 4)
#define                                 CCP3PPS4_bit        _BIT_ACCESS(CCP3PPS,4)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x1EBA);	// @ (0x3D7 * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x1EBB);	// @ (0x3D7 * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x570);	// @ (0xAE * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x571);	// @ (0xAE * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x572);	// @ (0xAE * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x573);	// @ (0xAE * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// MD1CARH<CH0>
extern volatile __bit                   CH0                 __at(0x370);	// @ (0x6E * 8 + 0)
#define                                 CH0_bit             _BIT_ACCESS(MD1CARH,0)
// MD1CARH<CH1>
extern volatile __bit                   CH1                 __at(0x371);	// @ (0x6E * 8 + 1)
#define                                 CH1_bit             _BIT_ACCESS(MD1CARH,1)
// MD1CARH<CH2>
extern volatile __bit                   CH2                 __at(0x372);	// @ (0x6E * 8 + 2)
#define                                 CH2_bit             _BIT_ACCESS(MD1CARH,2)
// MD1CARH<CH3>
extern volatile __bit                   CH3                 __at(0x373);	// @ (0x6E * 8 + 3)
#define                                 CH3_bit             _BIT_ACCESS(MD1CARH,3)
// MD1CARH<CH4>
extern volatile __bit                   CH4                 __at(0x374);	// @ (0x6E * 8 + 4)
#define                                 CH4_bit             _BIT_ACCESS(MD1CARH,4)
// MD1CARH<CH5>
extern volatile __bit                   CH5                 __at(0x375);	// @ (0x6E * 8 + 5)
#define                                 CH5_bit             _BIT_ACCESS(MD1CARH,5)
// MD1CARH<CH6>
extern volatile __bit                   CH6                 __at(0x376);	// @ (0x6E * 8 + 6)
#define                                 CH6_bit             _BIT_ACCESS(MD1CARH,6)
// MD1CARH<CH7>
extern volatile __bit                   CH7                 __at(0x377);	// @ (0x6E * 8 + 7)
#define                                 CH7_bit             _BIT_ACCESS(MD1CARH,7)
// MD1CON1<CHPOL>
extern volatile __bit                   CHPOL               __at(0x35D);	// @ (0x6B * 8 + 5)
#define                                 CHPOL_bit           _BIT_ACCESS(MD1CON1,5)
// MD1CON1<CHSYNC>
extern volatile __bit                   CHSYNC              __at(0x35C);	// @ (0x6B * 8 + 4)
#define                                 CHSYNC_bit          _BIT_ACCESS(MD1CON1,4)
// T0CON1<CKPS3>
extern volatile __bit                   CKPS3               __at(0x18DB);	// @ (0x31B * 8 + 3)
#define                                 CKPS3_bit           _BIT_ACCESS(T0CON1,3)
// MD1CARL<CL0>
extern volatile __bit                   CL0                 __at(0x368);	// @ (0x6D * 8 + 0)
#define                                 CL0_bit             _BIT_ACCESS(MD1CARL,0)
// MD1CARL<CL1>
extern volatile __bit                   CL1                 __at(0x369);	// @ (0x6D * 8 + 1)
#define                                 CL1_bit             _BIT_ACCESS(MD1CARL,1)
// MD1CARL<CL2>
extern volatile __bit                   CL2                 __at(0x36A);	// @ (0x6D * 8 + 2)
#define                                 CL2_bit             _BIT_ACCESS(MD1CARL,2)
// MD1CARL<CL3>
extern volatile __bit                   CL3                 __at(0x36B);	// @ (0x6D * 8 + 3)
#define                                 CL3_bit             _BIT_ACCESS(MD1CARL,3)
// MD1CARL<CL4>
extern volatile __bit                   CL4                 __at(0x36C);	// @ (0x6D * 8 + 4)
#define                                 CL4_bit             _BIT_ACCESS(MD1CARL,4)
// PIE0<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x24F5);	// @ (0x49E * 8 + 5)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x2575);	// @ (0x4AE * 8 + 5)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR0,5)
// IPR0<CLC1IP>
extern volatile __bit                   CLC1IP              __at(0x1B15);	// @ (0x362 * 8 + 5)
#define                                 CLC1IP_bit          _BIT_ACCESS(IPR0,5)
// PMD7<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x338);	// @ (0x67 * 8 + 0)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD7,0)
// CLCDATA<CLC1OUT>
extern volatile __bit                   CLC1OUT             __at(0x6A0);	// @ (0xD4 * 8 + 0)
#define                                 CLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// PIE6<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x2521);	// @ (0x4A4 * 8 + 1)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x25A1);	// @ (0x4B4 * 8 + 1)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR6,1)
// IPR6<CLC2IP>
extern volatile __bit                   CLC2IP              __at(0x1B41);	// @ (0x368 * 8 + 1)
#define                                 CLC2IP_bit          _BIT_ACCESS(IPR6,1)
// PMD7<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x339);	// @ (0x67 * 8 + 1)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD7,1)
// CLCDATA<CLC2OUT>
extern volatile __bit                   CLC2OUT             __at(0x6A1);	// @ (0xD4 * 8 + 1)
#define                                 CLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// PIE7<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x252D);	// @ (0x4A5 * 8 + 5)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE7,5)
// PIR7<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x25AD);	// @ (0x4B5 * 8 + 5)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR7,5)
// IPR7<CLC3IP>
extern volatile __bit                   CLC3IP              __at(0x1B4D);	// @ (0x369 * 8 + 5)
#define                                 CLC3IP_bit          _BIT_ACCESS(IPR7,5)
// PMD7<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x33A);	// @ (0x67 * 8 + 2)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD7,2)
// CLCDATA<CLC3OUT>
extern volatile __bit                   CLC3OUT             __at(0x6A2);	// @ (0xD4 * 8 + 2)
#define                                 CLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// PIE9<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x253D);	// @ (0x4A7 * 8 + 5)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE9,5)
// PIR9<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x25BD);	// @ (0x4B7 * 8 + 5)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR9,5)
// IPR9<CLC4IP>
extern volatile __bit                   CLC4IP              __at(0x1B5D);	// @ (0x36B * 8 + 5)
#define                                 CLC4IP_bit          _BIT_ACCESS(IPR9,5)
// PMD7<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x33B);	// @ (0x67 * 8 + 3)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD7,3)
// CLCDATA<CLC4OUT>
extern volatile __bit                   CLC4OUT             __at(0x6A3);	// @ (0xD4 * 8 + 3)
#define                                 CLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// PIE10<CLC5IE>
extern volatile __bit                   CLC5IE              __at(0x2541);	// @ (0x4A8 * 8 + 1)
#define                                 CLC5IE_bit          _BIT_ACCESS(PIE10,1)
// PIR10<CLC5IF>
extern volatile __bit                   CLC5IF              __at(0x25C1);	// @ (0x4B8 * 8 + 1)
#define                                 CLC5IF_bit          _BIT_ACCESS(PIR10,1)
// IPR10<CLC5IP>
extern volatile __bit                   CLC5IP              __at(0x1B61);	// @ (0x36C * 8 + 1)
#define                                 CLC5IP_bit          _BIT_ACCESS(IPR10,1)
// PMD7<CLC5MD>
extern volatile __bit                   CLC5MD              __at(0x33C);	// @ (0x67 * 8 + 4)
#define                                 CLC5MD_bit          _BIT_ACCESS(PMD7,4)
// CLCDATA<CLC5OUT>
extern volatile __bit                   CLC5OUT             __at(0x6A4);	// @ (0xD4 * 8 + 4)
#define                                 CLC5OUT_bit         _BIT_ACCESS(CLCDATA,4)
// PIE11<CLC6IE>
extern volatile __bit                   CLC6IE              __at(0x2549);	// @ (0x4A9 * 8 + 1)
#define                                 CLC6IE_bit          _BIT_ACCESS(PIE11,1)
// PIR11<CLC6IF>
extern volatile __bit                   CLC6IF              __at(0x25C9);	// @ (0x4B9 * 8 + 1)
#define                                 CLC6IF_bit          _BIT_ACCESS(PIR11,1)
// IPR11<CLC6IP>
extern volatile __bit                   CLC6IP              __at(0x1B69);	// @ (0x36D * 8 + 1)
#define                                 CLC6IP_bit          _BIT_ACCESS(IPR11,1)
// PMD7<CLC6MD>
extern volatile __bit                   CLC6MD              __at(0x33D);	// @ (0x67 * 8 + 5)
#define                                 CLC6MD_bit          _BIT_ACCESS(PMD7,5)
// CLCDATA<CLC6OUT>
extern volatile __bit                   CLC6OUT             __at(0x6A5);	// @ (0xD4 * 8 + 5)
#define                                 CLC6OUT_bit         _BIT_ACCESS(CLCDATA,5)
// PIE14<CLC7IE>
extern volatile __bit                   CLC7IE              __at(0x2561);	// @ (0x4AC * 8 + 1)
#define                                 CLC7IE_bit          _BIT_ACCESS(PIE14,1)
// PIR14<CLC7IF>
extern volatile __bit                   CLC7IF              __at(0x25E1);	// @ (0x4BC * 8 + 1)
#define                                 CLC7IF_bit          _BIT_ACCESS(PIR14,1)
// IPR14<CLC7IP>
extern volatile __bit                   CLC7IP              __at(0x1B81);	// @ (0x370 * 8 + 1)
#define                                 CLC7IP_bit          _BIT_ACCESS(IPR14,1)
// PMD7<CLC7MD>
extern volatile __bit                   CLC7MD              __at(0x33E);	// @ (0x67 * 8 + 6)
#define                                 CLC7MD_bit          _BIT_ACCESS(PMD7,6)
// CLCDATA<CLC7OUT>
extern volatile __bit                   CLC7OUT             __at(0x6A6);	// @ (0xD4 * 8 + 6)
#define                                 CLC7OUT_bit         _BIT_ACCESS(CLCDATA,6)
// PIE15<CLC8IE>
extern volatile __bit                   CLC8IE              __at(0x2569);	// @ (0x4AD * 8 + 1)
#define                                 CLC8IE_bit          _BIT_ACCESS(PIE15,1)
// PIR15<CLC8IF>
extern volatile __bit                   CLC8IF              __at(0x25E9);	// @ (0x4BD * 8 + 1)
#define                                 CLC8IF_bit          _BIT_ACCESS(PIR15,1)
// IPR15<CLC8IP>
extern volatile __bit                   CLC8IP              __at(0x1B89);	// @ (0x371 * 8 + 1)
#define                                 CLC8IP_bit          _BIT_ACCESS(IPR15,1)
// PMD7<CLC8MD>
extern volatile __bit                   CLC8MD              __at(0x33F);	// @ (0x67 * 8 + 7)
#define                                 CLC8MD_bit          _BIT_ACCESS(PMD7,7)
// CLCDATA<CLC8OUT>
extern volatile __bit                   CLC8OUT             __at(0x6A7);	// @ (0xD4 * 8 + 7)
#define                                 CLC8OUT_bit         _BIT_ACCESS(CLCDATA,7)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0x1308);	// @ (0x261 * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0x1309);	// @ (0x261 * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0x130A);	// @ (0x261 * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0x130B);	// @ (0x261 * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0x130C);	// @ (0x261 * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0x1310);	// @ (0x262 * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0x1311);	// @ (0x262 * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0x1312);	// @ (0x262 * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0x1313);	// @ (0x262 * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0x1314);	// @ (0x262 * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0x1318);	// @ (0x263 * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0x1319);	// @ (0x263 * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0x131A);	// @ (0x263 * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0x131B);	// @ (0x263 * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0x131C);	// @ (0x263 * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0x1320);	// @ (0x264 * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0x1321);	// @ (0x264 * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0x1322);	// @ (0x264 * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0x1323);	// @ (0x264 * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0x1324);	// @ (0x264 * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// CLCIN4PPS<CLCIN4PPS0>
extern volatile __bit                   CLCIN4PPS0          __at(0x1328);	// @ (0x265 * 8 + 0)
#define                                 CLCIN4PPS0_bit      _BIT_ACCESS(CLCIN4PPS,0)
// CLCIN4PPS<CLCIN4PPS1>
extern volatile __bit                   CLCIN4PPS1          __at(0x1329);	// @ (0x265 * 8 + 1)
#define                                 CLCIN4PPS1_bit      _BIT_ACCESS(CLCIN4PPS,1)
// CLCIN4PPS<CLCIN4PPS2>
extern volatile __bit                   CLCIN4PPS2          __at(0x132A);	// @ (0x265 * 8 + 2)
#define                                 CLCIN4PPS2_bit      _BIT_ACCESS(CLCIN4PPS,2)
// CLCIN4PPS<CLCIN4PPS3>
extern volatile __bit                   CLCIN4PPS3          __at(0x132B);	// @ (0x265 * 8 + 3)
#define                                 CLCIN4PPS3_bit      _BIT_ACCESS(CLCIN4PPS,3)
// CLCIN4PPS<CLCIN4PPS4>
extern volatile __bit                   CLCIN4PPS4          __at(0x132C);	// @ (0x265 * 8 + 4)
#define                                 CLCIN4PPS4_bit      _BIT_ACCESS(CLCIN4PPS,4)
// CLCIN5PPS<CLCIN5PPS0>
extern volatile __bit                   CLCIN5PPS0          __at(0x1330);	// @ (0x266 * 8 + 0)
#define                                 CLCIN5PPS0_bit      _BIT_ACCESS(CLCIN5PPS,0)
// CLCIN5PPS<CLCIN5PPS1>
extern volatile __bit                   CLCIN5PPS1          __at(0x1331);	// @ (0x266 * 8 + 1)
#define                                 CLCIN5PPS1_bit      _BIT_ACCESS(CLCIN5PPS,1)
// CLCIN5PPS<CLCIN5PPS2>
extern volatile __bit                   CLCIN5PPS2          __at(0x1332);	// @ (0x266 * 8 + 2)
#define                                 CLCIN5PPS2_bit      _BIT_ACCESS(CLCIN5PPS,2)
// CLCIN5PPS<CLCIN5PPS3>
extern volatile __bit                   CLCIN5PPS3          __at(0x1333);	// @ (0x266 * 8 + 3)
#define                                 CLCIN5PPS3_bit      _BIT_ACCESS(CLCIN5PPS,3)
// CLCIN5PPS<CLCIN5PPS4>
extern volatile __bit                   CLCIN5PPS4          __at(0x1334);	// @ (0x266 * 8 + 4)
#define                                 CLCIN5PPS4_bit      _BIT_ACCESS(CLCIN5PPS,4)
// CLCIN6PPS<CLCIN6PPS0>
extern volatile __bit                   CLCIN6PPS0          __at(0x1338);	// @ (0x267 * 8 + 0)
#define                                 CLCIN6PPS0_bit      _BIT_ACCESS(CLCIN6PPS,0)
// CLCIN6PPS<CLCIN6PPS1>
extern volatile __bit                   CLCIN6PPS1          __at(0x1339);	// @ (0x267 * 8 + 1)
#define                                 CLCIN6PPS1_bit      _BIT_ACCESS(CLCIN6PPS,1)
// CLCIN6PPS<CLCIN6PPS2>
extern volatile __bit                   CLCIN6PPS2          __at(0x133A);	// @ (0x267 * 8 + 2)
#define                                 CLCIN6PPS2_bit      _BIT_ACCESS(CLCIN6PPS,2)
// CLCIN6PPS<CLCIN6PPS3>
extern volatile __bit                   CLCIN6PPS3          __at(0x133B);	// @ (0x267 * 8 + 3)
#define                                 CLCIN6PPS3_bit      _BIT_ACCESS(CLCIN6PPS,3)
// CLCIN6PPS<CLCIN6PPS4>
extern volatile __bit                   CLCIN6PPS4          __at(0x133C);	// @ (0x267 * 8 + 4)
#define                                 CLCIN6PPS4_bit      _BIT_ACCESS(CLCIN6PPS,4)
// CLCIN7PPS<CLCIN7PPS0>
extern volatile __bit                   CLCIN7PPS0          __at(0x1340);	// @ (0x268 * 8 + 0)
#define                                 CLCIN7PPS0_bit      _BIT_ACCESS(CLCIN7PPS,0)
// CLCIN7PPS<CLCIN7PPS1>
extern volatile __bit                   CLCIN7PPS1          __at(0x1341);	// @ (0x268 * 8 + 1)
#define                                 CLCIN7PPS1_bit      _BIT_ACCESS(CLCIN7PPS,1)
// CLCIN7PPS<CLCIN7PPS2>
extern volatile __bit                   CLCIN7PPS2          __at(0x1342);	// @ (0x268 * 8 + 2)
#define                                 CLCIN7PPS2_bit      _BIT_ACCESS(CLCIN7PPS,2)
// CLCIN7PPS<CLCIN7PPS3>
extern volatile __bit                   CLCIN7PPS3          __at(0x1343);	// @ (0x268 * 8 + 3)
#define                                 CLCIN7PPS3_bit      _BIT_ACCESS(CLCIN7PPS,3)
// CLCIN7PPS<CLCIN7PPS4>
extern volatile __bit                   CLCIN7PPS4          __at(0x1344);	// @ (0x268 * 8 + 4)
#define                                 CLCIN7PPS4_bit      _BIT_ACCESS(CLCIN7PPS,4)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x1D0);	// @ (0x3A * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x1D1);	// @ (0x3A * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x1D2);	// @ (0x3A * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK3>
extern volatile __bit                   CLKRCLK3            __at(0x1D3);	// @ (0x3A * 8 + 3)
#define                                 CLKRCLK3_bit        _BIT_ACCESS(CLKRCLK,3)
// CLKRCLK<CLKRCLK4>
extern volatile __bit                   CLKRCLK4            __at(0x1D4);	// @ (0x3A * 8 + 4)
#define                                 CLKRCLK4_bit        _BIT_ACCESS(CLKRCLK,4)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x1CB);	// @ (0x39 * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x1CC);	// @ (0x39 * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x1C8);	// @ (0x39 * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x1C9);	// @ (0x39 * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x1CA);	// @ (0x39 * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x1CF);	// @ (0x39 * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD0<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x301);	// @ (0x60 * 8 + 1)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD0,1)
// MD1CON1<CLPOL>
extern volatile __bit                   CLPOL               __at(0x359);	// @ (0x6B * 8 + 1)
#define                                 CLPOL_bit           _BIT_ACCESS(MD1CON1,1)
// MD1CON1<CLSYNC>
extern volatile __bit                   CLSYNC              __at(0x358);	// @ (0x6B * 8 + 0)
#define                                 CLSYNC_bit          _BIT_ACCESS(MD1CON1,0)
// PMD3<CM1MD>
extern volatile __bit                   CM1MD               __at(0x319);	// @ (0x63 * 8 + 1)
#define                                 CM1MD_bit           _BIT_ACCESS(PMD3,1)
// PMD3<CM2MD>
extern volatile __bit                   CM2MD               __at(0x31A);	// @ (0x63 * 8 + 2)
#define                                 CM2MD_bit           _BIT_ACCESS(PMD3,2)
// I2C1PIE<CNT1IE>
extern volatile __bit                   CNT1IE              __at(0x14DF);	// @ (0x29B * 8 + 7)
#define                                 CNT1IE_bit          _BIT_ACCESS(I2C1PIE,7)
// I2C1PIR<CNT1IF>
extern volatile __bit                   CNT1IF              __at(0x14D7);	// @ (0x29A * 8 + 7)
#define                                 CNT1IF_bit          _BIT_ACCESS(I2C1PIR,7)
// I2C1PIE<CNTIE>
extern volatile __bit                   CNTIE               __at(0x14DF);	// @ (0x29B * 8 + 7)
#define                                 CNTIE_bit           _BIT_ACCESS(I2C1PIE,7)
// I2C1PIR<CNTIF>
extern volatile __bit                   CNTIF               __at(0x14D7);	// @ (0x29A * 8 + 7)
#define                                 CNTIF_bit           _BIT_ACCESS(I2C1PIR,7)
// ADCON0<CONT>
extern volatile __bit                   CONT                __at(0x1F9E);	// @ (0x3F3 * 8 + 6)
#define                                 CONT_bit            _BIT_ACCESS(ADCON0,6)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x574);	// @ (0xAE * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x575);	// @ (0xAE * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x576);	// @ (0xAE * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// SMT1CON0<CPOL>
extern volatile __bit                   CPOL                __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 CPOL_bit            _BIT_ACCESS(SMT1CON0,2)
// ADCPCON<CPON>
extern volatile __bit                   CPON                __at(0x1EC7);	// @ (0x3D8 * 8 + 7)
#define                                 CPON_bit            _BIT_ACCESS(ADCPCON,7)
// ADCPCON<CPRDY>
extern volatile __bit                   CPRDY               __at(0x1EC0);	// @ (0x3D8 * 8 + 0)
#define                                 CPRDY_bit           _BIT_ACCESS(ADCPCON,0)
// SMT1STAT<CPRUP>
extern volatile __bit                   CPRUP               __at(0x1877);	// @ (0x30E * 8 + 7)
#define                                 CPRUP_bit           _BIT_ACCESS(SMT1STAT,7)
// SMT1STAT<CPWUP>
extern volatile __bit                   CPWUP               __at(0x1876);	// @ (0x30E * 8 + 6)
#define                                 CPWUP_bit           _BIT_ACCESS(SMT1STAT,6)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x1ABF);	// @ (0x357 * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x1ABE);	// @ (0x357 * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE15<CRCIE>
extern volatile __bit                   CRCIE               __at(0x256A);	// @ (0x4AD * 8 + 2)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE15,2)
// PIR15<CRCIF>
extern volatile __bit                   CRCIF               __at(0x25EA);	// @ (0x4BD * 8 + 2)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR15,2)
// IPR15<CRCIP>
extern volatile __bit                   CRCIP               __at(0x1B8A);	// @ (0x371 * 8 + 2)
#define                                 CRCIP_bit           _BIT_ACCESS(IPR15,2)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x304);	// @ (0x60 * 8 + 4)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,4)
// ADCON2<CRS0>
extern volatile __bit                   CRS0                __at(0x1FAC);	// @ (0x3F5 * 8 + 4)
#define                                 CRS0_bit            _BIT_ACCESS(ADCON2,4)
// ADCON2<CRS1>
extern volatile __bit                   CRS1                __at(0x1FAD);	// @ (0x3F5 * 8 + 5)
#define                                 CRS1_bit            _BIT_ACCESS(ADCON2,5)
// ADCON2<CRS2>
extern volatile __bit                   CRS2                __at(0x1FAE);	// @ (0x3F5 * 8 + 6)
#define                                 CRS2_bit            _BIT_ACCESS(ADCON2,6)
// I2C1CON1<CSD>
extern volatile __bit                   CSD                 __at(0x14A8);	// @ (0x295 * 8 + 0)
#define                                 CSD_bit             _BIT_ACCESS(I2C1CON1,0)
// SMT1CLK<CSEL0>
extern volatile __bit                   CSEL0               __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 CSEL0_bit           _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<CSEL1>
extern volatile __bit                   CSEL1               __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 CSEL1_bit           _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<CSEL2>
extern volatile __bit                   CSEL2               __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 CSEL2_bit           _BIT_ACCESS(SMT1CLK,2)
// SMT1CLK<CSEL3>
extern volatile __bit                   CSEL3               __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 CSEL3_bit           _BIT_ACCESS(SMT1CLK,3)
// I2C1CON0<CSTR>
extern volatile __bit                   CSTR                __at(0x14A4);	// @ (0x294 * 8 + 4)
#define                                 CSTR_bit            _BIT_ACCESS(I2C1CON0,4)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x57F);	// @ (0xAF * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE0<CSWIE>
extern volatile __bit                   CSWIE               __at(0x24F3);	// @ (0x49E * 8 + 3)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE0,3)
// PIR0<CSWIF>
extern volatile __bit                   CSWIF               __at(0x2573);	// @ (0x4AE * 8 + 3)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR0,3)
// IPR0<CSWIP>
extern volatile __bit                   CSWIP               __at(0x1B13);	// @ (0x362 * 8 + 3)
#define                                 CSWIP_bit           _BIT_ACCESS(IPR0,3)
// CWG1CLK<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x1DE0);	// @ (0x3BC * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLK,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x1DF8);	// @ (0x3BF * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x1DF9);	// @ (0x3BF * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x1DFA);	// @ (0x3BF * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x1DFB);	// @ (0x3BF * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x1DFC);	// @ (0x3BF * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x1DFD);	// @ (0x3BF * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x1DF0);	// @ (0x3BE * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x1DF1);	// @ (0x3BE * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x1DF2);	// @ (0x3BE * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x1DF3);	// @ (0x3BE * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x1DF4);	// @ (0x3BE * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x1DF5);	// @ (0x3BE * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x1E07);	// @ (0x3C0 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE6<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x2522);	// @ (0x4A4 * 8 + 2)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE6,2)
// PIR6<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x25A2);	// @ (0x4B4 * 8 + 2)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR6,2)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x1E0D);	// @ (0x3C1 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1PPS<CWG1INPPS0>
extern volatile __bit                   CWG1INPPS0          __at(0x12D8);	// @ (0x25B * 8 + 0)
#define                                 CWG1INPPS0_bit      _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1INPPS1>
extern volatile __bit                   CWG1INPPS1          __at(0x12D9);	// @ (0x25B * 8 + 1)
#define                                 CWG1INPPS1_bit      _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1INPPS2>
extern volatile __bit                   CWG1INPPS2          __at(0x12DA);	// @ (0x25B * 8 + 2)
#define                                 CWG1INPPS2_bit      _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1INPPS3>
extern volatile __bit                   CWG1INPPS3          __at(0x12DB);	// @ (0x25B * 8 + 3)
#define                                 CWG1INPPS3_bit      _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1INPPS4>
extern volatile __bit                   CWG1INPPS4          __at(0x12DC);	// @ (0x25B * 8 + 4)
#define                                 CWG1INPPS4_bit      _BIT_ACCESS(CWG1PPS,4)
// IPR6<CWG1IP>
extern volatile __bit                   CWG1IP              __at(0x1B42);	// @ (0x368 * 8 + 2)
#define                                 CWG1IP_bit          _BIT_ACCESS(IPR6,2)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x1E06);	// @ (0x3C0 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x1E12);	// @ (0x3C2 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x1E13);	// @ (0x3C2 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x1E14);	// @ (0x3C2 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x1E15);	// @ (0x3C2 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// CWG1AS0<CWG1LSDB0>
extern volatile __bit                   CWG1LSDB0           __at(0x1E14);	// @ (0x3C2 * 8 + 4)
#define                                 CWG1LSDB0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSDB1>
extern volatile __bit                   CWG1LSDB1           __at(0x1E15);	// @ (0x3C2 * 8 + 5)
#define                                 CWG1LSDB1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x324);	// @ (0x64 * 8 + 4)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,4)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x1E00);	// @ (0x3C0 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x1E01);	// @ (0x3C0 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x1E02);	// @ (0x3C0 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x1E24);	// @ (0x3C4 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x1E25);	// @ (0x3C4 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x1E26);	// @ (0x3C4 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x1E27);	// @ (0x3C4 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x1E08);	// @ (0x3C1 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x1E09);	// @ (0x3C1 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x1E0A);	// @ (0x3C1 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x1E0B);	// @ (0x3C1 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x1E20);	// @ (0x3C4 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x1E21);	// @ (0x3C4 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x1E22);	// @ (0x3C4 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x1E23);	// @ (0x3C4 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// CWG2CLK<CWG2CS>
extern volatile __bit                   CWG2CS              __at(0x1E28);	// @ (0x3C5 * 8 + 0)
#define                                 CWG2CS_bit          _BIT_ACCESS(CWG2CLK,0)
// CWG2DBF<CWG2DBF0>
extern volatile __bit                   CWG2DBF0            __at(0x1E40);	// @ (0x3C8 * 8 + 0)
#define                                 CWG2DBF0_bit        _BIT_ACCESS(CWG2DBF,0)
// CWG2DBF<CWG2DBF1>
extern volatile __bit                   CWG2DBF1            __at(0x1E41);	// @ (0x3C8 * 8 + 1)
#define                                 CWG2DBF1_bit        _BIT_ACCESS(CWG2DBF,1)
// CWG2DBF<CWG2DBF2>
extern volatile __bit                   CWG2DBF2            __at(0x1E42);	// @ (0x3C8 * 8 + 2)
#define                                 CWG2DBF2_bit        _BIT_ACCESS(CWG2DBF,2)
// CWG2DBF<CWG2DBF3>
extern volatile __bit                   CWG2DBF3            __at(0x1E43);	// @ (0x3C8 * 8 + 3)
#define                                 CWG2DBF3_bit        _BIT_ACCESS(CWG2DBF,3)
// CWG2DBF<CWG2DBF4>
extern volatile __bit                   CWG2DBF4            __at(0x1E44);	// @ (0x3C8 * 8 + 4)
#define                                 CWG2DBF4_bit        _BIT_ACCESS(CWG2DBF,4)
// CWG2DBF<CWG2DBF5>
extern volatile __bit                   CWG2DBF5            __at(0x1E45);	// @ (0x3C8 * 8 + 5)
#define                                 CWG2DBF5_bit        _BIT_ACCESS(CWG2DBF,5)
// CWG2DBR<CWG2DBR0>
extern volatile __bit                   CWG2DBR0            __at(0x1E38);	// @ (0x3C7 * 8 + 0)
#define                                 CWG2DBR0_bit        _BIT_ACCESS(CWG2DBR,0)
// CWG2DBR<CWG2DBR1>
extern volatile __bit                   CWG2DBR1            __at(0x1E39);	// @ (0x3C7 * 8 + 1)
#define                                 CWG2DBR1_bit        _BIT_ACCESS(CWG2DBR,1)
// CWG2DBR<CWG2DBR2>
extern volatile __bit                   CWG2DBR2            __at(0x1E3A);	// @ (0x3C7 * 8 + 2)
#define                                 CWG2DBR2_bit        _BIT_ACCESS(CWG2DBR,2)
// CWG2DBR<CWG2DBR3>
extern volatile __bit                   CWG2DBR3            __at(0x1E3B);	// @ (0x3C7 * 8 + 3)
#define                                 CWG2DBR3_bit        _BIT_ACCESS(CWG2DBR,3)
// CWG2DBR<CWG2DBR4>
extern volatile __bit                   CWG2DBR4            __at(0x1E3C);	// @ (0x3C7 * 8 + 4)
#define                                 CWG2DBR4_bit        _BIT_ACCESS(CWG2DBR,4)
// CWG2DBR<CWG2DBR5>
extern volatile __bit                   CWG2DBR5            __at(0x1E3D);	// @ (0x3C7 * 8 + 5)
#define                                 CWG2DBR5_bit        _BIT_ACCESS(CWG2DBR,5)
// CWG2CON0<CWG2EN>
extern volatile __bit                   CWG2EN              __at(0x1E4F);	// @ (0x3C9 * 8 + 7)
#define                                 CWG2EN_bit          _BIT_ACCESS(CWG2CON0,7)
// PIE10<CWG2IE>
extern volatile __bit                   CWG2IE              __at(0x2542);	// @ (0x4A8 * 8 + 2)
#define                                 CWG2IE_bit          _BIT_ACCESS(PIE10,2)
// PIR10<CWG2IF>
extern volatile __bit                   CWG2IF              __at(0x25C2);	// @ (0x4B8 * 8 + 2)
#define                                 CWG2IF_bit          _BIT_ACCESS(PIR10,2)
// CWG2CON1<CWG2IN>
extern volatile __bit                   CWG2IN              __at(0x1E55);	// @ (0x3CA * 8 + 5)
#define                                 CWG2IN_bit          _BIT_ACCESS(CWG2CON1,5)
// CWG2PPS<CWG2INPPS0>
extern volatile __bit                   CWG2INPPS0          __at(0x12E0);	// @ (0x25C * 8 + 0)
#define                                 CWG2INPPS0_bit      _BIT_ACCESS(CWG2PPS,0)
// CWG2PPS<CWG2INPPS1>
extern volatile __bit                   CWG2INPPS1          __at(0x12E1);	// @ (0x25C * 8 + 1)
#define                                 CWG2INPPS1_bit      _BIT_ACCESS(CWG2PPS,1)
// CWG2PPS<CWG2INPPS2>
extern volatile __bit                   CWG2INPPS2          __at(0x12E2);	// @ (0x25C * 8 + 2)
#define                                 CWG2INPPS2_bit      _BIT_ACCESS(CWG2PPS,2)
// CWG2PPS<CWG2INPPS3>
extern volatile __bit                   CWG2INPPS3          __at(0x12E3);	// @ (0x25C * 8 + 3)
#define                                 CWG2INPPS3_bit      _BIT_ACCESS(CWG2PPS,3)
// CWG2PPS<CWG2INPPS4>
extern volatile __bit                   CWG2INPPS4          __at(0x12E4);	// @ (0x25C * 8 + 4)
#define                                 CWG2INPPS4_bit      _BIT_ACCESS(CWG2PPS,4)
// IPR10<CWG2IP>
extern volatile __bit                   CWG2IP              __at(0x1B62);	// @ (0x36C * 8 + 2)
#define                                 CWG2IP_bit          _BIT_ACCESS(IPR10,2)
// CWG2CON0<CWG2LD>
extern volatile __bit                   CWG2LD              __at(0x1E4E);	// @ (0x3C9 * 8 + 6)
#define                                 CWG2LD_bit          _BIT_ACCESS(CWG2CON0,6)
// CWG2AS0<CWG2LSAC0>
extern volatile __bit                   CWG2LSAC0           __at(0x1E5A);	// @ (0x3CB * 8 + 2)
#define                                 CWG2LSAC0_bit       _BIT_ACCESS(CWG2AS0,2)
// CWG2AS0<CWG2LSAC1>
extern volatile __bit                   CWG2LSAC1           __at(0x1E5B);	// @ (0x3CB * 8 + 3)
#define                                 CWG2LSAC1_bit       _BIT_ACCESS(CWG2AS0,3)
// CWG2AS0<CWG2LSBD0>
extern volatile __bit                   CWG2LSBD0           __at(0x1E5C);	// @ (0x3CB * 8 + 4)
#define                                 CWG2LSBD0_bit       _BIT_ACCESS(CWG2AS0,4)
// CWG2AS0<CWG2LSBD1>
extern volatile __bit                   CWG2LSBD1           __at(0x1E5D);	// @ (0x3CB * 8 + 5)
#define                                 CWG2LSBD1_bit       _BIT_ACCESS(CWG2AS0,5)
// CWG2AS0<CWG2LSDB0>
extern volatile __bit                   CWG2LSDB0           __at(0x1E5C);	// @ (0x3CB * 8 + 4)
#define                                 CWG2LSDB0_bit       _BIT_ACCESS(CWG2AS0,4)
// CWG2AS0<CWG2LSDB1>
extern volatile __bit                   CWG2LSDB1           __at(0x1E5D);	// @ (0x3CB * 8 + 5)
#define                                 CWG2LSDB1_bit       _BIT_ACCESS(CWG2AS0,5)
// PMD4<CWG2MD>
extern volatile __bit                   CWG2MD              __at(0x325);	// @ (0x64 * 8 + 5)
#define                                 CWG2MD_bit          _BIT_ACCESS(PMD4,5)
// CWG2CON0<CWG2MODE0>
extern volatile __bit                   CWG2MODE0           __at(0x1E48);	// @ (0x3C9 * 8 + 0)
#define                                 CWG2MODE0_bit       _BIT_ACCESS(CWG2CON0,0)
// CWG2CON0<CWG2MODE1>
extern volatile __bit                   CWG2MODE1           __at(0x1E49);	// @ (0x3C9 * 8 + 1)
#define                                 CWG2MODE1_bit       _BIT_ACCESS(CWG2CON0,1)
// CWG2CON0<CWG2MODE2>
extern volatile __bit                   CWG2MODE2           __at(0x1E4A);	// @ (0x3C9 * 8 + 2)
#define                                 CWG2MODE2_bit       _BIT_ACCESS(CWG2CON0,2)
// CWG2STR<CWG2OVRA>
extern volatile __bit                   CWG2OVRA            __at(0x1E6C);	// @ (0x3CD * 8 + 4)
#define                                 CWG2OVRA_bit        _BIT_ACCESS(CWG2STR,4)
// CWG2STR<CWG2OVRB>
extern volatile __bit                   CWG2OVRB            __at(0x1E6D);	// @ (0x3CD * 8 + 5)
#define                                 CWG2OVRB_bit        _BIT_ACCESS(CWG2STR,5)
// CWG2STR<CWG2OVRC>
extern volatile __bit                   CWG2OVRC            __at(0x1E6E);	// @ (0x3CD * 8 + 6)
#define                                 CWG2OVRC_bit        _BIT_ACCESS(CWG2STR,6)
// CWG2STR<CWG2OVRD>
extern volatile __bit                   CWG2OVRD            __at(0x1E6F);	// @ (0x3CD * 8 + 7)
#define                                 CWG2OVRD_bit        _BIT_ACCESS(CWG2STR,7)
// CWG2CON1<CWG2POLA>
extern volatile __bit                   CWG2POLA            __at(0x1E50);	// @ (0x3CA * 8 + 0)
#define                                 CWG2POLA_bit        _BIT_ACCESS(CWG2CON1,0)
// CWG2CON1<CWG2POLB>
extern volatile __bit                   CWG2POLB            __at(0x1E51);	// @ (0x3CA * 8 + 1)
#define                                 CWG2POLB_bit        _BIT_ACCESS(CWG2CON1,1)
// CWG2CON1<CWG2POLC>
extern volatile __bit                   CWG2POLC            __at(0x1E52);	// @ (0x3CA * 8 + 2)
#define                                 CWG2POLC_bit        _BIT_ACCESS(CWG2CON1,2)
// CWG2CON1<CWG2POLD>
extern volatile __bit                   CWG2POLD            __at(0x1E53);	// @ (0x3CA * 8 + 3)
#define                                 CWG2POLD_bit        _BIT_ACCESS(CWG2CON1,3)
// CWG2STR<CWG2STRA>
extern volatile __bit                   CWG2STRA            __at(0x1E68);	// @ (0x3CD * 8 + 0)
#define                                 CWG2STRA_bit        _BIT_ACCESS(CWG2STR,0)
// CWG2STR<CWG2STRB>
extern volatile __bit                   CWG2STRB            __at(0x1E69);	// @ (0x3CD * 8 + 1)
#define                                 CWG2STRB_bit        _BIT_ACCESS(CWG2STR,1)
// CWG2STR<CWG2STRC>
extern volatile __bit                   CWG2STRC            __at(0x1E6A);	// @ (0x3CD * 8 + 2)
#define                                 CWG2STRC_bit        _BIT_ACCESS(CWG2STR,2)
// CWG2STR<CWG2STRD>
extern volatile __bit                   CWG2STRD            __at(0x1E6B);	// @ (0x3CD * 8 + 3)
#define                                 CWG2STRD_bit        _BIT_ACCESS(CWG2STR,3)
// CWG3CLK<CWG3CS>
extern volatile __bit                   CWG3CS              __at(0x1E70);	// @ (0x3CE * 8 + 0)
#define                                 CWG3CS_bit          _BIT_ACCESS(CWG3CLK,0)
// CWG3DBF<CWG3DBF0>
extern volatile __bit                   CWG3DBF0            __at(0x1E88);	// @ (0x3D1 * 8 + 0)
#define                                 CWG3DBF0_bit        _BIT_ACCESS(CWG3DBF,0)
// CWG3DBF<CWG3DBF1>
extern volatile __bit                   CWG3DBF1            __at(0x1E89);	// @ (0x3D1 * 8 + 1)
#define                                 CWG3DBF1_bit        _BIT_ACCESS(CWG3DBF,1)
// CWG3DBF<CWG3DBF2>
extern volatile __bit                   CWG3DBF2            __at(0x1E8A);	// @ (0x3D1 * 8 + 2)
#define                                 CWG3DBF2_bit        _BIT_ACCESS(CWG3DBF,2)
// CWG3DBF<CWG3DBF3>
extern volatile __bit                   CWG3DBF3            __at(0x1E8B);	// @ (0x3D1 * 8 + 3)
#define                                 CWG3DBF3_bit        _BIT_ACCESS(CWG3DBF,3)
// CWG3DBF<CWG3DBF4>
extern volatile __bit                   CWG3DBF4            __at(0x1E8C);	// @ (0x3D1 * 8 + 4)
#define                                 CWG3DBF4_bit        _BIT_ACCESS(CWG3DBF,4)
// CWG3DBF<CWG3DBF5>
extern volatile __bit                   CWG3DBF5            __at(0x1E8D);	// @ (0x3D1 * 8 + 5)
#define                                 CWG3DBF5_bit        _BIT_ACCESS(CWG3DBF,5)
// CWG3DBR<CWG3DBR0>
extern volatile __bit                   CWG3DBR0            __at(0x1E80);	// @ (0x3D0 * 8 + 0)
#define                                 CWG3DBR0_bit        _BIT_ACCESS(CWG3DBR,0)
// CWG3DBR<CWG3DBR1>
extern volatile __bit                   CWG3DBR1            __at(0x1E81);	// @ (0x3D0 * 8 + 1)
#define                                 CWG3DBR1_bit        _BIT_ACCESS(CWG3DBR,1)
// CWG3DBR<CWG3DBR2>
extern volatile __bit                   CWG3DBR2            __at(0x1E82);	// @ (0x3D0 * 8 + 2)
#define                                 CWG3DBR2_bit        _BIT_ACCESS(CWG3DBR,2)
// CWG3DBR<CWG3DBR3>
extern volatile __bit                   CWG3DBR3            __at(0x1E83);	// @ (0x3D0 * 8 + 3)
#define                                 CWG3DBR3_bit        _BIT_ACCESS(CWG3DBR,3)
// CWG3DBR<CWG3DBR4>
extern volatile __bit                   CWG3DBR4            __at(0x1E84);	// @ (0x3D0 * 8 + 4)
#define                                 CWG3DBR4_bit        _BIT_ACCESS(CWG3DBR,4)
// CWG3DBR<CWG3DBR5>
extern volatile __bit                   CWG3DBR5            __at(0x1E85);	// @ (0x3D0 * 8 + 5)
#define                                 CWG3DBR5_bit        _BIT_ACCESS(CWG3DBR,5)
// CWG3CON0<CWG3EN>
extern volatile __bit                   CWG3EN              __at(0x1E97);	// @ (0x3D2 * 8 + 7)
#define                                 CWG3EN_bit          _BIT_ACCESS(CWG3CON0,7)
// PIE11<CWG3IE>
extern volatile __bit                   CWG3IE              __at(0x254A);	// @ (0x4A9 * 8 + 2)
#define                                 CWG3IE_bit          _BIT_ACCESS(PIE11,2)
// PIR11<CWG3IF>
extern volatile __bit                   CWG3IF              __at(0x25CA);	// @ (0x4B9 * 8 + 2)
#define                                 CWG3IF_bit          _BIT_ACCESS(PIR11,2)
// CWG3CON1<CWG3IN>
extern volatile __bit                   CWG3IN              __at(0x1E9D);	// @ (0x3D3 * 8 + 5)
#define                                 CWG3IN_bit          _BIT_ACCESS(CWG3CON1,5)
// CWG3PPS<CWG3INPPS0>
extern volatile __bit                   CWG3INPPS0          __at(0x12E8);	// @ (0x25D * 8 + 0)
#define                                 CWG3INPPS0_bit      _BIT_ACCESS(CWG3PPS,0)
// CWG3PPS<CWG3INPPS1>
extern volatile __bit                   CWG3INPPS1          __at(0x12E9);	// @ (0x25D * 8 + 1)
#define                                 CWG3INPPS1_bit      _BIT_ACCESS(CWG3PPS,1)
// CWG3PPS<CWG3INPPS2>
extern volatile __bit                   CWG3INPPS2          __at(0x12EA);	// @ (0x25D * 8 + 2)
#define                                 CWG3INPPS2_bit      _BIT_ACCESS(CWG3PPS,2)
// CWG3PPS<CWG3INPPS3>
extern volatile __bit                   CWG3INPPS3          __at(0x12EB);	// @ (0x25D * 8 + 3)
#define                                 CWG3INPPS3_bit      _BIT_ACCESS(CWG3PPS,3)
// CWG3PPS<CWG3INPPS4>
extern volatile __bit                   CWG3INPPS4          __at(0x12EC);	// @ (0x25D * 8 + 4)
#define                                 CWG3INPPS4_bit      _BIT_ACCESS(CWG3PPS,4)
// IPR11<CWG3IP>
extern volatile __bit                   CWG3IP              __at(0x1B6A);	// @ (0x36D * 8 + 2)
#define                                 CWG3IP_bit          _BIT_ACCESS(IPR11,2)
// CWG3CON0<CWG3LD>
extern volatile __bit                   CWG3LD              __at(0x1E96);	// @ (0x3D2 * 8 + 6)
#define                                 CWG3LD_bit          _BIT_ACCESS(CWG3CON0,6)
// CWG3AS0<CWG3LSAC0>
extern volatile __bit                   CWG3LSAC0           __at(0x1EA2);	// @ (0x3D4 * 8 + 2)
#define                                 CWG3LSAC0_bit       _BIT_ACCESS(CWG3AS0,2)
// CWG3AS0<CWG3LSAC1>
extern volatile __bit                   CWG3LSAC1           __at(0x1EA3);	// @ (0x3D4 * 8 + 3)
#define                                 CWG3LSAC1_bit       _BIT_ACCESS(CWG3AS0,3)
// CWG3AS0<CWG3LSBD0>
extern volatile __bit                   CWG3LSBD0           __at(0x1EA4);	// @ (0x3D4 * 8 + 4)
#define                                 CWG3LSBD0_bit       _BIT_ACCESS(CWG3AS0,4)
// CWG3AS0<CWG3LSBD1>
extern volatile __bit                   CWG3LSBD1           __at(0x1EA5);	// @ (0x3D4 * 8 + 5)
#define                                 CWG3LSBD1_bit       _BIT_ACCESS(CWG3AS0,5)
// CWG3AS0<CWG3LSDB0>
extern volatile __bit                   CWG3LSDB0           __at(0x1EA4);	// @ (0x3D4 * 8 + 4)
#define                                 CWG3LSDB0_bit       _BIT_ACCESS(CWG3AS0,4)
// CWG3AS0<CWG3LSDB1>
extern volatile __bit                   CWG3LSDB1           __at(0x1EA5);	// @ (0x3D4 * 8 + 5)
#define                                 CWG3LSDB1_bit       _BIT_ACCESS(CWG3AS0,5)
// PMD4<CWG3MD>
extern volatile __bit                   CWG3MD              __at(0x326);	// @ (0x64 * 8 + 6)
#define                                 CWG3MD_bit          _BIT_ACCESS(PMD4,6)
// CWG3CON0<CWG3MODE0>
extern volatile __bit                   CWG3MODE0           __at(0x1E90);	// @ (0x3D2 * 8 + 0)
#define                                 CWG3MODE0_bit       _BIT_ACCESS(CWG3CON0,0)
// CWG3CON0<CWG3MODE1>
extern volatile __bit                   CWG3MODE1           __at(0x1E91);	// @ (0x3D2 * 8 + 1)
#define                                 CWG3MODE1_bit       _BIT_ACCESS(CWG3CON0,1)
// CWG3CON0<CWG3MODE2>
extern volatile __bit                   CWG3MODE2           __at(0x1E92);	// @ (0x3D2 * 8 + 2)
#define                                 CWG3MODE2_bit       _BIT_ACCESS(CWG3CON0,2)
// CWG3STR<CWG3OVRA>
extern volatile __bit                   CWG3OVRA            __at(0x1EB4);	// @ (0x3D6 * 8 + 4)
#define                                 CWG3OVRA_bit        _BIT_ACCESS(CWG3STR,4)
// CWG3STR<CWG3OVRB>
extern volatile __bit                   CWG3OVRB            __at(0x1EB5);	// @ (0x3D6 * 8 + 5)
#define                                 CWG3OVRB_bit        _BIT_ACCESS(CWG3STR,5)
// CWG3STR<CWG3OVRC>
extern volatile __bit                   CWG3OVRC            __at(0x1EB6);	// @ (0x3D6 * 8 + 6)
#define                                 CWG3OVRC_bit        _BIT_ACCESS(CWG3STR,6)
// CWG3STR<CWG3OVRD>
extern volatile __bit                   CWG3OVRD            __at(0x1EB7);	// @ (0x3D6 * 8 + 7)
#define                                 CWG3OVRD_bit        _BIT_ACCESS(CWG3STR,7)
// CWG3CON1<CWG3POLA>
extern volatile __bit                   CWG3POLA            __at(0x1E98);	// @ (0x3D3 * 8 + 0)
#define                                 CWG3POLA_bit        _BIT_ACCESS(CWG3CON1,0)
// CWG3CON1<CWG3POLB>
extern volatile __bit                   CWG3POLB            __at(0x1E99);	// @ (0x3D3 * 8 + 1)
#define                                 CWG3POLB_bit        _BIT_ACCESS(CWG3CON1,1)
// CWG3CON1<CWG3POLC>
extern volatile __bit                   CWG3POLC            __at(0x1E9A);	// @ (0x3D3 * 8 + 2)
#define                                 CWG3POLC_bit        _BIT_ACCESS(CWG3CON1,2)
// CWG3CON1<CWG3POLD>
extern volatile __bit                   CWG3POLD            __at(0x1E9B);	// @ (0x3D3 * 8 + 3)
#define                                 CWG3POLD_bit        _BIT_ACCESS(CWG3CON1,3)
// CWG3STR<CWG3STRA>
extern volatile __bit                   CWG3STRA            __at(0x1EB0);	// @ (0x3D6 * 8 + 0)
#define                                 CWG3STRA_bit        _BIT_ACCESS(CWG3STR,0)
// CWG3STR<CWG3STRB>
extern volatile __bit                   CWG3STRB            __at(0x1EB1);	// @ (0x3D6 * 8 + 1)
#define                                 CWG3STRB_bit        _BIT_ACCESS(CWG3STR,1)
// CWG3STR<CWG3STRC>
extern volatile __bit                   CWG3STRC            __at(0x1EB2);	// @ (0x3D6 * 8 + 2)
#define                                 CWG3STRC_bit        _BIT_ACCESS(CWG3STR,2)
// CWG3STR<CWG3STRD>
extern volatile __bit                   CWG3STRD            __at(0x1EB3);	// @ (0x3D6 * 8 + 3)
#define                                 CWG3STRD_bit        _BIT_ACCESS(CWG3STR,3)
// CLCnSEL0<D1S0>
extern volatile __bit                   D1S0                __at(0x6C0);	// @ (0xD8 * 8 + 0)
#define                                 D1S0_bit            _BIT_ACCESS(CLCnSEL0,0)
// CLCnSEL0<D1S1>
extern volatile __bit                   D1S1                __at(0x6C1);	// @ (0xD8 * 8 + 1)
#define                                 D1S1_bit            _BIT_ACCESS(CLCnSEL0,1)
// CLCnSEL0<D1S2>
extern volatile __bit                   D1S2                __at(0x6C2);	// @ (0xD8 * 8 + 2)
#define                                 D1S2_bit            _BIT_ACCESS(CLCnSEL0,2)
// CLCnSEL0<D1S3>
extern volatile __bit                   D1S3                __at(0x6C3);	// @ (0xD8 * 8 + 3)
#define                                 D1S3_bit            _BIT_ACCESS(CLCnSEL0,3)
// CLCnSEL0<D1S4>
extern volatile __bit                   D1S4                __at(0x6C4);	// @ (0xD8 * 8 + 4)
#define                                 D1S4_bit            _BIT_ACCESS(CLCnSEL0,4)
// CLCnSEL0<D1S5>
extern volatile __bit                   D1S5                __at(0x6C5);	// @ (0xD8 * 8 + 5)
#define                                 D1S5_bit            _BIT_ACCESS(CLCnSEL0,5)
// CLCnSEL0<D1S6>
extern volatile __bit                   D1S6                __at(0x6C6);	// @ (0xD8 * 8 + 6)
#define                                 D1S6_bit            _BIT_ACCESS(CLCnSEL0,6)
// CLCnSEL0<D1S7>
extern volatile __bit                   D1S7                __at(0x6C7);	// @ (0xD8 * 8 + 7)
#define                                 D1S7_bit            _BIT_ACCESS(CLCnSEL0,7)
// CLCnSEL1<D2S0>
extern volatile __bit                   D2S0                __at(0x6C8);	// @ (0xD9 * 8 + 0)
#define                                 D2S0_bit            _BIT_ACCESS(CLCnSEL1,0)
// CLCnSEL1<D2S1>
extern volatile __bit                   D2S1                __at(0x6C9);	// @ (0xD9 * 8 + 1)
#define                                 D2S1_bit            _BIT_ACCESS(CLCnSEL1,1)
// CLCnSEL1<D2S2>
extern volatile __bit                   D2S2                __at(0x6CA);	// @ (0xD9 * 8 + 2)
#define                                 D2S2_bit            _BIT_ACCESS(CLCnSEL1,2)
// CLCnSEL1<D2S3>
extern volatile __bit                   D2S3                __at(0x6CB);	// @ (0xD9 * 8 + 3)
#define                                 D2S3_bit            _BIT_ACCESS(CLCnSEL1,3)
// CLCnSEL1<D2S4>
extern volatile __bit                   D2S4                __at(0x6CC);	// @ (0xD9 * 8 + 4)
#define                                 D2S4_bit            _BIT_ACCESS(CLCnSEL1,4)
// CLCnSEL1<D2S5>
extern volatile __bit                   D2S5                __at(0x6CD);	// @ (0xD9 * 8 + 5)
#define                                 D2S5_bit            _BIT_ACCESS(CLCnSEL1,5)
// CLCnSEL1<D2S6>
extern volatile __bit                   D2S6                __at(0x6CE);	// @ (0xD9 * 8 + 6)
#define                                 D2S6_bit            _BIT_ACCESS(CLCnSEL1,6)
// CLCnSEL1<D2S7>
extern volatile __bit                   D2S7                __at(0x6CF);	// @ (0xD9 * 8 + 7)
#define                                 D2S7_bit            _BIT_ACCESS(CLCnSEL1,7)
// CLCnSEL2<D3S0>
extern volatile __bit                   D3S0                __at(0x6D0);	// @ (0xDA * 8 + 0)
#define                                 D3S0_bit            _BIT_ACCESS(CLCnSEL2,0)
// CLCnSEL2<D3S1>
extern volatile __bit                   D3S1                __at(0x6D1);	// @ (0xDA * 8 + 1)
#define                                 D3S1_bit            _BIT_ACCESS(CLCnSEL2,1)
// CLCnSEL2<D3S2>
extern volatile __bit                   D3S2                __at(0x6D2);	// @ (0xDA * 8 + 2)
#define                                 D3S2_bit            _BIT_ACCESS(CLCnSEL2,2)
// CLCnSEL2<D3S3>
extern volatile __bit                   D3S3                __at(0x6D3);	// @ (0xDA * 8 + 3)
#define                                 D3S3_bit            _BIT_ACCESS(CLCnSEL2,3)
// CLCnSEL2<D3S4>
extern volatile __bit                   D3S4                __at(0x6D4);	// @ (0xDA * 8 + 4)
#define                                 D3S4_bit            _BIT_ACCESS(CLCnSEL2,4)
// CLCnSEL2<D3S5>
extern volatile __bit                   D3S5                __at(0x6D5);	// @ (0xDA * 8 + 5)
#define                                 D3S5_bit            _BIT_ACCESS(CLCnSEL2,5)
// CLCnSEL2<D3S6>
extern volatile __bit                   D3S6                __at(0x6D6);	// @ (0xDA * 8 + 6)
#define                                 D3S6_bit            _BIT_ACCESS(CLCnSEL2,6)
// CLCnSEL2<D3S7>
extern volatile __bit                   D3S7                __at(0x6D7);	// @ (0xDA * 8 + 7)
#define                                 D3S7_bit            _BIT_ACCESS(CLCnSEL2,7)
// CLCnSEL3<D4S0>
extern volatile __bit                   D4S0                __at(0x6D8);	// @ (0xDB * 8 + 0)
#define                                 D4S0_bit            _BIT_ACCESS(CLCnSEL3,0)
// CLCnSEL3<D4S1>
extern volatile __bit                   D4S1                __at(0x6D9);	// @ (0xDB * 8 + 1)
#define                                 D4S1_bit            _BIT_ACCESS(CLCnSEL3,1)
// CLCnSEL3<D4S2>
extern volatile __bit                   D4S2                __at(0x6DA);	// @ (0xDB * 8 + 2)
#define                                 D4S2_bit            _BIT_ACCESS(CLCnSEL3,2)
// CLCnSEL3<D4S3>
extern volatile __bit                   D4S3                __at(0x6DB);	// @ (0xDB * 8 + 3)
#define                                 D4S3_bit            _BIT_ACCESS(CLCnSEL3,3)
// CLCnSEL3<D4S4>
extern volatile __bit                   D4S4                __at(0x6DC);	// @ (0xDB * 8 + 4)
#define                                 D4S4_bit            _BIT_ACCESS(CLCnSEL3,4)
// CLCnSEL3<D4S5>
extern volatile __bit                   D4S5                __at(0x6DD);	// @ (0xDB * 8 + 5)
#define                                 D4S5_bit            _BIT_ACCESS(CLCnSEL3,5)
// CLCnSEL3<D4S6>
extern volatile __bit                   D4S6                __at(0x6DE);	// @ (0xDB * 8 + 6)
#define                                 D4S6_bit            _BIT_ACCESS(CLCnSEL3,6)
// CLCnSEL3<D4S7>
extern volatile __bit                   D4S7                __at(0x6DF);	// @ (0xDB * 8 + 7)
#define                                 D4S7_bit            _BIT_ACCESS(CLCnSEL3,7)
// DAC1CON<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x3FF);	// @ (0x7F * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON,7)
// PMD3<DAC1MD>
extern volatile __bit                   DAC1MD              __at(0x31E);	// @ (0x63 * 8 + 6)
#define                                 DAC1MD_bit          _BIT_ACCESS(PMD3,6)
// DAC1CON<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x3FA);	// @ (0x7F * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON,2)
// DAC1CON<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x3FB);	// @ (0x7F * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON,3)
// DAC1DATL<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x3E8);	// @ (0x7D * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1DATL,0)
// DAC1DATL<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x3E9);	// @ (0x7D * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1DATL,1)
// DAC1DATL<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x3EA);	// @ (0x7D * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1DATL,2)
// DAC1DATL<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x3EB);	// @ (0x7D * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1DATL,3)
// DAC1DATL<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x3EC);	// @ (0x7D * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1DATL,4)
// DAC1DATL<DAC1R5>
extern volatile __bit                   DAC1R5              __at(0x3ED);	// @ (0x7D * 8 + 5)
#define                                 DAC1R5_bit          _BIT_ACCESS(DAC1DATL,5)
// DAC1DATL<DAC1R6>
extern volatile __bit                   DAC1R6              __at(0x3EE);	// @ (0x7D * 8 + 6)
#define                                 DAC1R6_bit          _BIT_ACCESS(DAC1DATL,6)
// DAC1DATL<DAC1R7>
extern volatile __bit                   DAC1R7              __at(0x3EF);	// @ (0x7D * 8 + 7)
#define                                 DAC1R7_bit          _BIT_ACCESS(DAC1DATL,7)
// I2C1STAT0<DATA>
extern volatile __bit                   DATA                __at(0x14C3);	// @ (0x298 * 8 + 3)
#define                                 DATA_bit            _BIT_ACCESS(I2C1STAT0,3)
// CRCDATL<DATA0>
extern volatile __bit                   DATA0               __at(0x1A78);	// @ (0x34F * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DATA1>
extern volatile __bit                   DATA1               __at(0x1A79);	// @ (0x34F * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DATA10>
extern volatile __bit                   DATA10              __at(0x1A82);	// @ (0x350 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DATA11>
extern volatile __bit                   DATA11              __at(0x1A83);	// @ (0x350 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DATA12>
extern volatile __bit                   DATA12              __at(0x1A84);	// @ (0x350 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DATA13>
extern volatile __bit                   DATA13              __at(0x1A85);	// @ (0x350 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DATA14>
extern volatile __bit                   DATA14              __at(0x1A86);	// @ (0x350 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DATA15>
extern volatile __bit                   DATA15              __at(0x1A87);	// @ (0x350 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DATA2>
extern volatile __bit                   DATA2               __at(0x1A7A);	// @ (0x34F * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DATA3>
extern volatile __bit                   DATA3               __at(0x1A7B);	// @ (0x34F * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DATA4>
extern volatile __bit                   DATA4               __at(0x1A7C);	// @ (0x34F * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DATA5>
extern volatile __bit                   DATA5               __at(0x1A7D);	// @ (0x34F * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DATA6>
extern volatile __bit                   DATA6               __at(0x1A7E);	// @ (0x34F * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DATA7>
extern volatile __bit                   DATA7               __at(0x1A7F);	// @ (0x34F * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DATA8>
extern volatile __bit                   DATA8               __at(0x1A80);	// @ (0x350 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DATA9>
extern volatile __bit                   DATA9               __at(0x1A81);	// @ (0x350 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATH,1)
// CLKRCON<DC0>
extern volatile __bit                   DC0                 __at(0x1CB);	// @ (0x39 * 8 + 3)
#define                                 DC0_bit             _BIT_ACCESS(CLKRCON,3)
// CLKRCON<DC1>
extern volatile __bit                   DC1                 __at(0x1CC);	// @ (0x39 * 8 + 4)
#define                                 DC1_bit             _BIT_ACCESS(CLKRCON,4)
// DMAnDCNTL<DCNT0>
extern volatile __bit                   DCNT0               __at(0x750);	// @ (0xEA * 8 + 0)
#define                                 DCNT0_bit           _BIT_ACCESS(DMAnDCNTL,0)
// DMAnDCNTL<DCNT1>
extern volatile __bit                   DCNT1               __at(0x751);	// @ (0xEA * 8 + 1)
#define                                 DCNT1_bit           _BIT_ACCESS(DMAnDCNTL,1)
// DMAnDCNTH<DCNT10>
extern volatile __bit                   DCNT10              __at(0x75A);	// @ (0xEB * 8 + 2)
#define                                 DCNT10_bit          _BIT_ACCESS(DMAnDCNTH,2)
// DMAnDCNTH<DCNT11>
extern volatile __bit                   DCNT11              __at(0x75B);	// @ (0xEB * 8 + 3)
#define                                 DCNT11_bit          _BIT_ACCESS(DMAnDCNTH,3)
// DMAnDCNTL<DCNT2>
extern volatile __bit                   DCNT2               __at(0x752);	// @ (0xEA * 8 + 2)
#define                                 DCNT2_bit           _BIT_ACCESS(DMAnDCNTL,2)
// DMAnDCNTL<DCNT3>
extern volatile __bit                   DCNT3               __at(0x753);	// @ (0xEA * 8 + 3)
#define                                 DCNT3_bit           _BIT_ACCESS(DMAnDCNTL,3)
// DMAnDCNTL<DCNT4>
extern volatile __bit                   DCNT4               __at(0x754);	// @ (0xEA * 8 + 4)
#define                                 DCNT4_bit           _BIT_ACCESS(DMAnDCNTL,4)
// DMAnDCNTL<DCNT5>
extern volatile __bit                   DCNT5               __at(0x755);	// @ (0xEA * 8 + 5)
#define                                 DCNT5_bit           _BIT_ACCESS(DMAnDCNTL,5)
// DMAnDCNTL<DCNT6>
extern volatile __bit                   DCNT6               __at(0x756);	// @ (0xEA * 8 + 6)
#define                                 DCNT6_bit           _BIT_ACCESS(DMAnDCNTL,6)
// DMAnDCNTL<DCNT7>
extern volatile __bit                   DCNT7               __at(0x757);	// @ (0xEA * 8 + 7)
#define                                 DCNT7_bit           _BIT_ACCESS(DMAnDCNTL,7)
// DMAnDCNTH<DCNT8>
extern volatile __bit                   DCNT8               __at(0x758);	// @ (0xEB * 8 + 0)
#define                                 DCNT8_bit           _BIT_ACCESS(DMAnDCNTH,0)
// DMAnDCNTH<DCNT9>
extern volatile __bit                   DCNT9               __at(0x759);	// @ (0xEB * 8 + 1)
#define                                 DCNT9_bit           _BIT_ACCESS(DMAnDCNTH,1)
// DMAnCON0<DGO>
extern volatile __bit                   DGO                 __at(0x7E5);	// @ (0xFC * 8 + 5)
#define                                 DGO_bit             _BIT_ACCESS(DMAnCON0,5)
// CLKRCON<DIV0>
extern volatile __bit                   DIV0                __at(0x1C8);	// @ (0x39 * 8 + 0)
#define                                 DIV0_bit            _BIT_ACCESS(CLKRCON,0)
// CLKRCON<DIV1>
extern volatile __bit                   DIV1                __at(0x1C9);	// @ (0x39 * 8 + 1)
#define                                 DIV1_bit            _BIT_ACCESS(CLKRCON,1)
// CLKRCON<DIV2>
extern volatile __bit                   DIV2                __at(0x1CA);	// @ (0x39 * 8 + 2)
#define                                 DIV2_bit            _BIT_ACCESS(CLKRCON,2)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x1AC4);	// @ (0x358 * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x1AC5);	// @ (0x358 * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x1AC6);	// @ (0x358 * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x1AC7);	// @ (0x358 * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// PIE2<DMA1AIE>
extern volatile __bit                   DMA1AIE             __at(0x2507);	// @ (0x4A0 * 8 + 7)
#define                                 DMA1AIE_bit         _BIT_ACCESS(PIE2,7)
// PIR2<DMA1AIF>
extern volatile __bit                   DMA1AIF             __at(0x2587);	// @ (0x4B0 * 8 + 7)
#define                                 DMA1AIF_bit         _BIT_ACCESS(PIR2,7)
// IPR2<DMA1AIP>
extern volatile __bit                   DMA1AIP             __at(0x1B27);	// @ (0x364 * 8 + 7)
#define                                 DMA1AIP_bit         _BIT_ACCESS(IPR2,7)
// PIE2<DMA1DCNTIE>
extern volatile __bit                   DMA1DCNTIE          __at(0x2505);	// @ (0x4A0 * 8 + 5)
#define                                 DMA1DCNTIE_bit      _BIT_ACCESS(PIE2,5)
// PIR2<DMA1DCNTIF>
extern volatile __bit                   DMA1DCNTIF          __at(0x2585);	// @ (0x4B0 * 8 + 5)
#define                                 DMA1DCNTIF_bit      _BIT_ACCESS(PIR2,5)
// IPR2<DMA1DCNTIP>
extern volatile __bit                   DMA1DCNTIP          __at(0x1B25);	// @ (0x364 * 8 + 5)
#define                                 DMA1DCNTIP_bit      _BIT_ACCESS(IPR2,5)
// PMD8<DMA1MD>
extern volatile __bit                   DMA1MD              __at(0x340);	// @ (0x68 * 8 + 0)
#define                                 DMA1MD_bit          _BIT_ACCESS(PMD8,0)
// PIE2<DMA1ORIE>
extern volatile __bit                   DMA1ORIE            __at(0x2506);	// @ (0x4A0 * 8 + 6)
#define                                 DMA1ORIE_bit        _BIT_ACCESS(PIE2,6)
// PIR2<DMA1ORIF>
extern volatile __bit                   DMA1ORIF            __at(0x2586);	// @ (0x4B0 * 8 + 6)
#define                                 DMA1ORIF_bit        _BIT_ACCESS(PIR2,6)
// IPR2<DMA1ORIP>
extern volatile __bit                   DMA1ORIP            __at(0x1B26);	// @ (0x364 * 8 + 6)
#define                                 DMA1ORIP_bit        _BIT_ACCESS(IPR2,6)
// DMA1PR<DMA1PR0>
extern volatile __bit                   DMA1PR0             __at(0x5B0);	// @ (0xB6 * 8 + 0)
#define                                 DMA1PR0_bit         _BIT_ACCESS(DMA1PR,0)
// DMA1PR<DMA1PR1>
extern volatile __bit                   DMA1PR1             __at(0x5B1);	// @ (0xB6 * 8 + 1)
#define                                 DMA1PR1_bit         _BIT_ACCESS(DMA1PR,1)
// DMA1PR<DMA1PR2>
extern volatile __bit                   DMA1PR2             __at(0x5B2);	// @ (0xB6 * 8 + 2)
#define                                 DMA1PR2_bit         _BIT_ACCESS(DMA1PR,2)
// PIE2<DMA1SCNTIE>
extern volatile __bit                   DMA1SCNTIE          __at(0x2504);	// @ (0x4A0 * 8 + 4)
#define                                 DMA1SCNTIE_bit      _BIT_ACCESS(PIE2,4)
// PIR2<DMA1SCNTIF>
extern volatile __bit                   DMA1SCNTIF          __at(0x2584);	// @ (0x4B0 * 8 + 4)
#define                                 DMA1SCNTIF_bit      _BIT_ACCESS(PIR2,4)
// IPR2<DMA1SCNTIP>
extern volatile __bit                   DMA1SCNTIP          __at(0x1B24);	// @ (0x364 * 8 + 4)
#define                                 DMA1SCNTIP_bit      _BIT_ACCESS(IPR2,4)
// PIE6<DMA2AIE>
extern volatile __bit                   DMA2AIE             __at(0x2527);	// @ (0x4A4 * 8 + 7)
#define                                 DMA2AIE_bit         _BIT_ACCESS(PIE6,7)
// PIR6<DMA2AIF>
extern volatile __bit                   DMA2AIF             __at(0x25A7);	// @ (0x4B4 * 8 + 7)
#define                                 DMA2AIF_bit         _BIT_ACCESS(PIR6,7)
// IPR6<DMA2AIP>
extern volatile __bit                   DMA2AIP             __at(0x1B47);	// @ (0x368 * 8 + 7)
#define                                 DMA2AIP_bit         _BIT_ACCESS(IPR6,7)
// PIE6<DMA2DCNTIE>
extern volatile __bit                   DMA2DCNTIE          __at(0x2525);	// @ (0x4A4 * 8 + 5)
#define                                 DMA2DCNTIE_bit      _BIT_ACCESS(PIE6,5)
// PIR6<DMA2DCNTIF>
extern volatile __bit                   DMA2DCNTIF          __at(0x25A5);	// @ (0x4B4 * 8 + 5)
#define                                 DMA2DCNTIF_bit      _BIT_ACCESS(PIR6,5)
// IPR6<DMA2DCNTIP>
extern volatile __bit                   DMA2DCNTIP          __at(0x1B45);	// @ (0x368 * 8 + 5)
#define                                 DMA2DCNTIP_bit      _BIT_ACCESS(IPR6,5)
// PMD8<DMA2MD>
extern volatile __bit                   DMA2MD              __at(0x341);	// @ (0x68 * 8 + 1)
#define                                 DMA2MD_bit          _BIT_ACCESS(PMD8,1)
// PIE6<DMA2ORIE>
extern volatile __bit                   DMA2ORIE            __at(0x2526);	// @ (0x4A4 * 8 + 6)
#define                                 DMA2ORIE_bit        _BIT_ACCESS(PIE6,6)
// PIR6<DMA2ORIF>
extern volatile __bit                   DMA2ORIF            __at(0x25A6);	// @ (0x4B4 * 8 + 6)
#define                                 DMA2ORIF_bit        _BIT_ACCESS(PIR6,6)
// IPR6<DMA2ORIP>
extern volatile __bit                   DMA2ORIP            __at(0x1B46);	// @ (0x368 * 8 + 6)
#define                                 DMA2ORIP_bit        _BIT_ACCESS(IPR6,6)
// DMA2PR<DMA2PR0>
extern volatile __bit                   DMA2PR0             __at(0x5B8);	// @ (0xB7 * 8 + 0)
#define                                 DMA2PR0_bit         _BIT_ACCESS(DMA2PR,0)
// DMA2PR<DMA2PR1>
extern volatile __bit                   DMA2PR1             __at(0x5B9);	// @ (0xB7 * 8 + 1)
#define                                 DMA2PR1_bit         _BIT_ACCESS(DMA2PR,1)
// DMA2PR<DMA2PR2>
extern volatile __bit                   DMA2PR2             __at(0x5BA);	// @ (0xB7 * 8 + 2)
#define                                 DMA2PR2_bit         _BIT_ACCESS(DMA2PR,2)
// PIE6<DMA2SCNTIE>
extern volatile __bit                   DMA2SCNTIE          __at(0x2524);	// @ (0x4A4 * 8 + 4)
#define                                 DMA2SCNTIE_bit      _BIT_ACCESS(PIE6,4)
// PIR6<DMA2SCNTIF>
extern volatile __bit                   DMA2SCNTIF          __at(0x25A4);	// @ (0x4B4 * 8 + 4)
#define                                 DMA2SCNTIF_bit      _BIT_ACCESS(PIR6,4)
// IPR6<DMA2SCNTIP>
extern volatile __bit                   DMA2SCNTIP          __at(0x1B44);	// @ (0x368 * 8 + 4)
#define                                 DMA2SCNTIP_bit      _BIT_ACCESS(IPR6,4)
// PIE10<DMA3AIE>
extern volatile __bit                   DMA3AIE             __at(0x2547);	// @ (0x4A8 * 8 + 7)
#define                                 DMA3AIE_bit         _BIT_ACCESS(PIE10,7)
// PIR10<DMA3AIF>
extern volatile __bit                   DMA3AIF             __at(0x25C7);	// @ (0x4B8 * 8 + 7)
#define                                 DMA3AIF_bit         _BIT_ACCESS(PIR10,7)
// IPR10<DMA3AIP>
extern volatile __bit                   DMA3AIP             __at(0x1B67);	// @ (0x36C * 8 + 7)
#define                                 DMA3AIP_bit         _BIT_ACCESS(IPR10,7)
// PIE10<DMA3DCNTIE>
extern volatile __bit                   DMA3DCNTIE          __at(0x2545);	// @ (0x4A8 * 8 + 5)
#define                                 DMA3DCNTIE_bit      _BIT_ACCESS(PIE10,5)
// PIR10<DMA3DCNTIF>
extern volatile __bit                   DMA3DCNTIF          __at(0x25C5);	// @ (0x4B8 * 8 + 5)
#define                                 DMA3DCNTIF_bit      _BIT_ACCESS(PIR10,5)
// IPR10<DMA3DCNTIP>
extern volatile __bit                   DMA3DCNTIP          __at(0x1B65);	// @ (0x36C * 8 + 5)
#define                                 DMA3DCNTIP_bit      _BIT_ACCESS(IPR10,5)
// PMD8<DMA3MD>
extern volatile __bit                   DMA3MD              __at(0x342);	// @ (0x68 * 8 + 2)
#define                                 DMA3MD_bit          _BIT_ACCESS(PMD8,2)
// PIE10<DMA3ORIE>
extern volatile __bit                   DMA3ORIE            __at(0x2546);	// @ (0x4A8 * 8 + 6)
#define                                 DMA3ORIE_bit        _BIT_ACCESS(PIE10,6)
// PIR10<DMA3ORIF>
extern volatile __bit                   DMA3ORIF            __at(0x25C6);	// @ (0x4B8 * 8 + 6)
#define                                 DMA3ORIF_bit        _BIT_ACCESS(PIR10,6)
// IPR10<DMA3ORIP>
extern volatile __bit                   DMA3ORIP            __at(0x1B66);	// @ (0x36C * 8 + 6)
#define                                 DMA3ORIP_bit        _BIT_ACCESS(IPR10,6)
// DMA3PR<DMA3PR0>
extern volatile __bit                   DMA3PR0             __at(0x5C0);	// @ (0xB8 * 8 + 0)
#define                                 DMA3PR0_bit         _BIT_ACCESS(DMA3PR,0)
// DMA3PR<DMA3PR1>
extern volatile __bit                   DMA3PR1             __at(0x5C1);	// @ (0xB8 * 8 + 1)
#define                                 DMA3PR1_bit         _BIT_ACCESS(DMA3PR,1)
// DMA3PR<DMA3PR2>
extern volatile __bit                   DMA3PR2             __at(0x5C2);	// @ (0xB8 * 8 + 2)
#define                                 DMA3PR2_bit         _BIT_ACCESS(DMA3PR,2)
// PIE10<DMA3SCNTIE>
extern volatile __bit                   DMA3SCNTIE          __at(0x2544);	// @ (0x4A8 * 8 + 4)
#define                                 DMA3SCNTIE_bit      _BIT_ACCESS(PIE10,4)
// PIR10<DMA3SCNTIF>
extern volatile __bit                   DMA3SCNTIF          __at(0x25C4);	// @ (0x4B8 * 8 + 4)
#define                                 DMA3SCNTIF_bit      _BIT_ACCESS(PIR10,4)
// IPR10<DMA3SCNTIP>
extern volatile __bit                   DMA3SCNTIP          __at(0x1B64);	// @ (0x36C * 8 + 4)
#define                                 DMA3SCNTIP_bit      _BIT_ACCESS(IPR10,4)
// PIE11<DMA4AIE>
extern volatile __bit                   DMA4AIE             __at(0x254F);	// @ (0x4A9 * 8 + 7)
#define                                 DMA4AIE_bit         _BIT_ACCESS(PIE11,7)
// PIR11<DMA4AIF>
extern volatile __bit                   DMA4AIF             __at(0x25CF);	// @ (0x4B9 * 8 + 7)
#define                                 DMA4AIF_bit         _BIT_ACCESS(PIR11,7)
// IPR11<DMA4AIP>
extern volatile __bit                   DMA4AIP             __at(0x1B6F);	// @ (0x36D * 8 + 7)
#define                                 DMA4AIP_bit         _BIT_ACCESS(IPR11,7)
// PIE11<DMA4DCNTIE>
extern volatile __bit                   DMA4DCNTIE          __at(0x254D);	// @ (0x4A9 * 8 + 5)
#define                                 DMA4DCNTIE_bit      _BIT_ACCESS(PIE11,5)
// PIR11<DMA4DCNTIF>
extern volatile __bit                   DMA4DCNTIF          __at(0x25CD);	// @ (0x4B9 * 8 + 5)
#define                                 DMA4DCNTIF_bit      _BIT_ACCESS(PIR11,5)
// IPR11<DMA4DCNTIP>
extern volatile __bit                   DMA4DCNTIP          __at(0x1B6D);	// @ (0x36D * 8 + 5)
#define                                 DMA4DCNTIP_bit      _BIT_ACCESS(IPR11,5)
// PMD8<DMA4MD>
extern volatile __bit                   DMA4MD              __at(0x343);	// @ (0x68 * 8 + 3)
#define                                 DMA4MD_bit          _BIT_ACCESS(PMD8,3)
// PIE11<DMA4ORIE>
extern volatile __bit                   DMA4ORIE            __at(0x254E);	// @ (0x4A9 * 8 + 6)
#define                                 DMA4ORIE_bit        _BIT_ACCESS(PIE11,6)
// PIR11<DMA4ORIF>
extern volatile __bit                   DMA4ORIF            __at(0x25CE);	// @ (0x4B9 * 8 + 6)
#define                                 DMA4ORIF_bit        _BIT_ACCESS(PIR11,6)
// IPR11<DMA4ORIP>
extern volatile __bit                   DMA4ORIP            __at(0x1B6E);	// @ (0x36D * 8 + 6)
#define                                 DMA4ORIP_bit        _BIT_ACCESS(IPR11,6)
// DMA4PR<DMA4PR0>
extern volatile __bit                   DMA4PR0             __at(0x5C8);	// @ (0xB9 * 8 + 0)
#define                                 DMA4PR0_bit         _BIT_ACCESS(DMA4PR,0)
// DMA4PR<DMA4PR1>
extern volatile __bit                   DMA4PR1             __at(0x5C9);	// @ (0xB9 * 8 + 1)
#define                                 DMA4PR1_bit         _BIT_ACCESS(DMA4PR,1)
// DMA4PR<DMA4PR2>
extern volatile __bit                   DMA4PR2             __at(0x5CA);	// @ (0xB9 * 8 + 2)
#define                                 DMA4PR2_bit         _BIT_ACCESS(DMA4PR,2)
// PIE11<DMA4SCNTIE>
extern volatile __bit                   DMA4SCNTIE          __at(0x254C);	// @ (0x4A9 * 8 + 4)
#define                                 DMA4SCNTIE_bit      _BIT_ACCESS(PIE11,4)
// PIR11<DMA4SCNTIF>
extern volatile __bit                   DMA4SCNTIF          __at(0x25CC);	// @ (0x4B9 * 8 + 4)
#define                                 DMA4SCNTIF_bit      _BIT_ACCESS(PIR11,4)
// IPR11<DMA4SCNTIP>
extern volatile __bit                   DMA4SCNTIP          __at(0x1B6C);	// @ (0x36D * 8 + 4)
#define                                 DMA4SCNTIP_bit      _BIT_ACCESS(IPR11,4)
// PIE12<DMA5AIE>
extern volatile __bit                   DMA5AIE             __at(0x2557);	// @ (0x4AA * 8 + 7)
#define                                 DMA5AIE_bit         _BIT_ACCESS(PIE12,7)
// PIR12<DMA5AIF>
extern volatile __bit                   DMA5AIF             __at(0x25D7);	// @ (0x4BA * 8 + 7)
#define                                 DMA5AIF_bit         _BIT_ACCESS(PIR12,7)
// IPR12<DMA5AIP>
extern volatile __bit                   DMA5AIP             __at(0x1B77);	// @ (0x36E * 8 + 7)
#define                                 DMA5AIP_bit         _BIT_ACCESS(IPR12,7)
// PIE12<DMA5DCNTIE>
extern volatile __bit                   DMA5DCNTIE          __at(0x2555);	// @ (0x4AA * 8 + 5)
#define                                 DMA5DCNTIE_bit      _BIT_ACCESS(PIE12,5)
// PIR12<DMA5DCNTIF>
extern volatile __bit                   DMA5DCNTIF          __at(0x25D5);	// @ (0x4BA * 8 + 5)
#define                                 DMA5DCNTIF_bit      _BIT_ACCESS(PIR12,5)
// IPR12<DMA5DCNTIP>
extern volatile __bit                   DMA5DCNTIP          __at(0x1B75);	// @ (0x36E * 8 + 5)
#define                                 DMA5DCNTIP_bit      _BIT_ACCESS(IPR12,5)
// PMD8<DMA5MD>
extern volatile __bit                   DMA5MD              __at(0x344);	// @ (0x68 * 8 + 4)
#define                                 DMA5MD_bit          _BIT_ACCESS(PMD8,4)
// PIE12<DMA5ORIE>
extern volatile __bit                   DMA5ORIE            __at(0x2556);	// @ (0x4AA * 8 + 6)
#define                                 DMA5ORIE_bit        _BIT_ACCESS(PIE12,6)
// PIR12<DMA5ORIF>
extern volatile __bit                   DMA5ORIF            __at(0x25D6);	// @ (0x4BA * 8 + 6)
#define                                 DMA5ORIF_bit        _BIT_ACCESS(PIR12,6)
// IPR12<DMA5ORIP>
extern volatile __bit                   DMA5ORIP            __at(0x1B76);	// @ (0x36E * 8 + 6)
#define                                 DMA5ORIP_bit        _BIT_ACCESS(IPR12,6)
// DMA5PR<DMA5PR0>
extern volatile __bit                   DMA5PR0             __at(0x5D0);	// @ (0xBA * 8 + 0)
#define                                 DMA5PR0_bit         _BIT_ACCESS(DMA5PR,0)
// DMA5PR<DMA5PR1>
extern volatile __bit                   DMA5PR1             __at(0x5D1);	// @ (0xBA * 8 + 1)
#define                                 DMA5PR1_bit         _BIT_ACCESS(DMA5PR,1)
// DMA5PR<DMA5PR2>
extern volatile __bit                   DMA5PR2             __at(0x5D2);	// @ (0xBA * 8 + 2)
#define                                 DMA5PR2_bit         _BIT_ACCESS(DMA5PR,2)
// PIE12<DMA5SCNTIE>
extern volatile __bit                   DMA5SCNTIE          __at(0x2554);	// @ (0x4AA * 8 + 4)
#define                                 DMA5SCNTIE_bit      _BIT_ACCESS(PIE12,4)
// PIR12<DMA5SCNTIF>
extern volatile __bit                   DMA5SCNTIF          __at(0x25D4);	// @ (0x4BA * 8 + 4)
#define                                 DMA5SCNTIF_bit      _BIT_ACCESS(PIR12,4)
// IPR12<DMA5SCNTIP>
extern volatile __bit                   DMA5SCNTIP          __at(0x1B74);	// @ (0x36E * 8 + 4)
#define                                 DMA5SCNTIP_bit      _BIT_ACCESS(IPR12,4)
// PIE13<DMA6AIE>
extern volatile __bit                   DMA6AIE             __at(0x255F);	// @ (0x4AB * 8 + 7)
#define                                 DMA6AIE_bit         _BIT_ACCESS(PIE13,7)
// PIR13<DMA6AIF>
extern volatile __bit                   DMA6AIF             __at(0x25DF);	// @ (0x4BB * 8 + 7)
#define                                 DMA6AIF_bit         _BIT_ACCESS(PIR13,7)
// IPR13<DMA6AIP>
extern volatile __bit                   DMA6AIP             __at(0x1B7F);	// @ (0x36F * 8 + 7)
#define                                 DMA6AIP_bit         _BIT_ACCESS(IPR13,7)
// PIE13<DMA6DCNTIE>
extern volatile __bit                   DMA6DCNTIE          __at(0x255D);	// @ (0x4AB * 8 + 5)
#define                                 DMA6DCNTIE_bit      _BIT_ACCESS(PIE13,5)
// PIR13<DMA6DCNTIF>
extern volatile __bit                   DMA6DCNTIF          __at(0x25DD);	// @ (0x4BB * 8 + 5)
#define                                 DMA6DCNTIF_bit      _BIT_ACCESS(PIR13,5)
// IPR13<DMA6DCNTIP>
extern volatile __bit                   DMA6DCNTIP          __at(0x1B7D);	// @ (0x36F * 8 + 5)
#define                                 DMA6DCNTIP_bit      _BIT_ACCESS(IPR13,5)
// PMD8<DMA6MD>
extern volatile __bit                   DMA6MD              __at(0x345);	// @ (0x68 * 8 + 5)
#define                                 DMA6MD_bit          _BIT_ACCESS(PMD8,5)
// PIE13<DMA6ORIE>
extern volatile __bit                   DMA6ORIE            __at(0x255E);	// @ (0x4AB * 8 + 6)
#define                                 DMA6ORIE_bit        _BIT_ACCESS(PIE13,6)
// PIR13<DMA6ORIF>
extern volatile __bit                   DMA6ORIF            __at(0x25DE);	// @ (0x4BB * 8 + 6)
#define                                 DMA6ORIF_bit        _BIT_ACCESS(PIR13,6)
// IPR13<DMA6ORIP>
extern volatile __bit                   DMA6ORIP            __at(0x1B7E);	// @ (0x36F * 8 + 6)
#define                                 DMA6ORIP_bit        _BIT_ACCESS(IPR13,6)
// DMA6PR<DMA6PR0>
extern volatile __bit                   DMA6PR0             __at(0x5D8);	// @ (0xBB * 8 + 0)
#define                                 DMA6PR0_bit         _BIT_ACCESS(DMA6PR,0)
// DMA6PR<DMA6PR1>
extern volatile __bit                   DMA6PR1             __at(0x5D9);	// @ (0xBB * 8 + 1)
#define                                 DMA6PR1_bit         _BIT_ACCESS(DMA6PR,1)
// DMA6PR<DMA6PR2>
extern volatile __bit                   DMA6PR2             __at(0x5DA);	// @ (0xBB * 8 + 2)
#define                                 DMA6PR2_bit         _BIT_ACCESS(DMA6PR,2)
// PIE13<DMA6SCNTIE>
extern volatile __bit                   DMA6SCNTIE          __at(0x255C);	// @ (0x4AB * 8 + 4)
#define                                 DMA6SCNTIE_bit      _BIT_ACCESS(PIE13,4)
// PIR13<DMA6SCNTIF>
extern volatile __bit                   DMA6SCNTIF          __at(0x25DC);	// @ (0x4BB * 8 + 4)
#define                                 DMA6SCNTIF_bit      _BIT_ACCESS(PIR13,4)
// IPR13<DMA6SCNTIP>
extern volatile __bit                   DMA6SCNTIP          __at(0x1B7C);	// @ (0x36F * 8 + 4)
#define                                 DMA6SCNTIP_bit      _BIT_ACCESS(IPR13,4)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x2794);	// @ (0x4F2 * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x1F98);	// @ (0x3F3 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x2790);	// @ (0x4F2 * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x2791);	// @ (0x4F2 * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x2792);	// @ (0x4F2 * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x2796);	// @ (0x4F2 * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// DMAnDPTRL<DPTR0>
extern volatile __bit                   DPTR0               __at(0x760);	// @ (0xEC * 8 + 0)
#define                                 DPTR0_bit           _BIT_ACCESS(DMAnDPTRL,0)
// DMAnDPTRL<DPTR1>
extern volatile __bit                   DPTR1               __at(0x761);	// @ (0xEC * 8 + 1)
#define                                 DPTR1_bit           _BIT_ACCESS(DMAnDPTRL,1)
// DMAnDPTRH<DPTR10>
extern volatile __bit                   DPTR10              __at(0x76A);	// @ (0xED * 8 + 2)
#define                                 DPTR10_bit          _BIT_ACCESS(DMAnDPTRH,2)
// DMAnDPTRH<DPTR11>
extern volatile __bit                   DPTR11              __at(0x76B);	// @ (0xED * 8 + 3)
#define                                 DPTR11_bit          _BIT_ACCESS(DMAnDPTRH,3)
// DMAnDPTRH<DPTR12>
extern volatile __bit                   DPTR12              __at(0x76C);	// @ (0xED * 8 + 4)
#define                                 DPTR12_bit          _BIT_ACCESS(DMAnDPTRH,4)
// DMAnDPTRH<DPTR13>
extern volatile __bit                   DPTR13              __at(0x76D);	// @ (0xED * 8 + 5)
#define                                 DPTR13_bit          _BIT_ACCESS(DMAnDPTRH,5)
// DMAnDPTRH<DPTR14>
extern volatile __bit                   DPTR14              __at(0x76E);	// @ (0xED * 8 + 6)
#define                                 DPTR14_bit          _BIT_ACCESS(DMAnDPTRH,6)
// DMAnDPTRH<DPTR15>
extern volatile __bit                   DPTR15              __at(0x76F);	// @ (0xED * 8 + 7)
#define                                 DPTR15_bit          _BIT_ACCESS(DMAnDPTRH,7)
// DMAnDPTRL<DPTR2>
extern volatile __bit                   DPTR2               __at(0x762);	// @ (0xEC * 8 + 2)
#define                                 DPTR2_bit           _BIT_ACCESS(DMAnDPTRL,2)
// DMAnDPTRL<DPTR3>
extern volatile __bit                   DPTR3               __at(0x763);	// @ (0xEC * 8 + 3)
#define                                 DPTR3_bit           _BIT_ACCESS(DMAnDPTRL,3)
// DMAnDPTRL<DPTR4>
extern volatile __bit                   DPTR4               __at(0x764);	// @ (0xEC * 8 + 4)
#define                                 DPTR4_bit           _BIT_ACCESS(DMAnDPTRL,4)
// DMAnDPTRL<DPTR5>
extern volatile __bit                   DPTR5               __at(0x765);	// @ (0xEC * 8 + 5)
#define                                 DPTR5_bit           _BIT_ACCESS(DMAnDPTRL,5)
// DMAnDPTRL<DPTR6>
extern volatile __bit                   DPTR6               __at(0x766);	// @ (0xEC * 8 + 6)
#define                                 DPTR6_bit           _BIT_ACCESS(DMAnDPTRL,6)
// DMAnDPTRL<DPTR7>
extern volatile __bit                   DPTR7               __at(0x767);	// @ (0xEC * 8 + 7)
#define                                 DPTR7_bit           _BIT_ACCESS(DMAnDPTRL,7)
// DMAnDPTRH<DPTR8>
extern volatile __bit                   DPTR8               __at(0x768);	// @ (0xED * 8 + 0)
#define                                 DPTR8_bit           _BIT_ACCESS(DMAnDPTRH,0)
// DMAnDPTRH<DPTR9>
extern volatile __bit                   DPTR9               __at(0x769);	// @ (0xED * 8 + 1)
#define                                 DPTR9_bit           _BIT_ACCESS(DMAnDPTRH,1)
// DMAnDSAL<DSA0>
extern volatile __bit                   DSA0                __at(0x780);	// @ (0xF0 * 8 + 0)
#define                                 DSA0_bit            _BIT_ACCESS(DMAnDSAL,0)
// DMAnDSAL<DSA1>
extern volatile __bit                   DSA1                __at(0x781);	// @ (0xF0 * 8 + 1)
#define                                 DSA1_bit            _BIT_ACCESS(DMAnDSAL,1)
// DMAnDSAH<DSA10>
extern volatile __bit                   DSA10               __at(0x78A);	// @ (0xF1 * 8 + 2)
#define                                 DSA10_bit           _BIT_ACCESS(DMAnDSAH,2)
// DMAnDSAH<DSA11>
extern volatile __bit                   DSA11               __at(0x78B);	// @ (0xF1 * 8 + 3)
#define                                 DSA11_bit           _BIT_ACCESS(DMAnDSAH,3)
// DMAnDSAH<DSA12>
extern volatile __bit                   DSA12               __at(0x78C);	// @ (0xF1 * 8 + 4)
#define                                 DSA12_bit           _BIT_ACCESS(DMAnDSAH,4)
// DMAnDSAH<DSA13>
extern volatile __bit                   DSA13               __at(0x78D);	// @ (0xF1 * 8 + 5)
#define                                 DSA13_bit           _BIT_ACCESS(DMAnDSAH,5)
// DMAnDSAH<DSA14>
extern volatile __bit                   DSA14               __at(0x78E);	// @ (0xF1 * 8 + 6)
#define                                 DSA14_bit           _BIT_ACCESS(DMAnDSAH,6)
// DMAnDSAH<DSA15>
extern volatile __bit                   DSA15               __at(0x78F);	// @ (0xF1 * 8 + 7)
#define                                 DSA15_bit           _BIT_ACCESS(DMAnDSAH,7)
// DMAnDSAL<DSA2>
extern volatile __bit                   DSA2                __at(0x782);	// @ (0xF0 * 8 + 2)
#define                                 DSA2_bit            _BIT_ACCESS(DMAnDSAL,2)
// DMAnDSAL<DSA3>
extern volatile __bit                   DSA3                __at(0x783);	// @ (0xF0 * 8 + 3)
#define                                 DSA3_bit            _BIT_ACCESS(DMAnDSAL,3)
// DMAnDSAL<DSA4>
extern volatile __bit                   DSA4                __at(0x784);	// @ (0xF0 * 8 + 4)
#define                                 DSA4_bit            _BIT_ACCESS(DMAnDSAL,4)
// DMAnDSAL<DSA5>
extern volatile __bit                   DSA5                __at(0x785);	// @ (0xF0 * 8 + 5)
#define                                 DSA5_bit            _BIT_ACCESS(DMAnDSAL,5)
// DMAnDSAL<DSA6>
extern volatile __bit                   DSA6                __at(0x786);	// @ (0xF0 * 8 + 6)
#define                                 DSA6_bit            _BIT_ACCESS(DMAnDSAL,6)
// DMAnDSAL<DSA7>
extern volatile __bit                   DSA7                __at(0x787);	// @ (0xF0 * 8 + 7)
#define                                 DSA7_bit            _BIT_ACCESS(DMAnDSAL,7)
// DMAnDSAH<DSA8>
extern volatile __bit                   DSA8                __at(0x788);	// @ (0xF1 * 8 + 0)
#define                                 DSA8_bit            _BIT_ACCESS(DMAnDSAH,0)
// DMAnDSAH<DSA9>
extern volatile __bit                   DSA9                __at(0x789);	// @ (0xF1 * 8 + 1)
#define                                 DSA9_bit            _BIT_ACCESS(DMAnDSAH,1)
// ADCON1<DSEN>
extern volatile __bit                   DSEN                __at(0x1FA0);	// @ (0x3F4 * 8 + 0)
#define                                 DSEN_bit            _BIT_ACCESS(ADCON1,0)
// PMD4<DSM1MD>
extern volatile __bit                   DSM1MD              __at(0x323);	// @ (0x64 * 8 + 3)
#define                                 DSM1MD_bit          _BIT_ACCESS(PMD4,3)
// DMAnCON1<DSTP>
extern volatile __bit                   DSTP                __at(0x7ED);	// @ (0xFD * 8 + 5)
#define                                 DSTP_bit            _BIT_ACCESS(DMAnCON1,5)
// DMAnDSZL<DSZ0>
extern volatile __bit                   DSZ0                __at(0x770);	// @ (0xEE * 8 + 0)
#define                                 DSZ0_bit            _BIT_ACCESS(DMAnDSZL,0)
// DMAnDSZL<DSZ1>
extern volatile __bit                   DSZ1                __at(0x771);	// @ (0xEE * 8 + 1)
#define                                 DSZ1_bit            _BIT_ACCESS(DMAnDSZL,1)
// DMAnDSZH<DSZ10>
extern volatile __bit                   DSZ10               __at(0x77A);	// @ (0xEF * 8 + 2)
#define                                 DSZ10_bit           _BIT_ACCESS(DMAnDSZH,2)
// DMAnDSZH<DSZ11>
extern volatile __bit                   DSZ11               __at(0x77B);	// @ (0xEF * 8 + 3)
#define                                 DSZ11_bit           _BIT_ACCESS(DMAnDSZH,3)
// DMAnDSZL<DSZ2>
extern volatile __bit                   DSZ2                __at(0x772);	// @ (0xEE * 8 + 2)
#define                                 DSZ2_bit            _BIT_ACCESS(DMAnDSZL,2)
// DMAnDSZL<DSZ3>
extern volatile __bit                   DSZ3                __at(0x773);	// @ (0xEE * 8 + 3)
#define                                 DSZ3_bit            _BIT_ACCESS(DMAnDSZL,3)
// DMAnDSZL<DSZ4>
extern volatile __bit                   DSZ4                __at(0x774);	// @ (0xEE * 8 + 4)
#define                                 DSZ4_bit            _BIT_ACCESS(DMAnDSZL,4)
// DMAnDSZL<DSZ5>
extern volatile __bit                   DSZ5                __at(0x775);	// @ (0xEE * 8 + 5)
#define                                 DSZ5_bit            _BIT_ACCESS(DMAnDSZL,5)
// DMAnDSZL<DSZ6>
extern volatile __bit                   DSZ6                __at(0x776);	// @ (0xEE * 8 + 6)
#define                                 DSZ6_bit            _BIT_ACCESS(DMAnDSZL,6)
// DMAnDSZL<DSZ7>
extern volatile __bit                   DSZ7                __at(0x777);	// @ (0xEE * 8 + 7)
#define                                 DSZ7_bit            _BIT_ACCESS(DMAnDSZL,7)
// DMAnDSZH<DSZ8>
extern volatile __bit                   DSZ8                __at(0x778);	// @ (0xEF * 8 + 0)
#define                                 DSZ8_bit            _BIT_ACCESS(DMAnDSZH,0)
// DMAnDSZH<DSZ9>
extern volatile __bit                   DSZ9                __at(0x779);	// @ (0xEF * 8 + 1)
#define                                 DSZ9_bit            _BIT_ACCESS(DMAnDSZH,1)
// ADERRL<ERR0>
extern volatile __bit                   ERR0                __at(0x1EE8);	// @ (0x3DD * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(ADERRL,0)
// ADERRL<ERR1>
extern volatile __bit                   ERR1                __at(0x1EE9);	// @ (0x3DD * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(ADERRL,1)
// ADERRH<ERR10>
extern volatile __bit                   ERR10               __at(0x1EF2);	// @ (0x3DE * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(ADERRH,2)
// ADERRH<ERR11>
extern volatile __bit                   ERR11               __at(0x1EF3);	// @ (0x3DE * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(ADERRH,3)
// ADERRH<ERR12>
extern volatile __bit                   ERR12               __at(0x1EF4);	// @ (0x3DE * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(ADERRH,4)
// ADERRH<ERR13>
extern volatile __bit                   ERR13               __at(0x1EF5);	// @ (0x3DE * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(ADERRH,5)
// ADERRH<ERR14>
extern volatile __bit                   ERR14               __at(0x1EF6);	// @ (0x3DE * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(ADERRH,6)
// ADERRH<ERR15>
extern volatile __bit                   ERR15               __at(0x1EF7);	// @ (0x3DE * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(ADERRH,7)
// ADERRL<ERR2>
extern volatile __bit                   ERR2                __at(0x1EEA);	// @ (0x3DD * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(ADERRL,2)
// ADERRL<ERR3>
extern volatile __bit                   ERR3                __at(0x1EEB);	// @ (0x3DD * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(ADERRL,3)
// ADERRL<ERR4>
extern volatile __bit                   ERR4                __at(0x1EEC);	// @ (0x3DD * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(ADERRL,4)
// ADERRL<ERR5>
extern volatile __bit                   ERR5                __at(0x1EED);	// @ (0x3DD * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(ADERRL,5)
// ADERRL<ERR6>
extern volatile __bit                   ERR6                __at(0x1EEE);	// @ (0x3DD * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(ADERRL,6)
// ADERRL<ERR7>
extern volatile __bit                   ERR7                __at(0x1EEF);	// @ (0x3DD * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(ADERRL,7)
// ADERRH<ERR8>
extern volatile __bit                   ERR8                __at(0x1EF0);	// @ (0x3DE * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(ADERRH,0)
// ADERRH<ERR9>
extern volatile __bit                   ERR9                __at(0x1EF1);	// @ (0x3DE * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(ADERRH,1)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x59F);	// @ (0xB3 * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x597);	// @ (0xB2 * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// ADFLTRL<FLTR0>
extern volatile __bit                   FLTR0               __at(0x1F08);	// @ (0x3E1 * 8 + 0)
#define                                 FLTR0_bit           _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<FLTR1>
extern volatile __bit                   FLTR1               __at(0x1F09);	// @ (0x3E1 * 8 + 1)
#define                                 FLTR1_bit           _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<FLTR10>
extern volatile __bit                   FLTR10              __at(0x1F12);	// @ (0x3E2 * 8 + 2)
#define                                 FLTR10_bit          _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<FLTR11>
extern volatile __bit                   FLTR11              __at(0x1F13);	// @ (0x3E2 * 8 + 3)
#define                                 FLTR11_bit          _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<FLTR12>
extern volatile __bit                   FLTR12              __at(0x1F14);	// @ (0x3E2 * 8 + 4)
#define                                 FLTR12_bit          _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<FLTR13>
extern volatile __bit                   FLTR13              __at(0x1F15);	// @ (0x3E2 * 8 + 5)
#define                                 FLTR13_bit          _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<FLTR14>
extern volatile __bit                   FLTR14              __at(0x1F16);	// @ (0x3E2 * 8 + 6)
#define                                 FLTR14_bit          _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<FLTR15>
extern volatile __bit                   FLTR15              __at(0x1F17);	// @ (0x3E2 * 8 + 7)
#define                                 FLTR15_bit          _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<FLTR2>
extern volatile __bit                   FLTR2               __at(0x1F0A);	// @ (0x3E1 * 8 + 2)
#define                                 FLTR2_bit           _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<FLTR3>
extern volatile __bit                   FLTR3               __at(0x1F0B);	// @ (0x3E1 * 8 + 3)
#define                                 FLTR3_bit           _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<FLTR4>
extern volatile __bit                   FLTR4               __at(0x1F0C);	// @ (0x3E1 * 8 + 4)
#define                                 FLTR4_bit           _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<FLTR5>
extern volatile __bit                   FLTR5               __at(0x1F0D);	// @ (0x3E1 * 8 + 5)
#define                                 FLTR5_bit           _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<FLTR6>
extern volatile __bit                   FLTR6               __at(0x1F0E);	// @ (0x3E1 * 8 + 6)
#define                                 FLTR6_bit           _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<FLTR7>
extern volatile __bit                   FLTR7               __at(0x1F0F);	// @ (0x3E1 * 8 + 7)
#define                                 FLTR7_bit           _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<FLTR8>
extern volatile __bit                   FLTR8               __at(0x1F10);	// @ (0x3E2 * 8 + 0)
#define                                 FLTR8_bit           _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<FLTR9>
extern volatile __bit                   FLTR9               __at(0x1F11);	// @ (0x3E2 * 8 + 1)
#define                                 FLTR9_bit           _BIT_ACCESS(ADFLTRH,1)
// ADCON0<FM0>
extern volatile __bit                   FM0                 __at(0x1F9A);	// @ (0x3F3 * 8 + 2)
#define                                 FM0_bit             _BIT_ACCESS(ADCON0,2)
// I2C1CON2<FME>
extern volatile __bit                   FME                 __at(0x14B5);	// @ (0x296 * 8 + 5)
#define                                 FME_bit             _BIT_ACCESS(I2C1CON2,5)
// OSCFRQ<FRQ0>
extern volatile __bit                   FRQ0                __at(0x588);	// @ (0xB1 * 8 + 0)
#define                                 FRQ0_bit            _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<FRQ1>
extern volatile __bit                   FRQ1                __at(0x589);	// @ (0xB1 * 8 + 1)
#define                                 FRQ1_bit            _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<FRQ2>
extern volatile __bit                   FRQ2                __at(0x58A);	// @ (0xB1 * 8 + 2)
#define                                 FRQ2_bit            _BIT_ACCESS(OSCFRQ,2)
// OSCFRQ<FRQ3>
extern volatile __bit                   FRQ3                __at(0x58B);	// @ (0xB1 * 8 + 3)
#define                                 FRQ3_bit            _BIT_ACCESS(OSCFRQ,3)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x1AB8);	// @ (0x357 * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x1EBF);	// @ (0x3D7 * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x306);	// @ (0x60 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x1EBE);	// @ (0x3D7 * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CLCnGLS0<G1D1N>
extern volatile __bit                   G1D1N               __at(0x6E0);	// @ (0xDC * 8 + 0)
#define                                 G1D1N_bit           _BIT_ACCESS(CLCnGLS0,0)
// CLCnGLS0<G1D1T>
extern volatile __bit                   G1D1T               __at(0x6E1);	// @ (0xDC * 8 + 1)
#define                                 G1D1T_bit           _BIT_ACCESS(CLCnGLS0,1)
// CLCnGLS0<G1D2N>
extern volatile __bit                   G1D2N               __at(0x6E2);	// @ (0xDC * 8 + 2)
#define                                 G1D2N_bit           _BIT_ACCESS(CLCnGLS0,2)
// CLCnGLS0<G1D2T>
extern volatile __bit                   G1D2T               __at(0x6E3);	// @ (0xDC * 8 + 3)
#define                                 G1D2T_bit           _BIT_ACCESS(CLCnGLS0,3)
// CLCnGLS0<G1D3N>
extern volatile __bit                   G1D3N               __at(0x6E4);	// @ (0xDC * 8 + 4)
#define                                 G1D3N_bit           _BIT_ACCESS(CLCnGLS0,4)
// CLCnGLS0<G1D3T>
extern volatile __bit                   G1D3T               __at(0x6E5);	// @ (0xDC * 8 + 5)
#define                                 G1D3T_bit           _BIT_ACCESS(CLCnGLS0,5)
// CLCnGLS0<G1D4N>
extern volatile __bit                   G1D4N               __at(0x6E6);	// @ (0xDC * 8 + 6)
#define                                 G1D4N_bit           _BIT_ACCESS(CLCnGLS0,6)
// CLCnGLS0<G1D4T>
extern volatile __bit                   G1D4T               __at(0x6E7);	// @ (0xDC * 8 + 7)
#define                                 G1D4T_bit           _BIT_ACCESS(CLCnGLS0,7)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x1E07);	// @ (0x3C0 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// CLCnPOL<G1POL>
extern volatile __bit                   G1POL               __at(0x6B8);	// @ (0xD7 * 8 + 0)
#define                                 G1POL_bit           _BIT_ACCESS(CLCnPOL,0)
// CLCnGLS1<G2D1N>
extern volatile __bit                   G2D1N               __at(0x6E8);	// @ (0xDD * 8 + 0)
#define                                 G2D1N_bit           _BIT_ACCESS(CLCnGLS1,0)
// CLCnGLS1<G2D1T>
extern volatile __bit                   G2D1T               __at(0x6E9);	// @ (0xDD * 8 + 1)
#define                                 G2D1T_bit           _BIT_ACCESS(CLCnGLS1,1)
// CLCnGLS1<G2D2N>
extern volatile __bit                   G2D2N               __at(0x6EA);	// @ (0xDD * 8 + 2)
#define                                 G2D2N_bit           _BIT_ACCESS(CLCnGLS1,2)
// CLCnGLS1<G2D2T>
extern volatile __bit                   G2D2T               __at(0x6EB);	// @ (0xDD * 8 + 3)
#define                                 G2D2T_bit           _BIT_ACCESS(CLCnGLS1,3)
// CLCnGLS1<G2D3N>
extern volatile __bit                   G2D3N               __at(0x6EC);	// @ (0xDD * 8 + 4)
#define                                 G2D3N_bit           _BIT_ACCESS(CLCnGLS1,4)
// CLCnGLS1<G2D3T>
extern volatile __bit                   G2D3T               __at(0x6ED);	// @ (0xDD * 8 + 5)
#define                                 G2D3T_bit           _BIT_ACCESS(CLCnGLS1,5)
// CLCnGLS1<G2D4N>
extern volatile __bit                   G2D4N               __at(0x6EE);	// @ (0xDD * 8 + 6)
#define                                 G2D4N_bit           _BIT_ACCESS(CLCnGLS1,6)
// CLCnGLS1<G2D4T>
extern volatile __bit                   G2D4T               __at(0x6EF);	// @ (0xDD * 8 + 7)
#define                                 G2D4T_bit           _BIT_ACCESS(CLCnGLS1,7)
// CWG2CON0<G2EN>
extern volatile __bit                   G2EN                __at(0x1E4F);	// @ (0x3C9 * 8 + 7)
#define                                 G2EN_bit            _BIT_ACCESS(CWG2CON0,7)
// CLCnPOL<G2POL>
extern volatile __bit                   G2POL               __at(0x6B9);	// @ (0xD7 * 8 + 1)
#define                                 G2POL_bit           _BIT_ACCESS(CLCnPOL,1)
// CLCnGLS2<G3D1N>
extern volatile __bit                   G3D1N               __at(0x6F0);	// @ (0xDE * 8 + 0)
#define                                 G3D1N_bit           _BIT_ACCESS(CLCnGLS2,0)
// CLCnGLS2<G3D1T>
extern volatile __bit                   G3D1T               __at(0x6F1);	// @ (0xDE * 8 + 1)
#define                                 G3D1T_bit           _BIT_ACCESS(CLCnGLS2,1)
// CLCnGLS2<G3D2N>
extern volatile __bit                   G3D2N               __at(0x6F2);	// @ (0xDE * 8 + 2)
#define                                 G3D2N_bit           _BIT_ACCESS(CLCnGLS2,2)
// CLCnGLS2<G3D2T>
extern volatile __bit                   G3D2T               __at(0x6F3);	// @ (0xDE * 8 + 3)
#define                                 G3D2T_bit           _BIT_ACCESS(CLCnGLS2,3)
// CLCnGLS2<G3D3N>
extern volatile __bit                   G3D3N               __at(0x6F4);	// @ (0xDE * 8 + 4)
#define                                 G3D3N_bit           _BIT_ACCESS(CLCnGLS2,4)
// CLCnGLS2<G3D3T>
extern volatile __bit                   G3D3T               __at(0x6F5);	// @ (0xDE * 8 + 5)
#define                                 G3D3T_bit           _BIT_ACCESS(CLCnGLS2,5)
// CLCnGLS2<G3D4N>
extern volatile __bit                   G3D4N               __at(0x6F6);	// @ (0xDE * 8 + 6)
#define                                 G3D4N_bit           _BIT_ACCESS(CLCnGLS2,6)
// CLCnGLS2<G3D4T>
extern volatile __bit                   G3D4T               __at(0x6F7);	// @ (0xDE * 8 + 7)
#define                                 G3D4T_bit           _BIT_ACCESS(CLCnGLS2,7)
// CWG3CON0<G3EN>
extern volatile __bit                   G3EN                __at(0x1E97);	// @ (0x3D2 * 8 + 7)
#define                                 G3EN_bit            _BIT_ACCESS(CWG3CON0,7)
// CLCnPOL<G3POL>
extern volatile __bit                   G3POL               __at(0x6BA);	// @ (0xD7 * 8 + 2)
#define                                 G3POL_bit           _BIT_ACCESS(CLCnPOL,2)
// CLCnGLS3<G4D1N>
extern volatile __bit                   G4D1N               __at(0x6F8);	// @ (0xDF * 8 + 0)
#define                                 G4D1N_bit           _BIT_ACCESS(CLCnGLS3,0)
// CLCnGLS3<G4D1T>
extern volatile __bit                   G4D1T               __at(0x6F9);	// @ (0xDF * 8 + 1)
#define                                 G4D1T_bit           _BIT_ACCESS(CLCnGLS3,1)
// CLCnGLS3<G4D2N>
extern volatile __bit                   G4D2N               __at(0x6FA);	// @ (0xDF * 8 + 2)
#define                                 G4D2N_bit           _BIT_ACCESS(CLCnGLS3,2)
// CLCnGLS3<G4D2T>
extern volatile __bit                   G4D2T               __at(0x6FB);	// @ (0xDF * 8 + 3)
#define                                 G4D2T_bit           _BIT_ACCESS(CLCnGLS3,3)
// CLCnGLS3<G4D3N>
extern volatile __bit                   G4D3N               __at(0x6FC);	// @ (0xDF * 8 + 4)
#define                                 G4D3N_bit           _BIT_ACCESS(CLCnGLS3,4)
// CLCnGLS3<G4D3T>
extern volatile __bit                   G4D3T               __at(0x6FD);	// @ (0xDF * 8 + 5)
#define                                 G4D3T_bit           _BIT_ACCESS(CLCnGLS3,5)
// CLCnGLS3<G4D4N>
extern volatile __bit                   G4D4N               __at(0x6FE);	// @ (0xDF * 8 + 6)
#define                                 G4D4N_bit           _BIT_ACCESS(CLCnGLS3,6)
// CLCnGLS3<G4D4T>
extern volatile __bit                   G4D4T               __at(0x6FF);	// @ (0xDF * 8 + 7)
#define                                 G4D4T_bit           _BIT_ACCESS(CLCnGLS3,7)
// CLCnPOL<G4POL>
extern volatile __bit                   G4POL               __at(0x6BB);	// @ (0xD7 * 8 + 3)
#define                                 G4POL_bit           _BIT_ACCESS(CLCnPOL,3)
// I2C1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0x14B6);	// @ (0x296 * 8 + 6)
#define                                 GCEN_bit            _BIT_ACCESS(I2C1CON2,6)
// INTCON0<GIE>
extern volatile __bit                   GIE                 __at(0x26B7);	// @ (0x4D6 * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEH>
extern volatile __bit                   GIEH                __at(0x26B7);	// @ (0x4D6 * 8 + 7)
#define                                 GIEH_bit            _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEL>
extern volatile __bit                   GIEL                __at(0x26B6);	// @ (0x4D6 * 8 + 6)
#define                                 GIEL_bit            _BIT_ACCESS(INTCON0,6)
// ADCON0<GO_NOT_DONE>
extern volatile __bit                   GO_NOT_DONE         __at(0x1F98);	// @ (0x3F3 * 8 + 0)
#define                                 GO_NOT_DONE_bit     _BIT_ACCESS(ADCON0,0)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x1F98);	// @ (0x3F3 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x1AE8);	// @ (0x35D * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x1AE9);	// @ (0x35D * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x1AF2);	// @ (0x35E * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x1AF3);	// @ (0x35E * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x1AF4);	// @ (0x35E * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x1AF5);	// @ (0x35E * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x1AF6);	// @ (0x35E * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x1AF7);	// @ (0x35E * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<HADR16>
extern volatile __bit                   HADR16              __at(0x1AF8);	// @ (0x35F * 8 + 0)
#define                                 HADR16_bit          _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<HADR17>
extern volatile __bit                   HADR17              __at(0x1AF9);	// @ (0x35F * 8 + 1)
#define                                 HADR17_bit          _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<HADR18>
extern volatile __bit                   HADR18              __at(0x1AFA);	// @ (0x35F * 8 + 2)
#define                                 HADR18_bit          _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<HADR19>
extern volatile __bit                   HADR19              __at(0x1AFB);	// @ (0x35F * 8 + 3)
#define                                 HADR19_bit          _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x1AEA);	// @ (0x35D * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<HADR20>
extern volatile __bit                   HADR20              __at(0x1AFC);	// @ (0x35F * 8 + 4)
#define                                 HADR20_bit          _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<HADR21>
extern volatile __bit                   HADR21              __at(0x1AFD);	// @ (0x35F * 8 + 5)
#define                                 HADR21_bit          _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x1AEB);	// @ (0x35D * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x1AEC);	// @ (0x35D * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x1AED);	// @ (0x35D * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x1AEE);	// @ (0x35D * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x1AEF);	// @ (0x35D * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x1AF0);	// @ (0x35E * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x1AF1);	// @ (0x35E * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x59E);	// @ (0xB3 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x596);	// @ (0xB2 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// HLVDCON0<HLVDEN>
extern volatile __bit                   HLVDEN              __at(0x257);	// @ (0x4A * 8 + 7)
#define                                 HLVDEN_bit          _BIT_ACCESS(HLVDCON0,7)
// PIE0<HLVDIE>
extern volatile __bit                   HLVDIE              __at(0x24F1);	// @ (0x49E * 8 + 1)
#define                                 HLVDIE_bit          _BIT_ACCESS(PIE0,1)
// PIR0<HLVDIF>
extern volatile __bit                   HLVDIF              __at(0x2571);	// @ (0x4AE * 8 + 1)
#define                                 HLVDIF_bit          _BIT_ACCESS(PIR0,1)
// HLVDCON0<HLVDINTH>
extern volatile __bit                   HLVDINTH            __at(0x251);	// @ (0x4A * 8 + 1)
#define                                 HLVDINTH_bit        _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<HLVDINTL>
extern volatile __bit                   HLVDINTL            __at(0x250);	// @ (0x4A * 8 + 0)
#define                                 HLVDINTL_bit        _BIT_ACCESS(HLVDCON0,0)
// IPR0<HLVDIP>
extern volatile __bit                   HLVDIP              __at(0x1B11);	// @ (0x362 * 8 + 1)
#define                                 HLVDIP_bit          _BIT_ACCESS(IPR0,1)
// PMD0<HLVDMD>
extern volatile __bit                   HLVDMD              __at(0x305);	// @ (0x60 * 8 + 5)
#define                                 HLVDMD_bit          _BIT_ACCESS(PMD0,5)
// HLVDCON0<HLVDOUT>
extern volatile __bit                   HLVDOUT             __at(0x255);	// @ (0x4A * 8 + 5)
#define                                 HLVDOUT_bit         _BIT_ACCESS(HLVDCON0,5)
// HLVDCON0<HLVDRDY>
extern volatile __bit                   HLVDRDY             __at(0x254);	// @ (0x4A * 8 + 4)
#define                                 HLVDRDY_bit         _BIT_ACCESS(HLVDCON0,4)
// HLVDCON1<HLVDSEL0>
extern volatile __bit                   HLVDSEL0            __at(0x258);	// @ (0x4B * 8 + 0)
#define                                 HLVDSEL0_bit        _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<HLVDSEL1>
extern volatile __bit                   HLVDSEL1            __at(0x259);	// @ (0x4B * 8 + 1)
#define                                 HLVDSEL1_bit        _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<HLVDSEL2>
extern volatile __bit                   HLVDSEL2            __at(0x25A);	// @ (0x4B * 8 + 2)
#define                                 HLVDSEL2_bit        _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<HLVDSEL3>
extern volatile __bit                   HLVDSEL3            __at(0x25B);	// @ (0x4B * 8 + 3)
#define                                 HLVDSEL3_bit        _BIT_ACCESS(HLVDCON1,3)
// PIE7<I2C1EIE>
extern volatile __bit                   I2C1EIE             __at(0x252B);	// @ (0x4A5 * 8 + 3)
#define                                 I2C1EIE_bit         _BIT_ACCESS(PIE7,3)
// PIR7<I2C1EIF>
extern volatile __bit                   I2C1EIF             __at(0x25AB);	// @ (0x4B5 * 8 + 3)
#define                                 I2C1EIF_bit         _BIT_ACCESS(PIR7,3)
// IPR7<I2C1EIP>
extern volatile __bit                   I2C1EIP             __at(0x1B4B);	// @ (0x369 * 8 + 3)
#define                                 I2C1EIP_bit         _BIT_ACCESS(IPR7,3)
// PIE7<I2C1IE>
extern volatile __bit                   I2C1IE              __at(0x252A);	// @ (0x4A5 * 8 + 2)
#define                                 I2C1IE_bit          _BIT_ACCESS(PIE7,2)
// PIR7<I2C1IF>
extern volatile __bit                   I2C1IF              __at(0x25AA);	// @ (0x4B5 * 8 + 2)
#define                                 I2C1IF_bit          _BIT_ACCESS(PIR7,2)
// IPR7<I2C1IP>
extern volatile __bit                   I2C1IP              __at(0x1B4A);	// @ (0x369 * 8 + 2)
#define                                 I2C1IP_bit          _BIT_ACCESS(IPR7,2)
// PMD6<I2C1MD>
extern volatile __bit                   I2C1MD              __at(0x330);	// @ (0x66 * 8 + 0)
#define                                 I2C1MD_bit          _BIT_ACCESS(PMD6,0)
// PIE7<I2C1RXIE>
extern volatile __bit                   I2C1RXIE            __at(0x2528);	// @ (0x4A5 * 8 + 0)
#define                                 I2C1RXIE_bit        _BIT_ACCESS(PIE7,0)
// PIR7<I2C1RXIF>
extern volatile __bit                   I2C1RXIF            __at(0x25A8);	// @ (0x4B5 * 8 + 0)
#define                                 I2C1RXIF_bit        _BIT_ACCESS(PIR7,0)
// IPR7<I2C1RXIP>
extern volatile __bit                   I2C1RXIP            __at(0x1B48);	// @ (0x369 * 8 + 0)
#define                                 I2C1RXIP_bit        _BIT_ACCESS(IPR7,0)
// I2C1SCLPPS<I2C1SCLPPS0>
extern volatile __bit                   I2C1SCLPPS0         __at(0x1388);	// @ (0x271 * 8 + 0)
#define                                 I2C1SCLPPS0_bit     _BIT_ACCESS(I2C1SCLPPS,0)
// I2C1SCLPPS<I2C1SCLPPS1>
extern volatile __bit                   I2C1SCLPPS1         __at(0x1389);	// @ (0x271 * 8 + 1)
#define                                 I2C1SCLPPS1_bit     _BIT_ACCESS(I2C1SCLPPS,1)
// I2C1SCLPPS<I2C1SCLPPS2>
extern volatile __bit                   I2C1SCLPPS2         __at(0x138A);	// @ (0x271 * 8 + 2)
#define                                 I2C1SCLPPS2_bit     _BIT_ACCESS(I2C1SCLPPS,2)
// I2C1SCLPPS<I2C1SCLPPS3>
extern volatile __bit                   I2C1SCLPPS3         __at(0x138B);	// @ (0x271 * 8 + 3)
#define                                 I2C1SCLPPS3_bit     _BIT_ACCESS(I2C1SCLPPS,3)
// I2C1SCLPPS<I2C1SCLPPS4>
extern volatile __bit                   I2C1SCLPPS4         __at(0x138C);	// @ (0x271 * 8 + 4)
#define                                 I2C1SCLPPS4_bit     _BIT_ACCESS(I2C1SCLPPS,4)
// I2C1SDAPPS<I2C1SDAPPS0>
extern volatile __bit                   I2C1SDAPPS0         __at(0x1380);	// @ (0x270 * 8 + 0)
#define                                 I2C1SDAPPS0_bit     _BIT_ACCESS(I2C1SDAPPS,0)
// I2C1SDAPPS<I2C1SDAPPS1>
extern volatile __bit                   I2C1SDAPPS1         __at(0x1381);	// @ (0x270 * 8 + 1)
#define                                 I2C1SDAPPS1_bit     _BIT_ACCESS(I2C1SDAPPS,1)
// I2C1SDAPPS<I2C1SDAPPS2>
extern volatile __bit                   I2C1SDAPPS2         __at(0x1382);	// @ (0x270 * 8 + 2)
#define                                 I2C1SDAPPS2_bit     _BIT_ACCESS(I2C1SDAPPS,2)
// I2C1SDAPPS<I2C1SDAPPS3>
extern volatile __bit                   I2C1SDAPPS3         __at(0x1383);	// @ (0x270 * 8 + 3)
#define                                 I2C1SDAPPS3_bit     _BIT_ACCESS(I2C1SDAPPS,3)
// I2C1SDAPPS<I2C1SDAPPS4>
extern volatile __bit                   I2C1SDAPPS4         __at(0x1384);	// @ (0x270 * 8 + 4)
#define                                 I2C1SDAPPS4_bit     _BIT_ACCESS(I2C1SDAPPS,4)
// PIE7<I2C1TXIE>
extern volatile __bit                   I2C1TXIE            __at(0x2529);	// @ (0x4A5 * 8 + 1)
#define                                 I2C1TXIE_bit        _BIT_ACCESS(PIE7,1)
// PIR7<I2C1TXIF>
extern volatile __bit                   I2C1TXIF            __at(0x25A9);	// @ (0x4B5 * 8 + 1)
#define                                 I2C1TXIF_bit        _BIT_ACCESS(PIR7,1)
// IPR7<I2C1TXIP>
extern volatile __bit                   I2C1TXIP            __at(0x1B49);	// @ (0x369 * 8 + 1)
#define                                 I2C1TXIP_bit        _BIT_ACCESS(IPR7,1)
// I2C1BTO<I2CBTO0>
extern volatile __bit                   I2CBTO0             __at(0x14E8);	// @ (0x29D * 8 + 0)
#define                                 I2CBTO0_bit         _BIT_ACCESS(I2C1BTO,0)
// I2C1BTO<I2CBTO1>
extern volatile __bit                   I2CBTO1             __at(0x14E9);	// @ (0x29D * 8 + 1)
#define                                 I2CBTO1_bit         _BIT_ACCESS(I2C1BTO,1)
// I2C1BTO<I2CBTO2>
extern volatile __bit                   I2CBTO2             __at(0x14EA);	// @ (0x29D * 8 + 2)
#define                                 I2CBTO2_bit         _BIT_ACCESS(I2C1BTO,2)
// I2C1BTO<I2CBTO3>
extern volatile __bit                   I2CBTO3             __at(0x14EB);	// @ (0x29D * 8 + 3)
#define                                 I2CBTO3_bit         _BIT_ACCESS(I2C1BTO,3)
// I2C1CLK<I2CCLK0>
extern volatile __bit                   I2CCLK0             __at(0x14E0);	// @ (0x29C * 8 + 0)
#define                                 I2CCLK0_bit         _BIT_ACCESS(I2C1CLK,0)
// I2C1CLK<I2CCLK1>
extern volatile __bit                   I2CCLK1             __at(0x14E1);	// @ (0x29C * 8 + 1)
#define                                 I2CCLK1_bit         _BIT_ACCESS(I2C1CLK,1)
// I2C1CLK<I2CCLK2>
extern volatile __bit                   I2CCLK2             __at(0x14E2);	// @ (0x29C * 8 + 2)
#define                                 I2CCLK2_bit         _BIT_ACCESS(I2C1CLK,2)
// I2C1CLK<I2CCLK3>
extern volatile __bit                   I2CCLK3             __at(0x14E3);	// @ (0x29C * 8 + 3)
#define                                 I2CCLK3_bit         _BIT_ACCESS(I2C1CLK,3)
// I2C1CLK<I2CCLK4>
extern volatile __bit                   I2CCLK4             __at(0x14E4);	// @ (0x29C * 8 + 4)
#define                                 I2CCLK4_bit         _BIT_ACCESS(I2C1CLK,4)
// I2C1CON0<I2CEN>
extern volatile __bit                   I2CEN               __at(0x14A7);	// @ (0x294 * 8 + 7)
#define                                 I2CEN_bit           _BIT_ACCESS(I2C1CON0,7)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x2797);	// @ (0x4F2 * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x2020);	// @ (0x404 * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x2021);	// @ (0x404 * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x2022);	// @ (0x404 * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x2023);	// @ (0x404 * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x2024);	// @ (0x404 * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x2025);	// @ (0x404 * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0x2026);	// @ (0x404 * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0x2027);	// @ (0x404 * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0x2060);	// @ (0x40C * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0x2061);	// @ (0x40C * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0x2062);	// @ (0x40C * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0x2063);	// @ (0x40C * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0x2064);	// @ (0x40C * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0x2065);	// @ (0x40C * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0x2066);	// @ (0x40C * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0x2067);	// @ (0x40C * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x20A0);	// @ (0x414 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x20A1);	// @ (0x414 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x20A2);	// @ (0x414 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x20A3);	// @ (0x414 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x20A4);	// @ (0x414 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x20A5);	// @ (0x414 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0x20A6);	// @ (0x414 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0x20A7);	// @ (0x414 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLE<INLVLE3>
extern volatile __bit                   INLVLE3             __at(0x2123);	// @ (0x424 * 8 + 3)
#define                                 INLVLE3_bit         _BIT_ACCESS(INLVLE,3)
// INTCON0<INT0EDG>
extern volatile __bit                   INT0EDG             __at(0x26B0);	// @ (0x4D6 * 8 + 0)
#define                                 INT0EDG_bit         _BIT_ACCESS(INTCON0,0)
// PIE1<INT0IE>
extern volatile __bit                   INT0IE              __at(0x24F8);	// @ (0x49F * 8 + 0)
#define                                 INT0IE_bit          _BIT_ACCESS(PIE1,0)
// PIR1<INT0IF>
extern volatile __bit                   INT0IF              __at(0x2578);	// @ (0x4AF * 8 + 0)
#define                                 INT0IF_bit          _BIT_ACCESS(PIR1,0)
// IPR1<INT0IP>
extern volatile __bit                   INT0IP              __at(0x1B18);	// @ (0x363 * 8 + 0)
#define                                 INT0IP_bit          _BIT_ACCESS(IPR1,0)
// INT0PPS<INT0PPS0>
extern volatile __bit                   INT0PPS0            __at(0x11F0);	// @ (0x23E * 8 + 0)
#define                                 INT0PPS0_bit        _BIT_ACCESS(INT0PPS,0)
// INT0PPS<INT0PPS1>
extern volatile __bit                   INT0PPS1            __at(0x11F1);	// @ (0x23E * 8 + 1)
#define                                 INT0PPS1_bit        _BIT_ACCESS(INT0PPS,1)
// INT0PPS<INT0PPS2>
extern volatile __bit                   INT0PPS2            __at(0x11F2);	// @ (0x23E * 8 + 2)
#define                                 INT0PPS2_bit        _BIT_ACCESS(INT0PPS,2)
// INT0PPS<INT0PPS3>
extern volatile __bit                   INT0PPS3            __at(0x11F3);	// @ (0x23E * 8 + 3)
#define                                 INT0PPS3_bit        _BIT_ACCESS(INT0PPS,3)
// INTCON0<INT1EDG>
extern volatile __bit                   INT1EDG             __at(0x26B1);	// @ (0x4D6 * 8 + 1)
#define                                 INT1EDG_bit         _BIT_ACCESS(INTCON0,1)
// PIE6<INT1IE>
extern volatile __bit                   INT1IE              __at(0x2520);	// @ (0x4A4 * 8 + 0)
#define                                 INT1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<INT1IF>
extern volatile __bit                   INT1IF              __at(0x25A0);	// @ (0x4B4 * 8 + 0)
#define                                 INT1IF_bit          _BIT_ACCESS(PIR6,0)
// IPR6<INT1IP>
extern volatile __bit                   INT1IP              __at(0x1B40);	// @ (0x368 * 8 + 0)
#define                                 INT1IP_bit          _BIT_ACCESS(IPR6,0)
// INT1PPS<INT1PPS0>
extern volatile __bit                   INT1PPS0            __at(0x11F8);	// @ (0x23F * 8 + 0)
#define                                 INT1PPS0_bit        _BIT_ACCESS(INT1PPS,0)
// INT1PPS<INT1PPS1>
extern volatile __bit                   INT1PPS1            __at(0x11F9);	// @ (0x23F * 8 + 1)
#define                                 INT1PPS1_bit        _BIT_ACCESS(INT1PPS,1)
// INT1PPS<INT1PPS2>
extern volatile __bit                   INT1PPS2            __at(0x11FA);	// @ (0x23F * 8 + 2)
#define                                 INT1PPS2_bit        _BIT_ACCESS(INT1PPS,2)
// INT1PPS<INT1PPS3>
extern volatile __bit                   INT1PPS3            __at(0x11FB);	// @ (0x23F * 8 + 3)
#define                                 INT1PPS3_bit        _BIT_ACCESS(INT1PPS,3)
// INT1PPS<INT1PPS4>
extern volatile __bit                   INT1PPS4            __at(0x11FC);	// @ (0x23F * 8 + 4)
#define                                 INT1PPS4_bit        _BIT_ACCESS(INT1PPS,4)
// INTCON0<INT2EDG>
extern volatile __bit                   INT2EDG             __at(0x26B2);	// @ (0x4D6 * 8 + 2)
#define                                 INT2EDG_bit         _BIT_ACCESS(INTCON0,2)
// PIE10<INT2IE>
extern volatile __bit                   INT2IE              __at(0x2540);	// @ (0x4A8 * 8 + 0)
#define                                 INT2IE_bit          _BIT_ACCESS(PIE10,0)
// PIR10<INT2IF>
extern volatile __bit                   INT2IF              __at(0x25C0);	// @ (0x4B8 * 8 + 0)
#define                                 INT2IF_bit          _BIT_ACCESS(PIR10,0)
// IPR10<INT2IP>
extern volatile __bit                   INT2IP              __at(0x1B60);	// @ (0x36C * 8 + 0)
#define                                 INT2IP_bit          _BIT_ACCESS(IPR10,0)
// INT2PPS<INT2PPS0>
extern volatile __bit                   INT2PPS0            __at(0x1200);	// @ (0x240 * 8 + 0)
#define                                 INT2PPS0_bit        _BIT_ACCESS(INT2PPS,0)
// INT2PPS<INT2PPS1>
extern volatile __bit                   INT2PPS1            __at(0x1201);	// @ (0x240 * 8 + 1)
#define                                 INT2PPS1_bit        _BIT_ACCESS(INT2PPS,1)
// INT2PPS<INT2PPS2>
extern volatile __bit                   INT2PPS2            __at(0x1202);	// @ (0x240 * 8 + 2)
#define                                 INT2PPS2_bit        _BIT_ACCESS(INT2PPS,2)
// INT2PPS<INT2PPS3>
extern volatile __bit                   INT2PPS3            __at(0x1203);	// @ (0x240 * 8 + 3)
#define                                 INT2PPS3_bit        _BIT_ACCESS(INT2PPS,3)
// INT2PPS<INT2PPS4>
extern volatile __bit                   INT2PPS4            __at(0x1204);	// @ (0x240 * 8 + 4)
#define                                 INT2PPS4_bit        _BIT_ACCESS(INT2PPS,4)
// INT2PPS<INT2PPS5>
extern volatile __bit                   INT2PPS5            __at(0x1205);	// @ (0x240 * 8 + 5)
#define                                 INT2PPS5_bit        _BIT_ACCESS(INT2PPS,5)
// HLVDCON0<INTH>
extern volatile __bit                   INTH                __at(0x251);	// @ (0x4A * 8 + 1)
#define                                 INTH_bit            _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<INTL>
extern volatile __bit                   INTL                __at(0x250);	// @ (0x4A * 8 + 0)
#define                                 INTL_bit            _BIT_ACCESS(HLVDCON0,0)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x2038);	// @ (0x407 * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x2039);	// @ (0x407 * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x203A);	// @ (0x407 * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x203B);	// @ (0x407 * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x203C);	// @ (0x407 * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x203D);	// @ (0x407 * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAF<IOCAF6>
extern volatile __bit                   IOCAF6              __at(0x203E);	// @ (0x407 * 8 + 6)
#define                                 IOCAF6_bit          _BIT_ACCESS(IOCAF,6)
// IOCAF<IOCAF7>
extern volatile __bit                   IOCAF7              __at(0x203F);	// @ (0x407 * 8 + 7)
#define                                 IOCAF7_bit          _BIT_ACCESS(IOCAF,7)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x2030);	// @ (0x406 * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x2031);	// @ (0x406 * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x2032);	// @ (0x406 * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x2033);	// @ (0x406 * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x2034);	// @ (0x406 * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x2035);	// @ (0x406 * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAN<IOCAN6>
extern volatile __bit                   IOCAN6              __at(0x2036);	// @ (0x406 * 8 + 6)
#define                                 IOCAN6_bit          _BIT_ACCESS(IOCAN,6)
// IOCAN<IOCAN7>
extern volatile __bit                   IOCAN7              __at(0x2037);	// @ (0x406 * 8 + 7)
#define                                 IOCAN7_bit          _BIT_ACCESS(IOCAN,7)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x2028);	// @ (0x405 * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x2029);	// @ (0x405 * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x202A);	// @ (0x405 * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x202B);	// @ (0x405 * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x202C);	// @ (0x405 * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x202D);	// @ (0x405 * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCAP<IOCAP6>
extern volatile __bit                   IOCAP6              __at(0x202E);	// @ (0x405 * 8 + 6)
#define                                 IOCAP6_bit          _BIT_ACCESS(IOCAP,6)
// IOCAP<IOCAP7>
extern volatile __bit                   IOCAP7              __at(0x202F);	// @ (0x405 * 8 + 7)
#define                                 IOCAP7_bit          _BIT_ACCESS(IOCAP,7)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0x2078);	// @ (0x40F * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0x2079);	// @ (0x40F * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0x207A);	// @ (0x40F * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0x207B);	// @ (0x40F * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0x207C);	// @ (0x40F * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0x207D);	// @ (0x40F * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0x207E);	// @ (0x40F * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0x207F);	// @ (0x40F * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0x2070);	// @ (0x40E * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0x2071);	// @ (0x40E * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0x2072);	// @ (0x40E * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0x2073);	// @ (0x40E * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0x2076);	// @ (0x40E * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0x2068);	// @ (0x40D * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0x2069);	// @ (0x40D * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0x206A);	// @ (0x40D * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0x206B);	// @ (0x40D * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0x206C);	// @ (0x40D * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0x206D);	// @ (0x40D * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0x206E);	// @ (0x40D * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0x206F);	// @ (0x40D * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x20BC);	// @ (0x417 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x20BD);	// @ (0x417 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x20BE);	// @ (0x417 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x20BF);	// @ (0x417 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x20B3);	// @ (0x416 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x20B6);	// @ (0x416 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x20B7);	// @ (0x416 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x20A8);	// @ (0x415 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x20A9);	// @ (0x415 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0x20AA);	// @ (0x415 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x20AB);	// @ (0x415 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x20AC);	// @ (0x415 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x20AD);	// @ (0x415 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x20AE);	// @ (0x415 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x20AF);	// @ (0x415 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0x213B);	// @ (0x427 * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0x2133);	// @ (0x426 * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0x212B);	// @ (0x425 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x24F7);	// @ (0x49E * 8 + 7)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,7)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x2577);	// @ (0x4AE * 8 + 7)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,7)
// IPR0<IOCIP>
extern volatile __bit                   IOCIP               __at(0x1B17);	// @ (0x362 * 8 + 7)
#define                                 IOCIP_bit           _BIT_ACCESS(IPR0,7)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x300);	// @ (0x60 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// ISRPR<ISRPR0>
extern volatile __bit                   ISRPR0              __at(0x5F8);	// @ (0xBF * 8 + 0)
#define                                 ISRPR0_bit          _BIT_ACCESS(ISRPR,0)
// ISRPR<ISRPR1>
extern volatile __bit                   ISRPR1              __at(0x5F9);	// @ (0xBF * 8 + 1)
#define                                 ISRPR1_bit          _BIT_ACCESS(ISRPR,1)
// ISRPR<ISRPR2>
extern volatile __bit                   ISRPR2              __at(0x5FA);	// @ (0xBF * 8 + 2)
#define                                 ISRPR2_bit          _BIT_ACCESS(ISRPR,2)
// IVTLOCK<IVTLOCKED>
extern volatile __bit                   IVTLOCKED           __at(0x22C8);	// @ (0x459 * 8 + 0)
#define                                 IVTLOCKED_bit       _BIT_ACCESS(IVTLOCK,0)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x1AD0);	// @ (0x35A * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x1AD1);	// @ (0x35A * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x1ADA);	// @ (0x35B * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x1ADB);	// @ (0x35B * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x1ADC);	// @ (0x35B * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x1ADD);	// @ (0x35B * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x1ADE);	// @ (0x35B * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x1ADF);	// @ (0x35B * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<LADR16>
extern volatile __bit                   LADR16              __at(0x1AE0);	// @ (0x35C * 8 + 0)
#define                                 LADR16_bit          _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<LADR17>
extern volatile __bit                   LADR17              __at(0x1AE1);	// @ (0x35C * 8 + 1)
#define                                 LADR17_bit          _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<LADR18>
extern volatile __bit                   LADR18              __at(0x1AE2);	// @ (0x35C * 8 + 2)
#define                                 LADR18_bit          _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<LADR19>
extern volatile __bit                   LADR19              __at(0x1AE3);	// @ (0x35C * 8 + 3)
#define                                 LADR19_bit          _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x1AD2);	// @ (0x35A * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<LADR20>
extern volatile __bit                   LADR20              __at(0x1AE4);	// @ (0x35C * 8 + 4)
#define                                 LADR20_bit          _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<LADR21>
extern volatile __bit                   LADR21              __at(0x1AE5);	// @ (0x35C * 8 + 5)
#define                                 LADR21_bit          _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x1AD3);	// @ (0x35A * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x1AD4);	// @ (0x35A * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x1AD5);	// @ (0x35A * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x1AD6);	// @ (0x35A * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x1AD7);	// @ (0x35A * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x1AD8);	// @ (0x35B * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x1AD9);	// @ (0x35B * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x25F0);	// @ (0x4BE * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x25F1);	// @ (0x4BE * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x25F2);	// @ (0x4BE * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0x25F3);	// @ (0x4BE * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x25F4);	// @ (0x4BE * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x25F5);	// @ (0x4BE * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0x25F6);	// @ (0x4BE * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0x25F7);	// @ (0x4BE * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0x25F8);	// @ (0x4BF * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0x25F9);	// @ (0x4BF * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0x25FA);	// @ (0x4BF * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0x25FB);	// @ (0x4BF * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0x25FC);	// @ (0x4BF * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0x25FD);	// @ (0x4BF * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0x25FE);	// @ (0x4BF * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0x25FF);	// @ (0x4BF * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x2600);	// @ (0x4C0 * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x2601);	// @ (0x4C0 * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x2602);	// @ (0x4C0 * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x2603);	// @ (0x4C0 * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x2604);	// @ (0x4C0 * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x2605);	// @ (0x4C0 * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0x2606);	// @ (0x4C0 * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0x2607);	// @ (0x4C0 * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATD<LATD0>
extern volatile __bit                   LATD0               __at(0x2608);	// @ (0x4C1 * 8 + 0)
#define                                 LATD0_bit           _BIT_ACCESS(LATD,0)
// LATD<LATD1>
extern volatile __bit                   LATD1               __at(0x2609);	// @ (0x4C1 * 8 + 1)
#define                                 LATD1_bit           _BIT_ACCESS(LATD,1)
// LATD<LATD2>
extern volatile __bit                   LATD2               __at(0x260A);	// @ (0x4C1 * 8 + 2)
#define                                 LATD2_bit           _BIT_ACCESS(LATD,2)
// LATD<LATD3>
extern volatile __bit                   LATD3               __at(0x260B);	// @ (0x4C1 * 8 + 3)
#define                                 LATD3_bit           _BIT_ACCESS(LATD,3)
// LATD<LATD4>
extern volatile __bit                   LATD4               __at(0x260C);	// @ (0x4C1 * 8 + 4)
#define                                 LATD4_bit           _BIT_ACCESS(LATD,4)
// LATD<LATD5>
extern volatile __bit                   LATD5               __at(0x260D);	// @ (0x4C1 * 8 + 5)
#define                                 LATD5_bit           _BIT_ACCESS(LATD,5)
// LATD<LATD6>
extern volatile __bit                   LATD6               __at(0x260E);	// @ (0x4C1 * 8 + 6)
#define                                 LATD6_bit           _BIT_ACCESS(LATD,6)
// LATD<LATD7>
extern volatile __bit                   LATD7               __at(0x260F);	// @ (0x4C1 * 8 + 7)
#define                                 LATD7_bit           _BIT_ACCESS(LATD,7)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x59C);	// @ (0xB3 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x594);	// @ (0xB2 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// ACTCON<LOCK>
extern volatile __bit                   LOCK                __at(0x563);	// @ (0xAC * 8 + 3)
#define                                 LOCK_bit            _BIT_ACCESS(ACTCON,3)
// ADLTHL<LTH0>
extern volatile __bit                   LTH0                __at(0x1EC8);	// @ (0x3D9 * 8 + 0)
#define                                 LTH0_bit            _BIT_ACCESS(ADLTHL,0)
// ADLTHL<LTH1>
extern volatile __bit                   LTH1                __at(0x1EC9);	// @ (0x3D9 * 8 + 1)
#define                                 LTH1_bit            _BIT_ACCESS(ADLTHL,1)
// ADLTHH<LTH10>
extern volatile __bit                   LTH10               __at(0x1ED2);	// @ (0x3DA * 8 + 2)
#define                                 LTH10_bit           _BIT_ACCESS(ADLTHH,2)
// ADLTHH<LTH11>
extern volatile __bit                   LTH11               __at(0x1ED3);	// @ (0x3DA * 8 + 3)
#define                                 LTH11_bit           _BIT_ACCESS(ADLTHH,3)
// ADLTHH<LTH12>
extern volatile __bit                   LTH12               __at(0x1ED4);	// @ (0x3DA * 8 + 4)
#define                                 LTH12_bit           _BIT_ACCESS(ADLTHH,4)
// ADLTHH<LTH13>
extern volatile __bit                   LTH13               __at(0x1ED5);	// @ (0x3DA * 8 + 5)
#define                                 LTH13_bit           _BIT_ACCESS(ADLTHH,5)
// ADLTHH<LTH14>
extern volatile __bit                   LTH14               __at(0x1ED6);	// @ (0x3DA * 8 + 6)
#define                                 LTH14_bit           _BIT_ACCESS(ADLTHH,6)
// ADLTHH<LTH15>
extern volatile __bit                   LTH15               __at(0x1ED7);	// @ (0x3DA * 8 + 7)
#define                                 LTH15_bit           _BIT_ACCESS(ADLTHH,7)
// ADLTHL<LTH2>
extern volatile __bit                   LTH2                __at(0x1ECA);	// @ (0x3D9 * 8 + 2)
#define                                 LTH2_bit            _BIT_ACCESS(ADLTHL,2)
// ADLTHL<LTH3>
extern volatile __bit                   LTH3                __at(0x1ECB);	// @ (0x3D9 * 8 + 3)
#define                                 LTH3_bit            _BIT_ACCESS(ADLTHL,3)
// ADLTHL<LTH4>
extern volatile __bit                   LTH4                __at(0x1ECC);	// @ (0x3D9 * 8 + 4)
#define                                 LTH4_bit            _BIT_ACCESS(ADLTHL,4)
// ADLTHL<LTH5>
extern volatile __bit                   LTH5                __at(0x1ECD);	// @ (0x3D9 * 8 + 5)
#define                                 LTH5_bit            _BIT_ACCESS(ADLTHL,5)
// ADLTHL<LTH6>
extern volatile __bit                   LTH6                __at(0x1ECE);	// @ (0x3D9 * 8 + 6)
#define                                 LTH6_bit            _BIT_ACCESS(ADLTHL,6)
// ADLTHL<LTH7>
extern volatile __bit                   LTH7                __at(0x1ECF);	// @ (0x3D9 * 8 + 7)
#define                                 LTH7_bit            _BIT_ACCESS(ADLTHL,7)
// ADLTHH<LTH8>
extern volatile __bit                   LTH8                __at(0x1ED0);	// @ (0x3DA * 8 + 0)
#define                                 LTH8_bit            _BIT_ACCESS(ADLTHH,0)
// ADLTHH<LTH9>
extern volatile __bit                   LTH9                __at(0x1ED1);	// @ (0x3DA * 8 + 1)
#define                                 LTH9_bit            _BIT_ACCESS(ADLTHH,1)
// ADSTAT<LTHR>
extern volatile __bit                   LTHR                __at(0x1FBD);	// @ (0x3F7 * 8 + 5)
#define                                 LTHR_bit            _BIT_ACCESS(ADSTAT,5)
// MAINPR<MAINPR0>
extern volatile __bit                   MAINPR0             __at(0x5F0);	// @ (0xBE * 8 + 0)
#define                                 MAINPR0_bit         _BIT_ACCESS(MAINPR,0)
// MAINPR<MAINPR1>
extern volatile __bit                   MAINPR1             __at(0x5F1);	// @ (0xBE * 8 + 1)
#define                                 MAINPR1_bit         _BIT_ACCESS(MAINPR,1)
// MAINPR<MAINPR2>
extern volatile __bit                   MAINPR2             __at(0x5F2);	// @ (0xBE * 8 + 2)
#define                                 MAINPR2_bit         _BIT_ACCESS(MAINPR,2)
// ADSTAT<MATH>
extern volatile __bit                   MATH                __at(0x1FBC);	// @ (0x3F7 * 8 + 4)
#define                                 MATH_bit            _BIT_ACCESS(ADSTAT,4)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x378);	// @ (0x6F * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x379);	// @ (0x6F * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// ADCON2<MD0>
extern volatile __bit                   MD0                 __at(0x1FA8);	// @ (0x3F5 * 8 + 0)
#define                                 MD0_bit             _BIT_ACCESS(ADCON2,0)
// ADCON2<MD1>
extern volatile __bit                   MD1                 __at(0x1FA9);	// @ (0x3F5 * 8 + 1)
#define                                 MD1_bit             _BIT_ACCESS(ADCON2,1)
// T0CON0<MD16>
extern volatile __bit                   MD16                __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 MD16_bit            _BIT_ACCESS(T0CON0,4)
// MD1CON0<MD1BIT>
extern volatile __bit                   MD1BIT              __at(0x350);	// @ (0x6A * 8 + 0)
#define                                 MD1BIT_bit          _BIT_ACCESS(MD1CON0,0)
// MD1CARH<MD1CH0>
extern volatile __bit                   MD1CH0              __at(0x370);	// @ (0x6E * 8 + 0)
#define                                 MD1CH0_bit          _BIT_ACCESS(MD1CARH,0)
// MD1CARH<MD1CH1>
extern volatile __bit                   MD1CH1              __at(0x371);	// @ (0x6E * 8 + 1)
#define                                 MD1CH1_bit          _BIT_ACCESS(MD1CARH,1)
// MD1CARH<MD1CH2>
extern volatile __bit                   MD1CH2              __at(0x372);	// @ (0x6E * 8 + 2)
#define                                 MD1CH2_bit          _BIT_ACCESS(MD1CARH,2)
// MD1CARH<MD1CH3>
extern volatile __bit                   MD1CH3              __at(0x373);	// @ (0x6E * 8 + 3)
#define                                 MD1CH3_bit          _BIT_ACCESS(MD1CARH,3)
// MD1CARH<MD1CH4>
extern volatile __bit                   MD1CH4              __at(0x374);	// @ (0x6E * 8 + 4)
#define                                 MD1CH4_bit          _BIT_ACCESS(MD1CARH,4)
// MD1CARH<MD1CH5>
extern volatile __bit                   MD1CH5              __at(0x375);	// @ (0x6E * 8 + 5)
#define                                 MD1CH5_bit          _BIT_ACCESS(MD1CARH,5)
// MD1CARH<MD1CH6>
extern volatile __bit                   MD1CH6              __at(0x376);	// @ (0x6E * 8 + 6)
#define                                 MD1CH6_bit          _BIT_ACCESS(MD1CARH,6)
// MD1CARH<MD1CH7>
extern volatile __bit                   MD1CH7              __at(0x377);	// @ (0x6E * 8 + 7)
#define                                 MD1CH7_bit          _BIT_ACCESS(MD1CARH,7)
// MD1CON1<MD1CHPOL>
extern volatile __bit                   MD1CHPOL            __at(0x35D);	// @ (0x6B * 8 + 5)
#define                                 MD1CHPOL_bit        _BIT_ACCESS(MD1CON1,5)
// MD1CON1<MD1CHSYNC>
extern volatile __bit                   MD1CHSYNC           __at(0x35C);	// @ (0x6B * 8 + 4)
#define                                 MD1CHSYNC_bit       _BIT_ACCESS(MD1CON1,4)
// MD1CARL<MD1CL0>
extern volatile __bit                   MD1CL0              __at(0x368);	// @ (0x6D * 8 + 0)
#define                                 MD1CL0_bit          _BIT_ACCESS(MD1CARL,0)
// MD1CARL<MD1CL1>
extern volatile __bit                   MD1CL1              __at(0x369);	// @ (0x6D * 8 + 1)
#define                                 MD1CL1_bit          _BIT_ACCESS(MD1CARL,1)
// MD1CARL<MD1CL2>
extern volatile __bit                   MD1CL2              __at(0x36A);	// @ (0x6D * 8 + 2)
#define                                 MD1CL2_bit          _BIT_ACCESS(MD1CARL,2)
// MD1CARL<MD1CL3>
extern volatile __bit                   MD1CL3              __at(0x36B);	// @ (0x6D * 8 + 3)
#define                                 MD1CL3_bit          _BIT_ACCESS(MD1CARL,3)
// MD1CARL<MD1CL4>
extern volatile __bit                   MD1CL4              __at(0x36C);	// @ (0x6D * 8 + 4)
#define                                 MD1CL4_bit          _BIT_ACCESS(MD1CARL,4)
// MD1CON1<MD1CLPOL>
extern volatile __bit                   MD1CLPOL            __at(0x359);	// @ (0x6B * 8 + 1)
#define                                 MD1CLPOL_bit        _BIT_ACCESS(MD1CON1,1)
// MD1CON1<MD1CLSYNC>
extern volatile __bit                   MD1CLSYNC           __at(0x358);	// @ (0x6B * 8 + 0)
#define                                 MD1CLSYNC_bit       _BIT_ACCESS(MD1CON1,0)
// MD1CON0<MD1EN>
extern volatile __bit                   MD1EN               __at(0x357);	// @ (0x6A * 8 + 7)
#define                                 MD1EN_bit           _BIT_ACCESS(MD1CON0,7)
// MD1SRC<MD1MS0>
extern volatile __bit                   MD1MS0              __at(0x360);	// @ (0x6C * 8 + 0)
#define                                 MD1MS0_bit          _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MD1MS1>
extern volatile __bit                   MD1MS1              __at(0x361);	// @ (0x6C * 8 + 1)
#define                                 MD1MS1_bit          _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MD1MS2>
extern volatile __bit                   MD1MS2              __at(0x362);	// @ (0x6C * 8 + 2)
#define                                 MD1MS2_bit          _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MD1MS3>
extern volatile __bit                   MD1MS3              __at(0x363);	// @ (0x6C * 8 + 3)
#define                                 MD1MS3_bit          _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MD1MS4>
extern volatile __bit                   MD1MS4              __at(0x364);	// @ (0x6C * 8 + 4)
#define                                 MD1MS4_bit          _BIT_ACCESS(MD1SRC,4)
// MD1SRC<MD1MS5>
extern volatile __bit                   MD1MS5              __at(0x365);	// @ (0x6C * 8 + 5)
#define                                 MD1MS5_bit          _BIT_ACCESS(MD1SRC,5)
// MD1CON0<MD1OPOL>
extern volatile __bit                   MD1OPOL             __at(0x354);	// @ (0x6A * 8 + 4)
#define                                 MD1OPOL_bit         _BIT_ACCESS(MD1CON0,4)
// MD1CON0<MD1OUT>
extern volatile __bit                   MD1OUT              __at(0x355);	// @ (0x6A * 8 + 5)
#define                                 MD1OUT_bit          _BIT_ACCESS(MD1CON0,5)
// ADCON2<MD2>
extern volatile __bit                   MD2                 __at(0x1FAA);	// @ (0x3F5 * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(ADCON2,2)
// MD1CARHPPS<MDCARHPPS0>
extern volatile __bit                   MDCARHPPS0          __at(0x12F8);	// @ (0x25F * 8 + 0)
#define                                 MDCARHPPS0_bit      _BIT_ACCESS(MD1CARHPPS,0)
// MD1CARHPPS<MDCARHPPS1>
extern volatile __bit                   MDCARHPPS1          __at(0x12F9);	// @ (0x25F * 8 + 1)
#define                                 MDCARHPPS1_bit      _BIT_ACCESS(MD1CARHPPS,1)
// MD1CARHPPS<MDCARHPPS2>
extern volatile __bit                   MDCARHPPS2          __at(0x12FA);	// @ (0x25F * 8 + 2)
#define                                 MDCARHPPS2_bit      _BIT_ACCESS(MD1CARHPPS,2)
// MD1CARHPPS<MDCARHPPS3>
extern volatile __bit                   MDCARHPPS3          __at(0x12FB);	// @ (0x25F * 8 + 3)
#define                                 MDCARHPPS3_bit      _BIT_ACCESS(MD1CARHPPS,3)
// MD1CARHPPS<MDCARHPPS4>
extern volatile __bit                   MDCARHPPS4          __at(0x12FC);	// @ (0x25F * 8 + 4)
#define                                 MDCARHPPS4_bit      _BIT_ACCESS(MD1CARHPPS,4)
// MD1CARLPPS<MDCARLPPS0>
extern volatile __bit                   MDCARLPPS0          __at(0x12F0);	// @ (0x25E * 8 + 0)
#define                                 MDCARLPPS0_bit      _BIT_ACCESS(MD1CARLPPS,0)
// MD1CARLPPS<MDCARLPPS1>
extern volatile __bit                   MDCARLPPS1          __at(0x12F1);	// @ (0x25E * 8 + 1)
#define                                 MDCARLPPS1_bit      _BIT_ACCESS(MD1CARLPPS,1)
// MD1CARLPPS<MDCARLPPS2>
extern volatile __bit                   MDCARLPPS2          __at(0x12F2);	// @ (0x25E * 8 + 2)
#define                                 MDCARLPPS2_bit      _BIT_ACCESS(MD1CARLPPS,2)
// MD1CARLPPS<MDCARLPPS3>
extern volatile __bit                   MDCARLPPS3          __at(0x12F3);	// @ (0x25E * 8 + 3)
#define                                 MDCARLPPS3_bit      _BIT_ACCESS(MD1CARLPPS,3)
// MD1CARLPPS<MDCARLPPS4>
extern volatile __bit                   MDCARLPPS4          __at(0x12F4);	// @ (0x25E * 8 + 4)
#define                                 MDCARLPPS4_bit      _BIT_ACCESS(MD1CARLPPS,4)
// I2C1CON0<MDR>
extern volatile __bit                   MDR                 __at(0x14A3);	// @ (0x294 * 8 + 3)
#define                                 MDR_bit             _BIT_ACCESS(I2C1CON0,3)
// MD1SRCPPS<MDSRCPPS0>
extern volatile __bit                   MDSRCPPS0           __at(0x1300);	// @ (0x260 * 8 + 0)
#define                                 MDSRCPPS0_bit       _BIT_ACCESS(MD1SRCPPS,0)
// MD1SRCPPS<MDSRCPPS1>
extern volatile __bit                   MDSRCPPS1           __at(0x1301);	// @ (0x260 * 8 + 1)
#define                                 MDSRCPPS1_bit       _BIT_ACCESS(MD1SRCPPS,1)
// MD1SRCPPS<MDSRCPPS2>
extern volatile __bit                   MDSRCPPS2           __at(0x1302);	// @ (0x260 * 8 + 2)
#define                                 MDSRCPPS2_bit       _BIT_ACCESS(MD1SRCPPS,2)
// MD1SRCPPS<MDSRCPPS3>
extern volatile __bit                   MDSRCPPS3           __at(0x1303);	// @ (0x260 * 8 + 3)
#define                                 MDSRCPPS3_bit       _BIT_ACCESS(MD1SRCPPS,3)
// MD1SRCPPS<MDSRCPPS4>
extern volatile __bit                   MDSRCPPS4           __at(0x1304);	// @ (0x260 * 8 + 4)
#define                                 MDSRCPPS4_bit       _BIT_ACCESS(MD1SRCPPS,4)
// PCON1<MEMV>
extern volatile __bit                   MEMV                __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 MEMV_bit            _BIT_ACCESS(PCON1,1)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x59D);	// @ (0xB3 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x595);	// @ (0xB2 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// I2C1STAT0<MMA>
extern volatile __bit                   MMA                 __at(0x14C5);	// @ (0x298 * 8 + 5)
#define                                 MMA_bit             _BIT_ACCESS(I2C1STAT0,5)
// PWMEN<MPWM1EN>
extern volatile __bit                   MPWM1EN             __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 MPWM1EN_bit         _BIT_ACCESS(PWMEN,0)
// PWMLOAD<MPWM1LD>
extern volatile __bit                   MPWM1LD             __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 MPWM1LD_bit         _BIT_ACCESS(PWMLOAD,0)
// PWMEN<MPWM2EN>
extern volatile __bit                   MPWM2EN             __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 MPWM2EN_bit         _BIT_ACCESS(PWMEN,1)
// PWMLOAD<MPWM2LD>
extern volatile __bit                   MPWM2LD             __at(0x24E1);	// @ (0x49C * 8 + 1)
#define                                 MPWM2LD_bit         _BIT_ACCESS(PWMLOAD,1)
// PWMEN<MPWM3EN>
extern volatile __bit                   MPWM3EN             __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 MPWM3EN_bit         _BIT_ACCESS(PWMEN,2)
// PWMLOAD<MPWM3LD>
extern volatile __bit                   MPWM3LD             __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 MPWM3LD_bit         _BIT_ACCESS(PWMLOAD,2)
// SCANCON0<MREG>
extern volatile __bit                   MREG                __at(0x1B02);	// @ (0x360 * 8 + 2)
#define                                 MREG_bit            _BIT_ACCESS(SCANCON0,2)
// MD1SRC<MS0>
extern volatile __bit                   MS0                 __at(0x360);	// @ (0x6C * 8 + 0)
#define                                 MS0_bit             _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MS1>
extern volatile __bit                   MS1                 __at(0x361);	// @ (0x6C * 8 + 1)
#define                                 MS1_bit             _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MS2>
extern volatile __bit                   MS2                 __at(0x362);	// @ (0x6C * 8 + 2)
#define                                 MS2_bit             _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MS3>
extern volatile __bit                   MS3                 __at(0x363);	// @ (0x6C * 8 + 3)
#define                                 MS3_bit             _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MS4>
extern volatile __bit                   MS4                 __at(0x364);	// @ (0x6C * 8 + 4)
#define                                 MS4_bit             _BIT_ACCESS(MD1SRC,4)
// MD1SRC<MS5>
extern volatile __bit                   MS5                 __at(0x365);	// @ (0x6C * 8 + 5)
#define                                 MS5_bit             _BIT_ACCESS(MD1SRC,5)
// I2C1ERR<NACK1IE>
extern volatile __bit                   NACK1IE             __at(0x14B8);	// @ (0x297 * 8 + 0)
#define                                 NACK1IE_bit         _BIT_ACCESS(I2C1ERR,0)
// I2C1ERR<NACK1IF>
extern volatile __bit                   NACK1IF             __at(0x14BC);	// @ (0x297 * 8 + 4)
#define                                 NACK1IF_bit         _BIT_ACCESS(I2C1ERR,4)
// I2C1ERR<NACKIE>
extern volatile __bit                   NACKIE              __at(0x14B8);	// @ (0x297 * 8 + 0)
#define                                 NACKIE_bit          _BIT_ACCESS(I2C1ERR,0)
// I2C1ERR<NACKIF>
extern volatile __bit                   NACKIF              __at(0x14BC);	// @ (0x297 * 8 + 4)
#define                                 NACKIF_bit          _BIT_ACCESS(I2C1ERR,4)
// NCO1ACCL<NCO1ACC0>
extern volatile __bit                   NCO1ACC0            __at(0x2200);	// @ (0x440 * 8 + 0)
#define                                 NCO1ACC0_bit        _BIT_ACCESS(NCO1ACCL,0)
// NCO1ACCL<NCO1ACC1>
extern volatile __bit                   NCO1ACC1            __at(0x2201);	// @ (0x440 * 8 + 1)
#define                                 NCO1ACC1_bit        _BIT_ACCESS(NCO1ACCL,1)
// NCO1ACCH<NCO1ACC10>
extern volatile __bit                   NCO1ACC10           __at(0x220A);	// @ (0x441 * 8 + 2)
#define                                 NCO1ACC10_bit       _BIT_ACCESS(NCO1ACCH,2)
// NCO1ACCH<NCO1ACC11>
extern volatile __bit                   NCO1ACC11           __at(0x220B);	// @ (0x441 * 8 + 3)
#define                                 NCO1ACC11_bit       _BIT_ACCESS(NCO1ACCH,3)
// NCO1ACCH<NCO1ACC12>
extern volatile __bit                   NCO1ACC12           __at(0x220C);	// @ (0x441 * 8 + 4)
#define                                 NCO1ACC12_bit       _BIT_ACCESS(NCO1ACCH,4)
// NCO1ACCH<NCO1ACC13>
extern volatile __bit                   NCO1ACC13           __at(0x220D);	// @ (0x441 * 8 + 5)
#define                                 NCO1ACC13_bit       _BIT_ACCESS(NCO1ACCH,5)
// NCO1ACCH<NCO1ACC14>
extern volatile __bit                   NCO1ACC14           __at(0x220E);	// @ (0x441 * 8 + 6)
#define                                 NCO1ACC14_bit       _BIT_ACCESS(NCO1ACCH,6)
// NCO1ACCH<NCO1ACC15>
extern volatile __bit                   NCO1ACC15           __at(0x220F);	// @ (0x441 * 8 + 7)
#define                                 NCO1ACC15_bit       _BIT_ACCESS(NCO1ACCH,7)
// NCO1ACCU<NCO1ACC16>
extern volatile __bit                   NCO1ACC16           __at(0x2210);	// @ (0x442 * 8 + 0)
#define                                 NCO1ACC16_bit       _BIT_ACCESS(NCO1ACCU,0)
// NCO1ACCU<NCO1ACC17>
extern volatile __bit                   NCO1ACC17           __at(0x2211);	// @ (0x442 * 8 + 1)
#define                                 NCO1ACC17_bit       _BIT_ACCESS(NCO1ACCU,1)
// NCO1ACCU<NCO1ACC18>
extern volatile __bit                   NCO1ACC18           __at(0x2212);	// @ (0x442 * 8 + 2)
#define                                 NCO1ACC18_bit       _BIT_ACCESS(NCO1ACCU,2)
// NCO1ACCU<NCO1ACC19>
extern volatile __bit                   NCO1ACC19           __at(0x2213);	// @ (0x442 * 8 + 3)
#define                                 NCO1ACC19_bit       _BIT_ACCESS(NCO1ACCU,3)
// NCO1ACCL<NCO1ACC2>
extern volatile __bit                   NCO1ACC2            __at(0x2202);	// @ (0x440 * 8 + 2)
#define                                 NCO1ACC2_bit        _BIT_ACCESS(NCO1ACCL,2)
// NCO1ACCL<NCO1ACC3>
extern volatile __bit                   NCO1ACC3            __at(0x2203);	// @ (0x440 * 8 + 3)
#define                                 NCO1ACC3_bit        _BIT_ACCESS(NCO1ACCL,3)
// NCO1ACCL<NCO1ACC4>
extern volatile __bit                   NCO1ACC4            __at(0x2204);	// @ (0x440 * 8 + 4)
#define                                 NCO1ACC4_bit        _BIT_ACCESS(NCO1ACCL,4)
// NCO1ACCL<NCO1ACC5>
extern volatile __bit                   NCO1ACC5            __at(0x2205);	// @ (0x440 * 8 + 5)
#define                                 NCO1ACC5_bit        _BIT_ACCESS(NCO1ACCL,5)
// NCO1ACCL<NCO1ACC6>
extern volatile __bit                   NCO1ACC6            __at(0x2206);	// @ (0x440 * 8 + 6)
#define                                 NCO1ACC6_bit        _BIT_ACCESS(NCO1ACCL,6)
// NCO1ACCL<NCO1ACC7>
extern volatile __bit                   NCO1ACC7            __at(0x2207);	// @ (0x440 * 8 + 7)
#define                                 NCO1ACC7_bit        _BIT_ACCESS(NCO1ACCL,7)
// NCO1ACCH<NCO1ACC8>
extern volatile __bit                   NCO1ACC8            __at(0x2208);	// @ (0x441 * 8 + 0)
#define                                 NCO1ACC8_bit        _BIT_ACCESS(NCO1ACCH,0)
// NCO1ACCH<NCO1ACC9>
extern volatile __bit                   NCO1ACC9            __at(0x2209);	// @ (0x441 * 8 + 1)
#define                                 NCO1ACC9_bit        _BIT_ACCESS(NCO1ACCH,1)
// NCO1CLK<NCO1CKS0>
extern volatile __bit                   NCO1CKS0            __at(0x2238);	// @ (0x447 * 8 + 0)
#define                                 NCO1CKS0_bit        _BIT_ACCESS(NCO1CLK,0)
// NCO1CLK<NCO1CKS1>
extern volatile __bit                   NCO1CKS1            __at(0x2239);	// @ (0x447 * 8 + 1)
#define                                 NCO1CKS1_bit        _BIT_ACCESS(NCO1CLK,1)
// NCO1CLK<NCO1CKS2>
extern volatile __bit                   NCO1CKS2            __at(0x223A);	// @ (0x447 * 8 + 2)
#define                                 NCO1CKS2_bit        _BIT_ACCESS(NCO1CLK,2)
// NCO1CLK<NCO1CKS3>
extern volatile __bit                   NCO1CKS3            __at(0x223B);	// @ (0x447 * 8 + 3)
#define                                 NCO1CKS3_bit        _BIT_ACCESS(NCO1CLK,3)
// NCO1CLK<NCO1CKS4>
extern volatile __bit                   NCO1CKS4            __at(0x223C);	// @ (0x447 * 8 + 4)
#define                                 NCO1CKS4_bit        _BIT_ACCESS(NCO1CLK,4)
// NCO1CON<NCO1EN>
extern volatile __bit                   NCO1EN              __at(0x2237);	// @ (0x446 * 8 + 7)
#define                                 NCO1EN_bit          _BIT_ACCESS(NCO1CON,7)
// PIE6<NCO1IE>
extern volatile __bit                   NCO1IE              __at(0x2523);	// @ (0x4A4 * 8 + 3)
#define                                 NCO1IE_bit          _BIT_ACCESS(PIE6,3)
// PIR6<NCO1IF>
extern volatile __bit                   NCO1IF              __at(0x25A3);	// @ (0x4B4 * 8 + 3)
#define                                 NCO1IF_bit          _BIT_ACCESS(PIR6,3)
// NCO1INCL<NCO1INC0>
extern volatile __bit                   NCO1INC0            __at(0x2218);	// @ (0x443 * 8 + 0)
#define                                 NCO1INC0_bit        _BIT_ACCESS(NCO1INCL,0)
// NCO1INCL<NCO1INC1>
extern volatile __bit                   NCO1INC1            __at(0x2219);	// @ (0x443 * 8 + 1)
#define                                 NCO1INC1_bit        _BIT_ACCESS(NCO1INCL,1)
// NCO1INCH<NCO1INC10>
extern volatile __bit                   NCO1INC10           __at(0x2222);	// @ (0x444 * 8 + 2)
#define                                 NCO1INC10_bit       _BIT_ACCESS(NCO1INCH,2)
// NCO1INCH<NCO1INC11>
extern volatile __bit                   NCO1INC11           __at(0x2223);	// @ (0x444 * 8 + 3)
#define                                 NCO1INC11_bit       _BIT_ACCESS(NCO1INCH,3)
// NCO1INCH<NCO1INC12>
extern volatile __bit                   NCO1INC12           __at(0x2224);	// @ (0x444 * 8 + 4)
#define                                 NCO1INC12_bit       _BIT_ACCESS(NCO1INCH,4)
// NCO1INCH<NCO1INC13>
extern volatile __bit                   NCO1INC13           __at(0x2225);	// @ (0x444 * 8 + 5)
#define                                 NCO1INC13_bit       _BIT_ACCESS(NCO1INCH,5)
// NCO1INCH<NCO1INC14>
extern volatile __bit                   NCO1INC14           __at(0x2226);	// @ (0x444 * 8 + 6)
#define                                 NCO1INC14_bit       _BIT_ACCESS(NCO1INCH,6)
// NCO1INCH<NCO1INC15>
extern volatile __bit                   NCO1INC15           __at(0x2227);	// @ (0x444 * 8 + 7)
#define                                 NCO1INC15_bit       _BIT_ACCESS(NCO1INCH,7)
// NCO1INCU<NCO1INC16>
extern volatile __bit                   NCO1INC16           __at(0x2228);	// @ (0x445 * 8 + 0)
#define                                 NCO1INC16_bit       _BIT_ACCESS(NCO1INCU,0)
// NCO1INCU<NCO1INC17>
extern volatile __bit                   NCO1INC17           __at(0x2229);	// @ (0x445 * 8 + 1)
#define                                 NCO1INC17_bit       _BIT_ACCESS(NCO1INCU,1)
// NCO1INCU<NCO1INC18>
extern volatile __bit                   NCO1INC18           __at(0x222A);	// @ (0x445 * 8 + 2)
#define                                 NCO1INC18_bit       _BIT_ACCESS(NCO1INCU,2)
// NCO1INCU<NCO1INC19>
extern volatile __bit                   NCO1INC19           __at(0x222B);	// @ (0x445 * 8 + 3)
#define                                 NCO1INC19_bit       _BIT_ACCESS(NCO1INCU,3)
// NCO1INCL<NCO1INC2>
extern volatile __bit                   NCO1INC2            __at(0x221A);	// @ (0x443 * 8 + 2)
#define                                 NCO1INC2_bit        _BIT_ACCESS(NCO1INCL,2)
// NCO1INCL<NCO1INC3>
extern volatile __bit                   NCO1INC3            __at(0x221B);	// @ (0x443 * 8 + 3)
#define                                 NCO1INC3_bit        _BIT_ACCESS(NCO1INCL,3)
// NCO1INCL<NCO1INC4>
extern volatile __bit                   NCO1INC4            __at(0x221C);	// @ (0x443 * 8 + 4)
#define                                 NCO1INC4_bit        _BIT_ACCESS(NCO1INCL,4)
// NCO1INCL<NCO1INC5>
extern volatile __bit                   NCO1INC5            __at(0x221D);	// @ (0x443 * 8 + 5)
#define                                 NCO1INC5_bit        _BIT_ACCESS(NCO1INCL,5)
// NCO1INCL<NCO1INC6>
extern volatile __bit                   NCO1INC6            __at(0x221E);	// @ (0x443 * 8 + 6)
#define                                 NCO1INC6_bit        _BIT_ACCESS(NCO1INCL,6)
// NCO1INCL<NCO1INC7>
extern volatile __bit                   NCO1INC7            __at(0x221F);	// @ (0x443 * 8 + 7)
#define                                 NCO1INC7_bit        _BIT_ACCESS(NCO1INCL,7)
// NCO1INCH<NCO1INC8>
extern volatile __bit                   NCO1INC8            __at(0x2220);	// @ (0x444 * 8 + 0)
#define                                 NCO1INC8_bit        _BIT_ACCESS(NCO1INCH,0)
// NCO1INCH<NCO1INC9>
extern volatile __bit                   NCO1INC9            __at(0x2221);	// @ (0x444 * 8 + 1)
#define                                 NCO1INC9_bit        _BIT_ACCESS(NCO1INCH,1)
// IPR6<NCO1IP>
extern volatile __bit                   NCO1IP              __at(0x1B43);	// @ (0x368 * 8 + 3)
#define                                 NCO1IP_bit          _BIT_ACCESS(IPR6,3)
// PMD4<NCO1MD>
extern volatile __bit                   NCO1MD              __at(0x320);	// @ (0x64 * 8 + 0)
#define                                 NCO1MD_bit          _BIT_ACCESS(PMD4,0)
// NCO1CON<NCO1OUT>
extern volatile __bit                   NCO1OUT             __at(0x2235);	// @ (0x446 * 8 + 5)
#define                                 NCO1OUT_bit         _BIT_ACCESS(NCO1CON,5)
// NCO1CON<NCO1PFM>
extern volatile __bit                   NCO1PFM             __at(0x2230);	// @ (0x446 * 8 + 0)
#define                                 NCO1PFM_bit         _BIT_ACCESS(NCO1CON,0)
// NCO1CON<NCO1POL>
extern volatile __bit                   NCO1POL             __at(0x2234);	// @ (0x446 * 8 + 4)
#define                                 NCO1POL_bit         _BIT_ACCESS(NCO1CON,4)
// NCO1CLK<NCO1PWS0>
extern volatile __bit                   NCO1PWS0            __at(0x223D);	// @ (0x447 * 8 + 5)
#define                                 NCO1PWS0_bit        _BIT_ACCESS(NCO1CLK,5)
// NCO1CLK<NCO1PWS1>
extern volatile __bit                   NCO1PWS1            __at(0x223E);	// @ (0x447 * 8 + 6)
#define                                 NCO1PWS1_bit        _BIT_ACCESS(NCO1CLK,6)
// NCO1CLK<NCO1PWS2>
extern volatile __bit                   NCO1PWS2            __at(0x223F);	// @ (0x447 * 8 + 7)
#define                                 NCO1PWS2_bit        _BIT_ACCESS(NCO1CLK,7)
// NCO2ACCL<NCO2ACC0>
extern volatile __bit                   NCO2ACC0            __at(0x2240);	// @ (0x448 * 8 + 0)
#define                                 NCO2ACC0_bit        _BIT_ACCESS(NCO2ACCL,0)
// NCO2ACCL<NCO2ACC1>
extern volatile __bit                   NCO2ACC1            __at(0x2241);	// @ (0x448 * 8 + 1)
#define                                 NCO2ACC1_bit        _BIT_ACCESS(NCO2ACCL,1)
// NCO2ACCH<NCO2ACC10>
extern volatile __bit                   NCO2ACC10           __at(0x224A);	// @ (0x449 * 8 + 2)
#define                                 NCO2ACC10_bit       _BIT_ACCESS(NCO2ACCH,2)
// NCO2ACCH<NCO2ACC11>
extern volatile __bit                   NCO2ACC11           __at(0x224B);	// @ (0x449 * 8 + 3)
#define                                 NCO2ACC11_bit       _BIT_ACCESS(NCO2ACCH,3)
// NCO2ACCH<NCO2ACC12>
extern volatile __bit                   NCO2ACC12           __at(0x224C);	// @ (0x449 * 8 + 4)
#define                                 NCO2ACC12_bit       _BIT_ACCESS(NCO2ACCH,4)
// NCO2ACCH<NCO2ACC13>
extern volatile __bit                   NCO2ACC13           __at(0x224D);	// @ (0x449 * 8 + 5)
#define                                 NCO2ACC13_bit       _BIT_ACCESS(NCO2ACCH,5)
// NCO2ACCH<NCO2ACC14>
extern volatile __bit                   NCO2ACC14           __at(0x224E);	// @ (0x449 * 8 + 6)
#define                                 NCO2ACC14_bit       _BIT_ACCESS(NCO2ACCH,6)
// NCO2ACCH<NCO2ACC15>
extern volatile __bit                   NCO2ACC15           __at(0x224F);	// @ (0x449 * 8 + 7)
#define                                 NCO2ACC15_bit       _BIT_ACCESS(NCO2ACCH,7)
// NCO2ACCU<NCO2ACC16>
extern volatile __bit                   NCO2ACC16           __at(0x2250);	// @ (0x44A * 8 + 0)
#define                                 NCO2ACC16_bit       _BIT_ACCESS(NCO2ACCU,0)
// NCO2ACCU<NCO2ACC17>
extern volatile __bit                   NCO2ACC17           __at(0x2251);	// @ (0x44A * 8 + 1)
#define                                 NCO2ACC17_bit       _BIT_ACCESS(NCO2ACCU,1)
// NCO2ACCU<NCO2ACC18>
extern volatile __bit                   NCO2ACC18           __at(0x2252);	// @ (0x44A * 8 + 2)
#define                                 NCO2ACC18_bit       _BIT_ACCESS(NCO2ACCU,2)
// NCO2ACCU<NCO2ACC19>
extern volatile __bit                   NCO2ACC19           __at(0x2253);	// @ (0x44A * 8 + 3)
#define                                 NCO2ACC19_bit       _BIT_ACCESS(NCO2ACCU,3)
// NCO2ACCL<NCO2ACC2>
extern volatile __bit                   NCO2ACC2            __at(0x2242);	// @ (0x448 * 8 + 2)
#define                                 NCO2ACC2_bit        _BIT_ACCESS(NCO2ACCL,2)
// NCO2ACCL<NCO2ACC3>
extern volatile __bit                   NCO2ACC3            __at(0x2243);	// @ (0x448 * 8 + 3)
#define                                 NCO2ACC3_bit        _BIT_ACCESS(NCO2ACCL,3)
// NCO2ACCL<NCO2ACC4>
extern volatile __bit                   NCO2ACC4            __at(0x2244);	// @ (0x448 * 8 + 4)
#define                                 NCO2ACC4_bit        _BIT_ACCESS(NCO2ACCL,4)
// NCO2ACCL<NCO2ACC5>
extern volatile __bit                   NCO2ACC5            __at(0x2245);	// @ (0x448 * 8 + 5)
#define                                 NCO2ACC5_bit        _BIT_ACCESS(NCO2ACCL,5)
// NCO2ACCL<NCO2ACC6>
extern volatile __bit                   NCO2ACC6            __at(0x2246);	// @ (0x448 * 8 + 6)
#define                                 NCO2ACC6_bit        _BIT_ACCESS(NCO2ACCL,6)
// NCO2ACCL<NCO2ACC7>
extern volatile __bit                   NCO2ACC7            __at(0x2247);	// @ (0x448 * 8 + 7)
#define                                 NCO2ACC7_bit        _BIT_ACCESS(NCO2ACCL,7)
// NCO2ACCH<NCO2ACC8>
extern volatile __bit                   NCO2ACC8            __at(0x2248);	// @ (0x449 * 8 + 0)
#define                                 NCO2ACC8_bit        _BIT_ACCESS(NCO2ACCH,0)
// NCO2ACCH<NCO2ACC9>
extern volatile __bit                   NCO2ACC9            __at(0x2249);	// @ (0x449 * 8 + 1)
#define                                 NCO2ACC9_bit        _BIT_ACCESS(NCO2ACCH,1)
// NCO2CLK<NCO2CKS0>
extern volatile __bit                   NCO2CKS0            __at(0x2278);	// @ (0x44F * 8 + 0)
#define                                 NCO2CKS0_bit        _BIT_ACCESS(NCO2CLK,0)
// NCO2CLK<NCO2CKS1>
extern volatile __bit                   NCO2CKS1            __at(0x2279);	// @ (0x44F * 8 + 1)
#define                                 NCO2CKS1_bit        _BIT_ACCESS(NCO2CLK,1)
// NCO2CLK<NCO2CKS2>
extern volatile __bit                   NCO2CKS2            __at(0x227A);	// @ (0x44F * 8 + 2)
#define                                 NCO2CKS2_bit        _BIT_ACCESS(NCO2CLK,2)
// NCO2CLK<NCO2CKS3>
extern volatile __bit                   NCO2CKS3            __at(0x227B);	// @ (0x44F * 8 + 3)
#define                                 NCO2CKS3_bit        _BIT_ACCESS(NCO2CLK,3)
// NCO2CLK<NCO2CKS4>
extern volatile __bit                   NCO2CKS4            __at(0x227C);	// @ (0x44F * 8 + 4)
#define                                 NCO2CKS4_bit        _BIT_ACCESS(NCO2CLK,4)
// NCO2CON<NCO2EN>
extern volatile __bit                   NCO2EN              __at(0x2277);	// @ (0x44E * 8 + 7)
#define                                 NCO2EN_bit          _BIT_ACCESS(NCO2CON,7)
// PIE10<NCO2IE>
extern volatile __bit                   NCO2IE              __at(0x2543);	// @ (0x4A8 * 8 + 3)
#define                                 NCO2IE_bit          _BIT_ACCESS(PIE10,3)
// PIR10<NCO2IF>
extern volatile __bit                   NCO2IF              __at(0x25C3);	// @ (0x4B8 * 8 + 3)
#define                                 NCO2IF_bit          _BIT_ACCESS(PIR10,3)
// NCO2INCL<NCO2INC0>
extern volatile __bit                   NCO2INC0            __at(0x2258);	// @ (0x44B * 8 + 0)
#define                                 NCO2INC0_bit        _BIT_ACCESS(NCO2INCL,0)
// NCO2INCL<NCO2INC1>
extern volatile __bit                   NCO2INC1            __at(0x2259);	// @ (0x44B * 8 + 1)
#define                                 NCO2INC1_bit        _BIT_ACCESS(NCO2INCL,1)
// NCO2INCH<NCO2INC10>
extern volatile __bit                   NCO2INC10           __at(0x2262);	// @ (0x44C * 8 + 2)
#define                                 NCO2INC10_bit       _BIT_ACCESS(NCO2INCH,2)
// NCO2INCH<NCO2INC11>
extern volatile __bit                   NCO2INC11           __at(0x2263);	// @ (0x44C * 8 + 3)
#define                                 NCO2INC11_bit       _BIT_ACCESS(NCO2INCH,3)
// NCO2INCH<NCO2INC12>
extern volatile __bit                   NCO2INC12           __at(0x2264);	// @ (0x44C * 8 + 4)
#define                                 NCO2INC12_bit       _BIT_ACCESS(NCO2INCH,4)
// NCO2INCH<NCO2INC13>
extern volatile __bit                   NCO2INC13           __at(0x2265);	// @ (0x44C * 8 + 5)
#define                                 NCO2INC13_bit       _BIT_ACCESS(NCO2INCH,5)
// NCO2INCH<NCO2INC14>
extern volatile __bit                   NCO2INC14           __at(0x2266);	// @ (0x44C * 8 + 6)
#define                                 NCO2INC14_bit       _BIT_ACCESS(NCO2INCH,6)
// NCO2INCH<NCO2INC15>
extern volatile __bit                   NCO2INC15           __at(0x2267);	// @ (0x44C * 8 + 7)
#define                                 NCO2INC15_bit       _BIT_ACCESS(NCO2INCH,7)
// NCO2INCU<NCO2INC16>
extern volatile __bit                   NCO2INC16           __at(0x2268);	// @ (0x44D * 8 + 0)
#define                                 NCO2INC16_bit       _BIT_ACCESS(NCO2INCU,0)
// NCO2INCU<NCO2INC17>
extern volatile __bit                   NCO2INC17           __at(0x2269);	// @ (0x44D * 8 + 1)
#define                                 NCO2INC17_bit       _BIT_ACCESS(NCO2INCU,1)
// NCO2INCU<NCO2INC18>
extern volatile __bit                   NCO2INC18           __at(0x226A);	// @ (0x44D * 8 + 2)
#define                                 NCO2INC18_bit       _BIT_ACCESS(NCO2INCU,2)
// NCO2INCU<NCO2INC19>
extern volatile __bit                   NCO2INC19           __at(0x226B);	// @ (0x44D * 8 + 3)
#define                                 NCO2INC19_bit       _BIT_ACCESS(NCO2INCU,3)
// NCO2INCL<NCO2INC2>
extern volatile __bit                   NCO2INC2            __at(0x225A);	// @ (0x44B * 8 + 2)
#define                                 NCO2INC2_bit        _BIT_ACCESS(NCO2INCL,2)
// NCO2INCL<NCO2INC3>
extern volatile __bit                   NCO2INC3            __at(0x225B);	// @ (0x44B * 8 + 3)
#define                                 NCO2INC3_bit        _BIT_ACCESS(NCO2INCL,3)
// NCO2INCL<NCO2INC4>
extern volatile __bit                   NCO2INC4            __at(0x225C);	// @ (0x44B * 8 + 4)
#define                                 NCO2INC4_bit        _BIT_ACCESS(NCO2INCL,4)
// NCO2INCL<NCO2INC5>
extern volatile __bit                   NCO2INC5            __at(0x225D);	// @ (0x44B * 8 + 5)
#define                                 NCO2INC5_bit        _BIT_ACCESS(NCO2INCL,5)
// NCO2INCL<NCO2INC6>
extern volatile __bit                   NCO2INC6            __at(0x225E);	// @ (0x44B * 8 + 6)
#define                                 NCO2INC6_bit        _BIT_ACCESS(NCO2INCL,6)
// NCO2INCL<NCO2INC7>
extern volatile __bit                   NCO2INC7            __at(0x225F);	// @ (0x44B * 8 + 7)
#define                                 NCO2INC7_bit        _BIT_ACCESS(NCO2INCL,7)
// NCO2INCH<NCO2INC8>
extern volatile __bit                   NCO2INC8            __at(0x2260);	// @ (0x44C * 8 + 0)
#define                                 NCO2INC8_bit        _BIT_ACCESS(NCO2INCH,0)
// NCO2INCH<NCO2INC9>
extern volatile __bit                   NCO2INC9            __at(0x2261);	// @ (0x44C * 8 + 1)
#define                                 NCO2INC9_bit        _BIT_ACCESS(NCO2INCH,1)
// IPR10<NCO2IP>
extern volatile __bit                   NCO2IP              __at(0x1B63);	// @ (0x36C * 8 + 3)
#define                                 NCO2IP_bit          _BIT_ACCESS(IPR10,3)
// PMD4<NCO2MD>
extern volatile __bit                   NCO2MD              __at(0x321);	// @ (0x64 * 8 + 1)
#define                                 NCO2MD_bit          _BIT_ACCESS(PMD4,1)
// NCO2CON<NCO2OUT>
extern volatile __bit                   NCO2OUT             __at(0x2275);	// @ (0x44E * 8 + 5)
#define                                 NCO2OUT_bit         _BIT_ACCESS(NCO2CON,5)
// NCO2CON<NCO2PFM>
extern volatile __bit                   NCO2PFM             __at(0x2270);	// @ (0x44E * 8 + 0)
#define                                 NCO2PFM_bit         _BIT_ACCESS(NCO2CON,0)
// NCO2CON<NCO2POL>
extern volatile __bit                   NCO2POL             __at(0x2274);	// @ (0x44E * 8 + 4)
#define                                 NCO2POL_bit         _BIT_ACCESS(NCO2CON,4)
// NCO2CLK<NCO2PWS0>
extern volatile __bit                   NCO2PWS0            __at(0x227D);	// @ (0x44F * 8 + 5)
#define                                 NCO2PWS0_bit        _BIT_ACCESS(NCO2CLK,5)
// NCO2CLK<NCO2PWS1>
extern volatile __bit                   NCO2PWS1            __at(0x227E);	// @ (0x44F * 8 + 6)
#define                                 NCO2PWS1_bit        _BIT_ACCESS(NCO2CLK,6)
// NCO2CLK<NCO2PWS2>
extern volatile __bit                   NCO2PWS2            __at(0x227F);	// @ (0x44F * 8 + 7)
#define                                 NCO2PWS2_bit        _BIT_ACCESS(NCO2CLK,7)
// NCO3ACCL<NCO3ACC0>
extern volatile __bit                   NCO3ACC0            __at(0x2280);	// @ (0x450 * 8 + 0)
#define                                 NCO3ACC0_bit        _BIT_ACCESS(NCO3ACCL,0)
// NCO3ACCL<NCO3ACC1>
extern volatile __bit                   NCO3ACC1            __at(0x2281);	// @ (0x450 * 8 + 1)
#define                                 NCO3ACC1_bit        _BIT_ACCESS(NCO3ACCL,1)
// NCO3ACCH<NCO3ACC10>
extern volatile __bit                   NCO3ACC10           __at(0x228A);	// @ (0x451 * 8 + 2)
#define                                 NCO3ACC10_bit       _BIT_ACCESS(NCO3ACCH,2)
// NCO3ACCH<NCO3ACC11>
extern volatile __bit                   NCO3ACC11           __at(0x228B);	// @ (0x451 * 8 + 3)
#define                                 NCO3ACC11_bit       _BIT_ACCESS(NCO3ACCH,3)
// NCO3ACCH<NCO3ACC12>
extern volatile __bit                   NCO3ACC12           __at(0x228C);	// @ (0x451 * 8 + 4)
#define                                 NCO3ACC12_bit       _BIT_ACCESS(NCO3ACCH,4)
// NCO3ACCH<NCO3ACC13>
extern volatile __bit                   NCO3ACC13           __at(0x228D);	// @ (0x451 * 8 + 5)
#define                                 NCO3ACC13_bit       _BIT_ACCESS(NCO3ACCH,5)
// NCO3ACCH<NCO3ACC14>
extern volatile __bit                   NCO3ACC14           __at(0x228E);	// @ (0x451 * 8 + 6)
#define                                 NCO3ACC14_bit       _BIT_ACCESS(NCO3ACCH,6)
// NCO3ACCH<NCO3ACC15>
extern volatile __bit                   NCO3ACC15           __at(0x228F);	// @ (0x451 * 8 + 7)
#define                                 NCO3ACC15_bit       _BIT_ACCESS(NCO3ACCH,7)
// NCO3ACCU<NCO3ACC16>
extern volatile __bit                   NCO3ACC16           __at(0x2290);	// @ (0x452 * 8 + 0)
#define                                 NCO3ACC16_bit       _BIT_ACCESS(NCO3ACCU,0)
// NCO3ACCU<NCO3ACC17>
extern volatile __bit                   NCO3ACC17           __at(0x2291);	// @ (0x452 * 8 + 1)
#define                                 NCO3ACC17_bit       _BIT_ACCESS(NCO3ACCU,1)
// NCO3ACCU<NCO3ACC18>
extern volatile __bit                   NCO3ACC18           __at(0x2292);	// @ (0x452 * 8 + 2)
#define                                 NCO3ACC18_bit       _BIT_ACCESS(NCO3ACCU,2)
// NCO3ACCU<NCO3ACC19>
extern volatile __bit                   NCO3ACC19           __at(0x2293);	// @ (0x452 * 8 + 3)
#define                                 NCO3ACC19_bit       _BIT_ACCESS(NCO3ACCU,3)
// NCO3ACCL<NCO3ACC2>
extern volatile __bit                   NCO3ACC2            __at(0x2282);	// @ (0x450 * 8 + 2)
#define                                 NCO3ACC2_bit        _BIT_ACCESS(NCO3ACCL,2)
// NCO3ACCL<NCO3ACC3>
extern volatile __bit                   NCO3ACC3            __at(0x2283);	// @ (0x450 * 8 + 3)
#define                                 NCO3ACC3_bit        _BIT_ACCESS(NCO3ACCL,3)
// NCO3ACCL<NCO3ACC4>
extern volatile __bit                   NCO3ACC4            __at(0x2284);	// @ (0x450 * 8 + 4)
#define                                 NCO3ACC4_bit        _BIT_ACCESS(NCO3ACCL,4)
// NCO3ACCL<NCO3ACC5>
extern volatile __bit                   NCO3ACC5            __at(0x2285);	// @ (0x450 * 8 + 5)
#define                                 NCO3ACC5_bit        _BIT_ACCESS(NCO3ACCL,5)
// NCO3ACCL<NCO3ACC6>
extern volatile __bit                   NCO3ACC6            __at(0x2286);	// @ (0x450 * 8 + 6)
#define                                 NCO3ACC6_bit        _BIT_ACCESS(NCO3ACCL,6)
// NCO3ACCL<NCO3ACC7>
extern volatile __bit                   NCO3ACC7            __at(0x2287);	// @ (0x450 * 8 + 7)
#define                                 NCO3ACC7_bit        _BIT_ACCESS(NCO3ACCL,7)
// NCO3ACCH<NCO3ACC8>
extern volatile __bit                   NCO3ACC8            __at(0x2288);	// @ (0x451 * 8 + 0)
#define                                 NCO3ACC8_bit        _BIT_ACCESS(NCO3ACCH,0)
// NCO3ACCH<NCO3ACC9>
extern volatile __bit                   NCO3ACC9            __at(0x2289);	// @ (0x451 * 8 + 1)
#define                                 NCO3ACC9_bit        _BIT_ACCESS(NCO3ACCH,1)
// NCO3CLK<NCO3CKS0>
extern volatile __bit                   NCO3CKS0            __at(0x22B8);	// @ (0x457 * 8 + 0)
#define                                 NCO3CKS0_bit        _BIT_ACCESS(NCO3CLK,0)
// NCO3CLK<NCO3CKS1>
extern volatile __bit                   NCO3CKS1            __at(0x22B9);	// @ (0x457 * 8 + 1)
#define                                 NCO3CKS1_bit        _BIT_ACCESS(NCO3CLK,1)
// NCO3CLK<NCO3CKS2>
extern volatile __bit                   NCO3CKS2            __at(0x22BA);	// @ (0x457 * 8 + 2)
#define                                 NCO3CKS2_bit        _BIT_ACCESS(NCO3CLK,2)
// NCO3CLK<NCO3CKS3>
extern volatile __bit                   NCO3CKS3            __at(0x22BB);	// @ (0x457 * 8 + 3)
#define                                 NCO3CKS3_bit        _BIT_ACCESS(NCO3CLK,3)
// NCO3CLK<NCO3CKS4>
extern volatile __bit                   NCO3CKS4            __at(0x22BC);	// @ (0x457 * 8 + 4)
#define                                 NCO3CKS4_bit        _BIT_ACCESS(NCO3CLK,4)
// NCO3CON<NCO3EN>
extern volatile __bit                   NCO3EN              __at(0x22B7);	// @ (0x456 * 8 + 7)
#define                                 NCO3EN_bit          _BIT_ACCESS(NCO3CON,7)
// PIE14<NCO3IE>
extern volatile __bit                   NCO3IE              __at(0x2563);	// @ (0x4AC * 8 + 3)
#define                                 NCO3IE_bit          _BIT_ACCESS(PIE14,3)
// PIR14<NCO3IF>
extern volatile __bit                   NCO3IF              __at(0x25E3);	// @ (0x4BC * 8 + 3)
#define                                 NCO3IF_bit          _BIT_ACCESS(PIR14,3)
// NCO3INCL<NCO3INC0>
extern volatile __bit                   NCO3INC0            __at(0x2298);	// @ (0x453 * 8 + 0)
#define                                 NCO3INC0_bit        _BIT_ACCESS(NCO3INCL,0)
// NCO3INCL<NCO3INC1>
extern volatile __bit                   NCO3INC1            __at(0x2299);	// @ (0x453 * 8 + 1)
#define                                 NCO3INC1_bit        _BIT_ACCESS(NCO3INCL,1)
// NCO3INCH<NCO3INC10>
extern volatile __bit                   NCO3INC10           __at(0x22A2);	// @ (0x454 * 8 + 2)
#define                                 NCO3INC10_bit       _BIT_ACCESS(NCO3INCH,2)
// NCO3INCH<NCO3INC11>
extern volatile __bit                   NCO3INC11           __at(0x22A3);	// @ (0x454 * 8 + 3)
#define                                 NCO3INC11_bit       _BIT_ACCESS(NCO3INCH,3)
// NCO3INCH<NCO3INC12>
extern volatile __bit                   NCO3INC12           __at(0x22A4);	// @ (0x454 * 8 + 4)
#define                                 NCO3INC12_bit       _BIT_ACCESS(NCO3INCH,4)
// NCO3INCH<NCO3INC13>
extern volatile __bit                   NCO3INC13           __at(0x22A5);	// @ (0x454 * 8 + 5)
#define                                 NCO3INC13_bit       _BIT_ACCESS(NCO3INCH,5)
// NCO3INCH<NCO3INC14>
extern volatile __bit                   NCO3INC14           __at(0x22A6);	// @ (0x454 * 8 + 6)
#define                                 NCO3INC14_bit       _BIT_ACCESS(NCO3INCH,6)
// NCO3INCH<NCO3INC15>
extern volatile __bit                   NCO3INC15           __at(0x22A7);	// @ (0x454 * 8 + 7)
#define                                 NCO3INC15_bit       _BIT_ACCESS(NCO3INCH,7)
// NCO3INCU<NCO3INC16>
extern volatile __bit                   NCO3INC16           __at(0x22A8);	// @ (0x455 * 8 + 0)
#define                                 NCO3INC16_bit       _BIT_ACCESS(NCO3INCU,0)
// NCO3INCU<NCO3INC17>
extern volatile __bit                   NCO3INC17           __at(0x22A9);	// @ (0x455 * 8 + 1)
#define                                 NCO3INC17_bit       _BIT_ACCESS(NCO3INCU,1)
// NCO3INCU<NCO3INC18>
extern volatile __bit                   NCO3INC18           __at(0x22AA);	// @ (0x455 * 8 + 2)
#define                                 NCO3INC18_bit       _BIT_ACCESS(NCO3INCU,2)
// NCO3INCU<NCO3INC19>
extern volatile __bit                   NCO3INC19           __at(0x22AB);	// @ (0x455 * 8 + 3)
#define                                 NCO3INC19_bit       _BIT_ACCESS(NCO3INCU,3)
// NCO3INCL<NCO3INC2>
extern volatile __bit                   NCO3INC2            __at(0x229A);	// @ (0x453 * 8 + 2)
#define                                 NCO3INC2_bit        _BIT_ACCESS(NCO3INCL,2)
// NCO3INCL<NCO3INC3>
extern volatile __bit                   NCO3INC3            __at(0x229B);	// @ (0x453 * 8 + 3)
#define                                 NCO3INC3_bit        _BIT_ACCESS(NCO3INCL,3)
// NCO3INCL<NCO3INC4>
extern volatile __bit                   NCO3INC4            __at(0x229C);	// @ (0x453 * 8 + 4)
#define                                 NCO3INC4_bit        _BIT_ACCESS(NCO3INCL,4)
// NCO3INCL<NCO3INC5>
extern volatile __bit                   NCO3INC5            __at(0x229D);	// @ (0x453 * 8 + 5)
#define                                 NCO3INC5_bit        _BIT_ACCESS(NCO3INCL,5)
// NCO3INCL<NCO3INC6>
extern volatile __bit                   NCO3INC6            __at(0x229E);	// @ (0x453 * 8 + 6)
#define                                 NCO3INC6_bit        _BIT_ACCESS(NCO3INCL,6)
// NCO3INCL<NCO3INC7>
extern volatile __bit                   NCO3INC7            __at(0x229F);	// @ (0x453 * 8 + 7)
#define                                 NCO3INC7_bit        _BIT_ACCESS(NCO3INCL,7)
// NCO3INCH<NCO3INC8>
extern volatile __bit                   NCO3INC8            __at(0x22A0);	// @ (0x454 * 8 + 0)
#define                                 NCO3INC8_bit        _BIT_ACCESS(NCO3INCH,0)
// NCO3INCH<NCO3INC9>
extern volatile __bit                   NCO3INC9            __at(0x22A1);	// @ (0x454 * 8 + 1)
#define                                 NCO3INC9_bit        _BIT_ACCESS(NCO3INCH,1)
// IPR14<NCO3IP>
extern volatile __bit                   NCO3IP              __at(0x1B83);	// @ (0x370 * 8 + 3)
#define                                 NCO3IP_bit          _BIT_ACCESS(IPR14,3)
// PMD4<NCO3MD>
extern volatile __bit                   NCO3MD              __at(0x322);	// @ (0x64 * 8 + 2)
#define                                 NCO3MD_bit          _BIT_ACCESS(PMD4,2)
// NCO3CON<NCO3OUT>
extern volatile __bit                   NCO3OUT             __at(0x22B5);	// @ (0x456 * 8 + 5)
#define                                 NCO3OUT_bit         _BIT_ACCESS(NCO3CON,5)
// NCO3CON<NCO3PFM>
extern volatile __bit                   NCO3PFM             __at(0x22B0);	// @ (0x456 * 8 + 0)
#define                                 NCO3PFM_bit         _BIT_ACCESS(NCO3CON,0)
// NCO3CON<NCO3POL>
extern volatile __bit                   NCO3POL             __at(0x22B4);	// @ (0x456 * 8 + 4)
#define                                 NCO3POL_bit         _BIT_ACCESS(NCO3CON,4)
// NCO3CLK<NCO3PWS0>
extern volatile __bit                   NCO3PWS0            __at(0x22BD);	// @ (0x457 * 8 + 5)
#define                                 NCO3PWS0_bit        _BIT_ACCESS(NCO3CLK,5)
// NCO3CLK<NCO3PWS1>
extern volatile __bit                   NCO3PWS1            __at(0x22BE);	// @ (0x457 * 8 + 6)
#define                                 NCO3PWS1_bit        _BIT_ACCESS(NCO3CLK,6)
// NCO3CLK<NCO3PWS2>
extern volatile __bit                   NCO3PWS2            __at(0x22BF);	// @ (0x457 * 8 + 7)
#define                                 NCO3PWS2_bit        _BIT_ACCESS(NCO3CLK,7)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x568);	// @ (0xAD * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x569);	// @ (0xAD * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x56A);	// @ (0xAD * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x56B);	// @ (0xAD * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x56C);	// @ (0xAD * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x56D);	// @ (0xAD * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x56E);	// @ (0xAD * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x57B);	// @ (0xAF * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// I2C1STAT0<NOT_A>
extern volatile __bit                   NOT_A               __at(0x14C3);	// @ (0x298 * 8 + 3)
#define                                 NOT_A_bit           _BIT_ACCESS(I2C1STAT0,3)
// I2C1STAT0<NOT_ADDRESS>
extern volatile __bit                   NOT_ADDRESS         __at(0x14C3);	// @ (0x298 * 8 + 3)
#define                                 NOT_ADDRESS_bit     _BIT_ACCESS(I2C1STAT0,3)
// PCON0<NOT_BOR>
extern volatile __bit                   NOT_BOR             __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 NOT_BOR_bit         _BIT_ACCESS(PCON0,0)
// PCON1<NOT_MEMV>
extern volatile __bit                   NOT_MEMV            __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 NOT_MEMV_bit        _BIT_ACCESS(PCON1,1)
// PCON0<NOT_POR>
extern volatile __bit                   NOT_POR             __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 NOT_POR_bit         _BIT_ACCESS(PCON0,1)
// PCON1<NOT_RCM>
extern volatile __bit                   NOT_RCM             __at(0x2788);	// @ (0x4F1 * 8 + 0)
#define                                 NOT_RCM_bit         _BIT_ACCESS(PCON1,0)
// PCON0<NOT_RI>
extern volatile __bit                   NOT_RI              __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 NOT_RI_bit          _BIT_ACCESS(PCON0,2)
// PCON0<NOT_RMCLR>
extern volatile __bit                   NOT_RMCLR           __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 NOT_RMCLR_bit       _BIT_ACCESS(PCON0,3)
// PCON1<NOT_RVREG>
extern volatile __bit                   NOT_RVREG           __at(0x278A);	// @ (0x4F1 * 8 + 2)
#define                                 NOT_RVREG_bit       _BIT_ACCESS(PCON1,2)
// PCON0<NOT_RWDT>
extern volatile __bit                   NOT_RWDT            __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 NOT_RWDT_bit        _BIT_ACCESS(PCON0,4)
// T1GCON<NOT_T1DONE>
extern volatile __bit                   NOT_T1DONE          __at(0x18FB);	// @ (0x31F * 8 + 3)
#define                                 NOT_T1DONE_bit      _BIT_ACCESS(T1GCON,3)
// T1CON<NOT_T1SYNC>
extern volatile __bit                   NOT_T1SYNC          __at(0x18F2);	// @ (0x31E * 8 + 2)
#define                                 NOT_T1SYNC_bit      _BIT_ACCESS(T1CON,2)
// T3GCON<NOT_T3DONE>
extern volatile __bit                   NOT_T3DONE          __at(0x195B);	// @ (0x32B * 8 + 3)
#define                                 NOT_T3DONE_bit      _BIT_ACCESS(T3GCON,3)
// T3CON<NOT_T3SYNC>
extern volatile __bit                   NOT_T3SYNC          __at(0x1952);	// @ (0x32A * 8 + 2)
#define                                 NOT_T3SYNC_bit      _BIT_ACCESS(T3CON,2)
// T5GCON<NOT_T5DONE>
extern volatile __bit                   NOT_T5DONE          __at(0x19BB);	// @ (0x337 * 8 + 3)
#define                                 NOT_T5DONE_bit      _BIT_ACCESS(T5GCON,3)
// T5CON<NOT_T5SYNC>
extern volatile __bit                   NOT_T5SYNC          __at(0x19B2);	// @ (0x336 * 8 + 2)
#define                                 NOT_T5SYNC_bit      _BIT_ACCESS(T5CON,2)
// I2C1STAT0<NOT_W>
extern volatile __bit                   NOT_W               __at(0x14C4);	// @ (0x298 * 8 + 4)
#define                                 NOT_W_bit           _BIT_ACCESS(I2C1STAT0,4)
// PCON0<NOT_WDTWV>
extern volatile __bit                   NOT_WDTWV           __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 NOT_WDTWV_bit       _BIT_ACCESS(PCON0,5)
// I2C1STAT0<NOT_WRITE>
extern volatile __bit                   NOT_WRITE           __at(0x14C4);	// @ (0x298 * 8 + 4)
#define                                 NOT_WRITE_bit       _BIT_ACCESS(I2C1STAT0,4)
// ADREF<NREF0>
extern volatile __bit                   NREF0               __at(0x1FC4);	// @ (0x3F8 * 8 + 4)
#define                                 NREF0_bit           _BIT_ACCESS(ADREF,4)
// DAC1CON<NSS0>
extern volatile __bit                   NSS0                __at(0x3F8);	// @ (0x7F * 8 + 0)
#define                                 NSS0_bit            _BIT_ACCESS(DAC1CON,0)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x218);	// @ (0x43 * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x219);	// @ (0x43 * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0x222);	// @ (0x44 * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0x223);	// @ (0x44 * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0x224);	// @ (0x44 * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0x225);	// @ (0x44 * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0x226);	// @ (0x44 * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRH<NVMADR15>
extern volatile __bit                   NVMADR15            __at(0x227);	// @ (0x44 * 8 + 7)
#define                                 NVMADR15_bit        _BIT_ACCESS(NVMADRH,7)
// NVMADRU<NVMADR16>
extern volatile __bit                   NVMADR16            __at(0x228);	// @ (0x45 * 8 + 0)
#define                                 NVMADR16_bit        _BIT_ACCESS(NVMADRU,0)
// NVMADRU<NVMADR17>
extern volatile __bit                   NVMADR17            __at(0x229);	// @ (0x45 * 8 + 1)
#define                                 NVMADR17_bit        _BIT_ACCESS(NVMADRU,1)
// NVMADRU<NVMADR18>
extern volatile __bit                   NVMADR18            __at(0x22A);	// @ (0x45 * 8 + 2)
#define                                 NVMADR18_bit        _BIT_ACCESS(NVMADRU,2)
// NVMADRU<NVMADR19>
extern volatile __bit                   NVMADR19            __at(0x22B);	// @ (0x45 * 8 + 3)
#define                                 NVMADR19_bit        _BIT_ACCESS(NVMADRU,3)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x21A);	// @ (0x43 * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRU<NVMADR20>
extern volatile __bit                   NVMADR20            __at(0x22C);	// @ (0x45 * 8 + 4)
#define                                 NVMADR20_bit        _BIT_ACCESS(NVMADRU,4)
// NVMADRU<NVMADR21>
extern volatile __bit                   NVMADR21            __at(0x22D);	// @ (0x45 * 8 + 5)
#define                                 NVMADR21_bit        _BIT_ACCESS(NVMADRU,5)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x21B);	// @ (0x43 * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x21C);	// @ (0x43 * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x21D);	// @ (0x43 * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x21E);	// @ (0x43 * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x21F);	// @ (0x43 * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x220);	// @ (0x44 * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x221);	// @ (0x44 * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x230);	// @ (0x46 * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x231);	// @ (0x46 * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0x23A);	// @ (0x47 * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0x23B);	// @ (0x47 * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0x23C);	// @ (0x47 * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0x23D);	// @ (0x47 * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATH<NVMDAT14>
extern volatile __bit                   NVMDAT14            __at(0x23E);	// @ (0x47 * 8 + 6)
#define                                 NVMDAT14_bit        _BIT_ACCESS(NVMDATH,6)
// NVMDATH<NVMDAT15>
extern volatile __bit                   NVMDAT15            __at(0x23F);	// @ (0x47 * 8 + 7)
#define                                 NVMDAT15_bit        _BIT_ACCESS(NVMDATH,7)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x232);	// @ (0x46 * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x233);	// @ (0x46 * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x234);	// @ (0x46 * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x235);	// @ (0x46 * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x236);	// @ (0x46 * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x237);	// @ (0x46 * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0x238);	// @ (0x47 * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0x239);	// @ (0x47 * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// NVMCON0<NVMGO>
extern volatile __bit                   NVMGO               __at(0x200);	// @ (0x40 * 8 + 0)
#define                                 NVMGO_bit           _BIT_ACCESS(NVMCON0,0)
// PIE15<NVMIE>
extern volatile __bit                   NVMIE               __at(0x2568);	// @ (0x4AD * 8 + 0)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE15,0)
// PIR15<NVMIF>
extern volatile __bit                   NVMIF               __at(0x25E8);	// @ (0x4BD * 8 + 0)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR15,0)
// IPR15<NVMIP>
extern volatile __bit                   NVMIP               __at(0x1B88);	// @ (0x371 * 8 + 0)
#define                                 NVMIP_bit           _BIT_ACCESS(IPR15,0)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0x2010);	// @ (0x402 * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0x2011);	// @ (0x402 * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0x2012);	// @ (0x402 * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0x2013);	// @ (0x402 * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0x2014);	// @ (0x402 * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0x2015);	// @ (0x402 * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0x2016);	// @ (0x402 * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0x2017);	// @ (0x402 * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0x2050);	// @ (0x40A * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0x2051);	// @ (0x40A * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0x2052);	// @ (0x40A * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0x2053);	// @ (0x40A * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0x2054);	// @ (0x40A * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0x2055);	// @ (0x40A * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0x2056);	// @ (0x40A * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0x2057);	// @ (0x40A * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0x2090);	// @ (0x412 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0x2091);	// @ (0x412 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0x2092);	// @ (0x412 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0x2093);	// @ (0x412 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0x2094);	// @ (0x412 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0x2095);	// @ (0x412 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0x2096);	// @ (0x412 * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0x2097);	// @ (0x412 * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// CLCnCON<OE>
extern volatile __bit                   OE                  __at(0x6B6);	// @ (0xD6 * 8 + 6)
#define                                 OE_bit              _BIT_ACCESS(CLCnCON,6)
// DAC1CON<OE0>
extern volatile __bit                   OE0                 __at(0x3FC);	// @ (0x7F * 8 + 4)
#define                                 OE0_bit             _BIT_ACCESS(DAC1CON,4)
// DAC1CON<OE1>
extern volatile __bit                   OE1                 __at(0x3FD);	// @ (0x7F * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON,5)
// MD1CON0<OPOL>
extern volatile __bit                   OPOL                __at(0x354);	// @ (0x6A * 8 + 4)
#define                                 OPOL_bit            _BIT_ACCESS(MD1CON0,4)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x57C);	// @ (0xAF * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// ACTCON<ORS>
extern volatile __bit                   ORS                 __at(0x561);	// @ (0xAC * 8 + 1)
#define                                 ORS_bit             _BIT_ACCESS(ACTCON,1)
// PIE0<OSFIE>
extern volatile __bit                   OSFIE               __at(0x24F2);	// @ (0x49E * 8 + 2)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE0,2)
// PIR0<OSFIF>
extern volatile __bit                   OSFIF               __at(0x2572);	// @ (0x4AE * 8 + 2)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR0,2)
// IPR0<OSFIP>
extern volatile __bit                   OSFIP               __at(0x1B12);	// @ (0x362 * 8 + 2)
#define                                 OSFIP_bit           _BIT_ACCESS(IPR0,2)
// U1P1H<P1H>
extern volatile __bit                   P1H                 __at(0x1530);	// @ (0x2A6 * 8 + 0)
#define                                 P1H_bit             _BIT_ACCESS(U1P1H,0)
// U1P2H<P2H>
extern volatile __bit                   P2H                 __at(0x1540);	// @ (0x2A8 * 8 + 0)
#define                                 P2H_bit             _BIT_ACCESS(U1P2H,0)
// U1P3H<P3H>
extern volatile __bit                   P3H                 __at(0x1550);	// @ (0x2AA * 8 + 0)
#define                                 P3H_bit             _BIT_ACCESS(U1P3H,0)
// I2C1PIE<PC1IE>
extern volatile __bit                   PC1IE               __at(0x14DA);	// @ (0x29B * 8 + 2)
#define                                 PC1IE_bit           _BIT_ACCESS(I2C1PIE,2)
// I2C1PIR<PC1IF>
extern volatile __bit                   PC1IF               __at(0x14D2);	// @ (0x29A * 8 + 2)
#define                                 PC1IF_bit           _BIT_ACCESS(I2C1PIR,2)
// I2C1PIE<PCIE>
extern volatile __bit                   PCIE                __at(0x14DA);	// @ (0x29B * 8 + 2)
#define                                 PCIE_bit            _BIT_ACCESS(I2C1PIE,2)
// I2C1PIR<PCIF>
extern volatile __bit                   PCIF                __at(0x14D2);	// @ (0x29A * 8 + 2)
#define                                 PCIF_bit            _BIT_ACCESS(I2C1PIR,2)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x1AC0);	// @ (0x358 * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x1AC1);	// @ (0x358 * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x1AC2);	// @ (0x358 * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x1AC3);	// @ (0x358 * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCEN<PLLEN>
extern volatile __bit                   PLLEN               __at(0x598);	// @ (0xB3 * 8 + 0)
#define                                 PLLEN_bit           _BIT_ACCESS(OSCEN,0)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x590);	// @ (0xB2 * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// VREGCON<PMSYS0>
extern volatile __bit                   PMSYS0              __at(0x244);	// @ (0x48 * 8 + 4)
#define                                 PMSYS0_bit          _BIT_ACCESS(VREGCON,4)
// VREGCON<PMSYS1>
extern volatile __bit                   PMSYS1              __at(0x245);	// @ (0x48 * 8 + 5)
#define                                 PMSYS1_bit          _BIT_ACCESS(VREGCON,5)
// PCON0<POR>
extern volatile __bit                   POR                 __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 POR_bit             _BIT_ACCESS(PCON0,1)
// INT0PPS<PORT>
extern volatile __bit                   PORT                __at(0x11F3);	// @ (0x23E * 8 + 3)
#define                                 PORT_bit            _BIT_ACCESS(INT0PPS,3)
// ADCON1<PPOL>
extern volatile __bit                   PPOL                __at(0x1FA7);	// @ (0x3F4 * 8 + 7)
#define                                 PPOL_bit            _BIT_ACCESS(ADCON1,7)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x1000);	// @ (0x200 * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// ADPREL<PRE0>
extern volatile __bit                   PRE0                __at(0x1F88);	// @ (0x3F1 * 8 + 0)
#define                                 PRE0_bit            _BIT_ACCESS(ADPREL,0)
// ADPREL<PRE1>
extern volatile __bit                   PRE1                __at(0x1F89);	// @ (0x3F1 * 8 + 1)
#define                                 PRE1_bit            _BIT_ACCESS(ADPREL,1)
// ADPREH<PRE10>
extern volatile __bit                   PRE10               __at(0x1F92);	// @ (0x3F2 * 8 + 2)
#define                                 PRE10_bit           _BIT_ACCESS(ADPREH,2)
// ADPREH<PRE11>
extern volatile __bit                   PRE11               __at(0x1F93);	// @ (0x3F2 * 8 + 3)
#define                                 PRE11_bit           _BIT_ACCESS(ADPREH,3)
// ADPREH<PRE12>
extern volatile __bit                   PRE12               __at(0x1F94);	// @ (0x3F2 * 8 + 4)
#define                                 PRE12_bit           _BIT_ACCESS(ADPREH,4)
// ADPREL<PRE2>
extern volatile __bit                   PRE2                __at(0x1F8A);	// @ (0x3F1 * 8 + 2)
#define                                 PRE2_bit            _BIT_ACCESS(ADPREL,2)
// ADPREL<PRE3>
extern volatile __bit                   PRE3                __at(0x1F8B);	// @ (0x3F1 * 8 + 3)
#define                                 PRE3_bit            _BIT_ACCESS(ADPREL,3)
// ADPREL<PRE4>
extern volatile __bit                   PRE4                __at(0x1F8C);	// @ (0x3F1 * 8 + 4)
#define                                 PRE4_bit            _BIT_ACCESS(ADPREL,4)
// ADPREL<PRE5>
extern volatile __bit                   PRE5                __at(0x1F8D);	// @ (0x3F1 * 8 + 5)
#define                                 PRE5_bit            _BIT_ACCESS(ADPREL,5)
// ADPREL<PRE6>
extern volatile __bit                   PRE6                __at(0x1F8E);	// @ (0x3F1 * 8 + 6)
#define                                 PRE6_bit            _BIT_ACCESS(ADPREL,6)
// ADPREL<PRE7>
extern volatile __bit                   PRE7                __at(0x1F8F);	// @ (0x3F1 * 8 + 7)
#define                                 PRE7_bit            _BIT_ACCESS(ADPREL,7)
// ADPREH<PRE8>
extern volatile __bit                   PRE8                __at(0x1F90);	// @ (0x3F2 * 8 + 0)
#define                                 PRE8_bit            _BIT_ACCESS(ADPREH,0)
// ADPREH<PRE9>
extern volatile __bit                   PRE9                __at(0x1F91);	// @ (0x3F2 * 8 + 1)
#define                                 PRE9_bit            _BIT_ACCESS(ADPREH,1)
// ADREF<PREF0>
extern volatile __bit                   PREF0               __at(0x1FC0);	// @ (0x3F8 * 8 + 0)
#define                                 PREF0_bit           _BIT_ACCESS(ADREF,0)
// ADREF<PREF1>
extern volatile __bit                   PREF1               __at(0x1FC1);	// @ (0x3F8 * 8 + 1)
#define                                 PREF1_bit           _BIT_ACCESS(ADREF,1)
// ADPREVL<PREV0>
extern volatile __bit                   PREV0               __at(0x1F40);	// @ (0x3E8 * 8 + 0)
#define                                 PREV0_bit           _BIT_ACCESS(ADPREVL,0)
// ADPREVL<PREV1>
extern volatile __bit                   PREV1               __at(0x1F41);	// @ (0x3E8 * 8 + 1)
#define                                 PREV1_bit           _BIT_ACCESS(ADPREVL,1)
// ADPREVH<PREV10>
extern volatile __bit                   PREV10              __at(0x1F4A);	// @ (0x3E9 * 8 + 2)
#define                                 PREV10_bit          _BIT_ACCESS(ADPREVH,2)
// ADPREVH<PREV11>
extern volatile __bit                   PREV11              __at(0x1F4B);	// @ (0x3E9 * 8 + 3)
#define                                 PREV11_bit          _BIT_ACCESS(ADPREVH,3)
// ADPREVH<PREV12>
extern volatile __bit                   PREV12              __at(0x1F4C);	// @ (0x3E9 * 8 + 4)
#define                                 PREV12_bit          _BIT_ACCESS(ADPREVH,4)
// ADPREVH<PREV13>
extern volatile __bit                   PREV13              __at(0x1F4D);	// @ (0x3E9 * 8 + 5)
#define                                 PREV13_bit          _BIT_ACCESS(ADPREVH,5)
// ADPREVH<PREV14>
extern volatile __bit                   PREV14              __at(0x1F4E);	// @ (0x3E9 * 8 + 6)
#define                                 PREV14_bit          _BIT_ACCESS(ADPREVH,6)
// ADPREVH<PREV15>
extern volatile __bit                   PREV15              __at(0x1F4F);	// @ (0x3E9 * 8 + 7)
#define                                 PREV15_bit          _BIT_ACCESS(ADPREVH,7)
// ADPREVL<PREV2>
extern volatile __bit                   PREV2               __at(0x1F42);	// @ (0x3E8 * 8 + 2)
#define                                 PREV2_bit           _BIT_ACCESS(ADPREVL,2)
// ADPREVL<PREV3>
extern volatile __bit                   PREV3               __at(0x1F43);	// @ (0x3E8 * 8 + 3)
#define                                 PREV3_bit           _BIT_ACCESS(ADPREVL,3)
// ADPREVL<PREV4>
extern volatile __bit                   PREV4               __at(0x1F44);	// @ (0x3E8 * 8 + 4)
#define                                 PREV4_bit           _BIT_ACCESS(ADPREVL,4)
// ADPREVL<PREV5>
extern volatile __bit                   PREV5               __at(0x1F45);	// @ (0x3E8 * 8 + 5)
#define                                 PREV5_bit           _BIT_ACCESS(ADPREVL,5)
// ADPREVL<PREV6>
extern volatile __bit                   PREV6               __at(0x1F46);	// @ (0x3E8 * 8 + 6)
#define                                 PREV6_bit           _BIT_ACCESS(ADPREVL,6)
// ADPREVL<PREV7>
extern volatile __bit                   PREV7               __at(0x1F47);	// @ (0x3E8 * 8 + 7)
#define                                 PREV7_bit           _BIT_ACCESS(ADPREVL,7)
// ADPREVH<PREV8>
extern volatile __bit                   PREV8               __at(0x1F48);	// @ (0x3E9 * 8 + 0)
#define                                 PREV8_bit           _BIT_ACCESS(ADPREVH,0)
// ADPREVH<PREV9>
extern volatile __bit                   PREV9               __at(0x1F49);	// @ (0x3E9 * 8 + 1)
#define                                 PREV9_bit           _BIT_ACCESS(ADPREVH,1)
// PRLOCK<PRLOCKED>
extern volatile __bit                   PRLOCKED            __at(0x5A0);	// @ (0xB4 * 8 + 0)
#define                                 PRLOCKED_bit        _BIT_ACCESS(PRLOCK,0)
// WDTCON0<PS0>
extern volatile __bit                   PS0                 __at(0x3C1);	// @ (0x78 * 8 + 1)
#define                                 PS0_bit             _BIT_ACCESS(WDTCON0,1)
// WDTCON0<PS1>
extern volatile __bit                   PS1                 __at(0x3C2);	// @ (0x78 * 8 + 2)
#define                                 PS1_bit             _BIT_ACCESS(WDTCON0,2)
// WDTCON0<PS2>
extern volatile __bit                   PS2                 __at(0x3C3);	// @ (0x78 * 8 + 3)
#define                                 PS2_bit             _BIT_ACCESS(WDTCON0,3)
// WDTCON0<PS3>
extern volatile __bit                   PS3                 __at(0x3C4);	// @ (0x78 * 8 + 4)
#define                                 PS3_bit             _BIT_ACCESS(WDTCON0,4)
// WDTCON0<PS4>
extern volatile __bit                   PS4                 __at(0x3C5);	// @ (0x78 * 8 + 5)
#define                                 PS4_bit             _BIT_ACCESS(WDTCON0,5)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x3D0);	// @ (0x7A * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x3D1);	// @ (0x7A * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x3DA);	// @ (0x7B * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x3DB);	// @ (0x7B * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x3DC);	// @ (0x7B * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x3DD);	// @ (0x7B * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x3DE);	// @ (0x7B * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x3DF);	// @ (0x7B * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x3E0);	// @ (0x7C * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x3E1);	// @ (0x7C * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x3D2);	// @ (0x7A * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x3D3);	// @ (0x7A * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x3D4);	// @ (0x7A * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x3D5);	// @ (0x7A * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x3D6);	// @ (0x7A * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x3D7);	// @ (0x7A * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x3D8);	// @ (0x7B * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x3D9);	// @ (0x7B * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// ADCON2<PSIS>
extern volatile __bit                   PSIS                __at(0x1FAF);	// @ (0x3F5 * 8 + 7)
#define                                 PSIS_bit            _BIT_ACCESS(ADCON2,7)
// DAC1CON<PSS0>
extern volatile __bit                   PSS0                __at(0x3FA);	// @ (0x7F * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON,2)
// DAC1CON<PSS1>
extern volatile __bit                   PSS1                __at(0x3FB);	// @ (0x7F * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON,3)
// PWM1ERSPPS<PWM1ERSPPS0>
extern volatile __bit                   PWM1ERSPPS0         __at(0x1298);	// @ (0x253 * 8 + 0)
#define                                 PWM1ERSPPS0_bit     _BIT_ACCESS(PWM1ERSPPS,0)
// PWM1ERSPPS<PWM1ERSPPS1>
extern volatile __bit                   PWM1ERSPPS1         __at(0x1299);	// @ (0x253 * 8 + 1)
#define                                 PWM1ERSPPS1_bit     _BIT_ACCESS(PWM1ERSPPS,1)
// PWM1ERSPPS<PWM1ERSPPS2>
extern volatile __bit                   PWM1ERSPPS2         __at(0x129A);	// @ (0x253 * 8 + 2)
#define                                 PWM1ERSPPS2_bit     _BIT_ACCESS(PWM1ERSPPS,2)
// PWM1ERSPPS<PWM1ERSPPS3>
extern volatile __bit                   PWM1ERSPPS3         __at(0x129B);	// @ (0x253 * 8 + 3)
#define                                 PWM1ERSPPS3_bit     _BIT_ACCESS(PWM1ERSPPS,3)
// PWM1ERSPPS<PWM1ERSPPS4>
extern volatile __bit                   PWM1ERSPPS4         __at(0x129C);	// @ (0x253 * 8 + 4)
#define                                 PWM1ERSPPS4_bit     _BIT_ACCESS(PWM1ERSPPS,4)
// PIE4<PWM1IE>
extern volatile __bit                   PWM1IE              __at(0x2517);	// @ (0x4A2 * 8 + 7)
#define                                 PWM1IE_bit          _BIT_ACCESS(PIE4,7)
// PIR4<PWM1IF>
extern volatile __bit                   PWM1IF              __at(0x2597);	// @ (0x4B2 * 8 + 7)
#define                                 PWM1IF_bit          _BIT_ACCESS(PIR4,7)
// IPR4<PWM1IP>
extern volatile __bit                   PWM1IP              __at(0x1B37);	// @ (0x366 * 8 + 7)
#define                                 PWM1IP_bit          _BIT_ACCESS(IPR4,7)
// PMD5<PWM1MD>
extern volatile __bit                   PWM1MD              __at(0x32C);	// @ (0x65 * 8 + 4)
#define                                 PWM1MD_bit          _BIT_ACCESS(PMD5,4)
// PIE4<PWM1PIE>
extern volatile __bit                   PWM1PIE             __at(0x2516);	// @ (0x4A2 * 8 + 6)
#define                                 PWM1PIE_bit         _BIT_ACCESS(PIE4,6)
// PIR4<PWM1PIF>
extern volatile __bit                   PWM1PIF             __at(0x2596);	// @ (0x4B2 * 8 + 6)
#define                                 PWM1PIF_bit         _BIT_ACCESS(PIR4,6)
// IPR4<PWM1PIP>
extern volatile __bit                   PWM1PIP             __at(0x1B36);	// @ (0x366 * 8 + 6)
#define                                 PWM1PIP_bit         _BIT_ACCESS(IPR4,6)
// PWM2ERSPPS<PWM2ERSPPS0>
extern volatile __bit                   PWM2ERSPPS0         __at(0x12A0);	// @ (0x254 * 8 + 0)
#define                                 PWM2ERSPPS0_bit     _BIT_ACCESS(PWM2ERSPPS,0)
// PWM2ERSPPS<PWM2ERSPPS1>
extern volatile __bit                   PWM2ERSPPS1         __at(0x12A1);	// @ (0x254 * 8 + 1)
#define                                 PWM2ERSPPS1_bit     _BIT_ACCESS(PWM2ERSPPS,1)
// PWM2ERSPPS<PWM2ERSPPS2>
extern volatile __bit                   PWM2ERSPPS2         __at(0x12A2);	// @ (0x254 * 8 + 2)
#define                                 PWM2ERSPPS2_bit     _BIT_ACCESS(PWM2ERSPPS,2)
// PWM2ERSPPS<PWM2ERSPPS3>
extern volatile __bit                   PWM2ERSPPS3         __at(0x12A3);	// @ (0x254 * 8 + 3)
#define                                 PWM2ERSPPS3_bit     _BIT_ACCESS(PWM2ERSPPS,3)
// PWM2ERSPPS<PWM2ERSPPS4>
extern volatile __bit                   PWM2ERSPPS4         __at(0x12A4);	// @ (0x254 * 8 + 4)
#define                                 PWM2ERSPPS4_bit     _BIT_ACCESS(PWM2ERSPPS,4)
// PWM2ERSPPS<PWM2ERSPPS5>
extern volatile __bit                   PWM2ERSPPS5         __at(0x12A5);	// @ (0x254 * 8 + 5)
#define                                 PWM2ERSPPS5_bit     _BIT_ACCESS(PWM2ERSPPS,5)
// PIE5<PWM2IE>
extern volatile __bit                   PWM2IE              __at(0x251F);	// @ (0x4A3 * 8 + 7)
#define                                 PWM2IE_bit          _BIT_ACCESS(PIE5,7)
// PIR5<PWM2IF>
extern volatile __bit                   PWM2IF              __at(0x259F);	// @ (0x4B3 * 8 + 7)
#define                                 PWM2IF_bit          _BIT_ACCESS(PIR5,7)
// IPR5<PWM2IP>
extern volatile __bit                   PWM2IP              __at(0x1B3F);	// @ (0x367 * 8 + 7)
#define                                 PWM2IP_bit          _BIT_ACCESS(IPR5,7)
// PMD5<PWM2MD>
extern volatile __bit                   PWM2MD              __at(0x32D);	// @ (0x65 * 8 + 5)
#define                                 PWM2MD_bit          _BIT_ACCESS(PMD5,5)
// PIE5<PWM2PIE>
extern volatile __bit                   PWM2PIE             __at(0x251E);	// @ (0x4A3 * 8 + 6)
#define                                 PWM2PIE_bit         _BIT_ACCESS(PIE5,6)
// PIR5<PWM2PIF>
extern volatile __bit                   PWM2PIF             __at(0x259E);	// @ (0x4B3 * 8 + 6)
#define                                 PWM2PIF_bit         _BIT_ACCESS(PIR5,6)
// IPR5<PWM2PIP>
extern volatile __bit                   PWM2PIP             __at(0x1B3E);	// @ (0x367 * 8 + 6)
#define                                 PWM2PIP_bit         _BIT_ACCESS(IPR5,6)
// PWM3ERSPPS<PWM3ERSPPS0>
extern volatile __bit                   PWM3ERSPPS0         __at(0x12A8);	// @ (0x255 * 8 + 0)
#define                                 PWM3ERSPPS0_bit     _BIT_ACCESS(PWM3ERSPPS,0)
// PWM3ERSPPS<PWM3ERSPPS1>
extern volatile __bit                   PWM3ERSPPS1         __at(0x12A9);	// @ (0x255 * 8 + 1)
#define                                 PWM3ERSPPS1_bit     _BIT_ACCESS(PWM3ERSPPS,1)
// PWM3ERSPPS<PWM3ERSPPS2>
extern volatile __bit                   PWM3ERSPPS2         __at(0x12AA);	// @ (0x255 * 8 + 2)
#define                                 PWM3ERSPPS2_bit     _BIT_ACCESS(PWM3ERSPPS,2)
// PWM3ERSPPS<PWM3ERSPPS3>
extern volatile __bit                   PWM3ERSPPS3         __at(0x12AB);	// @ (0x255 * 8 + 3)
#define                                 PWM3ERSPPS3_bit     _BIT_ACCESS(PWM3ERSPPS,3)
// PWM3ERSPPS<PWM3ERSPPS4>
extern volatile __bit                   PWM3ERSPPS4         __at(0x12AC);	// @ (0x255 * 8 + 4)
#define                                 PWM3ERSPPS4_bit     _BIT_ACCESS(PWM3ERSPPS,4)
// PIE7<PWM3IE>
extern volatile __bit                   PWM3IE              __at(0x252F);	// @ (0x4A5 * 8 + 7)
#define                                 PWM3IE_bit          _BIT_ACCESS(PIE7,7)
// PIR7<PWM3IF>
extern volatile __bit                   PWM3IF              __at(0x25AF);	// @ (0x4B5 * 8 + 7)
#define                                 PWM3IF_bit          _BIT_ACCESS(PIR7,7)
// IPR7<PWM3IP>
extern volatile __bit                   PWM3IP              __at(0x1B4F);	// @ (0x369 * 8 + 7)
#define                                 PWM3IP_bit          _BIT_ACCESS(IPR7,7)
// PMD5<PWM3MD>
extern volatile __bit                   PWM3MD              __at(0x32E);	// @ (0x65 * 8 + 6)
#define                                 PWM3MD_bit          _BIT_ACCESS(PMD5,6)
// PIE7<PWM3PIE>
extern volatile __bit                   PWM3PIE             __at(0x252E);	// @ (0x4A5 * 8 + 6)
#define                                 PWM3PIE_bit         _BIT_ACCESS(PIE7,6)
// PIR7<PWM3PIF>
extern volatile __bit                   PWM3PIF             __at(0x25AE);	// @ (0x4B5 * 8 + 6)
#define                                 PWM3PIF_bit         _BIT_ACCESS(PIR7,6)
// IPR7<PWM3PIP>
extern volatile __bit                   PWM3PIP             __at(0x1B4E);	// @ (0x369 * 8 + 6)
#define                                 PWM3PIP_bit         _BIT_ACCESS(IPR7,6)
// PWMIN0PPS<PWMIN0PPS0>
extern volatile __bit                   PWMIN0PPS0          __at(0x12B8);	// @ (0x257 * 8 + 0)
#define                                 PWMIN0PPS0_bit      _BIT_ACCESS(PWMIN0PPS,0)
// PWMIN0PPS<PWMIN0PPS1>
extern volatile __bit                   PWMIN0PPS1          __at(0x12B9);	// @ (0x257 * 8 + 1)
#define                                 PWMIN0PPS1_bit      _BIT_ACCESS(PWMIN0PPS,1)
// PWMIN0PPS<PWMIN0PPS2>
extern volatile __bit                   PWMIN0PPS2          __at(0x12BA);	// @ (0x257 * 8 + 2)
#define                                 PWMIN0PPS2_bit      _BIT_ACCESS(PWMIN0PPS,2)
// PWMIN0PPS<PWMIN0PPS3>
extern volatile __bit                   PWMIN0PPS3          __at(0x12BB);	// @ (0x257 * 8 + 3)
#define                                 PWMIN0PPS3_bit      _BIT_ACCESS(PWMIN0PPS,3)
// PWMIN0PPS<PWMIN0PPS4>
extern volatile __bit                   PWMIN0PPS4          __at(0x12BC);	// @ (0x257 * 8 + 4)
#define                                 PWMIN0PPS4_bit      _BIT_ACCESS(PWMIN0PPS,4)
// PWMIN0PPS<PWMIN0PPS5>
extern volatile __bit                   PWMIN0PPS5          __at(0x12BD);	// @ (0x257 * 8 + 5)
#define                                 PWMIN0PPS5_bit      _BIT_ACCESS(PWMIN0PPS,5)
// PWMIN1PPS<PWMIN1PPS0>
extern volatile __bit                   PWMIN1PPS0          __at(0x12C0);	// @ (0x258 * 8 + 0)
#define                                 PWMIN1PPS0_bit      _BIT_ACCESS(PWMIN1PPS,0)
// PWMIN1PPS<PWMIN1PPS1>
extern volatile __bit                   PWMIN1PPS1          __at(0x12C1);	// @ (0x258 * 8 + 1)
#define                                 PWMIN1PPS1_bit      _BIT_ACCESS(PWMIN1PPS,1)
// PWMIN1PPS<PWMIN1PPS2>
extern volatile __bit                   PWMIN1PPS2          __at(0x12C2);	// @ (0x258 * 8 + 2)
#define                                 PWMIN1PPS2_bit      _BIT_ACCESS(PWMIN1PPS,2)
// PWMIN1PPS<PWMIN1PPS3>
extern volatile __bit                   PWMIN1PPS3          __at(0x12C3);	// @ (0x258 * 8 + 3)
#define                                 PWMIN1PPS3_bit      _BIT_ACCESS(PWMIN1PPS,3)
// PWMIN1PPS<PWMIN1PPS4>
extern volatile __bit                   PWMIN1PPS4          __at(0x12C4);	// @ (0x258 * 8 + 4)
#define                                 PWMIN1PPS4_bit      _BIT_ACCESS(PWMIN1PPS,4)
// PWMIN1PPS<PWMIN1PPS5>
extern volatile __bit                   PWMIN1PPS5          __at(0x12C5);	// @ (0x258 * 8 + 5)
#define                                 PWMIN1PPS5_bit      _BIT_ACCESS(PWMIN1PPS,5)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x2670);	// @ (0x4CE * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x1008);	// @ (0x201 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x1009);	// @ (0x201 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x100A);	// @ (0x201 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x100B);	// @ (0x201 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x100C);	// @ (0x201 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// RA0PPS<RA0PPS5>
extern volatile __bit                   RA0PPS5             __at(0x100D);	// @ (0x201 * 8 + 5)
#define                                 RA0PPS5_bit         _BIT_ACCESS(RA0PPS,5)
// RA0PPS<RA0PPS6>
extern volatile __bit                   RA0PPS6             __at(0x100E);	// @ (0x201 * 8 + 6)
#define                                 RA0PPS6_bit         _BIT_ACCESS(RA0PPS,6)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x2671);	// @ (0x4CE * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x1010);	// @ (0x202 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x1011);	// @ (0x202 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x1012);	// @ (0x202 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x1013);	// @ (0x202 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x1014);	// @ (0x202 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// RA1PPS<RA1PPS5>
extern volatile __bit                   RA1PPS5             __at(0x1015);	// @ (0x202 * 8 + 5)
#define                                 RA1PPS5_bit         _BIT_ACCESS(RA1PPS,5)
// RA1PPS<RA1PPS6>
extern volatile __bit                   RA1PPS6             __at(0x1016);	// @ (0x202 * 8 + 6)
#define                                 RA1PPS6_bit         _BIT_ACCESS(RA1PPS,6)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x2672);	// @ (0x4CE * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x1018);	// @ (0x203 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x1019);	// @ (0x203 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x101A);	// @ (0x203 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x101B);	// @ (0x203 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x101C);	// @ (0x203 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// RA2PPS<RA2PPS5>
extern volatile __bit                   RA2PPS5             __at(0x101D);	// @ (0x203 * 8 + 5)
#define                                 RA2PPS5_bit         _BIT_ACCESS(RA2PPS,5)
// RA2PPS<RA2PPS6>
extern volatile __bit                   RA2PPS6             __at(0x101E);	// @ (0x203 * 8 + 6)
#define                                 RA2PPS6_bit         _BIT_ACCESS(RA2PPS,6)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x2673);	// @ (0x4CE * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0x1020);	// @ (0x204 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0x1021);	// @ (0x204 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0x1022);	// @ (0x204 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0x1023);	// @ (0x204 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0x1024);	// @ (0x204 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// RA3PPS<RA3PPS5>
extern volatile __bit                   RA3PPS5             __at(0x1025);	// @ (0x204 * 8 + 5)
#define                                 RA3PPS5_bit         _BIT_ACCESS(RA3PPS,5)
// RA3PPS<RA3PPS6>
extern volatile __bit                   RA3PPS6             __at(0x1026);	// @ (0x204 * 8 + 6)
#define                                 RA3PPS6_bit         _BIT_ACCESS(RA3PPS,6)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x2674);	// @ (0x4CE * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0x1028);	// @ (0x205 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0x1029);	// @ (0x205 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0x102A);	// @ (0x205 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0x102B);	// @ (0x205 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0x102C);	// @ (0x205 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// RA4PPS<RA4PPS5>
extern volatile __bit                   RA4PPS5             __at(0x102D);	// @ (0x205 * 8 + 5)
#define                                 RA4PPS5_bit         _BIT_ACCESS(RA4PPS,5)
// RA4PPS<RA4PPS6>
extern volatile __bit                   RA4PPS6             __at(0x102E);	// @ (0x205 * 8 + 6)
#define                                 RA4PPS6_bit         _BIT_ACCESS(RA4PPS,6)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x2675);	// @ (0x4CE * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0x1030);	// @ (0x206 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0x1031);	// @ (0x206 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0x1032);	// @ (0x206 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0x1033);	// @ (0x206 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0x1034);	// @ (0x206 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// RA5PPS<RA5PPS5>
extern volatile __bit                   RA5PPS5             __at(0x1035);	// @ (0x206 * 8 + 5)
#define                                 RA5PPS5_bit         _BIT_ACCESS(RA5PPS,5)
// RA5PPS<RA5PPS6>
extern volatile __bit                   RA5PPS6             __at(0x1036);	// @ (0x206 * 8 + 6)
#define                                 RA5PPS6_bit         _BIT_ACCESS(RA5PPS,6)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x2676);	// @ (0x4CE * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0x1038);	// @ (0x207 * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0x1039);	// @ (0x207 * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0x103A);	// @ (0x207 * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0x103B);	// @ (0x207 * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0x103C);	// @ (0x207 * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// RA6PPS<RA6PPS5>
extern volatile __bit                   RA6PPS5             __at(0x103D);	// @ (0x207 * 8 + 5)
#define                                 RA6PPS5_bit         _BIT_ACCESS(RA6PPS,5)
// RA6PPS<RA6PPS6>
extern volatile __bit                   RA6PPS6             __at(0x103E);	// @ (0x207 * 8 + 6)
#define                                 RA6PPS6_bit         _BIT_ACCESS(RA6PPS,6)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x2677);	// @ (0x4CE * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0x1040);	// @ (0x208 * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0x1041);	// @ (0x208 * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0x1042);	// @ (0x208 * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0x1043);	// @ (0x208 * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0x1044);	// @ (0x208 * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// RA7PPS<RA7PPS5>
extern volatile __bit                   RA7PPS5             __at(0x1045);	// @ (0x208 * 8 + 5)
#define                                 RA7PPS5_bit         _BIT_ACCESS(RA7PPS,5)
// RA7PPS<RA7PPS6>
extern volatile __bit                   RA7PPS6             __at(0x1046);	// @ (0x208 * 8 + 6)
#define                                 RA7PPS6_bit         _BIT_ACCESS(RA7PPS,6)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x2678);	// @ (0x4CF * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0x1048);	// @ (0x209 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0x1049);	// @ (0x209 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0x104A);	// @ (0x209 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0x104B);	// @ (0x209 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0x104C);	// @ (0x209 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// RB0PPS<RB0PPS5>
extern volatile __bit                   RB0PPS5             __at(0x104D);	// @ (0x209 * 8 + 5)
#define                                 RB0PPS5_bit         _BIT_ACCESS(RB0PPS,5)
// RB0PPS<RB0PPS6>
extern volatile __bit                   RB0PPS6             __at(0x104E);	// @ (0x209 * 8 + 6)
#define                                 RB0PPS6_bit         _BIT_ACCESS(RB0PPS,6)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x2679);	// @ (0x4CF * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0x1050);	// @ (0x20A * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0x1051);	// @ (0x20A * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0x1052);	// @ (0x20A * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0x1053);	// @ (0x20A * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0x1054);	// @ (0x20A * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// RB1PPS<RB1PPS5>
extern volatile __bit                   RB1PPS5             __at(0x1055);	// @ (0x20A * 8 + 5)
#define                                 RB1PPS5_bit         _BIT_ACCESS(RB1PPS,5)
// RB1PPS<RB1PPS6>
extern volatile __bit                   RB1PPS6             __at(0x1056);	// @ (0x20A * 8 + 6)
#define                                 RB1PPS6_bit         _BIT_ACCESS(RB1PPS,6)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x267A);	// @ (0x4CF * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0x1058);	// @ (0x20B * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0x1059);	// @ (0x20B * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0x105A);	// @ (0x20B * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0x105B);	// @ (0x20B * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0x105C);	// @ (0x20B * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// RB2PPS<RB2PPS5>
extern volatile __bit                   RB2PPS5             __at(0x105D);	// @ (0x20B * 8 + 5)
#define                                 RB2PPS5_bit         _BIT_ACCESS(RB2PPS,5)
// RB2PPS<RB2PPS6>
extern volatile __bit                   RB2PPS6             __at(0x105E);	// @ (0x20B * 8 + 6)
#define                                 RB2PPS6_bit         _BIT_ACCESS(RB2PPS,6)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x267B);	// @ (0x4CF * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// RB3PPS<RB3PPS5>
extern volatile __bit                   RB3PPS5             __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 RB3PPS5_bit         _BIT_ACCESS(RB3PPS,5)
// RB3PPS<RB3PPS6>
extern volatile __bit                   RB3PPS6             __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 RB3PPS6_bit         _BIT_ACCESS(RB3PPS,6)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x267C);	// @ (0x4CF * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// RB4PPS<RB4PPS5>
extern volatile __bit                   RB4PPS5             __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 RB4PPS5_bit         _BIT_ACCESS(RB4PPS,5)
// RB4PPS<RB4PPS6>
extern volatile __bit                   RB4PPS6             __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 RB4PPS6_bit         _BIT_ACCESS(RB4PPS,6)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x267D);	// @ (0x4CF * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0x1073);	// @ (0x20E * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// RB5PPS<RB5PPS5>
extern volatile __bit                   RB5PPS5             __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 RB5PPS5_bit         _BIT_ACCESS(RB5PPS,5)
// RB5PPS<RB5PPS6>
extern volatile __bit                   RB5PPS6             __at(0x1076);	// @ (0x20E * 8 + 6)
#define                                 RB5PPS6_bit         _BIT_ACCESS(RB5PPS,6)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x267E);	// @ (0x4CF * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0x1078);	// @ (0x20F * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0x1079);	// @ (0x20F * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// RB6PPS<RB6PPS5>
extern volatile __bit                   RB6PPS5             __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 RB6PPS5_bit         _BIT_ACCESS(RB6PPS,5)
// RB6PPS<RB6PPS6>
extern volatile __bit                   RB6PPS6             __at(0x107E);	// @ (0x20F * 8 + 6)
#define                                 RB6PPS6_bit         _BIT_ACCESS(RB6PPS,6)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x267F);	// @ (0x4CF * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// RB7PPS<RB7PPS5>
extern volatile __bit                   RB7PPS5             __at(0x1085);	// @ (0x210 * 8 + 5)
#define                                 RB7PPS5_bit         _BIT_ACCESS(RB7PPS,5)
// RB7PPS<RB7PPS6>
extern volatile __bit                   RB7PPS6             __at(0x1086);	// @ (0x210 * 8 + 6)
#define                                 RB7PPS6_bit         _BIT_ACCESS(RB7PPS,6)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x2680);	// @ (0x4D0 * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0x108C);	// @ (0x211 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// RC0PPS<RC0PPS5>
extern volatile __bit                   RC0PPS5             __at(0x108D);	// @ (0x211 * 8 + 5)
#define                                 RC0PPS5_bit         _BIT_ACCESS(RC0PPS,5)
// RC0PPS<RC0PPS6>
extern volatile __bit                   RC0PPS6             __at(0x108E);	// @ (0x211 * 8 + 6)
#define                                 RC0PPS6_bit         _BIT_ACCESS(RC0PPS,6)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x2681);	// @ (0x4D0 * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// RC1PPS<RC1PPS5>
extern volatile __bit                   RC1PPS5             __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 RC1PPS5_bit         _BIT_ACCESS(RC1PPS,5)
// RC1PPS<RC1PPS6>
extern volatile __bit                   RC1PPS6             __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 RC1PPS6_bit         _BIT_ACCESS(RC1PPS,6)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x2682);	// @ (0x4D0 * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// RC2PPS<RC2PPS5>
extern volatile __bit                   RC2PPS5             __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 RC2PPS5_bit         _BIT_ACCESS(RC2PPS,5)
// RC2PPS<RC2PPS6>
extern volatile __bit                   RC2PPS6             __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 RC2PPS6_bit         _BIT_ACCESS(RC2PPS,6)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x2683);	// @ (0x4D0 * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0x10A0);	// @ (0x214 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0x10A1);	// @ (0x214 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0x10A2);	// @ (0x214 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0x10A3);	// @ (0x214 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0x10A4);	// @ (0x214 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// RC3PPS<RC3PPS5>
extern volatile __bit                   RC3PPS5             __at(0x10A5);	// @ (0x214 * 8 + 5)
#define                                 RC3PPS5_bit         _BIT_ACCESS(RC3PPS,5)
// RC3PPS<RC3PPS6>
extern volatile __bit                   RC3PPS6             __at(0x10A6);	// @ (0x214 * 8 + 6)
#define                                 RC3PPS6_bit         _BIT_ACCESS(RC3PPS,6)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x2684);	// @ (0x4D0 * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x10A8);	// @ (0x215 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x10A9);	// @ (0x215 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// RC4PPS<RC4PPS5>
extern volatile __bit                   RC4PPS5             __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 RC4PPS5_bit         _BIT_ACCESS(RC4PPS,5)
// RC4PPS<RC4PPS6>
extern volatile __bit                   RC4PPS6             __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 RC4PPS6_bit         _BIT_ACCESS(RC4PPS,6)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x2685);	// @ (0x4D0 * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x10B0);	// @ (0x216 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// RC5PPS<RC5PPS5>
extern volatile __bit                   RC5PPS5             __at(0x10B5);	// @ (0x216 * 8 + 5)
#define                                 RC5PPS5_bit         _BIT_ACCESS(RC5PPS,5)
// RC5PPS<RC5PPS6>
extern volatile __bit                   RC5PPS6             __at(0x10B6);	// @ (0x216 * 8 + 6)
#define                                 RC5PPS6_bit         _BIT_ACCESS(RC5PPS,6)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x2686);	// @ (0x4D0 * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0x10BC);	// @ (0x217 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// RC6PPS<RC6PPS5>
extern volatile __bit                   RC6PPS5             __at(0x10BD);	// @ (0x217 * 8 + 5)
#define                                 RC6PPS5_bit         _BIT_ACCESS(RC6PPS,5)
// RC6PPS<RC6PPS6>
extern volatile __bit                   RC6PPS6             __at(0x10BE);	// @ (0x217 * 8 + 6)
#define                                 RC6PPS6_bit         _BIT_ACCESS(RC6PPS,6)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x2687);	// @ (0x4D0 * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// RC7PPS<RC7PPS5>
extern volatile __bit                   RC7PPS5             __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 RC7PPS5_bit         _BIT_ACCESS(RC7PPS,5)
// RC7PPS<RC7PPS6>
extern volatile __bit                   RC7PPS6             __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 RC7PPS6_bit         _BIT_ACCESS(RC7PPS,6)
// PORTD<RD0>
extern volatile __bit                   RD0                 __at(0x2688);	// @ (0x4D1 * 8 + 0)
#define                                 RD0_bit             _BIT_ACCESS(PORTD,0)
// PORTD<RD1>
extern volatile __bit                   RD1                 __at(0x2689);	// @ (0x4D1 * 8 + 1)
#define                                 RD1_bit             _BIT_ACCESS(PORTD,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x18F1);	// @ (0x31E * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// T3CON<RD163>
extern volatile __bit                   RD163               __at(0x1951);	// @ (0x32A * 8 + 1)
#define                                 RD163_bit           _BIT_ACCESS(T3CON,1)
// T5CON<RD165>
extern volatile __bit                   RD165               __at(0x19B1);	// @ (0x336 * 8 + 1)
#define                                 RD165_bit           _BIT_ACCESS(T5CON,1)
// PORTD<RD2>
extern volatile __bit                   RD2                 __at(0x268A);	// @ (0x4D1 * 8 + 2)
#define                                 RD2_bit             _BIT_ACCESS(PORTD,2)
// PORTD<RD3>
extern volatile __bit                   RD3                 __at(0x268B);	// @ (0x4D1 * 8 + 3)
#define                                 RD3_bit             _BIT_ACCESS(PORTD,3)
// PORTD<RD4>
extern volatile __bit                   RD4                 __at(0x268C);	// @ (0x4D1 * 8 + 4)
#define                                 RD4_bit             _BIT_ACCESS(PORTD,4)
// PORTD<RD5>
extern volatile __bit                   RD5                 __at(0x268D);	// @ (0x4D1 * 8 + 5)
#define                                 RD5_bit             _BIT_ACCESS(PORTD,5)
// PORTD<RD6>
extern volatile __bit                   RD6                 __at(0x268E);	// @ (0x4D1 * 8 + 6)
#define                                 RD6_bit             _BIT_ACCESS(PORTD,6)
// PORTD<RD7>
extern volatile __bit                   RD7                 __at(0x268F);	// @ (0x4D1 * 8 + 7)
#define                                 RD7_bit             _BIT_ACCESS(PORTD,7)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x2693);	// @ (0x4D2 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// I2C1STAT0<READ>
extern volatile __bit                   READ                __at(0x14C4);	// @ (0x298 * 8 + 4)
#define                                 READ_bit            _BIT_ACCESS(I2C1STAT0,4)
// SMT1CON1<REPEAT>
extern volatile __bit                   REPEAT              __at(0x186E);	// @ (0x30D * 8 + 6)
#define                                 REPEAT_bit          _BIT_ACCESS(SMT1CON1,6)
// ADRESL<RES0>
extern volatile __bit                   RES0                __at(0x1F50);	// @ (0x3EA * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(ADRESL,0)
// ADRESL<RES1>
extern volatile __bit                   RES1                __at(0x1F51);	// @ (0x3EA * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(ADRESL,1)
// ADRESH<RES10>
extern volatile __bit                   RES10               __at(0x1F5A);	// @ (0x3EB * 8 + 2)
#define                                 RES10_bit           _BIT_ACCESS(ADRESH,2)
// ADRESH<RES11>
extern volatile __bit                   RES11               __at(0x1F5B);	// @ (0x3EB * 8 + 3)
#define                                 RES11_bit           _BIT_ACCESS(ADRESH,3)
// ADRESH<RES12>
extern volatile __bit                   RES12               __at(0x1F5C);	// @ (0x3EB * 8 + 4)
#define                                 RES12_bit           _BIT_ACCESS(ADRESH,4)
// ADRESH<RES13>
extern volatile __bit                   RES13               __at(0x1F5D);	// @ (0x3EB * 8 + 5)
#define                                 RES13_bit           _BIT_ACCESS(ADRESH,5)
// ADRESH<RES14>
extern volatile __bit                   RES14               __at(0x1F5E);	// @ (0x3EB * 8 + 6)
#define                                 RES14_bit           _BIT_ACCESS(ADRESH,6)
// ADRESH<RES15>
extern volatile __bit                   RES15               __at(0x1F5F);	// @ (0x3EB * 8 + 7)
#define                                 RES15_bit           _BIT_ACCESS(ADRESH,7)
// ADRESL<RES2>
extern volatile __bit                   RES2                __at(0x1F52);	// @ (0x3EA * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(ADRESL,2)
// ADRESL<RES3>
extern volatile __bit                   RES3                __at(0x1F53);	// @ (0x3EA * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(ADRESL,3)
// ADRESL<RES4>
extern volatile __bit                   RES4                __at(0x1F54);	// @ (0x3EA * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(ADRESL,4)
// ADRESL<RES5>
extern volatile __bit                   RES5                __at(0x1F55);	// @ (0x3EA * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(ADRESL,5)
// ADRESL<RES6>
extern volatile __bit                   RES6                __at(0x1F56);	// @ (0x3EA * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(ADRESL,6)
// ADRESL<RES7>
extern volatile __bit                   RES7                __at(0x1F57);	// @ (0x3EA * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(ADRESL,7)
// ADRESH<RES8>
extern volatile __bit                   RES8                __at(0x1F58);	// @ (0x3EB * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(ADRESH,0)
// ADRESH<RES9>
extern volatile __bit                   RES9                __at(0x1F59);	// @ (0x3EB * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(ADRESH,1)
// PCON0<RI>
extern volatile __bit                   RI                  __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 RI_bit              _BIT_ACCESS(PCON0,2)
// PCON0<RMCLR>
extern volatile __bit                   RMCLR               __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 RMCLR_bit           _BIT_ACCESS(PCON0,3)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x2795);	// @ (0x4F2 * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// ADRPT<RPT0>
extern volatile __bit                   RPT0                __at(0x1F38);	// @ (0x3E7 * 8 + 0)
#define                                 RPT0_bit            _BIT_ACCESS(ADRPT,0)
// ADRPT<RPT1>
extern volatile __bit                   RPT1                __at(0x1F39);	// @ (0x3E7 * 8 + 1)
#define                                 RPT1_bit            _BIT_ACCESS(ADRPT,1)
// ADRPT<RPT2>
extern volatile __bit                   RPT2                __at(0x1F3A);	// @ (0x3E7 * 8 + 2)
#define                                 RPT2_bit            _BIT_ACCESS(ADRPT,2)
// ADRPT<RPT3>
extern volatile __bit                   RPT3                __at(0x1F3B);	// @ (0x3E7 * 8 + 3)
#define                                 RPT3_bit            _BIT_ACCESS(ADRPT,3)
// ADRPT<RPT4>
extern volatile __bit                   RPT4                __at(0x1F3C);	// @ (0x3E7 * 8 + 4)
#define                                 RPT4_bit            _BIT_ACCESS(ADRPT,4)
// ADRPT<RPT5>
extern volatile __bit                   RPT5                __at(0x1F3D);	// @ (0x3E7 * 8 + 5)
#define                                 RPT5_bit            _BIT_ACCESS(ADRPT,5)
// ADRPT<RPT6>
extern volatile __bit                   RPT6                __at(0x1F3E);	// @ (0x3E7 * 8 + 6)
#define                                 RPT6_bit            _BIT_ACCESS(ADRPT,6)
// ADRPT<RPT7>
extern volatile __bit                   RPT7                __at(0x1F3F);	// @ (0x3E7 * 8 + 7)
#define                                 RPT7_bit            _BIT_ACCESS(ADRPT,7)
// I2C1PIE<RSC1IE>
extern volatile __bit                   RSC1IE              __at(0x14D9);	// @ (0x29B * 8 + 1)
#define                                 RSC1IE_bit          _BIT_ACCESS(I2C1PIE,1)
// I2C1PIR<RSC1IF>
extern volatile __bit                   RSC1IF              __at(0x14D1);	// @ (0x29A * 8 + 1)
#define                                 RSC1IF_bit          _BIT_ACCESS(I2C1PIR,1)
// I2C1PIE<RSCIE>
extern volatile __bit                   RSCIE               __at(0x14D9);	// @ (0x29B * 8 + 1)
#define                                 RSCIE_bit           _BIT_ACCESS(I2C1PIE,1)
// I2C1PIR<RSCIF>
extern volatile __bit                   RSCIF               __at(0x14D1);	// @ (0x29A * 8 + 1)
#define                                 RSCIF_bit           _BIT_ACCESS(I2C1PIR,1)
// I2C1CON0<RSEN>
extern volatile __bit                   RSEN                __at(0x14A6);	// @ (0x294 * 8 + 6)
#define                                 RSEN_bit            _BIT_ACCESS(I2C1CON0,6)
// SMT1STAT<RST>
extern volatile __bit                   RST                 __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 RST_bit             _BIT_ACCESS(SMT1STAT,5)
// PCON0<RWDT>
extern volatile __bit                   RWDT                __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 RWDT_bit            _BIT_ACCESS(PCON0,4)
// I2C1CON1<RXO>
extern volatile __bit                   RXO                 __at(0x14AA);	// @ (0x295 * 8 + 2)
#define                                 RXO_bit             _BIT_ACCESS(I2C1CON1,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x24F);	// @ (0x49 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// I2C1PIE<SC1IE>
extern volatile __bit                   SC1IE               __at(0x14D8);	// @ (0x29B * 8 + 0)
#define                                 SC1IE_bit           _BIT_ACCESS(I2C1PIE,0)
// I2C1PIR<SC1IF>
extern volatile __bit                   SC1IF               __at(0x14D0);	// @ (0x29A * 8 + 0)
#define                                 SC1IF_bit           _BIT_ACCESS(I2C1PIR,0)
// SCANCON0<SCANEN>
extern volatile __bit                   SCANEN              __at(0x1B07);	// @ (0x360 * 8 + 7)
#define                                 SCANEN_bit          _BIT_ACCESS(SCANCON0,7)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x1AE8);	// @ (0x35D * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x1AE9);	// @ (0x35D * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x1AF2);	// @ (0x35E * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x1AF3);	// @ (0x35E * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x1AF4);	// @ (0x35E * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x1AF5);	// @ (0x35E * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x1AF6);	// @ (0x35E * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x1AF7);	// @ (0x35E * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<SCANHADR16>
extern volatile __bit                   SCANHADR16          __at(0x1AF8);	// @ (0x35F * 8 + 0)
#define                                 SCANHADR16_bit      _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<SCANHADR17>
extern volatile __bit                   SCANHADR17          __at(0x1AF9);	// @ (0x35F * 8 + 1)
#define                                 SCANHADR17_bit      _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<SCANHADR18>
extern volatile __bit                   SCANHADR18          __at(0x1AFA);	// @ (0x35F * 8 + 2)
#define                                 SCANHADR18_bit      _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<SCANHADR19>
extern volatile __bit                   SCANHADR19          __at(0x1AFB);	// @ (0x35F * 8 + 3)
#define                                 SCANHADR19_bit      _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x1AEA);	// @ (0x35D * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<SCANHADR20>
extern volatile __bit                   SCANHADR20          __at(0x1AFC);	// @ (0x35F * 8 + 4)
#define                                 SCANHADR20_bit      _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<SCANHADR21>
extern volatile __bit                   SCANHADR21          __at(0x1AFD);	// @ (0x35F * 8 + 5)
#define                                 SCANHADR21_bit      _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x1AEB);	// @ (0x35D * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x1AEC);	// @ (0x35D * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x1AED);	// @ (0x35D * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x1AEE);	// @ (0x35D * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x1AEF);	// @ (0x35D * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x1AF0);	// @ (0x35E * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x1AF1);	// @ (0x35E * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE8<SCANIE>
extern volatile __bit                   SCANIE              __at(0x2537);	// @ (0x4A6 * 8 + 7)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE8,7)
// PIR8<SCANIF>
extern volatile __bit                   SCANIF              __at(0x25B7);	// @ (0x4B6 * 8 + 7)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR8,7)
// IPR8<SCANIP>
extern volatile __bit                   SCANIP              __at(0x1B57);	// @ (0x36A * 8 + 7)
#define                                 SCANIP_bit          _BIT_ACCESS(IPR8,7)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x1AD0);	// @ (0x35A * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x1AD1);	// @ (0x35A * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x1ADA);	// @ (0x35B * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x1ADB);	// @ (0x35B * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x1ADC);	// @ (0x35B * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x1ADD);	// @ (0x35B * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x1ADE);	// @ (0x35B * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x1ADF);	// @ (0x35B * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<SCANLADR16>
extern volatile __bit                   SCANLADR16          __at(0x1AE0);	// @ (0x35C * 8 + 0)
#define                                 SCANLADR16_bit      _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<SCANLADR17>
extern volatile __bit                   SCANLADR17          __at(0x1AE1);	// @ (0x35C * 8 + 1)
#define                                 SCANLADR17_bit      _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<SCANLADR18>
extern volatile __bit                   SCANLADR18          __at(0x1AE2);	// @ (0x35C * 8 + 2)
#define                                 SCANLADR18_bit      _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<SCANLADR19>
extern volatile __bit                   SCANLADR19          __at(0x1AE3);	// @ (0x35C * 8 + 3)
#define                                 SCANLADR19_bit      _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x1AD2);	// @ (0x35A * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<SCANLADR20>
extern volatile __bit                   SCANLADR20          __at(0x1AE4);	// @ (0x35C * 8 + 4)
#define                                 SCANLADR20_bit      _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<SCANLADR21>
extern volatile __bit                   SCANLADR21          __at(0x1AE5);	// @ (0x35C * 8 + 5)
#define                                 SCANLADR21_bit      _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x1AD3);	// @ (0x35A * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x1AD4);	// @ (0x35A * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x1AD5);	// @ (0x35A * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x1AD6);	// @ (0x35A * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x1AD7);	// @ (0x35A * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x1AD8);	// @ (0x35B * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x1AD9);	// @ (0x35B * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x303);	// @ (0x60 * 8 + 3)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,3)
// SCANPR<SCANPR0>
extern volatile __bit                   SCANPR0             __at(0x5A8);	// @ (0xB5 * 8 + 0)
#define                                 SCANPR0_bit         _BIT_ACCESS(SCANPR,0)
// SCANPR<SCANPR1>
extern volatile __bit                   SCANPR1             __at(0x5A9);	// @ (0xB5 * 8 + 1)
#define                                 SCANPR1_bit         _BIT_ACCESS(SCANPR,1)
// SCANPR<SCANPR2>
extern volatile __bit                   SCANPR2             __at(0x5AA);	// @ (0xB5 * 8 + 2)
#define                                 SCANPR2_bit         _BIT_ACCESS(SCANPR,2)
// I2C1PIE<SCIE>
extern volatile __bit                   SCIE                __at(0x14D8);	// @ (0x29B * 8 + 0)
#define                                 SCIE_bit            _BIT_ACCESS(I2C1PIE,0)
// I2C1PIR<SCIF>
extern volatile __bit                   SCIF                __at(0x14D0);	// @ (0x29A * 8 + 0)
#define                                 SCIF_bit            _BIT_ACCESS(I2C1PIR,0)
// DMAnSCNTL<SCNT0>
extern volatile __bit                   SCNT0               __at(0x790);	// @ (0xF2 * 8 + 0)
#define                                 SCNT0_bit           _BIT_ACCESS(DMAnSCNTL,0)
// DMAnSCNTL<SCNT1>
extern volatile __bit                   SCNT1               __at(0x791);	// @ (0xF2 * 8 + 1)
#define                                 SCNT1_bit           _BIT_ACCESS(DMAnSCNTL,1)
// DMAnSCNTH<SCNT10>
extern volatile __bit                   SCNT10              __at(0x79A);	// @ (0xF3 * 8 + 2)
#define                                 SCNT10_bit          _BIT_ACCESS(DMAnSCNTH,2)
// DMAnSCNTH<SCNT11>
extern volatile __bit                   SCNT11              __at(0x79B);	// @ (0xF3 * 8 + 3)
#define                                 SCNT11_bit          _BIT_ACCESS(DMAnSCNTH,3)
// DMAnSCNTL<SCNT2>
extern volatile __bit                   SCNT2               __at(0x792);	// @ (0xF2 * 8 + 2)
#define                                 SCNT2_bit           _BIT_ACCESS(DMAnSCNTL,2)
// DMAnSCNTL<SCNT3>
extern volatile __bit                   SCNT3               __at(0x793);	// @ (0xF2 * 8 + 3)
#define                                 SCNT3_bit           _BIT_ACCESS(DMAnSCNTL,3)
// DMAnSCNTL<SCNT4>
extern volatile __bit                   SCNT4               __at(0x794);	// @ (0xF2 * 8 + 4)
#define                                 SCNT4_bit           _BIT_ACCESS(DMAnSCNTL,4)
// DMAnSCNTL<SCNT5>
extern volatile __bit                   SCNT5               __at(0x795);	// @ (0xF2 * 8 + 5)
#define                                 SCNT5_bit           _BIT_ACCESS(DMAnSCNTL,5)
// DMAnSCNTL<SCNT6>
extern volatile __bit                   SCNT6               __at(0x796);	// @ (0xF2 * 8 + 6)
#define                                 SCNT6_bit           _BIT_ACCESS(DMAnSCNTL,6)
// DMAnSCNTL<SCNT7>
extern volatile __bit                   SCNT7               __at(0x797);	// @ (0xF2 * 8 + 7)
#define                                 SCNT7_bit           _BIT_ACCESS(DMAnSCNTL,7)
// DMAnSCNTH<SCNT8>
extern volatile __bit                   SCNT8               __at(0x798);	// @ (0xF3 * 8 + 0)
#define                                 SCNT8_bit           _BIT_ACCESS(DMAnSCNTH,0)
// DMAnSCNTH<SCNT9>
extern volatile __bit                   SCNT9               __at(0x799);	// @ (0xF3 * 8 + 1)
#define                                 SCNT9_bit           _BIT_ACCESS(DMAnSCNTH,1)
// I2C1CON2<SDAHT0>
extern volatile __bit                   SDAHT0              __at(0x14B2);	// @ (0x296 * 8 + 2)
#define                                 SDAHT0_bit          _BIT_ACCESS(I2C1CON2,2)
// I2C1CON2<SDAHT1>
extern volatile __bit                   SDAHT1              __at(0x14B3);	// @ (0x296 * 8 + 3)
#define                                 SDAHT1_bit          _BIT_ACCESS(I2C1CON2,3)
// HLVDCON1<SEL0>
extern volatile __bit                   SEL0                __at(0x258);	// @ (0x4B * 8 + 0)
#define                                 SEL0_bit            _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<SEL1>
extern volatile __bit                   SEL1                __at(0x259);	// @ (0x4B * 8 + 1)
#define                                 SEL1_bit            _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<SEL2>
extern volatile __bit                   SEL2                __at(0x25A);	// @ (0x4B * 8 + 2)
#define                                 SEL2_bit            _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<SEL3>
extern volatile __bit                   SEL3                __at(0x25B);	// @ (0x4B * 8 + 3)
#define                                 SEL3_bit            _BIT_ACCESS(HLVDCON1,3)
// SCANCON0<SGO>
extern volatile __bit                   SGO                 __at(0x1B05);	// @ (0x360 * 8 + 5)
#define                                 SGO_bit             _BIT_ACCESS(SCANCON0,5)
// SHADCON<SHADLO>
extern volatile __bit                   SHADLO              __at(0x1BB0);	// @ (0x376 * 8 + 0)
#define                                 SHADLO_bit          _BIT_ACCESS(SHADCON,0)
// CRCSHIFTL<SHFT0>
extern volatile __bit                   SHFT0               __at(0x1A98);	// @ (0x353 * 8 + 0)
#define                                 SHFT0_bit           _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHFT1>
extern volatile __bit                   SHFT1               __at(0x1A99);	// @ (0x353 * 8 + 1)
#define                                 SHFT1_bit           _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHFT10>
extern volatile __bit                   SHFT10              __at(0x1AA2);	// @ (0x354 * 8 + 2)
#define                                 SHFT10_bit          _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHFT11>
extern volatile __bit                   SHFT11              __at(0x1AA3);	// @ (0x354 * 8 + 3)
#define                                 SHFT11_bit          _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHFT12>
extern volatile __bit                   SHFT12              __at(0x1AA4);	// @ (0x354 * 8 + 4)
#define                                 SHFT12_bit          _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHFT13>
extern volatile __bit                   SHFT13              __at(0x1AA5);	// @ (0x354 * 8 + 5)
#define                                 SHFT13_bit          _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHFT14>
extern volatile __bit                   SHFT14              __at(0x1AA6);	// @ (0x354 * 8 + 6)
#define                                 SHFT14_bit          _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHFT15>
extern volatile __bit                   SHFT15              __at(0x1AA7);	// @ (0x354 * 8 + 7)
#define                                 SHFT15_bit          _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHFT2>
extern volatile __bit                   SHFT2               __at(0x1A9A);	// @ (0x353 * 8 + 2)
#define                                 SHFT2_bit           _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHFT3>
extern volatile __bit                   SHFT3               __at(0x1A9B);	// @ (0x353 * 8 + 3)
#define                                 SHFT3_bit           _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHFT4>
extern volatile __bit                   SHFT4               __at(0x1A9C);	// @ (0x353 * 8 + 4)
#define                                 SHFT4_bit           _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHFT5>
extern volatile __bit                   SHFT5               __at(0x1A9D);	// @ (0x353 * 8 + 5)
#define                                 SHFT5_bit           _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHFT6>
extern volatile __bit                   SHFT6               __at(0x1A9E);	// @ (0x353 * 8 + 6)
#define                                 SHFT6_bit           _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHFT7>
extern volatile __bit                   SHFT7               __at(0x1A9F);	// @ (0x353 * 8 + 7)
#define                                 SHFT7_bit           _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHFT8>
extern volatile __bit                   SHFT8               __at(0x1AA0);	// @ (0x354 * 8 + 0)
#define                                 SHFT8_bit           _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHFT9>
extern volatile __bit                   SHFT9               __at(0x1AA1);	// @ (0x354 * 8 + 1)
#define                                 SHFT9_bit           _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x1AB9);	// @ (0x357 * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// DMAnSIRQ<SIRQ0>
extern volatile __bit                   SIRQ0               __at(0x7F8);	// @ (0xFF * 8 + 0)
#define                                 SIRQ0_bit           _BIT_ACCESS(DMAnSIRQ,0)
// DMAnSIRQ<SIRQ1>
extern volatile __bit                   SIRQ1               __at(0x7F9);	// @ (0xFF * 8 + 1)
#define                                 SIRQ1_bit           _BIT_ACCESS(DMAnSIRQ,1)
// DMAnSIRQ<SIRQ2>
extern volatile __bit                   SIRQ2               __at(0x7FA);	// @ (0xFF * 8 + 2)
#define                                 SIRQ2_bit           _BIT_ACCESS(DMAnSIRQ,2)
// DMAnSIRQ<SIRQ3>
extern volatile __bit                   SIRQ3               __at(0x7FB);	// @ (0xFF * 8 + 3)
#define                                 SIRQ3_bit           _BIT_ACCESS(DMAnSIRQ,3)
// DMAnSIRQ<SIRQ4>
extern volatile __bit                   SIRQ4               __at(0x7FC);	// @ (0xFF * 8 + 4)
#define                                 SIRQ4_bit           _BIT_ACCESS(DMAnSIRQ,4)
// DMAnSIRQ<SIRQ5>
extern volatile __bit                   SIRQ5               __at(0x7FD);	// @ (0xFF * 8 + 5)
#define                                 SIRQ5_bit           _BIT_ACCESS(DMAnSIRQ,5)
// DMAnSIRQ<SIRQ6>
extern volatile __bit                   SIRQ6               __at(0x7FE);	// @ (0xFF * 8 + 6)
#define                                 SIRQ6_bit           _BIT_ACCESS(DMAnSIRQ,6)
// DMAnSIRQ<SIRQ7>
extern volatile __bit                   SIRQ7               __at(0x7FF);	// @ (0xFF * 8 + 7)
#define                                 SIRQ7_bit           _BIT_ACCESS(DMAnSIRQ,7)
// DMAnCON0<SIRQEN>
extern volatile __bit                   SIRQEN              __at(0x7E6);	// @ (0xFC * 8 + 6)
#define                                 SIRQEN_bit          _BIT_ACCESS(DMAnCON0,6)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x2018);	// @ (0x403 * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x2019);	// @ (0x403 * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x201A);	// @ (0x403 * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0x201B);	// @ (0x403 * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x201C);	// @ (0x403 * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x201D);	// @ (0x403 * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0x201E);	// @ (0x403 * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0x201F);	// @ (0x403 * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0x2058);	// @ (0x40B * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0x2059);	// @ (0x40B * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0x205A);	// @ (0x40B * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0x205B);	// @ (0x40B * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0x205C);	// @ (0x40B * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0x205D);	// @ (0x40B * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0x205E);	// @ (0x40B * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0x205F);	// @ (0x40B * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x2098);	// @ (0x413 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x2099);	// @ (0x413 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0x209A);	// @ (0x413 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x209B);	// @ (0x413 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x209C);	// @ (0x413 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x209D);	// @ (0x413 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0x209E);	// @ (0x413 * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0x209F);	// @ (0x413 * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// I2C1STAT0<SMA>
extern volatile __bit                   SMA                 __at(0x14C6);	// @ (0x298 * 8 + 6)
#define                                 SMA_bit             _BIT_ACCESS(I2C1STAT0,6)
// SMT1STAT<SMT1AS>
extern volatile __bit                   SMT1AS              __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 SMT1AS_bit          _BIT_ACCESS(SMT1STAT,0)
// SMT1CPRL<SMT1CPR0>
extern volatile __bit                   SMT1CPR0            __at(0x1818);	// @ (0x303 * 8 + 0)
#define                                 SMT1CPR0_bit        _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<SMT1CPR1>
extern volatile __bit                   SMT1CPR1            __at(0x1819);	// @ (0x303 * 8 + 1)
#define                                 SMT1CPR1_bit        _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<SMT1CPR10>
extern volatile __bit                   SMT1CPR10           __at(0x1822);	// @ (0x304 * 8 + 2)
#define                                 SMT1CPR10_bit       _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<SMT1CPR11>
extern volatile __bit                   SMT1CPR11           __at(0x1823);	// @ (0x304 * 8 + 3)
#define                                 SMT1CPR11_bit       _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<SMT1CPR12>
extern volatile __bit                   SMT1CPR12           __at(0x1824);	// @ (0x304 * 8 + 4)
#define                                 SMT1CPR12_bit       _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<SMT1CPR13>
extern volatile __bit                   SMT1CPR13           __at(0x1825);	// @ (0x304 * 8 + 5)
#define                                 SMT1CPR13_bit       _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<SMT1CPR14>
extern volatile __bit                   SMT1CPR14           __at(0x1826);	// @ (0x304 * 8 + 6)
#define                                 SMT1CPR14_bit       _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<SMT1CPR15>
extern volatile __bit                   SMT1CPR15           __at(0x1827);	// @ (0x304 * 8 + 7)
#define                                 SMT1CPR15_bit       _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<SMT1CPR16>
extern volatile __bit                   SMT1CPR16           __at(0x1828);	// @ (0x305 * 8 + 0)
#define                                 SMT1CPR16_bit       _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<SMT1CPR17>
extern volatile __bit                   SMT1CPR17           __at(0x1829);	// @ (0x305 * 8 + 1)
#define                                 SMT1CPR17_bit       _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<SMT1CPR18>
extern volatile __bit                   SMT1CPR18           __at(0x182A);	// @ (0x305 * 8 + 2)
#define                                 SMT1CPR18_bit       _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<SMT1CPR19>
extern volatile __bit                   SMT1CPR19           __at(0x182B);	// @ (0x305 * 8 + 3)
#define                                 SMT1CPR19_bit       _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<SMT1CPR2>
extern volatile __bit                   SMT1CPR2            __at(0x181A);	// @ (0x303 * 8 + 2)
#define                                 SMT1CPR2_bit        _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<SMT1CPR20>
extern volatile __bit                   SMT1CPR20           __at(0x182C);	// @ (0x305 * 8 + 4)
#define                                 SMT1CPR20_bit       _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<SMT1CPR21>
extern volatile __bit                   SMT1CPR21           __at(0x182D);	// @ (0x305 * 8 + 5)
#define                                 SMT1CPR21_bit       _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<SMT1CPR22>
extern volatile __bit                   SMT1CPR22           __at(0x182E);	// @ (0x305 * 8 + 6)
#define                                 SMT1CPR22_bit       _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<SMT1CPR23>
extern volatile __bit                   SMT1CPR23           __at(0x182F);	// @ (0x305 * 8 + 7)
#define                                 SMT1CPR23_bit       _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<SMT1CPR3>
extern volatile __bit                   SMT1CPR3            __at(0x181B);	// @ (0x303 * 8 + 3)
#define                                 SMT1CPR3_bit        _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<SMT1CPR4>
extern volatile __bit                   SMT1CPR4            __at(0x181C);	// @ (0x303 * 8 + 4)
#define                                 SMT1CPR4_bit        _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<SMT1CPR5>
extern volatile __bit                   SMT1CPR5            __at(0x181D);	// @ (0x303 * 8 + 5)
#define                                 SMT1CPR5_bit        _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<SMT1CPR6>
extern volatile __bit                   SMT1CPR6            __at(0x181E);	// @ (0x303 * 8 + 6)
#define                                 SMT1CPR6_bit        _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<SMT1CPR7>
extern volatile __bit                   SMT1CPR7            __at(0x181F);	// @ (0x303 * 8 + 7)
#define                                 SMT1CPR7_bit        _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<SMT1CPR8>
extern volatile __bit                   SMT1CPR8            __at(0x1820);	// @ (0x304 * 8 + 0)
#define                                 SMT1CPR8_bit        _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<SMT1CPR9>
extern volatile __bit                   SMT1CPR9            __at(0x1821);	// @ (0x304 * 8 + 1)
#define                                 SMT1CPR9_bit        _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<SMT1CPRUP>
extern volatile __bit                   SMT1CPRUP           __at(0x1877);	// @ (0x30E * 8 + 7)
#define                                 SMT1CPRUP_bit       _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<SMT1CPW0>
extern volatile __bit                   SMT1CPW0            __at(0x1830);	// @ (0x306 * 8 + 0)
#define                                 SMT1CPW0_bit        _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<SMT1CPW1>
extern volatile __bit                   SMT1CPW1            __at(0x1831);	// @ (0x306 * 8 + 1)
#define                                 SMT1CPW1_bit        _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<SMT1CPW10>
extern volatile __bit                   SMT1CPW10           __at(0x183A);	// @ (0x307 * 8 + 2)
#define                                 SMT1CPW10_bit       _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<SMT1CPW11>
extern volatile __bit                   SMT1CPW11           __at(0x183B);	// @ (0x307 * 8 + 3)
#define                                 SMT1CPW11_bit       _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<SMT1CPW12>
extern volatile __bit                   SMT1CPW12           __at(0x183C);	// @ (0x307 * 8 + 4)
#define                                 SMT1CPW12_bit       _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<SMT1CPW13>
extern volatile __bit                   SMT1CPW13           __at(0x183D);	// @ (0x307 * 8 + 5)
#define                                 SMT1CPW13_bit       _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<SMT1CPW14>
extern volatile __bit                   SMT1CPW14           __at(0x183E);	// @ (0x307 * 8 + 6)
#define                                 SMT1CPW14_bit       _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<SMT1CPW15>
extern volatile __bit                   SMT1CPW15           __at(0x183F);	// @ (0x307 * 8 + 7)
#define                                 SMT1CPW15_bit       _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<SMT1CPW16>
extern volatile __bit                   SMT1CPW16           __at(0x1840);	// @ (0x308 * 8 + 0)
#define                                 SMT1CPW16_bit       _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<SMT1CPW17>
extern volatile __bit                   SMT1CPW17           __at(0x1841);	// @ (0x308 * 8 + 1)
#define                                 SMT1CPW17_bit       _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<SMT1CPW18>
extern volatile __bit                   SMT1CPW18           __at(0x1842);	// @ (0x308 * 8 + 2)
#define                                 SMT1CPW18_bit       _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<SMT1CPW19>
extern volatile __bit                   SMT1CPW19           __at(0x1843);	// @ (0x308 * 8 + 3)
#define                                 SMT1CPW19_bit       _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<SMT1CPW2>
extern volatile __bit                   SMT1CPW2            __at(0x1832);	// @ (0x306 * 8 + 2)
#define                                 SMT1CPW2_bit        _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<SMT1CPW20>
extern volatile __bit                   SMT1CPW20           __at(0x1844);	// @ (0x308 * 8 + 4)
#define                                 SMT1CPW20_bit       _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<SMT1CPW21>
extern volatile __bit                   SMT1CPW21           __at(0x1845);	// @ (0x308 * 8 + 5)
#define                                 SMT1CPW21_bit       _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<SMT1CPW22>
extern volatile __bit                   SMT1CPW22           __at(0x1846);	// @ (0x308 * 8 + 6)
#define                                 SMT1CPW22_bit       _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<SMT1CPW23>
extern volatile __bit                   SMT1CPW23           __at(0x1847);	// @ (0x308 * 8 + 7)
#define                                 SMT1CPW23_bit       _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<SMT1CPW3>
extern volatile __bit                   SMT1CPW3            __at(0x1833);	// @ (0x306 * 8 + 3)
#define                                 SMT1CPW3_bit        _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<SMT1CPW4>
extern volatile __bit                   SMT1CPW4            __at(0x1834);	// @ (0x306 * 8 + 4)
#define                                 SMT1CPW4_bit        _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<SMT1CPW5>
extern volatile __bit                   SMT1CPW5            __at(0x1835);	// @ (0x306 * 8 + 5)
#define                                 SMT1CPW5_bit        _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<SMT1CPW6>
extern volatile __bit                   SMT1CPW6            __at(0x1836);	// @ (0x306 * 8 + 6)
#define                                 SMT1CPW6_bit        _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<SMT1CPW7>
extern volatile __bit                   SMT1CPW7            __at(0x1837);	// @ (0x306 * 8 + 7)
#define                                 SMT1CPW7_bit        _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<SMT1CPW8>
extern volatile __bit                   SMT1CPW8            __at(0x1838);	// @ (0x307 * 8 + 0)
#define                                 SMT1CPW8_bit        _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<SMT1CPW9>
extern volatile __bit                   SMT1CPW9            __at(0x1839);	// @ (0x307 * 8 + 1)
#define                                 SMT1CPW9_bit        _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<SMT1CPWUP>
extern volatile __bit                   SMT1CPWUP           __at(0x1876);	// @ (0x30E * 8 + 6)
#define                                 SMT1CPWUP_bit       _BIT_ACCESS(SMT1STAT,6)
// SMT1CLK<SMT1CSEL0>
extern volatile __bit                   SMT1CSEL0           __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 SMT1CSEL0_bit       _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<SMT1CSEL1>
extern volatile __bit                   SMT1CSEL1           __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 SMT1CSEL1_bit       _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<SMT1CSEL2>
extern volatile __bit                   SMT1CSEL2           __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 SMT1CSEL2_bit       _BIT_ACCESS(SMT1CLK,2)
// SMT1CLK<SMT1CSEL3>
extern volatile __bit                   SMT1CSEL3           __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 SMT1CSEL3_bit       _BIT_ACCESS(SMT1CLK,3)
// SMT1CON1<SMT1GO>
extern volatile __bit                   SMT1GO              __at(0x186F);	// @ (0x30D * 8 + 7)
#define                                 SMT1GO_bit          _BIT_ACCESS(SMT1CON1,7)
// PIE1<SMT1IE>
extern volatile __bit                   SMT1IE              __at(0x24FD);	// @ (0x49F * 8 + 5)
#define                                 SMT1IE_bit          _BIT_ACCESS(PIE1,5)
// PIR1<SMT1IF>
extern volatile __bit                   SMT1IF              __at(0x257D);	// @ (0x4AF * 8 + 5)
#define                                 SMT1IF_bit          _BIT_ACCESS(PIR1,5)
// IPR1<SMT1IP>
extern volatile __bit                   SMT1IP              __at(0x1B1D);	// @ (0x363 * 8 + 5)
#define                                 SMT1IP_bit          _BIT_ACCESS(IPR1,5)
// PMD1<SMT1MD>
extern volatile __bit                   SMT1MD              __at(0x30F);	// @ (0x61 * 8 + 7)
#define                                 SMT1MD_bit          _BIT_ACCESS(PMD1,7)
// SMT1CON1<SMT1MODE0>
extern volatile __bit                   SMT1MODE0           __at(0x1868);	// @ (0x30D * 8 + 0)
#define                                 SMT1MODE0_bit       _BIT_ACCESS(SMT1CON1,0)
// SMT1CON1<SMT1MODE1>
extern volatile __bit                   SMT1MODE1           __at(0x1869);	// @ (0x30D * 8 + 1)
#define                                 SMT1MODE1_bit       _BIT_ACCESS(SMT1CON1,1)
// SMT1CON1<SMT1MODE2>
extern volatile __bit                   SMT1MODE2           __at(0x186A);	// @ (0x30D * 8 + 2)
#define                                 SMT1MODE2_bit       _BIT_ACCESS(SMT1CON1,2)
// SMT1CON1<SMT1MODE3>
extern volatile __bit                   SMT1MODE3           __at(0x186B);	// @ (0x30D * 8 + 3)
#define                                 SMT1MODE3_bit       _BIT_ACCESS(SMT1CON1,3)
// SMT1PRL<SMT1PR0>
extern volatile __bit                   SMT1PR0             __at(0x1848);	// @ (0x309 * 8 + 0)
#define                                 SMT1PR0_bit         _BIT_ACCESS(SMT1PRL,0)
// SMT1PRL<SMT1PR1>
extern volatile __bit                   SMT1PR1             __at(0x1849);	// @ (0x309 * 8 + 1)
#define                                 SMT1PR1_bit         _BIT_ACCESS(SMT1PRL,1)
// SMT1PRH<SMT1PR10>
extern volatile __bit                   SMT1PR10            __at(0x1852);	// @ (0x30A * 8 + 2)
#define                                 SMT1PR10_bit        _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<SMT1PR11>
extern volatile __bit                   SMT1PR11            __at(0x1853);	// @ (0x30A * 8 + 3)
#define                                 SMT1PR11_bit        _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<SMT1PR12>
extern volatile __bit                   SMT1PR12            __at(0x1854);	// @ (0x30A * 8 + 4)
#define                                 SMT1PR12_bit        _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<SMT1PR13>
extern volatile __bit                   SMT1PR13            __at(0x1855);	// @ (0x30A * 8 + 5)
#define                                 SMT1PR13_bit        _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<SMT1PR14>
extern volatile __bit                   SMT1PR14            __at(0x1856);	// @ (0x30A * 8 + 6)
#define                                 SMT1PR14_bit        _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<SMT1PR15>
extern volatile __bit                   SMT1PR15            __at(0x1857);	// @ (0x30A * 8 + 7)
#define                                 SMT1PR15_bit        _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<SMT1PR16>
extern volatile __bit                   SMT1PR16            __at(0x1858);	// @ (0x30B * 8 + 0)
#define                                 SMT1PR16_bit        _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<SMT1PR17>
extern volatile __bit                   SMT1PR17            __at(0x1859);	// @ (0x30B * 8 + 1)
#define                                 SMT1PR17_bit        _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<SMT1PR18>
extern volatile __bit                   SMT1PR18            __at(0x185A);	// @ (0x30B * 8 + 2)
#define                                 SMT1PR18_bit        _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<SMT1PR19>
extern volatile __bit                   SMT1PR19            __at(0x185B);	// @ (0x30B * 8 + 3)
#define                                 SMT1PR19_bit        _BIT_ACCESS(SMT1PRU,3)
// SMT1PRL<SMT1PR2>
extern volatile __bit                   SMT1PR2             __at(0x184A);	// @ (0x309 * 8 + 2)
#define                                 SMT1PR2_bit         _BIT_ACCESS(SMT1PRL,2)
// SMT1PRU<SMT1PR20>
extern volatile __bit                   SMT1PR20            __at(0x185C);	// @ (0x30B * 8 + 4)
#define                                 SMT1PR20_bit        _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<SMT1PR21>
extern volatile __bit                   SMT1PR21            __at(0x185D);	// @ (0x30B * 8 + 5)
#define                                 SMT1PR21_bit        _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<SMT1PR22>
extern volatile __bit                   SMT1PR22            __at(0x185E);	// @ (0x30B * 8 + 6)
#define                                 SMT1PR22_bit        _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<SMT1PR23>
extern volatile __bit                   SMT1PR23            __at(0x185F);	// @ (0x30B * 8 + 7)
#define                                 SMT1PR23_bit        _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<SMT1PR3>
extern volatile __bit                   SMT1PR3             __at(0x184B);	// @ (0x309 * 8 + 3)
#define                                 SMT1PR3_bit         _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<SMT1PR4>
extern volatile __bit                   SMT1PR4             __at(0x184C);	// @ (0x309 * 8 + 4)
#define                                 SMT1PR4_bit         _BIT_ACCESS(SMT1PRL,4)
// SMT1PRL<SMT1PR5>
extern volatile __bit                   SMT1PR5             __at(0x184D);	// @ (0x309 * 8 + 5)
#define                                 SMT1PR5_bit         _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<SMT1PR6>
extern volatile __bit                   SMT1PR6             __at(0x184E);	// @ (0x309 * 8 + 6)
#define                                 SMT1PR6_bit         _BIT_ACCESS(SMT1PRL,6)
// SMT1PRL<SMT1PR7>
extern volatile __bit                   SMT1PR7             __at(0x184F);	// @ (0x309 * 8 + 7)
#define                                 SMT1PR7_bit         _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<SMT1PR8>
extern volatile __bit                   SMT1PR8             __at(0x1850);	// @ (0x30A * 8 + 0)
#define                                 SMT1PR8_bit         _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<SMT1PR9>
extern volatile __bit                   SMT1PR9             __at(0x1851);	// @ (0x30A * 8 + 1)
#define                                 SMT1PR9_bit         _BIT_ACCESS(SMT1PRH,1)
// PIE1<SMT1PRAIE>
extern volatile __bit                   SMT1PRAIE           __at(0x24FE);	// @ (0x49F * 8 + 6)
#define                                 SMT1PRAIE_bit       _BIT_ACCESS(PIE1,6)
// PIR1<SMT1PRAIF>
extern volatile __bit                   SMT1PRAIF           __at(0x257E);	// @ (0x4AF * 8 + 6)
#define                                 SMT1PRAIF_bit       _BIT_ACCESS(PIR1,6)
// IPR1<SMT1PRAIP>
extern volatile __bit                   SMT1PRAIP           __at(0x1B1E);	// @ (0x363 * 8 + 6)
#define                                 SMT1PRAIP_bit       _BIT_ACCESS(IPR1,6)
// SMT1CON0<SMT1PS0>
extern volatile __bit                   SMT1PS0             __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 SMT1PS0_bit         _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<SMT1PS1>
extern volatile __bit                   SMT1PS1             __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 SMT1PS1_bit         _BIT_ACCESS(SMT1CON0,1)
// PIE1<SMT1PWAIE>
extern volatile __bit                   SMT1PWAIE           __at(0x24FF);	// @ (0x49F * 8 + 7)
#define                                 SMT1PWAIE_bit       _BIT_ACCESS(PIE1,7)
// PIR1<SMT1PWAIF>
extern volatile __bit                   SMT1PWAIF           __at(0x257F);	// @ (0x4AF * 8 + 7)
#define                                 SMT1PWAIF_bit       _BIT_ACCESS(PIR1,7)
// IPR1<SMT1PWAIP>
extern volatile __bit                   SMT1PWAIP           __at(0x1B1F);	// @ (0x363 * 8 + 7)
#define                                 SMT1PWAIP_bit       _BIT_ACCESS(IPR1,7)
// SMT1CON1<SMT1REPEAT>
extern volatile __bit                   SMT1REPEAT          __at(0x186E);	// @ (0x30D * 8 + 6)
#define                                 SMT1REPEAT_bit      _BIT_ACCESS(SMT1CON1,6)
// SMT1STAT<SMT1RESET>
extern volatile __bit                   SMT1RESET           __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 SMT1RESET_bit       _BIT_ACCESS(SMT1STAT,5)
// SMT1SIGPPS<SMT1SIGPPS0>
extern volatile __bit                   SMT1SIGPPS0         __at(0x12D0);	// @ (0x25A * 8 + 0)
#define                                 SMT1SIGPPS0_bit     _BIT_ACCESS(SMT1SIGPPS,0)
// SMT1SIGPPS<SMT1SIGPPS1>
extern volatile __bit                   SMT1SIGPPS1         __at(0x12D1);	// @ (0x25A * 8 + 1)
#define                                 SMT1SIGPPS1_bit     _BIT_ACCESS(SMT1SIGPPS,1)
// SMT1SIGPPS<SMT1SIGPPS2>
extern volatile __bit                   SMT1SIGPPS2         __at(0x12D2);	// @ (0x25A * 8 + 2)
#define                                 SMT1SIGPPS2_bit     _BIT_ACCESS(SMT1SIGPPS,2)
// SMT1SIGPPS<SMT1SIGPPS3>
extern volatile __bit                   SMT1SIGPPS3         __at(0x12D3);	// @ (0x25A * 8 + 3)
#define                                 SMT1SIGPPS3_bit     _BIT_ACCESS(SMT1SIGPPS,3)
// SMT1SIGPPS<SMT1SIGPPS4>
extern volatile __bit                   SMT1SIGPPS4         __at(0x12D4);	// @ (0x25A * 8 + 4)
#define                                 SMT1SIGPPS4_bit     _BIT_ACCESS(SMT1SIGPPS,4)
// SMT1SIGPPS<SMT1SIGPPS5>
extern volatile __bit                   SMT1SIGPPS5         __at(0x12D5);	// @ (0x25A * 8 + 5)
#define                                 SMT1SIGPPS5_bit     _BIT_ACCESS(SMT1SIGPPS,5)
// SMT1SIG<SMT1SSEL0>
extern volatile __bit                   SMT1SSEL0           __at(0x1880);	// @ (0x310 * 8 + 0)
#define                                 SMT1SSEL0_bit       _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SMT1SSEL1>
extern volatile __bit                   SMT1SSEL1           __at(0x1881);	// @ (0x310 * 8 + 1)
#define                                 SMT1SSEL1_bit       _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SMT1SSEL2>
extern volatile __bit                   SMT1SSEL2           __at(0x1882);	// @ (0x310 * 8 + 2)
#define                                 SMT1SSEL2_bit       _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SMT1SSEL3>
extern volatile __bit                   SMT1SSEL3           __at(0x1883);	// @ (0x310 * 8 + 3)
#define                                 SMT1SSEL3_bit       _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SMT1SSEL4>
extern volatile __bit                   SMT1SSEL4           __at(0x1884);	// @ (0x310 * 8 + 4)
#define                                 SMT1SSEL4_bit       _BIT_ACCESS(SMT1SIG,4)
// SMT1SIG<SMT1SSEL5>
extern volatile __bit                   SMT1SSEL5           __at(0x1885);	// @ (0x310 * 8 + 5)
#define                                 SMT1SSEL5_bit       _BIT_ACCESS(SMT1SIG,5)
// SMT1TMRL<SMT1TMR0>
extern volatile __bit                   SMT1TMR0            __at(0x1800);	// @ (0x300 * 8 + 0)
#define                                 SMT1TMR0_bit        _BIT_ACCESS(SMT1TMRL,0)
// SMT1TMRL<SMT1TMR1>
extern volatile __bit                   SMT1TMR1            __at(0x1801);	// @ (0x300 * 8 + 1)
#define                                 SMT1TMR1_bit        _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<SMT1TMR10>
extern volatile __bit                   SMT1TMR10           __at(0x180A);	// @ (0x301 * 8 + 2)
#define                                 SMT1TMR10_bit       _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<SMT1TMR11>
extern volatile __bit                   SMT1TMR11           __at(0x180B);	// @ (0x301 * 8 + 3)
#define                                 SMT1TMR11_bit       _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<SMT1TMR12>
extern volatile __bit                   SMT1TMR12           __at(0x180C);	// @ (0x301 * 8 + 4)
#define                                 SMT1TMR12_bit       _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<SMT1TMR13>
extern volatile __bit                   SMT1TMR13           __at(0x180D);	// @ (0x301 * 8 + 5)
#define                                 SMT1TMR13_bit       _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<SMT1TMR14>
extern volatile __bit                   SMT1TMR14           __at(0x180E);	// @ (0x301 * 8 + 6)
#define                                 SMT1TMR14_bit       _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<SMT1TMR15>
extern volatile __bit                   SMT1TMR15           __at(0x180F);	// @ (0x301 * 8 + 7)
#define                                 SMT1TMR15_bit       _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<SMT1TMR16>
extern volatile __bit                   SMT1TMR16           __at(0x1810);	// @ (0x302 * 8 + 0)
#define                                 SMT1TMR16_bit       _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<SMT1TMR17>
extern volatile __bit                   SMT1TMR17           __at(0x1811);	// @ (0x302 * 8 + 1)
#define                                 SMT1TMR17_bit       _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<SMT1TMR18>
extern volatile __bit                   SMT1TMR18           __at(0x1812);	// @ (0x302 * 8 + 2)
#define                                 SMT1TMR18_bit       _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<SMT1TMR19>
extern volatile __bit                   SMT1TMR19           __at(0x1813);	// @ (0x302 * 8 + 3)
#define                                 SMT1TMR19_bit       _BIT_ACCESS(SMT1TMRU,3)
// SMT1TMRL<SMT1TMR2>
extern volatile __bit                   SMT1TMR2            __at(0x1802);	// @ (0x300 * 8 + 2)
#define                                 SMT1TMR2_bit        _BIT_ACCESS(SMT1TMRL,2)
// SMT1TMRU<SMT1TMR20>
extern volatile __bit                   SMT1TMR20           __at(0x1814);	// @ (0x302 * 8 + 4)
#define                                 SMT1TMR20_bit       _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<SMT1TMR21>
extern volatile __bit                   SMT1TMR21           __at(0x1815);	// @ (0x302 * 8 + 5)
#define                                 SMT1TMR21_bit       _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<SMT1TMR22>
extern volatile __bit                   SMT1TMR22           __at(0x1816);	// @ (0x302 * 8 + 6)
#define                                 SMT1TMR22_bit       _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<SMT1TMR23>
extern volatile __bit                   SMT1TMR23           __at(0x1817);	// @ (0x302 * 8 + 7)
#define                                 SMT1TMR23_bit       _BIT_ACCESS(SMT1TMRU,7)
// SMT1TMRL<SMT1TMR3>
extern volatile __bit                   SMT1TMR3            __at(0x1803);	// @ (0x300 * 8 + 3)
#define                                 SMT1TMR3_bit        _BIT_ACCESS(SMT1TMRL,3)
// SMT1TMRL<SMT1TMR4>
extern volatile __bit                   SMT1TMR4            __at(0x1804);	// @ (0x300 * 8 + 4)
#define                                 SMT1TMR4_bit        _BIT_ACCESS(SMT1TMRL,4)
// SMT1TMRL<SMT1TMR5>
extern volatile __bit                   SMT1TMR5            __at(0x1805);	// @ (0x300 * 8 + 5)
#define                                 SMT1TMR5_bit        _BIT_ACCESS(SMT1TMRL,5)
// SMT1TMRL<SMT1TMR6>
extern volatile __bit                   SMT1TMR6            __at(0x1806);	// @ (0x300 * 8 + 6)
#define                                 SMT1TMR6_bit        _BIT_ACCESS(SMT1TMRL,6)
// SMT1TMRL<SMT1TMR7>
extern volatile __bit                   SMT1TMR7            __at(0x1807);	// @ (0x300 * 8 + 7)
#define                                 SMT1TMR7_bit        _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<SMT1TMR8>
extern volatile __bit                   SMT1TMR8            __at(0x1808);	// @ (0x301 * 8 + 0)
#define                                 SMT1TMR8_bit        _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<SMT1TMR9>
extern volatile __bit                   SMT1TMR9            __at(0x1809);	// @ (0x301 * 8 + 1)
#define                                 SMT1TMR9_bit        _BIT_ACCESS(SMT1TMRH,1)
// SMT1STAT<SMT1TS>
extern volatile __bit                   SMT1TS              __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 SMT1TS_bit          _BIT_ACCESS(SMT1STAT,2)
// SMT1WINPPS<SMT1WINPPS0>
extern volatile __bit                   SMT1WINPPS0         __at(0x12C8);	// @ (0x259 * 8 + 0)
#define                                 SMT1WINPPS0_bit     _BIT_ACCESS(SMT1WINPPS,0)
// SMT1WINPPS<SMT1WINPPS1>
extern volatile __bit                   SMT1WINPPS1         __at(0x12C9);	// @ (0x259 * 8 + 1)
#define                                 SMT1WINPPS1_bit     _BIT_ACCESS(SMT1WINPPS,1)
// SMT1WINPPS<SMT1WINPPS2>
extern volatile __bit                   SMT1WINPPS2         __at(0x12CA);	// @ (0x259 * 8 + 2)
#define                                 SMT1WINPPS2_bit     _BIT_ACCESS(SMT1WINPPS,2)
// SMT1WINPPS<SMT1WINPPS3>
extern volatile __bit                   SMT1WINPPS3         __at(0x12CB);	// @ (0x259 * 8 + 3)
#define                                 SMT1WINPPS3_bit     _BIT_ACCESS(SMT1WINPPS,3)
// SMT1WINPPS<SMT1WINPPS4>
extern volatile __bit                   SMT1WINPPS4         __at(0x12CC);	// @ (0x259 * 8 + 4)
#define                                 SMT1WINPPS4_bit     _BIT_ACCESS(SMT1WINPPS,4)
// SMT1WINPPS<SMT1WINPPS5>
extern volatile __bit                   SMT1WINPPS5         __at(0x12CD);	// @ (0x259 * 8 + 5)
#define                                 SMT1WINPPS5_bit     _BIT_ACCESS(SMT1WINPPS,5)
// SMT1STAT<SMT1WS>
extern volatile __bit                   SMT1WS              __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 SMT1WS_bit          _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<SMT1WSEL0>
extern volatile __bit                   SMT1WSEL0           __at(0x1888);	// @ (0x311 * 8 + 0)
#define                                 SMT1WSEL0_bit       _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<SMT1WSEL1>
extern volatile __bit                   SMT1WSEL1           __at(0x1889);	// @ (0x311 * 8 + 1)
#define                                 SMT1WSEL1_bit       _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<SMT1WSEL2>
extern volatile __bit                   SMT1WSEL2           __at(0x188A);	// @ (0x311 * 8 + 2)
#define                                 SMT1WSEL2_bit       _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<SMT1WSEL3>
extern volatile __bit                   SMT1WSEL3           __at(0x188B);	// @ (0x311 * 8 + 3)
#define                                 SMT1WSEL3_bit       _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<SMT1WSEL4>
extern volatile __bit                   SMT1WSEL4           __at(0x188C);	// @ (0x311 * 8 + 4)
#define                                 SMT1WSEL4_bit       _BIT_ACCESS(SMT1WIN,4)
// SMT1WIN<SMT1WSEL5>
extern volatile __bit                   SMT1WSEL5           __at(0x188D);	// @ (0x311 * 8 + 5)
#define                                 SMT1WSEL5_bit       _BIT_ACCESS(SMT1WIN,5)
// ADCON3<SOI>
extern volatile __bit                   SOI                 __at(0x1FB3);	// @ (0x3F6 * 8 + 3)
#define                                 SOI_bit             _BIT_ACCESS(ADCON3,3)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x593);	// @ (0xB2 * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x59B);	// @ (0xB3 * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x57E);	// @ (0xAF * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// STKPTR<SP0>
extern volatile __bit                   SP0                 __at(0x27E0);	// @ (0x4FC * 8 + 0)
#define                                 SP0_bit             _BIT_ACCESS(STKPTR,0)
// STKPTR<SP1>
extern volatile __bit                   SP1                 __at(0x27E1);	// @ (0x4FC * 8 + 1)
#define                                 SP1_bit             _BIT_ACCESS(STKPTR,1)
// STKPTR<SP2>
extern volatile __bit                   SP2                 __at(0x27E2);	// @ (0x4FC * 8 + 2)
#define                                 SP2_bit             _BIT_ACCESS(STKPTR,2)
// STKPTR<SP3>
extern volatile __bit                   SP3                 __at(0x27E3);	// @ (0x4FC * 8 + 3)
#define                                 SP3_bit             _BIT_ACCESS(STKPTR,3)
// STKPTR<SP4>
extern volatile __bit                   SP4                 __at(0x27E4);	// @ (0x4FC * 8 + 4)
#define                                 SP4_bit             _BIT_ACCESS(STKPTR,4)
// STKPTR<SP5>
extern volatile __bit                   SP5                 __at(0x27E5);	// @ (0x4FC * 8 + 5)
#define                                 SP5_bit             _BIT_ACCESS(STKPTR,5)
// SPI1CON0<SPI1BMODE>
extern volatile __bit                   SPI1BMODE           __at(0x420);	// @ (0x84 * 8 + 0)
#define                                 SPI1BMODE_bit       _BIT_ACCESS(SPI1CON0,0)
// SPI1CON2<SPI1BUSY>
extern volatile __bit                   SPI1BUSY            __at(0x437);	// @ (0x86 * 8 + 7)
#define                                 SPI1BUSY_bit        _BIT_ACCESS(SPI1CON2,7)
// SPI1CON1<SPI1CKE>
extern volatile __bit                   SPI1CKE             __at(0x42E);	// @ (0x85 * 8 + 6)
#define                                 SPI1CKE_bit         _BIT_ACCESS(SPI1CON1,6)
// SPI1CON1<SPI1CKP>
extern volatile __bit                   SPI1CKP             __at(0x42D);	// @ (0x85 * 8 + 5)
#define                                 SPI1CKP_bit         _BIT_ACCESS(SPI1CON1,5)
// SPI1CLK<SPI1CLKSEL0>
extern volatile __bit                   SPI1CLKSEL0         __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 SPI1CLKSEL0_bit     _BIT_ACCESS(SPI1CLK,0)
// SPI1CLK<SPI1CLKSEL1>
extern volatile __bit                   SPI1CLKSEL1         __at(0x461);	// @ (0x8C * 8 + 1)
#define                                 SPI1CLKSEL1_bit     _BIT_ACCESS(SPI1CLK,1)
// SPI1CLK<SPI1CLKSEL2>
extern volatile __bit                   SPI1CLKSEL2         __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 SPI1CLKSEL2_bit     _BIT_ACCESS(SPI1CLK,2)
// SPI1CLK<SPI1CLKSEL3>
extern volatile __bit                   SPI1CLKSEL3         __at(0x463);	// @ (0x8C * 8 + 3)
#define                                 SPI1CLKSEL3_bit     _BIT_ACCESS(SPI1CLK,3)
// SPI1CLK<SPI1CLKSEL4>
extern volatile __bit                   SPI1CLKSEL4         __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 SPI1CLKSEL4_bit     _BIT_ACCESS(SPI1CLK,4)
// SPI1STATUS<SPI1CLRBF>
extern volatile __bit                   SPI1CLRBF           __at(0x43A);	// @ (0x87 * 8 + 2)
#define                                 SPI1CLRBF_bit       _BIT_ACCESS(SPI1STATUS,2)
// SPI1INTE<SPI1EOSIE>
extern volatile __bit                   SPI1EOSIE           __at(0x45C);	// @ (0x8B * 8 + 4)
#define                                 SPI1EOSIE_bit       _BIT_ACCESS(SPI1INTE,4)
// SPI1INTF<SPI1EOSIF>
extern volatile __bit                   SPI1EOSIF           __at(0x454);	// @ (0x8A * 8 + 4)
#define                                 SPI1EOSIF_bit       _BIT_ACCESS(SPI1INTF,4)
// SPI1CON1<SPI1FST>
extern volatile __bit                   SPI1FST             __at(0x42C);	// @ (0x85 * 8 + 4)
#define                                 SPI1FST_bit         _BIT_ACCESS(SPI1CON1,4)
// PIE3<SPI1IE>
extern volatile __bit                   SPI1IE              __at(0x250A);	// @ (0x4A1 * 8 + 2)
#define                                 SPI1IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<SPI1IF>
extern volatile __bit                   SPI1IF              __at(0x258A);	// @ (0x4B1 * 8 + 2)
#define                                 SPI1IF_bit          _BIT_ACCESS(PIR3,2)
// IPR3<SPI1IP>
extern volatile __bit                   SPI1IP              __at(0x1B2A);	// @ (0x365 * 8 + 2)
#define                                 SPI1IP_bit          _BIT_ACCESS(IPR3,2)
// SPI1CON0<SPI1LSBF>
extern volatile __bit                   SPI1LSBF            __at(0x422);	// @ (0x84 * 8 + 2)
#define                                 SPI1LSBF_bit        _BIT_ACCESS(SPI1CON0,2)
// PMD6<SPI1MD>
extern volatile __bit                   SPI1MD              __at(0x331);	// @ (0x66 * 8 + 1)
#define                                 SPI1MD_bit          _BIT_ACCESS(PMD6,1)
// SPI1CON0<SPI1MST>
extern volatile __bit                   SPI1MST             __at(0x421);	// @ (0x84 * 8 + 1)
#define                                 SPI1MST_bit         _BIT_ACCESS(SPI1CON0,1)
// SPI1STATUS<SPI1RXBF>
extern volatile __bit                   SPI1RXBF            __at(0x438);	// @ (0x87 * 8 + 0)
#define                                 SPI1RXBF_bit        _BIT_ACCESS(SPI1STATUS,0)
// PIE3<SPI1RXIE>
extern volatile __bit                   SPI1RXIE            __at(0x2508);	// @ (0x4A1 * 8 + 0)
#define                                 SPI1RXIE_bit        _BIT_ACCESS(PIE3,0)
// PIR3<SPI1RXIF>
extern volatile __bit                   SPI1RXIF            __at(0x2588);	// @ (0x4B1 * 8 + 0)
#define                                 SPI1RXIF_bit        _BIT_ACCESS(PIR3,0)
// IPR3<SPI1RXIP>
extern volatile __bit                   SPI1RXIP            __at(0x1B28);	// @ (0x365 * 8 + 0)
#define                                 SPI1RXIP_bit        _BIT_ACCESS(IPR3,0)
// SPI1INTE<SPI1RXOIE>
extern volatile __bit                   SPI1RXOIE           __at(0x45A);	// @ (0x8B * 8 + 2)
#define                                 SPI1RXOIE_bit       _BIT_ACCESS(SPI1INTE,2)
// SPI1INTF<SPI1RXOIF>
extern volatile __bit                   SPI1RXOIF           __at(0x452);	// @ (0x8A * 8 + 2)
#define                                 SPI1RXOIF_bit       _BIT_ACCESS(SPI1INTF,2)
// SPI1CON2<SPI1RXR>
extern volatile __bit                   SPI1RXR             __at(0x430);	// @ (0x86 * 8 + 0)
#define                                 SPI1RXR_bit         _BIT_ACCESS(SPI1CON2,0)
// SPI1STATUS<SPI1RXRE>
extern volatile __bit                   SPI1RXRE            __at(0x43B);	// @ (0x87 * 8 + 3)
#define                                 SPI1RXRE_bit        _BIT_ACCESS(SPI1STATUS,3)
// SPI1SCKPPS<SPI1SCKPPS0>
extern volatile __bit                   SPI1SCKPPS0         __at(0x1350);	// @ (0x26A * 8 + 0)
#define                                 SPI1SCKPPS0_bit     _BIT_ACCESS(SPI1SCKPPS,0)
// SPI1SCKPPS<SPI1SCKPPS1>
extern volatile __bit                   SPI1SCKPPS1         __at(0x1351);	// @ (0x26A * 8 + 1)
#define                                 SPI1SCKPPS1_bit     _BIT_ACCESS(SPI1SCKPPS,1)
// SPI1SCKPPS<SPI1SCKPPS2>
extern volatile __bit                   SPI1SCKPPS2         __at(0x1352);	// @ (0x26A * 8 + 2)
#define                                 SPI1SCKPPS2_bit     _BIT_ACCESS(SPI1SCKPPS,2)
// SPI1SCKPPS<SPI1SCKPPS3>
extern volatile __bit                   SPI1SCKPPS3         __at(0x1353);	// @ (0x26A * 8 + 3)
#define                                 SPI1SCKPPS3_bit     _BIT_ACCESS(SPI1SCKPPS,3)
// SPI1SCKPPS<SPI1SCKPPS4>
extern volatile __bit                   SPI1SCKPPS4         __at(0x1354);	// @ (0x26A * 8 + 4)
#define                                 SPI1SCKPPS4_bit     _BIT_ACCESS(SPI1SCKPPS,4)
// SPI1CON1<SPI1SDIP>
extern volatile __bit                   SPI1SDIP            __at(0x429);	// @ (0x85 * 8 + 1)
#define                                 SPI1SDIP_bit        _BIT_ACCESS(SPI1CON1,1)
// SPI1SDIPPS<SPI1SDIPPS0>
extern volatile __bit                   SPI1SDIPPS0         __at(0x1358);	// @ (0x26B * 8 + 0)
#define                                 SPI1SDIPPS0_bit     _BIT_ACCESS(SPI1SDIPPS,0)
// SPI1SDIPPS<SPI1SDIPPS1>
extern volatile __bit                   SPI1SDIPPS1         __at(0x1359);	// @ (0x26B * 8 + 1)
#define                                 SPI1SDIPPS1_bit     _BIT_ACCESS(SPI1SDIPPS,1)
// SPI1SDIPPS<SPI1SDIPPS2>
extern volatile __bit                   SPI1SDIPPS2         __at(0x135A);	// @ (0x26B * 8 + 2)
#define                                 SPI1SDIPPS2_bit     _BIT_ACCESS(SPI1SDIPPS,2)
// SPI1SDIPPS<SPI1SDIPPS3>
extern volatile __bit                   SPI1SDIPPS3         __at(0x135B);	// @ (0x26B * 8 + 3)
#define                                 SPI1SDIPPS3_bit     _BIT_ACCESS(SPI1SDIPPS,3)
// SPI1SDIPPS<SPI1SDIPPS4>
extern volatile __bit                   SPI1SDIPPS4         __at(0x135C);	// @ (0x26B * 8 + 4)
#define                                 SPI1SDIPPS4_bit     _BIT_ACCESS(SPI1SDIPPS,4)
// SPI1CON1<SPI1SDOP>
extern volatile __bit                   SPI1SDOP            __at(0x428);	// @ (0x85 * 8 + 0)
#define                                 SPI1SDOP_bit        _BIT_ACCESS(SPI1CON1,0)
// SPI1CON1<SPI1SMP>
extern volatile __bit                   SPI1SMP             __at(0x42F);	// @ (0x85 * 8 + 7)
#define                                 SPI1SMP_bit         _BIT_ACCESS(SPI1CON1,7)
// SPI1INTE<SPI1SOSIE>
extern volatile __bit                   SPI1SOSIE           __at(0x45D);	// @ (0x8B * 8 + 5)
#define                                 SPI1SOSIE_bit       _BIT_ACCESS(SPI1INTE,5)
// SPI1INTF<SPI1SOSIF>
extern volatile __bit                   SPI1SOSIF           __at(0x455);	// @ (0x8A * 8 + 5)
#define                                 SPI1SOSIF_bit       _BIT_ACCESS(SPI1INTF,5)
// SPI1CON0<SPI1SPIEN>
extern volatile __bit                   SPI1SPIEN           __at(0x427);	// @ (0x84 * 8 + 7)
#define                                 SPI1SPIEN_bit       _BIT_ACCESS(SPI1CON0,7)
// SPI1INTE<SPI1SRMTIE>
extern volatile __bit                   SPI1SRMTIE          __at(0x45F);	// @ (0x8B * 8 + 7)
#define                                 SPI1SRMTIE_bit      _BIT_ACCESS(SPI1INTE,7)
// SPI1INTF<SPI1SRMTIF>
extern volatile __bit                   SPI1SRMTIF          __at(0x457);	// @ (0x8A * 8 + 7)
#define                                 SPI1SRMTIF_bit      _BIT_ACCESS(SPI1INTF,7)
// SPI1CON2<SPI1SSET>
extern volatile __bit                   SPI1SSET            __at(0x432);	// @ (0x86 * 8 + 2)
#define                                 SPI1SSET_bit        _BIT_ACCESS(SPI1CON2,2)
// SPI1CON2<SPI1SSFLT>
extern volatile __bit                   SPI1SSFLT           __at(0x436);	// @ (0x86 * 8 + 6)
#define                                 SPI1SSFLT_bit       _BIT_ACCESS(SPI1CON2,6)
// SPI1CON1<SPI1SSP>
extern volatile __bit                   SPI1SSP             __at(0x42A);	// @ (0x85 * 8 + 2)
#define                                 SPI1SSP_bit         _BIT_ACCESS(SPI1CON1,2)
// SPI1SSPPS<SPI1SSPPS0>
extern volatile __bit                   SPI1SSPPS0          __at(0x1360);	// @ (0x26C * 8 + 0)
#define                                 SPI1SSPPS0_bit      _BIT_ACCESS(SPI1SSPPS,0)
// SPI1SSPPS<SPI1SSPPS1>
extern volatile __bit                   SPI1SSPPS1          __at(0x1361);	// @ (0x26C * 8 + 1)
#define                                 SPI1SSPPS1_bit      _BIT_ACCESS(SPI1SSPPS,1)
// SPI1SSPPS<SPI1SSPPS2>
extern volatile __bit                   SPI1SSPPS2          __at(0x1362);	// @ (0x26C * 8 + 2)
#define                                 SPI1SSPPS2_bit      _BIT_ACCESS(SPI1SSPPS,2)
// SPI1SSPPS<SPI1SSPPS3>
extern volatile __bit                   SPI1SSPPS3          __at(0x1363);	// @ (0x26C * 8 + 3)
#define                                 SPI1SSPPS3_bit      _BIT_ACCESS(SPI1SSPPS,3)
// SPI1SSPPS<SPI1SSPPS4>
extern volatile __bit                   SPI1SSPPS4          __at(0x1364);	// @ (0x26C * 8 + 4)
#define                                 SPI1SSPPS4_bit      _BIT_ACCESS(SPI1SSPPS,4)
// SPI1INTE<SPI1TCZIE>
extern volatile __bit                   SPI1TCZIE           __at(0x45E);	// @ (0x8B * 8 + 6)
#define                                 SPI1TCZIE_bit       _BIT_ACCESS(SPI1INTE,6)
// SPI1INTF<SPI1TCZIF>
extern volatile __bit                   SPI1TCZIF           __at(0x456);	// @ (0x8A * 8 + 6)
#define                                 SPI1TCZIF_bit       _BIT_ACCESS(SPI1INTF,6)
// SPI1STATUS<SPI1TXBE>
extern volatile __bit                   SPI1TXBE            __at(0x43D);	// @ (0x87 * 8 + 5)
#define                                 SPI1TXBE_bit        _BIT_ACCESS(SPI1STATUS,5)
// PIE3<SPI1TXIE>
extern volatile __bit                   SPI1TXIE            __at(0x2509);	// @ (0x4A1 * 8 + 1)
#define                                 SPI1TXIE_bit        _BIT_ACCESS(PIE3,1)
// PIR3<SPI1TXIF>
extern volatile __bit                   SPI1TXIF            __at(0x2589);	// @ (0x4B1 * 8 + 1)
#define                                 SPI1TXIF_bit        _BIT_ACCESS(PIR3,1)
// IPR3<SPI1TXIP>
extern volatile __bit                   SPI1TXIP            __at(0x1B29);	// @ (0x365 * 8 + 1)
#define                                 SPI1TXIP_bit        _BIT_ACCESS(IPR3,1)
// SPI1CON2<SPI1TXR>
extern volatile __bit                   SPI1TXR             __at(0x431);	// @ (0x86 * 8 + 1)
#define                                 SPI1TXR_bit         _BIT_ACCESS(SPI1CON2,1)
// SPI1INTE<SPI1TXUIE>
extern volatile __bit                   SPI1TXUIE           __at(0x459);	// @ (0x8B * 8 + 1)
#define                                 SPI1TXUIE_bit       _BIT_ACCESS(SPI1INTE,1)
// SPI1INTF<SPI1TXUIF>
extern volatile __bit                   SPI1TXUIF           __at(0x451);	// @ (0x8A * 8 + 1)
#define                                 SPI1TXUIF_bit       _BIT_ACCESS(SPI1INTF,1)
// SPI1STATUS<SPI1TXWE>
extern volatile __bit                   SPI1TXWE            __at(0x43F);	// @ (0x87 * 8 + 7)
#define                                 SPI1TXWE_bit        _BIT_ACCESS(SPI1STATUS,7)
// SPI2CON0<SPI2BMODE>
extern volatile __bit                   SPI2BMODE           __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 SPI2BMODE_bit       _BIT_ACCESS(SPI2CON0,0)
// SPI2CON2<SPI2BUSY>
extern volatile __bit                   SPI2BUSY            __at(0x49F);	// @ (0x93 * 8 + 7)
#define                                 SPI2BUSY_bit        _BIT_ACCESS(SPI2CON2,7)
// SPI2CON1<SPI2CKE>
extern volatile __bit                   SPI2CKE             __at(0x496);	// @ (0x92 * 8 + 6)
#define                                 SPI2CKE_bit         _BIT_ACCESS(SPI2CON1,6)
// SPI2CON1<SPI2CKP>
extern volatile __bit                   SPI2CKP             __at(0x495);	// @ (0x92 * 8 + 5)
#define                                 SPI2CKP_bit         _BIT_ACCESS(SPI2CON1,5)
// SPI2CLK<SPI2CLKSEL0>
extern volatile __bit                   SPI2CLKSEL0         __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 SPI2CLKSEL0_bit     _BIT_ACCESS(SPI2CLK,0)
// SPI2CLK<SPI2CLKSEL1>
extern volatile __bit                   SPI2CLKSEL1         __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 SPI2CLKSEL1_bit     _BIT_ACCESS(SPI2CLK,1)
// SPI2CLK<SPI2CLKSEL2>
extern volatile __bit                   SPI2CLKSEL2         __at(0x4CA);	// @ (0x99 * 8 + 2)
#define                                 SPI2CLKSEL2_bit     _BIT_ACCESS(SPI2CLK,2)
// SPI2CLK<SPI2CLKSEL3>
extern volatile __bit                   SPI2CLKSEL3         __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 SPI2CLKSEL3_bit     _BIT_ACCESS(SPI2CLK,3)
// SPI2CLK<SPI2CLKSEL4>
extern volatile __bit                   SPI2CLKSEL4         __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 SPI2CLKSEL4_bit     _BIT_ACCESS(SPI2CLK,4)
// SPI2STATUS<SPI2CLRBF>
extern volatile __bit                   SPI2CLRBF           __at(0x4A2);	// @ (0x94 * 8 + 2)
#define                                 SPI2CLRBF_bit       _BIT_ACCESS(SPI2STATUS,2)
// SPI2INTE<SPI2EOSIE>
extern volatile __bit                   SPI2EOSIE           __at(0x4C4);	// @ (0x98 * 8 + 4)
#define                                 SPI2EOSIE_bit       _BIT_ACCESS(SPI2INTE,4)
// SPI2INTF<SPI2EOSIF>
extern volatile __bit                   SPI2EOSIF           __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 SPI2EOSIF_bit       _BIT_ACCESS(SPI2INTF,4)
// SPI2CON1<SPI2FST>
extern volatile __bit                   SPI2FST             __at(0x494);	// @ (0x92 * 8 + 4)
#define                                 SPI2FST_bit         _BIT_ACCESS(SPI2CON1,4)
// PIE5<SPI2IE>
extern volatile __bit                   SPI2IE              __at(0x251A);	// @ (0x4A3 * 8 + 2)
#define                                 SPI2IE_bit          _BIT_ACCESS(PIE5,2)
// PIR5<SPI2IF>
extern volatile __bit                   SPI2IF              __at(0x259A);	// @ (0x4B3 * 8 + 2)
#define                                 SPI2IF_bit          _BIT_ACCESS(PIR5,2)
// IPR5<SPI2IP>
extern volatile __bit                   SPI2IP              __at(0x1B3A);	// @ (0x367 * 8 + 2)
#define                                 SPI2IP_bit          _BIT_ACCESS(IPR5,2)
// SPI2CON0<SPI2LSBF>
extern volatile __bit                   SPI2LSBF            __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 SPI2LSBF_bit        _BIT_ACCESS(SPI2CON0,2)
// PMD6<SPI2MD>
extern volatile __bit                   SPI2MD              __at(0x332);	// @ (0x66 * 8 + 2)
#define                                 SPI2MD_bit          _BIT_ACCESS(PMD6,2)
// SPI2CON0<SPI2MST>
extern volatile __bit                   SPI2MST             __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 SPI2MST_bit         _BIT_ACCESS(SPI2CON0,1)
// SPI2STATUS<SPI2RXBF>
extern volatile __bit                   SPI2RXBF            __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 SPI2RXBF_bit        _BIT_ACCESS(SPI2STATUS,0)
// PIE5<SPI2RXIE>
extern volatile __bit                   SPI2RXIE            __at(0x2518);	// @ (0x4A3 * 8 + 0)
#define                                 SPI2RXIE_bit        _BIT_ACCESS(PIE5,0)
// PIR5<SPI2RXIF>
extern volatile __bit                   SPI2RXIF            __at(0x2598);	// @ (0x4B3 * 8 + 0)
#define                                 SPI2RXIF_bit        _BIT_ACCESS(PIR5,0)
// IPR5<SPI2RXIP>
extern volatile __bit                   SPI2RXIP            __at(0x1B38);	// @ (0x367 * 8 + 0)
#define                                 SPI2RXIP_bit        _BIT_ACCESS(IPR5,0)
// SPI2INTE<SPI2RXOIE>
extern volatile __bit                   SPI2RXOIE           __at(0x4C2);	// @ (0x98 * 8 + 2)
#define                                 SPI2RXOIE_bit       _BIT_ACCESS(SPI2INTE,2)
// SPI2INTF<SPI2RXOIF>
extern volatile __bit                   SPI2RXOIF           __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 SPI2RXOIF_bit       _BIT_ACCESS(SPI2INTF,2)
// SPI2CON2<SPI2RXR>
extern volatile __bit                   SPI2RXR             __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 SPI2RXR_bit         _BIT_ACCESS(SPI2CON2,0)
// SPI2STATUS<SPI2RXRE>
extern volatile __bit                   SPI2RXRE            __at(0x4A3);	// @ (0x94 * 8 + 3)
#define                                 SPI2RXRE_bit        _BIT_ACCESS(SPI2STATUS,3)
// SPI2SCKPPS<SPI2SCKPPS0>
extern volatile __bit                   SPI2SCKPPS0         __at(0x1368);	// @ (0x26D * 8 + 0)
#define                                 SPI2SCKPPS0_bit     _BIT_ACCESS(SPI2SCKPPS,0)
// SPI2SCKPPS<SPI2SCKPPS1>
extern volatile __bit                   SPI2SCKPPS1         __at(0x1369);	// @ (0x26D * 8 + 1)
#define                                 SPI2SCKPPS1_bit     _BIT_ACCESS(SPI2SCKPPS,1)
// SPI2SCKPPS<SPI2SCKPPS2>
extern volatile __bit                   SPI2SCKPPS2         __at(0x136A);	// @ (0x26D * 8 + 2)
#define                                 SPI2SCKPPS2_bit     _BIT_ACCESS(SPI2SCKPPS,2)
// SPI2SCKPPS<SPI2SCKPPS3>
extern volatile __bit                   SPI2SCKPPS3         __at(0x136B);	// @ (0x26D * 8 + 3)
#define                                 SPI2SCKPPS3_bit     _BIT_ACCESS(SPI2SCKPPS,3)
// SPI2SCKPPS<SPI2SCKPPS4>
extern volatile __bit                   SPI2SCKPPS4         __at(0x136C);	// @ (0x26D * 8 + 4)
#define                                 SPI2SCKPPS4_bit     _BIT_ACCESS(SPI2SCKPPS,4)
// SPI2CON1<SPI2SDIP>
extern volatile __bit                   SPI2SDIP            __at(0x491);	// @ (0x92 * 8 + 1)
#define                                 SPI2SDIP_bit        _BIT_ACCESS(SPI2CON1,1)
// SPI2SDIPPS<SPI2SDIPPS0>
extern volatile __bit                   SPI2SDIPPS0         __at(0x1370);	// @ (0x26E * 8 + 0)
#define                                 SPI2SDIPPS0_bit     _BIT_ACCESS(SPI2SDIPPS,0)
// SPI2SDIPPS<SPI2SDIPPS1>
extern volatile __bit                   SPI2SDIPPS1         __at(0x1371);	// @ (0x26E * 8 + 1)
#define                                 SPI2SDIPPS1_bit     _BIT_ACCESS(SPI2SDIPPS,1)
// SPI2SDIPPS<SPI2SDIPPS2>
extern volatile __bit                   SPI2SDIPPS2         __at(0x1372);	// @ (0x26E * 8 + 2)
#define                                 SPI2SDIPPS2_bit     _BIT_ACCESS(SPI2SDIPPS,2)
// SPI2SDIPPS<SPI2SDIPPS3>
extern volatile __bit                   SPI2SDIPPS3         __at(0x1373);	// @ (0x26E * 8 + 3)
#define                                 SPI2SDIPPS3_bit     _BIT_ACCESS(SPI2SDIPPS,3)
// SPI2SDIPPS<SPI2SDIPPS4>
extern volatile __bit                   SPI2SDIPPS4         __at(0x1374);	// @ (0x26E * 8 + 4)
#define                                 SPI2SDIPPS4_bit     _BIT_ACCESS(SPI2SDIPPS,4)
// SPI2CON1<SPI2SDOP>
extern volatile __bit                   SPI2SDOP            __at(0x490);	// @ (0x92 * 8 + 0)
#define                                 SPI2SDOP_bit        _BIT_ACCESS(SPI2CON1,0)
// SPI2CON1<SPI2SMP>
extern volatile __bit                   SPI2SMP             __at(0x497);	// @ (0x92 * 8 + 7)
#define                                 SPI2SMP_bit         _BIT_ACCESS(SPI2CON1,7)
// SPI2INTE<SPI2SOSIE>
extern volatile __bit                   SPI2SOSIE           __at(0x4C5);	// @ (0x98 * 8 + 5)
#define                                 SPI2SOSIE_bit       _BIT_ACCESS(SPI2INTE,5)
// SPI2INTF<SPI2SOSIF>
extern volatile __bit                   SPI2SOSIF           __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 SPI2SOSIF_bit       _BIT_ACCESS(SPI2INTF,5)
// SPI2CON0<SPI2SPIEN>
extern volatile __bit                   SPI2SPIEN           __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 SPI2SPIEN_bit       _BIT_ACCESS(SPI2CON0,7)
// SPI2INTE<SPI2SRMTIE>
extern volatile __bit                   SPI2SRMTIE          __at(0x4C7);	// @ (0x98 * 8 + 7)
#define                                 SPI2SRMTIE_bit      _BIT_ACCESS(SPI2INTE,7)
// SPI2INTF<SPI2SRMTIF>
extern volatile __bit                   SPI2SRMTIF          __at(0x4BF);	// @ (0x97 * 8 + 7)
#define                                 SPI2SRMTIF_bit      _BIT_ACCESS(SPI2INTF,7)
// SPI2CON2<SPI2SSET>
extern volatile __bit                   SPI2SSET            __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 SPI2SSET_bit        _BIT_ACCESS(SPI2CON2,2)
// SPI2CON2<SPI2SSFLT>
extern volatile __bit                   SPI2SSFLT           __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 SPI2SSFLT_bit       _BIT_ACCESS(SPI2CON2,6)
// SPI2CON1<SPI2SSP>
extern volatile __bit                   SPI2SSP             __at(0x492);	// @ (0x92 * 8 + 2)
#define                                 SPI2SSP_bit         _BIT_ACCESS(SPI2CON1,2)
// SPI2SSPPS<SPI2SSPPS0>
extern volatile __bit                   SPI2SSPPS0          __at(0x1378);	// @ (0x26F * 8 + 0)
#define                                 SPI2SSPPS0_bit      _BIT_ACCESS(SPI2SSPPS,0)
// SPI2SSPPS<SPI2SSPPS1>
extern volatile __bit                   SPI2SSPPS1          __at(0x1379);	// @ (0x26F * 8 + 1)
#define                                 SPI2SSPPS1_bit      _BIT_ACCESS(SPI2SSPPS,1)
// SPI2SSPPS<SPI2SSPPS2>
extern volatile __bit                   SPI2SSPPS2          __at(0x137A);	// @ (0x26F * 8 + 2)
#define                                 SPI2SSPPS2_bit      _BIT_ACCESS(SPI2SSPPS,2)
// SPI2SSPPS<SPI2SSPPS3>
extern volatile __bit                   SPI2SSPPS3          __at(0x137B);	// @ (0x26F * 8 + 3)
#define                                 SPI2SSPPS3_bit      _BIT_ACCESS(SPI2SSPPS,3)
// SPI2SSPPS<SPI2SSPPS4>
extern volatile __bit                   SPI2SSPPS4          __at(0x137C);	// @ (0x26F * 8 + 4)
#define                                 SPI2SSPPS4_bit      _BIT_ACCESS(SPI2SSPPS,4)
// SPI2INTE<SPI2TCZIE>
extern volatile __bit                   SPI2TCZIE           __at(0x4C6);	// @ (0x98 * 8 + 6)
#define                                 SPI2TCZIE_bit       _BIT_ACCESS(SPI2INTE,6)
// SPI2INTF<SPI2TCZIF>
extern volatile __bit                   SPI2TCZIF           __at(0x4BE);	// @ (0x97 * 8 + 6)
#define                                 SPI2TCZIF_bit       _BIT_ACCESS(SPI2INTF,6)
// SPI2STATUS<SPI2TXBE>
extern volatile __bit                   SPI2TXBE            __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 SPI2TXBE_bit        _BIT_ACCESS(SPI2STATUS,5)
// PIE5<SPI2TXIE>
extern volatile __bit                   SPI2TXIE            __at(0x2519);	// @ (0x4A3 * 8 + 1)
#define                                 SPI2TXIE_bit        _BIT_ACCESS(PIE5,1)
// PIR5<SPI2TXIF>
extern volatile __bit                   SPI2TXIF            __at(0x2599);	// @ (0x4B3 * 8 + 1)
#define                                 SPI2TXIF_bit        _BIT_ACCESS(PIR5,1)
// IPR5<SPI2TXIP>
extern volatile __bit                   SPI2TXIP            __at(0x1B39);	// @ (0x367 * 8 + 1)
#define                                 SPI2TXIP_bit        _BIT_ACCESS(IPR5,1)
// SPI2CON2<SPI2TXR>
extern volatile __bit                   SPI2TXR             __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 SPI2TXR_bit         _BIT_ACCESS(SPI2CON2,1)
// SPI2INTE<SPI2TXUIE>
extern volatile __bit                   SPI2TXUIE           __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 SPI2TXUIE_bit       _BIT_ACCESS(SPI2INTE,1)
// SPI2INTF<SPI2TXUIF>
extern volatile __bit                   SPI2TXUIF           __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 SPI2TXUIF_bit       _BIT_ACCESS(SPI2INTF,1)
// SPI2STATUS<SPI2TXWE>
extern volatile __bit                   SPI2TXWE            __at(0x4A7);	// @ (0x94 * 8 + 7)
#define                                 SPI2TXWE_bit        _BIT_ACCESS(SPI2STATUS,7)
// SMT1CON0<SPOL>
extern volatile __bit                   SPOL                __at(0x1863);	// @ (0x30C * 8 + 3)
#define                                 SPOL_bit            _BIT_ACCESS(SMT1CON0,3)
// DMAnSPTRL<SPTR0>
extern volatile __bit                   SPTR0               __at(0x7A0);	// @ (0xF4 * 8 + 0)
#define                                 SPTR0_bit           _BIT_ACCESS(DMAnSPTRL,0)
// DMAnSPTRL<SPTR1>
extern volatile __bit                   SPTR1               __at(0x7A1);	// @ (0xF4 * 8 + 1)
#define                                 SPTR1_bit           _BIT_ACCESS(DMAnSPTRL,1)
// DMAnSPTRH<SPTR10>
extern volatile __bit                   SPTR10              __at(0x7AA);	// @ (0xF5 * 8 + 2)
#define                                 SPTR10_bit          _BIT_ACCESS(DMAnSPTRH,2)
// DMAnSPTRH<SPTR11>
extern volatile __bit                   SPTR11              __at(0x7AB);	// @ (0xF5 * 8 + 3)
#define                                 SPTR11_bit          _BIT_ACCESS(DMAnSPTRH,3)
// DMAnSPTRH<SPTR12>
extern volatile __bit                   SPTR12              __at(0x7AC);	// @ (0xF5 * 8 + 4)
#define                                 SPTR12_bit          _BIT_ACCESS(DMAnSPTRH,4)
// DMAnSPTRH<SPTR13>
extern volatile __bit                   SPTR13              __at(0x7AD);	// @ (0xF5 * 8 + 5)
#define                                 SPTR13_bit          _BIT_ACCESS(DMAnSPTRH,5)
// DMAnSPTRH<SPTR14>
extern volatile __bit                   SPTR14              __at(0x7AE);	// @ (0xF5 * 8 + 6)
#define                                 SPTR14_bit          _BIT_ACCESS(DMAnSPTRH,6)
// DMAnSPTRH<SPTR15>
extern volatile __bit                   SPTR15              __at(0x7AF);	// @ (0xF5 * 8 + 7)
#define                                 SPTR15_bit          _BIT_ACCESS(DMAnSPTRH,7)
// DMAnSPTRU<SPTR16>
extern volatile __bit                   SPTR16              __at(0x7B0);	// @ (0xF6 * 8 + 0)
#define                                 SPTR16_bit          _BIT_ACCESS(DMAnSPTRU,0)
// DMAnSPTRU<SPTR17>
extern volatile __bit                   SPTR17              __at(0x7B1);	// @ (0xF6 * 8 + 1)
#define                                 SPTR17_bit          _BIT_ACCESS(DMAnSPTRU,1)
// DMAnSPTRU<SPTR18>
extern volatile __bit                   SPTR18              __at(0x7B2);	// @ (0xF6 * 8 + 2)
#define                                 SPTR18_bit          _BIT_ACCESS(DMAnSPTRU,2)
// DMAnSPTRU<SPTR19>
extern volatile __bit                   SPTR19              __at(0x7B3);	// @ (0xF6 * 8 + 3)
#define                                 SPTR19_bit          _BIT_ACCESS(DMAnSPTRU,3)
// DMAnSPTRL<SPTR2>
extern volatile __bit                   SPTR2               __at(0x7A2);	// @ (0xF4 * 8 + 2)
#define                                 SPTR2_bit           _BIT_ACCESS(DMAnSPTRL,2)
// DMAnSPTRU<SPTR20>
extern volatile __bit                   SPTR20              __at(0x7B4);	// @ (0xF6 * 8 + 4)
#define                                 SPTR20_bit          _BIT_ACCESS(DMAnSPTRU,4)
// DMAnSPTRU<SPTR21>
extern volatile __bit                   SPTR21              __at(0x7B5);	// @ (0xF6 * 8 + 5)
#define                                 SPTR21_bit          _BIT_ACCESS(DMAnSPTRU,5)
// DMAnSPTRL<SPTR3>
extern volatile __bit                   SPTR3               __at(0x7A3);	// @ (0xF4 * 8 + 3)
#define                                 SPTR3_bit           _BIT_ACCESS(DMAnSPTRL,3)
// DMAnSPTRL<SPTR4>
extern volatile __bit                   SPTR4               __at(0x7A4);	// @ (0xF4 * 8 + 4)
#define                                 SPTR4_bit           _BIT_ACCESS(DMAnSPTRL,4)
// DMAnSPTRL<SPTR5>
extern volatile __bit                   SPTR5               __at(0x7A5);	// @ (0xF4 * 8 + 5)
#define                                 SPTR5_bit           _BIT_ACCESS(DMAnSPTRL,5)
// DMAnSPTRL<SPTR6>
extern volatile __bit                   SPTR6               __at(0x7A6);	// @ (0xF4 * 8 + 6)
#define                                 SPTR6_bit           _BIT_ACCESS(DMAnSPTRL,6)
// DMAnSPTRL<SPTR7>
extern volatile __bit                   SPTR7               __at(0x7A7);	// @ (0xF4 * 8 + 7)
#define                                 SPTR7_bit           _BIT_ACCESS(DMAnSPTRL,7)
// DMAnSPTRH<SPTR8>
extern volatile __bit                   SPTR8               __at(0x7A8);	// @ (0xF5 * 8 + 0)
#define                                 SPTR8_bit           _BIT_ACCESS(DMAnSPTRH,0)
// DMAnSPTRH<SPTR9>
extern volatile __bit                   SPTR9               __at(0x7A9);	// @ (0xF5 * 8 + 1)
#define                                 SPTR9_bit           _BIT_ACCESS(DMAnSPTRH,1)
// DMAnSSAL<SSA0>
extern volatile __bit                   SSA0                __at(0x7C8);	// @ (0xF9 * 8 + 0)
#define                                 SSA0_bit            _BIT_ACCESS(DMAnSSAL,0)
// DMAnSSAL<SSA1>
extern volatile __bit                   SSA1                __at(0x7C9);	// @ (0xF9 * 8 + 1)
#define                                 SSA1_bit            _BIT_ACCESS(DMAnSSAL,1)
// DMAnSSAH<SSA10>
extern volatile __bit                   SSA10               __at(0x7D2);	// @ (0xFA * 8 + 2)
#define                                 SSA10_bit           _BIT_ACCESS(DMAnSSAH,2)
// DMAnSSAH<SSA11>
extern volatile __bit                   SSA11               __at(0x7D3);	// @ (0xFA * 8 + 3)
#define                                 SSA11_bit           _BIT_ACCESS(DMAnSSAH,3)
// DMAnSSAH<SSA12>
extern volatile __bit                   SSA12               __at(0x7D4);	// @ (0xFA * 8 + 4)
#define                                 SSA12_bit           _BIT_ACCESS(DMAnSSAH,4)
// DMAnSSAH<SSA13>
extern volatile __bit                   SSA13               __at(0x7D5);	// @ (0xFA * 8 + 5)
#define                                 SSA13_bit           _BIT_ACCESS(DMAnSSAH,5)
// DMAnSSAH<SSA14>
extern volatile __bit                   SSA14               __at(0x7D6);	// @ (0xFA * 8 + 6)
#define                                 SSA14_bit           _BIT_ACCESS(DMAnSSAH,6)
// DMAnSSAH<SSA15>
extern volatile __bit                   SSA15               __at(0x7D7);	// @ (0xFA * 8 + 7)
#define                                 SSA15_bit           _BIT_ACCESS(DMAnSSAH,7)
// DMAnSSAU<SSA16>
extern volatile __bit                   SSA16               __at(0x7D8);	// @ (0xFB * 8 + 0)
#define                                 SSA16_bit           _BIT_ACCESS(DMAnSSAU,0)
// DMAnSSAU<SSA17>
extern volatile __bit                   SSA17               __at(0x7D9);	// @ (0xFB * 8 + 1)
#define                                 SSA17_bit           _BIT_ACCESS(DMAnSSAU,1)
// DMAnSSAU<SSA18>
extern volatile __bit                   SSA18               __at(0x7DA);	// @ (0xFB * 8 + 2)
#define                                 SSA18_bit           _BIT_ACCESS(DMAnSSAU,2)
// DMAnSSAU<SSA19>
extern volatile __bit                   SSA19               __at(0x7DB);	// @ (0xFB * 8 + 3)
#define                                 SSA19_bit           _BIT_ACCESS(DMAnSSAU,3)
// DMAnSSAL<SSA2>
extern volatile __bit                   SSA2                __at(0x7CA);	// @ (0xF9 * 8 + 2)
#define                                 SSA2_bit            _BIT_ACCESS(DMAnSSAL,2)
// DMAnSSAU<SSA20>
extern volatile __bit                   SSA20               __at(0x7DC);	// @ (0xFB * 8 + 4)
#define                                 SSA20_bit           _BIT_ACCESS(DMAnSSAU,4)
// DMAnSSAU<SSA21>
extern volatile __bit                   SSA21               __at(0x7DD);	// @ (0xFB * 8 + 5)
#define                                 SSA21_bit           _BIT_ACCESS(DMAnSSAU,5)
// DMAnSSAL<SSA3>
extern volatile __bit                   SSA3                __at(0x7CB);	// @ (0xF9 * 8 + 3)
#define                                 SSA3_bit            _BIT_ACCESS(DMAnSSAL,3)
// DMAnSSAL<SSA4>
extern volatile __bit                   SSA4                __at(0x7CC);	// @ (0xF9 * 8 + 4)
#define                                 SSA4_bit            _BIT_ACCESS(DMAnSSAL,4)
// DMAnSSAL<SSA5>
extern volatile __bit                   SSA5                __at(0x7CD);	// @ (0xF9 * 8 + 5)
#define                                 SSA5_bit            _BIT_ACCESS(DMAnSSAL,5)
// DMAnSSAL<SSA6>
extern volatile __bit                   SSA6                __at(0x7CE);	// @ (0xF9 * 8 + 6)
#define                                 SSA6_bit            _BIT_ACCESS(DMAnSSAL,6)
// DMAnSSAL<SSA7>
extern volatile __bit                   SSA7                __at(0x7CF);	// @ (0xF9 * 8 + 7)
#define                                 SSA7_bit            _BIT_ACCESS(DMAnSSAL,7)
// DMAnSSAH<SSA8>
extern volatile __bit                   SSA8                __at(0x7D0);	// @ (0xFA * 8 + 0)
#define                                 SSA8_bit            _BIT_ACCESS(DMAnSSAH,0)
// DMAnSSAH<SSA9>
extern volatile __bit                   SSA9                __at(0x7D1);	// @ (0xFA * 8 + 1)
#define                                 SSA9_bit            _BIT_ACCESS(DMAnSSAH,1)
// SMT1SIG<SSEL0>
extern volatile __bit                   SSEL0               __at(0x1880);	// @ (0x310 * 8 + 0)
#define                                 SSEL0_bit           _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SSEL1>
extern volatile __bit                   SSEL1               __at(0x1881);	// @ (0x310 * 8 + 1)
#define                                 SSEL1_bit           _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SSEL2>
extern volatile __bit                   SSEL2               __at(0x1882);	// @ (0x310 * 8 + 2)
#define                                 SSEL2_bit           _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SSEL3>
extern volatile __bit                   SSEL3               __at(0x1883);	// @ (0x310 * 8 + 3)
#define                                 SSEL3_bit           _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SSEL4>
extern volatile __bit                   SSEL4               __at(0x1884);	// @ (0x310 * 8 + 4)
#define                                 SSEL4_bit           _BIT_ACCESS(SMT1SIG,4)
// SMT1SIG<SSEL5>
extern volatile __bit                   SSEL5               __at(0x1885);	// @ (0x310 * 8 + 5)
#define                                 SSEL5_bit           _BIT_ACCESS(SMT1SIG,5)
// DMAnCON1<SSTP>
extern volatile __bit                   SSTP                __at(0x7E8);	// @ (0xFD * 8 + 0)
#define                                 SSTP_bit            _BIT_ACCESS(DMAnCON1,0)
// DMAnSSZL<SSZ0>
extern volatile __bit                   SSZ0                __at(0x7B8);	// @ (0xF7 * 8 + 0)
#define                                 SSZ0_bit            _BIT_ACCESS(DMAnSSZL,0)
// DMAnSSZL<SSZ1>
extern volatile __bit                   SSZ1                __at(0x7B9);	// @ (0xF7 * 8 + 1)
#define                                 SSZ1_bit            _BIT_ACCESS(DMAnSSZL,1)
// DMAnSSZH<SSZ10>
extern volatile __bit                   SSZ10               __at(0x7C2);	// @ (0xF8 * 8 + 2)
#define                                 SSZ10_bit           _BIT_ACCESS(DMAnSSZH,2)
// DMAnSSZH<SSZ11>
extern volatile __bit                   SSZ11               __at(0x7C3);	// @ (0xF8 * 8 + 3)
#define                                 SSZ11_bit           _BIT_ACCESS(DMAnSSZH,3)
// DMAnSSZL<SSZ2>
extern volatile __bit                   SSZ2                __at(0x7BA);	// @ (0xF7 * 8 + 2)
#define                                 SSZ2_bit            _BIT_ACCESS(DMAnSSZL,2)
// DMAnSSZL<SSZ3>
extern volatile __bit                   SSZ3                __at(0x7BB);	// @ (0xF7 * 8 + 3)
#define                                 SSZ3_bit            _BIT_ACCESS(DMAnSSZL,3)
// DMAnSSZL<SSZ4>
extern volatile __bit                   SSZ4                __at(0x7BC);	// @ (0xF7 * 8 + 4)
#define                                 SSZ4_bit            _BIT_ACCESS(DMAnSSZL,4)
// DMAnSSZL<SSZ5>
extern volatile __bit                   SSZ5                __at(0x7BD);	// @ (0xF7 * 8 + 5)
#define                                 SSZ5_bit            _BIT_ACCESS(DMAnSSZL,5)
// DMAnSSZL<SSZ6>
extern volatile __bit                   SSZ6                __at(0x7BE);	// @ (0xF7 * 8 + 6)
#define                                 SSZ6_bit            _BIT_ACCESS(DMAnSSZL,6)
// DMAnSSZL<SSZ7>
extern volatile __bit                   SSZ7                __at(0x7BF);	// @ (0xF7 * 8 + 7)
#define                                 SSZ7_bit            _BIT_ACCESS(DMAnSSZL,7)
// DMAnSSZH<SSZ8>
extern volatile __bit                   SSZ8                __at(0x7C0);	// @ (0xF8 * 8 + 0)
#define                                 SSZ8_bit            _BIT_ACCESS(DMAnSSZH,0)
// DMAnSSZH<SSZ9>
extern volatile __bit                   SSZ9                __at(0x7C1);	// @ (0xF8 * 8 + 1)
#define                                 SSZ9_bit            _BIT_ACCESS(DMAnSSZH,1)
// ADSTAT<STAT2>
extern volatile __bit                   STAT2               __at(0x1FBA);	// @ (0x3F7 * 8 + 2)
#define                                 STAT2_bit           _BIT_ACCESS(ADSTAT,2)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x3E2);	// @ (0x7C * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x2787);	// @ (0x4F0 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// STKPTR<STKPTR0>
extern volatile __bit                   STKPTR0             __at(0x27E0);	// @ (0x4FC * 8 + 0)
#define                                 STKPTR0_bit         _BIT_ACCESS(STKPTR,0)
// STKPTR<STKPTR1>
extern volatile __bit                   STKPTR1             __at(0x27E1);	// @ (0x4FC * 8 + 1)
#define                                 STKPTR1_bit         _BIT_ACCESS(STKPTR,1)
// STKPTR<STKPTR2>
extern volatile __bit                   STKPTR2             __at(0x27E2);	// @ (0x4FC * 8 + 2)
#define                                 STKPTR2_bit         _BIT_ACCESS(STKPTR,2)
// STKPTR<STKPTR3>
extern volatile __bit                   STKPTR3             __at(0x27E3);	// @ (0x4FC * 8 + 3)
#define                                 STKPTR3_bit         _BIT_ACCESS(STKPTR,3)
// STKPTR<STKPTR4>
extern volatile __bit                   STKPTR4             __at(0x27E4);	// @ (0x4FC * 8 + 4)
#define                                 STKPTR4_bit         _BIT_ACCESS(STKPTR,4)
// STKPTR<STKPTR5>
extern volatile __bit                   STKPTR5             __at(0x27E5);	// @ (0x4FC * 8 + 5)
#define                                 STKPTR5_bit         _BIT_ACCESS(STKPTR,5)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x2786);	// @ (0x4F0 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SMT1CON0<STP>
extern volatile __bit                   STP                 __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 STP_bit             _BIT_ACCESS(SMT1CON0,5)
// ADSTPTL<STPT0>
extern volatile __bit                   STPT0               __at(0x1EF8);	// @ (0x3DF * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<STPT1>
extern volatile __bit                   STPT1               __at(0x1EF9);	// @ (0x3DF * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<STPT10>
extern volatile __bit                   STPT10              __at(0x1F02);	// @ (0x3E0 * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<STPT11>
extern volatile __bit                   STPT11              __at(0x1F03);	// @ (0x3E0 * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<STPT12>
extern volatile __bit                   STPT12              __at(0x1F04);	// @ (0x3E0 * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<STPT13>
extern volatile __bit                   STPT13              __at(0x1F05);	// @ (0x3E0 * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<STPT15>
extern volatile __bit                   STPT15              __at(0x1F06);	// @ (0x3E0 * 8 + 6)
#define                                 STPT15_bit          _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<STPT16>
extern volatile __bit                   STPT16              __at(0x1F07);	// @ (0x3E0 * 8 + 7)
#define                                 STPT16_bit          _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<STPT2>
extern volatile __bit                   STPT2               __at(0x1EFA);	// @ (0x3DF * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<STPT3>
extern volatile __bit                   STPT3               __at(0x1EFB);	// @ (0x3DF * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<STPT4>
extern volatile __bit                   STPT4               __at(0x1EFC);	// @ (0x3DF * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<STPT5>
extern volatile __bit                   STPT5               __at(0x1EFD);	// @ (0x3DF * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<STPT6>
extern volatile __bit                   STPT6               __at(0x1EFE);	// @ (0x3DF * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<STPT7>
extern volatile __bit                   STPT7               __at(0x1EFF);	// @ (0x3DF * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<STPT8>
extern volatile __bit                   STPT8               __at(0x1F00);	// @ (0x3E0 * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<STPT9>
extern volatile __bit                   STPT9               __at(0x1F01);	// @ (0x3E0 * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(ADSTPTH,1)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x3C0);	// @ (0x78 * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PIE0<SWIE>
extern volatile __bit                   SWIE                __at(0x24F0);	// @ (0x49E * 8 + 0)
#define                                 SWIE_bit            _BIT_ACCESS(PIE0,0)
// PIR0<SWIF>
extern volatile __bit                   SWIF                __at(0x2570);	// @ (0x4AE * 8 + 0)
#define                                 SWIF_bit            _BIT_ACCESS(PIR0,0)
// IPR0<SWIP>
extern volatile __bit                   SWIP                __at(0x1B10);	// @ (0x362 * 8 + 0)
#define                                 SWIP_bit            _BIT_ACCESS(IPR0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x307);	// @ (0x60 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x18DC);	// @ (0x31B * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0x1208);	// @ (0x241 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0x1209);	// @ (0x241 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0x120A);	// @ (0x241 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0x120B);	// @ (0x241 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0x120C);	// @ (0x241 * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// T0CKIPPS<T0CKIPPS5>
extern volatile __bit                   T0CKIPPS5           __at(0x120D);	// @ (0x241 * 8 + 5)
#define                                 T0CKIPPS5_bit       _BIT_ACCESS(T0CKIPPS,5)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x18D8);	// @ (0x31B * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x18D9);	// @ (0x31B * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x18DA);	// @ (0x31B * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x18DB);	// @ (0x31B * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x18DD);	// @ (0x31B * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x18DE);	// @ (0x31B * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x18DF);	// @ (0x31B * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x18D7);	// @ (0x31A * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0MD16>
extern volatile __bit                   T0MD16              __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 T0MD16_bit          _BIT_ACCESS(T0CON0,4)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x18D5);	// @ (0x31A * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x18C8);	// @ (0x319 * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x18C9);	// @ (0x319 * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x18CA);	// @ (0x319 * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x18CB);	// @ (0x319 * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x18CC);	// @ (0x319 * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x18CD);	// @ (0x319 * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x18CE);	// @ (0x319 * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x18CF);	// @ (0x319 * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0x1210);	// @ (0x242 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0x1211);	// @ (0x242 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0x1212);	// @ (0x242 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0x1213);	// @ (0x242 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0x1214);	// @ (0x242 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CKIPPS<T1CKIPPS5>
extern volatile __bit                   T1CKIPPS5           __at(0x1215);	// @ (0x242 * 8 + 5)
#define                                 T1CKIPPS5_bit       _BIT_ACCESS(T1CKIPPS,5)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x18F4);	// @ (0x31E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x18F5);	// @ (0x31E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1908);	// @ (0x321 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1909);	// @ (0x321 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x190A);	// @ (0x321 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x190B);	// @ (0x321 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1CLK<T1CS4>
extern volatile __bit                   T1CS4               __at(0x190C);	// @ (0x321 * 8 + 4)
#define                                 T1CS4_bit           _BIT_ACCESS(T1CLK,4)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x18FF);	// @ (0x31F * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x18FB);	// @ (0x31F * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x18FE);	// @ (0x31F * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0x1218);	// @ (0x243 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0x1219);	// @ (0x243 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0x121A);	// @ (0x243 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0x121B);	// @ (0x243 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0x121C);	// @ (0x243 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x18FC);	// @ (0x31F * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1900);	// @ (0x320 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1901);	// @ (0x320 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1902);	// @ (0x320 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1903);	// @ (0x320 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1904);	// @ (0x320 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GATE<T1GSS5>
extern volatile __bit                   T1GSS5              __at(0x1905);	// @ (0x320 * 8 + 5)
#define                                 T1GSS5_bit          _BIT_ACCESS(T1GATE,5)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x18FD);	// @ (0x31F * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x18FA);	// @ (0x31F * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x18F1);	// @ (0x31E * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x192E);	// @ (0x325 * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1924);	// @ (0x324 * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1925);	// @ (0x324 * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1926);	// @ (0x324 * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x192D);	// @ (0x325 * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1930);	// @ (0x326 * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1931);	// @ (0x326 * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1932);	// @ (0x326 * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1933);	// @ (0x326 * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2CLKCON<T2CS4>
extern volatile __bit                   T2CS4               __at(0x1934);	// @ (0x326 * 8 + 4)
#define                                 T2CS4_bit           _BIT_ACCESS(T2CLKCON,4)
// T2CLKCON<T2CS5>
extern volatile __bit                   T2CS5               __at(0x1935);	// @ (0x326 * 8 + 5)
#define                                 T2CS5_bit           _BIT_ACCESS(T2CLKCON,5)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0x1240);	// @ (0x248 * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0x1241);	// @ (0x248 * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0x1242);	// @ (0x248 * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0x1243);	// @ (0x248 * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0x1244);	// @ (0x248 * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1928);	// @ (0x325 * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1929);	// @ (0x325 * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x192A);	// @ (0x325 * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x192B);	// @ (0x325 * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x192C);	// @ (0x325 * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1927);	// @ (0x324 * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1920);	// @ (0x324 * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1921);	// @ (0x324 * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1922);	// @ (0x324 * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1923);	// @ (0x324 * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x192F);	// @ (0x325 * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1938);	// @ (0x327 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1939);	// @ (0x327 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x193A);	// @ (0x327 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x193B);	// @ (0x327 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T2RST<T2RSEL4>
extern volatile __bit                   T2RSEL4             __at(0x193C);	// @ (0x327 * 8 + 4)
#define                                 T2RSEL4_bit         _BIT_ACCESS(T2RST,4)
// T2RST<T2RSEL5>
extern volatile __bit                   T2RSEL5             __at(0x193D);	// @ (0x327 * 8 + 5)
#define                                 T2RSEL5_bit         _BIT_ACCESS(T2RST,5)
// T2RST<T2RSEL6>
extern volatile __bit                   T2RSEL6             __at(0x193E);	// @ (0x327 * 8 + 6)
#define                                 T2RSEL6_bit         _BIT_ACCESS(T2RST,6)
// T3CKIPPS<T3CKIPPS0>
extern volatile __bit                   T3CKIPPS0           __at(0x1220);	// @ (0x244 * 8 + 0)
#define                                 T3CKIPPS0_bit       _BIT_ACCESS(T3CKIPPS,0)
// T3CKIPPS<T3CKIPPS1>
extern volatile __bit                   T3CKIPPS1           __at(0x1221);	// @ (0x244 * 8 + 1)
#define                                 T3CKIPPS1_bit       _BIT_ACCESS(T3CKIPPS,1)
// T3CKIPPS<T3CKIPPS2>
extern volatile __bit                   T3CKIPPS2           __at(0x1222);	// @ (0x244 * 8 + 2)
#define                                 T3CKIPPS2_bit       _BIT_ACCESS(T3CKIPPS,2)
// T3CKIPPS<T3CKIPPS3>
extern volatile __bit                   T3CKIPPS3           __at(0x1223);	// @ (0x244 * 8 + 3)
#define                                 T3CKIPPS3_bit       _BIT_ACCESS(T3CKIPPS,3)
// T3CKIPPS<T3CKIPPS4>
extern volatile __bit                   T3CKIPPS4           __at(0x1224);	// @ (0x244 * 8 + 4)
#define                                 T3CKIPPS4_bit       _BIT_ACCESS(T3CKIPPS,4)
// T3CKIPPS<T3CKIPPS5>
extern volatile __bit                   T3CKIPPS5           __at(0x1225);	// @ (0x244 * 8 + 5)
#define                                 T3CKIPPS5_bit       _BIT_ACCESS(T3CKIPPS,5)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x1954);	// @ (0x32A * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x1955);	// @ (0x32A * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3CLK<T3CS0>
extern volatile __bit                   T3CS0               __at(0x1968);	// @ (0x32D * 8 + 0)
#define                                 T3CS0_bit           _BIT_ACCESS(T3CLK,0)
// T3CLK<T3CS1>
extern volatile __bit                   T3CS1               __at(0x1969);	// @ (0x32D * 8 + 1)
#define                                 T3CS1_bit           _BIT_ACCESS(T3CLK,1)
// T3CLK<T3CS2>
extern volatile __bit                   T3CS2               __at(0x196A);	// @ (0x32D * 8 + 2)
#define                                 T3CS2_bit           _BIT_ACCESS(T3CLK,2)
// T3CLK<T3CS3>
extern volatile __bit                   T3CS3               __at(0x196B);	// @ (0x32D * 8 + 3)
#define                                 T3CS3_bit           _BIT_ACCESS(T3CLK,3)
// T3CLK<T3CS4>
extern volatile __bit                   T3CS4               __at(0x196C);	// @ (0x32D * 8 + 4)
#define                                 T3CS4_bit           _BIT_ACCESS(T3CLK,4)
// T3GCON<T3GE>
extern volatile __bit                   T3GE                __at(0x195F);	// @ (0x32B * 8 + 7)
#define                                 T3GE_bit            _BIT_ACCESS(T3GCON,7)
// T3GCON<T3GGO>
extern volatile __bit                   T3GGO               __at(0x195B);	// @ (0x32B * 8 + 3)
#define                                 T3GGO_bit           _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x195E);	// @ (0x32B * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GPPS<T3GPPS0>
extern volatile __bit                   T3GPPS0             __at(0x1228);	// @ (0x245 * 8 + 0)
#define                                 T3GPPS0_bit         _BIT_ACCESS(T3GPPS,0)
// T3GPPS<T3GPPS1>
extern volatile __bit                   T3GPPS1             __at(0x1229);	// @ (0x245 * 8 + 1)
#define                                 T3GPPS1_bit         _BIT_ACCESS(T3GPPS,1)
// T3GPPS<T3GPPS2>
extern volatile __bit                   T3GPPS2             __at(0x122A);	// @ (0x245 * 8 + 2)
#define                                 T3GPPS2_bit         _BIT_ACCESS(T3GPPS,2)
// T3GPPS<T3GPPS3>
extern volatile __bit                   T3GPPS3             __at(0x122B);	// @ (0x245 * 8 + 3)
#define                                 T3GPPS3_bit         _BIT_ACCESS(T3GPPS,3)
// T3GPPS<T3GPPS4>
extern volatile __bit                   T3GPPS4             __at(0x122C);	// @ (0x245 * 8 + 4)
#define                                 T3GPPS4_bit         _BIT_ACCESS(T3GPPS,4)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x195C);	// @ (0x32B * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GATE<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x1960);	// @ (0x32C * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GATE,0)
// T3GATE<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x1961);	// @ (0x32C * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GATE,1)
// T3GATE<T3GSS2>
extern volatile __bit                   T3GSS2              __at(0x1962);	// @ (0x32C * 8 + 2)
#define                                 T3GSS2_bit          _BIT_ACCESS(T3GATE,2)
// T3GATE<T3GSS3>
extern volatile __bit                   T3GSS3              __at(0x1963);	// @ (0x32C * 8 + 3)
#define                                 T3GSS3_bit          _BIT_ACCESS(T3GATE,3)
// T3GATE<T3GSS4>
extern volatile __bit                   T3GSS4              __at(0x1964);	// @ (0x32C * 8 + 4)
#define                                 T3GSS4_bit          _BIT_ACCESS(T3GATE,4)
// T3GATE<T3GSS5>
extern volatile __bit                   T3GSS5              __at(0x1965);	// @ (0x32C * 8 + 5)
#define                                 T3GSS5_bit          _BIT_ACCESS(T3GATE,5)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x195D);	// @ (0x32B * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x195A);	// @ (0x32B * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3RD16>
extern volatile __bit                   T3RD16              __at(0x1951);	// @ (0x32A * 8 + 1)
#define                                 T3RD16_bit          _BIT_ACCESS(T3CON,1)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x198E);	// @ (0x331 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x1984);	// @ (0x330 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x1985);	// @ (0x330 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x1986);	// @ (0x330 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x198D);	// @ (0x331 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x1990);	// @ (0x332 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x1991);	// @ (0x332 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x1992);	// @ (0x332 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x1993);	// @ (0x332 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4CLKCON<T4CS4>
extern volatile __bit                   T4CS4               __at(0x1994);	// @ (0x332 * 8 + 4)
#define                                 T4CS4_bit           _BIT_ACCESS(T4CLKCON,4)
// T4CLKCON<T4CS5>
extern volatile __bit                   T4CS5               __at(0x1995);	// @ (0x332 * 8 + 5)
#define                                 T4CS5_bit           _BIT_ACCESS(T4CLKCON,5)
// T4INPPS<T4INPPS0>
extern volatile __bit                   T4INPPS0            __at(0x1248);	// @ (0x249 * 8 + 0)
#define                                 T4INPPS0_bit        _BIT_ACCESS(T4INPPS,0)
// T4INPPS<T4INPPS1>
extern volatile __bit                   T4INPPS1            __at(0x1249);	// @ (0x249 * 8 + 1)
#define                                 T4INPPS1_bit        _BIT_ACCESS(T4INPPS,1)
// T4INPPS<T4INPPS2>
extern volatile __bit                   T4INPPS2            __at(0x124A);	// @ (0x249 * 8 + 2)
#define                                 T4INPPS2_bit        _BIT_ACCESS(T4INPPS,2)
// T4INPPS<T4INPPS3>
extern volatile __bit                   T4INPPS3            __at(0x124B);	// @ (0x249 * 8 + 3)
#define                                 T4INPPS3_bit        _BIT_ACCESS(T4INPPS,3)
// T4INPPS<T4INPPS4>
extern volatile __bit                   T4INPPS4            __at(0x124C);	// @ (0x249 * 8 + 4)
#define                                 T4INPPS4_bit        _BIT_ACCESS(T4INPPS,4)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x1988);	// @ (0x331 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x1989);	// @ (0x331 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x198A);	// @ (0x331 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x198B);	// @ (0x331 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x198C);	// @ (0x331 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x1987);	// @ (0x330 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x1980);	// @ (0x330 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x1981);	// @ (0x330 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x1982);	// @ (0x330 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x1983);	// @ (0x330 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x198F);	// @ (0x331 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x1998);	// @ (0x333 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x1999);	// @ (0x333 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x199A);	// @ (0x333 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x199B);	// @ (0x333 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T4RST<T4RSEL4>
extern volatile __bit                   T4RSEL4             __at(0x199C);	// @ (0x333 * 8 + 4)
#define                                 T4RSEL4_bit         _BIT_ACCESS(T4RST,4)
// T4RST<T4RSEL5>
extern volatile __bit                   T4RSEL5             __at(0x199D);	// @ (0x333 * 8 + 5)
#define                                 T4RSEL5_bit         _BIT_ACCESS(T4RST,5)
// T4RST<T4RSEL6>
extern volatile __bit                   T4RSEL6             __at(0x199E);	// @ (0x333 * 8 + 6)
#define                                 T4RSEL6_bit         _BIT_ACCESS(T4RST,6)
// T5CKIPPS<T5CKIPPS0>
extern volatile __bit                   T5CKIPPS0           __at(0x1230);	// @ (0x246 * 8 + 0)
#define                                 T5CKIPPS0_bit       _BIT_ACCESS(T5CKIPPS,0)
// T5CKIPPS<T5CKIPPS1>
extern volatile __bit                   T5CKIPPS1           __at(0x1231);	// @ (0x246 * 8 + 1)
#define                                 T5CKIPPS1_bit       _BIT_ACCESS(T5CKIPPS,1)
// T5CKIPPS<T5CKIPPS2>
extern volatile __bit                   T5CKIPPS2           __at(0x1232);	// @ (0x246 * 8 + 2)
#define                                 T5CKIPPS2_bit       _BIT_ACCESS(T5CKIPPS,2)
// T5CKIPPS<T5CKIPPS3>
extern volatile __bit                   T5CKIPPS3           __at(0x1233);	// @ (0x246 * 8 + 3)
#define                                 T5CKIPPS3_bit       _BIT_ACCESS(T5CKIPPS,3)
// T5CKIPPS<T5CKIPPS4>
extern volatile __bit                   T5CKIPPS4           __at(0x1234);	// @ (0x246 * 8 + 4)
#define                                 T5CKIPPS4_bit       _BIT_ACCESS(T5CKIPPS,4)
// T5CKIPPS<T5CKIPPS5>
extern volatile __bit                   T5CKIPPS5           __at(0x1235);	// @ (0x246 * 8 + 5)
#define                                 T5CKIPPS5_bit       _BIT_ACCESS(T5CKIPPS,5)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x19B4);	// @ (0x336 * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x19B5);	// @ (0x336 * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5CLK<T5CS0>
extern volatile __bit                   T5CS0               __at(0x19C8);	// @ (0x339 * 8 + 0)
#define                                 T5CS0_bit           _BIT_ACCESS(T5CLK,0)
// T5CLK<T5CS1>
extern volatile __bit                   T5CS1               __at(0x19C9);	// @ (0x339 * 8 + 1)
#define                                 T5CS1_bit           _BIT_ACCESS(T5CLK,1)
// T5CLK<T5CS2>
extern volatile __bit                   T5CS2               __at(0x19CA);	// @ (0x339 * 8 + 2)
#define                                 T5CS2_bit           _BIT_ACCESS(T5CLK,2)
// T5CLK<T5CS3>
extern volatile __bit                   T5CS3               __at(0x19CB);	// @ (0x339 * 8 + 3)
#define                                 T5CS3_bit           _BIT_ACCESS(T5CLK,3)
// T5CLK<T5CS4>
extern volatile __bit                   T5CS4               __at(0x19CC);	// @ (0x339 * 8 + 4)
#define                                 T5CS4_bit           _BIT_ACCESS(T5CLK,4)
// T5GCON<T5GE>
extern volatile __bit                   T5GE                __at(0x19BF);	// @ (0x337 * 8 + 7)
#define                                 T5GE_bit            _BIT_ACCESS(T5GCON,7)
// T5GCON<T5GGO>
extern volatile __bit                   T5GGO               __at(0x19BB);	// @ (0x337 * 8 + 3)
#define                                 T5GGO_bit           _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x19BE);	// @ (0x337 * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GPPS<T5GPPS0>
extern volatile __bit                   T5GPPS0             __at(0x1238);	// @ (0x247 * 8 + 0)
#define                                 T5GPPS0_bit         _BIT_ACCESS(T5GPPS,0)
// T5GPPS<T5GPPS1>
extern volatile __bit                   T5GPPS1             __at(0x1239);	// @ (0x247 * 8 + 1)
#define                                 T5GPPS1_bit         _BIT_ACCESS(T5GPPS,1)
// T5GPPS<T5GPPS2>
extern volatile __bit                   T5GPPS2             __at(0x123A);	// @ (0x247 * 8 + 2)
#define                                 T5GPPS2_bit         _BIT_ACCESS(T5GPPS,2)
// T5GPPS<T5GPPS3>
extern volatile __bit                   T5GPPS3             __at(0x123B);	// @ (0x247 * 8 + 3)
#define                                 T5GPPS3_bit         _BIT_ACCESS(T5GPPS,3)
// T5GPPS<T5GPPS4>
extern volatile __bit                   T5GPPS4             __at(0x123C);	// @ (0x247 * 8 + 4)
#define                                 T5GPPS4_bit         _BIT_ACCESS(T5GPPS,4)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x19BC);	// @ (0x337 * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GATE<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x19C0);	// @ (0x338 * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GATE,0)
// T5GATE<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x19C1);	// @ (0x338 * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GATE,1)
// T5GATE<T5GSS2>
extern volatile __bit                   T5GSS2              __at(0x19C2);	// @ (0x338 * 8 + 2)
#define                                 T5GSS2_bit          _BIT_ACCESS(T5GATE,2)
// T5GATE<T5GSS3>
extern volatile __bit                   T5GSS3              __at(0x19C3);	// @ (0x338 * 8 + 3)
#define                                 T5GSS3_bit          _BIT_ACCESS(T5GATE,3)
// T5GATE<T5GSS4>
extern volatile __bit                   T5GSS4              __at(0x19C4);	// @ (0x338 * 8 + 4)
#define                                 T5GSS4_bit          _BIT_ACCESS(T5GATE,4)
// T5GATE<T5GSS5>
extern volatile __bit                   T5GSS5              __at(0x19C5);	// @ (0x338 * 8 + 5)
#define                                 T5GSS5_bit          _BIT_ACCESS(T5GATE,5)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x19BD);	// @ (0x337 * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x19BA);	// @ (0x337 * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5RD16>
extern volatile __bit                   T5RD16              __at(0x19B1);	// @ (0x336 * 8 + 1)
#define                                 T5RD16_bit          _BIT_ACCESS(T5CON,1)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x19EE);	// @ (0x33D * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x19E4);	// @ (0x33C * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x19E5);	// @ (0x33C * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x19E6);	// @ (0x33C * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x19ED);	// @ (0x33D * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x19F0);	// @ (0x33E * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x19F1);	// @ (0x33E * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x19F2);	// @ (0x33E * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x19F3);	// @ (0x33E * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6CLKCON<T6CS4>
extern volatile __bit                   T6CS4               __at(0x19F4);	// @ (0x33E * 8 + 4)
#define                                 T6CS4_bit           _BIT_ACCESS(T6CLKCON,4)
// T6CLKCON<T6CS5>
extern volatile __bit                   T6CS5               __at(0x19F5);	// @ (0x33E * 8 + 5)
#define                                 T6CS5_bit           _BIT_ACCESS(T6CLKCON,5)
// T6INPPS<T6INPPS0>
extern volatile __bit                   T6INPPS0            __at(0x1250);	// @ (0x24A * 8 + 0)
#define                                 T6INPPS0_bit        _BIT_ACCESS(T6INPPS,0)
// T6INPPS<T6INPPS1>
extern volatile __bit                   T6INPPS1            __at(0x1251);	// @ (0x24A * 8 + 1)
#define                                 T6INPPS1_bit        _BIT_ACCESS(T6INPPS,1)
// T6INPPS<T6INPPS2>
extern volatile __bit                   T6INPPS2            __at(0x1252);	// @ (0x24A * 8 + 2)
#define                                 T6INPPS2_bit        _BIT_ACCESS(T6INPPS,2)
// T6INPPS<T6INPPS3>
extern volatile __bit                   T6INPPS3            __at(0x1253);	// @ (0x24A * 8 + 3)
#define                                 T6INPPS3_bit        _BIT_ACCESS(T6INPPS,3)
// T6INPPS<T6INPPS4>
extern volatile __bit                   T6INPPS4            __at(0x1254);	// @ (0x24A * 8 + 4)
#define                                 T6INPPS4_bit        _BIT_ACCESS(T6INPPS,4)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x19E8);	// @ (0x33D * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x19E9);	// @ (0x33D * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x19EA);	// @ (0x33D * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x19EB);	// @ (0x33D * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x19EC);	// @ (0x33D * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x19E7);	// @ (0x33C * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x19E0);	// @ (0x33C * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x19E1);	// @ (0x33C * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x19E2);	// @ (0x33C * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x19E3);	// @ (0x33C * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x19EF);	// @ (0x33D * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x19F8);	// @ (0x33F * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x19F9);	// @ (0x33F * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x19FA);	// @ (0x33F * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x19FB);	// @ (0x33F * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// T6RST<T6RSEL4>
extern volatile __bit                   T6RSEL4             __at(0x19FC);	// @ (0x33F * 8 + 4)
#define                                 T6RSEL4_bit         _BIT_ACCESS(T6RST,4)
// T6RST<T6RSEL5>
extern volatile __bit                   T6RSEL5             __at(0x19FD);	// @ (0x33F * 8 + 5)
#define                                 T6RSEL5_bit         _BIT_ACCESS(T6RST,5)
// T6RST<T6RSEL6>
extern volatile __bit                   T6RSEL6             __at(0x19FE);	// @ (0x33F * 8 + 6)
#define                                 T6RSEL6_bit         _BIT_ACCESS(T6RST,6)
// ADCON3<TMD0>
extern volatile __bit                   TMD0                __at(0x1FB0);	// @ (0x3F6 * 8 + 0)
#define                                 TMD0_bit            _BIT_ACCESS(ADCON3,0)
// ADCON3<TMD1>
extern volatile __bit                   TMD1                __at(0x1FB1);	// @ (0x3F6 * 8 + 1)
#define                                 TMD1_bit            _BIT_ACCESS(ADCON3,1)
// ADCON3<TMD2>
extern volatile __bit                   TMD2                __at(0x1FB2);	// @ (0x3F6 * 8 + 2)
#define                                 TMD2_bit            _BIT_ACCESS(ADCON3,2)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x18C8);	// @ (0x319 * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x18C9);	// @ (0x319 * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x18CA);	// @ (0x319 * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x18CB);	// @ (0x319 * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x18CC);	// @ (0x319 * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x18CD);	// @ (0x319 * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x18CE);	// @ (0x319 * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x18CF);	// @ (0x319 * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE3<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x250F);	// @ (0x4A1 * 8 + 7)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE3,7)
// PIR3<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x258F);	// @ (0x4B1 * 8 + 7)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR3,7)
// IPR3<TMR0IP>
extern volatile __bit                   TMR0IP              __at(0x1B2F);	// @ (0x365 * 8 + 7)
#define                                 TMR0IP_bit          _BIT_ACCESS(IPR3,7)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x18C0);	// @ (0x318 * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x18C1);	// @ (0x318 * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x18C2);	// @ (0x318 * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x18C3);	// @ (0x318 * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x18C4);	// @ (0x318 * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x18C5);	// @ (0x318 * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x18C6);	// @ (0x318 * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x18C7);	// @ (0x318 * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x308);	// @ (0x61 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// PIE3<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x250D);	// @ (0x4A1 * 8 + 5)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE3,5)
// PIR3<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x258D);	// @ (0x4B1 * 8 + 5)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR3,5)
// IPR3<TMR1GIP>
extern volatile __bit                   TMR1GIP             __at(0x1B2D);	// @ (0x365 * 8 + 5)
#define                                 TMR1GIP_bit         _BIT_ACCESS(IPR3,5)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x18E8);	// @ (0x31D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x18E9);	// @ (0x31D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x18EA);	// @ (0x31D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x18EB);	// @ (0x31D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x18EC);	// @ (0x31D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x18ED);	// @ (0x31D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x18EE);	// @ (0x31D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x18EF);	// @ (0x31D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE3<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x250C);	// @ (0x4A1 * 8 + 4)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE3,4)
// PIR3<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x258C);	// @ (0x4B1 * 8 + 4)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR3,4)
// IPR3<TMR1IP>
extern volatile __bit                   TMR1IP              __at(0x1B2C);	// @ (0x365 * 8 + 4)
#define                                 TMR1IP_bit          _BIT_ACCESS(IPR3,4)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x18E0);	// @ (0x31C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x18E1);	// @ (0x31C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x18E2);	// @ (0x31C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x18E3);	// @ (0x31C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x18E4);	// @ (0x31C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x18E5);	// @ (0x31C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x18E6);	// @ (0x31C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x18E7);	// @ (0x31C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x309);	// @ (0x61 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x18F0);	// @ (0x31E * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE3<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x250B);	// @ (0x4A1 * 8 + 3)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x258B);	// @ (0x4B1 * 8 + 3)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR3,3)
// IPR3<TMR2IP>
extern volatile __bit                   TMR2IP              __at(0x1B2B);	// @ (0x365 * 8 + 3)
#define                                 TMR2IP_bit          _BIT_ACCESS(IPR3,3)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x30A);	// @ (0x61 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1927);	// @ (0x324 * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// PIE5<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x251D);	// @ (0x4A3 * 8 + 5)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE5,5)
// PIR5<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x259D);	// @ (0x4B3 * 8 + 5)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR5,5)
// IPR5<TMR3GIP>
extern volatile __bit                   TMR3GIP             __at(0x1B3D);	// @ (0x367 * 8 + 5)
#define                                 TMR3GIP_bit         _BIT_ACCESS(IPR5,5)
// TMR3H<TMR3H0>
extern volatile __bit                   TMR3H0              __at(0x1948);	// @ (0x329 * 8 + 0)
#define                                 TMR3H0_bit          _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR3H1>
extern volatile __bit                   TMR3H1              __at(0x1949);	// @ (0x329 * 8 + 1)
#define                                 TMR3H1_bit          _BIT_ACCESS(TMR3H,1)
// TMR3H<TMR3H2>
extern volatile __bit                   TMR3H2              __at(0x194A);	// @ (0x329 * 8 + 2)
#define                                 TMR3H2_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR3H3>
extern volatile __bit                   TMR3H3              __at(0x194B);	// @ (0x329 * 8 + 3)
#define                                 TMR3H3_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR3H4>
extern volatile __bit                   TMR3H4              __at(0x194C);	// @ (0x329 * 8 + 4)
#define                                 TMR3H4_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR3H5>
extern volatile __bit                   TMR3H5              __at(0x194D);	// @ (0x329 * 8 + 5)
#define                                 TMR3H5_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR3H6>
extern volatile __bit                   TMR3H6              __at(0x194E);	// @ (0x329 * 8 + 6)
#define                                 TMR3H6_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR3H7>
extern volatile __bit                   TMR3H7              __at(0x194F);	// @ (0x329 * 8 + 7)
#define                                 TMR3H7_bit          _BIT_ACCESS(TMR3H,7)
// PIE5<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x251C);	// @ (0x4A3 * 8 + 4)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x259C);	// @ (0x4B3 * 8 + 4)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR5,4)
// IPR5<TMR3IP>
extern volatile __bit                   TMR3IP              __at(0x1B3C);	// @ (0x367 * 8 + 4)
#define                                 TMR3IP_bit          _BIT_ACCESS(IPR5,4)
// TMR3L<TMR3L0>
extern volatile __bit                   TMR3L0              __at(0x1940);	// @ (0x328 * 8 + 0)
#define                                 TMR3L0_bit          _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR3L1>
extern volatile __bit                   TMR3L1              __at(0x1941);	// @ (0x328 * 8 + 1)
#define                                 TMR3L1_bit          _BIT_ACCESS(TMR3L,1)
// TMR3L<TMR3L2>
extern volatile __bit                   TMR3L2              __at(0x1942);	// @ (0x328 * 8 + 2)
#define                                 TMR3L2_bit          _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR3L3>
extern volatile __bit                   TMR3L3              __at(0x1943);	// @ (0x328 * 8 + 3)
#define                                 TMR3L3_bit          _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR3L4>
extern volatile __bit                   TMR3L4              __at(0x1944);	// @ (0x328 * 8 + 4)
#define                                 TMR3L4_bit          _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR3L5>
extern volatile __bit                   TMR3L5              __at(0x1945);	// @ (0x328 * 8 + 5)
#define                                 TMR3L5_bit          _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR3L6>
extern volatile __bit                   TMR3L6              __at(0x1946);	// @ (0x328 * 8 + 6)
#define                                 TMR3L6_bit          _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR3L7>
extern volatile __bit                   TMR3L7              __at(0x1947);	// @ (0x328 * 8 + 7)
#define                                 TMR3L7_bit          _BIT_ACCESS(TMR3L,7)
// PMD1<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x30B);	// @ (0x61 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD1,3)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x1950);	// @ (0x32A * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE11<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x254B);	// @ (0x4A9 * 8 + 3)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE11,3)
// PIR11<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x25CB);	// @ (0x4B9 * 8 + 3)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR11,3)
// IPR11<TMR4IP>
extern volatile __bit                   TMR4IP              __at(0x1B6B);	// @ (0x36D * 8 + 3)
#define                                 TMR4IP_bit          _BIT_ACCESS(IPR11,3)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x30C);	// @ (0x61 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x1987);	// @ (0x330 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// PIE8<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x2535);	// @ (0x4A6 * 8 + 5)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE8,5)
// PIR8<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0x25B5);	// @ (0x4B6 * 8 + 5)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR8,5)
// IPR8<TMR5GIP>
extern volatile __bit                   TMR5GIP             __at(0x1B55);	// @ (0x36A * 8 + 5)
#define                                 TMR5GIP_bit         _BIT_ACCESS(IPR8,5)
// TMR5H<TMR5H0>
extern volatile __bit                   TMR5H0              __at(0x19A8);	// @ (0x335 * 8 + 0)
#define                                 TMR5H0_bit          _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR5H1>
extern volatile __bit                   TMR5H1              __at(0x19A9);	// @ (0x335 * 8 + 1)
#define                                 TMR5H1_bit          _BIT_ACCESS(TMR5H,1)
// TMR5H<TMR5H2>
extern volatile __bit                   TMR5H2              __at(0x19AA);	// @ (0x335 * 8 + 2)
#define                                 TMR5H2_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR5H3>
extern volatile __bit                   TMR5H3              __at(0x19AB);	// @ (0x335 * 8 + 3)
#define                                 TMR5H3_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR5H4>
extern volatile __bit                   TMR5H4              __at(0x19AC);	// @ (0x335 * 8 + 4)
#define                                 TMR5H4_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR5H5>
extern volatile __bit                   TMR5H5              __at(0x19AD);	// @ (0x335 * 8 + 5)
#define                                 TMR5H5_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR5H6>
extern volatile __bit                   TMR5H6              __at(0x19AE);	// @ (0x335 * 8 + 6)
#define                                 TMR5H6_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR5H7>
extern volatile __bit                   TMR5H7              __at(0x19AF);	// @ (0x335 * 8 + 7)
#define                                 TMR5H7_bit          _BIT_ACCESS(TMR5H,7)
// PIE8<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x2534);	// @ (0x4A6 * 8 + 4)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE8,4)
// PIR8<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0x25B4);	// @ (0x4B6 * 8 + 4)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR8,4)
// IPR8<TMR5IP>
extern volatile __bit                   TMR5IP              __at(0x1B54);	// @ (0x36A * 8 + 4)
#define                                 TMR5IP_bit          _BIT_ACCESS(IPR8,4)
// TMR5L<TMR5L0>
extern volatile __bit                   TMR5L0              __at(0x19A0);	// @ (0x334 * 8 + 0)
#define                                 TMR5L0_bit          _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR5L1>
extern volatile __bit                   TMR5L1              __at(0x19A1);	// @ (0x334 * 8 + 1)
#define                                 TMR5L1_bit          _BIT_ACCESS(TMR5L,1)
// TMR5L<TMR5L2>
extern volatile __bit                   TMR5L2              __at(0x19A2);	// @ (0x334 * 8 + 2)
#define                                 TMR5L2_bit          _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR5L3>
extern volatile __bit                   TMR5L3              __at(0x19A3);	// @ (0x334 * 8 + 3)
#define                                 TMR5L3_bit          _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR5L4>
extern volatile __bit                   TMR5L4              __at(0x19A4);	// @ (0x334 * 8 + 4)
#define                                 TMR5L4_bit          _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR5L5>
extern volatile __bit                   TMR5L5              __at(0x19A5);	// @ (0x334 * 8 + 5)
#define                                 TMR5L5_bit          _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR5L6>
extern volatile __bit                   TMR5L6              __at(0x19A6);	// @ (0x334 * 8 + 6)
#define                                 TMR5L6_bit          _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR5L7>
extern volatile __bit                   TMR5L7              __at(0x19A7);	// @ (0x334 * 8 + 7)
#define                                 TMR5L7_bit          _BIT_ACCESS(TMR5L,7)
// PMD1<TMR5MD>
extern volatile __bit                   TMR5MD              __at(0x30D);	// @ (0x61 * 8 + 5)
#define                                 TMR5MD_bit          _BIT_ACCESS(PMD1,5)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x19B0);	// @ (0x336 * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE15<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x256B);	// @ (0x4AD * 8 + 3)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE15,3)
// PIR15<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x25EB);	// @ (0x4BD * 8 + 3)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR15,3)
// IPR15<TMR6IP>
extern volatile __bit                   TMR6IP              __at(0x1B8B);	// @ (0x371 * 8 + 3)
#define                                 TMR6IP_bit          _BIT_ACCESS(IPR15,3)
// PMD1<TMR6MD>
extern volatile __bit                   TMR6MD              __at(0x30E);	// @ (0x61 * 8 + 6)
#define                                 TMR6MD_bit          _BIT_ACCESS(PMD1,6)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x19E7);	// @ (0x33C * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// SCANCON0<TRIGEN>
extern volatile __bit                   TRIGEN              __at(0x1B06);	// @ (0x360 * 8 + 6)
#define                                 TRIGEN_bit          _BIT_ACCESS(SCANCON0,6)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x2630);	// @ (0x4C6 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x2631);	// @ (0x4C6 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x2632);	// @ (0x4C6 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x2633);	// @ (0x4C6 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x2634);	// @ (0x4C6 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x2635);	// @ (0x4C6 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x2636);	// @ (0x4C6 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x2637);	// @ (0x4C6 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x2638);	// @ (0x4C7 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x2639);	// @ (0x4C7 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x263A);	// @ (0x4C7 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x263B);	// @ (0x4C7 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x263C);	// @ (0x4C7 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x263D);	// @ (0x4C7 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x263E);	// @ (0x4C7 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x263F);	// @ (0x4C7 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x2640);	// @ (0x4C8 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x2641);	// @ (0x4C8 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x2642);	// @ (0x4C8 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x2643);	// @ (0x4C8 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x2644);	// @ (0x4C8 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x2645);	// @ (0x4C8 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x2646);	// @ (0x4C8 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x2647);	// @ (0x4C8 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TRISD<TRISD0>
extern volatile __bit                   TRISD0              __at(0x2648);	// @ (0x4C9 * 8 + 0)
#define                                 TRISD0_bit          _BIT_ACCESS(TRISD,0)
// TRISD<TRISD1>
extern volatile __bit                   TRISD1              __at(0x2649);	// @ (0x4C9 * 8 + 1)
#define                                 TRISD1_bit          _BIT_ACCESS(TRISD,1)
// TRISD<TRISD2>
extern volatile __bit                   TRISD2              __at(0x264A);	// @ (0x4C9 * 8 + 2)
#define                                 TRISD2_bit          _BIT_ACCESS(TRISD,2)
// TRISD<TRISD3>
extern volatile __bit                   TRISD3              __at(0x264B);	// @ (0x4C9 * 8 + 3)
#define                                 TRISD3_bit          _BIT_ACCESS(TRISD,3)
// TRISD<TRISD4>
extern volatile __bit                   TRISD4              __at(0x264C);	// @ (0x4C9 * 8 + 4)
#define                                 TRISD4_bit          _BIT_ACCESS(TRISD,4)
// TRISD<TRISD5>
extern volatile __bit                   TRISD5              __at(0x264D);	// @ (0x4C9 * 8 + 5)
#define                                 TRISD5_bit          _BIT_ACCESS(TRISD,5)
// TRISD<TRISD6>
extern volatile __bit                   TRISD6              __at(0x264E);	// @ (0x4C9 * 8 + 6)
#define                                 TRISD6_bit          _BIT_ACCESS(TRISD,6)
// TRISD<TRISD7>
extern volatile __bit                   TRISD7              __at(0x264F);	// @ (0x4C9 * 8 + 7)
#define                                 TRISD7_bit          _BIT_ACCESS(TRISD,7)
// SMT1STAT<TS>
extern volatile __bit                   TS                  __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 TS_bit              _BIT_ACCESS(SMT1STAT,2)
// SCANTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x1B08);	// @ (0x361 * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x1B09);	// @ (0x361 * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x1B0A);	// @ (0x361 * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<TSEL3>
extern volatile __bit                   TSEL3               __at(0x1B0B);	// @ (0x361 * 8 + 3)
#define                                 TSEL3_bit           _BIT_ACCESS(SCANTRIG,3)
// SCANTRIG<TSEL4>
extern volatile __bit                   TSEL4               __at(0x1B0C);	// @ (0x361 * 8 + 4)
#define                                 TSEL4_bit           _BIT_ACCESS(SCANTRIG,4)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x1EBD);	// @ (0x3D7 * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x1EBC);	// @ (0x3D7 * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x580);	// @ (0xB0 * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x581);	// @ (0xB0 * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x582);	// @ (0xB0 * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x583);	// @ (0xB0 * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x584);	// @ (0xB0 * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x585);	// @ (0xB0 * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// I2C1CON1<TXU>
extern volatile __bit                   TXU                 __at(0x14A9);	// @ (0x295 * 8 + 1)
#define                                 TXU_bit             _BIT_ACCESS(I2C1CON1,1)
// U1CON0<U1ABDEN>
extern volatile __bit                   U1ABDEN             __at(0x155E);	// @ (0x2AB * 8 + 6)
#define                                 U1ABDEN_bit         _BIT_ACCESS(U1CON0,6)
// U1UIR<U1ABDIE>
extern volatile __bit                   U1ABDIE             __at(0x158A);	// @ (0x2B1 * 8 + 2)
#define                                 U1ABDIE_bit         _BIT_ACCESS(U1UIR,2)
// U1UIR<U1ABDIF>
extern volatile __bit                   U1ABDIF             __at(0x158E);	// @ (0x2B1 * 8 + 6)
#define                                 U1ABDIF_bit         _BIT_ACCESS(U1UIR,6)
// U1ERRIE<U1ABDOVE>
extern volatile __bit                   U1ABDOVE            __at(0x159D);	// @ (0x2B3 * 8 + 5)
#define                                 U1ABDOVE_bit        _BIT_ACCESS(U1ERRIE,5)
// U1ERRIR<U1ABDOVF>
extern volatile __bit                   U1ABDOVF            __at(0x1595);	// @ (0x2B2 * 8 + 5)
#define                                 U1ABDOVF_bit        _BIT_ACCESS(U1ERRIR,5)
// U1CON0<U1BRGS>
extern volatile __bit                   U1BRGS              __at(0x155F);	// @ (0x2AB * 8 + 7)
#define                                 U1BRGS_bit          _BIT_ACCESS(U1CON0,7)
// U1CON1<U1BRKOVR>
extern volatile __bit                   U1BRKOVR            __at(0x1561);	// @ (0x2AC * 8 + 1)
#define                                 U1BRKOVR_bit        _BIT_ACCESS(U1CON1,1)
// U1CON2<U1C0EN>
extern volatile __bit                   U1C0EN              __at(0x156B);	// @ (0x2AD * 8 + 3)
#define                                 U1C0EN_bit          _BIT_ACCESS(U1CON2,3)
// U1ERRIE<U1CERIE>
extern volatile __bit                   U1CERIE             __at(0x159C);	// @ (0x2B3 * 8 + 4)
#define                                 U1CERIE_bit         _BIT_ACCESS(U1ERRIE,4)
// U1ERRIR<U1CERIF>
extern volatile __bit                   U1CERIF             __at(0x1594);	// @ (0x2B2 * 8 + 4)
#define                                 U1CERIF_bit         _BIT_ACCESS(U1ERRIR,4)
// U1CTSPPS<U1CTSPPS0>
extern volatile __bit                   U1CTSPPS0           __at(0x1398);	// @ (0x273 * 8 + 0)
#define                                 U1CTSPPS0_bit       _BIT_ACCESS(U1CTSPPS,0)
// U1CTSPPS<U1CTSPPS1>
extern volatile __bit                   U1CTSPPS1           __at(0x1399);	// @ (0x273 * 8 + 1)
#define                                 U1CTSPPS1_bit       _BIT_ACCESS(U1CTSPPS,1)
// U1CTSPPS<U1CTSPPS2>
extern volatile __bit                   U1CTSPPS2           __at(0x139A);	// @ (0x273 * 8 + 2)
#define                                 U1CTSPPS2_bit       _BIT_ACCESS(U1CTSPPS,2)
// U1CTSPPS<U1CTSPPS3>
extern volatile __bit                   U1CTSPPS3           __at(0x139B);	// @ (0x273 * 8 + 3)
#define                                 U1CTSPPS3_bit       _BIT_ACCESS(U1CTSPPS,3)
// U1CTSPPS<U1CTSPPS4>
extern volatile __bit                   U1CTSPPS4           __at(0x139C);	// @ (0x273 * 8 + 4)
#define                                 U1CTSPPS4_bit       _BIT_ACCESS(U1CTSPPS,4)
// U1CTSPPS<U1CTSPPS5>
extern volatile __bit                   U1CTSPPS5           __at(0x139D);	// @ (0x273 * 8 + 5)
#define                                 U1CTSPPS5_bit       _BIT_ACCESS(U1CTSPPS,5)
// PIE4<U1EIE>
extern volatile __bit                   U1EIE               __at(0x2512);	// @ (0x4A2 * 8 + 2)
#define                                 U1EIE_bit           _BIT_ACCESS(PIE4,2)
// PIR4<U1EIF>
extern volatile __bit                   U1EIF               __at(0x2592);	// @ (0x4B2 * 8 + 2)
#define                                 U1EIF_bit           _BIT_ACCESS(PIR4,2)
// IPR4<U1EIP>
extern volatile __bit                   U1EIP               __at(0x1B32);	// @ (0x366 * 8 + 2)
#define                                 U1EIP_bit           _BIT_ACCESS(IPR4,2)
// U1ERRIE<U1FERIE>
extern volatile __bit                   U1FERIE             __at(0x159B);	// @ (0x2B3 * 8 + 3)
#define                                 U1FERIE_bit         _BIT_ACCESS(U1ERRIE,3)
// U1ERRIR<U1FERIF>
extern volatile __bit                   U1FERIF             __at(0x1593);	// @ (0x2B2 * 8 + 3)
#define                                 U1FERIF_bit         _BIT_ACCESS(U1ERRIR,3)
// U1CON2<U1FLO0>
extern volatile __bit                   U1FLO0              __at(0x1568);	// @ (0x2AD * 8 + 0)
#define                                 U1FLO0_bit          _BIT_ACCESS(U1CON2,0)
// U1CON2<U1FLO1>
extern volatile __bit                   U1FLO1              __at(0x1569);	// @ (0x2AD * 8 + 1)
#define                                 U1FLO1_bit          _BIT_ACCESS(U1CON2,1)
// PIE4<U1IE>
extern volatile __bit                   U1IE                __at(0x2513);	// @ (0x4A2 * 8 + 3)
#define                                 U1IE_bit            _BIT_ACCESS(PIE4,3)
// PIR4<U1IF>
extern volatile __bit                   U1IF                __at(0x2593);	// @ (0x4B2 * 8 + 3)
#define                                 U1IF_bit            _BIT_ACCESS(PIR4,3)
// IPR4<U1IP>
extern volatile __bit                   U1IP                __at(0x1B33);	// @ (0x366 * 8 + 3)
#define                                 U1IP_bit            _BIT_ACCESS(IPR4,3)
// PMD6<U1MD>
extern volatile __bit                   U1MD                __at(0x333);	// @ (0x66 * 8 + 3)
#define                                 U1MD_bit            _BIT_ACCESS(PMD6,3)
// U1CON0<U1MODE0>
extern volatile __bit                   U1MODE0             __at(0x1558);	// @ (0x2AB * 8 + 0)
#define                                 U1MODE0_bit         _BIT_ACCESS(U1CON0,0)
// U1CON0<U1MODE1>
extern volatile __bit                   U1MODE1             __at(0x1559);	// @ (0x2AB * 8 + 1)
#define                                 U1MODE1_bit         _BIT_ACCESS(U1CON0,1)
// U1CON0<U1MODE2>
extern volatile __bit                   U1MODE2             __at(0x155A);	// @ (0x2AB * 8 + 2)
#define                                 U1MODE2_bit         _BIT_ACCESS(U1CON0,2)
// U1CON0<U1MODE3>
extern volatile __bit                   U1MODE3             __at(0x155B);	// @ (0x2AB * 8 + 3)
#define                                 U1MODE3_bit         _BIT_ACCESS(U1CON0,3)
// U1CON1<U1ON>
extern volatile __bit                   U1ON                __at(0x1567);	// @ (0x2AC * 8 + 7)
#define                                 U1ON_bit            _BIT_ACCESS(U1CON1,7)
// U1ERRIE<U1PERIE>
extern volatile __bit                   U1PERIE             __at(0x159E);	// @ (0x2B3 * 8 + 6)
#define                                 U1PERIE_bit         _BIT_ACCESS(U1ERRIE,6)
// U1ERRIR<U1PERIF>
extern volatile __bit                   U1PERIF             __at(0x1596);	// @ (0x2B2 * 8 + 6)
#define                                 U1PERIF_bit         _BIT_ACCESS(U1ERRIR,6)
// U1FIFO<U1RCIDL>
extern volatile __bit                   U1RCIDL             __at(0x1583);	// @ (0x2B0 * 8 + 3)
#define                                 U1RCIDL_bit         _BIT_ACCESS(U1FIFO,3)
// U1CON2<U1RUNOVF>
extern volatile __bit                   U1RUNOVF            __at(0x156F);	// @ (0x2AD * 8 + 7)
#define                                 U1RUNOVF_bit        _BIT_ACCESS(U1CON2,7)
// U1FIFO<U1RXBE>
extern volatile __bit                   U1RXBE              __at(0x1581);	// @ (0x2B0 * 8 + 1)
#define                                 U1RXBE_bit          _BIT_ACCESS(U1FIFO,1)
// U1FIFO<U1RXBF>
extern volatile __bit                   U1RXBF              __at(0x1580);	// @ (0x2B0 * 8 + 0)
#define                                 U1RXBF_bit          _BIT_ACCESS(U1FIFO,0)
// U1CON1<U1RXBIMD>
extern volatile __bit                   U1RXBIMD            __at(0x1563);	// @ (0x2AC * 8 + 3)
#define                                 U1RXBIMD_bit        _BIT_ACCESS(U1CON1,3)
// U1ERRIE<U1RXBKIE>
extern volatile __bit                   U1RXBKIE            __at(0x159A);	// @ (0x2B3 * 8 + 2)
#define                                 U1RXBKIE_bit        _BIT_ACCESS(U1ERRIE,2)
// U1ERRIR<U1RXBKIF>
extern volatile __bit                   U1RXBKIF            __at(0x1592);	// @ (0x2B2 * 8 + 2)
#define                                 U1RXBKIF_bit        _BIT_ACCESS(U1ERRIR,2)
// U1CON0<U1RXEN>
extern volatile __bit                   U1RXEN              __at(0x155C);	// @ (0x2AB * 8 + 4)
#define                                 U1RXEN_bit          _BIT_ACCESS(U1CON0,4)
// U1ERRIE<U1RXFOIE>
extern volatile __bit                   U1RXFOIE            __at(0x1599);	// @ (0x2B3 * 8 + 1)
#define                                 U1RXFOIE_bit        _BIT_ACCESS(U1ERRIE,1)
// U1ERRIR<U1RXFOIF>
extern volatile __bit                   U1RXFOIF            __at(0x1591);	// @ (0x2B2 * 8 + 1)
#define                                 U1RXFOIF_bit        _BIT_ACCESS(U1ERRIR,1)
// U1FIFO<U1RXIDL>
extern volatile __bit                   U1RXIDL             __at(0x1583);	// @ (0x2B0 * 8 + 3)
#define                                 U1RXIDL_bit         _BIT_ACCESS(U1FIFO,3)
// PIE4<U1RXIE>
extern volatile __bit                   U1RXIE              __at(0x2510);	// @ (0x4A2 * 8 + 0)
#define                                 U1RXIE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<U1RXIF>
extern volatile __bit                   U1RXIF              __at(0x2590);	// @ (0x4B2 * 8 + 0)
#define                                 U1RXIF_bit          _BIT_ACCESS(PIR4,0)
// IPR4<U1RXIP>
extern volatile __bit                   U1RXIP              __at(0x1B30);	// @ (0x366 * 8 + 0)
#define                                 U1RXIP_bit          _BIT_ACCESS(IPR4,0)
// U1CON2<U1RXPOL>
extern volatile __bit                   U1RXPOL             __at(0x156E);	// @ (0x2AD * 8 + 6)
#define                                 U1RXPOL_bit         _BIT_ACCESS(U1CON2,6)
// U1RXPPS<U1RXPPS0>
extern volatile __bit                   U1RXPPS0            __at(0x1390);	// @ (0x272 * 8 + 0)
#define                                 U1RXPPS0_bit        _BIT_ACCESS(U1RXPPS,0)
// U1RXPPS<U1RXPPS1>
extern volatile __bit                   U1RXPPS1            __at(0x1391);	// @ (0x272 * 8 + 1)
#define                                 U1RXPPS1_bit        _BIT_ACCESS(U1RXPPS,1)
// U1RXPPS<U1RXPPS2>
extern volatile __bit                   U1RXPPS2            __at(0x1392);	// @ (0x272 * 8 + 2)
#define                                 U1RXPPS2_bit        _BIT_ACCESS(U1RXPPS,2)
// U1RXPPS<U1RXPPS3>
extern volatile __bit                   U1RXPPS3            __at(0x1393);	// @ (0x272 * 8 + 3)
#define                                 U1RXPPS3_bit        _BIT_ACCESS(U1RXPPS,3)
// U1RXPPS<U1RXPPS4>
extern volatile __bit                   U1RXPPS4            __at(0x1394);	// @ (0x272 * 8 + 4)
#define                                 U1RXPPS4_bit        _BIT_ACCESS(U1RXPPS,4)
// U1RXPPS<U1RXPPS5>
extern volatile __bit                   U1RXPPS5            __at(0x1395);	// @ (0x272 * 8 + 5)
#define                                 U1RXPPS5_bit        _BIT_ACCESS(U1RXPPS,5)
// U1CON1<U1SENDB>
extern volatile __bit                   U1SENDB             __at(0x1560);	// @ (0x2AC * 8 + 0)
#define                                 U1SENDB_bit         _BIT_ACCESS(U1CON1,0)
// U1CON2<U1STP0>
extern volatile __bit                   U1STP0              __at(0x156C);	// @ (0x2AD * 8 + 4)
#define                                 U1STP0_bit          _BIT_ACCESS(U1CON2,4)
// U1CON2<U1STP1>
extern volatile __bit                   U1STP1              __at(0x156D);	// @ (0x2AD * 8 + 5)
#define                                 U1STP1_bit          _BIT_ACCESS(U1CON2,5)
// U1FIFO<U1STPMD>
extern volatile __bit                   U1STPMD             __at(0x1586);	// @ (0x2B0 * 8 + 6)
#define                                 U1STPMD_bit         _BIT_ACCESS(U1FIFO,6)
// U1FIFO<U1TXBE>
extern volatile __bit                   U1TXBE              __at(0x1585);	// @ (0x2B0 * 8 + 5)
#define                                 U1TXBE_bit          _BIT_ACCESS(U1FIFO,5)
// U1FIFO<U1TXBF>
extern volatile __bit                   U1TXBF              __at(0x1584);	// @ (0x2B0 * 8 + 4)
#define                                 U1TXBF_bit          _BIT_ACCESS(U1FIFO,4)
// U1ERRIE<U1TXCIE>
extern volatile __bit                   U1TXCIE             __at(0x1598);	// @ (0x2B3 * 8 + 0)
#define                                 U1TXCIE_bit         _BIT_ACCESS(U1ERRIE,0)
// U1ERRIR<U1TXCIF>
extern volatile __bit                   U1TXCIF             __at(0x1590);	// @ (0x2B2 * 8 + 0)
#define                                 U1TXCIF_bit         _BIT_ACCESS(U1ERRIR,0)
// U1CON0<U1TXEN>
extern volatile __bit                   U1TXEN              __at(0x155D);	// @ (0x2AB * 8 + 5)
#define                                 U1TXEN_bit          _BIT_ACCESS(U1CON0,5)
// PIE4<U1TXIE>
extern volatile __bit                   U1TXIE              __at(0x2511);	// @ (0x4A2 * 8 + 1)
#define                                 U1TXIE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<U1TXIF>
extern volatile __bit                   U1TXIF              __at(0x2591);	// @ (0x4B2 * 8 + 1)
#define                                 U1TXIF_bit          _BIT_ACCESS(PIR4,1)
// IPR4<U1TXIP>
extern volatile __bit                   U1TXIP              __at(0x1B31);	// @ (0x366 * 8 + 1)
#define                                 U1TXIP_bit          _BIT_ACCESS(IPR4,1)
// U1ERRIE<U1TXMTIE>
extern volatile __bit                   U1TXMTIE            __at(0x159F);	// @ (0x2B3 * 8 + 7)
#define                                 U1TXMTIE_bit        _BIT_ACCESS(U1ERRIE,7)
// U1ERRIR<U1TXMTIF>
extern volatile __bit                   U1TXMTIF            __at(0x1597);	// @ (0x2B2 * 8 + 7)
#define                                 U1TXMTIF_bit        _BIT_ACCESS(U1ERRIR,7)
// U1CON2<U1TXPOL>
extern volatile __bit                   U1TXPOL             __at(0x156A);	// @ (0x2AD * 8 + 2)
#define                                 U1TXPOL_bit         _BIT_ACCESS(U1CON2,2)
// U1FIFO<U1TXWRE>
extern volatile __bit                   U1TXWRE             __at(0x1587);	// @ (0x2B0 * 8 + 7)
#define                                 U1TXWRE_bit         _BIT_ACCESS(U1FIFO,7)
// U1CON1<U1WUE>
extern volatile __bit                   U1WUE               __at(0x1564);	// @ (0x2AC * 8 + 4)
#define                                 U1WUE_bit           _BIT_ACCESS(U1CON1,4)
// U1UIR<U1WUIF>
extern volatile __bit                   U1WUIF              __at(0x158F);	// @ (0x2B1 * 8 + 7)
#define                                 U1WUIF_bit          _BIT_ACCESS(U1UIR,7)
// U1FIFO<U1XON>
extern volatile __bit                   U1XON               __at(0x1582);	// @ (0x2B0 * 8 + 2)
#define                                 U1XON_bit           _BIT_ACCESS(U1FIFO,2)
// U2CON0<U2ABDEN>
extern volatile __bit                   U2ABDEN             __at(0x15F6);	// @ (0x2BE * 8 + 6)
#define                                 U2ABDEN_bit         _BIT_ACCESS(U2CON0,6)
// U2UIR<U2ABDIE>
extern volatile __bit                   U2ABDIE             __at(0x1622);	// @ (0x2C4 * 8 + 2)
#define                                 U2ABDIE_bit         _BIT_ACCESS(U2UIR,2)
// U2UIR<U2ABDIF>
extern volatile __bit                   U2ABDIF             __at(0x1626);	// @ (0x2C4 * 8 + 6)
#define                                 U2ABDIF_bit         _BIT_ACCESS(U2UIR,6)
// U2ERRIE<U2ABDOVE>
extern volatile __bit                   U2ABDOVE            __at(0x1635);	// @ (0x2C6 * 8 + 5)
#define                                 U2ABDOVE_bit        _BIT_ACCESS(U2ERRIE,5)
// U2ERRIR<U2ABDOVF>
extern volatile __bit                   U2ABDOVF            __at(0x162D);	// @ (0x2C5 * 8 + 5)
#define                                 U2ABDOVF_bit        _BIT_ACCESS(U2ERRIR,5)
// U2CON0<U2BRGS>
extern volatile __bit                   U2BRGS              __at(0x15F7);	// @ (0x2BE * 8 + 7)
#define                                 U2BRGS_bit          _BIT_ACCESS(U2CON0,7)
// U2CON1<U2BRKOVR>
extern volatile __bit                   U2BRKOVR            __at(0x15F9);	// @ (0x2BF * 8 + 1)
#define                                 U2BRKOVR_bit        _BIT_ACCESS(U2CON1,1)
// U2ERRIE<U2CERIE>
extern volatile __bit                   U2CERIE             __at(0x1634);	// @ (0x2C6 * 8 + 4)
#define                                 U2CERIE_bit         _BIT_ACCESS(U2ERRIE,4)
// U2ERRIR<U2CERIF>
extern volatile __bit                   U2CERIF             __at(0x162C);	// @ (0x2C5 * 8 + 4)
#define                                 U2CERIF_bit         _BIT_ACCESS(U2ERRIR,4)
// U2CTSPPS<U2CTSPPS0>
extern volatile __bit                   U2CTSPPS0           __at(0x13A8);	// @ (0x275 * 8 + 0)
#define                                 U2CTSPPS0_bit       _BIT_ACCESS(U2CTSPPS,0)
// U2CTSPPS<U2CTSPPS1>
extern volatile __bit                   U2CTSPPS1           __at(0x13A9);	// @ (0x275 * 8 + 1)
#define                                 U2CTSPPS1_bit       _BIT_ACCESS(U2CTSPPS,1)
// U2CTSPPS<U2CTSPPS2>
extern volatile __bit                   U2CTSPPS2           __at(0x13AA);	// @ (0x275 * 8 + 2)
#define                                 U2CTSPPS2_bit       _BIT_ACCESS(U2CTSPPS,2)
// U2CTSPPS<U2CTSPPS3>
extern volatile __bit                   U2CTSPPS3           __at(0x13AB);	// @ (0x275 * 8 + 3)
#define                                 U2CTSPPS3_bit       _BIT_ACCESS(U2CTSPPS,3)
// U2CTSPPS<U2CTSPPS4>
extern volatile __bit                   U2CTSPPS4           __at(0x13AC);	// @ (0x275 * 8 + 4)
#define                                 U2CTSPPS4_bit       _BIT_ACCESS(U2CTSPPS,4)
// PIE8<U2EIE>
extern volatile __bit                   U2EIE               __at(0x2532);	// @ (0x4A6 * 8 + 2)
#define                                 U2EIE_bit           _BIT_ACCESS(PIE8,2)
// PIR8<U2EIF>
extern volatile __bit                   U2EIF               __at(0x25B2);	// @ (0x4B6 * 8 + 2)
#define                                 U2EIF_bit           _BIT_ACCESS(PIR8,2)
// IPR8<U2EIP>
extern volatile __bit                   U2EIP               __at(0x1B52);	// @ (0x36A * 8 + 2)
#define                                 U2EIP_bit           _BIT_ACCESS(IPR8,2)
// U2ERRIE<U2FERIE>
extern volatile __bit                   U2FERIE             __at(0x1633);	// @ (0x2C6 * 8 + 3)
#define                                 U2FERIE_bit         _BIT_ACCESS(U2ERRIE,3)
// U2ERRIR<U2FERIF>
extern volatile __bit                   U2FERIF             __at(0x162B);	// @ (0x2C5 * 8 + 3)
#define                                 U2FERIF_bit         _BIT_ACCESS(U2ERRIR,3)
// U2CON2<U2FLO0>
extern volatile __bit                   U2FLO0              __at(0x1600);	// @ (0x2C0 * 8 + 0)
#define                                 U2FLO0_bit          _BIT_ACCESS(U2CON2,0)
// U2CON2<U2FLO1>
extern volatile __bit                   U2FLO1              __at(0x1601);	// @ (0x2C0 * 8 + 1)
#define                                 U2FLO1_bit          _BIT_ACCESS(U2CON2,1)
// PIE8<U2IE>
extern volatile __bit                   U2IE                __at(0x2533);	// @ (0x4A6 * 8 + 3)
#define                                 U2IE_bit            _BIT_ACCESS(PIE8,3)
// PIR8<U2IF>
extern volatile __bit                   U2IF                __at(0x25B3);	// @ (0x4B6 * 8 + 3)
#define                                 U2IF_bit            _BIT_ACCESS(PIR8,3)
// IPR8<U2IP>
extern volatile __bit                   U2IP                __at(0x1B53);	// @ (0x36A * 8 + 3)
#define                                 U2IP_bit            _BIT_ACCESS(IPR8,3)
// PMD6<U2MD>
extern volatile __bit                   U2MD                __at(0x334);	// @ (0x66 * 8 + 4)
#define                                 U2MD_bit            _BIT_ACCESS(PMD6,4)
// U2CON0<U2MODE0>
extern volatile __bit                   U2MODE0             __at(0x15F0);	// @ (0x2BE * 8 + 0)
#define                                 U2MODE0_bit         _BIT_ACCESS(U2CON0,0)
// U2CON0<U2MODE1>
extern volatile __bit                   U2MODE1             __at(0x15F1);	// @ (0x2BE * 8 + 1)
#define                                 U2MODE1_bit         _BIT_ACCESS(U2CON0,1)
// U2CON0<U2MODE2>
extern volatile __bit                   U2MODE2             __at(0x15F2);	// @ (0x2BE * 8 + 2)
#define                                 U2MODE2_bit         _BIT_ACCESS(U2CON0,2)
// U2CON1<U2ON>
extern volatile __bit                   U2ON                __at(0x15FF);	// @ (0x2BF * 8 + 7)
#define                                 U2ON_bit            _BIT_ACCESS(U2CON1,7)
// U2ERRIE<U2PERIE>
extern volatile __bit                   U2PERIE             __at(0x1636);	// @ (0x2C6 * 8 + 6)
#define                                 U2PERIE_bit         _BIT_ACCESS(U2ERRIE,6)
// U2ERRIR<U2PERIF>
extern volatile __bit                   U2PERIF             __at(0x162E);	// @ (0x2C5 * 8 + 6)
#define                                 U2PERIF_bit         _BIT_ACCESS(U2ERRIR,6)
// U2FIFO<U2RCIDL>
extern volatile __bit                   U2RCIDL             __at(0x161B);	// @ (0x2C3 * 8 + 3)
#define                                 U2RCIDL_bit         _BIT_ACCESS(U2FIFO,3)
// U2CON2<U2RUNOVF>
extern volatile __bit                   U2RUNOVF            __at(0x1607);	// @ (0x2C0 * 8 + 7)
#define                                 U2RUNOVF_bit        _BIT_ACCESS(U2CON2,7)
// U2FIFO<U2RXBE>
extern volatile __bit                   U2RXBE              __at(0x1619);	// @ (0x2C3 * 8 + 1)
#define                                 U2RXBE_bit          _BIT_ACCESS(U2FIFO,1)
// U2FIFO<U2RXBF>
extern volatile __bit                   U2RXBF              __at(0x1618);	// @ (0x2C3 * 8 + 0)
#define                                 U2RXBF_bit          _BIT_ACCESS(U2FIFO,0)
// U2CON1<U2RXBIMD>
extern volatile __bit                   U2RXBIMD            __at(0x15FB);	// @ (0x2BF * 8 + 3)
#define                                 U2RXBIMD_bit        _BIT_ACCESS(U2CON1,3)
// U2ERRIE<U2RXBKIE>
extern volatile __bit                   U2RXBKIE            __at(0x1632);	// @ (0x2C6 * 8 + 2)
#define                                 U2RXBKIE_bit        _BIT_ACCESS(U2ERRIE,2)
// U2ERRIR<U2RXBKIF>
extern volatile __bit                   U2RXBKIF            __at(0x162A);	// @ (0x2C5 * 8 + 2)
#define                                 U2RXBKIF_bit        _BIT_ACCESS(U2ERRIR,2)
// U2CON0<U2RXEN>
extern volatile __bit                   U2RXEN              __at(0x15F4);	// @ (0x2BE * 8 + 4)
#define                                 U2RXEN_bit          _BIT_ACCESS(U2CON0,4)
// U2ERRIE<U2RXFOIE>
extern volatile __bit                   U2RXFOIE            __at(0x1631);	// @ (0x2C6 * 8 + 1)
#define                                 U2RXFOIE_bit        _BIT_ACCESS(U2ERRIE,1)
// U2ERRIR<U2RXFOIF>
extern volatile __bit                   U2RXFOIF            __at(0x1629);	// @ (0x2C5 * 8 + 1)
#define                                 U2RXFOIF_bit        _BIT_ACCESS(U2ERRIR,1)
// U2FIFO<U2RXIDL>
extern volatile __bit                   U2RXIDL             __at(0x161B);	// @ (0x2C3 * 8 + 3)
#define                                 U2RXIDL_bit         _BIT_ACCESS(U2FIFO,3)
// PIE8<U2RXIE>
extern volatile __bit                   U2RXIE              __at(0x2530);	// @ (0x4A6 * 8 + 0)
#define                                 U2RXIE_bit          _BIT_ACCESS(PIE8,0)
// PIR8<U2RXIF>
extern volatile __bit                   U2RXIF              __at(0x25B0);	// @ (0x4B6 * 8 + 0)
#define                                 U2RXIF_bit          _BIT_ACCESS(PIR8,0)
// IPR8<U2RXIP>
extern volatile __bit                   U2RXIP              __at(0x1B50);	// @ (0x36A * 8 + 0)
#define                                 U2RXIP_bit          _BIT_ACCESS(IPR8,0)
// U2CON2<U2RXPOL>
extern volatile __bit                   U2RXPOL             __at(0x1606);	// @ (0x2C0 * 8 + 6)
#define                                 U2RXPOL_bit         _BIT_ACCESS(U2CON2,6)
// U2RXPPS<U2RXPPS0>
extern volatile __bit                   U2RXPPS0            __at(0x13A0);	// @ (0x274 * 8 + 0)
#define                                 U2RXPPS0_bit        _BIT_ACCESS(U2RXPPS,0)
// U2RXPPS<U2RXPPS1>
extern volatile __bit                   U2RXPPS1            __at(0x13A1);	// @ (0x274 * 8 + 1)
#define                                 U2RXPPS1_bit        _BIT_ACCESS(U2RXPPS,1)
// U2RXPPS<U2RXPPS2>
extern volatile __bit                   U2RXPPS2            __at(0x13A2);	// @ (0x274 * 8 + 2)
#define                                 U2RXPPS2_bit        _BIT_ACCESS(U2RXPPS,2)
// U2RXPPS<U2RXPPS3>
extern volatile __bit                   U2RXPPS3            __at(0x13A3);	// @ (0x274 * 8 + 3)
#define                                 U2RXPPS3_bit        _BIT_ACCESS(U2RXPPS,3)
// U2RXPPS<U2RXPPS4>
extern volatile __bit                   U2RXPPS4            __at(0x13A4);	// @ (0x274 * 8 + 4)
#define                                 U2RXPPS4_bit        _BIT_ACCESS(U2RXPPS,4)
// U2CON1<U2SENDB>
extern volatile __bit                   U2SENDB             __at(0x15F8);	// @ (0x2BF * 8 + 0)
#define                                 U2SENDB_bit         _BIT_ACCESS(U2CON1,0)
// U2CON2<U2STP0>
extern volatile __bit                   U2STP0              __at(0x1604);	// @ (0x2C0 * 8 + 4)
#define                                 U2STP0_bit          _BIT_ACCESS(U2CON2,4)
// U2CON2<U2STP1>
extern volatile __bit                   U2STP1              __at(0x1605);	// @ (0x2C0 * 8 + 5)
#define                                 U2STP1_bit          _BIT_ACCESS(U2CON2,5)
// U2FIFO<U2STPMD>
extern volatile __bit                   U2STPMD             __at(0x161E);	// @ (0x2C3 * 8 + 6)
#define                                 U2STPMD_bit         _BIT_ACCESS(U2FIFO,6)
// U2FIFO<U2TXBE>
extern volatile __bit                   U2TXBE              __at(0x161D);	// @ (0x2C3 * 8 + 5)
#define                                 U2TXBE_bit          _BIT_ACCESS(U2FIFO,5)
// U2FIFO<U2TXBF>
extern volatile __bit                   U2TXBF              __at(0x161C);	// @ (0x2C3 * 8 + 4)
#define                                 U2TXBF_bit          _BIT_ACCESS(U2FIFO,4)
// U2ERRIE<U2TXCIE>
extern volatile __bit                   U2TXCIE             __at(0x1630);	// @ (0x2C6 * 8 + 0)
#define                                 U2TXCIE_bit         _BIT_ACCESS(U2ERRIE,0)
// U2ERRIR<U2TXCIF>
extern volatile __bit                   U2TXCIF             __at(0x1628);	// @ (0x2C5 * 8 + 0)
#define                                 U2TXCIF_bit         _BIT_ACCESS(U2ERRIR,0)
// U2CON0<U2TXEN>
extern volatile __bit                   U2TXEN              __at(0x15F5);	// @ (0x2BE * 8 + 5)
#define                                 U2TXEN_bit          _BIT_ACCESS(U2CON0,5)
// PIE8<U2TXIE>
extern volatile __bit                   U2TXIE              __at(0x2531);	// @ (0x4A6 * 8 + 1)
#define                                 U2TXIE_bit          _BIT_ACCESS(PIE8,1)
// PIR8<U2TXIF>
extern volatile __bit                   U2TXIF              __at(0x25B1);	// @ (0x4B6 * 8 + 1)
#define                                 U2TXIF_bit          _BIT_ACCESS(PIR8,1)
// IPR8<U2TXIP>
extern volatile __bit                   U2TXIP              __at(0x1B51);	// @ (0x36A * 8 + 1)
#define                                 U2TXIP_bit          _BIT_ACCESS(IPR8,1)
// U2ERRIE<U2TXMTIE>
extern volatile __bit                   U2TXMTIE            __at(0x1637);	// @ (0x2C6 * 8 + 7)
#define                                 U2TXMTIE_bit        _BIT_ACCESS(U2ERRIE,7)
// U2ERRIR<U2TXMTIF>
extern volatile __bit                   U2TXMTIF            __at(0x162F);	// @ (0x2C5 * 8 + 7)
#define                                 U2TXMTIF_bit        _BIT_ACCESS(U2ERRIR,7)
// U2CON2<U2TXPOL>
extern volatile __bit                   U2TXPOL             __at(0x1602);	// @ (0x2C0 * 8 + 2)
#define                                 U2TXPOL_bit         _BIT_ACCESS(U2CON2,2)
// U2FIFO<U2TXWRE>
extern volatile __bit                   U2TXWRE             __at(0x161F);	// @ (0x2C3 * 8 + 7)
#define                                 U2TXWRE_bit         _BIT_ACCESS(U2FIFO,7)
// U2CON1<U2WUE>
extern volatile __bit                   U2WUE               __at(0x15FC);	// @ (0x2BF * 8 + 4)
#define                                 U2WUE_bit           _BIT_ACCESS(U2CON1,4)
// U2UIR<U2WUIF>
extern volatile __bit                   U2WUIF              __at(0x1627);	// @ (0x2C4 * 8 + 7)
#define                                 U2WUIF_bit          _BIT_ACCESS(U2UIR,7)
// U2FIFO<U2XON>
extern volatile __bit                   U2XON               __at(0x161A);	// @ (0x2C3 * 8 + 2)
#define                                 U2XON_bit           _BIT_ACCESS(U2FIFO,2)
// U3CON0<U3ABDEN>
extern volatile __bit                   U3ABDEN             __at(0x168E);	// @ (0x2D1 * 8 + 6)
#define                                 U3ABDEN_bit         _BIT_ACCESS(U3CON0,6)
// U3UIR<U3ABDIE>
extern volatile __bit                   U3ABDIE             __at(0x16BA);	// @ (0x2D7 * 8 + 2)
#define                                 U3ABDIE_bit         _BIT_ACCESS(U3UIR,2)
// U3UIR<U3ABDIF>
extern volatile __bit                   U3ABDIF             __at(0x16BE);	// @ (0x2D7 * 8 + 6)
#define                                 U3ABDIF_bit         _BIT_ACCESS(U3UIR,6)
// U3ERRIE<U3ABDOVE>
extern volatile __bit                   U3ABDOVE            __at(0x16CD);	// @ (0x2D9 * 8 + 5)
#define                                 U3ABDOVE_bit        _BIT_ACCESS(U3ERRIE,5)
// U3ERRIR<U3ABDOVF>
extern volatile __bit                   U3ABDOVF            __at(0x16C5);	// @ (0x2D8 * 8 + 5)
#define                                 U3ABDOVF_bit        _BIT_ACCESS(U3ERRIR,5)
// U3CON0<U3BRGS>
extern volatile __bit                   U3BRGS              __at(0x168F);	// @ (0x2D1 * 8 + 7)
#define                                 U3BRGS_bit          _BIT_ACCESS(U3CON0,7)
// U3CON1<U3BRKOVR>
extern volatile __bit                   U3BRKOVR            __at(0x1691);	// @ (0x2D2 * 8 + 1)
#define                                 U3BRKOVR_bit        _BIT_ACCESS(U3CON1,1)
// U3ERRIE<U3CERIE>
extern volatile __bit                   U3CERIE             __at(0x16CC);	// @ (0x2D9 * 8 + 4)
#define                                 U3CERIE_bit         _BIT_ACCESS(U3ERRIE,4)
// U3ERRIR<U3CERIF>
extern volatile __bit                   U3CERIF             __at(0x16C4);	// @ (0x2D8 * 8 + 4)
#define                                 U3CERIF_bit         _BIT_ACCESS(U3ERRIR,4)
// U3CTSPPS<U3CTSPPS0>
extern volatile __bit                   U3CTSPPS0           __at(0x13B8);	// @ (0x277 * 8 + 0)
#define                                 U3CTSPPS0_bit       _BIT_ACCESS(U3CTSPPS,0)
// U3CTSPPS<U3CTSPPS1>
extern volatile __bit                   U3CTSPPS1           __at(0x13B9);	// @ (0x277 * 8 + 1)
#define                                 U3CTSPPS1_bit       _BIT_ACCESS(U3CTSPPS,1)
// U3CTSPPS<U3CTSPPS2>
extern volatile __bit                   U3CTSPPS2           __at(0x13BA);	// @ (0x277 * 8 + 2)
#define                                 U3CTSPPS2_bit       _BIT_ACCESS(U3CTSPPS,2)
// U3CTSPPS<U3CTSPPS3>
extern volatile __bit                   U3CTSPPS3           __at(0x13BB);	// @ (0x277 * 8 + 3)
#define                                 U3CTSPPS3_bit       _BIT_ACCESS(U3CTSPPS,3)
// U3CTSPPS<U3CTSPPS4>
extern volatile __bit                   U3CTSPPS4           __at(0x13BC);	// @ (0x277 * 8 + 4)
#define                                 U3CTSPPS4_bit       _BIT_ACCESS(U3CTSPPS,4)
// U3CTSPPS<U3CTSPPS5>
extern volatile __bit                   U3CTSPPS5           __at(0x13BD);	// @ (0x277 * 8 + 5)
#define                                 U3CTSPPS5_bit       _BIT_ACCESS(U3CTSPPS,5)
// PIE9<U3EIE>
extern volatile __bit                   U3EIE               __at(0x253A);	// @ (0x4A7 * 8 + 2)
#define                                 U3EIE_bit           _BIT_ACCESS(PIE9,2)
// PIR9<U3EIF>
extern volatile __bit                   U3EIF               __at(0x25BA);	// @ (0x4B7 * 8 + 2)
#define                                 U3EIF_bit           _BIT_ACCESS(PIR9,2)
// IPR9<U3EIP>
extern volatile __bit                   U3EIP               __at(0x1B5A);	// @ (0x36B * 8 + 2)
#define                                 U3EIP_bit           _BIT_ACCESS(IPR9,2)
// U3ERRIE<U3FERIE>
extern volatile __bit                   U3FERIE             __at(0x16CB);	// @ (0x2D9 * 8 + 3)
#define                                 U3FERIE_bit         _BIT_ACCESS(U3ERRIE,3)
// U3ERRIR<U3FERIF>
extern volatile __bit                   U3FERIF             __at(0x16C3);	// @ (0x2D8 * 8 + 3)
#define                                 U3FERIF_bit         _BIT_ACCESS(U3ERRIR,3)
// U3CON2<U3FLO0>
extern volatile __bit                   U3FLO0              __at(0x1698);	// @ (0x2D3 * 8 + 0)
#define                                 U3FLO0_bit          _BIT_ACCESS(U3CON2,0)
// U3CON2<U3FLO1>
extern volatile __bit                   U3FLO1              __at(0x1699);	// @ (0x2D3 * 8 + 1)
#define                                 U3FLO1_bit          _BIT_ACCESS(U3CON2,1)
// PIE9<U3IE>
extern volatile __bit                   U3IE                __at(0x253B);	// @ (0x4A7 * 8 + 3)
#define                                 U3IE_bit            _BIT_ACCESS(PIE9,3)
// PIR9<U3IF>
extern volatile __bit                   U3IF                __at(0x25BB);	// @ (0x4B7 * 8 + 3)
#define                                 U3IF_bit            _BIT_ACCESS(PIR9,3)
// IPR9<U3IP>
extern volatile __bit                   U3IP                __at(0x1B5B);	// @ (0x36B * 8 + 3)
#define                                 U3IP_bit            _BIT_ACCESS(IPR9,3)
// PMD6<U3MD>
extern volatile __bit                   U3MD                __at(0x335);	// @ (0x66 * 8 + 5)
#define                                 U3MD_bit            _BIT_ACCESS(PMD6,5)
// U3CON0<U3MODE0>
extern volatile __bit                   U3MODE0             __at(0x1688);	// @ (0x2D1 * 8 + 0)
#define                                 U3MODE0_bit         _BIT_ACCESS(U3CON0,0)
// U3CON0<U3MODE1>
extern volatile __bit                   U3MODE1             __at(0x1689);	// @ (0x2D1 * 8 + 1)
#define                                 U3MODE1_bit         _BIT_ACCESS(U3CON0,1)
// U3CON0<U3MODE2>
extern volatile __bit                   U3MODE2             __at(0x168A);	// @ (0x2D1 * 8 + 2)
#define                                 U3MODE2_bit         _BIT_ACCESS(U3CON0,2)
// U3CON1<U3ON>
extern volatile __bit                   U3ON                __at(0x1697);	// @ (0x2D2 * 8 + 7)
#define                                 U3ON_bit            _BIT_ACCESS(U3CON1,7)
// U3ERRIE<U3PERIE>
extern volatile __bit                   U3PERIE             __at(0x16CE);	// @ (0x2D9 * 8 + 6)
#define                                 U3PERIE_bit         _BIT_ACCESS(U3ERRIE,6)
// U3ERRIR<U3PERIF>
extern volatile __bit                   U3PERIF             __at(0x16C6);	// @ (0x2D8 * 8 + 6)
#define                                 U3PERIF_bit         _BIT_ACCESS(U3ERRIR,6)
// U3FIFO<U3RCIDL>
extern volatile __bit                   U3RCIDL             __at(0x16B3);	// @ (0x2D6 * 8 + 3)
#define                                 U3RCIDL_bit         _BIT_ACCESS(U3FIFO,3)
// U3CON2<U3RUNOVF>
extern volatile __bit                   U3RUNOVF            __at(0x169F);	// @ (0x2D3 * 8 + 7)
#define                                 U3RUNOVF_bit        _BIT_ACCESS(U3CON2,7)
// U3FIFO<U3RXBE>
extern volatile __bit                   U3RXBE              __at(0x16B1);	// @ (0x2D6 * 8 + 1)
#define                                 U3RXBE_bit          _BIT_ACCESS(U3FIFO,1)
// U3FIFO<U3RXBF>
extern volatile __bit                   U3RXBF              __at(0x16B0);	// @ (0x2D6 * 8 + 0)
#define                                 U3RXBF_bit          _BIT_ACCESS(U3FIFO,0)
// U3CON1<U3RXBIMD>
extern volatile __bit                   U3RXBIMD            __at(0x1693);	// @ (0x2D2 * 8 + 3)
#define                                 U3RXBIMD_bit        _BIT_ACCESS(U3CON1,3)
// U3ERRIE<U3RXBKIE>
extern volatile __bit                   U3RXBKIE            __at(0x16CA);	// @ (0x2D9 * 8 + 2)
#define                                 U3RXBKIE_bit        _BIT_ACCESS(U3ERRIE,2)
// U3ERRIR<U3RXBKIF>
extern volatile __bit                   U3RXBKIF            __at(0x16C2);	// @ (0x2D8 * 8 + 2)
#define                                 U3RXBKIF_bit        _BIT_ACCESS(U3ERRIR,2)
// U3CON0<U3RXEN>
extern volatile __bit                   U3RXEN              __at(0x168C);	// @ (0x2D1 * 8 + 4)
#define                                 U3RXEN_bit          _BIT_ACCESS(U3CON0,4)
// U3ERRIE<U3RXFOIE>
extern volatile __bit                   U3RXFOIE            __at(0x16C9);	// @ (0x2D9 * 8 + 1)
#define                                 U3RXFOIE_bit        _BIT_ACCESS(U3ERRIE,1)
// U3ERRIR<U3RXFOIF>
extern volatile __bit                   U3RXFOIF            __at(0x16C1);	// @ (0x2D8 * 8 + 1)
#define                                 U3RXFOIF_bit        _BIT_ACCESS(U3ERRIR,1)
// U3FIFO<U3RXIDL>
extern volatile __bit                   U3RXIDL             __at(0x16B3);	// @ (0x2D6 * 8 + 3)
#define                                 U3RXIDL_bit         _BIT_ACCESS(U3FIFO,3)
// PIE9<U3RXIE>
extern volatile __bit                   U3RXIE              __at(0x2538);	// @ (0x4A7 * 8 + 0)
#define                                 U3RXIE_bit          _BIT_ACCESS(PIE9,0)
// PIR9<U3RXIF>
extern volatile __bit                   U3RXIF              __at(0x25B8);	// @ (0x4B7 * 8 + 0)
#define                                 U3RXIF_bit          _BIT_ACCESS(PIR9,0)
// IPR9<U3RXIP>
extern volatile __bit                   U3RXIP              __at(0x1B58);	// @ (0x36B * 8 + 0)
#define                                 U3RXIP_bit          _BIT_ACCESS(IPR9,0)
// U3CON2<U3RXPOL>
extern volatile __bit                   U3RXPOL             __at(0x169E);	// @ (0x2D3 * 8 + 6)
#define                                 U3RXPOL_bit         _BIT_ACCESS(U3CON2,6)
// U3RXPPS<U3RXPPS0>
extern volatile __bit                   U3RXPPS0            __at(0x13B0);	// @ (0x276 * 8 + 0)
#define                                 U3RXPPS0_bit        _BIT_ACCESS(U3RXPPS,0)
// U3RXPPS<U3RXPPS1>
extern volatile __bit                   U3RXPPS1            __at(0x13B1);	// @ (0x276 * 8 + 1)
#define                                 U3RXPPS1_bit        _BIT_ACCESS(U3RXPPS,1)
// U3RXPPS<U3RXPPS2>
extern volatile __bit                   U3RXPPS2            __at(0x13B2);	// @ (0x276 * 8 + 2)
#define                                 U3RXPPS2_bit        _BIT_ACCESS(U3RXPPS,2)
// U3RXPPS<U3RXPPS3>
extern volatile __bit                   U3RXPPS3            __at(0x13B3);	// @ (0x276 * 8 + 3)
#define                                 U3RXPPS3_bit        _BIT_ACCESS(U3RXPPS,3)
// U3RXPPS<U3RXPPS4>
extern volatile __bit                   U3RXPPS4            __at(0x13B4);	// @ (0x276 * 8 + 4)
#define                                 U3RXPPS4_bit        _BIT_ACCESS(U3RXPPS,4)
// U3RXPPS<U3RXPPS5>
extern volatile __bit                   U3RXPPS5            __at(0x13B5);	// @ (0x276 * 8 + 5)
#define                                 U3RXPPS5_bit        _BIT_ACCESS(U3RXPPS,5)
// U3CON1<U3SENDB>
extern volatile __bit                   U3SENDB             __at(0x1690);	// @ (0x2D2 * 8 + 0)
#define                                 U3SENDB_bit         _BIT_ACCESS(U3CON1,0)
// U3CON2<U3STP0>
extern volatile __bit                   U3STP0              __at(0x169C);	// @ (0x2D3 * 8 + 4)
#define                                 U3STP0_bit          _BIT_ACCESS(U3CON2,4)
// U3CON2<U3STP1>
extern volatile __bit                   U3STP1              __at(0x169D);	// @ (0x2D3 * 8 + 5)
#define                                 U3STP1_bit          _BIT_ACCESS(U3CON2,5)
// U3FIFO<U3STPMD>
extern volatile __bit                   U3STPMD             __at(0x16B6);	// @ (0x2D6 * 8 + 6)
#define                                 U3STPMD_bit         _BIT_ACCESS(U3FIFO,6)
// U3FIFO<U3TXBE>
extern volatile __bit                   U3TXBE              __at(0x16B5);	// @ (0x2D6 * 8 + 5)
#define                                 U3TXBE_bit          _BIT_ACCESS(U3FIFO,5)
// U3FIFO<U3TXBF>
extern volatile __bit                   U3TXBF              __at(0x16B4);	// @ (0x2D6 * 8 + 4)
#define                                 U3TXBF_bit          _BIT_ACCESS(U3FIFO,4)
// U3ERRIE<U3TXCIE>
extern volatile __bit                   U3TXCIE             __at(0x16C8);	// @ (0x2D9 * 8 + 0)
#define                                 U3TXCIE_bit         _BIT_ACCESS(U3ERRIE,0)
// U3ERRIR<U3TXCIF>
extern volatile __bit                   U3TXCIF             __at(0x16C0);	// @ (0x2D8 * 8 + 0)
#define                                 U3TXCIF_bit         _BIT_ACCESS(U3ERRIR,0)
// U3CON0<U3TXEN>
extern volatile __bit                   U3TXEN              __at(0x168D);	// @ (0x2D1 * 8 + 5)
#define                                 U3TXEN_bit          _BIT_ACCESS(U3CON0,5)
// PIE9<U3TXIE>
extern volatile __bit                   U3TXIE              __at(0x2539);	// @ (0x4A7 * 8 + 1)
#define                                 U3TXIE_bit          _BIT_ACCESS(PIE9,1)
// PIR9<U3TXIF>
extern volatile __bit                   U3TXIF              __at(0x25B9);	// @ (0x4B7 * 8 + 1)
#define                                 U3TXIF_bit          _BIT_ACCESS(PIR9,1)
// IPR9<U3TXIP>
extern volatile __bit                   U3TXIP              __at(0x1B59);	// @ (0x36B * 8 + 1)
#define                                 U3TXIP_bit          _BIT_ACCESS(IPR9,1)
// U3ERRIE<U3TXMTIE>
extern volatile __bit                   U3TXMTIE            __at(0x16CF);	// @ (0x2D9 * 8 + 7)
#define                                 U3TXMTIE_bit        _BIT_ACCESS(U3ERRIE,7)
// U3ERRIR<U3TXMTIF>
extern volatile __bit                   U3TXMTIF            __at(0x16C7);	// @ (0x2D8 * 8 + 7)
#define                                 U3TXMTIF_bit        _BIT_ACCESS(U3ERRIR,7)
// U3CON2<U3TXPOL>
extern volatile __bit                   U3TXPOL             __at(0x169A);	// @ (0x2D3 * 8 + 2)
#define                                 U3TXPOL_bit         _BIT_ACCESS(U3CON2,2)
// U3FIFO<U3TXWRE>
extern volatile __bit                   U3TXWRE             __at(0x16B7);	// @ (0x2D6 * 8 + 7)
#define                                 U3TXWRE_bit         _BIT_ACCESS(U3FIFO,7)
// U3CON1<U3WUE>
extern volatile __bit                   U3WUE               __at(0x1694);	// @ (0x2D2 * 8 + 4)
#define                                 U3WUE_bit           _BIT_ACCESS(U3CON1,4)
// U3UIR<U3WUIF>
extern volatile __bit                   U3WUIF              __at(0x16BF);	// @ (0x2D7 * 8 + 7)
#define                                 U3WUIF_bit          _BIT_ACCESS(U3UIR,7)
// U3FIFO<U3XON>
extern volatile __bit                   U3XON               __at(0x16B2);	// @ (0x2D6 * 8 + 2)
#define                                 U3XON_bit           _BIT_ACCESS(U3FIFO,2)
// U4CON0<U4ABDEN>
extern volatile __bit                   U4ABDEN             __at(0x1726);	// @ (0x2E4 * 8 + 6)
#define                                 U4ABDEN_bit         _BIT_ACCESS(U4CON0,6)
// U4UIR<U4ABDIE>
extern volatile __bit                   U4ABDIE             __at(0x1752);	// @ (0x2EA * 8 + 2)
#define                                 U4ABDIE_bit         _BIT_ACCESS(U4UIR,2)
// U4UIR<U4ABDIF>
extern volatile __bit                   U4ABDIF             __at(0x1756);	// @ (0x2EA * 8 + 6)
#define                                 U4ABDIF_bit         _BIT_ACCESS(U4UIR,6)
// U4ERRIE<U4ABDOVE>
extern volatile __bit                   U4ABDOVE            __at(0x1765);	// @ (0x2EC * 8 + 5)
#define                                 U4ABDOVE_bit        _BIT_ACCESS(U4ERRIE,5)
// U4ERRIR<U4ABDOVF>
extern volatile __bit                   U4ABDOVF            __at(0x175D);	// @ (0x2EB * 8 + 5)
#define                                 U4ABDOVF_bit        _BIT_ACCESS(U4ERRIR,5)
// U4CON0<U4BRGS>
extern volatile __bit                   U4BRGS              __at(0x1727);	// @ (0x2E4 * 8 + 7)
#define                                 U4BRGS_bit          _BIT_ACCESS(U4CON0,7)
// U4CON1<U4BRKOVR>
extern volatile __bit                   U4BRKOVR            __at(0x1729);	// @ (0x2E5 * 8 + 1)
#define                                 U4BRKOVR_bit        _BIT_ACCESS(U4CON1,1)
// U4ERRIE<U4CERIE>
extern volatile __bit                   U4CERIE             __at(0x1764);	// @ (0x2EC * 8 + 4)
#define                                 U4CERIE_bit         _BIT_ACCESS(U4ERRIE,4)
// U4ERRIR<U4CERIF>
extern volatile __bit                   U4CERIF             __at(0x175C);	// @ (0x2EB * 8 + 4)
#define                                 U4CERIF_bit         _BIT_ACCESS(U4ERRIR,4)
// U4CTSPPS<U4CTSPPS0>
extern volatile __bit                   U4CTSPPS0           __at(0x13C8);	// @ (0x279 * 8 + 0)
#define                                 U4CTSPPS0_bit       _BIT_ACCESS(U4CTSPPS,0)
// U4CTSPPS<U4CTSPPS1>
extern volatile __bit                   U4CTSPPS1           __at(0x13C9);	// @ (0x279 * 8 + 1)
#define                                 U4CTSPPS1_bit       _BIT_ACCESS(U4CTSPPS,1)
// U4CTSPPS<U4CTSPPS2>
extern volatile __bit                   U4CTSPPS2           __at(0x13CA);	// @ (0x279 * 8 + 2)
#define                                 U4CTSPPS2_bit       _BIT_ACCESS(U4CTSPPS,2)
// U4CTSPPS<U4CTSPPS3>
extern volatile __bit                   U4CTSPPS3           __at(0x13CB);	// @ (0x279 * 8 + 3)
#define                                 U4CTSPPS3_bit       _BIT_ACCESS(U4CTSPPS,3)
// U4CTSPPS<U4CTSPPS4>
extern volatile __bit                   U4CTSPPS4           __at(0x13CC);	// @ (0x279 * 8 + 4)
#define                                 U4CTSPPS4_bit       _BIT_ACCESS(U4CTSPPS,4)
// PIE12<U4EIE>
extern volatile __bit                   U4EIE               __at(0x2552);	// @ (0x4AA * 8 + 2)
#define                                 U4EIE_bit           _BIT_ACCESS(PIE12,2)
// PIR12<U4EIF>
extern volatile __bit                   U4EIF               __at(0x25D2);	// @ (0x4BA * 8 + 2)
#define                                 U4EIF_bit           _BIT_ACCESS(PIR12,2)
// IPR12<U4EIP>
extern volatile __bit                   U4EIP               __at(0x1B72);	// @ (0x36E * 8 + 2)
#define                                 U4EIP_bit           _BIT_ACCESS(IPR12,2)
// U4ERRIE<U4FERIE>
extern volatile __bit                   U4FERIE             __at(0x1763);	// @ (0x2EC * 8 + 3)
#define                                 U4FERIE_bit         _BIT_ACCESS(U4ERRIE,3)
// U4ERRIR<U4FERIF>
extern volatile __bit                   U4FERIF             __at(0x175B);	// @ (0x2EB * 8 + 3)
#define                                 U4FERIF_bit         _BIT_ACCESS(U4ERRIR,3)
// U4CON2<U4FLO0>
extern volatile __bit                   U4FLO0              __at(0x1730);	// @ (0x2E6 * 8 + 0)
#define                                 U4FLO0_bit          _BIT_ACCESS(U4CON2,0)
// U4CON2<U4FLO1>
extern volatile __bit                   U4FLO1              __at(0x1731);	// @ (0x2E6 * 8 + 1)
#define                                 U4FLO1_bit          _BIT_ACCESS(U4CON2,1)
// PIE12<U4IE>
extern volatile __bit                   U4IE                __at(0x2553);	// @ (0x4AA * 8 + 3)
#define                                 U4IE_bit            _BIT_ACCESS(PIE12,3)
// PIR12<U4IF>
extern volatile __bit                   U4IF                __at(0x25D3);	// @ (0x4BA * 8 + 3)
#define                                 U4IF_bit            _BIT_ACCESS(PIR12,3)
// IPR12<U4IP>
extern volatile __bit                   U4IP                __at(0x1B73);	// @ (0x36E * 8 + 3)
#define                                 U4IP_bit            _BIT_ACCESS(IPR12,3)
// PMD6<U4MD>
extern volatile __bit                   U4MD                __at(0x336);	// @ (0x66 * 8 + 6)
#define                                 U4MD_bit            _BIT_ACCESS(PMD6,6)
// U4CON0<U4MODE0>
extern volatile __bit                   U4MODE0             __at(0x1720);	// @ (0x2E4 * 8 + 0)
#define                                 U4MODE0_bit         _BIT_ACCESS(U4CON0,0)
// U4CON0<U4MODE1>
extern volatile __bit                   U4MODE1             __at(0x1721);	// @ (0x2E4 * 8 + 1)
#define                                 U4MODE1_bit         _BIT_ACCESS(U4CON0,1)
// U4CON0<U4MODE2>
extern volatile __bit                   U4MODE2             __at(0x1722);	// @ (0x2E4 * 8 + 2)
#define                                 U4MODE2_bit         _BIT_ACCESS(U4CON0,2)
// U4CON1<U4ON>
extern volatile __bit                   U4ON                __at(0x172F);	// @ (0x2E5 * 8 + 7)
#define                                 U4ON_bit            _BIT_ACCESS(U4CON1,7)
// U4ERRIE<U4PERIE>
extern volatile __bit                   U4PERIE             __at(0x1766);	// @ (0x2EC * 8 + 6)
#define                                 U4PERIE_bit         _BIT_ACCESS(U4ERRIE,6)
// U4ERRIR<U4PERIF>
extern volatile __bit                   U4PERIF             __at(0x175E);	// @ (0x2EB * 8 + 6)
#define                                 U4PERIF_bit         _BIT_ACCESS(U4ERRIR,6)
// U4FIFO<U4RCIDL>
extern volatile __bit                   U4RCIDL             __at(0x174B);	// @ (0x2E9 * 8 + 3)
#define                                 U4RCIDL_bit         _BIT_ACCESS(U4FIFO,3)
// U4CON2<U4RUNOVF>
extern volatile __bit                   U4RUNOVF            __at(0x1737);	// @ (0x2E6 * 8 + 7)
#define                                 U4RUNOVF_bit        _BIT_ACCESS(U4CON2,7)
// U4FIFO<U4RXBE>
extern volatile __bit                   U4RXBE              __at(0x1749);	// @ (0x2E9 * 8 + 1)
#define                                 U4RXBE_bit          _BIT_ACCESS(U4FIFO,1)
// U4FIFO<U4RXBF>
extern volatile __bit                   U4RXBF              __at(0x1748);	// @ (0x2E9 * 8 + 0)
#define                                 U4RXBF_bit          _BIT_ACCESS(U4FIFO,0)
// U4CON1<U4RXBIMD>
extern volatile __bit                   U4RXBIMD            __at(0x172B);	// @ (0x2E5 * 8 + 3)
#define                                 U4RXBIMD_bit        _BIT_ACCESS(U4CON1,3)
// U4ERRIE<U4RXBKIE>
extern volatile __bit                   U4RXBKIE            __at(0x1762);	// @ (0x2EC * 8 + 2)
#define                                 U4RXBKIE_bit        _BIT_ACCESS(U4ERRIE,2)
// U4ERRIR<U4RXBKIF>
extern volatile __bit                   U4RXBKIF            __at(0x175A);	// @ (0x2EB * 8 + 2)
#define                                 U4RXBKIF_bit        _BIT_ACCESS(U4ERRIR,2)
// U4CON0<U4RXEN>
extern volatile __bit                   U4RXEN              __at(0x1724);	// @ (0x2E4 * 8 + 4)
#define                                 U4RXEN_bit          _BIT_ACCESS(U4CON0,4)
// U4ERRIE<U4RXFOIE>
extern volatile __bit                   U4RXFOIE            __at(0x1761);	// @ (0x2EC * 8 + 1)
#define                                 U4RXFOIE_bit        _BIT_ACCESS(U4ERRIE,1)
// U4ERRIR<U4RXFOIF>
extern volatile __bit                   U4RXFOIF            __at(0x1759);	// @ (0x2EB * 8 + 1)
#define                                 U4RXFOIF_bit        _BIT_ACCESS(U4ERRIR,1)
// U4FIFO<U4RXIDL>
extern volatile __bit                   U4RXIDL             __at(0x174B);	// @ (0x2E9 * 8 + 3)
#define                                 U4RXIDL_bit         _BIT_ACCESS(U4FIFO,3)
// PIE12<U4RXIE>
extern volatile __bit                   U4RXIE              __at(0x2550);	// @ (0x4AA * 8 + 0)
#define                                 U4RXIE_bit          _BIT_ACCESS(PIE12,0)
// PIR12<U4RXIF>
extern volatile __bit                   U4RXIF              __at(0x25D0);	// @ (0x4BA * 8 + 0)
#define                                 U4RXIF_bit          _BIT_ACCESS(PIR12,0)
// IPR12<U4RXIP>
extern volatile __bit                   U4RXIP              __at(0x1B70);	// @ (0x36E * 8 + 0)
#define                                 U4RXIP_bit          _BIT_ACCESS(IPR12,0)
// U4CON2<U4RXPOL>
extern volatile __bit                   U4RXPOL             __at(0x1736);	// @ (0x2E6 * 8 + 6)
#define                                 U4RXPOL_bit         _BIT_ACCESS(U4CON2,6)
// U4RXPPS<U4RXPPS0>
extern volatile __bit                   U4RXPPS0            __at(0x13C0);	// @ (0x278 * 8 + 0)
#define                                 U4RXPPS0_bit        _BIT_ACCESS(U4RXPPS,0)
// U4RXPPS<U4RXPPS1>
extern volatile __bit                   U4RXPPS1            __at(0x13C1);	// @ (0x278 * 8 + 1)
#define                                 U4RXPPS1_bit        _BIT_ACCESS(U4RXPPS,1)
// U4RXPPS<U4RXPPS2>
extern volatile __bit                   U4RXPPS2            __at(0x13C2);	// @ (0x278 * 8 + 2)
#define                                 U4RXPPS2_bit        _BIT_ACCESS(U4RXPPS,2)
// U4RXPPS<U4RXPPS3>
extern volatile __bit                   U4RXPPS3            __at(0x13C3);	// @ (0x278 * 8 + 3)
#define                                 U4RXPPS3_bit        _BIT_ACCESS(U4RXPPS,3)
// U4RXPPS<U4RXPPS4>
extern volatile __bit                   U4RXPPS4            __at(0x13C4);	// @ (0x278 * 8 + 4)
#define                                 U4RXPPS4_bit        _BIT_ACCESS(U4RXPPS,4)
// U4CON1<U4SENDB>
extern volatile __bit                   U4SENDB             __at(0x1728);	// @ (0x2E5 * 8 + 0)
#define                                 U4SENDB_bit         _BIT_ACCESS(U4CON1,0)
// U4CON2<U4STP0>
extern volatile __bit                   U4STP0              __at(0x1734);	// @ (0x2E6 * 8 + 4)
#define                                 U4STP0_bit          _BIT_ACCESS(U4CON2,4)
// U4CON2<U4STP1>
extern volatile __bit                   U4STP1              __at(0x1735);	// @ (0x2E6 * 8 + 5)
#define                                 U4STP1_bit          _BIT_ACCESS(U4CON2,5)
// U4FIFO<U4STPMD>
extern volatile __bit                   U4STPMD             __at(0x174E);	// @ (0x2E9 * 8 + 6)
#define                                 U4STPMD_bit         _BIT_ACCESS(U4FIFO,6)
// U4FIFO<U4TXBE>
extern volatile __bit                   U4TXBE              __at(0x174D);	// @ (0x2E9 * 8 + 5)
#define                                 U4TXBE_bit          _BIT_ACCESS(U4FIFO,5)
// U4FIFO<U4TXBF>
extern volatile __bit                   U4TXBF              __at(0x174C);	// @ (0x2E9 * 8 + 4)
#define                                 U4TXBF_bit          _BIT_ACCESS(U4FIFO,4)
// U4ERRIE<U4TXCIE>
extern volatile __bit                   U4TXCIE             __at(0x1760);	// @ (0x2EC * 8 + 0)
#define                                 U4TXCIE_bit         _BIT_ACCESS(U4ERRIE,0)
// U4ERRIR<U4TXCIF>
extern volatile __bit                   U4TXCIF             __at(0x1758);	// @ (0x2EB * 8 + 0)
#define                                 U4TXCIF_bit         _BIT_ACCESS(U4ERRIR,0)
// U4CON0<U4TXEN>
extern volatile __bit                   U4TXEN              __at(0x1725);	// @ (0x2E4 * 8 + 5)
#define                                 U4TXEN_bit          _BIT_ACCESS(U4CON0,5)
// PIE12<U4TXIE>
extern volatile __bit                   U4TXIE              __at(0x2551);	// @ (0x4AA * 8 + 1)
#define                                 U4TXIE_bit          _BIT_ACCESS(PIE12,1)
// PIR12<U4TXIF>
extern volatile __bit                   U4TXIF              __at(0x25D1);	// @ (0x4BA * 8 + 1)
#define                                 U4TXIF_bit          _BIT_ACCESS(PIR12,1)
// IPR12<U4TXIP>
extern volatile __bit                   U4TXIP              __at(0x1B71);	// @ (0x36E * 8 + 1)
#define                                 U4TXIP_bit          _BIT_ACCESS(IPR12,1)
// U4ERRIE<U4TXMTIE>
extern volatile __bit                   U4TXMTIE            __at(0x1767);	// @ (0x2EC * 8 + 7)
#define                                 U4TXMTIE_bit        _BIT_ACCESS(U4ERRIE,7)
// U4ERRIR<U4TXMTIF>
extern volatile __bit                   U4TXMTIF            __at(0x175F);	// @ (0x2EB * 8 + 7)
#define                                 U4TXMTIF_bit        _BIT_ACCESS(U4ERRIR,7)
// U4CON2<U4TXPOL>
extern volatile __bit                   U4TXPOL             __at(0x1732);	// @ (0x2E6 * 8 + 2)
#define                                 U4TXPOL_bit         _BIT_ACCESS(U4CON2,2)
// U4FIFO<U4TXWRE>
extern volatile __bit                   U4TXWRE             __at(0x174F);	// @ (0x2E9 * 8 + 7)
#define                                 U4TXWRE_bit         _BIT_ACCESS(U4FIFO,7)
// U4CON1<U4WUE>
extern volatile __bit                   U4WUE               __at(0x172C);	// @ (0x2E5 * 8 + 4)
#define                                 U4WUE_bit           _BIT_ACCESS(U4CON1,4)
// U4UIR<U4WUIF>
extern volatile __bit                   U4WUIF              __at(0x1757);	// @ (0x2EA * 8 + 7)
#define                                 U4WUIF_bit          _BIT_ACCESS(U4UIR,7)
// U4FIFO<U4XON>
extern volatile __bit                   U4XON               __at(0x174A);	// @ (0x2E9 * 8 + 2)
#define                                 U4XON_bit           _BIT_ACCESS(U4FIFO,2)
// U5CON0<U5ABDEN>
extern volatile __bit                   U5ABDEN             __at(0x17BE);	// @ (0x2F7 * 8 + 6)
#define                                 U5ABDEN_bit         _BIT_ACCESS(U5CON0,6)
// U5UIR<U5ABDIE>
extern volatile __bit                   U5ABDIE             __at(0x17EA);	// @ (0x2FD * 8 + 2)
#define                                 U5ABDIE_bit         _BIT_ACCESS(U5UIR,2)
// U5UIR<U5ABDIF>
extern volatile __bit                   U5ABDIF             __at(0x17EE);	// @ (0x2FD * 8 + 6)
#define                                 U5ABDIF_bit         _BIT_ACCESS(U5UIR,6)
// U5ERRIE<U5ABDOVE>
extern volatile __bit                   U5ABDOVE            __at(0x17FD);	// @ (0x2FF * 8 + 5)
#define                                 U5ABDOVE_bit        _BIT_ACCESS(U5ERRIE,5)
// U5ERRIR<U5ABDOVF>
extern volatile __bit                   U5ABDOVF            __at(0x17F5);	// @ (0x2FE * 8 + 5)
#define                                 U5ABDOVF_bit        _BIT_ACCESS(U5ERRIR,5)
// U5CON0<U5BRGS>
extern volatile __bit                   U5BRGS              __at(0x17BF);	// @ (0x2F7 * 8 + 7)
#define                                 U5BRGS_bit          _BIT_ACCESS(U5CON0,7)
// U5CON1<U5BRKOVR>
extern volatile __bit                   U5BRKOVR            __at(0x17C1);	// @ (0x2F8 * 8 + 1)
#define                                 U5BRKOVR_bit        _BIT_ACCESS(U5CON1,1)
// U5ERRIE<U5CERIE>
extern volatile __bit                   U5CERIE             __at(0x17FC);	// @ (0x2FF * 8 + 4)
#define                                 U5CERIE_bit         _BIT_ACCESS(U5ERRIE,4)
// U5ERRIR<U5CERIF>
extern volatile __bit                   U5CERIF             __at(0x17F4);	// @ (0x2FE * 8 + 4)
#define                                 U5CERIF_bit         _BIT_ACCESS(U5ERRIR,4)
// U5CTSPPS<U5CTSPPS0>
extern volatile __bit                   U5CTSPPS0           __at(0x13D8);	// @ (0x27B * 8 + 0)
#define                                 U5CTSPPS0_bit       _BIT_ACCESS(U5CTSPPS,0)
// U5CTSPPS<U5CTSPPS1>
extern volatile __bit                   U5CTSPPS1           __at(0x13D9);	// @ (0x27B * 8 + 1)
#define                                 U5CTSPPS1_bit       _BIT_ACCESS(U5CTSPPS,1)
// U5CTSPPS<U5CTSPPS2>
extern volatile __bit                   U5CTSPPS2           __at(0x13DA);	// @ (0x27B * 8 + 2)
#define                                 U5CTSPPS2_bit       _BIT_ACCESS(U5CTSPPS,2)
// U5CTSPPS<U5CTSPPS3>
extern volatile __bit                   U5CTSPPS3           __at(0x13DB);	// @ (0x27B * 8 + 3)
#define                                 U5CTSPPS3_bit       _BIT_ACCESS(U5CTSPPS,3)
// U5CTSPPS<U5CTSPPS4>
extern volatile __bit                   U5CTSPPS4           __at(0x13DC);	// @ (0x27B * 8 + 4)
#define                                 U5CTSPPS4_bit       _BIT_ACCESS(U5CTSPPS,4)
// U5CTSPPS<U5CTSPPS5>
extern volatile __bit                   U5CTSPPS5           __at(0x13DD);	// @ (0x27B * 8 + 5)
#define                                 U5CTSPPS5_bit       _BIT_ACCESS(U5CTSPPS,5)
// PIE13<U5EIE>
extern volatile __bit                   U5EIE               __at(0x255A);	// @ (0x4AB * 8 + 2)
#define                                 U5EIE_bit           _BIT_ACCESS(PIE13,2)
// PIR13<U5EIF>
extern volatile __bit                   U5EIF               __at(0x25DA);	// @ (0x4BB * 8 + 2)
#define                                 U5EIF_bit           _BIT_ACCESS(PIR13,2)
// IPR13<U5EIP>
extern volatile __bit                   U5EIP               __at(0x1B7A);	// @ (0x36F * 8 + 2)
#define                                 U5EIP_bit           _BIT_ACCESS(IPR13,2)
// U5ERRIE<U5FERIE>
extern volatile __bit                   U5FERIE             __at(0x17FB);	// @ (0x2FF * 8 + 3)
#define                                 U5FERIE_bit         _BIT_ACCESS(U5ERRIE,3)
// U5ERRIR<U5FERIF>
extern volatile __bit                   U5FERIF             __at(0x17F3);	// @ (0x2FE * 8 + 3)
#define                                 U5FERIF_bit         _BIT_ACCESS(U5ERRIR,3)
// U5CON2<U5FLO0>
extern volatile __bit                   U5FLO0              __at(0x17C8);	// @ (0x2F9 * 8 + 0)
#define                                 U5FLO0_bit          _BIT_ACCESS(U5CON2,0)
// U5CON2<U5FLO1>
extern volatile __bit                   U5FLO1              __at(0x17C9);	// @ (0x2F9 * 8 + 1)
#define                                 U5FLO1_bit          _BIT_ACCESS(U5CON2,1)
// PIE13<U5IE>
extern volatile __bit                   U5IE                __at(0x255B);	// @ (0x4AB * 8 + 3)
#define                                 U5IE_bit            _BIT_ACCESS(PIE13,3)
// PIR13<U5IF>
extern volatile __bit                   U5IF                __at(0x25DB);	// @ (0x4BB * 8 + 3)
#define                                 U5IF_bit            _BIT_ACCESS(PIR13,3)
// IPR13<U5IP>
extern volatile __bit                   U5IP                __at(0x1B7B);	// @ (0x36F * 8 + 3)
#define                                 U5IP_bit            _BIT_ACCESS(IPR13,3)
// PMD6<U5MD>
extern volatile __bit                   U5MD                __at(0x337);	// @ (0x66 * 8 + 7)
#define                                 U5MD_bit            _BIT_ACCESS(PMD6,7)
// U5CON0<U5MODE0>
extern volatile __bit                   U5MODE0             __at(0x17B8);	// @ (0x2F7 * 8 + 0)
#define                                 U5MODE0_bit         _BIT_ACCESS(U5CON0,0)
// U5CON0<U5MODE1>
extern volatile __bit                   U5MODE1             __at(0x17B9);	// @ (0x2F7 * 8 + 1)
#define                                 U5MODE1_bit         _BIT_ACCESS(U5CON0,1)
// U5CON0<U5MODE2>
extern volatile __bit                   U5MODE2             __at(0x17BA);	// @ (0x2F7 * 8 + 2)
#define                                 U5MODE2_bit         _BIT_ACCESS(U5CON0,2)
// U5CON1<U5ON>
extern volatile __bit                   U5ON                __at(0x17C7);	// @ (0x2F8 * 8 + 7)
#define                                 U5ON_bit            _BIT_ACCESS(U5CON1,7)
// U5ERRIE<U5PERIE>
extern volatile __bit                   U5PERIE             __at(0x17FE);	// @ (0x2FF * 8 + 6)
#define                                 U5PERIE_bit         _BIT_ACCESS(U5ERRIE,6)
// U5ERRIR<U5PERIF>
extern volatile __bit                   U5PERIF             __at(0x17F6);	// @ (0x2FE * 8 + 6)
#define                                 U5PERIF_bit         _BIT_ACCESS(U5ERRIR,6)
// U5FIFO<U5RCIDL>
extern volatile __bit                   U5RCIDL             __at(0x17E3);	// @ (0x2FC * 8 + 3)
#define                                 U5RCIDL_bit         _BIT_ACCESS(U5FIFO,3)
// U5CON2<U5RUNOVF>
extern volatile __bit                   U5RUNOVF            __at(0x17CF);	// @ (0x2F9 * 8 + 7)
#define                                 U5RUNOVF_bit        _BIT_ACCESS(U5CON2,7)
// U5FIFO<U5RXBE>
extern volatile __bit                   U5RXBE              __at(0x17E1);	// @ (0x2FC * 8 + 1)
#define                                 U5RXBE_bit          _BIT_ACCESS(U5FIFO,1)
// U5FIFO<U5RXBF>
extern volatile __bit                   U5RXBF              __at(0x17E0);	// @ (0x2FC * 8 + 0)
#define                                 U5RXBF_bit          _BIT_ACCESS(U5FIFO,0)
// U5CON1<U5RXBIMD>
extern volatile __bit                   U5RXBIMD            __at(0x17C3);	// @ (0x2F8 * 8 + 3)
#define                                 U5RXBIMD_bit        _BIT_ACCESS(U5CON1,3)
// U5ERRIE<U5RXBKIE>
extern volatile __bit                   U5RXBKIE            __at(0x17FA);	// @ (0x2FF * 8 + 2)
#define                                 U5RXBKIE_bit        _BIT_ACCESS(U5ERRIE,2)
// U5ERRIR<U5RXBKIF>
extern volatile __bit                   U5RXBKIF            __at(0x17F2);	// @ (0x2FE * 8 + 2)
#define                                 U5RXBKIF_bit        _BIT_ACCESS(U5ERRIR,2)
// U5CON0<U5RXEN>
extern volatile __bit                   U5RXEN              __at(0x17BC);	// @ (0x2F7 * 8 + 4)
#define                                 U5RXEN_bit          _BIT_ACCESS(U5CON0,4)
// U5ERRIE<U5RXFOIE>
extern volatile __bit                   U5RXFOIE            __at(0x17F9);	// @ (0x2FF * 8 + 1)
#define                                 U5RXFOIE_bit        _BIT_ACCESS(U5ERRIE,1)
// U5ERRIR<U5RXFOIF>
extern volatile __bit                   U5RXFOIF            __at(0x17F1);	// @ (0x2FE * 8 + 1)
#define                                 U5RXFOIF_bit        _BIT_ACCESS(U5ERRIR,1)
// U5FIFO<U5RXIDL>
extern volatile __bit                   U5RXIDL             __at(0x17E3);	// @ (0x2FC * 8 + 3)
#define                                 U5RXIDL_bit         _BIT_ACCESS(U5FIFO,3)
// PIE13<U5RXIE>
extern volatile __bit                   U5RXIE              __at(0x2558);	// @ (0x4AB * 8 + 0)
#define                                 U5RXIE_bit          _BIT_ACCESS(PIE13,0)
// PIR13<U5RXIF>
extern volatile __bit                   U5RXIF              __at(0x25D8);	// @ (0x4BB * 8 + 0)
#define                                 U5RXIF_bit          _BIT_ACCESS(PIR13,0)
// IPR13<U5RXIP>
extern volatile __bit                   U5RXIP              __at(0x1B78);	// @ (0x36F * 8 + 0)
#define                                 U5RXIP_bit          _BIT_ACCESS(IPR13,0)
// U5CON2<U5RXPOL>
extern volatile __bit                   U5RXPOL             __at(0x17CE);	// @ (0x2F9 * 8 + 6)
#define                                 U5RXPOL_bit         _BIT_ACCESS(U5CON2,6)
// U5RXPPS<U5RXPPS0>
extern volatile __bit                   U5RXPPS0            __at(0x13D0);	// @ (0x27A * 8 + 0)
#define                                 U5RXPPS0_bit        _BIT_ACCESS(U5RXPPS,0)
// U5RXPPS<U5RXPPS1>
extern volatile __bit                   U5RXPPS1            __at(0x13D1);	// @ (0x27A * 8 + 1)
#define                                 U5RXPPS1_bit        _BIT_ACCESS(U5RXPPS,1)
// U5RXPPS<U5RXPPS2>
extern volatile __bit                   U5RXPPS2            __at(0x13D2);	// @ (0x27A * 8 + 2)
#define                                 U5RXPPS2_bit        _BIT_ACCESS(U5RXPPS,2)
// U5RXPPS<U5RXPPS3>
extern volatile __bit                   U5RXPPS3            __at(0x13D3);	// @ (0x27A * 8 + 3)
#define                                 U5RXPPS3_bit        _BIT_ACCESS(U5RXPPS,3)
// U5RXPPS<U5RXPPS4>
extern volatile __bit                   U5RXPPS4            __at(0x13D4);	// @ (0x27A * 8 + 4)
#define                                 U5RXPPS4_bit        _BIT_ACCESS(U5RXPPS,4)
// U5RXPPS<U5RXPPS5>
extern volatile __bit                   U5RXPPS5            __at(0x13D5);	// @ (0x27A * 8 + 5)
#define                                 U5RXPPS5_bit        _BIT_ACCESS(U5RXPPS,5)
// U5CON1<U5SENDB>
extern volatile __bit                   U5SENDB             __at(0x17C0);	// @ (0x2F8 * 8 + 0)
#define                                 U5SENDB_bit         _BIT_ACCESS(U5CON1,0)
// U5CON2<U5STP0>
extern volatile __bit                   U5STP0              __at(0x17CC);	// @ (0x2F9 * 8 + 4)
#define                                 U5STP0_bit          _BIT_ACCESS(U5CON2,4)
// U5CON2<U5STP1>
extern volatile __bit                   U5STP1              __at(0x17CD);	// @ (0x2F9 * 8 + 5)
#define                                 U5STP1_bit          _BIT_ACCESS(U5CON2,5)
// U5FIFO<U5STPMD>
extern volatile __bit                   U5STPMD             __at(0x17E6);	// @ (0x2FC * 8 + 6)
#define                                 U5STPMD_bit         _BIT_ACCESS(U5FIFO,6)
// U5FIFO<U5TXBE>
extern volatile __bit                   U5TXBE              __at(0x17E5);	// @ (0x2FC * 8 + 5)
#define                                 U5TXBE_bit          _BIT_ACCESS(U5FIFO,5)
// U5FIFO<U5TXBF>
extern volatile __bit                   U5TXBF              __at(0x17E4);	// @ (0x2FC * 8 + 4)
#define                                 U5TXBF_bit          _BIT_ACCESS(U5FIFO,4)
// U5ERRIE<U5TXCIE>
extern volatile __bit                   U5TXCIE             __at(0x17F8);	// @ (0x2FF * 8 + 0)
#define                                 U5TXCIE_bit         _BIT_ACCESS(U5ERRIE,0)
// U5ERRIR<U5TXCIF>
extern volatile __bit                   U5TXCIF             __at(0x17F0);	// @ (0x2FE * 8 + 0)
#define                                 U5TXCIF_bit         _BIT_ACCESS(U5ERRIR,0)
// U5CON0<U5TXEN>
extern volatile __bit                   U5TXEN              __at(0x17BD);	// @ (0x2F7 * 8 + 5)
#define                                 U5TXEN_bit          _BIT_ACCESS(U5CON0,5)
// PIE13<U5TXIE>
extern volatile __bit                   U5TXIE              __at(0x2559);	// @ (0x4AB * 8 + 1)
#define                                 U5TXIE_bit          _BIT_ACCESS(PIE13,1)
// PIR13<U5TXIF>
extern volatile __bit                   U5TXIF              __at(0x25D9);	// @ (0x4BB * 8 + 1)
#define                                 U5TXIF_bit          _BIT_ACCESS(PIR13,1)
// IPR13<U5TXIP>
extern volatile __bit                   U5TXIP              __at(0x1B79);	// @ (0x36F * 8 + 1)
#define                                 U5TXIP_bit          _BIT_ACCESS(IPR13,1)
// U5ERRIE<U5TXMTIE>
extern volatile __bit                   U5TXMTIE            __at(0x17FF);	// @ (0x2FF * 8 + 7)
#define                                 U5TXMTIE_bit        _BIT_ACCESS(U5ERRIE,7)
// U5ERRIR<U5TXMTIF>
extern volatile __bit                   U5TXMTIF            __at(0x17F7);	// @ (0x2FE * 8 + 7)
#define                                 U5TXMTIF_bit        _BIT_ACCESS(U5ERRIR,7)
// U5CON2<U5TXPOL>
extern volatile __bit                   U5TXPOL             __at(0x17CA);	// @ (0x2F9 * 8 + 2)
#define                                 U5TXPOL_bit         _BIT_ACCESS(U5CON2,2)
// U5FIFO<U5TXWRE>
extern volatile __bit                   U5TXWRE             __at(0x17E7);	// @ (0x2FC * 8 + 7)
#define                                 U5TXWRE_bit         _BIT_ACCESS(U5FIFO,7)
// U5CON1<U5WUE>
extern volatile __bit                   U5WUE               __at(0x17C4);	// @ (0x2F8 * 8 + 4)
#define                                 U5WUE_bit           _BIT_ACCESS(U5CON1,4)
// U5UIR<U5WUIF>
extern volatile __bit                   U5WUIF              __at(0x17EF);	// @ (0x2FD * 8 + 7)
#define                                 U5WUIF_bit          _BIT_ACCESS(U5UIR,7)
// U5FIFO<U5XON>
extern volatile __bit                   U5XON               __at(0x17E2);	// @ (0x2FC * 8 + 2)
#define                                 U5XON_bit           _BIT_ACCESS(U5FIFO,2)
// ACTCON<UD>
extern volatile __bit                   UD                  __at(0x566);	// @ (0xAC * 8 + 6)
#define                                 UD_bit              _BIT_ACCESS(ACTCON,6)
// ADUTHL<UTH0>
extern volatile __bit                   UTH0                __at(0x1ED8);	// @ (0x3DB * 8 + 0)
#define                                 UTH0_bit            _BIT_ACCESS(ADUTHL,0)
// ADUTHL<UTH1>
extern volatile __bit                   UTH1                __at(0x1ED9);	// @ (0x3DB * 8 + 1)
#define                                 UTH1_bit            _BIT_ACCESS(ADUTHL,1)
// ADUTHH<UTH10>
extern volatile __bit                   UTH10               __at(0x1EE2);	// @ (0x3DC * 8 + 2)
#define                                 UTH10_bit           _BIT_ACCESS(ADUTHH,2)
// ADUTHH<UTH11>
extern volatile __bit                   UTH11               __at(0x1EE3);	// @ (0x3DC * 8 + 3)
#define                                 UTH11_bit           _BIT_ACCESS(ADUTHH,3)
// ADUTHH<UTH12>
extern volatile __bit                   UTH12               __at(0x1EE4);	// @ (0x3DC * 8 + 4)
#define                                 UTH12_bit           _BIT_ACCESS(ADUTHH,4)
// ADUTHH<UTH13>
extern volatile __bit                   UTH13               __at(0x1EE5);	// @ (0x3DC * 8 + 5)
#define                                 UTH13_bit           _BIT_ACCESS(ADUTHH,5)
// ADUTHH<UTH14>
extern volatile __bit                   UTH14               __at(0x1EE6);	// @ (0x3DC * 8 + 6)
#define                                 UTH14_bit           _BIT_ACCESS(ADUTHH,6)
// ADUTHH<UTH15>
extern volatile __bit                   UTH15               __at(0x1EE7);	// @ (0x3DC * 8 + 7)
#define                                 UTH15_bit           _BIT_ACCESS(ADUTHH,7)
// ADUTHL<UTH2>
extern volatile __bit                   UTH2                __at(0x1EDA);	// @ (0x3DB * 8 + 2)
#define                                 UTH2_bit            _BIT_ACCESS(ADUTHL,2)
// ADUTHL<UTH3>
extern volatile __bit                   UTH3                __at(0x1EDB);	// @ (0x3DB * 8 + 3)
#define                                 UTH3_bit            _BIT_ACCESS(ADUTHL,3)
// ADUTHL<UTH4>
extern volatile __bit                   UTH4                __at(0x1EDC);	// @ (0x3DB * 8 + 4)
#define                                 UTH4_bit            _BIT_ACCESS(ADUTHL,4)
// ADUTHL<UTH5>
extern volatile __bit                   UTH5                __at(0x1EDD);	// @ (0x3DB * 8 + 5)
#define                                 UTH5_bit            _BIT_ACCESS(ADUTHL,5)
// ADUTHL<UTH6>
extern volatile __bit                   UTH6                __at(0x1EDE);	// @ (0x3DB * 8 + 6)
#define                                 UTH6_bit            _BIT_ACCESS(ADUTHL,6)
// ADUTHL<UTH7>
extern volatile __bit                   UTH7                __at(0x1EDF);	// @ (0x3DB * 8 + 7)
#define                                 UTH7_bit            _BIT_ACCESS(ADUTHL,7)
// ADUTHH<UTH8>
extern volatile __bit                   UTH8                __at(0x1EE0);	// @ (0x3DC * 8 + 0)
#define                                 UTH8_bit            _BIT_ACCESS(ADUTHH,0)
// ADUTHH<UTH9>
extern volatile __bit                   UTH9                __at(0x1EE1);	// @ (0x3DC * 8 + 1)
#define                                 UTH9_bit            _BIT_ACCESS(ADUTHH,1)
// ADSTAT<UTHR>
extern volatile __bit                   UTHR                __at(0x1FBE);	// @ (0x3F7 * 8 + 6)
#define                                 UTHR_bit            _BIT_ACCESS(ADSTAT,6)
// VREGCON<VREGPM0>
extern volatile __bit                   VREGPM0             __at(0x240);	// @ (0x48 * 8 + 0)
#define                                 VREGPM0_bit         _BIT_ACCESS(VREGCON,0)
// VREGCON<VREGPM1>
extern volatile __bit                   VREGPM1             __at(0x241);	// @ (0x48 * 8 + 1)
#define                                 VREGPM1_bit         _BIT_ACCESS(VREGCON,1)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x3CC);	// @ (0x79 * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x3CD);	// @ (0x79 * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x3CE);	// @ (0x79 * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x3C1);	// @ (0x78 * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x3C2);	// @ (0x78 * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x3C3);	// @ (0x78 * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x3C4);	// @ (0x78 * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x3C5);	// @ (0x78 * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x3E0);	// @ (0x7C * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x3E1);	// @ (0x7C * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x3C0);	// @ (0x78 * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x3E2);	// @ (0x7C * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x3E3);	// @ (0x7C * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x3E4);	// @ (0x7C * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x3E5);	// @ (0x7C * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x3E6);	// @ (0x7C * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0x3E7);	// @ (0x7C * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x3C8);	// @ (0x79 * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x3C9);	// @ (0x79 * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x3CA);	// @ (0x79 * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// PCON0<WDTWV>
extern volatile __bit                   WDTWV               __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 WDTWV_bit           _BIT_ACCESS(PCON0,5)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x3C8);	// @ (0x79 * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x3C9);	// @ (0x79 * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x3CA);	// @ (0x79 * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// SMT1CON0<WPOL>
extern volatile __bit                   WPOL                __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 WPOL_bit            _BIT_ACCESS(SMT1CON0,4)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x2008);	// @ (0x401 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x2009);	// @ (0x401 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x200A);	// @ (0x401 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x200B);	// @ (0x401 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x200C);	// @ (0x401 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x200D);	// @ (0x401 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0x200E);	// @ (0x401 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0x200F);	// @ (0x401 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0x2048);	// @ (0x409 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0x2049);	// @ (0x409 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0x204A);	// @ (0x409 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0x204B);	// @ (0x409 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0x204C);	// @ (0x409 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0x204D);	// @ (0x409 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0x204E);	// @ (0x409 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0x204F);	// @ (0x409 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x2088);	// @ (0x411 * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x2089);	// @ (0x411 * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0x208A);	// @ (0x411 * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x208B);	// @ (0x411 * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x208C);	// @ (0x411 * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x208D);	// @ (0x411 * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0x208E);	// @ (0x411 * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0x208F);	// @ (0x411 * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUE<WPUE3>
extern volatile __bit                   WPUE3               __at(0x210B);	// @ (0x421 * 8 + 3)
#define                                 WPUE3_bit           _BIT_ACCESS(WPUE,3)
// I2C1PIE<WR1IE>
extern volatile __bit                   WR1IE               __at(0x14DC);	// @ (0x29B * 8 + 4)
#define                                 WR1IE_bit           _BIT_ACCESS(I2C1PIE,4)
// I2C1PIR<WR1IF>
extern volatile __bit                   WR1IF               __at(0x14D4);	// @ (0x29A * 8 + 4)
#define                                 WR1IF_bit           _BIT_ACCESS(I2C1PIR,4)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x20F);	// @ (0x41 * 8 + 7)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,7)
// I2C1PIE<WRIE>
extern volatile __bit                   WRIE                __at(0x14DC);	// @ (0x29B * 8 + 4)
#define                                 WRIE_bit            _BIT_ACCESS(I2C1PIE,4)
// I2C1PIR<WRIF>
extern volatile __bit                   WRIF                __at(0x14D4);	// @ (0x29A * 8 + 4)
#define                                 WRIF_bit            _BIT_ACCESS(I2C1PIR,4)
// SMT1STAT<WS>
extern volatile __bit                   WS                  __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 WS_bit              _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<WSEL0>
extern volatile __bit                   WSEL0               __at(0x1888);	// @ (0x311 * 8 + 0)
#define                                 WSEL0_bit           _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<WSEL1>
extern volatile __bit                   WSEL1               __at(0x1889);	// @ (0x311 * 8 + 1)
#define                                 WSEL1_bit           _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<WSEL2>
extern volatile __bit                   WSEL2               __at(0x188A);	// @ (0x311 * 8 + 2)
#define                                 WSEL2_bit           _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<WSEL3>
extern volatile __bit                   WSEL3               __at(0x188B);	// @ (0x311 * 8 + 3)
#define                                 WSEL3_bit           _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<WSEL4>
extern volatile __bit                   WSEL4               __at(0x188C);	// @ (0x311 * 8 + 4)
#define                                 WSEL4_bit           _BIT_ACCESS(SMT1WIN,4)
// SMT1WIN<WSEL5>
extern volatile __bit                   WSEL5               __at(0x188D);	// @ (0x311 * 8 + 5)
#define                                 WSEL5_bit           _BIT_ACCESS(SMT1WIN,5)
// CRCXORL<X1>
extern volatile __bit                   X1                  __at(0x1AA9);	// @ (0x355 * 8 + 1)
#define                                 X1_bit              _BIT_ACCESS(CRCXORL,1)
// CRCXORH<X10>
extern volatile __bit                   X10                 __at(0x1AB2);	// @ (0x356 * 8 + 2)
#define                                 X10_bit             _BIT_ACCESS(CRCXORH,2)
// CRCXORH<X11>
extern volatile __bit                   X11                 __at(0x1AB3);	// @ (0x356 * 8 + 3)
#define                                 X11_bit             _BIT_ACCESS(CRCXORH,3)
// CRCXORH<X12>
extern volatile __bit                   X12                 __at(0x1AB4);	// @ (0x356 * 8 + 4)
#define                                 X12_bit             _BIT_ACCESS(CRCXORH,4)
// CRCXORH<X13>
extern volatile __bit                   X13                 __at(0x1AB5);	// @ (0x356 * 8 + 5)
#define                                 X13_bit             _BIT_ACCESS(CRCXORH,5)
// CRCXORH<X14>
extern volatile __bit                   X14                 __at(0x1AB6);	// @ (0x356 * 8 + 6)
#define                                 X14_bit             _BIT_ACCESS(CRCXORH,6)
// CRCXORH<X15>
extern volatile __bit                   X15                 __at(0x1AB7);	// @ (0x356 * 8 + 7)
#define                                 X15_bit             _BIT_ACCESS(CRCXORH,7)
// CRCXORL<X2>
extern volatile __bit                   X2                  __at(0x1AAA);	// @ (0x355 * 8 + 2)
#define                                 X2_bit              _BIT_ACCESS(CRCXORL,2)
// CRCXORL<X3>
extern volatile __bit                   X3                  __at(0x1AAB);	// @ (0x355 * 8 + 3)
#define                                 X3_bit              _BIT_ACCESS(CRCXORL,3)
// CRCXORL<X4>
extern volatile __bit                   X4                  __at(0x1AAC);	// @ (0x355 * 8 + 4)
#define                                 X4_bit              _BIT_ACCESS(CRCXORL,4)
// CRCXORL<X5>
extern volatile __bit                   X5                  __at(0x1AAD);	// @ (0x355 * 8 + 5)
#define                                 X5_bit              _BIT_ACCESS(CRCXORL,5)
// CRCXORL<X6>
extern volatile __bit                   X6                  __at(0x1AAE);	// @ (0x355 * 8 + 6)
#define                                 X6_bit              _BIT_ACCESS(CRCXORL,6)
// CRCXORL<X7>
extern volatile __bit                   X7                  __at(0x1AAF);	// @ (0x355 * 8 + 7)
#define                                 X7_bit              _BIT_ACCESS(CRCXORL,7)
// CRCXORH<X8>
extern volatile __bit                   X8                  __at(0x1AB0);	// @ (0x356 * 8 + 0)
#define                                 X8_bit              _BIT_ACCESS(CRCXORH,0)
// CRCXORH<X9>
extern volatile __bit                   X9                  __at(0x1AB1);	// @ (0x356 * 8 + 1)
#define                                 X9_bit              _BIT_ACCESS(CRCXORH,1)
// DMAnCON0<XIP>
extern volatile __bit                   XIP                 __at(0x7E0);	// @ (0xFC * 8 + 0)
#define                                 XIP_bit             _BIT_ACCESS(DMAnCON0,0)
// PIE1<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x24F9);	// @ (0x49F * 8 + 1)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x2579);	// @ (0x4AF * 8 + 1)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR1,1)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x260);	// @ (0x4C * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x261);	// @ (0x4C * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// IPR1<ZCDIP>
extern volatile __bit                   ZCDIP               __at(0x1B19);	// @ (0x363 * 8 + 1)
#define                                 ZCDIP_bit           _BIT_ACCESS(IPR1,1)
// PMD3<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x318);	// @ (0x63 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD3,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x265);	// @ (0x4C * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x264);	// @ (0x4C * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x267);	// @ (0x4C * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// NVMCON0<nDONE>
extern volatile __bit                   nDONE               __at(0x200);	// @ (0x40 * 8 + 0)
#define                                 nDONE_bit           _BIT_ACCESS(NVMCON0,0)
// PCON1<nMEMV>
extern volatile __bit                   nMEMV               __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 nMEMV_bit           _BIT_ACCESS(PCON1,1)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON1<nRCM>
extern volatile __bit                   nRCM                __at(0x2788);	// @ (0x4F1 * 8 + 0)
#define                                 nRCM_bit            _BIT_ACCESS(PCON1,0)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON1<nRVREG>
extern volatile __bit                   nRVREG              __at(0x278A);	// @ (0x4F1 * 8 + 2)
#define                                 nRVREG_bit          _BIT_ACCESS(PCON1,2)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)

#endif // _PIC18F25Q43_H_
