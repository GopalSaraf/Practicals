// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16F1615_H_
#define _PIC16F1615_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16F1615
 */
#ifndef _XC_H_
#warning Header file pic16f1615.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :5;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x5
#define _BSR_BSR_LENGTH                                     0x5
#define _BSR_BSR_MASK                                       0x1F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCIF                  :1;
        unsigned INTF                   :1;
        unsigned TMR0IF                 :1;
        unsigned IOCIE                  :1;
        unsigned INTE                   :1;
        unsigned TMR0IE                 :1;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned T0IF                   :1;
        unsigned                        :2;
        unsigned T0IE                   :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_IOCIF_POSN                                  0x0
#define _INTCON_IOCIF_POSITION                              0x0
#define _INTCON_IOCIF_SIZE                                  0x1
#define _INTCON_IOCIF_LENGTH                                0x1
#define _INTCON_IOCIF_MASK                                  0x1
#define _INTCON_INTF_POSN                                   0x1
#define _INTCON_INTF_POSITION                               0x1
#define _INTCON_INTF_SIZE                                   0x1
#define _INTCON_INTF_LENGTH                                 0x1
#define _INTCON_INTF_MASK                                   0x2
#define _INTCON_TMR0IF_POSN                                 0x2
#define _INTCON_TMR0IF_POSITION                             0x2
#define _INTCON_TMR0IF_SIZE                                 0x1
#define _INTCON_TMR0IF_LENGTH                               0x1
#define _INTCON_TMR0IF_MASK                                 0x4
#define _INTCON_IOCIE_POSN                                  0x3
#define _INTCON_IOCIE_POSITION                              0x3
#define _INTCON_IOCIE_SIZE                                  0x1
#define _INTCON_IOCIE_LENGTH                                0x1
#define _INTCON_IOCIE_MASK                                  0x8
#define _INTCON_INTE_POSN                                   0x4
#define _INTCON_INTE_POSITION                               0x4
#define _INTCON_INTE_SIZE                                   0x1
#define _INTCON_INTE_LENGTH                                 0x1
#define _INTCON_INTE_MASK                                   0x10
#define _INTCON_TMR0IE_POSN                                 0x5
#define _INTCON_TMR0IE_POSITION                             0x5
#define _INTCON_TMR0IE_SIZE                                 0x1
#define _INTCON_TMR0IE_LENGTH                               0x1
#define _INTCON_TMR0IE_MASK                                 0x20
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80
#define _INTCON_T0IF_POSN                                   0x2
#define _INTCON_T0IF_POSITION                               0x2
#define _INTCON_T0IF_SIZE                                   0x1
#define _INTCON_T0IF_LENGTH                                 0x1
#define _INTCON_T0IF_MASK                                   0x4
#define _INTCON_T0IE_POSN                                   0x5
#define _INTCON_T0IE_POSITION                               0x5
#define _INTCON_T0IE_SIZE                                   0x1
#define _INTCON_T0IE_LENGTH                                 0x1
#define _INTCON_T0IE_MASK                                   0x20

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x010);
#ifndef _LIB_BUILD
asm("PIR1 equ 010h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned CCP1IF                 :1;
        unsigned SSP1IF                 :1;
        unsigned TXIF                   :1;
        unsigned RCIF                   :1;
        unsigned ADIF                   :1;
        unsigned TMR1GIF                :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x010);
// bitfield macros
#define _PIR1_TMR1IF_POSN                                   0x0
#define _PIR1_TMR1IF_POSITION                               0x0
#define _PIR1_TMR1IF_SIZE                                   0x1
#define _PIR1_TMR1IF_LENGTH                                 0x1
#define _PIR1_TMR1IF_MASK                                   0x1
#define _PIR1_TMR2IF_POSN                                   0x1
#define _PIR1_TMR2IF_POSITION                               0x1
#define _PIR1_TMR2IF_SIZE                                   0x1
#define _PIR1_TMR2IF_LENGTH                                 0x1
#define _PIR1_TMR2IF_MASK                                   0x2
#define _PIR1_CCP1IF_POSN                                   0x2
#define _PIR1_CCP1IF_POSITION                               0x2
#define _PIR1_CCP1IF_SIZE                                   0x1
#define _PIR1_CCP1IF_LENGTH                                 0x1
#define _PIR1_CCP1IF_MASK                                   0x4
#define _PIR1_SSP1IF_POSN                                   0x3
#define _PIR1_SSP1IF_POSITION                               0x3
#define _PIR1_SSP1IF_SIZE                                   0x1
#define _PIR1_SSP1IF_LENGTH                                 0x1
#define _PIR1_SSP1IF_MASK                                   0x8
#define _PIR1_TXIF_POSN                                     0x4
#define _PIR1_TXIF_POSITION                                 0x4
#define _PIR1_TXIF_SIZE                                     0x1
#define _PIR1_TXIF_LENGTH                                   0x1
#define _PIR1_TXIF_MASK                                     0x10
#define _PIR1_RCIF_POSN                                     0x5
#define _PIR1_RCIF_POSITION                                 0x5
#define _PIR1_RCIF_SIZE                                     0x1
#define _PIR1_RCIF_LENGTH                                   0x1
#define _PIR1_RCIF_MASK                                     0x20
#define _PIR1_ADIF_POSN                                     0x6
#define _PIR1_ADIF_POSITION                                 0x6
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x40
#define _PIR1_TMR1GIF_POSN                                  0x7
#define _PIR1_TMR1GIF_POSITION                              0x7
#define _PIR1_TMR1GIF_SIZE                                  0x1
#define _PIR1_TMR1GIF_LENGTH                                0x1
#define _PIR1_TMR1GIF_MASK                                  0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x011);
#ifndef _LIB_BUILD
asm("PIR2 equ 011h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned TMR6IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned                        :1;
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned OSFIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x011);
// bitfield macros
#define _PIR2_CCP2IF_POSN                                   0x0
#define _PIR2_CCP2IF_POSITION                               0x0
#define _PIR2_CCP2IF_SIZE                                   0x1
#define _PIR2_CCP2IF_LENGTH                                 0x1
#define _PIR2_CCP2IF_MASK                                   0x1
#define _PIR2_TMR4IF_POSN                                   0x1
#define _PIR2_TMR4IF_POSITION                               0x1
#define _PIR2_TMR4IF_SIZE                                   0x1
#define _PIR2_TMR4IF_LENGTH                                 0x1
#define _PIR2_TMR4IF_MASK                                   0x2
#define _PIR2_TMR6IF_POSN                                   0x2
#define _PIR2_TMR6IF_POSITION                               0x2
#define _PIR2_TMR6IF_SIZE                                   0x1
#define _PIR2_TMR6IF_LENGTH                                 0x1
#define _PIR2_TMR6IF_MASK                                   0x4
#define _PIR2_BCL1IF_POSN                                   0x3
#define _PIR2_BCL1IF_POSITION                               0x3
#define _PIR2_BCL1IF_SIZE                                   0x1
#define _PIR2_BCL1IF_LENGTH                                 0x1
#define _PIR2_BCL1IF_MASK                                   0x8
#define _PIR2_C1IF_POSN                                     0x5
#define _PIR2_C1IF_POSITION                                 0x5
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x20
#define _PIR2_C2IF_POSN                                     0x6
#define _PIR2_C2IF_POSITION                                 0x6
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x40
#define _PIR2_OSFIF_POSN                                    0x7
#define _PIR2_OSFIF_POSITION                                0x7
#define _PIR2_OSFIF_SIZE                                    0x1
#define _PIR2_OSFIF_LENGTH                                  0x1
#define _PIR2_OSFIF_MASK                                    0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x012);
#ifndef _LIB_BUILD
asm("PIR3 equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
        unsigned ZCDIF                  :1;
        unsigned CWGIF                  :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x012);
// bitfield macros
#define _PIR3_CLC1IF_POSN                                   0x0
#define _PIR3_CLC1IF_POSITION                               0x0
#define _PIR3_CLC1IF_SIZE                                   0x1
#define _PIR3_CLC1IF_LENGTH                                 0x1
#define _PIR3_CLC1IF_MASK                                   0x1
#define _PIR3_CLC2IF_POSN                                   0x1
#define _PIR3_CLC2IF_POSITION                               0x1
#define _PIR3_CLC2IF_SIZE                                   0x1
#define _PIR3_CLC2IF_LENGTH                                 0x1
#define _PIR3_CLC2IF_MASK                                   0x2
#define _PIR3_CLC3IF_POSN                                   0x2
#define _PIR3_CLC3IF_POSITION                               0x2
#define _PIR3_CLC3IF_SIZE                                   0x1
#define _PIR3_CLC3IF_LENGTH                                 0x1
#define _PIR3_CLC3IF_MASK                                   0x4
#define _PIR3_CLC4IF_POSN                                   0x3
#define _PIR3_CLC4IF_POSITION                               0x3
#define _PIR3_CLC4IF_SIZE                                   0x1
#define _PIR3_CLC4IF_LENGTH                                 0x1
#define _PIR3_CLC4IF_MASK                                   0x8
#define _PIR3_ZCDIF_POSN                                    0x4
#define _PIR3_ZCDIF_POSITION                                0x4
#define _PIR3_ZCDIF_SIZE                                    0x1
#define _PIR3_ZCDIF_LENGTH                                  0x1
#define _PIR3_ZCDIF_MASK                                    0x10
#define _PIR3_CWGIF_POSN                                    0x5
#define _PIR3_CWGIF_POSITION                                0x5
#define _PIR3_CWGIF_SIZE                                    0x1
#define _PIR3_CWGIF_LENGTH                                  0x1
#define _PIR3_CWGIF_MASK                                    0x20

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x013);
#ifndef _LIB_BUILD
asm("PIR4 equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IF                 :1;
        unsigned SMT1PRAIF              :1;
        unsigned SMT1PWAIF              :1;
        unsigned SMT2IF                 :1;
        unsigned SMT2PRAIF              :1;
        unsigned SMT2PWAIF              :1;
        unsigned CRCIF                  :1;
        unsigned SCANIF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x013);
// bitfield macros
#define _PIR4_SMT1IF_POSN                                   0x0
#define _PIR4_SMT1IF_POSITION                               0x0
#define _PIR4_SMT1IF_SIZE                                   0x1
#define _PIR4_SMT1IF_LENGTH                                 0x1
#define _PIR4_SMT1IF_MASK                                   0x1
#define _PIR4_SMT1PRAIF_POSN                                0x1
#define _PIR4_SMT1PRAIF_POSITION                            0x1
#define _PIR4_SMT1PRAIF_SIZE                                0x1
#define _PIR4_SMT1PRAIF_LENGTH                              0x1
#define _PIR4_SMT1PRAIF_MASK                                0x2
#define _PIR4_SMT1PWAIF_POSN                                0x2
#define _PIR4_SMT1PWAIF_POSITION                            0x2
#define _PIR4_SMT1PWAIF_SIZE                                0x1
#define _PIR4_SMT1PWAIF_LENGTH                              0x1
#define _PIR4_SMT1PWAIF_MASK                                0x4
#define _PIR4_SMT2IF_POSN                                   0x3
#define _PIR4_SMT2IF_POSITION                               0x3
#define _PIR4_SMT2IF_SIZE                                   0x1
#define _PIR4_SMT2IF_LENGTH                                 0x1
#define _PIR4_SMT2IF_MASK                                   0x8
#define _PIR4_SMT2PRAIF_POSN                                0x4
#define _PIR4_SMT2PRAIF_POSITION                            0x4
#define _PIR4_SMT2PRAIF_SIZE                                0x1
#define _PIR4_SMT2PRAIF_LENGTH                              0x1
#define _PIR4_SMT2PRAIF_MASK                                0x10
#define _PIR4_SMT2PWAIF_POSN                                0x5
#define _PIR4_SMT2PWAIF_POSITION                            0x5
#define _PIR4_SMT2PWAIF_SIZE                                0x1
#define _PIR4_SMT2PWAIF_LENGTH                              0x1
#define _PIR4_SMT2PWAIF_MASK                                0x20
#define _PIR4_CRCIF_POSN                                    0x6
#define _PIR4_CRCIF_POSITION                                0x6
#define _PIR4_CRCIF_SIZE                                    0x1
#define _PIR4_CRCIF_LENGTH                                  0x1
#define _PIR4_CRCIF_MASK                                    0x40
#define _PIR4_SCANIF_POSN                                   0x7
#define _PIR4_SCANIF_POSITION                               0x7
#define _PIR4_SCANIF_SIZE                                   0x1
#define _PIR4_SCANIF_LENGTH                                 0x1
#define _PIR4_SCANIF_MASK                                   0x80

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x014);
#ifndef _LIB_BUILD
asm("PIR5 equ 014h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1DIF                :1;
        unsigned PID1EIF                :1;
        unsigned AT1IF                  :1;
        unsigned                        :1;
        unsigned TMR5IF                 :1;
        unsigned TMR5GIF                :1;
        unsigned TMR3IF                 :1;
        unsigned TMR3GIF                :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x014);
// bitfield macros
#define _PIR5_PID1DIF_POSN                                  0x0
#define _PIR5_PID1DIF_POSITION                              0x0
#define _PIR5_PID1DIF_SIZE                                  0x1
#define _PIR5_PID1DIF_LENGTH                                0x1
#define _PIR5_PID1DIF_MASK                                  0x1
#define _PIR5_PID1EIF_POSN                                  0x1
#define _PIR5_PID1EIF_POSITION                              0x1
#define _PIR5_PID1EIF_SIZE                                  0x1
#define _PIR5_PID1EIF_LENGTH                                0x1
#define _PIR5_PID1EIF_MASK                                  0x2
#define _PIR5_AT1IF_POSN                                    0x2
#define _PIR5_AT1IF_POSITION                                0x2
#define _PIR5_AT1IF_SIZE                                    0x1
#define _PIR5_AT1IF_LENGTH                                  0x1
#define _PIR5_AT1IF_MASK                                    0x4
#define _PIR5_TMR5IF_POSN                                   0x4
#define _PIR5_TMR5IF_POSITION                               0x4
#define _PIR5_TMR5IF_SIZE                                   0x1
#define _PIR5_TMR5IF_LENGTH                                 0x1
#define _PIR5_TMR5IF_MASK                                   0x10
#define _PIR5_TMR5GIF_POSN                                  0x5
#define _PIR5_TMR5GIF_POSITION                              0x5
#define _PIR5_TMR5GIF_SIZE                                  0x1
#define _PIR5_TMR5GIF_LENGTH                                0x1
#define _PIR5_TMR5GIF_MASK                                  0x20
#define _PIR5_TMR3IF_POSN                                   0x6
#define _PIR5_TMR3IF_POSITION                               0x6
#define _PIR5_TMR3IF_SIZE                                   0x1
#define _PIR5_TMR3IF_LENGTH                                 0x1
#define _PIR5_TMR3IF_MASK                                   0x40
#define _PIR5_TMR3GIF_POSN                                  0x7
#define _PIR5_TMR3GIF_POSITION                              0x7
#define _PIR5_TMR3GIF_SIZE                                  0x1
#define _PIR5_TMR3GIF_LENGTH                                0x1
#define _PIR5_TMR3GIF_MASK                                  0x80

// Register: TMR0
#define TMR0 TMR0
extern volatile unsigned char           TMR0                __at(0x015);
#ifndef _LIB_BUILD
asm("TMR0 equ 015h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0                   :8;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x015);
// bitfield macros
#define _TMR0_TMR0_POSN                                     0x0
#define _TMR0_TMR0_POSITION                                 0x0
#define _TMR0_TMR0_SIZE                                     0x8
#define _TMR0_TMR0_LENGTH                                   0x8
#define _TMR0_TMR0_MASK                                     0xFF

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x016);
#ifndef _LIB_BUILD
asm("TMR1 equ 016h");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x016);
#ifndef _LIB_BUILD
asm("TMR1L equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x016);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x017);
#ifndef _LIB_BUILD
asm("TMR1H equ 017h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x017);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x018);
#ifndef _LIB_BUILD
asm("T1CON equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1ON                 :1;
        unsigned                        :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS                 :2;
        unsigned TMR1CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
        unsigned TMR1CS0                :1;
        unsigned TMR1CS1                :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x018);
// bitfield macros
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS_POSN                                  0x4
#define _T1CON_T1CKPS_POSITION                              0x4
#define _T1CON_T1CKPS_SIZE                                  0x2
#define _T1CON_T1CKPS_LENGTH                                0x2
#define _T1CON_T1CKPS_MASK                                  0x30
#define _T1CON_TMR1CS_POSN                                  0x6
#define _T1CON_TMR1CS_POSITION                              0x6
#define _T1CON_TMR1CS_SIZE                                  0x2
#define _T1CON_TMR1CS_LENGTH                                0x2
#define _T1CON_TMR1CS_MASK                                  0xC0
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_TMR1CS0_POSN                                 0x6
#define _T1CON_TMR1CS0_POSITION                             0x6
#define _T1CON_TMR1CS0_SIZE                                 0x1
#define _T1CON_TMR1CS0_LENGTH                               0x1
#define _T1CON_TMR1CS0_MASK                                 0x40
#define _T1CON_TMR1CS1_POSN                                 0x7
#define _T1CON_TMR1CS1_POSITION                             0x7
#define _T1CON_TMR1CS1_SIZE                                 0x1
#define _T1CON_TMR1CS1_LENGTH                               0x1
#define _T1CON_TMR1CS1_MASK                                 0x80

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x019);
#ifndef _LIB_BUILD
asm("T1GCON equ 019h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GSS                  :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned TMR1GE                 :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x019);
// bitfield macros
#define _T1GCON_T1GSS_POSN                                  0x0
#define _T1GCON_T1GSS_POSITION                              0x0
#define _T1GCON_T1GSS_SIZE                                  0x2
#define _T1GCON_T1GSS_LENGTH                                0x2
#define _T1GCON_T1GSS_MASK                                  0x3
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_TMR1GE_POSN                                 0x7
#define _T1GCON_TMR1GE_POSITION                             0x7
#define _T1GCON_TMR1GE_SIZE                                 0x1
#define _T1GCON_TMR1GE_LENGTH                               0x1
#define _T1GCON_TMR1GE_MASK                                 0x80
#define _T1GCON_T1GSS0_POSN                                 0x0
#define _T1GCON_T1GSS0_POSITION                             0x0
#define _T1GCON_T1GSS0_SIZE                                 0x1
#define _T1GCON_T1GSS0_LENGTH                               0x1
#define _T1GCON_T1GSS0_MASK                                 0x1
#define _T1GCON_T1GSS1_POSN                                 0x1
#define _T1GCON_T1GSS1_POSITION                             0x1
#define _T1GCON_T1GSS1_SIZE                                 0x1
#define _T1GCON_T1GSS1_LENGTH                               0x1
#define _T1GCON_T1GSS1_MASK                                 0x2

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x01A);
#ifndef _LIB_BUILD
asm("T2TMR equ 01Ah");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x01A);
#ifndef _LIB_BUILD
asm("TMR2 equ 01Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x01A);
// bitfield macros
#define _T2TMR_TMR_POSN                                     0x0
#define _T2TMR_TMR_POSITION                                 0x0
#define _T2TMR_TMR_SIZE                                     0x8
#define _T2TMR_TMR_LENGTH                                   0x8
#define _T2TMR_TMR_MASK                                     0xFF
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x01A);
// bitfield macros
#define _TMR2_TMR_POSN                                      0x0
#define _TMR2_TMR_POSITION                                  0x0
#define _TMR2_TMR_SIZE                                      0x8
#define _TMR2_TMR_LENGTH                                    0x8
#define _TMR2_TMR_MASK                                      0xFF
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x01B);
#ifndef _LIB_BUILD
asm("T2PR equ 01Bh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x01B);
#ifndef _LIB_BUILD
asm("PR2 equ 01Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x01B);
// bitfield macros
#define _T2PR_PR_POSN                                       0x0
#define _T2PR_PR_POSITION                                   0x0
#define _T2PR_PR_SIZE                                       0x8
#define _T2PR_PR_LENGTH                                     0x8
#define _T2PR_PR_MASK                                       0xFF
#define _T2PR_T2PR_POSN                                     0x0
#define _T2PR_T2PR_POSITION                                 0x0
#define _T2PR_T2PR_SIZE                                     0x8
#define _T2PR_T2PR_LENGTH                                   0x8
#define _T2PR_T2PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T2PR                   :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x01B);
// bitfield macros
#define _PR2_PR_POSN                                        0x0
#define _PR2_PR_POSITION                                    0x0
#define _PR2_PR_SIZE                                        0x8
#define _PR2_PR_LENGTH                                      0x8
#define _PR2_PR_MASK                                        0xFF
#define _PR2_T2PR_POSN                                      0x0
#define _PR2_T2PR_POSITION                                  0x0
#define _PR2_T2PR_SIZE                                      0x8
#define _PR2_T2PR_LENGTH                                    0x8
#define _PR2_T2PR_MASK                                      0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x01C);
#ifndef _LIB_BUILD
asm("T2CON equ 01Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x01C);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x01D);
#ifndef _LIB_BUILD
asm("T2HLT equ 01Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x01D);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x01E);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 01Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x01E);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x01F);
#ifndef _LIB_BUILD
asm("T2RST equ 01Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T2RSEL                 :4;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x01F);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x4
#define _T2RST_RSEL_LENGTH                                  0x4
#define _T2RST_RSEL_MASK                                    0xF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x4
#define _T2RST_T2RSEL_LENGTH                                0x4
#define _T2RST_T2RSEL_MASK                                  0xF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x08C);
#ifndef _LIB_BUILD
asm("TRISA equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x08C);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x08E);
#ifndef _LIB_BUILD
asm("TRISC equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x08E);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x090);
#ifndef _LIB_BUILD
asm("PIE1 equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned CCP1IE                 :1;
        unsigned SSP1IE                 :1;
        unsigned TXIE                   :1;
        unsigned RCIE                   :1;
        unsigned ADIE                   :1;
        unsigned TMR1GIE                :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x090);
// bitfield macros
#define _PIE1_TMR1IE_POSN                                   0x0
#define _PIE1_TMR1IE_POSITION                               0x0
#define _PIE1_TMR1IE_SIZE                                   0x1
#define _PIE1_TMR1IE_LENGTH                                 0x1
#define _PIE1_TMR1IE_MASK                                   0x1
#define _PIE1_TMR2IE_POSN                                   0x1
#define _PIE1_TMR2IE_POSITION                               0x1
#define _PIE1_TMR2IE_SIZE                                   0x1
#define _PIE1_TMR2IE_LENGTH                                 0x1
#define _PIE1_TMR2IE_MASK                                   0x2
#define _PIE1_CCP1IE_POSN                                   0x2
#define _PIE1_CCP1IE_POSITION                               0x2
#define _PIE1_CCP1IE_SIZE                                   0x1
#define _PIE1_CCP1IE_LENGTH                                 0x1
#define _PIE1_CCP1IE_MASK                                   0x4
#define _PIE1_SSP1IE_POSN                                   0x3
#define _PIE1_SSP1IE_POSITION                               0x3
#define _PIE1_SSP1IE_SIZE                                   0x1
#define _PIE1_SSP1IE_LENGTH                                 0x1
#define _PIE1_SSP1IE_MASK                                   0x8
#define _PIE1_TXIE_POSN                                     0x4
#define _PIE1_TXIE_POSITION                                 0x4
#define _PIE1_TXIE_SIZE                                     0x1
#define _PIE1_TXIE_LENGTH                                   0x1
#define _PIE1_TXIE_MASK                                     0x10
#define _PIE1_RCIE_POSN                                     0x5
#define _PIE1_RCIE_POSITION                                 0x5
#define _PIE1_RCIE_SIZE                                     0x1
#define _PIE1_RCIE_LENGTH                                   0x1
#define _PIE1_RCIE_MASK                                     0x20
#define _PIE1_ADIE_POSN                                     0x6
#define _PIE1_ADIE_POSITION                                 0x6
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x40
#define _PIE1_TMR1GIE_POSN                                  0x7
#define _PIE1_TMR1GIE_POSITION                              0x7
#define _PIE1_TMR1GIE_SIZE                                  0x1
#define _PIE1_TMR1GIE_LENGTH                                0x1
#define _PIE1_TMR1GIE_MASK                                  0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x091);
#ifndef _LIB_BUILD
asm("PIE2 equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned TMR6IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned                        :1;
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned OSCFIE                 :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x091);
// bitfield macros
#define _PIE2_CCP2IE_POSN                                   0x0
#define _PIE2_CCP2IE_POSITION                               0x0
#define _PIE2_CCP2IE_SIZE                                   0x1
#define _PIE2_CCP2IE_LENGTH                                 0x1
#define _PIE2_CCP2IE_MASK                                   0x1
#define _PIE2_TMR4IE_POSN                                   0x1
#define _PIE2_TMR4IE_POSITION                               0x1
#define _PIE2_TMR4IE_SIZE                                   0x1
#define _PIE2_TMR4IE_LENGTH                                 0x1
#define _PIE2_TMR4IE_MASK                                   0x2
#define _PIE2_TMR6IE_POSN                                   0x2
#define _PIE2_TMR6IE_POSITION                               0x2
#define _PIE2_TMR6IE_SIZE                                   0x1
#define _PIE2_TMR6IE_LENGTH                                 0x1
#define _PIE2_TMR6IE_MASK                                   0x4
#define _PIE2_BCL1IE_POSN                                   0x3
#define _PIE2_BCL1IE_POSITION                               0x3
#define _PIE2_BCL1IE_SIZE                                   0x1
#define _PIE2_BCL1IE_LENGTH                                 0x1
#define _PIE2_BCL1IE_MASK                                   0x8
#define _PIE2_C1IE_POSN                                     0x5
#define _PIE2_C1IE_POSITION                                 0x5
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x20
#define _PIE2_C2IE_POSN                                     0x6
#define _PIE2_C2IE_POSITION                                 0x6
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x40
#define _PIE2_OSCFIE_POSN                                   0x7
#define _PIE2_OSCFIE_POSITION                               0x7
#define _PIE2_OSCFIE_SIZE                                   0x1
#define _PIE2_OSCFIE_LENGTH                                 0x1
#define _PIE2_OSCFIE_MASK                                   0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x092);
#ifndef _LIB_BUILD
asm("PIE3 equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
        unsigned ZCDIE                  :1;
        unsigned CWGIE                  :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x092);
// bitfield macros
#define _PIE3_CLC1IE_POSN                                   0x0
#define _PIE3_CLC1IE_POSITION                               0x0
#define _PIE3_CLC1IE_SIZE                                   0x1
#define _PIE3_CLC1IE_LENGTH                                 0x1
#define _PIE3_CLC1IE_MASK                                   0x1
#define _PIE3_CLC2IE_POSN                                   0x1
#define _PIE3_CLC2IE_POSITION                               0x1
#define _PIE3_CLC2IE_SIZE                                   0x1
#define _PIE3_CLC2IE_LENGTH                                 0x1
#define _PIE3_CLC2IE_MASK                                   0x2
#define _PIE3_CLC3IE_POSN                                   0x2
#define _PIE3_CLC3IE_POSITION                               0x2
#define _PIE3_CLC3IE_SIZE                                   0x1
#define _PIE3_CLC3IE_LENGTH                                 0x1
#define _PIE3_CLC3IE_MASK                                   0x4
#define _PIE3_CLC4IE_POSN                                   0x3
#define _PIE3_CLC4IE_POSITION                               0x3
#define _PIE3_CLC4IE_SIZE                                   0x1
#define _PIE3_CLC4IE_LENGTH                                 0x1
#define _PIE3_CLC4IE_MASK                                   0x8
#define _PIE3_ZCDIE_POSN                                    0x4
#define _PIE3_ZCDIE_POSITION                                0x4
#define _PIE3_ZCDIE_SIZE                                    0x1
#define _PIE3_ZCDIE_LENGTH                                  0x1
#define _PIE3_ZCDIE_MASK                                    0x10
#define _PIE3_CWGIE_POSN                                    0x5
#define _PIE3_CWGIE_POSITION                                0x5
#define _PIE3_CWGIE_SIZE                                    0x1
#define _PIE3_CWGIE_LENGTH                                  0x1
#define _PIE3_CWGIE_MASK                                    0x20

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x093);
#ifndef _LIB_BUILD
asm("PIE4 equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IE                 :1;
        unsigned SMT1PRAIE              :1;
        unsigned SMT1PWAIE              :1;
        unsigned SMT2IE                 :1;
        unsigned SMT2PRAIE              :1;
        unsigned SMT2PWAIE              :1;
        unsigned CRCIE                  :1;
        unsigned SCANIE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x093);
// bitfield macros
#define _PIE4_SMT1IE_POSN                                   0x0
#define _PIE4_SMT1IE_POSITION                               0x0
#define _PIE4_SMT1IE_SIZE                                   0x1
#define _PIE4_SMT1IE_LENGTH                                 0x1
#define _PIE4_SMT1IE_MASK                                   0x1
#define _PIE4_SMT1PRAIE_POSN                                0x1
#define _PIE4_SMT1PRAIE_POSITION                            0x1
#define _PIE4_SMT1PRAIE_SIZE                                0x1
#define _PIE4_SMT1PRAIE_LENGTH                              0x1
#define _PIE4_SMT1PRAIE_MASK                                0x2
#define _PIE4_SMT1PWAIE_POSN                                0x2
#define _PIE4_SMT1PWAIE_POSITION                            0x2
#define _PIE4_SMT1PWAIE_SIZE                                0x1
#define _PIE4_SMT1PWAIE_LENGTH                              0x1
#define _PIE4_SMT1PWAIE_MASK                                0x4
#define _PIE4_SMT2IE_POSN                                   0x3
#define _PIE4_SMT2IE_POSITION                               0x3
#define _PIE4_SMT2IE_SIZE                                   0x1
#define _PIE4_SMT2IE_LENGTH                                 0x1
#define _PIE4_SMT2IE_MASK                                   0x8
#define _PIE4_SMT2PRAIE_POSN                                0x4
#define _PIE4_SMT2PRAIE_POSITION                            0x4
#define _PIE4_SMT2PRAIE_SIZE                                0x1
#define _PIE4_SMT2PRAIE_LENGTH                              0x1
#define _PIE4_SMT2PRAIE_MASK                                0x10
#define _PIE4_SMT2PWAIE_POSN                                0x5
#define _PIE4_SMT2PWAIE_POSITION                            0x5
#define _PIE4_SMT2PWAIE_SIZE                                0x1
#define _PIE4_SMT2PWAIE_LENGTH                              0x1
#define _PIE4_SMT2PWAIE_MASK                                0x20
#define _PIE4_CRCIE_POSN                                    0x6
#define _PIE4_CRCIE_POSITION                                0x6
#define _PIE4_CRCIE_SIZE                                    0x1
#define _PIE4_CRCIE_LENGTH                                  0x1
#define _PIE4_CRCIE_MASK                                    0x40
#define _PIE4_SCANIE_POSN                                   0x7
#define _PIE4_SCANIE_POSITION                               0x7
#define _PIE4_SCANIE_SIZE                                   0x1
#define _PIE4_SCANIE_LENGTH                                 0x1
#define _PIE4_SCANIE_MASK                                   0x80

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x094);
#ifndef _LIB_BUILD
asm("PIE5 equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1DIE                :1;
        unsigned PID1EIE                :1;
        unsigned AT1IE                  :1;
        unsigned                        :1;
        unsigned TMR5IE                 :1;
        unsigned TMR5GIE                :1;
        unsigned TMR3IE                 :1;
        unsigned TMR3GIE                :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x094);
// bitfield macros
#define _PIE5_PID1DIE_POSN                                  0x0
#define _PIE5_PID1DIE_POSITION                              0x0
#define _PIE5_PID1DIE_SIZE                                  0x1
#define _PIE5_PID1DIE_LENGTH                                0x1
#define _PIE5_PID1DIE_MASK                                  0x1
#define _PIE5_PID1EIE_POSN                                  0x1
#define _PIE5_PID1EIE_POSITION                              0x1
#define _PIE5_PID1EIE_SIZE                                  0x1
#define _PIE5_PID1EIE_LENGTH                                0x1
#define _PIE5_PID1EIE_MASK                                  0x2
#define _PIE5_AT1IE_POSN                                    0x2
#define _PIE5_AT1IE_POSITION                                0x2
#define _PIE5_AT1IE_SIZE                                    0x1
#define _PIE5_AT1IE_LENGTH                                  0x1
#define _PIE5_AT1IE_MASK                                    0x4
#define _PIE5_TMR5IE_POSN                                   0x4
#define _PIE5_TMR5IE_POSITION                               0x4
#define _PIE5_TMR5IE_SIZE                                   0x1
#define _PIE5_TMR5IE_LENGTH                                 0x1
#define _PIE5_TMR5IE_MASK                                   0x10
#define _PIE5_TMR5GIE_POSN                                  0x5
#define _PIE5_TMR5GIE_POSITION                              0x5
#define _PIE5_TMR5GIE_SIZE                                  0x1
#define _PIE5_TMR5GIE_LENGTH                                0x1
#define _PIE5_TMR5GIE_MASK                                  0x20
#define _PIE5_TMR3IE_POSN                                   0x6
#define _PIE5_TMR3IE_POSITION                               0x6
#define _PIE5_TMR3IE_SIZE                                   0x1
#define _PIE5_TMR3IE_LENGTH                                 0x1
#define _PIE5_TMR3IE_MASK                                   0x40
#define _PIE5_TMR3GIE_POSN                                  0x7
#define _PIE5_TMR3GIE_POSITION                              0x7
#define _PIE5_TMR3GIE_SIZE                                  0x1
#define _PIE5_TMR3GIE_LENGTH                                0x1
#define _PIE5_TMR3GIE_MASK                                  0x80

// Register: OPTION_REG
#define OPTION_REG OPTION_REG
extern volatile unsigned char           OPTION_REG          __at(0x095);
#ifndef _LIB_BUILD
asm("OPTION_REG equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :3;
        unsigned PSA                    :1;
        unsigned TMR0SE                 :1;
        unsigned TMR0CS                 :1;
        unsigned INTEDG                 :1;
        unsigned nWPUEN                 :1;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned                        :1;
        unsigned T0SE                   :1;
        unsigned T0CS                   :1;
    };
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits __at(0x095);
// bitfield macros
#define _OPTION_REG_PS_POSN                                 0x0
#define _OPTION_REG_PS_POSITION                             0x0
#define _OPTION_REG_PS_SIZE                                 0x3
#define _OPTION_REG_PS_LENGTH                               0x3
#define _OPTION_REG_PS_MASK                                 0x7
#define _OPTION_REG_PSA_POSN                                0x3
#define _OPTION_REG_PSA_POSITION                            0x3
#define _OPTION_REG_PSA_SIZE                                0x1
#define _OPTION_REG_PSA_LENGTH                              0x1
#define _OPTION_REG_PSA_MASK                                0x8
#define _OPTION_REG_TMR0SE_POSN                             0x4
#define _OPTION_REG_TMR0SE_POSITION                         0x4
#define _OPTION_REG_TMR0SE_SIZE                             0x1
#define _OPTION_REG_TMR0SE_LENGTH                           0x1
#define _OPTION_REG_TMR0SE_MASK                             0x10
#define _OPTION_REG_TMR0CS_POSN                             0x5
#define _OPTION_REG_TMR0CS_POSITION                         0x5
#define _OPTION_REG_TMR0CS_SIZE                             0x1
#define _OPTION_REG_TMR0CS_LENGTH                           0x1
#define _OPTION_REG_TMR0CS_MASK                             0x20
#define _OPTION_REG_INTEDG_POSN                             0x6
#define _OPTION_REG_INTEDG_POSITION                         0x6
#define _OPTION_REG_INTEDG_SIZE                             0x1
#define _OPTION_REG_INTEDG_LENGTH                           0x1
#define _OPTION_REG_INTEDG_MASK                             0x40
#define _OPTION_REG_nWPUEN_POSN                             0x7
#define _OPTION_REG_nWPUEN_POSITION                         0x7
#define _OPTION_REG_nWPUEN_SIZE                             0x1
#define _OPTION_REG_nWPUEN_LENGTH                           0x1
#define _OPTION_REG_nWPUEN_MASK                             0x80
#define _OPTION_REG_PS0_POSN                                0x0
#define _OPTION_REG_PS0_POSITION                            0x0
#define _OPTION_REG_PS0_SIZE                                0x1
#define _OPTION_REG_PS0_LENGTH                              0x1
#define _OPTION_REG_PS0_MASK                                0x1
#define _OPTION_REG_PS1_POSN                                0x1
#define _OPTION_REG_PS1_POSITION                            0x1
#define _OPTION_REG_PS1_SIZE                                0x1
#define _OPTION_REG_PS1_LENGTH                              0x1
#define _OPTION_REG_PS1_MASK                                0x2
#define _OPTION_REG_PS2_POSN                                0x2
#define _OPTION_REG_PS2_POSITION                            0x2
#define _OPTION_REG_PS2_SIZE                                0x1
#define _OPTION_REG_PS2_LENGTH                              0x1
#define _OPTION_REG_PS2_MASK                                0x4
#define _OPTION_REG_T0SE_POSN                               0x4
#define _OPTION_REG_T0SE_POSITION                           0x4
#define _OPTION_REG_T0SE_SIZE                               0x1
#define _OPTION_REG_T0SE_LENGTH                             0x1
#define _OPTION_REG_T0SE_MASK                               0x10
#define _OPTION_REG_T0CS_POSN                               0x5
#define _OPTION_REG_T0CS_POSITION                           0x5
#define _OPTION_REG_T0CS_SIZE                               0x1
#define _OPTION_REG_T0CS_LENGTH                             0x1
#define _OPTION_REG_T0CS_MASK                               0x20

// Register: PCON
#define PCON PCON
extern volatile unsigned char           PCON                __at(0x096);
#ifndef _LIB_BUILD
asm("PCON equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCONbits_t;
extern volatile PCONbits_t PCONbits __at(0x096);
// bitfield macros
#define _PCON_nBOR_POSN                                     0x0
#define _PCON_nBOR_POSITION                                 0x0
#define _PCON_nBOR_SIZE                                     0x1
#define _PCON_nBOR_LENGTH                                   0x1
#define _PCON_nBOR_MASK                                     0x1
#define _PCON_nPOR_POSN                                     0x1
#define _PCON_nPOR_POSITION                                 0x1
#define _PCON_nPOR_SIZE                                     0x1
#define _PCON_nPOR_LENGTH                                   0x1
#define _PCON_nPOR_MASK                                     0x2
#define _PCON_nRI_POSN                                      0x2
#define _PCON_nRI_POSITION                                  0x2
#define _PCON_nRI_SIZE                                      0x1
#define _PCON_nRI_LENGTH                                    0x1
#define _PCON_nRI_MASK                                      0x4
#define _PCON_nRMCLR_POSN                                   0x3
#define _PCON_nRMCLR_POSITION                               0x3
#define _PCON_nRMCLR_SIZE                                   0x1
#define _PCON_nRMCLR_LENGTH                                 0x1
#define _PCON_nRMCLR_MASK                                   0x8
#define _PCON_nRWDT_POSN                                    0x4
#define _PCON_nRWDT_POSITION                                0x4
#define _PCON_nRWDT_SIZE                                    0x1
#define _PCON_nRWDT_LENGTH                                  0x1
#define _PCON_nRWDT_MASK                                    0x10
#define _PCON_nWDTWV_POSN                                   0x5
#define _PCON_nWDTWV_POSITION                               0x5
#define _PCON_nWDTWV_SIZE                                   0x1
#define _PCON_nWDTWV_LENGTH                                 0x1
#define _PCON_nWDTWV_MASK                                   0x20
#define _PCON_STKUNF_POSN                                   0x6
#define _PCON_STKUNF_POSITION                               0x6
#define _PCON_STKUNF_SIZE                                   0x1
#define _PCON_STKUNF_LENGTH                                 0x1
#define _PCON_STKUNF_MASK                                   0x40
#define _PCON_STKOVF_POSN                                   0x7
#define _PCON_STKOVF_POSITION                               0x7
#define _PCON_STKOVF_SIZE                                   0x1
#define _PCON_STKOVF_LENGTH                                 0x1
#define _PCON_STKOVF_MASK                                   0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x098);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x098);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCCON
#define OSCCON OSCCON
extern volatile unsigned char           OSCCON              __at(0x099);
#ifndef _LIB_BUILD
asm("OSCCON equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCS                    :2;
        unsigned                        :1;
        unsigned IRCF                   :4;
        unsigned SPLLEN                 :1;
    };
    struct {
        unsigned SCS0                   :1;
        unsigned SCS1                   :1;
        unsigned                        :1;
        unsigned IRCF0                  :1;
        unsigned IRCF1                  :1;
        unsigned IRCF2                  :1;
        unsigned IRCF3                  :1;
    };
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits __at(0x099);
// bitfield macros
#define _OSCCON_SCS_POSN                                    0x0
#define _OSCCON_SCS_POSITION                                0x0
#define _OSCCON_SCS_SIZE                                    0x2
#define _OSCCON_SCS_LENGTH                                  0x2
#define _OSCCON_SCS_MASK                                    0x3
#define _OSCCON_IRCF_POSN                                   0x3
#define _OSCCON_IRCF_POSITION                               0x3
#define _OSCCON_IRCF_SIZE                                   0x4
#define _OSCCON_IRCF_LENGTH                                 0x4
#define _OSCCON_IRCF_MASK                                   0x78
#define _OSCCON_SPLLEN_POSN                                 0x7
#define _OSCCON_SPLLEN_POSITION                             0x7
#define _OSCCON_SPLLEN_SIZE                                 0x1
#define _OSCCON_SPLLEN_LENGTH                               0x1
#define _OSCCON_SPLLEN_MASK                                 0x80
#define _OSCCON_SCS0_POSN                                   0x0
#define _OSCCON_SCS0_POSITION                               0x0
#define _OSCCON_SCS0_SIZE                                   0x1
#define _OSCCON_SCS0_LENGTH                                 0x1
#define _OSCCON_SCS0_MASK                                   0x1
#define _OSCCON_SCS1_POSN                                   0x1
#define _OSCCON_SCS1_POSITION                               0x1
#define _OSCCON_SCS1_SIZE                                   0x1
#define _OSCCON_SCS1_LENGTH                                 0x1
#define _OSCCON_SCS1_MASK                                   0x2
#define _OSCCON_IRCF0_POSN                                  0x3
#define _OSCCON_IRCF0_POSITION                              0x3
#define _OSCCON_IRCF0_SIZE                                  0x1
#define _OSCCON_IRCF0_LENGTH                                0x1
#define _OSCCON_IRCF0_MASK                                  0x8
#define _OSCCON_IRCF1_POSN                                  0x4
#define _OSCCON_IRCF1_POSITION                              0x4
#define _OSCCON_IRCF1_SIZE                                  0x1
#define _OSCCON_IRCF1_LENGTH                                0x1
#define _OSCCON_IRCF1_MASK                                  0x10
#define _OSCCON_IRCF2_POSN                                  0x5
#define _OSCCON_IRCF2_POSITION                              0x5
#define _OSCCON_IRCF2_SIZE                                  0x1
#define _OSCCON_IRCF2_LENGTH                                0x1
#define _OSCCON_IRCF2_MASK                                  0x20
#define _OSCCON_IRCF3_POSN                                  0x6
#define _OSCCON_IRCF3_POSITION                              0x6
#define _OSCCON_IRCF3_SIZE                                  0x1
#define _OSCCON_IRCF3_LENGTH                                0x1
#define _OSCCON_IRCF3_MASK                                  0x40

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x09A);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFIOFS                 :1;
        unsigned LFIOFR                 :1;
        unsigned MFIOFR                 :1;
        unsigned HFIOFL                 :1;
        unsigned HFIOFR                 :1;
        unsigned OSTS                   :1;
        unsigned PLLR                   :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x09A);
// bitfield macros
#define _OSCSTAT_HFIOFS_POSN                                0x0
#define _OSCSTAT_HFIOFS_POSITION                            0x0
#define _OSCSTAT_HFIOFS_SIZE                                0x1
#define _OSCSTAT_HFIOFS_LENGTH                              0x1
#define _OSCSTAT_HFIOFS_MASK                                0x1
#define _OSCSTAT_LFIOFR_POSN                                0x1
#define _OSCSTAT_LFIOFR_POSITION                            0x1
#define _OSCSTAT_LFIOFR_SIZE                                0x1
#define _OSCSTAT_LFIOFR_LENGTH                              0x1
#define _OSCSTAT_LFIOFR_MASK                                0x2
#define _OSCSTAT_MFIOFR_POSN                                0x2
#define _OSCSTAT_MFIOFR_POSITION                            0x2
#define _OSCSTAT_MFIOFR_SIZE                                0x1
#define _OSCSTAT_MFIOFR_LENGTH                              0x1
#define _OSCSTAT_MFIOFR_MASK                                0x4
#define _OSCSTAT_HFIOFL_POSN                                0x3
#define _OSCSTAT_HFIOFL_POSITION                            0x3
#define _OSCSTAT_HFIOFL_SIZE                                0x1
#define _OSCSTAT_HFIOFL_LENGTH                              0x1
#define _OSCSTAT_HFIOFL_MASK                                0x8
#define _OSCSTAT_HFIOFR_POSN                                0x4
#define _OSCSTAT_HFIOFR_POSITION                            0x4
#define _OSCSTAT_HFIOFR_SIZE                                0x1
#define _OSCSTAT_HFIOFR_LENGTH                              0x1
#define _OSCSTAT_HFIOFR_MASK                                0x10
#define _OSCSTAT_OSTS_POSN                                  0x5
#define _OSCSTAT_OSTS_POSITION                              0x5
#define _OSCSTAT_OSTS_SIZE                                  0x1
#define _OSCSTAT_OSTS_LENGTH                                0x1
#define _OSCSTAT_OSTS_MASK                                  0x20
#define _OSCSTAT_PLLR_POSN                                  0x6
#define _OSCSTAT_PLLR_POSITION                              0x6
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x40

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRES equ 09Bh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x09B);
#ifndef _LIB_BUILD
asm("ADRESL equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x09B);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x09C);
#ifndef _LIB_BUILD
asm("ADRESH equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESH                 :8;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x09C);
// bitfield macros
#define _ADRESH_ADRESH_POSN                                 0x0
#define _ADRESH_ADRESH_POSITION                             0x0
#define _ADRESH_ADRESH_SIZE                                 0x8
#define _ADRESH_ADRESH_LENGTH                               0x8
#define _ADRESH_ADRESH_MASK                                 0xFF

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x09D);
#ifndef _LIB_BUILD
asm("ADCON0 equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADON                   :1;
        unsigned GO_nDONE               :1;
        unsigned CHS                    :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADGO                   :1;
        unsigned CHS0                   :1;
        unsigned CHS1                   :1;
        unsigned CHS2                   :1;
        unsigned CHS3                   :1;
        unsigned CHS4                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned GO                     :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x09D);
// bitfield macros
#define _ADCON0_ADON_POSN                                   0x0
#define _ADCON0_ADON_POSITION                               0x0
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x1
#define _ADCON0_GO_nDONE_POSN                               0x1
#define _ADCON0_GO_nDONE_POSITION                           0x1
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x2
#define _ADCON0_CHS_POSN                                    0x2
#define _ADCON0_CHS_POSITION                                0x2
#define _ADCON0_CHS_SIZE                                    0x5
#define _ADCON0_CHS_LENGTH                                  0x5
#define _ADCON0_CHS_MASK                                    0x7C
#define _ADCON0_ADGO_POSN                                   0x1
#define _ADCON0_ADGO_POSITION                               0x1
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x2
#define _ADCON0_CHS0_POSN                                   0x2
#define _ADCON0_CHS0_POSITION                               0x2
#define _ADCON0_CHS0_SIZE                                   0x1
#define _ADCON0_CHS0_LENGTH                                 0x1
#define _ADCON0_CHS0_MASK                                   0x4
#define _ADCON0_CHS1_POSN                                   0x3
#define _ADCON0_CHS1_POSITION                               0x3
#define _ADCON0_CHS1_SIZE                                   0x1
#define _ADCON0_CHS1_LENGTH                                 0x1
#define _ADCON0_CHS1_MASK                                   0x8
#define _ADCON0_CHS2_POSN                                   0x4
#define _ADCON0_CHS2_POSITION                               0x4
#define _ADCON0_CHS2_SIZE                                   0x1
#define _ADCON0_CHS2_LENGTH                                 0x1
#define _ADCON0_CHS2_MASK                                   0x10
#define _ADCON0_CHS3_POSN                                   0x5
#define _ADCON0_CHS3_POSITION                               0x5
#define _ADCON0_CHS3_SIZE                                   0x1
#define _ADCON0_CHS3_LENGTH                                 0x1
#define _ADCON0_CHS3_MASK                                   0x20
#define _ADCON0_CHS4_POSN                                   0x6
#define _ADCON0_CHS4_POSITION                               0x6
#define _ADCON0_CHS4_SIZE                                   0x1
#define _ADCON0_CHS4_LENGTH                                 0x1
#define _ADCON0_CHS4_MASK                                   0x40
#define _ADCON0_GO_POSN                                     0x1
#define _ADCON0_GO_POSITION                                 0x1
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x2

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x09E);
#ifndef _LIB_BUILD
asm("ADCON1 equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF                 :2;
        unsigned                        :2;
        unsigned ADCS                   :3;
        unsigned ADFM                   :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
        unsigned                        :2;
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x09E);
// bitfield macros
#define _ADCON1_ADPREF_POSN                                 0x0
#define _ADCON1_ADPREF_POSITION                             0x0
#define _ADCON1_ADPREF_SIZE                                 0x2
#define _ADCON1_ADPREF_LENGTH                               0x2
#define _ADCON1_ADPREF_MASK                                 0x3
#define _ADCON1_ADCS_POSN                                   0x4
#define _ADCON1_ADCS_POSITION                               0x4
#define _ADCON1_ADCS_SIZE                                   0x3
#define _ADCON1_ADCS_LENGTH                                 0x3
#define _ADCON1_ADCS_MASK                                   0x70
#define _ADCON1_ADFM_POSN                                   0x7
#define _ADCON1_ADFM_POSITION                               0x7
#define _ADCON1_ADFM_SIZE                                   0x1
#define _ADCON1_ADFM_LENGTH                                 0x1
#define _ADCON1_ADFM_MASK                                   0x80
#define _ADCON1_ADPREF0_POSN                                0x0
#define _ADCON1_ADPREF0_POSITION                            0x0
#define _ADCON1_ADPREF0_SIZE                                0x1
#define _ADCON1_ADPREF0_LENGTH                              0x1
#define _ADCON1_ADPREF0_MASK                                0x1
#define _ADCON1_ADPREF1_POSN                                0x1
#define _ADCON1_ADPREF1_POSITION                            0x1
#define _ADCON1_ADPREF1_SIZE                                0x1
#define _ADCON1_ADPREF1_LENGTH                              0x1
#define _ADCON1_ADPREF1_MASK                                0x2
#define _ADCON1_ADCS0_POSN                                  0x4
#define _ADCON1_ADCS0_POSITION                              0x4
#define _ADCON1_ADCS0_SIZE                                  0x1
#define _ADCON1_ADCS0_LENGTH                                0x1
#define _ADCON1_ADCS0_MASK                                  0x10
#define _ADCON1_ADCS1_POSN                                  0x5
#define _ADCON1_ADCS1_POSITION                              0x5
#define _ADCON1_ADCS1_SIZE                                  0x1
#define _ADCON1_ADCS1_LENGTH                                0x1
#define _ADCON1_ADCS1_MASK                                  0x20
#define _ADCON1_ADCS2_POSN                                  0x6
#define _ADCON1_ADCS2_POSITION                              0x6
#define _ADCON1_ADCS2_SIZE                                  0x1
#define _ADCON1_ADCS2_LENGTH                                0x1
#define _ADCON1_ADCS2_MASK                                  0x40

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x09F);
#ifndef _LIB_BUILD
asm("ADCON2 equ 09Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned TRIGSEL                :5;
    };
    struct {
        unsigned                        :3;
        unsigned TRIGSEL0               :1;
        unsigned TRIGSEL1               :1;
        unsigned TRIGSEL2               :1;
        unsigned TRIGSEL3               :1;
        unsigned TRIGSEL4               :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x09F);
// bitfield macros
#define _ADCON2_TRIGSEL_POSN                                0x3
#define _ADCON2_TRIGSEL_POSITION                            0x3
#define _ADCON2_TRIGSEL_SIZE                                0x5
#define _ADCON2_TRIGSEL_LENGTH                              0x5
#define _ADCON2_TRIGSEL_MASK                                0xF8
#define _ADCON2_TRIGSEL0_POSN                               0x3
#define _ADCON2_TRIGSEL0_POSITION                           0x3
#define _ADCON2_TRIGSEL0_SIZE                               0x1
#define _ADCON2_TRIGSEL0_LENGTH                             0x1
#define _ADCON2_TRIGSEL0_MASK                               0x8
#define _ADCON2_TRIGSEL1_POSN                               0x4
#define _ADCON2_TRIGSEL1_POSITION                           0x4
#define _ADCON2_TRIGSEL1_SIZE                               0x1
#define _ADCON2_TRIGSEL1_LENGTH                             0x1
#define _ADCON2_TRIGSEL1_MASK                               0x10
#define _ADCON2_TRIGSEL2_POSN                               0x5
#define _ADCON2_TRIGSEL2_POSITION                           0x5
#define _ADCON2_TRIGSEL2_SIZE                               0x1
#define _ADCON2_TRIGSEL2_LENGTH                             0x1
#define _ADCON2_TRIGSEL2_MASK                               0x20
#define _ADCON2_TRIGSEL3_POSN                               0x6
#define _ADCON2_TRIGSEL3_POSITION                           0x6
#define _ADCON2_TRIGSEL3_SIZE                               0x1
#define _ADCON2_TRIGSEL3_LENGTH                             0x1
#define _ADCON2_TRIGSEL3_MASK                               0x40
#define _ADCON2_TRIGSEL4_POSN                               0x7
#define _ADCON2_TRIGSEL4_POSITION                           0x7
#define _ADCON2_TRIGSEL4_SIZE                               0x1
#define _ADCON2_TRIGSEL4_LENGTH                             0x1
#define _ADCON2_TRIGSEL4_MASK                               0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x10C);
#ifndef _LIB_BUILD
asm("LATA equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x10C);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x10E);
#ifndef _LIB_BUILD
asm("LATC equ 010Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x10E);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x111);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0111h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned C1SP                   :1;
        unsigned                        :1;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1ON                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x111);
// bitfield macros
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1SP_POSN                                  0x2
#define _CM1CON0_C1SP_POSITION                              0x2
#define _CM1CON0_C1SP_SIZE                                  0x1
#define _CM1CON0_C1SP_LENGTH                                0x1
#define _CM1CON0_C1SP_MASK                                  0x4
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1ON_POSN                                  0x7
#define _CM1CON0_C1ON_POSITION                              0x7
#define _CM1CON0_C1ON_SIZE                                  0x1
#define _CM1CON0_C1ON_LENGTH                                0x1
#define _CM1CON0_C1ON_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x112);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0112h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
        unsigned                        :1;
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
    struct {
        unsigned C1NCH                  :3;
        unsigned                        :1;
        unsigned C1PCH                  :2;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x112);
// bitfield macros
#define _CM1CON1_C1NCH0_POSN                                0x0
#define _CM1CON1_C1NCH0_POSITION                            0x0
#define _CM1CON1_C1NCH0_SIZE                                0x1
#define _CM1CON1_C1NCH0_LENGTH                              0x1
#define _CM1CON1_C1NCH0_MASK                                0x1
#define _CM1CON1_C1NCH1_POSN                                0x1
#define _CM1CON1_C1NCH1_POSITION                            0x1
#define _CM1CON1_C1NCH1_SIZE                                0x1
#define _CM1CON1_C1NCH1_LENGTH                              0x1
#define _CM1CON1_C1NCH1_MASK                                0x2
#define _CM1CON1_C1NCH2_POSN                                0x2
#define _CM1CON1_C1NCH2_POSITION                            0x2
#define _CM1CON1_C1NCH2_SIZE                                0x1
#define _CM1CON1_C1NCH2_LENGTH                              0x1
#define _CM1CON1_C1NCH2_MASK                                0x4
#define _CM1CON1_C1PCH0_POSN                                0x4
#define _CM1CON1_C1PCH0_POSITION                            0x4
#define _CM1CON1_C1PCH0_SIZE                                0x1
#define _CM1CON1_C1PCH0_LENGTH                              0x1
#define _CM1CON1_C1PCH0_MASK                                0x10
#define _CM1CON1_C1PCH1_POSN                                0x5
#define _CM1CON1_C1PCH1_POSITION                            0x5
#define _CM1CON1_C1PCH1_SIZE                                0x1
#define _CM1CON1_C1PCH1_LENGTH                              0x1
#define _CM1CON1_C1PCH1_MASK                                0x20
#define _CM1CON1_C1INTN_POSN                                0x6
#define _CM1CON1_C1INTN_POSITION                            0x6
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x40
#define _CM1CON1_C1INTP_POSN                                0x7
#define _CM1CON1_C1INTP_POSITION                            0x7
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x80
#define _CM1CON1_C1NCH_POSN                                 0x0
#define _CM1CON1_C1NCH_POSITION                             0x0
#define _CM1CON1_C1NCH_SIZE                                 0x3
#define _CM1CON1_C1NCH_LENGTH                               0x3
#define _CM1CON1_C1NCH_MASK                                 0x7
#define _CM1CON1_C1PCH_POSN                                 0x4
#define _CM1CON1_C1PCH_POSITION                             0x4
#define _CM1CON1_C1PCH_SIZE                                 0x2
#define _CM1CON1_C1PCH_LENGTH                               0x2
#define _CM1CON1_C1PCH_MASK                                 0x30

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x113);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0113h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned C2SP                   :1;
        unsigned                        :1;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2ON                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x113);
// bitfield macros
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2SP_POSN                                  0x2
#define _CM2CON0_C2SP_POSITION                              0x2
#define _CM2CON0_C2SP_SIZE                                  0x1
#define _CM2CON0_C2SP_LENGTH                                0x1
#define _CM2CON0_C2SP_MASK                                  0x4
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2ON_POSN                                  0x7
#define _CM2CON0_C2ON_POSITION                              0x7
#define _CM2CON0_C2ON_SIZE                                  0x1
#define _CM2CON0_C2ON_LENGTH                                0x1
#define _CM2CON0_C2ON_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x114);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0114h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
        unsigned                        :1;
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
    struct {
        unsigned C2NCH                  :3;
        unsigned                        :1;
        unsigned C2PCH                  :2;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x114);
// bitfield macros
#define _CM2CON1_C2NCH0_POSN                                0x0
#define _CM2CON1_C2NCH0_POSITION                            0x0
#define _CM2CON1_C2NCH0_SIZE                                0x1
#define _CM2CON1_C2NCH0_LENGTH                              0x1
#define _CM2CON1_C2NCH0_MASK                                0x1
#define _CM2CON1_C2NCH1_POSN                                0x1
#define _CM2CON1_C2NCH1_POSITION                            0x1
#define _CM2CON1_C2NCH1_SIZE                                0x1
#define _CM2CON1_C2NCH1_LENGTH                              0x1
#define _CM2CON1_C2NCH1_MASK                                0x2
#define _CM2CON1_C2NCH2_POSN                                0x2
#define _CM2CON1_C2NCH2_POSITION                            0x2
#define _CM2CON1_C2NCH2_SIZE                                0x1
#define _CM2CON1_C2NCH2_LENGTH                              0x1
#define _CM2CON1_C2NCH2_MASK                                0x4
#define _CM2CON1_C2PCH0_POSN                                0x4
#define _CM2CON1_C2PCH0_POSITION                            0x4
#define _CM2CON1_C2PCH0_SIZE                                0x1
#define _CM2CON1_C2PCH0_LENGTH                              0x1
#define _CM2CON1_C2PCH0_MASK                                0x10
#define _CM2CON1_C2PCH1_POSN                                0x5
#define _CM2CON1_C2PCH1_POSITION                            0x5
#define _CM2CON1_C2PCH1_SIZE                                0x1
#define _CM2CON1_C2PCH1_LENGTH                              0x1
#define _CM2CON1_C2PCH1_MASK                                0x20
#define _CM2CON1_C2INTN_POSN                                0x6
#define _CM2CON1_C2INTN_POSITION                            0x6
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x40
#define _CM2CON1_C2INTP_POSN                                0x7
#define _CM2CON1_C2INTP_POSITION                            0x7
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x80
#define _CM2CON1_C2NCH_POSN                                 0x0
#define _CM2CON1_C2NCH_POSITION                             0x0
#define _CM2CON1_C2NCH_SIZE                                 0x3
#define _CM2CON1_C2NCH_LENGTH                               0x3
#define _CM2CON1_C2NCH_MASK                                 0x7
#define _CM2CON1_C2PCH_POSN                                 0x4
#define _CM2CON1_C2PCH_POSITION                             0x4
#define _CM2CON1_C2PCH_SIZE                                 0x2
#define _CM2CON1_C2PCH_LENGTH                               0x2
#define _CM2CON1_C2PCH_MASK                                 0x30

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x115);
#ifndef _LIB_BUILD
asm("CMOUT equ 0115h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x115);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x116);
#ifndef _LIB_BUILD
asm("BORCON equ 0116h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :5;
        unsigned BORFS                  :1;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x116);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_BORFS_POSN                                  0x6
#define _BORCON_BORFS_POSITION                              0x6
#define _BORCON_BORFS_SIZE                                  0x1
#define _BORCON_BORFS_LENGTH                                0x1
#define _BORCON_BORFS_MASK                                  0x40
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x117);
#ifndef _LIB_BUILD
asm("FVRCON equ 0117h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x117);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x118);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 0118h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned DAC1PSS                :2;
        unsigned                        :1;
        unsigned DAC1OE                 :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned D1PSS0                 :1;
        unsigned D1PSS1                 :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x118);
// bitfield macros
#define _DAC1CON0_DAC1PSS_POSN                              0x2
#define _DAC1CON0_DAC1PSS_POSITION                          0x2
#define _DAC1CON0_DAC1PSS_SIZE                              0x2
#define _DAC1CON0_DAC1PSS_LENGTH                            0x2
#define _DAC1CON0_DAC1PSS_MASK                              0xC
#define _DAC1CON0_DAC1OE_POSN                               0x5
#define _DAC1CON0_DAC1OE_POSITION                           0x5
#define _DAC1CON0_DAC1OE_SIZE                               0x1
#define _DAC1CON0_DAC1OE_LENGTH                             0x1
#define _DAC1CON0_DAC1OE_MASK                               0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_D1PSS0_POSN                               0x2
#define _DAC1CON0_D1PSS0_POSITION                           0x2
#define _DAC1CON0_D1PSS0_SIZE                               0x1
#define _DAC1CON0_D1PSS0_LENGTH                             0x1
#define _DAC1CON0_D1PSS0_MASK                               0x4
#define _DAC1CON0_D1PSS1_POSN                               0x3
#define _DAC1CON0_D1PSS1_POSITION                           0x3
#define _DAC1CON0_D1PSS1_SIZE                               0x1
#define _DAC1CON0_D1PSS1_LENGTH                             0x1
#define _DAC1CON0_D1PSS1_MASK                               0x8

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0x119);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :8;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
        unsigned DAC1R5                 :1;
        unsigned DAC1R6                 :1;
        unsigned DAC1R7                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x119);
// bitfield macros
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x8
#define _DAC1CON1_DAC1R_LENGTH                              0x8
#define _DAC1CON1_DAC1R_MASK                                0xFF
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10
#define _DAC1CON1_DAC1R5_POSN                               0x5
#define _DAC1CON1_DAC1R5_POSITION                           0x5
#define _DAC1CON1_DAC1R5_SIZE                               0x1
#define _DAC1CON1_DAC1R5_LENGTH                             0x1
#define _DAC1CON1_DAC1R5_MASK                               0x20
#define _DAC1CON1_DAC1R6_POSN                               0x6
#define _DAC1CON1_DAC1R6_POSITION                           0x6
#define _DAC1CON1_DAC1R6_SIZE                               0x1
#define _DAC1CON1_DAC1R6_LENGTH                             0x1
#define _DAC1CON1_DAC1R6_MASK                               0x40
#define _DAC1CON1_DAC1R7_POSN                               0x7
#define _DAC1CON1_DAC1R7_POSITION                           0x7
#define _DAC1CON1_DAC1R7_SIZE                               0x1
#define _DAC1CON1_DAC1R7_LENGTH                             0x1
#define _DAC1CON1_DAC1R7_MASK                               0x80

// Register: ZCD1CON
#define ZCD1CON ZCD1CON
extern volatile unsigned char           ZCD1CON             __at(0x11C);
#ifndef _LIB_BUILD
asm("ZCD1CON equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCD1INTN               :1;
        unsigned ZCD1INTP               :1;
        unsigned                        :2;
        unsigned ZCD1POL                :1;
        unsigned ZCD1OUT                :1;
        unsigned                        :1;
        unsigned ZCD1EN                 :1;
    };
} ZCD1CONbits_t;
extern volatile ZCD1CONbits_t ZCD1CONbits __at(0x11C);
// bitfield macros
#define _ZCD1CON_ZCD1INTN_POSN                              0x0
#define _ZCD1CON_ZCD1INTN_POSITION                          0x0
#define _ZCD1CON_ZCD1INTN_SIZE                              0x1
#define _ZCD1CON_ZCD1INTN_LENGTH                            0x1
#define _ZCD1CON_ZCD1INTN_MASK                              0x1
#define _ZCD1CON_ZCD1INTP_POSN                              0x1
#define _ZCD1CON_ZCD1INTP_POSITION                          0x1
#define _ZCD1CON_ZCD1INTP_SIZE                              0x1
#define _ZCD1CON_ZCD1INTP_LENGTH                            0x1
#define _ZCD1CON_ZCD1INTP_MASK                              0x2
#define _ZCD1CON_ZCD1POL_POSN                               0x4
#define _ZCD1CON_ZCD1POL_POSITION                           0x4
#define _ZCD1CON_ZCD1POL_SIZE                               0x1
#define _ZCD1CON_ZCD1POL_LENGTH                             0x1
#define _ZCD1CON_ZCD1POL_MASK                               0x10
#define _ZCD1CON_ZCD1OUT_POSN                               0x5
#define _ZCD1CON_ZCD1OUT_POSITION                           0x5
#define _ZCD1CON_ZCD1OUT_SIZE                               0x1
#define _ZCD1CON_ZCD1OUT_LENGTH                             0x1
#define _ZCD1CON_ZCD1OUT_MASK                               0x20
#define _ZCD1CON_ZCD1EN_POSN                                0x7
#define _ZCD1CON_ZCD1EN_POSITION                            0x7
#define _ZCD1CON_ZCD1EN_SIZE                                0x1
#define _ZCD1CON_ZCD1EN_LENGTH                              0x1
#define _ZCD1CON_ZCD1EN_MASK                                0x80

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x18C);
#ifndef _LIB_BUILD
asm("ANSELA equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned                        :1;
        unsigned ANSA4                  :1;
    };
    struct {
        unsigned ANSELA                 :6;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x18C);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10
#define _ANSELA_ANSELA_POSN                                 0x0
#define _ANSELA_ANSELA_POSITION                             0x0
#define _ANSELA_ANSELA_SIZE                                 0x6
#define _ANSELA_ANSELA_LENGTH                               0x6
#define _ANSELA_ANSELA_MASK                                 0x3F

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x18E);
#ifndef _LIB_BUILD
asm("ANSELC equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSC0                  :1;
        unsigned ANSC1                  :1;
        unsigned ANSC2                  :1;
        unsigned ANSC3                  :1;
    };
    struct {
        unsigned ANSELC                 :8;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x18E);
// bitfield macros
#define _ANSELC_ANSC0_POSN                                  0x0
#define _ANSELC_ANSC0_POSITION                              0x0
#define _ANSELC_ANSC0_SIZE                                  0x1
#define _ANSELC_ANSC0_LENGTH                                0x1
#define _ANSELC_ANSC0_MASK                                  0x1
#define _ANSELC_ANSC1_POSN                                  0x1
#define _ANSELC_ANSC1_POSITION                              0x1
#define _ANSELC_ANSC1_SIZE                                  0x1
#define _ANSELC_ANSC1_LENGTH                                0x1
#define _ANSELC_ANSC1_MASK                                  0x2
#define _ANSELC_ANSC2_POSN                                  0x2
#define _ANSELC_ANSC2_POSITION                              0x2
#define _ANSELC_ANSC2_SIZE                                  0x1
#define _ANSELC_ANSC2_LENGTH                                0x1
#define _ANSELC_ANSC2_MASK                                  0x4
#define _ANSELC_ANSC3_POSN                                  0x3
#define _ANSELC_ANSC3_POSITION                              0x3
#define _ANSELC_ANSC3_SIZE                                  0x1
#define _ANSELC_ANSC3_LENGTH                                0x1
#define _ANSELC_ANSC3_MASK                                  0x8
#define _ANSELC_ANSELC_POSN                                 0x0
#define _ANSELC_ANSELC_POSITION                             0x0
#define _ANSELC_ANSELC_SIZE                                 0x8
#define _ANSELC_ANSELC_LENGTH                               0x8
#define _ANSELC_ANSELC_MASK                                 0xFF

// Register: PMADR
#define PMADR PMADR
extern volatile unsigned short          PMADR               __at(0x191);
#ifndef _LIB_BUILD
asm("PMADR equ 0191h");
#endif

// Register: PMADRL
#define PMADRL PMADRL
extern volatile unsigned char           PMADRL              __at(0x191);
#ifndef _LIB_BUILD
asm("PMADRL equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMADRL                 :8;
    };
} PMADRLbits_t;
extern volatile PMADRLbits_t PMADRLbits __at(0x191);
// bitfield macros
#define _PMADRL_PMADRL_POSN                                 0x0
#define _PMADRL_PMADRL_POSITION                             0x0
#define _PMADRL_PMADRL_SIZE                                 0x8
#define _PMADRL_PMADRL_LENGTH                               0x8
#define _PMADRL_PMADRL_MASK                                 0xFF

// Register: PMADRH
#define PMADRH PMADRH
extern volatile unsigned char           PMADRH              __at(0x192);
#ifndef _LIB_BUILD
asm("PMADRH equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMADRH                 :7;
    };
} PMADRHbits_t;
extern volatile PMADRHbits_t PMADRHbits __at(0x192);
// bitfield macros
#define _PMADRH_PMADRH_POSN                                 0x0
#define _PMADRH_PMADRH_POSITION                             0x0
#define _PMADRH_PMADRH_SIZE                                 0x7
#define _PMADRH_PMADRH_LENGTH                               0x7
#define _PMADRH_PMADRH_MASK                                 0x7F

// Register: PMDAT
#define PMDAT PMDAT
extern volatile unsigned short          PMDAT               __at(0x193);
#ifndef _LIB_BUILD
asm("PMDAT equ 0193h");
#endif

// Register: PMDATL
#define PMDATL PMDATL
extern volatile unsigned char           PMDATL              __at(0x193);
#ifndef _LIB_BUILD
asm("PMDATL equ 0193h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMDATL                 :8;
    };
} PMDATLbits_t;
extern volatile PMDATLbits_t PMDATLbits __at(0x193);
// bitfield macros
#define _PMDATL_PMDATL_POSN                                 0x0
#define _PMDATL_PMDATL_POSITION                             0x0
#define _PMDATL_PMDATL_SIZE                                 0x8
#define _PMDATL_PMDATL_LENGTH                               0x8
#define _PMDATL_PMDATL_MASK                                 0xFF

// Register: PMDATH
#define PMDATH PMDATH
extern volatile unsigned char           PMDATH              __at(0x194);
#ifndef _LIB_BUILD
asm("PMDATH equ 0194h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMDATH                 :6;
    };
} PMDATHbits_t;
extern volatile PMDATHbits_t PMDATHbits __at(0x194);
// bitfield macros
#define _PMDATH_PMDATH_POSN                                 0x0
#define _PMDATH_PMDATH_POSITION                             0x0
#define _PMDATH_PMDATH_SIZE                                 0x6
#define _PMDATH_PMDATH_LENGTH                               0x6
#define _PMDATH_PMDATH_MASK                                 0x3F

// Register: PMCON1
#define PMCON1 PMCON1
extern volatile unsigned char           PMCON1              __at(0x195);
#ifndef _LIB_BUILD
asm("PMCON1 equ 0195h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned CFGS                   :1;
    };
} PMCON1bits_t;
extern volatile PMCON1bits_t PMCON1bits __at(0x195);
// bitfield macros
#define _PMCON1_RD_POSN                                     0x0
#define _PMCON1_RD_POSITION                                 0x0
#define _PMCON1_RD_SIZE                                     0x1
#define _PMCON1_RD_LENGTH                                   0x1
#define _PMCON1_RD_MASK                                     0x1
#define _PMCON1_WR_POSN                                     0x1
#define _PMCON1_WR_POSITION                                 0x1
#define _PMCON1_WR_SIZE                                     0x1
#define _PMCON1_WR_LENGTH                                   0x1
#define _PMCON1_WR_MASK                                     0x2
#define _PMCON1_WREN_POSN                                   0x2
#define _PMCON1_WREN_POSITION                               0x2
#define _PMCON1_WREN_SIZE                                   0x1
#define _PMCON1_WREN_LENGTH                                 0x1
#define _PMCON1_WREN_MASK                                   0x4
#define _PMCON1_WRERR_POSN                                  0x3
#define _PMCON1_WRERR_POSITION                              0x3
#define _PMCON1_WRERR_SIZE                                  0x1
#define _PMCON1_WRERR_LENGTH                                0x1
#define _PMCON1_WRERR_MASK                                  0x8
#define _PMCON1_FREE_POSN                                   0x4
#define _PMCON1_FREE_POSITION                               0x4
#define _PMCON1_FREE_SIZE                                   0x1
#define _PMCON1_FREE_LENGTH                                 0x1
#define _PMCON1_FREE_MASK                                   0x10
#define _PMCON1_LWLO_POSN                                   0x5
#define _PMCON1_LWLO_POSITION                               0x5
#define _PMCON1_LWLO_SIZE                                   0x1
#define _PMCON1_LWLO_LENGTH                                 0x1
#define _PMCON1_LWLO_MASK                                   0x20
#define _PMCON1_CFGS_POSN                                   0x6
#define _PMCON1_CFGS_POSITION                               0x6
#define _PMCON1_CFGS_SIZE                                   0x1
#define _PMCON1_CFGS_LENGTH                                 0x1
#define _PMCON1_CFGS_MASK                                   0x40

// Register: PMCON2
#define PMCON2 PMCON2
extern volatile unsigned char           PMCON2              __at(0x196);
#ifndef _LIB_BUILD
asm("PMCON2 equ 0196h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PMCON2                 :8;
    };
} PMCON2bits_t;
extern volatile PMCON2bits_t PMCON2bits __at(0x196);
// bitfield macros
#define _PMCON2_PMCON2_POSN                                 0x0
#define _PMCON2_PMCON2_POSITION                             0x0
#define _PMCON2_PMCON2_SIZE                                 0x8
#define _PMCON2_PMCON2_LENGTH                               0x8
#define _PMCON2_PMCON2_MASK                                 0xFF

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x197);
#ifndef _LIB_BUILD
asm("VREGCON equ 0197h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREGPM                 :2;
    };
    struct {
        unsigned VREGPM0                :1;
        unsigned VREGPM1                :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x197);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x0
#define _VREGCON_VREGPM_POSITION                            0x0
#define _VREGCON_VREGPM_SIZE                                0x2
#define _VREGCON_VREGPM_LENGTH                              0x2
#define _VREGCON_VREGPM_MASK                                0x3
#define _VREGCON_VREGPM0_POSN                               0x0
#define _VREGCON_VREGPM0_POSITION                           0x0
#define _VREGCON_VREGPM0_SIZE                               0x1
#define _VREGCON_VREGPM0_LENGTH                             0x1
#define _VREGCON_VREGPM0_MASK                               0x1
#define _VREGCON_VREGPM1_POSN                               0x1
#define _VREGCON_VREGPM1_POSITION                           0x1
#define _VREGCON_VREGPM1_SIZE                               0x1
#define _VREGCON_VREGPM1_LENGTH                             0x1
#define _VREGCON_VREGPM1_MASK                               0x2

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x199);
#ifndef _LIB_BUILD
asm("RC1REG equ 0199h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x199);
#ifndef _LIB_BUILD
asm("RCREG equ 0199h");
#endif
extern volatile unsigned char           RCREG1              __at(0x199);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0199h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x199);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x199);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x199);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x19A);
#ifndef _LIB_BUILD
asm("TX1REG equ 019Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x19A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 019Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x19A);
#ifndef _LIB_BUILD
asm("TXREG equ 019Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x19A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x19A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x19A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x19B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 019Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x19B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 019Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRG equ 019Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 019Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x19B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 019Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x19B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x19B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x19B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x19B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x19C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 019Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x19C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 019Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x19C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x19C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x19C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x19C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x19D);
#ifndef _LIB_BUILD
asm("RC1STA equ 019Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x19D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 019Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x19D);
#ifndef _LIB_BUILD
asm("RCSTA equ 019Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x19D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x19D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x19D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x19E);
#ifndef _LIB_BUILD
asm("TX1STA equ 019Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x19E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 019Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x19E);
#ifndef _LIB_BUILD
asm("TXSTA equ 019Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x19E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x19E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x19E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 019Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 019Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 019Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 019Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x19F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 019Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x19F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x19F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x19F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x19F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x19F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x20C);
#ifndef _LIB_BUILD
asm("WPUA equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
    };
    struct {
        unsigned WPUA                   :6;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x20C);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA_POSN                                     0x0
#define _WPUA_WPUA_POSITION                                 0x0
#define _WPUA_WPUA_SIZE                                     0x6
#define _WPUA_WPUA_LENGTH                                   0x6
#define _WPUA_WPUA_MASK                                     0x3F

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x20E);
#ifndef _LIB_BUILD
asm("WPUC equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
    };
    struct {
        unsigned WPUA                   :6;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x20E);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUA_POSN                                     0x0
#define _WPUC_WPUA_POSITION                                 0x0
#define _WPUC_WPUA_SIZE                                     0x6
#define _WPUC_WPUA_LENGTH                                   0x6
#define _WPUC_WPUA_MASK                                     0x3F

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x211);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 0211h");
#endif
// aliases
extern volatile unsigned char           SSPBUF              __at(0x211);
#ifndef _LIB_BUILD
asm("SSPBUF equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1BUF0               :1;
        unsigned SSP1BUF1               :1;
        unsigned SSP1BUF2               :1;
        unsigned SSP1BUF3               :1;
        unsigned SSP1BUF4               :1;
        unsigned SSP1BUF5               :1;
        unsigned SSP1BUF6               :1;
        unsigned SSP1BUF7               :1;
    };
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned SSP1BUF                :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x211);
// bitfield macros
#define _SSP1BUF_SSP1BUF0_POSN                              0x0
#define _SSP1BUF_SSP1BUF0_POSITION                          0x0
#define _SSP1BUF_SSP1BUF0_SIZE                              0x1
#define _SSP1BUF_SSP1BUF0_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF0_MASK                              0x1
#define _SSP1BUF_SSP1BUF1_POSN                              0x1
#define _SSP1BUF_SSP1BUF1_POSITION                          0x1
#define _SSP1BUF_SSP1BUF1_SIZE                              0x1
#define _SSP1BUF_SSP1BUF1_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF1_MASK                              0x2
#define _SSP1BUF_SSP1BUF2_POSN                              0x2
#define _SSP1BUF_SSP1BUF2_POSITION                          0x2
#define _SSP1BUF_SSP1BUF2_SIZE                              0x1
#define _SSP1BUF_SSP1BUF2_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF2_MASK                              0x4
#define _SSP1BUF_SSP1BUF3_POSN                              0x3
#define _SSP1BUF_SSP1BUF3_POSITION                          0x3
#define _SSP1BUF_SSP1BUF3_SIZE                              0x1
#define _SSP1BUF_SSP1BUF3_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF3_MASK                              0x8
#define _SSP1BUF_SSP1BUF4_POSN                              0x4
#define _SSP1BUF_SSP1BUF4_POSITION                          0x4
#define _SSP1BUF_SSP1BUF4_SIZE                              0x1
#define _SSP1BUF_SSP1BUF4_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF4_MASK                              0x10
#define _SSP1BUF_SSP1BUF5_POSN                              0x5
#define _SSP1BUF_SSP1BUF5_POSITION                          0x5
#define _SSP1BUF_SSP1BUF5_SIZE                              0x1
#define _SSP1BUF_SSP1BUF5_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF5_MASK                              0x20
#define _SSP1BUF_SSP1BUF6_POSN                              0x6
#define _SSP1BUF_SSP1BUF6_POSITION                          0x6
#define _SSP1BUF_SSP1BUF6_SIZE                              0x1
#define _SSP1BUF_SSP1BUF6_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF6_MASK                              0x40
#define _SSP1BUF_SSP1BUF7_POSN                              0x7
#define _SSP1BUF_SSP1BUF7_POSITION                          0x7
#define _SSP1BUF_SSP1BUF7_SIZE                              0x1
#define _SSP1BUF_SSP1BUF7_LENGTH                            0x1
#define _SSP1BUF_SSP1BUF7_MASK                              0x80
#define _SSP1BUF_BUF_POSN                                   0x0
#define _SSP1BUF_BUF_POSITION                               0x0
#define _SSP1BUF_BUF_SIZE                                   0x8
#define _SSP1BUF_BUF_LENGTH                                 0x8
#define _SSP1BUF_BUF_MASK                                   0xFF
#define _SSP1BUF_BUF0_POSN                                  0x0
#define _SSP1BUF_BUF0_POSITION                              0x0
#define _SSP1BUF_BUF0_SIZE                                  0x1
#define _SSP1BUF_BUF0_LENGTH                                0x1
#define _SSP1BUF_BUF0_MASK                                  0x1
#define _SSP1BUF_BUF1_POSN                                  0x1
#define _SSP1BUF_BUF1_POSITION                              0x1
#define _SSP1BUF_BUF1_SIZE                                  0x1
#define _SSP1BUF_BUF1_LENGTH                                0x1
#define _SSP1BUF_BUF1_MASK                                  0x2
#define _SSP1BUF_BUF2_POSN                                  0x2
#define _SSP1BUF_BUF2_POSITION                              0x2
#define _SSP1BUF_BUF2_SIZE                                  0x1
#define _SSP1BUF_BUF2_LENGTH                                0x1
#define _SSP1BUF_BUF2_MASK                                  0x4
#define _SSP1BUF_BUF3_POSN                                  0x3
#define _SSP1BUF_BUF3_POSITION                              0x3
#define _SSP1BUF_BUF3_SIZE                                  0x1
#define _SSP1BUF_BUF3_LENGTH                                0x1
#define _SSP1BUF_BUF3_MASK                                  0x8
#define _SSP1BUF_BUF4_POSN                                  0x4
#define _SSP1BUF_BUF4_POSITION                              0x4
#define _SSP1BUF_BUF4_SIZE                                  0x1
#define _SSP1BUF_BUF4_LENGTH                                0x1
#define _SSP1BUF_BUF4_MASK                                  0x10
#define _SSP1BUF_BUF5_POSN                                  0x5
#define _SSP1BUF_BUF5_POSITION                              0x5
#define _SSP1BUF_BUF5_SIZE                                  0x1
#define _SSP1BUF_BUF5_LENGTH                                0x1
#define _SSP1BUF_BUF5_MASK                                  0x20
#define _SSP1BUF_BUF6_POSN                                  0x6
#define _SSP1BUF_BUF6_POSITION                              0x6
#define _SSP1BUF_BUF6_SIZE                                  0x1
#define _SSP1BUF_BUF6_LENGTH                                0x1
#define _SSP1BUF_BUF6_MASK                                  0x40
#define _SSP1BUF_BUF7_POSN                                  0x7
#define _SSP1BUF_BUF7_POSITION                              0x7
#define _SSP1BUF_BUF7_SIZE                                  0x1
#define _SSP1BUF_BUF7_LENGTH                                0x1
#define _SSP1BUF_BUF7_MASK                                  0x80
#define _SSP1BUF_SSP1BUF_POSN                               0x0
#define _SSP1BUF_SSP1BUF_POSITION                           0x0
#define _SSP1BUF_SSP1BUF_SIZE                               0x8
#define _SSP1BUF_SSP1BUF_LENGTH                             0x8
#define _SSP1BUF_SSP1BUF_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1BUF0               :1;
        unsigned SSP1BUF1               :1;
        unsigned SSP1BUF2               :1;
        unsigned SSP1BUF3               :1;
        unsigned SSP1BUF4               :1;
        unsigned SSP1BUF5               :1;
        unsigned SSP1BUF6               :1;
        unsigned SSP1BUF7               :1;
    };
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned SSP1BUF                :8;
    };
} SSPBUFbits_t;
extern volatile SSPBUFbits_t SSPBUFbits __at(0x211);
// bitfield macros
#define _SSPBUF_SSP1BUF0_POSN                               0x0
#define _SSPBUF_SSP1BUF0_POSITION                           0x0
#define _SSPBUF_SSP1BUF0_SIZE                               0x1
#define _SSPBUF_SSP1BUF0_LENGTH                             0x1
#define _SSPBUF_SSP1BUF0_MASK                               0x1
#define _SSPBUF_SSP1BUF1_POSN                               0x1
#define _SSPBUF_SSP1BUF1_POSITION                           0x1
#define _SSPBUF_SSP1BUF1_SIZE                               0x1
#define _SSPBUF_SSP1BUF1_LENGTH                             0x1
#define _SSPBUF_SSP1BUF1_MASK                               0x2
#define _SSPBUF_SSP1BUF2_POSN                               0x2
#define _SSPBUF_SSP1BUF2_POSITION                           0x2
#define _SSPBUF_SSP1BUF2_SIZE                               0x1
#define _SSPBUF_SSP1BUF2_LENGTH                             0x1
#define _SSPBUF_SSP1BUF2_MASK                               0x4
#define _SSPBUF_SSP1BUF3_POSN                               0x3
#define _SSPBUF_SSP1BUF3_POSITION                           0x3
#define _SSPBUF_SSP1BUF3_SIZE                               0x1
#define _SSPBUF_SSP1BUF3_LENGTH                             0x1
#define _SSPBUF_SSP1BUF3_MASK                               0x8
#define _SSPBUF_SSP1BUF4_POSN                               0x4
#define _SSPBUF_SSP1BUF4_POSITION                           0x4
#define _SSPBUF_SSP1BUF4_SIZE                               0x1
#define _SSPBUF_SSP1BUF4_LENGTH                             0x1
#define _SSPBUF_SSP1BUF4_MASK                               0x10
#define _SSPBUF_SSP1BUF5_POSN                               0x5
#define _SSPBUF_SSP1BUF5_POSITION                           0x5
#define _SSPBUF_SSP1BUF5_SIZE                               0x1
#define _SSPBUF_SSP1BUF5_LENGTH                             0x1
#define _SSPBUF_SSP1BUF5_MASK                               0x20
#define _SSPBUF_SSP1BUF6_POSN                               0x6
#define _SSPBUF_SSP1BUF6_POSITION                           0x6
#define _SSPBUF_SSP1BUF6_SIZE                               0x1
#define _SSPBUF_SSP1BUF6_LENGTH                             0x1
#define _SSPBUF_SSP1BUF6_MASK                               0x40
#define _SSPBUF_SSP1BUF7_POSN                               0x7
#define _SSPBUF_SSP1BUF7_POSITION                           0x7
#define _SSPBUF_SSP1BUF7_SIZE                               0x1
#define _SSPBUF_SSP1BUF7_LENGTH                             0x1
#define _SSPBUF_SSP1BUF7_MASK                               0x80
#define _SSPBUF_BUF_POSN                                    0x0
#define _SSPBUF_BUF_POSITION                                0x0
#define _SSPBUF_BUF_SIZE                                    0x8
#define _SSPBUF_BUF_LENGTH                                  0x8
#define _SSPBUF_BUF_MASK                                    0xFF
#define _SSPBUF_BUF0_POSN                                   0x0
#define _SSPBUF_BUF0_POSITION                               0x0
#define _SSPBUF_BUF0_SIZE                                   0x1
#define _SSPBUF_BUF0_LENGTH                                 0x1
#define _SSPBUF_BUF0_MASK                                   0x1
#define _SSPBUF_BUF1_POSN                                   0x1
#define _SSPBUF_BUF1_POSITION                               0x1
#define _SSPBUF_BUF1_SIZE                                   0x1
#define _SSPBUF_BUF1_LENGTH                                 0x1
#define _SSPBUF_BUF1_MASK                                   0x2
#define _SSPBUF_BUF2_POSN                                   0x2
#define _SSPBUF_BUF2_POSITION                               0x2
#define _SSPBUF_BUF2_SIZE                                   0x1
#define _SSPBUF_BUF2_LENGTH                                 0x1
#define _SSPBUF_BUF2_MASK                                   0x4
#define _SSPBUF_BUF3_POSN                                   0x3
#define _SSPBUF_BUF3_POSITION                               0x3
#define _SSPBUF_BUF3_SIZE                                   0x1
#define _SSPBUF_BUF3_LENGTH                                 0x1
#define _SSPBUF_BUF3_MASK                                   0x8
#define _SSPBUF_BUF4_POSN                                   0x4
#define _SSPBUF_BUF4_POSITION                               0x4
#define _SSPBUF_BUF4_SIZE                                   0x1
#define _SSPBUF_BUF4_LENGTH                                 0x1
#define _SSPBUF_BUF4_MASK                                   0x10
#define _SSPBUF_BUF5_POSN                                   0x5
#define _SSPBUF_BUF5_POSITION                               0x5
#define _SSPBUF_BUF5_SIZE                                   0x1
#define _SSPBUF_BUF5_LENGTH                                 0x1
#define _SSPBUF_BUF5_MASK                                   0x20
#define _SSPBUF_BUF6_POSN                                   0x6
#define _SSPBUF_BUF6_POSITION                               0x6
#define _SSPBUF_BUF6_SIZE                                   0x1
#define _SSPBUF_BUF6_LENGTH                                 0x1
#define _SSPBUF_BUF6_MASK                                   0x40
#define _SSPBUF_BUF7_POSN                                   0x7
#define _SSPBUF_BUF7_POSITION                               0x7
#define _SSPBUF_BUF7_SIZE                                   0x1
#define _SSPBUF_BUF7_LENGTH                                 0x1
#define _SSPBUF_BUF7_MASK                                   0x80
#define _SSPBUF_SSP1BUF_POSN                                0x0
#define _SSPBUF_SSP1BUF_POSITION                            0x0
#define _SSPBUF_SSP1BUF_SIZE                                0x8
#define _SSPBUF_SSP1BUF_LENGTH                              0x8
#define _SSPBUF_SSP1BUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x212);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 0212h");
#endif
// aliases
extern volatile unsigned char           SSPADD              __at(0x212);
#ifndef _LIB_BUILD
asm("SSPADD equ 0212h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1ADD0               :1;
        unsigned SSP1ADD1               :1;
        unsigned SSP1ADD2               :1;
        unsigned SSP1ADD3               :1;
        unsigned SSP1ADD4               :1;
        unsigned SSP1ADD5               :1;
        unsigned SSP1ADD6               :1;
        unsigned SSP1ADD7               :1;
    };
    struct {
        unsigned ADD                    :8;
    };
    struct {
        unsigned ADD0                   :1;
        unsigned ADD1                   :1;
        unsigned ADD2                   :1;
        unsigned ADD3                   :1;
        unsigned ADD4                   :1;
        unsigned ADD5                   :1;
        unsigned ADD6                   :1;
        unsigned ADD7                   :1;
    };
    struct {
        unsigned SSP1ADD                :8;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x212);
// bitfield macros
#define _SSP1ADD_SSP1ADD0_POSN                              0x0
#define _SSP1ADD_SSP1ADD0_POSITION                          0x0
#define _SSP1ADD_SSP1ADD0_SIZE                              0x1
#define _SSP1ADD_SSP1ADD0_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD0_MASK                              0x1
#define _SSP1ADD_SSP1ADD1_POSN                              0x1
#define _SSP1ADD_SSP1ADD1_POSITION                          0x1
#define _SSP1ADD_SSP1ADD1_SIZE                              0x1
#define _SSP1ADD_SSP1ADD1_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD1_MASK                              0x2
#define _SSP1ADD_SSP1ADD2_POSN                              0x2
#define _SSP1ADD_SSP1ADD2_POSITION                          0x2
#define _SSP1ADD_SSP1ADD2_SIZE                              0x1
#define _SSP1ADD_SSP1ADD2_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD2_MASK                              0x4
#define _SSP1ADD_SSP1ADD3_POSN                              0x3
#define _SSP1ADD_SSP1ADD3_POSITION                          0x3
#define _SSP1ADD_SSP1ADD3_SIZE                              0x1
#define _SSP1ADD_SSP1ADD3_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD3_MASK                              0x8
#define _SSP1ADD_SSP1ADD4_POSN                              0x4
#define _SSP1ADD_SSP1ADD4_POSITION                          0x4
#define _SSP1ADD_SSP1ADD4_SIZE                              0x1
#define _SSP1ADD_SSP1ADD4_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD4_MASK                              0x10
#define _SSP1ADD_SSP1ADD5_POSN                              0x5
#define _SSP1ADD_SSP1ADD5_POSITION                          0x5
#define _SSP1ADD_SSP1ADD5_SIZE                              0x1
#define _SSP1ADD_SSP1ADD5_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD5_MASK                              0x20
#define _SSP1ADD_SSP1ADD6_POSN                              0x6
#define _SSP1ADD_SSP1ADD6_POSITION                          0x6
#define _SSP1ADD_SSP1ADD6_SIZE                              0x1
#define _SSP1ADD_SSP1ADD6_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD6_MASK                              0x40
#define _SSP1ADD_SSP1ADD7_POSN                              0x7
#define _SSP1ADD_SSP1ADD7_POSITION                          0x7
#define _SSP1ADD_SSP1ADD7_SIZE                              0x1
#define _SSP1ADD_SSP1ADD7_LENGTH                            0x1
#define _SSP1ADD_SSP1ADD7_MASK                              0x80
#define _SSP1ADD_ADD_POSN                                   0x0
#define _SSP1ADD_ADD_POSITION                               0x0
#define _SSP1ADD_ADD_SIZE                                   0x8
#define _SSP1ADD_ADD_LENGTH                                 0x8
#define _SSP1ADD_ADD_MASK                                   0xFF
#define _SSP1ADD_ADD0_POSN                                  0x0
#define _SSP1ADD_ADD0_POSITION                              0x0
#define _SSP1ADD_ADD0_SIZE                                  0x1
#define _SSP1ADD_ADD0_LENGTH                                0x1
#define _SSP1ADD_ADD0_MASK                                  0x1
#define _SSP1ADD_ADD1_POSN                                  0x1
#define _SSP1ADD_ADD1_POSITION                              0x1
#define _SSP1ADD_ADD1_SIZE                                  0x1
#define _SSP1ADD_ADD1_LENGTH                                0x1
#define _SSP1ADD_ADD1_MASK                                  0x2
#define _SSP1ADD_ADD2_POSN                                  0x2
#define _SSP1ADD_ADD2_POSITION                              0x2
#define _SSP1ADD_ADD2_SIZE                                  0x1
#define _SSP1ADD_ADD2_LENGTH                                0x1
#define _SSP1ADD_ADD2_MASK                                  0x4
#define _SSP1ADD_ADD3_POSN                                  0x3
#define _SSP1ADD_ADD3_POSITION                              0x3
#define _SSP1ADD_ADD3_SIZE                                  0x1
#define _SSP1ADD_ADD3_LENGTH                                0x1
#define _SSP1ADD_ADD3_MASK                                  0x8
#define _SSP1ADD_ADD4_POSN                                  0x4
#define _SSP1ADD_ADD4_POSITION                              0x4
#define _SSP1ADD_ADD4_SIZE                                  0x1
#define _SSP1ADD_ADD4_LENGTH                                0x1
#define _SSP1ADD_ADD4_MASK                                  0x10
#define _SSP1ADD_ADD5_POSN                                  0x5
#define _SSP1ADD_ADD5_POSITION                              0x5
#define _SSP1ADD_ADD5_SIZE                                  0x1
#define _SSP1ADD_ADD5_LENGTH                                0x1
#define _SSP1ADD_ADD5_MASK                                  0x20
#define _SSP1ADD_ADD6_POSN                                  0x6
#define _SSP1ADD_ADD6_POSITION                              0x6
#define _SSP1ADD_ADD6_SIZE                                  0x1
#define _SSP1ADD_ADD6_LENGTH                                0x1
#define _SSP1ADD_ADD6_MASK                                  0x40
#define _SSP1ADD_ADD7_POSN                                  0x7
#define _SSP1ADD_ADD7_POSITION                              0x7
#define _SSP1ADD_ADD7_SIZE                                  0x1
#define _SSP1ADD_ADD7_LENGTH                                0x1
#define _SSP1ADD_ADD7_MASK                                  0x80
#define _SSP1ADD_SSP1ADD_POSN                               0x0
#define _SSP1ADD_SSP1ADD_POSITION                           0x0
#define _SSP1ADD_SSP1ADD_SIZE                               0x8
#define _SSP1ADD_SSP1ADD_LENGTH                             0x8
#define _SSP1ADD_SSP1ADD_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1ADD0               :1;
        unsigned SSP1ADD1               :1;
        unsigned SSP1ADD2               :1;
        unsigned SSP1ADD3               :1;
        unsigned SSP1ADD4               :1;
        unsigned SSP1ADD5               :1;
        unsigned SSP1ADD6               :1;
        unsigned SSP1ADD7               :1;
    };
    struct {
        unsigned ADD                    :8;
    };
    struct {
        unsigned ADD0                   :1;
        unsigned ADD1                   :1;
        unsigned ADD2                   :1;
        unsigned ADD3                   :1;
        unsigned ADD4                   :1;
        unsigned ADD5                   :1;
        unsigned ADD6                   :1;
        unsigned ADD7                   :1;
    };
    struct {
        unsigned SSP1ADD                :8;
    };
} SSPADDbits_t;
extern volatile SSPADDbits_t SSPADDbits __at(0x212);
// bitfield macros
#define _SSPADD_SSP1ADD0_POSN                               0x0
#define _SSPADD_SSP1ADD0_POSITION                           0x0
#define _SSPADD_SSP1ADD0_SIZE                               0x1
#define _SSPADD_SSP1ADD0_LENGTH                             0x1
#define _SSPADD_SSP1ADD0_MASK                               0x1
#define _SSPADD_SSP1ADD1_POSN                               0x1
#define _SSPADD_SSP1ADD1_POSITION                           0x1
#define _SSPADD_SSP1ADD1_SIZE                               0x1
#define _SSPADD_SSP1ADD1_LENGTH                             0x1
#define _SSPADD_SSP1ADD1_MASK                               0x2
#define _SSPADD_SSP1ADD2_POSN                               0x2
#define _SSPADD_SSP1ADD2_POSITION                           0x2
#define _SSPADD_SSP1ADD2_SIZE                               0x1
#define _SSPADD_SSP1ADD2_LENGTH                             0x1
#define _SSPADD_SSP1ADD2_MASK                               0x4
#define _SSPADD_SSP1ADD3_POSN                               0x3
#define _SSPADD_SSP1ADD3_POSITION                           0x3
#define _SSPADD_SSP1ADD3_SIZE                               0x1
#define _SSPADD_SSP1ADD3_LENGTH                             0x1
#define _SSPADD_SSP1ADD3_MASK                               0x8
#define _SSPADD_SSP1ADD4_POSN                               0x4
#define _SSPADD_SSP1ADD4_POSITION                           0x4
#define _SSPADD_SSP1ADD4_SIZE                               0x1
#define _SSPADD_SSP1ADD4_LENGTH                             0x1
#define _SSPADD_SSP1ADD4_MASK                               0x10
#define _SSPADD_SSP1ADD5_POSN                               0x5
#define _SSPADD_SSP1ADD5_POSITION                           0x5
#define _SSPADD_SSP1ADD5_SIZE                               0x1
#define _SSPADD_SSP1ADD5_LENGTH                             0x1
#define _SSPADD_SSP1ADD5_MASK                               0x20
#define _SSPADD_SSP1ADD6_POSN                               0x6
#define _SSPADD_SSP1ADD6_POSITION                           0x6
#define _SSPADD_SSP1ADD6_SIZE                               0x1
#define _SSPADD_SSP1ADD6_LENGTH                             0x1
#define _SSPADD_SSP1ADD6_MASK                               0x40
#define _SSPADD_SSP1ADD7_POSN                               0x7
#define _SSPADD_SSP1ADD7_POSITION                           0x7
#define _SSPADD_SSP1ADD7_SIZE                               0x1
#define _SSPADD_SSP1ADD7_LENGTH                             0x1
#define _SSPADD_SSP1ADD7_MASK                               0x80
#define _SSPADD_ADD_POSN                                    0x0
#define _SSPADD_ADD_POSITION                                0x0
#define _SSPADD_ADD_SIZE                                    0x8
#define _SSPADD_ADD_LENGTH                                  0x8
#define _SSPADD_ADD_MASK                                    0xFF
#define _SSPADD_ADD0_POSN                                   0x0
#define _SSPADD_ADD0_POSITION                               0x0
#define _SSPADD_ADD0_SIZE                                   0x1
#define _SSPADD_ADD0_LENGTH                                 0x1
#define _SSPADD_ADD0_MASK                                   0x1
#define _SSPADD_ADD1_POSN                                   0x1
#define _SSPADD_ADD1_POSITION                               0x1
#define _SSPADD_ADD1_SIZE                                   0x1
#define _SSPADD_ADD1_LENGTH                                 0x1
#define _SSPADD_ADD1_MASK                                   0x2
#define _SSPADD_ADD2_POSN                                   0x2
#define _SSPADD_ADD2_POSITION                               0x2
#define _SSPADD_ADD2_SIZE                                   0x1
#define _SSPADD_ADD2_LENGTH                                 0x1
#define _SSPADD_ADD2_MASK                                   0x4
#define _SSPADD_ADD3_POSN                                   0x3
#define _SSPADD_ADD3_POSITION                               0x3
#define _SSPADD_ADD3_SIZE                                   0x1
#define _SSPADD_ADD3_LENGTH                                 0x1
#define _SSPADD_ADD3_MASK                                   0x8
#define _SSPADD_ADD4_POSN                                   0x4
#define _SSPADD_ADD4_POSITION                               0x4
#define _SSPADD_ADD4_SIZE                                   0x1
#define _SSPADD_ADD4_LENGTH                                 0x1
#define _SSPADD_ADD4_MASK                                   0x10
#define _SSPADD_ADD5_POSN                                   0x5
#define _SSPADD_ADD5_POSITION                               0x5
#define _SSPADD_ADD5_SIZE                                   0x1
#define _SSPADD_ADD5_LENGTH                                 0x1
#define _SSPADD_ADD5_MASK                                   0x20
#define _SSPADD_ADD6_POSN                                   0x6
#define _SSPADD_ADD6_POSITION                               0x6
#define _SSPADD_ADD6_SIZE                                   0x1
#define _SSPADD_ADD6_LENGTH                                 0x1
#define _SSPADD_ADD6_MASK                                   0x40
#define _SSPADD_ADD7_POSN                                   0x7
#define _SSPADD_ADD7_POSITION                               0x7
#define _SSPADD_ADD7_SIZE                                   0x1
#define _SSPADD_ADD7_LENGTH                                 0x1
#define _SSPADD_ADD7_MASK                                   0x80
#define _SSPADD_SSP1ADD_POSN                                0x0
#define _SSPADD_SSP1ADD_POSITION                            0x0
#define _SSPADD_SSP1ADD_SIZE                                0x8
#define _SSPADD_SSP1ADD_LENGTH                              0x8
#define _SSPADD_SSP1ADD_MASK                                0xFF

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x213);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 0213h");
#endif
// aliases
extern volatile unsigned char           SSPMSK              __at(0x213);
#ifndef _LIB_BUILD
asm("SSPMSK equ 0213h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1MSK0               :1;
        unsigned SSP1MSK1               :1;
        unsigned SSP1MSK2               :1;
        unsigned SSP1MSK3               :1;
        unsigned SSP1MSK4               :1;
        unsigned SSP1MSK5               :1;
        unsigned SSP1MSK6               :1;
        unsigned SSP1MSK7               :1;
    };
    struct {
        unsigned MSK                    :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned SSP1MSK                :8;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x213);
// bitfield macros
#define _SSP1MSK_SSP1MSK0_POSN                              0x0
#define _SSP1MSK_SSP1MSK0_POSITION                          0x0
#define _SSP1MSK_SSP1MSK0_SIZE                              0x1
#define _SSP1MSK_SSP1MSK0_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK0_MASK                              0x1
#define _SSP1MSK_SSP1MSK1_POSN                              0x1
#define _SSP1MSK_SSP1MSK1_POSITION                          0x1
#define _SSP1MSK_SSP1MSK1_SIZE                              0x1
#define _SSP1MSK_SSP1MSK1_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK1_MASK                              0x2
#define _SSP1MSK_SSP1MSK2_POSN                              0x2
#define _SSP1MSK_SSP1MSK2_POSITION                          0x2
#define _SSP1MSK_SSP1MSK2_SIZE                              0x1
#define _SSP1MSK_SSP1MSK2_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK2_MASK                              0x4
#define _SSP1MSK_SSP1MSK3_POSN                              0x3
#define _SSP1MSK_SSP1MSK3_POSITION                          0x3
#define _SSP1MSK_SSP1MSK3_SIZE                              0x1
#define _SSP1MSK_SSP1MSK3_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK3_MASK                              0x8
#define _SSP1MSK_SSP1MSK4_POSN                              0x4
#define _SSP1MSK_SSP1MSK4_POSITION                          0x4
#define _SSP1MSK_SSP1MSK4_SIZE                              0x1
#define _SSP1MSK_SSP1MSK4_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK4_MASK                              0x10
#define _SSP1MSK_SSP1MSK5_POSN                              0x5
#define _SSP1MSK_SSP1MSK5_POSITION                          0x5
#define _SSP1MSK_SSP1MSK5_SIZE                              0x1
#define _SSP1MSK_SSP1MSK5_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK5_MASK                              0x20
#define _SSP1MSK_SSP1MSK6_POSN                              0x6
#define _SSP1MSK_SSP1MSK6_POSITION                          0x6
#define _SSP1MSK_SSP1MSK6_SIZE                              0x1
#define _SSP1MSK_SSP1MSK6_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK6_MASK                              0x40
#define _SSP1MSK_SSP1MSK7_POSN                              0x7
#define _SSP1MSK_SSP1MSK7_POSITION                          0x7
#define _SSP1MSK_SSP1MSK7_SIZE                              0x1
#define _SSP1MSK_SSP1MSK7_LENGTH                            0x1
#define _SSP1MSK_SSP1MSK7_MASK                              0x80
#define _SSP1MSK_MSK_POSN                                   0x0
#define _SSP1MSK_MSK_POSITION                               0x0
#define _SSP1MSK_MSK_SIZE                                   0x8
#define _SSP1MSK_MSK_LENGTH                                 0x8
#define _SSP1MSK_MSK_MASK                                   0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80
#define _SSP1MSK_SSP1MSK_POSN                               0x0
#define _SSP1MSK_SSP1MSK_POSITION                           0x0
#define _SSP1MSK_SSP1MSK_SIZE                               0x8
#define _SSP1MSK_SSP1MSK_LENGTH                             0x8
#define _SSP1MSK_SSP1MSK_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSP1MSK0               :1;
        unsigned SSP1MSK1               :1;
        unsigned SSP1MSK2               :1;
        unsigned SSP1MSK3               :1;
        unsigned SSP1MSK4               :1;
        unsigned SSP1MSK5               :1;
        unsigned SSP1MSK6               :1;
        unsigned SSP1MSK7               :1;
    };
    struct {
        unsigned MSK                    :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned SSP1MSK                :8;
    };
} SSPMSKbits_t;
extern volatile SSPMSKbits_t SSPMSKbits __at(0x213);
// bitfield macros
#define _SSPMSK_SSP1MSK0_POSN                               0x0
#define _SSPMSK_SSP1MSK0_POSITION                           0x0
#define _SSPMSK_SSP1MSK0_SIZE                               0x1
#define _SSPMSK_SSP1MSK0_LENGTH                             0x1
#define _SSPMSK_SSP1MSK0_MASK                               0x1
#define _SSPMSK_SSP1MSK1_POSN                               0x1
#define _SSPMSK_SSP1MSK1_POSITION                           0x1
#define _SSPMSK_SSP1MSK1_SIZE                               0x1
#define _SSPMSK_SSP1MSK1_LENGTH                             0x1
#define _SSPMSK_SSP1MSK1_MASK                               0x2
#define _SSPMSK_SSP1MSK2_POSN                               0x2
#define _SSPMSK_SSP1MSK2_POSITION                           0x2
#define _SSPMSK_SSP1MSK2_SIZE                               0x1
#define _SSPMSK_SSP1MSK2_LENGTH                             0x1
#define _SSPMSK_SSP1MSK2_MASK                               0x4
#define _SSPMSK_SSP1MSK3_POSN                               0x3
#define _SSPMSK_SSP1MSK3_POSITION                           0x3
#define _SSPMSK_SSP1MSK3_SIZE                               0x1
#define _SSPMSK_SSP1MSK3_LENGTH                             0x1
#define _SSPMSK_SSP1MSK3_MASK                               0x8
#define _SSPMSK_SSP1MSK4_POSN                               0x4
#define _SSPMSK_SSP1MSK4_POSITION                           0x4
#define _SSPMSK_SSP1MSK4_SIZE                               0x1
#define _SSPMSK_SSP1MSK4_LENGTH                             0x1
#define _SSPMSK_SSP1MSK4_MASK                               0x10
#define _SSPMSK_SSP1MSK5_POSN                               0x5
#define _SSPMSK_SSP1MSK5_POSITION                           0x5
#define _SSPMSK_SSP1MSK5_SIZE                               0x1
#define _SSPMSK_SSP1MSK5_LENGTH                             0x1
#define _SSPMSK_SSP1MSK5_MASK                               0x20
#define _SSPMSK_SSP1MSK6_POSN                               0x6
#define _SSPMSK_SSP1MSK6_POSITION                           0x6
#define _SSPMSK_SSP1MSK6_SIZE                               0x1
#define _SSPMSK_SSP1MSK6_LENGTH                             0x1
#define _SSPMSK_SSP1MSK6_MASK                               0x40
#define _SSPMSK_SSP1MSK7_POSN                               0x7
#define _SSPMSK_SSP1MSK7_POSITION                           0x7
#define _SSPMSK_SSP1MSK7_SIZE                               0x1
#define _SSPMSK_SSP1MSK7_LENGTH                             0x1
#define _SSPMSK_SSP1MSK7_MASK                               0x80
#define _SSPMSK_MSK_POSN                                    0x0
#define _SSPMSK_MSK_POSITION                                0x0
#define _SSPMSK_MSK_SIZE                                    0x8
#define _SSPMSK_MSK_LENGTH                                  0x8
#define _SSPMSK_MSK_MASK                                    0xFF
#define _SSPMSK_MSK0_POSN                                   0x0
#define _SSPMSK_MSK0_POSITION                               0x0
#define _SSPMSK_MSK0_SIZE                                   0x1
#define _SSPMSK_MSK0_LENGTH                                 0x1
#define _SSPMSK_MSK0_MASK                                   0x1
#define _SSPMSK_MSK1_POSN                                   0x1
#define _SSPMSK_MSK1_POSITION                               0x1
#define _SSPMSK_MSK1_SIZE                                   0x1
#define _SSPMSK_MSK1_LENGTH                                 0x1
#define _SSPMSK_MSK1_MASK                                   0x2
#define _SSPMSK_MSK2_POSN                                   0x2
#define _SSPMSK_MSK2_POSITION                               0x2
#define _SSPMSK_MSK2_SIZE                                   0x1
#define _SSPMSK_MSK2_LENGTH                                 0x1
#define _SSPMSK_MSK2_MASK                                   0x4
#define _SSPMSK_MSK3_POSN                                   0x3
#define _SSPMSK_MSK3_POSITION                               0x3
#define _SSPMSK_MSK3_SIZE                                   0x1
#define _SSPMSK_MSK3_LENGTH                                 0x1
#define _SSPMSK_MSK3_MASK                                   0x8
#define _SSPMSK_MSK4_POSN                                   0x4
#define _SSPMSK_MSK4_POSITION                               0x4
#define _SSPMSK_MSK4_SIZE                                   0x1
#define _SSPMSK_MSK4_LENGTH                                 0x1
#define _SSPMSK_MSK4_MASK                                   0x10
#define _SSPMSK_MSK5_POSN                                   0x5
#define _SSPMSK_MSK5_POSITION                               0x5
#define _SSPMSK_MSK5_SIZE                                   0x1
#define _SSPMSK_MSK5_LENGTH                                 0x1
#define _SSPMSK_MSK5_MASK                                   0x20
#define _SSPMSK_MSK6_POSN                                   0x6
#define _SSPMSK_MSK6_POSITION                               0x6
#define _SSPMSK_MSK6_SIZE                                   0x1
#define _SSPMSK_MSK6_LENGTH                                 0x1
#define _SSPMSK_MSK6_MASK                                   0x40
#define _SSPMSK_MSK7_POSN                                   0x7
#define _SSPMSK_MSK7_POSITION                               0x7
#define _SSPMSK_MSK7_SIZE                                   0x1
#define _SSPMSK_MSK7_LENGTH                                 0x1
#define _SSPMSK_MSK7_MASK                                   0x80
#define _SSPMSK_SSP1MSK_POSN                                0x0
#define _SSPMSK_SSP1MSK_POSITION                            0x0
#define _SSPMSK_SSP1MSK_SIZE                                0x8
#define _SSPMSK_SSP1MSK_LENGTH                              0x8
#define _SSPMSK_SSP1MSK_MASK                                0xFF

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x214);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 0214h");
#endif
// aliases
extern volatile unsigned char           SSPSTAT             __at(0x214);
#ifndef _LIB_BUILD
asm("SSPSTAT equ 0214h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x214);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits __at(0x214);
// bitfield macros
#define _SSPSTAT_BF_POSN                                    0x0
#define _SSPSTAT_BF_POSITION                                0x0
#define _SSPSTAT_BF_SIZE                                    0x1
#define _SSPSTAT_BF_LENGTH                                  0x1
#define _SSPSTAT_BF_MASK                                    0x1
#define _SSPSTAT_UA_POSN                                    0x1
#define _SSPSTAT_UA_POSITION                                0x1
#define _SSPSTAT_UA_SIZE                                    0x1
#define _SSPSTAT_UA_LENGTH                                  0x1
#define _SSPSTAT_UA_MASK                                    0x2
#define _SSPSTAT_R_nW_POSN                                  0x2
#define _SSPSTAT_R_nW_POSITION                              0x2
#define _SSPSTAT_R_nW_SIZE                                  0x1
#define _SSPSTAT_R_nW_LENGTH                                0x1
#define _SSPSTAT_R_nW_MASK                                  0x4
#define _SSPSTAT_S_POSN                                     0x3
#define _SSPSTAT_S_POSITION                                 0x3
#define _SSPSTAT_S_SIZE                                     0x1
#define _SSPSTAT_S_LENGTH                                   0x1
#define _SSPSTAT_S_MASK                                     0x8
#define _SSPSTAT_P_POSN                                     0x4
#define _SSPSTAT_P_POSITION                                 0x4
#define _SSPSTAT_P_SIZE                                     0x1
#define _SSPSTAT_P_LENGTH                                   0x1
#define _SSPSTAT_P_MASK                                     0x10
#define _SSPSTAT_D_nA_POSN                                  0x5
#define _SSPSTAT_D_nA_POSITION                              0x5
#define _SSPSTAT_D_nA_SIZE                                  0x1
#define _SSPSTAT_D_nA_LENGTH                                0x1
#define _SSPSTAT_D_nA_MASK                                  0x20
#define _SSPSTAT_CKE_POSN                                   0x6
#define _SSPSTAT_CKE_POSITION                               0x6
#define _SSPSTAT_CKE_SIZE                                   0x1
#define _SSPSTAT_CKE_LENGTH                                 0x1
#define _SSPSTAT_CKE_MASK                                   0x40
#define _SSPSTAT_SMP_POSN                                   0x7
#define _SSPSTAT_SMP_POSITION                               0x7
#define _SSPSTAT_SMP_SIZE                                   0x1
#define _SSPSTAT_SMP_LENGTH                                 0x1
#define _SSPSTAT_SMP_MASK                                   0x80

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x215);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0215h");
#endif
// aliases
extern volatile unsigned char           SSPCON              __at(0x215);
#ifndef _LIB_BUILD
asm("SSPCON equ 0215h");
#endif
extern volatile unsigned char           SSPCON1             __at(0x215);
#ifndef _LIB_BUILD
asm("SSPCON1 equ 0215h");
#endif
extern volatile unsigned char           SSP1CON             __at(0x215);
#ifndef _LIB_BUILD
asm("SSP1CON equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x215);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits __at(0x215);
// bitfield macros
#define _SSPCON_SSPM_POSN                                   0x0
#define _SSPCON_SSPM_POSITION                               0x0
#define _SSPCON_SSPM_SIZE                                   0x4
#define _SSPCON_SSPM_LENGTH                                 0x4
#define _SSPCON_SSPM_MASK                                   0xF
#define _SSPCON_CKP_POSN                                    0x4
#define _SSPCON_CKP_POSITION                                0x4
#define _SSPCON_CKP_SIZE                                    0x1
#define _SSPCON_CKP_LENGTH                                  0x1
#define _SSPCON_CKP_MASK                                    0x10
#define _SSPCON_SSPEN_POSN                                  0x5
#define _SSPCON_SSPEN_POSITION                              0x5
#define _SSPCON_SSPEN_SIZE                                  0x1
#define _SSPCON_SSPEN_LENGTH                                0x1
#define _SSPCON_SSPEN_MASK                                  0x20
#define _SSPCON_SSPOV_POSN                                  0x6
#define _SSPCON_SSPOV_POSITION                              0x6
#define _SSPCON_SSPOV_SIZE                                  0x1
#define _SSPCON_SSPOV_LENGTH                                0x1
#define _SSPCON_SSPOV_MASK                                  0x40
#define _SSPCON_WCOL_POSN                                   0x7
#define _SSPCON_WCOL_POSITION                               0x7
#define _SSPCON_WCOL_SIZE                                   0x1
#define _SSPCON_WCOL_LENGTH                                 0x1
#define _SSPCON_WCOL_MASK                                   0x80
#define _SSPCON_SSPM0_POSN                                  0x0
#define _SSPCON_SSPM0_POSITION                              0x0
#define _SSPCON_SSPM0_SIZE                                  0x1
#define _SSPCON_SSPM0_LENGTH                                0x1
#define _SSPCON_SSPM0_MASK                                  0x1
#define _SSPCON_SSPM1_POSN                                  0x1
#define _SSPCON_SSPM1_POSITION                              0x1
#define _SSPCON_SSPM1_SIZE                                  0x1
#define _SSPCON_SSPM1_LENGTH                                0x1
#define _SSPCON_SSPM1_MASK                                  0x2
#define _SSPCON_SSPM2_POSN                                  0x2
#define _SSPCON_SSPM2_POSITION                              0x2
#define _SSPCON_SSPM2_SIZE                                  0x1
#define _SSPCON_SSPM2_LENGTH                                0x1
#define _SSPCON_SSPM2_MASK                                  0x4
#define _SSPCON_SSPM3_POSN                                  0x3
#define _SSPCON_SSPM3_POSITION                              0x3
#define _SSPCON_SSPM3_SIZE                                  0x1
#define _SSPCON_SSPM3_LENGTH                                0x1
#define _SSPCON_SSPM3_MASK                                  0x8
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSPCON1bits_t;
extern volatile SSPCON1bits_t SSPCON1bits __at(0x215);
// bitfield macros
#define _SSPCON1_SSPM_POSN                                  0x0
#define _SSPCON1_SSPM_POSITION                              0x0
#define _SSPCON1_SSPM_SIZE                                  0x4
#define _SSPCON1_SSPM_LENGTH                                0x4
#define _SSPCON1_SSPM_MASK                                  0xF
#define _SSPCON1_CKP_POSN                                   0x4
#define _SSPCON1_CKP_POSITION                               0x4
#define _SSPCON1_CKP_SIZE                                   0x1
#define _SSPCON1_CKP_LENGTH                                 0x1
#define _SSPCON1_CKP_MASK                                   0x10
#define _SSPCON1_SSPEN_POSN                                 0x5
#define _SSPCON1_SSPEN_POSITION                             0x5
#define _SSPCON1_SSPEN_SIZE                                 0x1
#define _SSPCON1_SSPEN_LENGTH                               0x1
#define _SSPCON1_SSPEN_MASK                                 0x20
#define _SSPCON1_SSPOV_POSN                                 0x6
#define _SSPCON1_SSPOV_POSITION                             0x6
#define _SSPCON1_SSPOV_SIZE                                 0x1
#define _SSPCON1_SSPOV_LENGTH                               0x1
#define _SSPCON1_SSPOV_MASK                                 0x40
#define _SSPCON1_WCOL_POSN                                  0x7
#define _SSPCON1_WCOL_POSITION                              0x7
#define _SSPCON1_WCOL_SIZE                                  0x1
#define _SSPCON1_WCOL_LENGTH                                0x1
#define _SSPCON1_WCOL_MASK                                  0x80
#define _SSPCON1_SSPM0_POSN                                 0x0
#define _SSPCON1_SSPM0_POSITION                             0x0
#define _SSPCON1_SSPM0_SIZE                                 0x1
#define _SSPCON1_SSPM0_LENGTH                               0x1
#define _SSPCON1_SSPM0_MASK                                 0x1
#define _SSPCON1_SSPM1_POSN                                 0x1
#define _SSPCON1_SSPM1_POSITION                             0x1
#define _SSPCON1_SSPM1_SIZE                                 0x1
#define _SSPCON1_SSPM1_LENGTH                               0x1
#define _SSPCON1_SSPM1_MASK                                 0x2
#define _SSPCON1_SSPM2_POSN                                 0x2
#define _SSPCON1_SSPM2_POSITION                             0x2
#define _SSPCON1_SSPM2_SIZE                                 0x1
#define _SSPCON1_SSPM2_LENGTH                               0x1
#define _SSPCON1_SSPM2_MASK                                 0x4
#define _SSPCON1_SSPM3_POSN                                 0x3
#define _SSPCON1_SSPM3_POSITION                             0x3
#define _SSPCON1_SSPM3_SIZE                                 0x1
#define _SSPCON1_SSPM3_LENGTH                               0x1
#define _SSPCON1_SSPM3_MASK                                 0x8
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
} SSP1CONbits_t;
extern volatile SSP1CONbits_t SSP1CONbits __at(0x215);
// bitfield macros
#define _SSP1CON_SSPM_POSN                                  0x0
#define _SSP1CON_SSPM_POSITION                              0x0
#define _SSP1CON_SSPM_SIZE                                  0x4
#define _SSP1CON_SSPM_LENGTH                                0x4
#define _SSP1CON_SSPM_MASK                                  0xF
#define _SSP1CON_CKP_POSN                                   0x4
#define _SSP1CON_CKP_POSITION                               0x4
#define _SSP1CON_CKP_SIZE                                   0x1
#define _SSP1CON_CKP_LENGTH                                 0x1
#define _SSP1CON_CKP_MASK                                   0x10
#define _SSP1CON_SSPEN_POSN                                 0x5
#define _SSP1CON_SSPEN_POSITION                             0x5
#define _SSP1CON_SSPEN_SIZE                                 0x1
#define _SSP1CON_SSPEN_LENGTH                               0x1
#define _SSP1CON_SSPEN_MASK                                 0x20
#define _SSP1CON_SSPOV_POSN                                 0x6
#define _SSP1CON_SSPOV_POSITION                             0x6
#define _SSP1CON_SSPOV_SIZE                                 0x1
#define _SSP1CON_SSPOV_LENGTH                               0x1
#define _SSP1CON_SSPOV_MASK                                 0x40
#define _SSP1CON_WCOL_POSN                                  0x7
#define _SSP1CON_WCOL_POSITION                              0x7
#define _SSP1CON_WCOL_SIZE                                  0x1
#define _SSP1CON_WCOL_LENGTH                                0x1
#define _SSP1CON_WCOL_MASK                                  0x80
#define _SSP1CON_SSPM0_POSN                                 0x0
#define _SSP1CON_SSPM0_POSITION                             0x0
#define _SSP1CON_SSPM0_SIZE                                 0x1
#define _SSP1CON_SSPM0_LENGTH                               0x1
#define _SSP1CON_SSPM0_MASK                                 0x1
#define _SSP1CON_SSPM1_POSN                                 0x1
#define _SSP1CON_SSPM1_POSITION                             0x1
#define _SSP1CON_SSPM1_SIZE                                 0x1
#define _SSP1CON_SSPM1_LENGTH                               0x1
#define _SSP1CON_SSPM1_MASK                                 0x2
#define _SSP1CON_SSPM2_POSN                                 0x2
#define _SSP1CON_SSPM2_POSITION                             0x2
#define _SSP1CON_SSPM2_SIZE                                 0x1
#define _SSP1CON_SSPM2_LENGTH                               0x1
#define _SSP1CON_SSPM2_MASK                                 0x4
#define _SSP1CON_SSPM3_POSN                                 0x3
#define _SSP1CON_SSPM3_POSITION                             0x3
#define _SSP1CON_SSPM3_SIZE                                 0x1
#define _SSP1CON_SSPM3_LENGTH                               0x1
#define _SSP1CON_SSPM3_MASK                                 0x8

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x216);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0216h");
#endif
// aliases
extern volatile unsigned char           SSPCON2             __at(0x216);
#ifndef _LIB_BUILD
asm("SSPCON2 equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x216);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits __at(0x216);
// bitfield macros
#define _SSPCON2_SEN_POSN                                   0x0
#define _SSPCON2_SEN_POSITION                               0x0
#define _SSPCON2_SEN_SIZE                                   0x1
#define _SSPCON2_SEN_LENGTH                                 0x1
#define _SSPCON2_SEN_MASK                                   0x1
#define _SSPCON2_RSEN_POSN                                  0x1
#define _SSPCON2_RSEN_POSITION                              0x1
#define _SSPCON2_RSEN_SIZE                                  0x1
#define _SSPCON2_RSEN_LENGTH                                0x1
#define _SSPCON2_RSEN_MASK                                  0x2
#define _SSPCON2_PEN_POSN                                   0x2
#define _SSPCON2_PEN_POSITION                               0x2
#define _SSPCON2_PEN_SIZE                                   0x1
#define _SSPCON2_PEN_LENGTH                                 0x1
#define _SSPCON2_PEN_MASK                                   0x4
#define _SSPCON2_RCEN_POSN                                  0x3
#define _SSPCON2_RCEN_POSITION                              0x3
#define _SSPCON2_RCEN_SIZE                                  0x1
#define _SSPCON2_RCEN_LENGTH                                0x1
#define _SSPCON2_RCEN_MASK                                  0x8
#define _SSPCON2_ACKEN_POSN                                 0x4
#define _SSPCON2_ACKEN_POSITION                             0x4
#define _SSPCON2_ACKEN_SIZE                                 0x1
#define _SSPCON2_ACKEN_LENGTH                               0x1
#define _SSPCON2_ACKEN_MASK                                 0x10
#define _SSPCON2_ACKDT_POSN                                 0x5
#define _SSPCON2_ACKDT_POSITION                             0x5
#define _SSPCON2_ACKDT_SIZE                                 0x1
#define _SSPCON2_ACKDT_LENGTH                               0x1
#define _SSPCON2_ACKDT_MASK                                 0x20
#define _SSPCON2_ACKSTAT_POSN                               0x6
#define _SSPCON2_ACKSTAT_POSITION                           0x6
#define _SSPCON2_ACKSTAT_SIZE                               0x1
#define _SSPCON2_ACKSTAT_LENGTH                             0x1
#define _SSPCON2_ACKSTAT_MASK                               0x40
#define _SSPCON2_GCEN_POSN                                  0x7
#define _SSPCON2_GCEN_POSITION                              0x7
#define _SSPCON2_GCEN_SIZE                                  0x1
#define _SSPCON2_GCEN_LENGTH                                0x1
#define _SSPCON2_GCEN_MASK                                  0x80

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x217);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0217h");
#endif
// aliases
extern volatile unsigned char           SSPCON3             __at(0x217);
#ifndef _LIB_BUILD
asm("SSPCON3 equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x217);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSPCON3bits_t;
extern volatile SSPCON3bits_t SSPCON3bits __at(0x217);
// bitfield macros
#define _SSPCON3_DHEN_POSN                                  0x0
#define _SSPCON3_DHEN_POSITION                              0x0
#define _SSPCON3_DHEN_SIZE                                  0x1
#define _SSPCON3_DHEN_LENGTH                                0x1
#define _SSPCON3_DHEN_MASK                                  0x1
#define _SSPCON3_AHEN_POSN                                  0x1
#define _SSPCON3_AHEN_POSITION                              0x1
#define _SSPCON3_AHEN_SIZE                                  0x1
#define _SSPCON3_AHEN_LENGTH                                0x1
#define _SSPCON3_AHEN_MASK                                  0x2
#define _SSPCON3_SBCDE_POSN                                 0x2
#define _SSPCON3_SBCDE_POSITION                             0x2
#define _SSPCON3_SBCDE_SIZE                                 0x1
#define _SSPCON3_SBCDE_LENGTH                               0x1
#define _SSPCON3_SBCDE_MASK                                 0x4
#define _SSPCON3_SDAHT_POSN                                 0x3
#define _SSPCON3_SDAHT_POSITION                             0x3
#define _SSPCON3_SDAHT_SIZE                                 0x1
#define _SSPCON3_SDAHT_LENGTH                               0x1
#define _SSPCON3_SDAHT_MASK                                 0x8
#define _SSPCON3_BOEN_POSN                                  0x4
#define _SSPCON3_BOEN_POSITION                              0x4
#define _SSPCON3_BOEN_SIZE                                  0x1
#define _SSPCON3_BOEN_LENGTH                                0x1
#define _SSPCON3_BOEN_MASK                                  0x10
#define _SSPCON3_SCIE_POSN                                  0x5
#define _SSPCON3_SCIE_POSITION                              0x5
#define _SSPCON3_SCIE_SIZE                                  0x1
#define _SSPCON3_SCIE_LENGTH                                0x1
#define _SSPCON3_SCIE_MASK                                  0x20
#define _SSPCON3_PCIE_POSN                                  0x6
#define _SSPCON3_PCIE_POSITION                              0x6
#define _SSPCON3_PCIE_SIZE                                  0x1
#define _SSPCON3_PCIE_LENGTH                                0x1
#define _SSPCON3_PCIE_MASK                                  0x40
#define _SSPCON3_ACKTIM_POSN                                0x7
#define _SSPCON3_ACKTIM_POSITION                            0x7
#define _SSPCON3_ACKTIM_SIZE                                0x1
#define _SSPCON3_ACKTIM_LENGTH                              0x1
#define _SSPCON3_ACKTIM_MASK                                0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x28C);
#ifndef _LIB_BUILD
asm("ODCONA equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODA0                   :1;
        unsigned ODA1                   :1;
        unsigned ODA2                   :1;
        unsigned                        :1;
        unsigned ODA4                   :1;
        unsigned ODA5                   :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x28C);
// bitfield macros
#define _ODCONA_ODA0_POSN                                   0x0
#define _ODCONA_ODA0_POSITION                               0x0
#define _ODCONA_ODA0_SIZE                                   0x1
#define _ODCONA_ODA0_LENGTH                                 0x1
#define _ODCONA_ODA0_MASK                                   0x1
#define _ODCONA_ODA1_POSN                                   0x1
#define _ODCONA_ODA1_POSITION                               0x1
#define _ODCONA_ODA1_SIZE                                   0x1
#define _ODCONA_ODA1_LENGTH                                 0x1
#define _ODCONA_ODA1_MASK                                   0x2
#define _ODCONA_ODA2_POSN                                   0x2
#define _ODCONA_ODA2_POSITION                               0x2
#define _ODCONA_ODA2_SIZE                                   0x1
#define _ODCONA_ODA2_LENGTH                                 0x1
#define _ODCONA_ODA2_MASK                                   0x4
#define _ODCONA_ODA4_POSN                                   0x4
#define _ODCONA_ODA4_POSITION                               0x4
#define _ODCONA_ODA4_SIZE                                   0x1
#define _ODCONA_ODA4_LENGTH                                 0x1
#define _ODCONA_ODA4_MASK                                   0x10
#define _ODCONA_ODA5_POSN                                   0x5
#define _ODCONA_ODA5_POSITION                               0x5
#define _ODCONA_ODA5_SIZE                                   0x1
#define _ODCONA_ODA5_LENGTH                                 0x1
#define _ODCONA_ODA5_MASK                                   0x20

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x28E);
#ifndef _LIB_BUILD
asm("ODCONC equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODC0                   :1;
        unsigned ODC1                   :1;
        unsigned ODC2                   :1;
        unsigned ODC3                   :1;
        unsigned ODC4                   :1;
        unsigned ODC5                   :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x28E);
// bitfield macros
#define _ODCONC_ODC0_POSN                                   0x0
#define _ODCONC_ODC0_POSITION                               0x0
#define _ODCONC_ODC0_SIZE                                   0x1
#define _ODCONC_ODC0_LENGTH                                 0x1
#define _ODCONC_ODC0_MASK                                   0x1
#define _ODCONC_ODC1_POSN                                   0x1
#define _ODCONC_ODC1_POSITION                               0x1
#define _ODCONC_ODC1_SIZE                                   0x1
#define _ODCONC_ODC1_LENGTH                                 0x1
#define _ODCONC_ODC1_MASK                                   0x2
#define _ODCONC_ODC2_POSN                                   0x2
#define _ODCONC_ODC2_POSITION                               0x2
#define _ODCONC_ODC2_SIZE                                   0x1
#define _ODCONC_ODC2_LENGTH                                 0x1
#define _ODCONC_ODC2_MASK                                   0x4
#define _ODCONC_ODC3_POSN                                   0x3
#define _ODCONC_ODC3_POSITION                               0x3
#define _ODCONC_ODC3_SIZE                                   0x1
#define _ODCONC_ODC3_LENGTH                                 0x1
#define _ODCONC_ODC3_MASK                                   0x8
#define _ODCONC_ODC4_POSN                                   0x4
#define _ODCONC_ODC4_POSITION                               0x4
#define _ODCONC_ODC4_SIZE                                   0x1
#define _ODCONC_ODC4_LENGTH                                 0x1
#define _ODCONC_ODC4_MASK                                   0x10
#define _ODCONC_ODC5_POSN                                   0x5
#define _ODCONC_ODC5_POSITION                               0x5
#define _ODCONC_ODC5_SIZE                                   0x1
#define _ODCONC_ODC5_LENGTH                                 0x1
#define _ODCONC_ODC5_MASK                                   0x20

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x291);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0291h");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x291);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x291);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x292);
#ifndef _LIB_BUILD
asm("CCPR1H equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x292);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x293);
#ifndef _LIB_BUILD
asm("CCP1CON equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x293);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x294);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x294);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x298);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0298h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x298);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0298h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x298);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x299);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0299h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x299);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x29A);
#ifndef _LIB_BUILD
asm("CCP2CON equ 029Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x29A);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x29B);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 029Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x29B);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4

// Register: CCPTMRS
#define CCPTMRS CCPTMRS
extern volatile unsigned char           CCPTMRS             __at(0x29E);
#ifndef _LIB_BUILD
asm("CCPTMRS equ 029Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1TSEL               :2;
        unsigned CCP2TSEL               :2;
        unsigned P3TSEL                 :2;
        unsigned P4TSEL                 :2;
    };
    struct {
        unsigned CCP1TSEL0              :1;
        unsigned CCP1TSEL1              :1;
        unsigned CCP2TSEL0              :1;
        unsigned CCP2TSEL1              :1;
        unsigned P3TSEL0                :1;
        unsigned P3TSEL1                :1;
        unsigned P4TSEL0                :1;
        unsigned P4TSEL1                :1;
    };
} CCPTMRSbits_t;
extern volatile CCPTMRSbits_t CCPTMRSbits __at(0x29E);
// bitfield macros
#define _CCPTMRS_CCP1TSEL_POSN                              0x0
#define _CCPTMRS_CCP1TSEL_POSITION                          0x0
#define _CCPTMRS_CCP1TSEL_SIZE                              0x2
#define _CCPTMRS_CCP1TSEL_LENGTH                            0x2
#define _CCPTMRS_CCP1TSEL_MASK                              0x3
#define _CCPTMRS_CCP2TSEL_POSN                              0x2
#define _CCPTMRS_CCP2TSEL_POSITION                          0x2
#define _CCPTMRS_CCP2TSEL_SIZE                              0x2
#define _CCPTMRS_CCP2TSEL_LENGTH                            0x2
#define _CCPTMRS_CCP2TSEL_MASK                              0xC
#define _CCPTMRS_P3TSEL_POSN                                0x4
#define _CCPTMRS_P3TSEL_POSITION                            0x4
#define _CCPTMRS_P3TSEL_SIZE                                0x2
#define _CCPTMRS_P3TSEL_LENGTH                              0x2
#define _CCPTMRS_P3TSEL_MASK                                0x30
#define _CCPTMRS_P4TSEL_POSN                                0x6
#define _CCPTMRS_P4TSEL_POSITION                            0x6
#define _CCPTMRS_P4TSEL_SIZE                                0x2
#define _CCPTMRS_P4TSEL_LENGTH                              0x2
#define _CCPTMRS_P4TSEL_MASK                                0xC0
#define _CCPTMRS_CCP1TSEL0_POSN                             0x0
#define _CCPTMRS_CCP1TSEL0_POSITION                         0x0
#define _CCPTMRS_CCP1TSEL0_SIZE                             0x1
#define _CCPTMRS_CCP1TSEL0_LENGTH                           0x1
#define _CCPTMRS_CCP1TSEL0_MASK                             0x1
#define _CCPTMRS_CCP1TSEL1_POSN                             0x1
#define _CCPTMRS_CCP1TSEL1_POSITION                         0x1
#define _CCPTMRS_CCP1TSEL1_SIZE                             0x1
#define _CCPTMRS_CCP1TSEL1_LENGTH                           0x1
#define _CCPTMRS_CCP1TSEL1_MASK                             0x2
#define _CCPTMRS_CCP2TSEL0_POSN                             0x2
#define _CCPTMRS_CCP2TSEL0_POSITION                         0x2
#define _CCPTMRS_CCP2TSEL0_SIZE                             0x1
#define _CCPTMRS_CCP2TSEL0_LENGTH                           0x1
#define _CCPTMRS_CCP2TSEL0_MASK                             0x4
#define _CCPTMRS_CCP2TSEL1_POSN                             0x3
#define _CCPTMRS_CCP2TSEL1_POSITION                         0x3
#define _CCPTMRS_CCP2TSEL1_SIZE                             0x1
#define _CCPTMRS_CCP2TSEL1_LENGTH                           0x1
#define _CCPTMRS_CCP2TSEL1_MASK                             0x8
#define _CCPTMRS_P3TSEL0_POSN                               0x4
#define _CCPTMRS_P3TSEL0_POSITION                           0x4
#define _CCPTMRS_P3TSEL0_SIZE                               0x1
#define _CCPTMRS_P3TSEL0_LENGTH                             0x1
#define _CCPTMRS_P3TSEL0_MASK                               0x10
#define _CCPTMRS_P3TSEL1_POSN                               0x5
#define _CCPTMRS_P3TSEL1_POSITION                           0x5
#define _CCPTMRS_P3TSEL1_SIZE                               0x1
#define _CCPTMRS_P3TSEL1_LENGTH                             0x1
#define _CCPTMRS_P3TSEL1_MASK                               0x20
#define _CCPTMRS_P4TSEL0_POSN                               0x6
#define _CCPTMRS_P4TSEL0_POSITION                           0x6
#define _CCPTMRS_P4TSEL0_SIZE                               0x1
#define _CCPTMRS_P4TSEL0_LENGTH                             0x1
#define _CCPTMRS_P4TSEL0_MASK                               0x40
#define _CCPTMRS_P4TSEL1_POSN                               0x7
#define _CCPTMRS_P4TSEL1_POSITION                           0x7
#define _CCPTMRS_P4TSEL1_SIZE                               0x1
#define _CCPTMRS_P4TSEL1_LENGTH                             0x1
#define _CCPTMRS_P4TSEL1_MASK                               0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x30C);
#ifndef _LIB_BUILD
asm("SLRCONA equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned                        :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x30C);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x30E);
#ifndef _LIB_BUILD
asm("SLRCONC equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x30E);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x38C);
#ifndef _LIB_BUILD
asm("INLVLA equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x38C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x38E);
#ifndef _LIB_BUILD
asm("INLVLC equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x38E);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x391);
#ifndef _LIB_BUILD
asm("IOCAP equ 0391h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
    };
    struct {
        unsigned IOCAP                  :6;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x391);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP_POSN                                   0x0
#define _IOCAP_IOCAP_POSITION                               0x0
#define _IOCAP_IOCAP_SIZE                                   0x6
#define _IOCAP_IOCAP_LENGTH                                 0x6
#define _IOCAP_IOCAP_MASK                                   0x3F

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x392);
#ifndef _LIB_BUILD
asm("IOCAN equ 0392h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
    };
    struct {
        unsigned IOCAN                  :6;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x392);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN_POSN                                   0x0
#define _IOCAN_IOCAN_POSITION                               0x0
#define _IOCAN_IOCAN_SIZE                                   0x6
#define _IOCAN_IOCAN_LENGTH                                 0x6
#define _IOCAN_IOCAN_MASK                                   0x3F

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x393);
#ifndef _LIB_BUILD
asm("IOCAF equ 0393h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
    };
    struct {
        unsigned IOCAF                  :6;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x393);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF_POSN                                   0x0
#define _IOCAF_IOCAF_POSITION                               0x0
#define _IOCAF_IOCAF_SIZE                                   0x6
#define _IOCAF_IOCAF_LENGTH                                 0x6
#define _IOCAF_IOCAF_MASK                                   0x3F

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x397);
#ifndef _LIB_BUILD
asm("IOCCP equ 0397h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x397);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x398);
#ifndef _LIB_BUILD
asm("IOCCN equ 0398h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x398);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x399);
#ifndef _LIB_BUILD
asm("IOCCF equ 0399h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x399);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: HIDRVC
#define HIDRVC HIDRVC
extern volatile unsigned char           HIDRVC              __at(0x40E);
#ifndef _LIB_BUILD
asm("HIDRVC equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned HIDC4                  :1;
        unsigned HIDC5                  :1;
    };
} HIDRVCbits_t;
extern volatile HIDRVCbits_t HIDRVCbits __at(0x40E);
// bitfield macros
#define _HIDRVC_HIDC4_POSN                                  0x4
#define _HIDRVC_HIDC4_POSITION                              0x4
#define _HIDRVC_HIDC4_SIZE                                  0x1
#define _HIDRVC_HIDC4_LENGTH                                0x1
#define _HIDRVC_HIDC4_MASK                                  0x10
#define _HIDRVC_HIDC5_POSN                                  0x5
#define _HIDRVC_HIDC5_POSITION                              0x5
#define _HIDRVC_HIDC5_SIZE                                  0x1
#define _HIDRVC_HIDC5_LENGTH                                0x1
#define _HIDRVC_HIDC5_MASK                                  0x20

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x413);
#ifndef _LIB_BUILD
asm("T4TMR equ 0413h");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x413);
#ifndef _LIB_BUILD
asm("TMR4 equ 0413h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x413);
// bitfield macros
#define _T4TMR_TMR_POSN                                     0x0
#define _T4TMR_TMR_POSITION                                 0x0
#define _T4TMR_TMR_SIZE                                     0x8
#define _T4TMR_TMR_LENGTH                                   0x8
#define _T4TMR_TMR_MASK                                     0xFF
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x413);
// bitfield macros
#define _TMR4_TMR_POSN                                      0x0
#define _TMR4_TMR_POSITION                                  0x0
#define _TMR4_TMR_SIZE                                      0x8
#define _TMR4_TMR_LENGTH                                    0x8
#define _TMR4_TMR_MASK                                      0xFF
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x414);
#ifndef _LIB_BUILD
asm("T4PR equ 0414h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x414);
#ifndef _LIB_BUILD
asm("PR4 equ 0414h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T4PR                   :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x414);
// bitfield macros
#define _T4PR_PR_POSN                                       0x0
#define _T4PR_PR_POSITION                                   0x0
#define _T4PR_PR_SIZE                                       0x8
#define _T4PR_PR_LENGTH                                     0x8
#define _T4PR_PR_MASK                                       0xFF
#define _T4PR_T4PR_POSN                                     0x0
#define _T4PR_T4PR_POSITION                                 0x0
#define _T4PR_T4PR_SIZE                                     0x8
#define _T4PR_T4PR_LENGTH                                   0x8
#define _T4PR_T4PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T4PR                   :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x414);
// bitfield macros
#define _PR4_PR_POSN                                        0x0
#define _PR4_PR_POSITION                                    0x0
#define _PR4_PR_SIZE                                        0x8
#define _PR4_PR_LENGTH                                      0x8
#define _PR4_PR_MASK                                        0xFF
#define _PR4_T4PR_POSN                                      0x0
#define _PR4_T4PR_POSITION                                  0x0
#define _PR4_T4PR_SIZE                                      0x8
#define _PR4_T4PR_LENGTH                                    0x8
#define _PR4_T4PR_MASK                                      0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x415);
#ifndef _LIB_BUILD
asm("T4CON equ 0415h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x415);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x416);
#ifndef _LIB_BUILD
asm("T4HLT equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x416);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x417);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x417);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x418);
#ifndef _LIB_BUILD
asm("T4RST equ 0418h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T4RSEL                 :4;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x418);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x4
#define _T4RST_RSEL_LENGTH                                  0x4
#define _T4RST_RSEL_MASK                                    0xF
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x4
#define _T4RST_T4RSEL_LENGTH                                0x4
#define _T4RST_T4RSEL_MASK                                  0xF
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0x41A);
#ifndef _LIB_BUILD
asm("T6TMR equ 041Ah");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0x41A);
#ifndef _LIB_BUILD
asm("TMR6 equ 041Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0x41A);
// bitfield macros
#define _T6TMR_TMR_POSN                                     0x0
#define _T6TMR_TMR_POSITION                                 0x0
#define _T6TMR_TMR_SIZE                                     0x8
#define _T6TMR_TMR_LENGTH                                   0x8
#define _T6TMR_TMR_MASK                                     0xFF
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0x41A);
// bitfield macros
#define _TMR6_TMR_POSN                                      0x0
#define _TMR6_TMR_POSITION                                  0x0
#define _TMR6_TMR_SIZE                                      0x8
#define _TMR6_TMR_LENGTH                                    0x8
#define _TMR6_TMR_MASK                                      0xFF
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0x41B);
#ifndef _LIB_BUILD
asm("T6PR equ 041Bh");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0x41B);
#ifndef _LIB_BUILD
asm("PR6 equ 041Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T6PR                   :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0x41B);
// bitfield macros
#define _T6PR_PR_POSN                                       0x0
#define _T6PR_PR_POSITION                                   0x0
#define _T6PR_PR_SIZE                                       0x8
#define _T6PR_PR_LENGTH                                     0x8
#define _T6PR_PR_MASK                                       0xFF
#define _T6PR_T6PR_POSN                                     0x0
#define _T6PR_T6PR_POSITION                                 0x0
#define _T6PR_T6PR_SIZE                                     0x8
#define _T6PR_T6PR_LENGTH                                   0x8
#define _T6PR_T6PR_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned T6PR                   :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0x41B);
// bitfield macros
#define _PR6_PR_POSN                                        0x0
#define _PR6_PR_POSITION                                    0x0
#define _PR6_PR_SIZE                                        0x8
#define _PR6_PR_LENGTH                                      0x8
#define _PR6_PR_MASK                                        0xFF
#define _PR6_T6PR_POSN                                      0x0
#define _PR6_T6PR_POSITION                                  0x0
#define _PR6_T6PR_SIZE                                      0x8
#define _PR6_T6PR_LENGTH                                    0x8
#define _PR6_T6PR_MASK                                      0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0x41C);
#ifndef _LIB_BUILD
asm("T6CON equ 041Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0x41C);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0x41D);
#ifndef _LIB_BUILD
asm("T6HLT equ 041Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0x41D);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0x41E);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 041Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0x41E);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x4
#define _T6CLKCON_CS_LENGTH                                 0x4
#define _T6CLKCON_CS_MASK                                   0xF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x4
#define _T6CLKCON_T6CS_LENGTH                               0x4
#define _T6CLKCON_T6CS_MASK                                 0xF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0x41F);
#ifndef _LIB_BUILD
asm("T6RST equ 041Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :4;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T6RSEL                 :4;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0x41F);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x4
#define _T6RST_RSEL_LENGTH                                  0x4
#define _T6RST_RSEL_MASK                                    0xF
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x4
#define _T6RST_T6RSEL_LENGTH                                0x4
#define _T6RST_T6RSEL_MASK                                  0xF
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x493);
#ifndef _LIB_BUILD
asm("TMR3L equ 0493h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L                  :8;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x493);
// bitfield macros
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x494);
#ifndef _LIB_BUILD
asm("TMR3H equ 0494h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H                  :8;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x494);
// bitfield macros
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x495);
#ifndef _LIB_BUILD
asm("T3CON equ 0495h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3ON                 :1;
        unsigned                        :1;
        unsigned T3SYNC                 :1;
        unsigned                        :1;
        unsigned T3CKPS                 :2;
        unsigned TMR3CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
        unsigned TMR3CS0                :1;
        unsigned TMR3CS1                :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x495);
// bitfield macros
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_T3SYNC_POSN                                  0x2
#define _T3CON_T3SYNC_POSITION                              0x2
#define _T3CON_T3SYNC_SIZE                                  0x1
#define _T3CON_T3SYNC_LENGTH                                0x1
#define _T3CON_T3SYNC_MASK                                  0x4
#define _T3CON_T3CKPS_POSN                                  0x4
#define _T3CON_T3CKPS_POSITION                              0x4
#define _T3CON_T3CKPS_SIZE                                  0x2
#define _T3CON_T3CKPS_LENGTH                                0x2
#define _T3CON_T3CKPS_MASK                                  0x30
#define _T3CON_TMR3CS_POSN                                  0x6
#define _T3CON_TMR3CS_POSITION                              0x6
#define _T3CON_TMR3CS_SIZE                                  0x2
#define _T3CON_TMR3CS_LENGTH                                0x2
#define _T3CON_TMR3CS_MASK                                  0xC0
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_TMR3CS0_POSN                                 0x6
#define _T3CON_TMR3CS0_POSITION                             0x6
#define _T3CON_TMR3CS0_SIZE                                 0x1
#define _T3CON_TMR3CS0_LENGTH                               0x1
#define _T3CON_TMR3CS0_MASK                                 0x40
#define _T3CON_TMR3CS1_POSN                                 0x7
#define _T3CON_TMR3CS1_POSITION                             0x7
#define _T3CON_TMR3CS1_SIZE                                 0x1
#define _T3CON_TMR3CS1_LENGTH                               0x1
#define _T3CON_TMR3CS1_MASK                                 0x80

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x496);
#ifndef _LIB_BUILD
asm("T3GCON equ 0496h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GSS                  :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned TMR3GE                 :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x496);
// bitfield macros
#define _T3GCON_T3GSS_POSN                                  0x0
#define _T3GCON_T3GSS_POSITION                              0x0
#define _T3GCON_T3GSS_SIZE                                  0x2
#define _T3GCON_T3GSS_LENGTH                                0x2
#define _T3GCON_T3GSS_MASK                                  0x3
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_nDONE_POSN                            0x3
#define _T3GCON_T3GGO_nDONE_POSITION                        0x3
#define _T3GCON_T3GGO_nDONE_SIZE                            0x1
#define _T3GCON_T3GGO_nDONE_LENGTH                          0x1
#define _T3GCON_T3GGO_nDONE_MASK                            0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_TMR3GE_POSN                                 0x7
#define _T3GCON_TMR3GE_POSITION                             0x7
#define _T3GCON_TMR3GE_SIZE                                 0x1
#define _T3GCON_TMR3GE_LENGTH                               0x1
#define _T3GCON_TMR3GE_MASK                                 0x80
#define _T3GCON_T3GSS0_POSN                                 0x0
#define _T3GCON_T3GSS0_POSITION                             0x0
#define _T3GCON_T3GSS0_SIZE                                 0x1
#define _T3GCON_T3GSS0_LENGTH                               0x1
#define _T3GCON_T3GSS0_MASK                                 0x1
#define _T3GCON_T3GSS1_POSN                                 0x1
#define _T3GCON_T3GSS1_POSITION                             0x1
#define _T3GCON_T3GSS1_SIZE                                 0x1
#define _T3GCON_T3GSS1_LENGTH                               0x1
#define _T3GCON_T3GSS1_MASK                                 0x2

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0x49A);
#ifndef _LIB_BUILD
asm("TMR5L equ 049Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L                  :8;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0x49A);
// bitfield macros
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0x49B);
#ifndef _LIB_BUILD
asm("TMR5H equ 049Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H                  :8;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0x49B);
// bitfield macros
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0x49C);
#ifndef _LIB_BUILD
asm("T5CON equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5ON                 :1;
        unsigned                        :1;
        unsigned T5SYNC                 :1;
        unsigned                        :1;
        unsigned T5CKPS                 :2;
        unsigned TMR5CS                 :2;
    };
    struct {
        unsigned                        :4;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
        unsigned TMR5CS0                :1;
        unsigned TMR5CS1                :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0x49C);
// bitfield macros
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_T5SYNC_POSN                                  0x2
#define _T5CON_T5SYNC_POSITION                              0x2
#define _T5CON_T5SYNC_SIZE                                  0x1
#define _T5CON_T5SYNC_LENGTH                                0x1
#define _T5CON_T5SYNC_MASK                                  0x4
#define _T5CON_T5CKPS_POSN                                  0x4
#define _T5CON_T5CKPS_POSITION                              0x4
#define _T5CON_T5CKPS_SIZE                                  0x2
#define _T5CON_T5CKPS_LENGTH                                0x2
#define _T5CON_T5CKPS_MASK                                  0x30
#define _T5CON_TMR5CS_POSN                                  0x6
#define _T5CON_TMR5CS_POSITION                              0x6
#define _T5CON_TMR5CS_SIZE                                  0x2
#define _T5CON_TMR5CS_LENGTH                                0x2
#define _T5CON_TMR5CS_MASK                                  0xC0
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_TMR5CS0_POSN                                 0x6
#define _T5CON_TMR5CS0_POSITION                             0x6
#define _T5CON_TMR5CS0_SIZE                                 0x1
#define _T5CON_TMR5CS0_LENGTH                               0x1
#define _T5CON_TMR5CS0_MASK                                 0x40
#define _T5CON_TMR5CS1_POSN                                 0x7
#define _T5CON_TMR5CS1_POSITION                             0x7
#define _T5CON_TMR5CS1_SIZE                                 0x1
#define _T5CON_TMR5CS1_LENGTH                               0x1
#define _T5CON_TMR5CS1_MASK                                 0x80

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0x49D);
#ifndef _LIB_BUILD
asm("T5GCON equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GSS                  :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned TMR5GE                 :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0x49D);
// bitfield macros
#define _T5GCON_T5GSS_POSN                                  0x0
#define _T5GCON_T5GSS_POSITION                              0x0
#define _T5GCON_T5GSS_SIZE                                  0x2
#define _T5GCON_T5GSS_LENGTH                                0x2
#define _T5GCON_T5GSS_MASK                                  0x3
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_nDONE_POSN                            0x3
#define _T5GCON_T5GGO_nDONE_POSITION                        0x3
#define _T5GCON_T5GGO_nDONE_SIZE                            0x1
#define _T5GCON_T5GGO_nDONE_LENGTH                          0x1
#define _T5GCON_T5GGO_nDONE_MASK                            0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_TMR5GE_POSN                                 0x7
#define _T5GCON_TMR5GE_POSITION                             0x7
#define _T5GCON_TMR5GE_SIZE                                 0x1
#define _T5GCON_TMR5GE_LENGTH                               0x1
#define _T5GCON_TMR5GE_MASK                                 0x80
#define _T5GCON_T5GSS0_POSN                                 0x0
#define _T5GCON_T5GSS0_POSITION                             0x0
#define _T5GCON_T5GSS0_SIZE                                 0x1
#define _T5GCON_T5GSS0_LENGTH                               0x1
#define _T5GCON_T5GSS0_MASK                                 0x1
#define _T5GCON_T5GSS1_POSN                                 0x1
#define _T5GCON_T5GSS1_POSITION                             0x1
#define _T5GCON_T5GSS1_SIZE                                 0x1
#define _T5GCON_T5GSS1_LENGTH                               0x1
#define _T5GCON_T5GSS1_MASK                                 0x2

// Register: PID1SET
#define PID1SET PID1SET
extern volatile unsigned short          PID1SET             __at(0x58C);
#ifndef _LIB_BUILD
asm("PID1SET equ 058Ch");
#endif

// Register: PID1SETL
#define PID1SETL PID1SETL
extern volatile unsigned char           PID1SETL            __at(0x58C);
#ifndef _LIB_BUILD
asm("PID1SETL equ 058Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1SET0               :1;
        unsigned PID1SET1               :1;
        unsigned PID1SET2               :1;
        unsigned PID1SET3               :1;
        unsigned PID1SET4               :1;
        unsigned PID1SET5               :1;
        unsigned PID1SET6               :1;
        unsigned PID1SET7               :1;
    };
    struct {
        unsigned SET0                   :1;
        unsigned SET1                   :1;
        unsigned SET2                   :1;
        unsigned SET3                   :1;
        unsigned SET4                   :1;
        unsigned SET5                   :1;
        unsigned SET6                   :1;
        unsigned SET7                   :1;
    };
} PID1SETLbits_t;
extern volatile PID1SETLbits_t PID1SETLbits __at(0x58C);
// bitfield macros
#define _PID1SETL_PID1SET0_POSN                             0x0
#define _PID1SETL_PID1SET0_POSITION                         0x0
#define _PID1SETL_PID1SET0_SIZE                             0x1
#define _PID1SETL_PID1SET0_LENGTH                           0x1
#define _PID1SETL_PID1SET0_MASK                             0x1
#define _PID1SETL_PID1SET1_POSN                             0x1
#define _PID1SETL_PID1SET1_POSITION                         0x1
#define _PID1SETL_PID1SET1_SIZE                             0x1
#define _PID1SETL_PID1SET1_LENGTH                           0x1
#define _PID1SETL_PID1SET1_MASK                             0x2
#define _PID1SETL_PID1SET2_POSN                             0x2
#define _PID1SETL_PID1SET2_POSITION                         0x2
#define _PID1SETL_PID1SET2_SIZE                             0x1
#define _PID1SETL_PID1SET2_LENGTH                           0x1
#define _PID1SETL_PID1SET2_MASK                             0x4
#define _PID1SETL_PID1SET3_POSN                             0x3
#define _PID1SETL_PID1SET3_POSITION                         0x3
#define _PID1SETL_PID1SET3_SIZE                             0x1
#define _PID1SETL_PID1SET3_LENGTH                           0x1
#define _PID1SETL_PID1SET3_MASK                             0x8
#define _PID1SETL_PID1SET4_POSN                             0x4
#define _PID1SETL_PID1SET4_POSITION                         0x4
#define _PID1SETL_PID1SET4_SIZE                             0x1
#define _PID1SETL_PID1SET4_LENGTH                           0x1
#define _PID1SETL_PID1SET4_MASK                             0x10
#define _PID1SETL_PID1SET5_POSN                             0x5
#define _PID1SETL_PID1SET5_POSITION                         0x5
#define _PID1SETL_PID1SET5_SIZE                             0x1
#define _PID1SETL_PID1SET5_LENGTH                           0x1
#define _PID1SETL_PID1SET5_MASK                             0x20
#define _PID1SETL_PID1SET6_POSN                             0x6
#define _PID1SETL_PID1SET6_POSITION                         0x6
#define _PID1SETL_PID1SET6_SIZE                             0x1
#define _PID1SETL_PID1SET6_LENGTH                           0x1
#define _PID1SETL_PID1SET6_MASK                             0x40
#define _PID1SETL_PID1SET7_POSN                             0x7
#define _PID1SETL_PID1SET7_POSITION                         0x7
#define _PID1SETL_PID1SET7_SIZE                             0x1
#define _PID1SETL_PID1SET7_LENGTH                           0x1
#define _PID1SETL_PID1SET7_MASK                             0x80
#define _PID1SETL_SET0_POSN                                 0x0
#define _PID1SETL_SET0_POSITION                             0x0
#define _PID1SETL_SET0_SIZE                                 0x1
#define _PID1SETL_SET0_LENGTH                               0x1
#define _PID1SETL_SET0_MASK                                 0x1
#define _PID1SETL_SET1_POSN                                 0x1
#define _PID1SETL_SET1_POSITION                             0x1
#define _PID1SETL_SET1_SIZE                                 0x1
#define _PID1SETL_SET1_LENGTH                               0x1
#define _PID1SETL_SET1_MASK                                 0x2
#define _PID1SETL_SET2_POSN                                 0x2
#define _PID1SETL_SET2_POSITION                             0x2
#define _PID1SETL_SET2_SIZE                                 0x1
#define _PID1SETL_SET2_LENGTH                               0x1
#define _PID1SETL_SET2_MASK                                 0x4
#define _PID1SETL_SET3_POSN                                 0x3
#define _PID1SETL_SET3_POSITION                             0x3
#define _PID1SETL_SET3_SIZE                                 0x1
#define _PID1SETL_SET3_LENGTH                               0x1
#define _PID1SETL_SET3_MASK                                 0x8
#define _PID1SETL_SET4_POSN                                 0x4
#define _PID1SETL_SET4_POSITION                             0x4
#define _PID1SETL_SET4_SIZE                                 0x1
#define _PID1SETL_SET4_LENGTH                               0x1
#define _PID1SETL_SET4_MASK                                 0x10
#define _PID1SETL_SET5_POSN                                 0x5
#define _PID1SETL_SET5_POSITION                             0x5
#define _PID1SETL_SET5_SIZE                                 0x1
#define _PID1SETL_SET5_LENGTH                               0x1
#define _PID1SETL_SET5_MASK                                 0x20
#define _PID1SETL_SET6_POSN                                 0x6
#define _PID1SETL_SET6_POSITION                             0x6
#define _PID1SETL_SET6_SIZE                                 0x1
#define _PID1SETL_SET6_LENGTH                               0x1
#define _PID1SETL_SET6_MASK                                 0x40
#define _PID1SETL_SET7_POSN                                 0x7
#define _PID1SETL_SET7_POSITION                             0x7
#define _PID1SETL_SET7_SIZE                                 0x1
#define _PID1SETL_SET7_LENGTH                               0x1
#define _PID1SETL_SET7_MASK                                 0x80

// Register: PID1SETH
#define PID1SETH PID1SETH
extern volatile unsigned char           PID1SETH            __at(0x58D);
#ifndef _LIB_BUILD
asm("PID1SETH equ 058Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1SET8               :1;
        unsigned PID1SET9               :1;
        unsigned PID1SET10              :1;
        unsigned PID1SET11              :1;
        unsigned PID1SET12              :1;
        unsigned PID1SET13              :1;
        unsigned PID1SET14              :1;
        unsigned PID1SET15              :1;
    };
    struct {
        unsigned SET8                   :1;
        unsigned SET9                   :1;
        unsigned SET10                  :1;
        unsigned SET11                  :1;
        unsigned SET12                  :1;
        unsigned SET13                  :1;
        unsigned SET14                  :1;
        unsigned SET15                  :1;
    };
} PID1SETHbits_t;
extern volatile PID1SETHbits_t PID1SETHbits __at(0x58D);
// bitfield macros
#define _PID1SETH_PID1SET8_POSN                             0x0
#define _PID1SETH_PID1SET8_POSITION                         0x0
#define _PID1SETH_PID1SET8_SIZE                             0x1
#define _PID1SETH_PID1SET8_LENGTH                           0x1
#define _PID1SETH_PID1SET8_MASK                             0x1
#define _PID1SETH_PID1SET9_POSN                             0x1
#define _PID1SETH_PID1SET9_POSITION                         0x1
#define _PID1SETH_PID1SET9_SIZE                             0x1
#define _PID1SETH_PID1SET9_LENGTH                           0x1
#define _PID1SETH_PID1SET9_MASK                             0x2
#define _PID1SETH_PID1SET10_POSN                            0x2
#define _PID1SETH_PID1SET10_POSITION                        0x2
#define _PID1SETH_PID1SET10_SIZE                            0x1
#define _PID1SETH_PID1SET10_LENGTH                          0x1
#define _PID1SETH_PID1SET10_MASK                            0x4
#define _PID1SETH_PID1SET11_POSN                            0x3
#define _PID1SETH_PID1SET11_POSITION                        0x3
#define _PID1SETH_PID1SET11_SIZE                            0x1
#define _PID1SETH_PID1SET11_LENGTH                          0x1
#define _PID1SETH_PID1SET11_MASK                            0x8
#define _PID1SETH_PID1SET12_POSN                            0x4
#define _PID1SETH_PID1SET12_POSITION                        0x4
#define _PID1SETH_PID1SET12_SIZE                            0x1
#define _PID1SETH_PID1SET12_LENGTH                          0x1
#define _PID1SETH_PID1SET12_MASK                            0x10
#define _PID1SETH_PID1SET13_POSN                            0x5
#define _PID1SETH_PID1SET13_POSITION                        0x5
#define _PID1SETH_PID1SET13_SIZE                            0x1
#define _PID1SETH_PID1SET13_LENGTH                          0x1
#define _PID1SETH_PID1SET13_MASK                            0x20
#define _PID1SETH_PID1SET14_POSN                            0x6
#define _PID1SETH_PID1SET14_POSITION                        0x6
#define _PID1SETH_PID1SET14_SIZE                            0x1
#define _PID1SETH_PID1SET14_LENGTH                          0x1
#define _PID1SETH_PID1SET14_MASK                            0x40
#define _PID1SETH_PID1SET15_POSN                            0x7
#define _PID1SETH_PID1SET15_POSITION                        0x7
#define _PID1SETH_PID1SET15_SIZE                            0x1
#define _PID1SETH_PID1SET15_LENGTH                          0x1
#define _PID1SETH_PID1SET15_MASK                            0x80
#define _PID1SETH_SET8_POSN                                 0x0
#define _PID1SETH_SET8_POSITION                             0x0
#define _PID1SETH_SET8_SIZE                                 0x1
#define _PID1SETH_SET8_LENGTH                               0x1
#define _PID1SETH_SET8_MASK                                 0x1
#define _PID1SETH_SET9_POSN                                 0x1
#define _PID1SETH_SET9_POSITION                             0x1
#define _PID1SETH_SET9_SIZE                                 0x1
#define _PID1SETH_SET9_LENGTH                               0x1
#define _PID1SETH_SET9_MASK                                 0x2
#define _PID1SETH_SET10_POSN                                0x2
#define _PID1SETH_SET10_POSITION                            0x2
#define _PID1SETH_SET10_SIZE                                0x1
#define _PID1SETH_SET10_LENGTH                              0x1
#define _PID1SETH_SET10_MASK                                0x4
#define _PID1SETH_SET11_POSN                                0x3
#define _PID1SETH_SET11_POSITION                            0x3
#define _PID1SETH_SET11_SIZE                                0x1
#define _PID1SETH_SET11_LENGTH                              0x1
#define _PID1SETH_SET11_MASK                                0x8
#define _PID1SETH_SET12_POSN                                0x4
#define _PID1SETH_SET12_POSITION                            0x4
#define _PID1SETH_SET12_SIZE                                0x1
#define _PID1SETH_SET12_LENGTH                              0x1
#define _PID1SETH_SET12_MASK                                0x10
#define _PID1SETH_SET13_POSN                                0x5
#define _PID1SETH_SET13_POSITION                            0x5
#define _PID1SETH_SET13_SIZE                                0x1
#define _PID1SETH_SET13_LENGTH                              0x1
#define _PID1SETH_SET13_MASK                                0x20
#define _PID1SETH_SET14_POSN                                0x6
#define _PID1SETH_SET14_POSITION                            0x6
#define _PID1SETH_SET14_SIZE                                0x1
#define _PID1SETH_SET14_LENGTH                              0x1
#define _PID1SETH_SET14_MASK                                0x40
#define _PID1SETH_SET15_POSN                                0x7
#define _PID1SETH_SET15_POSITION                            0x7
#define _PID1SETH_SET15_SIZE                                0x1
#define _PID1SETH_SET15_LENGTH                              0x1
#define _PID1SETH_SET15_MASK                                0x80

// Register: PID1IN
#define PID1IN PID1IN
extern volatile unsigned short          PID1IN              __at(0x58E);
#ifndef _LIB_BUILD
asm("PID1IN equ 058Eh");
#endif

// Register: PID1INL
#define PID1INL PID1INL
extern volatile unsigned char           PID1INL             __at(0x58E);
#ifndef _LIB_BUILD
asm("PID1INL equ 058Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1IN0                :1;
        unsigned PID1IN1                :1;
        unsigned PID1IN2                :1;
        unsigned PID1IN3                :1;
        unsigned PID1IN4                :1;
        unsigned PID1IN5                :1;
        unsigned PID1IN6                :1;
        unsigned PID1IN7                :1;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
        unsigned IN3                    :1;
        unsigned IN4                    :1;
        unsigned IN5                    :1;
        unsigned IN6                    :1;
        unsigned IN7                    :1;
    };
} PID1INLbits_t;
extern volatile PID1INLbits_t PID1INLbits __at(0x58E);
// bitfield macros
#define _PID1INL_PID1IN0_POSN                               0x0
#define _PID1INL_PID1IN0_POSITION                           0x0
#define _PID1INL_PID1IN0_SIZE                               0x1
#define _PID1INL_PID1IN0_LENGTH                             0x1
#define _PID1INL_PID1IN0_MASK                               0x1
#define _PID1INL_PID1IN1_POSN                               0x1
#define _PID1INL_PID1IN1_POSITION                           0x1
#define _PID1INL_PID1IN1_SIZE                               0x1
#define _PID1INL_PID1IN1_LENGTH                             0x1
#define _PID1INL_PID1IN1_MASK                               0x2
#define _PID1INL_PID1IN2_POSN                               0x2
#define _PID1INL_PID1IN2_POSITION                           0x2
#define _PID1INL_PID1IN2_SIZE                               0x1
#define _PID1INL_PID1IN2_LENGTH                             0x1
#define _PID1INL_PID1IN2_MASK                               0x4
#define _PID1INL_PID1IN3_POSN                               0x3
#define _PID1INL_PID1IN3_POSITION                           0x3
#define _PID1INL_PID1IN3_SIZE                               0x1
#define _PID1INL_PID1IN3_LENGTH                             0x1
#define _PID1INL_PID1IN3_MASK                               0x8
#define _PID1INL_PID1IN4_POSN                               0x4
#define _PID1INL_PID1IN4_POSITION                           0x4
#define _PID1INL_PID1IN4_SIZE                               0x1
#define _PID1INL_PID1IN4_LENGTH                             0x1
#define _PID1INL_PID1IN4_MASK                               0x10
#define _PID1INL_PID1IN5_POSN                               0x5
#define _PID1INL_PID1IN5_POSITION                           0x5
#define _PID1INL_PID1IN5_SIZE                               0x1
#define _PID1INL_PID1IN5_LENGTH                             0x1
#define _PID1INL_PID1IN5_MASK                               0x20
#define _PID1INL_PID1IN6_POSN                               0x6
#define _PID1INL_PID1IN6_POSITION                           0x6
#define _PID1INL_PID1IN6_SIZE                               0x1
#define _PID1INL_PID1IN6_LENGTH                             0x1
#define _PID1INL_PID1IN6_MASK                               0x40
#define _PID1INL_PID1IN7_POSN                               0x7
#define _PID1INL_PID1IN7_POSITION                           0x7
#define _PID1INL_PID1IN7_SIZE                               0x1
#define _PID1INL_PID1IN7_LENGTH                             0x1
#define _PID1INL_PID1IN7_MASK                               0x80
#define _PID1INL_IN0_POSN                                   0x0
#define _PID1INL_IN0_POSITION                               0x0
#define _PID1INL_IN0_SIZE                                   0x1
#define _PID1INL_IN0_LENGTH                                 0x1
#define _PID1INL_IN0_MASK                                   0x1
#define _PID1INL_IN1_POSN                                   0x1
#define _PID1INL_IN1_POSITION                               0x1
#define _PID1INL_IN1_SIZE                                   0x1
#define _PID1INL_IN1_LENGTH                                 0x1
#define _PID1INL_IN1_MASK                                   0x2
#define _PID1INL_IN2_POSN                                   0x2
#define _PID1INL_IN2_POSITION                               0x2
#define _PID1INL_IN2_SIZE                                   0x1
#define _PID1INL_IN2_LENGTH                                 0x1
#define _PID1INL_IN2_MASK                                   0x4
#define _PID1INL_IN3_POSN                                   0x3
#define _PID1INL_IN3_POSITION                               0x3
#define _PID1INL_IN3_SIZE                                   0x1
#define _PID1INL_IN3_LENGTH                                 0x1
#define _PID1INL_IN3_MASK                                   0x8
#define _PID1INL_IN4_POSN                                   0x4
#define _PID1INL_IN4_POSITION                               0x4
#define _PID1INL_IN4_SIZE                                   0x1
#define _PID1INL_IN4_LENGTH                                 0x1
#define _PID1INL_IN4_MASK                                   0x10
#define _PID1INL_IN5_POSN                                   0x5
#define _PID1INL_IN5_POSITION                               0x5
#define _PID1INL_IN5_SIZE                                   0x1
#define _PID1INL_IN5_LENGTH                                 0x1
#define _PID1INL_IN5_MASK                                   0x20
#define _PID1INL_IN6_POSN                                   0x6
#define _PID1INL_IN6_POSITION                               0x6
#define _PID1INL_IN6_SIZE                                   0x1
#define _PID1INL_IN6_LENGTH                                 0x1
#define _PID1INL_IN6_MASK                                   0x40
#define _PID1INL_IN7_POSN                                   0x7
#define _PID1INL_IN7_POSITION                               0x7
#define _PID1INL_IN7_SIZE                                   0x1
#define _PID1INL_IN7_LENGTH                                 0x1
#define _PID1INL_IN7_MASK                                   0x80

// Register: PID1INH
#define PID1INH PID1INH
extern volatile unsigned char           PID1INH             __at(0x58F);
#ifndef _LIB_BUILD
asm("PID1INH equ 058Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1IN8                :1;
        unsigned PID1IN9                :1;
        unsigned PID1IN10               :1;
        unsigned PID1IN11               :1;
        unsigned PID1IN12               :1;
        unsigned PID1IN13               :1;
        unsigned PID1IN14               :1;
        unsigned PID1IN15               :1;
    };
    struct {
        unsigned IN8                    :1;
        unsigned IN9                    :1;
        unsigned IN10                   :1;
        unsigned IN11                   :1;
        unsigned IN12                   :1;
        unsigned IN13                   :1;
        unsigned IN14                   :1;
        unsigned IN15                   :1;
    };
} PID1INHbits_t;
extern volatile PID1INHbits_t PID1INHbits __at(0x58F);
// bitfield macros
#define _PID1INH_PID1IN8_POSN                               0x0
#define _PID1INH_PID1IN8_POSITION                           0x0
#define _PID1INH_PID1IN8_SIZE                               0x1
#define _PID1INH_PID1IN8_LENGTH                             0x1
#define _PID1INH_PID1IN8_MASK                               0x1
#define _PID1INH_PID1IN9_POSN                               0x1
#define _PID1INH_PID1IN9_POSITION                           0x1
#define _PID1INH_PID1IN9_SIZE                               0x1
#define _PID1INH_PID1IN9_LENGTH                             0x1
#define _PID1INH_PID1IN9_MASK                               0x2
#define _PID1INH_PID1IN10_POSN                              0x2
#define _PID1INH_PID1IN10_POSITION                          0x2
#define _PID1INH_PID1IN10_SIZE                              0x1
#define _PID1INH_PID1IN10_LENGTH                            0x1
#define _PID1INH_PID1IN10_MASK                              0x4
#define _PID1INH_PID1IN11_POSN                              0x3
#define _PID1INH_PID1IN11_POSITION                          0x3
#define _PID1INH_PID1IN11_SIZE                              0x1
#define _PID1INH_PID1IN11_LENGTH                            0x1
#define _PID1INH_PID1IN11_MASK                              0x8
#define _PID1INH_PID1IN12_POSN                              0x4
#define _PID1INH_PID1IN12_POSITION                          0x4
#define _PID1INH_PID1IN12_SIZE                              0x1
#define _PID1INH_PID1IN12_LENGTH                            0x1
#define _PID1INH_PID1IN12_MASK                              0x10
#define _PID1INH_PID1IN13_POSN                              0x5
#define _PID1INH_PID1IN13_POSITION                          0x5
#define _PID1INH_PID1IN13_SIZE                              0x1
#define _PID1INH_PID1IN13_LENGTH                            0x1
#define _PID1INH_PID1IN13_MASK                              0x20
#define _PID1INH_PID1IN14_POSN                              0x6
#define _PID1INH_PID1IN14_POSITION                          0x6
#define _PID1INH_PID1IN14_SIZE                              0x1
#define _PID1INH_PID1IN14_LENGTH                            0x1
#define _PID1INH_PID1IN14_MASK                              0x40
#define _PID1INH_PID1IN15_POSN                              0x7
#define _PID1INH_PID1IN15_POSITION                          0x7
#define _PID1INH_PID1IN15_SIZE                              0x1
#define _PID1INH_PID1IN15_LENGTH                            0x1
#define _PID1INH_PID1IN15_MASK                              0x80
#define _PID1INH_IN8_POSN                                   0x0
#define _PID1INH_IN8_POSITION                               0x0
#define _PID1INH_IN8_SIZE                                   0x1
#define _PID1INH_IN8_LENGTH                                 0x1
#define _PID1INH_IN8_MASK                                   0x1
#define _PID1INH_IN9_POSN                                   0x1
#define _PID1INH_IN9_POSITION                               0x1
#define _PID1INH_IN9_SIZE                                   0x1
#define _PID1INH_IN9_LENGTH                                 0x1
#define _PID1INH_IN9_MASK                                   0x2
#define _PID1INH_IN10_POSN                                  0x2
#define _PID1INH_IN10_POSITION                              0x2
#define _PID1INH_IN10_SIZE                                  0x1
#define _PID1INH_IN10_LENGTH                                0x1
#define _PID1INH_IN10_MASK                                  0x4
#define _PID1INH_IN11_POSN                                  0x3
#define _PID1INH_IN11_POSITION                              0x3
#define _PID1INH_IN11_SIZE                                  0x1
#define _PID1INH_IN11_LENGTH                                0x1
#define _PID1INH_IN11_MASK                                  0x8
#define _PID1INH_IN12_POSN                                  0x4
#define _PID1INH_IN12_POSITION                              0x4
#define _PID1INH_IN12_SIZE                                  0x1
#define _PID1INH_IN12_LENGTH                                0x1
#define _PID1INH_IN12_MASK                                  0x10
#define _PID1INH_IN13_POSN                                  0x5
#define _PID1INH_IN13_POSITION                              0x5
#define _PID1INH_IN13_SIZE                                  0x1
#define _PID1INH_IN13_LENGTH                                0x1
#define _PID1INH_IN13_MASK                                  0x20
#define _PID1INH_IN14_POSN                                  0x6
#define _PID1INH_IN14_POSITION                              0x6
#define _PID1INH_IN14_SIZE                                  0x1
#define _PID1INH_IN14_LENGTH                                0x1
#define _PID1INH_IN14_MASK                                  0x40
#define _PID1INH_IN15_POSN                                  0x7
#define _PID1INH_IN15_POSITION                              0x7
#define _PID1INH_IN15_SIZE                                  0x1
#define _PID1INH_IN15_LENGTH                                0x1
#define _PID1INH_IN15_MASK                                  0x80

// Register: PID1K1
#define PID1K1 PID1K1
extern volatile unsigned short          PID1K1              __at(0x590);
#ifndef _LIB_BUILD
asm("PID1K1 equ 0590h");
#endif

// Register: PID1K1L
#define PID1K1L PID1K1L
extern volatile unsigned char           PID1K1L             __at(0x590);
#ifndef _LIB_BUILD
asm("PID1K1L equ 0590h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K10                :1;
        unsigned PID1K11                :1;
        unsigned PID1K12                :1;
        unsigned PID1K13                :1;
        unsigned PID1K14                :1;
        unsigned PID1K15                :1;
        unsigned PID1K16                :1;
        unsigned PID1K17                :1;
    };
    struct {
        unsigned K10                    :1;
        unsigned K11                    :1;
        unsigned K12                    :1;
        unsigned K13                    :1;
        unsigned K14                    :1;
        unsigned K15                    :1;
        unsigned K16                    :1;
        unsigned K17                    :1;
    };
} PID1K1Lbits_t;
extern volatile PID1K1Lbits_t PID1K1Lbits __at(0x590);
// bitfield macros
#define _PID1K1L_PID1K10_POSN                               0x0
#define _PID1K1L_PID1K10_POSITION                           0x0
#define _PID1K1L_PID1K10_SIZE                               0x1
#define _PID1K1L_PID1K10_LENGTH                             0x1
#define _PID1K1L_PID1K10_MASK                               0x1
#define _PID1K1L_PID1K11_POSN                               0x1
#define _PID1K1L_PID1K11_POSITION                           0x1
#define _PID1K1L_PID1K11_SIZE                               0x1
#define _PID1K1L_PID1K11_LENGTH                             0x1
#define _PID1K1L_PID1K11_MASK                               0x2
#define _PID1K1L_PID1K12_POSN                               0x2
#define _PID1K1L_PID1K12_POSITION                           0x2
#define _PID1K1L_PID1K12_SIZE                               0x1
#define _PID1K1L_PID1K12_LENGTH                             0x1
#define _PID1K1L_PID1K12_MASK                               0x4
#define _PID1K1L_PID1K13_POSN                               0x3
#define _PID1K1L_PID1K13_POSITION                           0x3
#define _PID1K1L_PID1K13_SIZE                               0x1
#define _PID1K1L_PID1K13_LENGTH                             0x1
#define _PID1K1L_PID1K13_MASK                               0x8
#define _PID1K1L_PID1K14_POSN                               0x4
#define _PID1K1L_PID1K14_POSITION                           0x4
#define _PID1K1L_PID1K14_SIZE                               0x1
#define _PID1K1L_PID1K14_LENGTH                             0x1
#define _PID1K1L_PID1K14_MASK                               0x10
#define _PID1K1L_PID1K15_POSN                               0x5
#define _PID1K1L_PID1K15_POSITION                           0x5
#define _PID1K1L_PID1K15_SIZE                               0x1
#define _PID1K1L_PID1K15_LENGTH                             0x1
#define _PID1K1L_PID1K15_MASK                               0x20
#define _PID1K1L_PID1K16_POSN                               0x6
#define _PID1K1L_PID1K16_POSITION                           0x6
#define _PID1K1L_PID1K16_SIZE                               0x1
#define _PID1K1L_PID1K16_LENGTH                             0x1
#define _PID1K1L_PID1K16_MASK                               0x40
#define _PID1K1L_PID1K17_POSN                               0x7
#define _PID1K1L_PID1K17_POSITION                           0x7
#define _PID1K1L_PID1K17_SIZE                               0x1
#define _PID1K1L_PID1K17_LENGTH                             0x1
#define _PID1K1L_PID1K17_MASK                               0x80
#define _PID1K1L_K10_POSN                                   0x0
#define _PID1K1L_K10_POSITION                               0x0
#define _PID1K1L_K10_SIZE                                   0x1
#define _PID1K1L_K10_LENGTH                                 0x1
#define _PID1K1L_K10_MASK                                   0x1
#define _PID1K1L_K11_POSN                                   0x1
#define _PID1K1L_K11_POSITION                               0x1
#define _PID1K1L_K11_SIZE                                   0x1
#define _PID1K1L_K11_LENGTH                                 0x1
#define _PID1K1L_K11_MASK                                   0x2
#define _PID1K1L_K12_POSN                                   0x2
#define _PID1K1L_K12_POSITION                               0x2
#define _PID1K1L_K12_SIZE                                   0x1
#define _PID1K1L_K12_LENGTH                                 0x1
#define _PID1K1L_K12_MASK                                   0x4
#define _PID1K1L_K13_POSN                                   0x3
#define _PID1K1L_K13_POSITION                               0x3
#define _PID1K1L_K13_SIZE                                   0x1
#define _PID1K1L_K13_LENGTH                                 0x1
#define _PID1K1L_K13_MASK                                   0x8
#define _PID1K1L_K14_POSN                                   0x4
#define _PID1K1L_K14_POSITION                               0x4
#define _PID1K1L_K14_SIZE                                   0x1
#define _PID1K1L_K14_LENGTH                                 0x1
#define _PID1K1L_K14_MASK                                   0x10
#define _PID1K1L_K15_POSN                                   0x5
#define _PID1K1L_K15_POSITION                               0x5
#define _PID1K1L_K15_SIZE                                   0x1
#define _PID1K1L_K15_LENGTH                                 0x1
#define _PID1K1L_K15_MASK                                   0x20
#define _PID1K1L_K16_POSN                                   0x6
#define _PID1K1L_K16_POSITION                               0x6
#define _PID1K1L_K16_SIZE                                   0x1
#define _PID1K1L_K16_LENGTH                                 0x1
#define _PID1K1L_K16_MASK                                   0x40
#define _PID1K1L_K17_POSN                                   0x7
#define _PID1K1L_K17_POSITION                               0x7
#define _PID1K1L_K17_SIZE                                   0x1
#define _PID1K1L_K17_LENGTH                                 0x1
#define _PID1K1L_K17_MASK                                   0x80

// Register: PID1K1H
#define PID1K1H PID1K1H
extern volatile unsigned char           PID1K1H             __at(0x591);
#ifndef _LIB_BUILD
asm("PID1K1H equ 0591h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K18                :1;
        unsigned PID1K19                :1;
        unsigned PID1K110               :1;
        unsigned PID1K111               :1;
        unsigned PID1K112               :1;
        unsigned PID1K113               :1;
        unsigned PID1K114               :1;
        unsigned PID1K115               :1;
    };
    struct {
        unsigned K18                    :1;
        unsigned K19                    :1;
        unsigned K110                   :1;
        unsigned K111                   :1;
        unsigned K112                   :1;
        unsigned K113                   :1;
        unsigned K114                   :1;
        unsigned K115                   :1;
    };
} PID1K1Hbits_t;
extern volatile PID1K1Hbits_t PID1K1Hbits __at(0x591);
// bitfield macros
#define _PID1K1H_PID1K18_POSN                               0x0
#define _PID1K1H_PID1K18_POSITION                           0x0
#define _PID1K1H_PID1K18_SIZE                               0x1
#define _PID1K1H_PID1K18_LENGTH                             0x1
#define _PID1K1H_PID1K18_MASK                               0x1
#define _PID1K1H_PID1K19_POSN                               0x1
#define _PID1K1H_PID1K19_POSITION                           0x1
#define _PID1K1H_PID1K19_SIZE                               0x1
#define _PID1K1H_PID1K19_LENGTH                             0x1
#define _PID1K1H_PID1K19_MASK                               0x2
#define _PID1K1H_PID1K110_POSN                              0x2
#define _PID1K1H_PID1K110_POSITION                          0x2
#define _PID1K1H_PID1K110_SIZE                              0x1
#define _PID1K1H_PID1K110_LENGTH                            0x1
#define _PID1K1H_PID1K110_MASK                              0x4
#define _PID1K1H_PID1K111_POSN                              0x3
#define _PID1K1H_PID1K111_POSITION                          0x3
#define _PID1K1H_PID1K111_SIZE                              0x1
#define _PID1K1H_PID1K111_LENGTH                            0x1
#define _PID1K1H_PID1K111_MASK                              0x8
#define _PID1K1H_PID1K112_POSN                              0x4
#define _PID1K1H_PID1K112_POSITION                          0x4
#define _PID1K1H_PID1K112_SIZE                              0x1
#define _PID1K1H_PID1K112_LENGTH                            0x1
#define _PID1K1H_PID1K112_MASK                              0x10
#define _PID1K1H_PID1K113_POSN                              0x5
#define _PID1K1H_PID1K113_POSITION                          0x5
#define _PID1K1H_PID1K113_SIZE                              0x1
#define _PID1K1H_PID1K113_LENGTH                            0x1
#define _PID1K1H_PID1K113_MASK                              0x20
#define _PID1K1H_PID1K114_POSN                              0x6
#define _PID1K1H_PID1K114_POSITION                          0x6
#define _PID1K1H_PID1K114_SIZE                              0x1
#define _PID1K1H_PID1K114_LENGTH                            0x1
#define _PID1K1H_PID1K114_MASK                              0x40
#define _PID1K1H_PID1K115_POSN                              0x7
#define _PID1K1H_PID1K115_POSITION                          0x7
#define _PID1K1H_PID1K115_SIZE                              0x1
#define _PID1K1H_PID1K115_LENGTH                            0x1
#define _PID1K1H_PID1K115_MASK                              0x80
#define _PID1K1H_K18_POSN                                   0x0
#define _PID1K1H_K18_POSITION                               0x0
#define _PID1K1H_K18_SIZE                                   0x1
#define _PID1K1H_K18_LENGTH                                 0x1
#define _PID1K1H_K18_MASK                                   0x1
#define _PID1K1H_K19_POSN                                   0x1
#define _PID1K1H_K19_POSITION                               0x1
#define _PID1K1H_K19_SIZE                                   0x1
#define _PID1K1H_K19_LENGTH                                 0x1
#define _PID1K1H_K19_MASK                                   0x2
#define _PID1K1H_K110_POSN                                  0x2
#define _PID1K1H_K110_POSITION                              0x2
#define _PID1K1H_K110_SIZE                                  0x1
#define _PID1K1H_K110_LENGTH                                0x1
#define _PID1K1H_K110_MASK                                  0x4
#define _PID1K1H_K111_POSN                                  0x3
#define _PID1K1H_K111_POSITION                              0x3
#define _PID1K1H_K111_SIZE                                  0x1
#define _PID1K1H_K111_LENGTH                                0x1
#define _PID1K1H_K111_MASK                                  0x8
#define _PID1K1H_K112_POSN                                  0x4
#define _PID1K1H_K112_POSITION                              0x4
#define _PID1K1H_K112_SIZE                                  0x1
#define _PID1K1H_K112_LENGTH                                0x1
#define _PID1K1H_K112_MASK                                  0x10
#define _PID1K1H_K113_POSN                                  0x5
#define _PID1K1H_K113_POSITION                              0x5
#define _PID1K1H_K113_SIZE                                  0x1
#define _PID1K1H_K113_LENGTH                                0x1
#define _PID1K1H_K113_MASK                                  0x20
#define _PID1K1H_K114_POSN                                  0x6
#define _PID1K1H_K114_POSITION                              0x6
#define _PID1K1H_K114_SIZE                                  0x1
#define _PID1K1H_K114_LENGTH                                0x1
#define _PID1K1H_K114_MASK                                  0x40
#define _PID1K1H_K115_POSN                                  0x7
#define _PID1K1H_K115_POSITION                              0x7
#define _PID1K1H_K115_SIZE                                  0x1
#define _PID1K1H_K115_LENGTH                                0x1
#define _PID1K1H_K115_MASK                                  0x80

// Register: PID1K2
#define PID1K2 PID1K2
extern volatile unsigned short          PID1K2              __at(0x592);
#ifndef _LIB_BUILD
asm("PID1K2 equ 0592h");
#endif

// Register: PID1K2L
#define PID1K2L PID1K2L
extern volatile unsigned char           PID1K2L             __at(0x592);
#ifndef _LIB_BUILD
asm("PID1K2L equ 0592h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K20                :1;
        unsigned PID1K21                :1;
        unsigned PID1K22                :1;
        unsigned PID1K23                :1;
        unsigned PID1K24                :1;
        unsigned PID1K25                :1;
        unsigned PID1K26                :1;
        unsigned PID1K27                :1;
    };
    struct {
        unsigned K20                    :1;
        unsigned K21                    :1;
        unsigned K22                    :1;
        unsigned K23                    :1;
        unsigned K24                    :1;
        unsigned K25                    :1;
        unsigned K26                    :1;
        unsigned K27                    :1;
    };
} PID1K2Lbits_t;
extern volatile PID1K2Lbits_t PID1K2Lbits __at(0x592);
// bitfield macros
#define _PID1K2L_PID1K20_POSN                               0x0
#define _PID1K2L_PID1K20_POSITION                           0x0
#define _PID1K2L_PID1K20_SIZE                               0x1
#define _PID1K2L_PID1K20_LENGTH                             0x1
#define _PID1K2L_PID1K20_MASK                               0x1
#define _PID1K2L_PID1K21_POSN                               0x1
#define _PID1K2L_PID1K21_POSITION                           0x1
#define _PID1K2L_PID1K21_SIZE                               0x1
#define _PID1K2L_PID1K21_LENGTH                             0x1
#define _PID1K2L_PID1K21_MASK                               0x2
#define _PID1K2L_PID1K22_POSN                               0x2
#define _PID1K2L_PID1K22_POSITION                           0x2
#define _PID1K2L_PID1K22_SIZE                               0x1
#define _PID1K2L_PID1K22_LENGTH                             0x1
#define _PID1K2L_PID1K22_MASK                               0x4
#define _PID1K2L_PID1K23_POSN                               0x3
#define _PID1K2L_PID1K23_POSITION                           0x3
#define _PID1K2L_PID1K23_SIZE                               0x1
#define _PID1K2L_PID1K23_LENGTH                             0x1
#define _PID1K2L_PID1K23_MASK                               0x8
#define _PID1K2L_PID1K24_POSN                               0x4
#define _PID1K2L_PID1K24_POSITION                           0x4
#define _PID1K2L_PID1K24_SIZE                               0x1
#define _PID1K2L_PID1K24_LENGTH                             0x1
#define _PID1K2L_PID1K24_MASK                               0x10
#define _PID1K2L_PID1K25_POSN                               0x5
#define _PID1K2L_PID1K25_POSITION                           0x5
#define _PID1K2L_PID1K25_SIZE                               0x1
#define _PID1K2L_PID1K25_LENGTH                             0x1
#define _PID1K2L_PID1K25_MASK                               0x20
#define _PID1K2L_PID1K26_POSN                               0x6
#define _PID1K2L_PID1K26_POSITION                           0x6
#define _PID1K2L_PID1K26_SIZE                               0x1
#define _PID1K2L_PID1K26_LENGTH                             0x1
#define _PID1K2L_PID1K26_MASK                               0x40
#define _PID1K2L_PID1K27_POSN                               0x7
#define _PID1K2L_PID1K27_POSITION                           0x7
#define _PID1K2L_PID1K27_SIZE                               0x1
#define _PID1K2L_PID1K27_LENGTH                             0x1
#define _PID1K2L_PID1K27_MASK                               0x80
#define _PID1K2L_K20_POSN                                   0x0
#define _PID1K2L_K20_POSITION                               0x0
#define _PID1K2L_K20_SIZE                                   0x1
#define _PID1K2L_K20_LENGTH                                 0x1
#define _PID1K2L_K20_MASK                                   0x1
#define _PID1K2L_K21_POSN                                   0x1
#define _PID1K2L_K21_POSITION                               0x1
#define _PID1K2L_K21_SIZE                                   0x1
#define _PID1K2L_K21_LENGTH                                 0x1
#define _PID1K2L_K21_MASK                                   0x2
#define _PID1K2L_K22_POSN                                   0x2
#define _PID1K2L_K22_POSITION                               0x2
#define _PID1K2L_K22_SIZE                                   0x1
#define _PID1K2L_K22_LENGTH                                 0x1
#define _PID1K2L_K22_MASK                                   0x4
#define _PID1K2L_K23_POSN                                   0x3
#define _PID1K2L_K23_POSITION                               0x3
#define _PID1K2L_K23_SIZE                                   0x1
#define _PID1K2L_K23_LENGTH                                 0x1
#define _PID1K2L_K23_MASK                                   0x8
#define _PID1K2L_K24_POSN                                   0x4
#define _PID1K2L_K24_POSITION                               0x4
#define _PID1K2L_K24_SIZE                                   0x1
#define _PID1K2L_K24_LENGTH                                 0x1
#define _PID1K2L_K24_MASK                                   0x10
#define _PID1K2L_K25_POSN                                   0x5
#define _PID1K2L_K25_POSITION                               0x5
#define _PID1K2L_K25_SIZE                                   0x1
#define _PID1K2L_K25_LENGTH                                 0x1
#define _PID1K2L_K25_MASK                                   0x20
#define _PID1K2L_K26_POSN                                   0x6
#define _PID1K2L_K26_POSITION                               0x6
#define _PID1K2L_K26_SIZE                                   0x1
#define _PID1K2L_K26_LENGTH                                 0x1
#define _PID1K2L_K26_MASK                                   0x40
#define _PID1K2L_K27_POSN                                   0x7
#define _PID1K2L_K27_POSITION                               0x7
#define _PID1K2L_K27_SIZE                                   0x1
#define _PID1K2L_K27_LENGTH                                 0x1
#define _PID1K2L_K27_MASK                                   0x80

// Register: PID1K2H
#define PID1K2H PID1K2H
extern volatile unsigned char           PID1K2H             __at(0x593);
#ifndef _LIB_BUILD
asm("PID1K2H equ 0593h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K28                :1;
        unsigned PID1K29                :1;
        unsigned PID1K210               :1;
        unsigned PID1K211               :1;
        unsigned PID1K212               :1;
        unsigned PID1K213               :1;
        unsigned PID1K214               :1;
        unsigned PID1K215               :1;
    };
    struct {
        unsigned K28                    :1;
        unsigned K29                    :1;
        unsigned K210                   :1;
        unsigned K211                   :1;
        unsigned K212                   :1;
        unsigned K213                   :1;
        unsigned K214                   :1;
        unsigned K215                   :1;
    };
} PID1K2Hbits_t;
extern volatile PID1K2Hbits_t PID1K2Hbits __at(0x593);
// bitfield macros
#define _PID1K2H_PID1K28_POSN                               0x0
#define _PID1K2H_PID1K28_POSITION                           0x0
#define _PID1K2H_PID1K28_SIZE                               0x1
#define _PID1K2H_PID1K28_LENGTH                             0x1
#define _PID1K2H_PID1K28_MASK                               0x1
#define _PID1K2H_PID1K29_POSN                               0x1
#define _PID1K2H_PID1K29_POSITION                           0x1
#define _PID1K2H_PID1K29_SIZE                               0x1
#define _PID1K2H_PID1K29_LENGTH                             0x1
#define _PID1K2H_PID1K29_MASK                               0x2
#define _PID1K2H_PID1K210_POSN                              0x2
#define _PID1K2H_PID1K210_POSITION                          0x2
#define _PID1K2H_PID1K210_SIZE                              0x1
#define _PID1K2H_PID1K210_LENGTH                            0x1
#define _PID1K2H_PID1K210_MASK                              0x4
#define _PID1K2H_PID1K211_POSN                              0x3
#define _PID1K2H_PID1K211_POSITION                          0x3
#define _PID1K2H_PID1K211_SIZE                              0x1
#define _PID1K2H_PID1K211_LENGTH                            0x1
#define _PID1K2H_PID1K211_MASK                              0x8
#define _PID1K2H_PID1K212_POSN                              0x4
#define _PID1K2H_PID1K212_POSITION                          0x4
#define _PID1K2H_PID1K212_SIZE                              0x1
#define _PID1K2H_PID1K212_LENGTH                            0x1
#define _PID1K2H_PID1K212_MASK                              0x10
#define _PID1K2H_PID1K213_POSN                              0x5
#define _PID1K2H_PID1K213_POSITION                          0x5
#define _PID1K2H_PID1K213_SIZE                              0x1
#define _PID1K2H_PID1K213_LENGTH                            0x1
#define _PID1K2H_PID1K213_MASK                              0x20
#define _PID1K2H_PID1K214_POSN                              0x6
#define _PID1K2H_PID1K214_POSITION                          0x6
#define _PID1K2H_PID1K214_SIZE                              0x1
#define _PID1K2H_PID1K214_LENGTH                            0x1
#define _PID1K2H_PID1K214_MASK                              0x40
#define _PID1K2H_PID1K215_POSN                              0x7
#define _PID1K2H_PID1K215_POSITION                          0x7
#define _PID1K2H_PID1K215_SIZE                              0x1
#define _PID1K2H_PID1K215_LENGTH                            0x1
#define _PID1K2H_PID1K215_MASK                              0x80
#define _PID1K2H_K28_POSN                                   0x0
#define _PID1K2H_K28_POSITION                               0x0
#define _PID1K2H_K28_SIZE                                   0x1
#define _PID1K2H_K28_LENGTH                                 0x1
#define _PID1K2H_K28_MASK                                   0x1
#define _PID1K2H_K29_POSN                                   0x1
#define _PID1K2H_K29_POSITION                               0x1
#define _PID1K2H_K29_SIZE                                   0x1
#define _PID1K2H_K29_LENGTH                                 0x1
#define _PID1K2H_K29_MASK                                   0x2
#define _PID1K2H_K210_POSN                                  0x2
#define _PID1K2H_K210_POSITION                              0x2
#define _PID1K2H_K210_SIZE                                  0x1
#define _PID1K2H_K210_LENGTH                                0x1
#define _PID1K2H_K210_MASK                                  0x4
#define _PID1K2H_K211_POSN                                  0x3
#define _PID1K2H_K211_POSITION                              0x3
#define _PID1K2H_K211_SIZE                                  0x1
#define _PID1K2H_K211_LENGTH                                0x1
#define _PID1K2H_K211_MASK                                  0x8
#define _PID1K2H_K212_POSN                                  0x4
#define _PID1K2H_K212_POSITION                              0x4
#define _PID1K2H_K212_SIZE                                  0x1
#define _PID1K2H_K212_LENGTH                                0x1
#define _PID1K2H_K212_MASK                                  0x10
#define _PID1K2H_K213_POSN                                  0x5
#define _PID1K2H_K213_POSITION                              0x5
#define _PID1K2H_K213_SIZE                                  0x1
#define _PID1K2H_K213_LENGTH                                0x1
#define _PID1K2H_K213_MASK                                  0x20
#define _PID1K2H_K214_POSN                                  0x6
#define _PID1K2H_K214_POSITION                              0x6
#define _PID1K2H_K214_SIZE                                  0x1
#define _PID1K2H_K214_LENGTH                                0x1
#define _PID1K2H_K214_MASK                                  0x40
#define _PID1K2H_K215_POSN                                  0x7
#define _PID1K2H_K215_POSITION                              0x7
#define _PID1K2H_K215_SIZE                                  0x1
#define _PID1K2H_K215_LENGTH                                0x1
#define _PID1K2H_K215_MASK                                  0x80

// Register: PID1K3
#define PID1K3 PID1K3
extern volatile unsigned short          PID1K3              __at(0x594);
#ifndef _LIB_BUILD
asm("PID1K3 equ 0594h");
#endif

// Register: PID1K3L
#define PID1K3L PID1K3L
extern volatile unsigned char           PID1K3L             __at(0x594);
#ifndef _LIB_BUILD
asm("PID1K3L equ 0594h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K30                :1;
        unsigned PID1K31                :1;
        unsigned PID1K32                :1;
        unsigned PID1K33                :1;
        unsigned PID1K34                :1;
        unsigned PID1K35                :1;
        unsigned PID1K36                :1;
        unsigned PID1K37                :1;
    };
    struct {
        unsigned K30                    :1;
        unsigned K31                    :1;
        unsigned K32                    :1;
        unsigned K33                    :1;
        unsigned K34                    :1;
        unsigned K35                    :1;
        unsigned K36                    :1;
        unsigned K37                    :1;
    };
} PID1K3Lbits_t;
extern volatile PID1K3Lbits_t PID1K3Lbits __at(0x594);
// bitfield macros
#define _PID1K3L_PID1K30_POSN                               0x0
#define _PID1K3L_PID1K30_POSITION                           0x0
#define _PID1K3L_PID1K30_SIZE                               0x1
#define _PID1K3L_PID1K30_LENGTH                             0x1
#define _PID1K3L_PID1K30_MASK                               0x1
#define _PID1K3L_PID1K31_POSN                               0x1
#define _PID1K3L_PID1K31_POSITION                           0x1
#define _PID1K3L_PID1K31_SIZE                               0x1
#define _PID1K3L_PID1K31_LENGTH                             0x1
#define _PID1K3L_PID1K31_MASK                               0x2
#define _PID1K3L_PID1K32_POSN                               0x2
#define _PID1K3L_PID1K32_POSITION                           0x2
#define _PID1K3L_PID1K32_SIZE                               0x1
#define _PID1K3L_PID1K32_LENGTH                             0x1
#define _PID1K3L_PID1K32_MASK                               0x4
#define _PID1K3L_PID1K33_POSN                               0x3
#define _PID1K3L_PID1K33_POSITION                           0x3
#define _PID1K3L_PID1K33_SIZE                               0x1
#define _PID1K3L_PID1K33_LENGTH                             0x1
#define _PID1K3L_PID1K33_MASK                               0x8
#define _PID1K3L_PID1K34_POSN                               0x4
#define _PID1K3L_PID1K34_POSITION                           0x4
#define _PID1K3L_PID1K34_SIZE                               0x1
#define _PID1K3L_PID1K34_LENGTH                             0x1
#define _PID1K3L_PID1K34_MASK                               0x10
#define _PID1K3L_PID1K35_POSN                               0x5
#define _PID1K3L_PID1K35_POSITION                           0x5
#define _PID1K3L_PID1K35_SIZE                               0x1
#define _PID1K3L_PID1K35_LENGTH                             0x1
#define _PID1K3L_PID1K35_MASK                               0x20
#define _PID1K3L_PID1K36_POSN                               0x6
#define _PID1K3L_PID1K36_POSITION                           0x6
#define _PID1K3L_PID1K36_SIZE                               0x1
#define _PID1K3L_PID1K36_LENGTH                             0x1
#define _PID1K3L_PID1K36_MASK                               0x40
#define _PID1K3L_PID1K37_POSN                               0x7
#define _PID1K3L_PID1K37_POSITION                           0x7
#define _PID1K3L_PID1K37_SIZE                               0x1
#define _PID1K3L_PID1K37_LENGTH                             0x1
#define _PID1K3L_PID1K37_MASK                               0x80
#define _PID1K3L_K30_POSN                                   0x0
#define _PID1K3L_K30_POSITION                               0x0
#define _PID1K3L_K30_SIZE                                   0x1
#define _PID1K3L_K30_LENGTH                                 0x1
#define _PID1K3L_K30_MASK                                   0x1
#define _PID1K3L_K31_POSN                                   0x1
#define _PID1K3L_K31_POSITION                               0x1
#define _PID1K3L_K31_SIZE                                   0x1
#define _PID1K3L_K31_LENGTH                                 0x1
#define _PID1K3L_K31_MASK                                   0x2
#define _PID1K3L_K32_POSN                                   0x2
#define _PID1K3L_K32_POSITION                               0x2
#define _PID1K3L_K32_SIZE                                   0x1
#define _PID1K3L_K32_LENGTH                                 0x1
#define _PID1K3L_K32_MASK                                   0x4
#define _PID1K3L_K33_POSN                                   0x3
#define _PID1K3L_K33_POSITION                               0x3
#define _PID1K3L_K33_SIZE                                   0x1
#define _PID1K3L_K33_LENGTH                                 0x1
#define _PID1K3L_K33_MASK                                   0x8
#define _PID1K3L_K34_POSN                                   0x4
#define _PID1K3L_K34_POSITION                               0x4
#define _PID1K3L_K34_SIZE                                   0x1
#define _PID1K3L_K34_LENGTH                                 0x1
#define _PID1K3L_K34_MASK                                   0x10
#define _PID1K3L_K35_POSN                                   0x5
#define _PID1K3L_K35_POSITION                               0x5
#define _PID1K3L_K35_SIZE                                   0x1
#define _PID1K3L_K35_LENGTH                                 0x1
#define _PID1K3L_K35_MASK                                   0x20
#define _PID1K3L_K36_POSN                                   0x6
#define _PID1K3L_K36_POSITION                               0x6
#define _PID1K3L_K36_SIZE                                   0x1
#define _PID1K3L_K36_LENGTH                                 0x1
#define _PID1K3L_K36_MASK                                   0x40
#define _PID1K3L_K37_POSN                                   0x7
#define _PID1K3L_K37_POSITION                               0x7
#define _PID1K3L_K37_SIZE                                   0x1
#define _PID1K3L_K37_LENGTH                                 0x1
#define _PID1K3L_K37_MASK                                   0x80

// Register: PID1K3H
#define PID1K3H PID1K3H
extern volatile unsigned char           PID1K3H             __at(0x595);
#ifndef _LIB_BUILD
asm("PID1K3H equ 0595h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1K38                :1;
        unsigned PID1K39                :1;
        unsigned PID1K310               :1;
        unsigned PID1K311               :1;
        unsigned PID1K312               :1;
        unsigned PID1K313               :1;
        unsigned PID1K314               :1;
        unsigned PID1K315               :1;
    };
    struct {
        unsigned K38                    :1;
        unsigned K39                    :1;
        unsigned K310                   :1;
        unsigned K311                   :1;
        unsigned K312                   :1;
        unsigned K313                   :1;
        unsigned K314                   :1;
        unsigned K315                   :1;
    };
} PID1K3Hbits_t;
extern volatile PID1K3Hbits_t PID1K3Hbits __at(0x595);
// bitfield macros
#define _PID1K3H_PID1K38_POSN                               0x0
#define _PID1K3H_PID1K38_POSITION                           0x0
#define _PID1K3H_PID1K38_SIZE                               0x1
#define _PID1K3H_PID1K38_LENGTH                             0x1
#define _PID1K3H_PID1K38_MASK                               0x1
#define _PID1K3H_PID1K39_POSN                               0x1
#define _PID1K3H_PID1K39_POSITION                           0x1
#define _PID1K3H_PID1K39_SIZE                               0x1
#define _PID1K3H_PID1K39_LENGTH                             0x1
#define _PID1K3H_PID1K39_MASK                               0x2
#define _PID1K3H_PID1K310_POSN                              0x2
#define _PID1K3H_PID1K310_POSITION                          0x2
#define _PID1K3H_PID1K310_SIZE                              0x1
#define _PID1K3H_PID1K310_LENGTH                            0x1
#define _PID1K3H_PID1K310_MASK                              0x4
#define _PID1K3H_PID1K311_POSN                              0x3
#define _PID1K3H_PID1K311_POSITION                          0x3
#define _PID1K3H_PID1K311_SIZE                              0x1
#define _PID1K3H_PID1K311_LENGTH                            0x1
#define _PID1K3H_PID1K311_MASK                              0x8
#define _PID1K3H_PID1K312_POSN                              0x4
#define _PID1K3H_PID1K312_POSITION                          0x4
#define _PID1K3H_PID1K312_SIZE                              0x1
#define _PID1K3H_PID1K312_LENGTH                            0x1
#define _PID1K3H_PID1K312_MASK                              0x10
#define _PID1K3H_PID1K313_POSN                              0x5
#define _PID1K3H_PID1K313_POSITION                          0x5
#define _PID1K3H_PID1K313_SIZE                              0x1
#define _PID1K3H_PID1K313_LENGTH                            0x1
#define _PID1K3H_PID1K313_MASK                              0x20
#define _PID1K3H_PID1K314_POSN                              0x6
#define _PID1K3H_PID1K314_POSITION                          0x6
#define _PID1K3H_PID1K314_SIZE                              0x1
#define _PID1K3H_PID1K314_LENGTH                            0x1
#define _PID1K3H_PID1K314_MASK                              0x40
#define _PID1K3H_PID1K315_POSN                              0x7
#define _PID1K3H_PID1K315_POSITION                          0x7
#define _PID1K3H_PID1K315_SIZE                              0x1
#define _PID1K3H_PID1K315_LENGTH                            0x1
#define _PID1K3H_PID1K315_MASK                              0x80
#define _PID1K3H_K38_POSN                                   0x0
#define _PID1K3H_K38_POSITION                               0x0
#define _PID1K3H_K38_SIZE                                   0x1
#define _PID1K3H_K38_LENGTH                                 0x1
#define _PID1K3H_K38_MASK                                   0x1
#define _PID1K3H_K39_POSN                                   0x1
#define _PID1K3H_K39_POSITION                               0x1
#define _PID1K3H_K39_SIZE                                   0x1
#define _PID1K3H_K39_LENGTH                                 0x1
#define _PID1K3H_K39_MASK                                   0x2
#define _PID1K3H_K310_POSN                                  0x2
#define _PID1K3H_K310_POSITION                              0x2
#define _PID1K3H_K310_SIZE                                  0x1
#define _PID1K3H_K310_LENGTH                                0x1
#define _PID1K3H_K310_MASK                                  0x4
#define _PID1K3H_K311_POSN                                  0x3
#define _PID1K3H_K311_POSITION                              0x3
#define _PID1K3H_K311_SIZE                                  0x1
#define _PID1K3H_K311_LENGTH                                0x1
#define _PID1K3H_K311_MASK                                  0x8
#define _PID1K3H_K312_POSN                                  0x4
#define _PID1K3H_K312_POSITION                              0x4
#define _PID1K3H_K312_SIZE                                  0x1
#define _PID1K3H_K312_LENGTH                                0x1
#define _PID1K3H_K312_MASK                                  0x10
#define _PID1K3H_K313_POSN                                  0x5
#define _PID1K3H_K313_POSITION                              0x5
#define _PID1K3H_K313_SIZE                                  0x1
#define _PID1K3H_K313_LENGTH                                0x1
#define _PID1K3H_K313_MASK                                  0x20
#define _PID1K3H_K314_POSN                                  0x6
#define _PID1K3H_K314_POSITION                              0x6
#define _PID1K3H_K314_SIZE                                  0x1
#define _PID1K3H_K314_LENGTH                                0x1
#define _PID1K3H_K314_MASK                                  0x40
#define _PID1K3H_K315_POSN                                  0x7
#define _PID1K3H_K315_POSITION                              0x7
#define _PID1K3H_K315_SIZE                                  0x1
#define _PID1K3H_K315_LENGTH                                0x1
#define _PID1K3H_K315_MASK                                  0x80

// Register: PID1OUT
#define PID1OUT PID1OUT
#ifndef _LIB_BUILD
asm("PID1OUT equ 0596h");
#endif

// Register: PID1OUTLL
#define PID1OUTLL PID1OUTLL
extern volatile unsigned char           PID1OUTLL           __at(0x596);
#ifndef _LIB_BUILD
asm("PID1OUTLL equ 0596h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1OUT0               :1;
        unsigned PID1OUT1               :1;
        unsigned PID1OUT2               :1;
        unsigned PID1OUT3               :1;
        unsigned PID1OUT4               :1;
        unsigned PID1OUT5               :1;
        unsigned PID1OUT6               :1;
        unsigned PID1OUT7               :1;
    };
    struct {
        unsigned OUT0                   :1;
        unsigned OUT1                   :1;
        unsigned OUT2                   :1;
        unsigned OUT3                   :1;
        unsigned OUT4                   :1;
        unsigned OUT5                   :1;
        unsigned OUT6                   :1;
        unsigned OUT7                   :1;
    };
} PID1OUTLLbits_t;
extern volatile PID1OUTLLbits_t PID1OUTLLbits __at(0x596);
// bitfield macros
#define _PID1OUTLL_PID1OUT0_POSN                            0x0
#define _PID1OUTLL_PID1OUT0_POSITION                        0x0
#define _PID1OUTLL_PID1OUT0_SIZE                            0x1
#define _PID1OUTLL_PID1OUT0_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT0_MASK                            0x1
#define _PID1OUTLL_PID1OUT1_POSN                            0x1
#define _PID1OUTLL_PID1OUT1_POSITION                        0x1
#define _PID1OUTLL_PID1OUT1_SIZE                            0x1
#define _PID1OUTLL_PID1OUT1_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT1_MASK                            0x2
#define _PID1OUTLL_PID1OUT2_POSN                            0x2
#define _PID1OUTLL_PID1OUT2_POSITION                        0x2
#define _PID1OUTLL_PID1OUT2_SIZE                            0x1
#define _PID1OUTLL_PID1OUT2_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT2_MASK                            0x4
#define _PID1OUTLL_PID1OUT3_POSN                            0x3
#define _PID1OUTLL_PID1OUT3_POSITION                        0x3
#define _PID1OUTLL_PID1OUT3_SIZE                            0x1
#define _PID1OUTLL_PID1OUT3_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT3_MASK                            0x8
#define _PID1OUTLL_PID1OUT4_POSN                            0x4
#define _PID1OUTLL_PID1OUT4_POSITION                        0x4
#define _PID1OUTLL_PID1OUT4_SIZE                            0x1
#define _PID1OUTLL_PID1OUT4_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT4_MASK                            0x10
#define _PID1OUTLL_PID1OUT5_POSN                            0x5
#define _PID1OUTLL_PID1OUT5_POSITION                        0x5
#define _PID1OUTLL_PID1OUT5_SIZE                            0x1
#define _PID1OUTLL_PID1OUT5_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT5_MASK                            0x20
#define _PID1OUTLL_PID1OUT6_POSN                            0x6
#define _PID1OUTLL_PID1OUT6_POSITION                        0x6
#define _PID1OUTLL_PID1OUT6_SIZE                            0x1
#define _PID1OUTLL_PID1OUT6_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT6_MASK                            0x40
#define _PID1OUTLL_PID1OUT7_POSN                            0x7
#define _PID1OUTLL_PID1OUT7_POSITION                        0x7
#define _PID1OUTLL_PID1OUT7_SIZE                            0x1
#define _PID1OUTLL_PID1OUT7_LENGTH                          0x1
#define _PID1OUTLL_PID1OUT7_MASK                            0x80
#define _PID1OUTLL_OUT0_POSN                                0x0
#define _PID1OUTLL_OUT0_POSITION                            0x0
#define _PID1OUTLL_OUT0_SIZE                                0x1
#define _PID1OUTLL_OUT0_LENGTH                              0x1
#define _PID1OUTLL_OUT0_MASK                                0x1
#define _PID1OUTLL_OUT1_POSN                                0x1
#define _PID1OUTLL_OUT1_POSITION                            0x1
#define _PID1OUTLL_OUT1_SIZE                                0x1
#define _PID1OUTLL_OUT1_LENGTH                              0x1
#define _PID1OUTLL_OUT1_MASK                                0x2
#define _PID1OUTLL_OUT2_POSN                                0x2
#define _PID1OUTLL_OUT2_POSITION                            0x2
#define _PID1OUTLL_OUT2_SIZE                                0x1
#define _PID1OUTLL_OUT2_LENGTH                              0x1
#define _PID1OUTLL_OUT2_MASK                                0x4
#define _PID1OUTLL_OUT3_POSN                                0x3
#define _PID1OUTLL_OUT3_POSITION                            0x3
#define _PID1OUTLL_OUT3_SIZE                                0x1
#define _PID1OUTLL_OUT3_LENGTH                              0x1
#define _PID1OUTLL_OUT3_MASK                                0x8
#define _PID1OUTLL_OUT4_POSN                                0x4
#define _PID1OUTLL_OUT4_POSITION                            0x4
#define _PID1OUTLL_OUT4_SIZE                                0x1
#define _PID1OUTLL_OUT4_LENGTH                              0x1
#define _PID1OUTLL_OUT4_MASK                                0x10
#define _PID1OUTLL_OUT5_POSN                                0x5
#define _PID1OUTLL_OUT5_POSITION                            0x5
#define _PID1OUTLL_OUT5_SIZE                                0x1
#define _PID1OUTLL_OUT5_LENGTH                              0x1
#define _PID1OUTLL_OUT5_MASK                                0x20
#define _PID1OUTLL_OUT6_POSN                                0x6
#define _PID1OUTLL_OUT6_POSITION                            0x6
#define _PID1OUTLL_OUT6_SIZE                                0x1
#define _PID1OUTLL_OUT6_LENGTH                              0x1
#define _PID1OUTLL_OUT6_MASK                                0x40
#define _PID1OUTLL_OUT7_POSN                                0x7
#define _PID1OUTLL_OUT7_POSITION                            0x7
#define _PID1OUTLL_OUT7_SIZE                                0x1
#define _PID1OUTLL_OUT7_LENGTH                              0x1
#define _PID1OUTLL_OUT7_MASK                                0x80

// Register: PID1OUTLH
#define PID1OUTLH PID1OUTLH
extern volatile unsigned char           PID1OUTLH           __at(0x597);
#ifndef _LIB_BUILD
asm("PID1OUTLH equ 0597h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1OUT8               :1;
        unsigned PID1OUT9               :1;
        unsigned PID1OUT10              :1;
        unsigned PID1OUT11              :1;
        unsigned PID1OUT12              :1;
        unsigned PID1OUT13              :1;
        unsigned PID1OUT14              :1;
        unsigned PID1OUT15              :1;
    };
    struct {
        unsigned OUT8                   :1;
        unsigned OUT9                   :1;
        unsigned OUT10                  :1;
        unsigned OUT11                  :1;
        unsigned OUT12                  :1;
        unsigned OUT13                  :1;
        unsigned OUT14                  :1;
        unsigned OUT15                  :1;
    };
} PID1OUTLHbits_t;
extern volatile PID1OUTLHbits_t PID1OUTLHbits __at(0x597);
// bitfield macros
#define _PID1OUTLH_PID1OUT8_POSN                            0x0
#define _PID1OUTLH_PID1OUT8_POSITION                        0x0
#define _PID1OUTLH_PID1OUT8_SIZE                            0x1
#define _PID1OUTLH_PID1OUT8_LENGTH                          0x1
#define _PID1OUTLH_PID1OUT8_MASK                            0x1
#define _PID1OUTLH_PID1OUT9_POSN                            0x1
#define _PID1OUTLH_PID1OUT9_POSITION                        0x1
#define _PID1OUTLH_PID1OUT9_SIZE                            0x1
#define _PID1OUTLH_PID1OUT9_LENGTH                          0x1
#define _PID1OUTLH_PID1OUT9_MASK                            0x2
#define _PID1OUTLH_PID1OUT10_POSN                           0x2
#define _PID1OUTLH_PID1OUT10_POSITION                       0x2
#define _PID1OUTLH_PID1OUT10_SIZE                           0x1
#define _PID1OUTLH_PID1OUT10_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT10_MASK                           0x4
#define _PID1OUTLH_PID1OUT11_POSN                           0x3
#define _PID1OUTLH_PID1OUT11_POSITION                       0x3
#define _PID1OUTLH_PID1OUT11_SIZE                           0x1
#define _PID1OUTLH_PID1OUT11_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT11_MASK                           0x8
#define _PID1OUTLH_PID1OUT12_POSN                           0x4
#define _PID1OUTLH_PID1OUT12_POSITION                       0x4
#define _PID1OUTLH_PID1OUT12_SIZE                           0x1
#define _PID1OUTLH_PID1OUT12_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT12_MASK                           0x10
#define _PID1OUTLH_PID1OUT13_POSN                           0x5
#define _PID1OUTLH_PID1OUT13_POSITION                       0x5
#define _PID1OUTLH_PID1OUT13_SIZE                           0x1
#define _PID1OUTLH_PID1OUT13_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT13_MASK                           0x20
#define _PID1OUTLH_PID1OUT14_POSN                           0x6
#define _PID1OUTLH_PID1OUT14_POSITION                       0x6
#define _PID1OUTLH_PID1OUT14_SIZE                           0x1
#define _PID1OUTLH_PID1OUT14_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT14_MASK                           0x40
#define _PID1OUTLH_PID1OUT15_POSN                           0x7
#define _PID1OUTLH_PID1OUT15_POSITION                       0x7
#define _PID1OUTLH_PID1OUT15_SIZE                           0x1
#define _PID1OUTLH_PID1OUT15_LENGTH                         0x1
#define _PID1OUTLH_PID1OUT15_MASK                           0x80
#define _PID1OUTLH_OUT8_POSN                                0x0
#define _PID1OUTLH_OUT8_POSITION                            0x0
#define _PID1OUTLH_OUT8_SIZE                                0x1
#define _PID1OUTLH_OUT8_LENGTH                              0x1
#define _PID1OUTLH_OUT8_MASK                                0x1
#define _PID1OUTLH_OUT9_POSN                                0x1
#define _PID1OUTLH_OUT9_POSITION                            0x1
#define _PID1OUTLH_OUT9_SIZE                                0x1
#define _PID1OUTLH_OUT9_LENGTH                              0x1
#define _PID1OUTLH_OUT9_MASK                                0x2
#define _PID1OUTLH_OUT10_POSN                               0x2
#define _PID1OUTLH_OUT10_POSITION                           0x2
#define _PID1OUTLH_OUT10_SIZE                               0x1
#define _PID1OUTLH_OUT10_LENGTH                             0x1
#define _PID1OUTLH_OUT10_MASK                               0x4
#define _PID1OUTLH_OUT11_POSN                               0x3
#define _PID1OUTLH_OUT11_POSITION                           0x3
#define _PID1OUTLH_OUT11_SIZE                               0x1
#define _PID1OUTLH_OUT11_LENGTH                             0x1
#define _PID1OUTLH_OUT11_MASK                               0x8
#define _PID1OUTLH_OUT12_POSN                               0x4
#define _PID1OUTLH_OUT12_POSITION                           0x4
#define _PID1OUTLH_OUT12_SIZE                               0x1
#define _PID1OUTLH_OUT12_LENGTH                             0x1
#define _PID1OUTLH_OUT12_MASK                               0x10
#define _PID1OUTLH_OUT13_POSN                               0x5
#define _PID1OUTLH_OUT13_POSITION                           0x5
#define _PID1OUTLH_OUT13_SIZE                               0x1
#define _PID1OUTLH_OUT13_LENGTH                             0x1
#define _PID1OUTLH_OUT13_MASK                               0x20
#define _PID1OUTLH_OUT14_POSN                               0x6
#define _PID1OUTLH_OUT14_POSITION                           0x6
#define _PID1OUTLH_OUT14_SIZE                               0x1
#define _PID1OUTLH_OUT14_LENGTH                             0x1
#define _PID1OUTLH_OUT14_MASK                               0x40
#define _PID1OUTLH_OUT15_POSN                               0x7
#define _PID1OUTLH_OUT15_POSITION                           0x7
#define _PID1OUTLH_OUT15_SIZE                               0x1
#define _PID1OUTLH_OUT15_LENGTH                             0x1
#define _PID1OUTLH_OUT15_MASK                               0x80

// Register: PID1OUTHL
#define PID1OUTHL PID1OUTHL
extern volatile unsigned char           PID1OUTHL           __at(0x598);
#ifndef _LIB_BUILD
asm("PID1OUTHL equ 0598h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1OUT16              :1;
        unsigned PID1OUT17              :1;
        unsigned PID1OUT18              :1;
        unsigned PID1OUT19              :1;
        unsigned PID1OUT20              :1;
        unsigned PID1OUT21              :1;
        unsigned PID1OUT22              :1;
        unsigned PID1OUT23              :1;
    };
    struct {
        unsigned OUT16                  :1;
        unsigned OUT17                  :1;
        unsigned OUT18                  :1;
        unsigned OUT19                  :1;
        unsigned OUT20                  :1;
        unsigned OUT21                  :1;
        unsigned OUT22                  :1;
        unsigned OUT23                  :1;
    };
} PID1OUTHLbits_t;
extern volatile PID1OUTHLbits_t PID1OUTHLbits __at(0x598);
// bitfield macros
#define _PID1OUTHL_PID1OUT16_POSN                           0x0
#define _PID1OUTHL_PID1OUT16_POSITION                       0x0
#define _PID1OUTHL_PID1OUT16_SIZE                           0x1
#define _PID1OUTHL_PID1OUT16_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT16_MASK                           0x1
#define _PID1OUTHL_PID1OUT17_POSN                           0x1
#define _PID1OUTHL_PID1OUT17_POSITION                       0x1
#define _PID1OUTHL_PID1OUT17_SIZE                           0x1
#define _PID1OUTHL_PID1OUT17_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT17_MASK                           0x2
#define _PID1OUTHL_PID1OUT18_POSN                           0x2
#define _PID1OUTHL_PID1OUT18_POSITION                       0x2
#define _PID1OUTHL_PID1OUT18_SIZE                           0x1
#define _PID1OUTHL_PID1OUT18_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT18_MASK                           0x4
#define _PID1OUTHL_PID1OUT19_POSN                           0x3
#define _PID1OUTHL_PID1OUT19_POSITION                       0x3
#define _PID1OUTHL_PID1OUT19_SIZE                           0x1
#define _PID1OUTHL_PID1OUT19_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT19_MASK                           0x8
#define _PID1OUTHL_PID1OUT20_POSN                           0x4
#define _PID1OUTHL_PID1OUT20_POSITION                       0x4
#define _PID1OUTHL_PID1OUT20_SIZE                           0x1
#define _PID1OUTHL_PID1OUT20_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT20_MASK                           0x10
#define _PID1OUTHL_PID1OUT21_POSN                           0x5
#define _PID1OUTHL_PID1OUT21_POSITION                       0x5
#define _PID1OUTHL_PID1OUT21_SIZE                           0x1
#define _PID1OUTHL_PID1OUT21_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT21_MASK                           0x20
#define _PID1OUTHL_PID1OUT22_POSN                           0x6
#define _PID1OUTHL_PID1OUT22_POSITION                       0x6
#define _PID1OUTHL_PID1OUT22_SIZE                           0x1
#define _PID1OUTHL_PID1OUT22_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT22_MASK                           0x40
#define _PID1OUTHL_PID1OUT23_POSN                           0x7
#define _PID1OUTHL_PID1OUT23_POSITION                       0x7
#define _PID1OUTHL_PID1OUT23_SIZE                           0x1
#define _PID1OUTHL_PID1OUT23_LENGTH                         0x1
#define _PID1OUTHL_PID1OUT23_MASK                           0x80
#define _PID1OUTHL_OUT16_POSN                               0x0
#define _PID1OUTHL_OUT16_POSITION                           0x0
#define _PID1OUTHL_OUT16_SIZE                               0x1
#define _PID1OUTHL_OUT16_LENGTH                             0x1
#define _PID1OUTHL_OUT16_MASK                               0x1
#define _PID1OUTHL_OUT17_POSN                               0x1
#define _PID1OUTHL_OUT17_POSITION                           0x1
#define _PID1OUTHL_OUT17_SIZE                               0x1
#define _PID1OUTHL_OUT17_LENGTH                             0x1
#define _PID1OUTHL_OUT17_MASK                               0x2
#define _PID1OUTHL_OUT18_POSN                               0x2
#define _PID1OUTHL_OUT18_POSITION                           0x2
#define _PID1OUTHL_OUT18_SIZE                               0x1
#define _PID1OUTHL_OUT18_LENGTH                             0x1
#define _PID1OUTHL_OUT18_MASK                               0x4
#define _PID1OUTHL_OUT19_POSN                               0x3
#define _PID1OUTHL_OUT19_POSITION                           0x3
#define _PID1OUTHL_OUT19_SIZE                               0x1
#define _PID1OUTHL_OUT19_LENGTH                             0x1
#define _PID1OUTHL_OUT19_MASK                               0x8
#define _PID1OUTHL_OUT20_POSN                               0x4
#define _PID1OUTHL_OUT20_POSITION                           0x4
#define _PID1OUTHL_OUT20_SIZE                               0x1
#define _PID1OUTHL_OUT20_LENGTH                             0x1
#define _PID1OUTHL_OUT20_MASK                               0x10
#define _PID1OUTHL_OUT21_POSN                               0x5
#define _PID1OUTHL_OUT21_POSITION                           0x5
#define _PID1OUTHL_OUT21_SIZE                               0x1
#define _PID1OUTHL_OUT21_LENGTH                             0x1
#define _PID1OUTHL_OUT21_MASK                               0x20
#define _PID1OUTHL_OUT22_POSN                               0x6
#define _PID1OUTHL_OUT22_POSITION                           0x6
#define _PID1OUTHL_OUT22_SIZE                               0x1
#define _PID1OUTHL_OUT22_LENGTH                             0x1
#define _PID1OUTHL_OUT22_MASK                               0x40
#define _PID1OUTHL_OUT23_POSN                               0x7
#define _PID1OUTHL_OUT23_POSITION                           0x7
#define _PID1OUTHL_OUT23_SIZE                               0x1
#define _PID1OUTHL_OUT23_LENGTH                             0x1
#define _PID1OUTHL_OUT23_MASK                               0x80

// Register: PID1OUTHH
#define PID1OUTHH PID1OUTHH
extern volatile unsigned char           PID1OUTHH           __at(0x599);
#ifndef _LIB_BUILD
asm("PID1OUTHH equ 0599h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1OUT24              :1;
        unsigned PID1OUT25              :1;
        unsigned PID1OUT26              :1;
        unsigned PID1OUT27              :1;
        unsigned PID1OUT28              :1;
        unsigned PID1OUT29              :1;
        unsigned PID1OUT30              :1;
        unsigned PID1OUT31              :1;
    };
    struct {
        unsigned OUT24                  :1;
        unsigned OUT25                  :1;
        unsigned OUT26                  :1;
        unsigned OUT27                  :1;
        unsigned OUT28                  :1;
        unsigned OUT29                  :1;
        unsigned OUT30                  :1;
        unsigned OUT31                  :1;
    };
} PID1OUTHHbits_t;
extern volatile PID1OUTHHbits_t PID1OUTHHbits __at(0x599);
// bitfield macros
#define _PID1OUTHH_PID1OUT24_POSN                           0x0
#define _PID1OUTHH_PID1OUT24_POSITION                       0x0
#define _PID1OUTHH_PID1OUT24_SIZE                           0x1
#define _PID1OUTHH_PID1OUT24_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT24_MASK                           0x1
#define _PID1OUTHH_PID1OUT25_POSN                           0x1
#define _PID1OUTHH_PID1OUT25_POSITION                       0x1
#define _PID1OUTHH_PID1OUT25_SIZE                           0x1
#define _PID1OUTHH_PID1OUT25_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT25_MASK                           0x2
#define _PID1OUTHH_PID1OUT26_POSN                           0x2
#define _PID1OUTHH_PID1OUT26_POSITION                       0x2
#define _PID1OUTHH_PID1OUT26_SIZE                           0x1
#define _PID1OUTHH_PID1OUT26_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT26_MASK                           0x4
#define _PID1OUTHH_PID1OUT27_POSN                           0x3
#define _PID1OUTHH_PID1OUT27_POSITION                       0x3
#define _PID1OUTHH_PID1OUT27_SIZE                           0x1
#define _PID1OUTHH_PID1OUT27_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT27_MASK                           0x8
#define _PID1OUTHH_PID1OUT28_POSN                           0x4
#define _PID1OUTHH_PID1OUT28_POSITION                       0x4
#define _PID1OUTHH_PID1OUT28_SIZE                           0x1
#define _PID1OUTHH_PID1OUT28_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT28_MASK                           0x10
#define _PID1OUTHH_PID1OUT29_POSN                           0x5
#define _PID1OUTHH_PID1OUT29_POSITION                       0x5
#define _PID1OUTHH_PID1OUT29_SIZE                           0x1
#define _PID1OUTHH_PID1OUT29_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT29_MASK                           0x20
#define _PID1OUTHH_PID1OUT30_POSN                           0x6
#define _PID1OUTHH_PID1OUT30_POSITION                       0x6
#define _PID1OUTHH_PID1OUT30_SIZE                           0x1
#define _PID1OUTHH_PID1OUT30_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT30_MASK                           0x40
#define _PID1OUTHH_PID1OUT31_POSN                           0x7
#define _PID1OUTHH_PID1OUT31_POSITION                       0x7
#define _PID1OUTHH_PID1OUT31_SIZE                           0x1
#define _PID1OUTHH_PID1OUT31_LENGTH                         0x1
#define _PID1OUTHH_PID1OUT31_MASK                           0x80
#define _PID1OUTHH_OUT24_POSN                               0x0
#define _PID1OUTHH_OUT24_POSITION                           0x0
#define _PID1OUTHH_OUT24_SIZE                               0x1
#define _PID1OUTHH_OUT24_LENGTH                             0x1
#define _PID1OUTHH_OUT24_MASK                               0x1
#define _PID1OUTHH_OUT25_POSN                               0x1
#define _PID1OUTHH_OUT25_POSITION                           0x1
#define _PID1OUTHH_OUT25_SIZE                               0x1
#define _PID1OUTHH_OUT25_LENGTH                             0x1
#define _PID1OUTHH_OUT25_MASK                               0x2
#define _PID1OUTHH_OUT26_POSN                               0x2
#define _PID1OUTHH_OUT26_POSITION                           0x2
#define _PID1OUTHH_OUT26_SIZE                               0x1
#define _PID1OUTHH_OUT26_LENGTH                             0x1
#define _PID1OUTHH_OUT26_MASK                               0x4
#define _PID1OUTHH_OUT27_POSN                               0x3
#define _PID1OUTHH_OUT27_POSITION                           0x3
#define _PID1OUTHH_OUT27_SIZE                               0x1
#define _PID1OUTHH_OUT27_LENGTH                             0x1
#define _PID1OUTHH_OUT27_MASK                               0x8
#define _PID1OUTHH_OUT28_POSN                               0x4
#define _PID1OUTHH_OUT28_POSITION                           0x4
#define _PID1OUTHH_OUT28_SIZE                               0x1
#define _PID1OUTHH_OUT28_LENGTH                             0x1
#define _PID1OUTHH_OUT28_MASK                               0x10
#define _PID1OUTHH_OUT29_POSN                               0x5
#define _PID1OUTHH_OUT29_POSITION                           0x5
#define _PID1OUTHH_OUT29_SIZE                               0x1
#define _PID1OUTHH_OUT29_LENGTH                             0x1
#define _PID1OUTHH_OUT29_MASK                               0x20
#define _PID1OUTHH_OUT30_POSN                               0x6
#define _PID1OUTHH_OUT30_POSITION                           0x6
#define _PID1OUTHH_OUT30_SIZE                               0x1
#define _PID1OUTHH_OUT30_LENGTH                             0x1
#define _PID1OUTHH_OUT30_MASK                               0x40
#define _PID1OUTHH_OUT31_POSN                               0x7
#define _PID1OUTHH_OUT31_POSITION                           0x7
#define _PID1OUTHH_OUT31_SIZE                               0x1
#define _PID1OUTHH_OUT31_LENGTH                             0x1
#define _PID1OUTHH_OUT31_MASK                               0x80

// Register: PID1OUTU
#define PID1OUTU PID1OUTU
extern volatile unsigned char           PID1OUTU            __at(0x59A);
#ifndef _LIB_BUILD
asm("PID1OUTU equ 059Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1OUT32              :1;
        unsigned PID1OUT33              :1;
        unsigned PID1OUT34              :1;
        unsigned PID1OUT35              :1;
    };
    struct {
        unsigned OUT32                  :1;
        unsigned OUT33                  :1;
        unsigned OUT34                  :1;
        unsigned OUT35                  :1;
    };
} PID1OUTUbits_t;
extern volatile PID1OUTUbits_t PID1OUTUbits __at(0x59A);
// bitfield macros
#define _PID1OUTU_PID1OUT32_POSN                            0x0
#define _PID1OUTU_PID1OUT32_POSITION                        0x0
#define _PID1OUTU_PID1OUT32_SIZE                            0x1
#define _PID1OUTU_PID1OUT32_LENGTH                          0x1
#define _PID1OUTU_PID1OUT32_MASK                            0x1
#define _PID1OUTU_PID1OUT33_POSN                            0x1
#define _PID1OUTU_PID1OUT33_POSITION                        0x1
#define _PID1OUTU_PID1OUT33_SIZE                            0x1
#define _PID1OUTU_PID1OUT33_LENGTH                          0x1
#define _PID1OUTU_PID1OUT33_MASK                            0x2
#define _PID1OUTU_PID1OUT34_POSN                            0x2
#define _PID1OUTU_PID1OUT34_POSITION                        0x2
#define _PID1OUTU_PID1OUT34_SIZE                            0x1
#define _PID1OUTU_PID1OUT34_LENGTH                          0x1
#define _PID1OUTU_PID1OUT34_MASK                            0x4
#define _PID1OUTU_PID1OUT35_POSN                            0x3
#define _PID1OUTU_PID1OUT35_POSITION                        0x3
#define _PID1OUTU_PID1OUT35_SIZE                            0x1
#define _PID1OUTU_PID1OUT35_LENGTH                          0x1
#define _PID1OUTU_PID1OUT35_MASK                            0x8
#define _PID1OUTU_OUT32_POSN                                0x0
#define _PID1OUTU_OUT32_POSITION                            0x0
#define _PID1OUTU_OUT32_SIZE                                0x1
#define _PID1OUTU_OUT32_LENGTH                              0x1
#define _PID1OUTU_OUT32_MASK                                0x1
#define _PID1OUTU_OUT33_POSN                                0x1
#define _PID1OUTU_OUT33_POSITION                            0x1
#define _PID1OUTU_OUT33_SIZE                                0x1
#define _PID1OUTU_OUT33_LENGTH                              0x1
#define _PID1OUTU_OUT33_MASK                                0x2
#define _PID1OUTU_OUT34_POSN                                0x2
#define _PID1OUTU_OUT34_POSITION                            0x2
#define _PID1OUTU_OUT34_SIZE                                0x1
#define _PID1OUTU_OUT34_LENGTH                              0x1
#define _PID1OUTU_OUT34_MASK                                0x4
#define _PID1OUTU_OUT35_POSN                                0x3
#define _PID1OUTU_OUT35_POSITION                            0x3
#define _PID1OUTU_OUT35_SIZE                                0x1
#define _PID1OUTU_OUT35_LENGTH                              0x1
#define _PID1OUTU_OUT35_MASK                                0x8

// Register: PID1Z1
#define PID1Z1 PID1Z1
#ifndef __CCI__
extern volatile __uint24                PID1Z1              __at(0x59B);
#endif
#ifndef _LIB_BUILD
asm("PID1Z1 equ 059Bh");
#endif

// Register: PID1Z1L
#define PID1Z1L PID1Z1L
extern volatile unsigned char           PID1Z1L             __at(0x59B);
#ifndef _LIB_BUILD
asm("PID1Z1L equ 059Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z10                :1;
        unsigned PID1Z11                :1;
        unsigned PID1Z12                :1;
        unsigned PID1Z13                :1;
        unsigned PID1Z14                :1;
        unsigned PID1Z15                :1;
        unsigned PID1Z16                :1;
        unsigned PID1Z17                :1;
    };
    struct {
        unsigned Z10                    :1;
        unsigned Z11                    :1;
        unsigned Z12                    :1;
        unsigned Z13                    :1;
        unsigned Z14                    :1;
        unsigned Z15                    :1;
        unsigned Z16                    :1;
        unsigned Z17                    :1;
    };
} PID1Z1Lbits_t;
extern volatile PID1Z1Lbits_t PID1Z1Lbits __at(0x59B);
// bitfield macros
#define _PID1Z1L_PID1Z10_POSN                               0x0
#define _PID1Z1L_PID1Z10_POSITION                           0x0
#define _PID1Z1L_PID1Z10_SIZE                               0x1
#define _PID1Z1L_PID1Z10_LENGTH                             0x1
#define _PID1Z1L_PID1Z10_MASK                               0x1
#define _PID1Z1L_PID1Z11_POSN                               0x1
#define _PID1Z1L_PID1Z11_POSITION                           0x1
#define _PID1Z1L_PID1Z11_SIZE                               0x1
#define _PID1Z1L_PID1Z11_LENGTH                             0x1
#define _PID1Z1L_PID1Z11_MASK                               0x2
#define _PID1Z1L_PID1Z12_POSN                               0x2
#define _PID1Z1L_PID1Z12_POSITION                           0x2
#define _PID1Z1L_PID1Z12_SIZE                               0x1
#define _PID1Z1L_PID1Z12_LENGTH                             0x1
#define _PID1Z1L_PID1Z12_MASK                               0x4
#define _PID1Z1L_PID1Z13_POSN                               0x3
#define _PID1Z1L_PID1Z13_POSITION                           0x3
#define _PID1Z1L_PID1Z13_SIZE                               0x1
#define _PID1Z1L_PID1Z13_LENGTH                             0x1
#define _PID1Z1L_PID1Z13_MASK                               0x8
#define _PID1Z1L_PID1Z14_POSN                               0x4
#define _PID1Z1L_PID1Z14_POSITION                           0x4
#define _PID1Z1L_PID1Z14_SIZE                               0x1
#define _PID1Z1L_PID1Z14_LENGTH                             0x1
#define _PID1Z1L_PID1Z14_MASK                               0x10
#define _PID1Z1L_PID1Z15_POSN                               0x5
#define _PID1Z1L_PID1Z15_POSITION                           0x5
#define _PID1Z1L_PID1Z15_SIZE                               0x1
#define _PID1Z1L_PID1Z15_LENGTH                             0x1
#define _PID1Z1L_PID1Z15_MASK                               0x20
#define _PID1Z1L_PID1Z16_POSN                               0x6
#define _PID1Z1L_PID1Z16_POSITION                           0x6
#define _PID1Z1L_PID1Z16_SIZE                               0x1
#define _PID1Z1L_PID1Z16_LENGTH                             0x1
#define _PID1Z1L_PID1Z16_MASK                               0x40
#define _PID1Z1L_PID1Z17_POSN                               0x7
#define _PID1Z1L_PID1Z17_POSITION                           0x7
#define _PID1Z1L_PID1Z17_SIZE                               0x1
#define _PID1Z1L_PID1Z17_LENGTH                             0x1
#define _PID1Z1L_PID1Z17_MASK                               0x80
#define _PID1Z1L_Z10_POSN                                   0x0
#define _PID1Z1L_Z10_POSITION                               0x0
#define _PID1Z1L_Z10_SIZE                                   0x1
#define _PID1Z1L_Z10_LENGTH                                 0x1
#define _PID1Z1L_Z10_MASK                                   0x1
#define _PID1Z1L_Z11_POSN                                   0x1
#define _PID1Z1L_Z11_POSITION                               0x1
#define _PID1Z1L_Z11_SIZE                                   0x1
#define _PID1Z1L_Z11_LENGTH                                 0x1
#define _PID1Z1L_Z11_MASK                                   0x2
#define _PID1Z1L_Z12_POSN                                   0x2
#define _PID1Z1L_Z12_POSITION                               0x2
#define _PID1Z1L_Z12_SIZE                                   0x1
#define _PID1Z1L_Z12_LENGTH                                 0x1
#define _PID1Z1L_Z12_MASK                                   0x4
#define _PID1Z1L_Z13_POSN                                   0x3
#define _PID1Z1L_Z13_POSITION                               0x3
#define _PID1Z1L_Z13_SIZE                                   0x1
#define _PID1Z1L_Z13_LENGTH                                 0x1
#define _PID1Z1L_Z13_MASK                                   0x8
#define _PID1Z1L_Z14_POSN                                   0x4
#define _PID1Z1L_Z14_POSITION                               0x4
#define _PID1Z1L_Z14_SIZE                                   0x1
#define _PID1Z1L_Z14_LENGTH                                 0x1
#define _PID1Z1L_Z14_MASK                                   0x10
#define _PID1Z1L_Z15_POSN                                   0x5
#define _PID1Z1L_Z15_POSITION                               0x5
#define _PID1Z1L_Z15_SIZE                                   0x1
#define _PID1Z1L_Z15_LENGTH                                 0x1
#define _PID1Z1L_Z15_MASK                                   0x20
#define _PID1Z1L_Z16_POSN                                   0x6
#define _PID1Z1L_Z16_POSITION                               0x6
#define _PID1Z1L_Z16_SIZE                                   0x1
#define _PID1Z1L_Z16_LENGTH                                 0x1
#define _PID1Z1L_Z16_MASK                                   0x40
#define _PID1Z1L_Z17_POSN                                   0x7
#define _PID1Z1L_Z17_POSITION                               0x7
#define _PID1Z1L_Z17_SIZE                                   0x1
#define _PID1Z1L_Z17_LENGTH                                 0x1
#define _PID1Z1L_Z17_MASK                                   0x80

// Register: PID1Z1H
#define PID1Z1H PID1Z1H
extern volatile unsigned char           PID1Z1H             __at(0x59C);
#ifndef _LIB_BUILD
asm("PID1Z1H equ 059Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z18                :1;
        unsigned PID1Z19                :1;
        unsigned PID1Z110               :1;
        unsigned PID1Z111               :1;
        unsigned PID1Z112               :1;
        unsigned PID1Z113               :1;
        unsigned PID1Z114               :1;
        unsigned PID1Z115               :1;
    };
    struct {
        unsigned Z18                    :1;
        unsigned Z19                    :1;
        unsigned Z110                   :1;
        unsigned Z111                   :1;
        unsigned Z112                   :1;
        unsigned Z113                   :1;
        unsigned Z114                   :1;
        unsigned Z115                   :1;
    };
} PID1Z1Hbits_t;
extern volatile PID1Z1Hbits_t PID1Z1Hbits __at(0x59C);
// bitfield macros
#define _PID1Z1H_PID1Z18_POSN                               0x0
#define _PID1Z1H_PID1Z18_POSITION                           0x0
#define _PID1Z1H_PID1Z18_SIZE                               0x1
#define _PID1Z1H_PID1Z18_LENGTH                             0x1
#define _PID1Z1H_PID1Z18_MASK                               0x1
#define _PID1Z1H_PID1Z19_POSN                               0x1
#define _PID1Z1H_PID1Z19_POSITION                           0x1
#define _PID1Z1H_PID1Z19_SIZE                               0x1
#define _PID1Z1H_PID1Z19_LENGTH                             0x1
#define _PID1Z1H_PID1Z19_MASK                               0x2
#define _PID1Z1H_PID1Z110_POSN                              0x2
#define _PID1Z1H_PID1Z110_POSITION                          0x2
#define _PID1Z1H_PID1Z110_SIZE                              0x1
#define _PID1Z1H_PID1Z110_LENGTH                            0x1
#define _PID1Z1H_PID1Z110_MASK                              0x4
#define _PID1Z1H_PID1Z111_POSN                              0x3
#define _PID1Z1H_PID1Z111_POSITION                          0x3
#define _PID1Z1H_PID1Z111_SIZE                              0x1
#define _PID1Z1H_PID1Z111_LENGTH                            0x1
#define _PID1Z1H_PID1Z111_MASK                              0x8
#define _PID1Z1H_PID1Z112_POSN                              0x4
#define _PID1Z1H_PID1Z112_POSITION                          0x4
#define _PID1Z1H_PID1Z112_SIZE                              0x1
#define _PID1Z1H_PID1Z112_LENGTH                            0x1
#define _PID1Z1H_PID1Z112_MASK                              0x10
#define _PID1Z1H_PID1Z113_POSN                              0x5
#define _PID1Z1H_PID1Z113_POSITION                          0x5
#define _PID1Z1H_PID1Z113_SIZE                              0x1
#define _PID1Z1H_PID1Z113_LENGTH                            0x1
#define _PID1Z1H_PID1Z113_MASK                              0x20
#define _PID1Z1H_PID1Z114_POSN                              0x6
#define _PID1Z1H_PID1Z114_POSITION                          0x6
#define _PID1Z1H_PID1Z114_SIZE                              0x1
#define _PID1Z1H_PID1Z114_LENGTH                            0x1
#define _PID1Z1H_PID1Z114_MASK                              0x40
#define _PID1Z1H_PID1Z115_POSN                              0x7
#define _PID1Z1H_PID1Z115_POSITION                          0x7
#define _PID1Z1H_PID1Z115_SIZE                              0x1
#define _PID1Z1H_PID1Z115_LENGTH                            0x1
#define _PID1Z1H_PID1Z115_MASK                              0x80
#define _PID1Z1H_Z18_POSN                                   0x0
#define _PID1Z1H_Z18_POSITION                               0x0
#define _PID1Z1H_Z18_SIZE                                   0x1
#define _PID1Z1H_Z18_LENGTH                                 0x1
#define _PID1Z1H_Z18_MASK                                   0x1
#define _PID1Z1H_Z19_POSN                                   0x1
#define _PID1Z1H_Z19_POSITION                               0x1
#define _PID1Z1H_Z19_SIZE                                   0x1
#define _PID1Z1H_Z19_LENGTH                                 0x1
#define _PID1Z1H_Z19_MASK                                   0x2
#define _PID1Z1H_Z110_POSN                                  0x2
#define _PID1Z1H_Z110_POSITION                              0x2
#define _PID1Z1H_Z110_SIZE                                  0x1
#define _PID1Z1H_Z110_LENGTH                                0x1
#define _PID1Z1H_Z110_MASK                                  0x4
#define _PID1Z1H_Z111_POSN                                  0x3
#define _PID1Z1H_Z111_POSITION                              0x3
#define _PID1Z1H_Z111_SIZE                                  0x1
#define _PID1Z1H_Z111_LENGTH                                0x1
#define _PID1Z1H_Z111_MASK                                  0x8
#define _PID1Z1H_Z112_POSN                                  0x4
#define _PID1Z1H_Z112_POSITION                              0x4
#define _PID1Z1H_Z112_SIZE                                  0x1
#define _PID1Z1H_Z112_LENGTH                                0x1
#define _PID1Z1H_Z112_MASK                                  0x10
#define _PID1Z1H_Z113_POSN                                  0x5
#define _PID1Z1H_Z113_POSITION                              0x5
#define _PID1Z1H_Z113_SIZE                                  0x1
#define _PID1Z1H_Z113_LENGTH                                0x1
#define _PID1Z1H_Z113_MASK                                  0x20
#define _PID1Z1H_Z114_POSN                                  0x6
#define _PID1Z1H_Z114_POSITION                              0x6
#define _PID1Z1H_Z114_SIZE                                  0x1
#define _PID1Z1H_Z114_LENGTH                                0x1
#define _PID1Z1H_Z114_MASK                                  0x40
#define _PID1Z1H_Z115_POSN                                  0x7
#define _PID1Z1H_Z115_POSITION                              0x7
#define _PID1Z1H_Z115_SIZE                                  0x1
#define _PID1Z1H_Z115_LENGTH                                0x1
#define _PID1Z1H_Z115_MASK                                  0x80

// Register: PID1Z1U
#define PID1Z1U PID1Z1U
extern volatile unsigned char           PID1Z1U             __at(0x59D);
#ifndef _LIB_BUILD
asm("PID1Z1U equ 059Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z116               :1;
    };
    struct {
        unsigned Z116                   :1;
    };
} PID1Z1Ubits_t;
extern volatile PID1Z1Ubits_t PID1Z1Ubits __at(0x59D);
// bitfield macros
#define _PID1Z1U_PID1Z116_POSN                              0x0
#define _PID1Z1U_PID1Z116_POSITION                          0x0
#define _PID1Z1U_PID1Z116_SIZE                              0x1
#define _PID1Z1U_PID1Z116_LENGTH                            0x1
#define _PID1Z1U_PID1Z116_MASK                              0x1
#define _PID1Z1U_Z116_POSN                                  0x0
#define _PID1Z1U_Z116_POSITION                              0x0
#define _PID1Z1U_Z116_SIZE                                  0x1
#define _PID1Z1U_Z116_LENGTH                                0x1
#define _PID1Z1U_Z116_MASK                                  0x1

// Register: PID1Z2
#define PID1Z2 PID1Z2
#ifndef __CCI__
extern volatile __uint24                PID1Z2              __at(0x60C);
#endif
#ifndef _LIB_BUILD
asm("PID1Z2 equ 060Ch");
#endif

// Register: PID1Z2L
#define PID1Z2L PID1Z2L
extern volatile unsigned char           PID1Z2L             __at(0x60C);
#ifndef _LIB_BUILD
asm("PID1Z2L equ 060Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z20                :1;
        unsigned PID1Z21                :1;
        unsigned PID1Z22                :1;
        unsigned PID1Z23                :1;
        unsigned PID1Z24                :1;
        unsigned PID1Z25                :1;
        unsigned PID1Z26                :1;
        unsigned PID1Z27                :1;
    };
    struct {
        unsigned Z20                    :1;
        unsigned Z21                    :1;
        unsigned Z22                    :1;
        unsigned Z23                    :1;
        unsigned Z24                    :1;
        unsigned Z25                    :1;
        unsigned Z26                    :1;
        unsigned Z27                    :1;
    };
} PID1Z2Lbits_t;
extern volatile PID1Z2Lbits_t PID1Z2Lbits __at(0x60C);
// bitfield macros
#define _PID1Z2L_PID1Z20_POSN                               0x0
#define _PID1Z2L_PID1Z20_POSITION                           0x0
#define _PID1Z2L_PID1Z20_SIZE                               0x1
#define _PID1Z2L_PID1Z20_LENGTH                             0x1
#define _PID1Z2L_PID1Z20_MASK                               0x1
#define _PID1Z2L_PID1Z21_POSN                               0x1
#define _PID1Z2L_PID1Z21_POSITION                           0x1
#define _PID1Z2L_PID1Z21_SIZE                               0x1
#define _PID1Z2L_PID1Z21_LENGTH                             0x1
#define _PID1Z2L_PID1Z21_MASK                               0x2
#define _PID1Z2L_PID1Z22_POSN                               0x2
#define _PID1Z2L_PID1Z22_POSITION                           0x2
#define _PID1Z2L_PID1Z22_SIZE                               0x1
#define _PID1Z2L_PID1Z22_LENGTH                             0x1
#define _PID1Z2L_PID1Z22_MASK                               0x4
#define _PID1Z2L_PID1Z23_POSN                               0x3
#define _PID1Z2L_PID1Z23_POSITION                           0x3
#define _PID1Z2L_PID1Z23_SIZE                               0x1
#define _PID1Z2L_PID1Z23_LENGTH                             0x1
#define _PID1Z2L_PID1Z23_MASK                               0x8
#define _PID1Z2L_PID1Z24_POSN                               0x4
#define _PID1Z2L_PID1Z24_POSITION                           0x4
#define _PID1Z2L_PID1Z24_SIZE                               0x1
#define _PID1Z2L_PID1Z24_LENGTH                             0x1
#define _PID1Z2L_PID1Z24_MASK                               0x10
#define _PID1Z2L_PID1Z25_POSN                               0x5
#define _PID1Z2L_PID1Z25_POSITION                           0x5
#define _PID1Z2L_PID1Z25_SIZE                               0x1
#define _PID1Z2L_PID1Z25_LENGTH                             0x1
#define _PID1Z2L_PID1Z25_MASK                               0x20
#define _PID1Z2L_PID1Z26_POSN                               0x6
#define _PID1Z2L_PID1Z26_POSITION                           0x6
#define _PID1Z2L_PID1Z26_SIZE                               0x1
#define _PID1Z2L_PID1Z26_LENGTH                             0x1
#define _PID1Z2L_PID1Z26_MASK                               0x40
#define _PID1Z2L_PID1Z27_POSN                               0x7
#define _PID1Z2L_PID1Z27_POSITION                           0x7
#define _PID1Z2L_PID1Z27_SIZE                               0x1
#define _PID1Z2L_PID1Z27_LENGTH                             0x1
#define _PID1Z2L_PID1Z27_MASK                               0x80
#define _PID1Z2L_Z20_POSN                                   0x0
#define _PID1Z2L_Z20_POSITION                               0x0
#define _PID1Z2L_Z20_SIZE                                   0x1
#define _PID1Z2L_Z20_LENGTH                                 0x1
#define _PID1Z2L_Z20_MASK                                   0x1
#define _PID1Z2L_Z21_POSN                                   0x1
#define _PID1Z2L_Z21_POSITION                               0x1
#define _PID1Z2L_Z21_SIZE                                   0x1
#define _PID1Z2L_Z21_LENGTH                                 0x1
#define _PID1Z2L_Z21_MASK                                   0x2
#define _PID1Z2L_Z22_POSN                                   0x2
#define _PID1Z2L_Z22_POSITION                               0x2
#define _PID1Z2L_Z22_SIZE                                   0x1
#define _PID1Z2L_Z22_LENGTH                                 0x1
#define _PID1Z2L_Z22_MASK                                   0x4
#define _PID1Z2L_Z23_POSN                                   0x3
#define _PID1Z2L_Z23_POSITION                               0x3
#define _PID1Z2L_Z23_SIZE                                   0x1
#define _PID1Z2L_Z23_LENGTH                                 0x1
#define _PID1Z2L_Z23_MASK                                   0x8
#define _PID1Z2L_Z24_POSN                                   0x4
#define _PID1Z2L_Z24_POSITION                               0x4
#define _PID1Z2L_Z24_SIZE                                   0x1
#define _PID1Z2L_Z24_LENGTH                                 0x1
#define _PID1Z2L_Z24_MASK                                   0x10
#define _PID1Z2L_Z25_POSN                                   0x5
#define _PID1Z2L_Z25_POSITION                               0x5
#define _PID1Z2L_Z25_SIZE                                   0x1
#define _PID1Z2L_Z25_LENGTH                                 0x1
#define _PID1Z2L_Z25_MASK                                   0x20
#define _PID1Z2L_Z26_POSN                                   0x6
#define _PID1Z2L_Z26_POSITION                               0x6
#define _PID1Z2L_Z26_SIZE                                   0x1
#define _PID1Z2L_Z26_LENGTH                                 0x1
#define _PID1Z2L_Z26_MASK                                   0x40
#define _PID1Z2L_Z27_POSN                                   0x7
#define _PID1Z2L_Z27_POSITION                               0x7
#define _PID1Z2L_Z27_SIZE                                   0x1
#define _PID1Z2L_Z27_LENGTH                                 0x1
#define _PID1Z2L_Z27_MASK                                   0x80

// Register: PID1Z2H
#define PID1Z2H PID1Z2H
extern volatile unsigned char           PID1Z2H             __at(0x60D);
#ifndef _LIB_BUILD
asm("PID1Z2H equ 060Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z28                :1;
        unsigned PID1Z29                :1;
        unsigned PID1Z210               :1;
        unsigned PID1Z211               :1;
        unsigned PID1Z212               :1;
        unsigned PID1Z213               :1;
        unsigned PID1Z214               :1;
        unsigned PID1Z215               :1;
    };
    struct {
        unsigned Z28                    :1;
        unsigned Z29                    :1;
        unsigned Z210                   :1;
        unsigned Z211                   :1;
        unsigned Z212                   :1;
        unsigned Z213                   :1;
        unsigned Z214                   :1;
        unsigned Z215                   :1;
    };
} PID1Z2Hbits_t;
extern volatile PID1Z2Hbits_t PID1Z2Hbits __at(0x60D);
// bitfield macros
#define _PID1Z2H_PID1Z28_POSN                               0x0
#define _PID1Z2H_PID1Z28_POSITION                           0x0
#define _PID1Z2H_PID1Z28_SIZE                               0x1
#define _PID1Z2H_PID1Z28_LENGTH                             0x1
#define _PID1Z2H_PID1Z28_MASK                               0x1
#define _PID1Z2H_PID1Z29_POSN                               0x1
#define _PID1Z2H_PID1Z29_POSITION                           0x1
#define _PID1Z2H_PID1Z29_SIZE                               0x1
#define _PID1Z2H_PID1Z29_LENGTH                             0x1
#define _PID1Z2H_PID1Z29_MASK                               0x2
#define _PID1Z2H_PID1Z210_POSN                              0x2
#define _PID1Z2H_PID1Z210_POSITION                          0x2
#define _PID1Z2H_PID1Z210_SIZE                              0x1
#define _PID1Z2H_PID1Z210_LENGTH                            0x1
#define _PID1Z2H_PID1Z210_MASK                              0x4
#define _PID1Z2H_PID1Z211_POSN                              0x3
#define _PID1Z2H_PID1Z211_POSITION                          0x3
#define _PID1Z2H_PID1Z211_SIZE                              0x1
#define _PID1Z2H_PID1Z211_LENGTH                            0x1
#define _PID1Z2H_PID1Z211_MASK                              0x8
#define _PID1Z2H_PID1Z212_POSN                              0x4
#define _PID1Z2H_PID1Z212_POSITION                          0x4
#define _PID1Z2H_PID1Z212_SIZE                              0x1
#define _PID1Z2H_PID1Z212_LENGTH                            0x1
#define _PID1Z2H_PID1Z212_MASK                              0x10
#define _PID1Z2H_PID1Z213_POSN                              0x5
#define _PID1Z2H_PID1Z213_POSITION                          0x5
#define _PID1Z2H_PID1Z213_SIZE                              0x1
#define _PID1Z2H_PID1Z213_LENGTH                            0x1
#define _PID1Z2H_PID1Z213_MASK                              0x20
#define _PID1Z2H_PID1Z214_POSN                              0x6
#define _PID1Z2H_PID1Z214_POSITION                          0x6
#define _PID1Z2H_PID1Z214_SIZE                              0x1
#define _PID1Z2H_PID1Z214_LENGTH                            0x1
#define _PID1Z2H_PID1Z214_MASK                              0x40
#define _PID1Z2H_PID1Z215_POSN                              0x7
#define _PID1Z2H_PID1Z215_POSITION                          0x7
#define _PID1Z2H_PID1Z215_SIZE                              0x1
#define _PID1Z2H_PID1Z215_LENGTH                            0x1
#define _PID1Z2H_PID1Z215_MASK                              0x80
#define _PID1Z2H_Z28_POSN                                   0x0
#define _PID1Z2H_Z28_POSITION                               0x0
#define _PID1Z2H_Z28_SIZE                                   0x1
#define _PID1Z2H_Z28_LENGTH                                 0x1
#define _PID1Z2H_Z28_MASK                                   0x1
#define _PID1Z2H_Z29_POSN                                   0x1
#define _PID1Z2H_Z29_POSITION                               0x1
#define _PID1Z2H_Z29_SIZE                                   0x1
#define _PID1Z2H_Z29_LENGTH                                 0x1
#define _PID1Z2H_Z29_MASK                                   0x2
#define _PID1Z2H_Z210_POSN                                  0x2
#define _PID1Z2H_Z210_POSITION                              0x2
#define _PID1Z2H_Z210_SIZE                                  0x1
#define _PID1Z2H_Z210_LENGTH                                0x1
#define _PID1Z2H_Z210_MASK                                  0x4
#define _PID1Z2H_Z211_POSN                                  0x3
#define _PID1Z2H_Z211_POSITION                              0x3
#define _PID1Z2H_Z211_SIZE                                  0x1
#define _PID1Z2H_Z211_LENGTH                                0x1
#define _PID1Z2H_Z211_MASK                                  0x8
#define _PID1Z2H_Z212_POSN                                  0x4
#define _PID1Z2H_Z212_POSITION                              0x4
#define _PID1Z2H_Z212_SIZE                                  0x1
#define _PID1Z2H_Z212_LENGTH                                0x1
#define _PID1Z2H_Z212_MASK                                  0x10
#define _PID1Z2H_Z213_POSN                                  0x5
#define _PID1Z2H_Z213_POSITION                              0x5
#define _PID1Z2H_Z213_SIZE                                  0x1
#define _PID1Z2H_Z213_LENGTH                                0x1
#define _PID1Z2H_Z213_MASK                                  0x20
#define _PID1Z2H_Z214_POSN                                  0x6
#define _PID1Z2H_Z214_POSITION                              0x6
#define _PID1Z2H_Z214_SIZE                                  0x1
#define _PID1Z2H_Z214_LENGTH                                0x1
#define _PID1Z2H_Z214_MASK                                  0x40
#define _PID1Z2H_Z215_POSN                                  0x7
#define _PID1Z2H_Z215_POSITION                              0x7
#define _PID1Z2H_Z215_SIZE                                  0x1
#define _PID1Z2H_Z215_LENGTH                                0x1
#define _PID1Z2H_Z215_MASK                                  0x80

// Register: PID1Z2U
#define PID1Z2U PID1Z2U
extern volatile unsigned char           PID1Z2U             __at(0x60E);
#ifndef _LIB_BUILD
asm("PID1Z2U equ 060Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1Z216               :1;
    };
    struct {
        unsigned Z216                   :1;
    };
} PID1Z2Ubits_t;
extern volatile PID1Z2Ubits_t PID1Z2Ubits __at(0x60E);
// bitfield macros
#define _PID1Z2U_PID1Z216_POSN                              0x0
#define _PID1Z2U_PID1Z216_POSITION                          0x0
#define _PID1Z2U_PID1Z216_SIZE                              0x1
#define _PID1Z2U_PID1Z216_LENGTH                            0x1
#define _PID1Z2U_PID1Z216_MASK                              0x1
#define _PID1Z2U_Z216_POSN                                  0x0
#define _PID1Z2U_Z216_POSITION                              0x0
#define _PID1Z2U_Z216_SIZE                                  0x1
#define _PID1Z2U_Z216_LENGTH                                0x1
#define _PID1Z2U_Z216_MASK                                  0x1

// Register: PID1ACC
#define PID1ACC PID1ACC
#ifndef _LIB_BUILD
asm("PID1ACC equ 060Fh");
#endif

// Register: PID1ACCLL
#define PID1ACCLL PID1ACCLL
extern volatile unsigned char           PID1ACCLL           __at(0x60F);
#ifndef _LIB_BUILD
asm("PID1ACCLL equ 060Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1ACC0               :1;
        unsigned PID1ACC1               :1;
        unsigned PID1ACC2               :1;
        unsigned PID1ACC3               :1;
        unsigned PID1ACC4               :1;
        unsigned PID1ACC5               :1;
        unsigned PID1ACC6               :1;
        unsigned PID1ACC7               :1;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} PID1ACCLLbits_t;
extern volatile PID1ACCLLbits_t PID1ACCLLbits __at(0x60F);
// bitfield macros
#define _PID1ACCLL_PID1ACC0_POSN                            0x0
#define _PID1ACCLL_PID1ACC0_POSITION                        0x0
#define _PID1ACCLL_PID1ACC0_SIZE                            0x1
#define _PID1ACCLL_PID1ACC0_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC0_MASK                            0x1
#define _PID1ACCLL_PID1ACC1_POSN                            0x1
#define _PID1ACCLL_PID1ACC1_POSITION                        0x1
#define _PID1ACCLL_PID1ACC1_SIZE                            0x1
#define _PID1ACCLL_PID1ACC1_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC1_MASK                            0x2
#define _PID1ACCLL_PID1ACC2_POSN                            0x2
#define _PID1ACCLL_PID1ACC2_POSITION                        0x2
#define _PID1ACCLL_PID1ACC2_SIZE                            0x1
#define _PID1ACCLL_PID1ACC2_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC2_MASK                            0x4
#define _PID1ACCLL_PID1ACC3_POSN                            0x3
#define _PID1ACCLL_PID1ACC3_POSITION                        0x3
#define _PID1ACCLL_PID1ACC3_SIZE                            0x1
#define _PID1ACCLL_PID1ACC3_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC3_MASK                            0x8
#define _PID1ACCLL_PID1ACC4_POSN                            0x4
#define _PID1ACCLL_PID1ACC4_POSITION                        0x4
#define _PID1ACCLL_PID1ACC4_SIZE                            0x1
#define _PID1ACCLL_PID1ACC4_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC4_MASK                            0x10
#define _PID1ACCLL_PID1ACC5_POSN                            0x5
#define _PID1ACCLL_PID1ACC5_POSITION                        0x5
#define _PID1ACCLL_PID1ACC5_SIZE                            0x1
#define _PID1ACCLL_PID1ACC5_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC5_MASK                            0x20
#define _PID1ACCLL_PID1ACC6_POSN                            0x6
#define _PID1ACCLL_PID1ACC6_POSITION                        0x6
#define _PID1ACCLL_PID1ACC6_SIZE                            0x1
#define _PID1ACCLL_PID1ACC6_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC6_MASK                            0x40
#define _PID1ACCLL_PID1ACC7_POSN                            0x7
#define _PID1ACCLL_PID1ACC7_POSITION                        0x7
#define _PID1ACCLL_PID1ACC7_SIZE                            0x1
#define _PID1ACCLL_PID1ACC7_LENGTH                          0x1
#define _PID1ACCLL_PID1ACC7_MASK                            0x80
#define _PID1ACCLL_ACC0_POSN                                0x0
#define _PID1ACCLL_ACC0_POSITION                            0x0
#define _PID1ACCLL_ACC0_SIZE                                0x1
#define _PID1ACCLL_ACC0_LENGTH                              0x1
#define _PID1ACCLL_ACC0_MASK                                0x1
#define _PID1ACCLL_ACC1_POSN                                0x1
#define _PID1ACCLL_ACC1_POSITION                            0x1
#define _PID1ACCLL_ACC1_SIZE                                0x1
#define _PID1ACCLL_ACC1_LENGTH                              0x1
#define _PID1ACCLL_ACC1_MASK                                0x2
#define _PID1ACCLL_ACC2_POSN                                0x2
#define _PID1ACCLL_ACC2_POSITION                            0x2
#define _PID1ACCLL_ACC2_SIZE                                0x1
#define _PID1ACCLL_ACC2_LENGTH                              0x1
#define _PID1ACCLL_ACC2_MASK                                0x4
#define _PID1ACCLL_ACC3_POSN                                0x3
#define _PID1ACCLL_ACC3_POSITION                            0x3
#define _PID1ACCLL_ACC3_SIZE                                0x1
#define _PID1ACCLL_ACC3_LENGTH                              0x1
#define _PID1ACCLL_ACC3_MASK                                0x8
#define _PID1ACCLL_ACC4_POSN                                0x4
#define _PID1ACCLL_ACC4_POSITION                            0x4
#define _PID1ACCLL_ACC4_SIZE                                0x1
#define _PID1ACCLL_ACC4_LENGTH                              0x1
#define _PID1ACCLL_ACC4_MASK                                0x10
#define _PID1ACCLL_ACC5_POSN                                0x5
#define _PID1ACCLL_ACC5_POSITION                            0x5
#define _PID1ACCLL_ACC5_SIZE                                0x1
#define _PID1ACCLL_ACC5_LENGTH                              0x1
#define _PID1ACCLL_ACC5_MASK                                0x20
#define _PID1ACCLL_ACC6_POSN                                0x6
#define _PID1ACCLL_ACC6_POSITION                            0x6
#define _PID1ACCLL_ACC6_SIZE                                0x1
#define _PID1ACCLL_ACC6_LENGTH                              0x1
#define _PID1ACCLL_ACC6_MASK                                0x40
#define _PID1ACCLL_ACC7_POSN                                0x7
#define _PID1ACCLL_ACC7_POSITION                            0x7
#define _PID1ACCLL_ACC7_SIZE                                0x1
#define _PID1ACCLL_ACC7_LENGTH                              0x1
#define _PID1ACCLL_ACC7_MASK                                0x80

// Register: PID1ACCLH
#define PID1ACCLH PID1ACCLH
extern volatile unsigned char           PID1ACCLH           __at(0x610);
#ifndef _LIB_BUILD
asm("PID1ACCLH equ 0610h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1ACC8               :1;
        unsigned PID1ACC9               :1;
        unsigned PID1ACC10              :1;
        unsigned PID1ACC11              :1;
        unsigned PID1ACC12              :1;
        unsigned PID1ACC13              :1;
        unsigned PID1ACC14              :1;
        unsigned PID1ACC15              :1;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} PID1ACCLHbits_t;
extern volatile PID1ACCLHbits_t PID1ACCLHbits __at(0x610);
// bitfield macros
#define _PID1ACCLH_PID1ACC8_POSN                            0x0
#define _PID1ACCLH_PID1ACC8_POSITION                        0x0
#define _PID1ACCLH_PID1ACC8_SIZE                            0x1
#define _PID1ACCLH_PID1ACC8_LENGTH                          0x1
#define _PID1ACCLH_PID1ACC8_MASK                            0x1
#define _PID1ACCLH_PID1ACC9_POSN                            0x1
#define _PID1ACCLH_PID1ACC9_POSITION                        0x1
#define _PID1ACCLH_PID1ACC9_SIZE                            0x1
#define _PID1ACCLH_PID1ACC9_LENGTH                          0x1
#define _PID1ACCLH_PID1ACC9_MASK                            0x2
#define _PID1ACCLH_PID1ACC10_POSN                           0x2
#define _PID1ACCLH_PID1ACC10_POSITION                       0x2
#define _PID1ACCLH_PID1ACC10_SIZE                           0x1
#define _PID1ACCLH_PID1ACC10_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC10_MASK                           0x4
#define _PID1ACCLH_PID1ACC11_POSN                           0x3
#define _PID1ACCLH_PID1ACC11_POSITION                       0x3
#define _PID1ACCLH_PID1ACC11_SIZE                           0x1
#define _PID1ACCLH_PID1ACC11_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC11_MASK                           0x8
#define _PID1ACCLH_PID1ACC12_POSN                           0x4
#define _PID1ACCLH_PID1ACC12_POSITION                       0x4
#define _PID1ACCLH_PID1ACC12_SIZE                           0x1
#define _PID1ACCLH_PID1ACC12_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC12_MASK                           0x10
#define _PID1ACCLH_PID1ACC13_POSN                           0x5
#define _PID1ACCLH_PID1ACC13_POSITION                       0x5
#define _PID1ACCLH_PID1ACC13_SIZE                           0x1
#define _PID1ACCLH_PID1ACC13_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC13_MASK                           0x20
#define _PID1ACCLH_PID1ACC14_POSN                           0x6
#define _PID1ACCLH_PID1ACC14_POSITION                       0x6
#define _PID1ACCLH_PID1ACC14_SIZE                           0x1
#define _PID1ACCLH_PID1ACC14_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC14_MASK                           0x40
#define _PID1ACCLH_PID1ACC15_POSN                           0x7
#define _PID1ACCLH_PID1ACC15_POSITION                       0x7
#define _PID1ACCLH_PID1ACC15_SIZE                           0x1
#define _PID1ACCLH_PID1ACC15_LENGTH                         0x1
#define _PID1ACCLH_PID1ACC15_MASK                           0x80
#define _PID1ACCLH_ACC8_POSN                                0x0
#define _PID1ACCLH_ACC8_POSITION                            0x0
#define _PID1ACCLH_ACC8_SIZE                                0x1
#define _PID1ACCLH_ACC8_LENGTH                              0x1
#define _PID1ACCLH_ACC8_MASK                                0x1
#define _PID1ACCLH_ACC9_POSN                                0x1
#define _PID1ACCLH_ACC9_POSITION                            0x1
#define _PID1ACCLH_ACC9_SIZE                                0x1
#define _PID1ACCLH_ACC9_LENGTH                              0x1
#define _PID1ACCLH_ACC9_MASK                                0x2
#define _PID1ACCLH_ACC10_POSN                               0x2
#define _PID1ACCLH_ACC10_POSITION                           0x2
#define _PID1ACCLH_ACC10_SIZE                               0x1
#define _PID1ACCLH_ACC10_LENGTH                             0x1
#define _PID1ACCLH_ACC10_MASK                               0x4
#define _PID1ACCLH_ACC11_POSN                               0x3
#define _PID1ACCLH_ACC11_POSITION                           0x3
#define _PID1ACCLH_ACC11_SIZE                               0x1
#define _PID1ACCLH_ACC11_LENGTH                             0x1
#define _PID1ACCLH_ACC11_MASK                               0x8
#define _PID1ACCLH_ACC12_POSN                               0x4
#define _PID1ACCLH_ACC12_POSITION                           0x4
#define _PID1ACCLH_ACC12_SIZE                               0x1
#define _PID1ACCLH_ACC12_LENGTH                             0x1
#define _PID1ACCLH_ACC12_MASK                               0x10
#define _PID1ACCLH_ACC13_POSN                               0x5
#define _PID1ACCLH_ACC13_POSITION                           0x5
#define _PID1ACCLH_ACC13_SIZE                               0x1
#define _PID1ACCLH_ACC13_LENGTH                             0x1
#define _PID1ACCLH_ACC13_MASK                               0x20
#define _PID1ACCLH_ACC14_POSN                               0x6
#define _PID1ACCLH_ACC14_POSITION                           0x6
#define _PID1ACCLH_ACC14_SIZE                               0x1
#define _PID1ACCLH_ACC14_LENGTH                             0x1
#define _PID1ACCLH_ACC14_MASK                               0x40
#define _PID1ACCLH_ACC15_POSN                               0x7
#define _PID1ACCLH_ACC15_POSITION                           0x7
#define _PID1ACCLH_ACC15_SIZE                               0x1
#define _PID1ACCLH_ACC15_LENGTH                             0x1
#define _PID1ACCLH_ACC15_MASK                               0x80

// Register: PID1ACCHL
#define PID1ACCHL PID1ACCHL
extern volatile unsigned char           PID1ACCHL           __at(0x611);
#ifndef _LIB_BUILD
asm("PID1ACCHL equ 0611h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1ACC16              :1;
        unsigned PID1ACC17              :1;
        unsigned PID1ACC18              :1;
        unsigned PID1ACC19              :1;
        unsigned PID1ACC20              :1;
        unsigned PID1ACC21              :1;
        unsigned PID1ACC22              :1;
        unsigned PID1ACC23              :1;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
        unsigned ACC20                  :1;
        unsigned ACC21                  :1;
        unsigned ACC22                  :1;
        unsigned ACC23                  :1;
    };
} PID1ACCHLbits_t;
extern volatile PID1ACCHLbits_t PID1ACCHLbits __at(0x611);
// bitfield macros
#define _PID1ACCHL_PID1ACC16_POSN                           0x0
#define _PID1ACCHL_PID1ACC16_POSITION                       0x0
#define _PID1ACCHL_PID1ACC16_SIZE                           0x1
#define _PID1ACCHL_PID1ACC16_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC16_MASK                           0x1
#define _PID1ACCHL_PID1ACC17_POSN                           0x1
#define _PID1ACCHL_PID1ACC17_POSITION                       0x1
#define _PID1ACCHL_PID1ACC17_SIZE                           0x1
#define _PID1ACCHL_PID1ACC17_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC17_MASK                           0x2
#define _PID1ACCHL_PID1ACC18_POSN                           0x2
#define _PID1ACCHL_PID1ACC18_POSITION                       0x2
#define _PID1ACCHL_PID1ACC18_SIZE                           0x1
#define _PID1ACCHL_PID1ACC18_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC18_MASK                           0x4
#define _PID1ACCHL_PID1ACC19_POSN                           0x3
#define _PID1ACCHL_PID1ACC19_POSITION                       0x3
#define _PID1ACCHL_PID1ACC19_SIZE                           0x1
#define _PID1ACCHL_PID1ACC19_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC19_MASK                           0x8
#define _PID1ACCHL_PID1ACC20_POSN                           0x4
#define _PID1ACCHL_PID1ACC20_POSITION                       0x4
#define _PID1ACCHL_PID1ACC20_SIZE                           0x1
#define _PID1ACCHL_PID1ACC20_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC20_MASK                           0x10
#define _PID1ACCHL_PID1ACC21_POSN                           0x5
#define _PID1ACCHL_PID1ACC21_POSITION                       0x5
#define _PID1ACCHL_PID1ACC21_SIZE                           0x1
#define _PID1ACCHL_PID1ACC21_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC21_MASK                           0x20
#define _PID1ACCHL_PID1ACC22_POSN                           0x6
#define _PID1ACCHL_PID1ACC22_POSITION                       0x6
#define _PID1ACCHL_PID1ACC22_SIZE                           0x1
#define _PID1ACCHL_PID1ACC22_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC22_MASK                           0x40
#define _PID1ACCHL_PID1ACC23_POSN                           0x7
#define _PID1ACCHL_PID1ACC23_POSITION                       0x7
#define _PID1ACCHL_PID1ACC23_SIZE                           0x1
#define _PID1ACCHL_PID1ACC23_LENGTH                         0x1
#define _PID1ACCHL_PID1ACC23_MASK                           0x80
#define _PID1ACCHL_ACC16_POSN                               0x0
#define _PID1ACCHL_ACC16_POSITION                           0x0
#define _PID1ACCHL_ACC16_SIZE                               0x1
#define _PID1ACCHL_ACC16_LENGTH                             0x1
#define _PID1ACCHL_ACC16_MASK                               0x1
#define _PID1ACCHL_ACC17_POSN                               0x1
#define _PID1ACCHL_ACC17_POSITION                           0x1
#define _PID1ACCHL_ACC17_SIZE                               0x1
#define _PID1ACCHL_ACC17_LENGTH                             0x1
#define _PID1ACCHL_ACC17_MASK                               0x2
#define _PID1ACCHL_ACC18_POSN                               0x2
#define _PID1ACCHL_ACC18_POSITION                           0x2
#define _PID1ACCHL_ACC18_SIZE                               0x1
#define _PID1ACCHL_ACC18_LENGTH                             0x1
#define _PID1ACCHL_ACC18_MASK                               0x4
#define _PID1ACCHL_ACC19_POSN                               0x3
#define _PID1ACCHL_ACC19_POSITION                           0x3
#define _PID1ACCHL_ACC19_SIZE                               0x1
#define _PID1ACCHL_ACC19_LENGTH                             0x1
#define _PID1ACCHL_ACC19_MASK                               0x8
#define _PID1ACCHL_ACC20_POSN                               0x4
#define _PID1ACCHL_ACC20_POSITION                           0x4
#define _PID1ACCHL_ACC20_SIZE                               0x1
#define _PID1ACCHL_ACC20_LENGTH                             0x1
#define _PID1ACCHL_ACC20_MASK                               0x10
#define _PID1ACCHL_ACC21_POSN                               0x5
#define _PID1ACCHL_ACC21_POSITION                           0x5
#define _PID1ACCHL_ACC21_SIZE                               0x1
#define _PID1ACCHL_ACC21_LENGTH                             0x1
#define _PID1ACCHL_ACC21_MASK                               0x20
#define _PID1ACCHL_ACC22_POSN                               0x6
#define _PID1ACCHL_ACC22_POSITION                           0x6
#define _PID1ACCHL_ACC22_SIZE                               0x1
#define _PID1ACCHL_ACC22_LENGTH                             0x1
#define _PID1ACCHL_ACC22_MASK                               0x40
#define _PID1ACCHL_ACC23_POSN                               0x7
#define _PID1ACCHL_ACC23_POSITION                           0x7
#define _PID1ACCHL_ACC23_SIZE                               0x1
#define _PID1ACCHL_ACC23_LENGTH                             0x1
#define _PID1ACCHL_ACC23_MASK                               0x80

// Register: PID1ACCHH
#define PID1ACCHH PID1ACCHH
extern volatile unsigned char           PID1ACCHH           __at(0x612);
#ifndef _LIB_BUILD
asm("PID1ACCHH equ 0612h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1ACC24              :1;
        unsigned PID1ACC25              :1;
        unsigned PID1ACC26              :1;
        unsigned PID1ACC27              :1;
        unsigned PID1ACC28              :1;
        unsigned PID1ACC29              :1;
        unsigned PID1ACC30              :1;
        unsigned PID1ACC31              :1;
    };
    struct {
        unsigned ACC24                  :1;
        unsigned ACC25                  :1;
        unsigned ACC26                  :1;
        unsigned ACC27                  :1;
        unsigned ACC28                  :1;
        unsigned ACC29                  :1;
        unsigned ACC30                  :1;
        unsigned ACC31                  :1;
    };
} PID1ACCHHbits_t;
extern volatile PID1ACCHHbits_t PID1ACCHHbits __at(0x612);
// bitfield macros
#define _PID1ACCHH_PID1ACC24_POSN                           0x0
#define _PID1ACCHH_PID1ACC24_POSITION                       0x0
#define _PID1ACCHH_PID1ACC24_SIZE                           0x1
#define _PID1ACCHH_PID1ACC24_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC24_MASK                           0x1
#define _PID1ACCHH_PID1ACC25_POSN                           0x1
#define _PID1ACCHH_PID1ACC25_POSITION                       0x1
#define _PID1ACCHH_PID1ACC25_SIZE                           0x1
#define _PID1ACCHH_PID1ACC25_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC25_MASK                           0x2
#define _PID1ACCHH_PID1ACC26_POSN                           0x2
#define _PID1ACCHH_PID1ACC26_POSITION                       0x2
#define _PID1ACCHH_PID1ACC26_SIZE                           0x1
#define _PID1ACCHH_PID1ACC26_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC26_MASK                           0x4
#define _PID1ACCHH_PID1ACC27_POSN                           0x3
#define _PID1ACCHH_PID1ACC27_POSITION                       0x3
#define _PID1ACCHH_PID1ACC27_SIZE                           0x1
#define _PID1ACCHH_PID1ACC27_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC27_MASK                           0x8
#define _PID1ACCHH_PID1ACC28_POSN                           0x4
#define _PID1ACCHH_PID1ACC28_POSITION                       0x4
#define _PID1ACCHH_PID1ACC28_SIZE                           0x1
#define _PID1ACCHH_PID1ACC28_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC28_MASK                           0x10
#define _PID1ACCHH_PID1ACC29_POSN                           0x5
#define _PID1ACCHH_PID1ACC29_POSITION                       0x5
#define _PID1ACCHH_PID1ACC29_SIZE                           0x1
#define _PID1ACCHH_PID1ACC29_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC29_MASK                           0x20
#define _PID1ACCHH_PID1ACC30_POSN                           0x6
#define _PID1ACCHH_PID1ACC30_POSITION                       0x6
#define _PID1ACCHH_PID1ACC30_SIZE                           0x1
#define _PID1ACCHH_PID1ACC30_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC30_MASK                           0x40
#define _PID1ACCHH_PID1ACC31_POSN                           0x7
#define _PID1ACCHH_PID1ACC31_POSITION                       0x7
#define _PID1ACCHH_PID1ACC31_SIZE                           0x1
#define _PID1ACCHH_PID1ACC31_LENGTH                         0x1
#define _PID1ACCHH_PID1ACC31_MASK                           0x80
#define _PID1ACCHH_ACC24_POSN                               0x0
#define _PID1ACCHH_ACC24_POSITION                           0x0
#define _PID1ACCHH_ACC24_SIZE                               0x1
#define _PID1ACCHH_ACC24_LENGTH                             0x1
#define _PID1ACCHH_ACC24_MASK                               0x1
#define _PID1ACCHH_ACC25_POSN                               0x1
#define _PID1ACCHH_ACC25_POSITION                           0x1
#define _PID1ACCHH_ACC25_SIZE                               0x1
#define _PID1ACCHH_ACC25_LENGTH                             0x1
#define _PID1ACCHH_ACC25_MASK                               0x2
#define _PID1ACCHH_ACC26_POSN                               0x2
#define _PID1ACCHH_ACC26_POSITION                           0x2
#define _PID1ACCHH_ACC26_SIZE                               0x1
#define _PID1ACCHH_ACC26_LENGTH                             0x1
#define _PID1ACCHH_ACC26_MASK                               0x4
#define _PID1ACCHH_ACC27_POSN                               0x3
#define _PID1ACCHH_ACC27_POSITION                           0x3
#define _PID1ACCHH_ACC27_SIZE                               0x1
#define _PID1ACCHH_ACC27_LENGTH                             0x1
#define _PID1ACCHH_ACC27_MASK                               0x8
#define _PID1ACCHH_ACC28_POSN                               0x4
#define _PID1ACCHH_ACC28_POSITION                           0x4
#define _PID1ACCHH_ACC28_SIZE                               0x1
#define _PID1ACCHH_ACC28_LENGTH                             0x1
#define _PID1ACCHH_ACC28_MASK                               0x10
#define _PID1ACCHH_ACC29_POSN                               0x5
#define _PID1ACCHH_ACC29_POSITION                           0x5
#define _PID1ACCHH_ACC29_SIZE                               0x1
#define _PID1ACCHH_ACC29_LENGTH                             0x1
#define _PID1ACCHH_ACC29_MASK                               0x20
#define _PID1ACCHH_ACC30_POSN                               0x6
#define _PID1ACCHH_ACC30_POSITION                           0x6
#define _PID1ACCHH_ACC30_SIZE                               0x1
#define _PID1ACCHH_ACC30_LENGTH                             0x1
#define _PID1ACCHH_ACC30_MASK                               0x40
#define _PID1ACCHH_ACC31_POSN                               0x7
#define _PID1ACCHH_ACC31_POSITION                           0x7
#define _PID1ACCHH_ACC31_SIZE                               0x1
#define _PID1ACCHH_ACC31_LENGTH                             0x1
#define _PID1ACCHH_ACC31_MASK                               0x80

// Register: PID1ACCU
#define PID1ACCU PID1ACCU
extern volatile unsigned char           PID1ACCU            __at(0x613);
#ifndef _LIB_BUILD
asm("PID1ACCU equ 0613h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1ACC32              :1;
        unsigned PID1ACC33              :1;
        unsigned PID1ACC34              :1;
    };
    struct {
        unsigned ACC32                  :1;
        unsigned ACC33                  :1;
        unsigned ACC34                  :1;
    };
} PID1ACCUbits_t;
extern volatile PID1ACCUbits_t PID1ACCUbits __at(0x613);
// bitfield macros
#define _PID1ACCU_PID1ACC32_POSN                            0x0
#define _PID1ACCU_PID1ACC32_POSITION                        0x0
#define _PID1ACCU_PID1ACC32_SIZE                            0x1
#define _PID1ACCU_PID1ACC32_LENGTH                          0x1
#define _PID1ACCU_PID1ACC32_MASK                            0x1
#define _PID1ACCU_PID1ACC33_POSN                            0x1
#define _PID1ACCU_PID1ACC33_POSITION                        0x1
#define _PID1ACCU_PID1ACC33_SIZE                            0x1
#define _PID1ACCU_PID1ACC33_LENGTH                          0x1
#define _PID1ACCU_PID1ACC33_MASK                            0x2
#define _PID1ACCU_PID1ACC34_POSN                            0x2
#define _PID1ACCU_PID1ACC34_POSITION                        0x2
#define _PID1ACCU_PID1ACC34_SIZE                            0x1
#define _PID1ACCU_PID1ACC34_LENGTH                          0x1
#define _PID1ACCU_PID1ACC34_MASK                            0x4
#define _PID1ACCU_ACC32_POSN                                0x0
#define _PID1ACCU_ACC32_POSITION                            0x0
#define _PID1ACCU_ACC32_SIZE                                0x1
#define _PID1ACCU_ACC32_LENGTH                              0x1
#define _PID1ACCU_ACC32_MASK                                0x1
#define _PID1ACCU_ACC33_POSN                                0x1
#define _PID1ACCU_ACC33_POSITION                            0x1
#define _PID1ACCU_ACC33_SIZE                                0x1
#define _PID1ACCU_ACC33_LENGTH                              0x1
#define _PID1ACCU_ACC33_MASK                                0x2
#define _PID1ACCU_ACC34_POSN                                0x2
#define _PID1ACCU_ACC34_POSITION                            0x2
#define _PID1ACCU_ACC34_SIZE                                0x1
#define _PID1ACCU_ACC34_LENGTH                              0x1
#define _PID1ACCU_ACC34_MASK                                0x4

// Register: PID1CON
#define PID1CON PID1CON
extern volatile unsigned char           PID1CON             __at(0x614);
#ifndef _LIB_BUILD
asm("PID1CON equ 0614h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID1MODE               :3;
        unsigned                        :3;
        unsigned PID1BUSY               :1;
        unsigned PID1EN                 :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned BUSY                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned PID1MODE0              :1;
        unsigned PID1MODE1              :1;
        unsigned PID1MODE2              :1;
    };
} PID1CONbits_t;
extern volatile PID1CONbits_t PID1CONbits __at(0x614);
// bitfield macros
#define _PID1CON_PID1MODE_POSN                              0x0
#define _PID1CON_PID1MODE_POSITION                          0x0
#define _PID1CON_PID1MODE_SIZE                              0x3
#define _PID1CON_PID1MODE_LENGTH                            0x3
#define _PID1CON_PID1MODE_MASK                              0x7
#define _PID1CON_PID1BUSY_POSN                              0x6
#define _PID1CON_PID1BUSY_POSITION                          0x6
#define _PID1CON_PID1BUSY_SIZE                              0x1
#define _PID1CON_PID1BUSY_LENGTH                            0x1
#define _PID1CON_PID1BUSY_MASK                              0x40
#define _PID1CON_PID1EN_POSN                                0x7
#define _PID1CON_PID1EN_POSITION                            0x7
#define _PID1CON_PID1EN_SIZE                                0x1
#define _PID1CON_PID1EN_LENGTH                              0x1
#define _PID1CON_PID1EN_MASK                                0x80
#define _PID1CON_MODE_POSN                                  0x0
#define _PID1CON_MODE_POSITION                              0x0
#define _PID1CON_MODE_SIZE                                  0x3
#define _PID1CON_MODE_LENGTH                                0x3
#define _PID1CON_MODE_MASK                                  0x7
#define _PID1CON_BUSY_POSN                                  0x6
#define _PID1CON_BUSY_POSITION                              0x6
#define _PID1CON_BUSY_SIZE                                  0x1
#define _PID1CON_BUSY_LENGTH                                0x1
#define _PID1CON_BUSY_MASK                                  0x40
#define _PID1CON_EN_POSN                                    0x7
#define _PID1CON_EN_POSITION                                0x7
#define _PID1CON_EN_SIZE                                    0x1
#define _PID1CON_EN_LENGTH                                  0x1
#define _PID1CON_EN_MASK                                    0x80
#define _PID1CON_MODE0_POSN                                 0x0
#define _PID1CON_MODE0_POSITION                             0x0
#define _PID1CON_MODE0_SIZE                                 0x1
#define _PID1CON_MODE0_LENGTH                               0x1
#define _PID1CON_MODE0_MASK                                 0x1
#define _PID1CON_MODE1_POSN                                 0x1
#define _PID1CON_MODE1_POSITION                             0x1
#define _PID1CON_MODE1_SIZE                                 0x1
#define _PID1CON_MODE1_LENGTH                               0x1
#define _PID1CON_MODE1_MASK                                 0x2
#define _PID1CON_MODE2_POSN                                 0x2
#define _PID1CON_MODE2_POSITION                             0x2
#define _PID1CON_MODE2_SIZE                                 0x1
#define _PID1CON_MODE2_LENGTH                               0x1
#define _PID1CON_MODE2_MASK                                 0x4
#define _PID1CON_PID1MODE0_POSN                             0x0
#define _PID1CON_PID1MODE0_POSITION                         0x0
#define _PID1CON_PID1MODE0_SIZE                             0x1
#define _PID1CON_PID1MODE0_LENGTH                           0x1
#define _PID1CON_PID1MODE0_MASK                             0x1
#define _PID1CON_PID1MODE1_POSN                             0x1
#define _PID1CON_PID1MODE1_POSITION                         0x1
#define _PID1CON_PID1MODE1_SIZE                             0x1
#define _PID1CON_PID1MODE1_LENGTH                           0x1
#define _PID1CON_PID1MODE1_MASK                             0x2
#define _PID1CON_PID1MODE2_POSN                             0x2
#define _PID1CON_PID1MODE2_POSITION                         0x2
#define _PID1CON_PID1MODE2_SIZE                             0x1
#define _PID1CON_PID1MODE2_LENGTH                           0x1
#define _PID1CON_PID1MODE2_MASK                             0x4

// Register: PWM3DC
#define PWM3DC PWM3DC
extern volatile unsigned short          PWM3DC              __at(0x617);
#ifndef _LIB_BUILD
asm("PWM3DC equ 0617h");
#endif

// Register: PWM3DCL
#define PWM3DCL PWM3DCL
extern volatile unsigned char           PWM3DCL             __at(0x617);
#ifndef _LIB_BUILD
asm("PWM3DCL equ 0617h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM3DC0                :1;
        unsigned PWM3DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM3DCLbits_t;
extern volatile PWM3DCLbits_t PWM3DCLbits __at(0x617);
// bitfield macros
#define _PWM3DCL_DC_POSN                                    0x6
#define _PWM3DCL_DC_POSITION                                0x6
#define _PWM3DCL_DC_SIZE                                    0x2
#define _PWM3DCL_DC_LENGTH                                  0x2
#define _PWM3DCL_DC_MASK                                    0xC0
#define _PWM3DCL_DC0_POSN                                   0x6
#define _PWM3DCL_DC0_POSITION                               0x6
#define _PWM3DCL_DC0_SIZE                                   0x1
#define _PWM3DCL_DC0_LENGTH                                 0x1
#define _PWM3DCL_DC0_MASK                                   0x40
#define _PWM3DCL_DC1_POSN                                   0x7
#define _PWM3DCL_DC1_POSITION                               0x7
#define _PWM3DCL_DC1_SIZE                                   0x1
#define _PWM3DCL_DC1_LENGTH                                 0x1
#define _PWM3DCL_DC1_MASK                                   0x80
#define _PWM3DCL_PWM3DC0_POSN                               0x6
#define _PWM3DCL_PWM3DC0_POSITION                           0x6
#define _PWM3DCL_PWM3DC0_SIZE                               0x1
#define _PWM3DCL_PWM3DC0_LENGTH                             0x1
#define _PWM3DCL_PWM3DC0_MASK                               0x40
#define _PWM3DCL_PWM3DC1_POSN                               0x7
#define _PWM3DCL_PWM3DC1_POSITION                           0x7
#define _PWM3DCL_PWM3DC1_SIZE                               0x1
#define _PWM3DCL_PWM3DC1_LENGTH                             0x1
#define _PWM3DCL_PWM3DC1_MASK                               0x80
#define _PWM3DCL_PWMPW0_POSN                                0x6
#define _PWM3DCL_PWMPW0_POSITION                            0x6
#define _PWM3DCL_PWMPW0_SIZE                                0x1
#define _PWM3DCL_PWMPW0_LENGTH                              0x1
#define _PWM3DCL_PWMPW0_MASK                                0x40
#define _PWM3DCL_PWMPW1_POSN                                0x7
#define _PWM3DCL_PWMPW1_POSITION                            0x7
#define _PWM3DCL_PWMPW1_SIZE                                0x1
#define _PWM3DCL_PWMPW1_LENGTH                              0x1
#define _PWM3DCL_PWMPW1_MASK                                0x80

// Register: PWM3DCH
#define PWM3DCH PWM3DCH
extern volatile unsigned char           PWM3DCH             __at(0x618);
#ifndef _LIB_BUILD
asm("PWM3DCH equ 0618h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM3DC2                :1;
        unsigned PWM3DC3                :1;
        unsigned PWM3DC4                :1;
        unsigned PWM3DC5                :1;
        unsigned PWM3DC6                :1;
        unsigned PWM3DC7                :1;
        unsigned PWM3DC8                :1;
        unsigned PWM3DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM3DCHbits_t;
extern volatile PWM3DCHbits_t PWM3DCHbits __at(0x618);
// bitfield macros
#define _PWM3DCH_DC_POSN                                    0x0
#define _PWM3DCH_DC_POSITION                                0x0
#define _PWM3DCH_DC_SIZE                                    0x8
#define _PWM3DCH_DC_LENGTH                                  0x8
#define _PWM3DCH_DC_MASK                                    0xFF
#define _PWM3DCH_DC2_POSN                                   0x0
#define _PWM3DCH_DC2_POSITION                               0x0
#define _PWM3DCH_DC2_SIZE                                   0x1
#define _PWM3DCH_DC2_LENGTH                                 0x1
#define _PWM3DCH_DC2_MASK                                   0x1
#define _PWM3DCH_DC3_POSN                                   0x1
#define _PWM3DCH_DC3_POSITION                               0x1
#define _PWM3DCH_DC3_SIZE                                   0x1
#define _PWM3DCH_DC3_LENGTH                                 0x1
#define _PWM3DCH_DC3_MASK                                   0x2
#define _PWM3DCH_DC4_POSN                                   0x2
#define _PWM3DCH_DC4_POSITION                               0x2
#define _PWM3DCH_DC4_SIZE                                   0x1
#define _PWM3DCH_DC4_LENGTH                                 0x1
#define _PWM3DCH_DC4_MASK                                   0x4
#define _PWM3DCH_DC5_POSN                                   0x3
#define _PWM3DCH_DC5_POSITION                               0x3
#define _PWM3DCH_DC5_SIZE                                   0x1
#define _PWM3DCH_DC5_LENGTH                                 0x1
#define _PWM3DCH_DC5_MASK                                   0x8
#define _PWM3DCH_DC6_POSN                                   0x4
#define _PWM3DCH_DC6_POSITION                               0x4
#define _PWM3DCH_DC6_SIZE                                   0x1
#define _PWM3DCH_DC6_LENGTH                                 0x1
#define _PWM3DCH_DC6_MASK                                   0x10
#define _PWM3DCH_DC7_POSN                                   0x5
#define _PWM3DCH_DC7_POSITION                               0x5
#define _PWM3DCH_DC7_SIZE                                   0x1
#define _PWM3DCH_DC7_LENGTH                                 0x1
#define _PWM3DCH_DC7_MASK                                   0x20
#define _PWM3DCH_DC8_POSN                                   0x6
#define _PWM3DCH_DC8_POSITION                               0x6
#define _PWM3DCH_DC8_SIZE                                   0x1
#define _PWM3DCH_DC8_LENGTH                                 0x1
#define _PWM3DCH_DC8_MASK                                   0x40
#define _PWM3DCH_DC9_POSN                                   0x7
#define _PWM3DCH_DC9_POSITION                               0x7
#define _PWM3DCH_DC9_SIZE                                   0x1
#define _PWM3DCH_DC9_LENGTH                                 0x1
#define _PWM3DCH_DC9_MASK                                   0x80
#define _PWM3DCH_PWM3DC2_POSN                               0x0
#define _PWM3DCH_PWM3DC2_POSITION                           0x0
#define _PWM3DCH_PWM3DC2_SIZE                               0x1
#define _PWM3DCH_PWM3DC2_LENGTH                             0x1
#define _PWM3DCH_PWM3DC2_MASK                               0x1
#define _PWM3DCH_PWM3DC3_POSN                               0x1
#define _PWM3DCH_PWM3DC3_POSITION                           0x1
#define _PWM3DCH_PWM3DC3_SIZE                               0x1
#define _PWM3DCH_PWM3DC3_LENGTH                             0x1
#define _PWM3DCH_PWM3DC3_MASK                               0x2
#define _PWM3DCH_PWM3DC4_POSN                               0x2
#define _PWM3DCH_PWM3DC4_POSITION                           0x2
#define _PWM3DCH_PWM3DC4_SIZE                               0x1
#define _PWM3DCH_PWM3DC4_LENGTH                             0x1
#define _PWM3DCH_PWM3DC4_MASK                               0x4
#define _PWM3DCH_PWM3DC5_POSN                               0x3
#define _PWM3DCH_PWM3DC5_POSITION                           0x3
#define _PWM3DCH_PWM3DC5_SIZE                               0x1
#define _PWM3DCH_PWM3DC5_LENGTH                             0x1
#define _PWM3DCH_PWM3DC5_MASK                               0x8
#define _PWM3DCH_PWM3DC6_POSN                               0x4
#define _PWM3DCH_PWM3DC6_POSITION                           0x4
#define _PWM3DCH_PWM3DC6_SIZE                               0x1
#define _PWM3DCH_PWM3DC6_LENGTH                             0x1
#define _PWM3DCH_PWM3DC6_MASK                               0x10
#define _PWM3DCH_PWM3DC7_POSN                               0x5
#define _PWM3DCH_PWM3DC7_POSITION                           0x5
#define _PWM3DCH_PWM3DC7_SIZE                               0x1
#define _PWM3DCH_PWM3DC7_LENGTH                             0x1
#define _PWM3DCH_PWM3DC7_MASK                               0x20
#define _PWM3DCH_PWM3DC8_POSN                               0x6
#define _PWM3DCH_PWM3DC8_POSITION                           0x6
#define _PWM3DCH_PWM3DC8_SIZE                               0x1
#define _PWM3DCH_PWM3DC8_LENGTH                             0x1
#define _PWM3DCH_PWM3DC8_MASK                               0x40
#define _PWM3DCH_PWM3DC9_POSN                               0x7
#define _PWM3DCH_PWM3DC9_POSITION                           0x7
#define _PWM3DCH_PWM3DC9_SIZE                               0x1
#define _PWM3DCH_PWM3DC9_LENGTH                             0x1
#define _PWM3DCH_PWM3DC9_MASK                               0x80
#define _PWM3DCH_PWMPW2_POSN                                0x0
#define _PWM3DCH_PWMPW2_POSITION                            0x0
#define _PWM3DCH_PWMPW2_SIZE                                0x1
#define _PWM3DCH_PWMPW2_LENGTH                              0x1
#define _PWM3DCH_PWMPW2_MASK                                0x1
#define _PWM3DCH_PWMPW3_POSN                                0x1
#define _PWM3DCH_PWMPW3_POSITION                            0x1
#define _PWM3DCH_PWMPW3_SIZE                                0x1
#define _PWM3DCH_PWMPW3_LENGTH                              0x1
#define _PWM3DCH_PWMPW3_MASK                                0x2
#define _PWM3DCH_PWMPW4_POSN                                0x2
#define _PWM3DCH_PWMPW4_POSITION                            0x2
#define _PWM3DCH_PWMPW4_SIZE                                0x1
#define _PWM3DCH_PWMPW4_LENGTH                              0x1
#define _PWM3DCH_PWMPW4_MASK                                0x4
#define _PWM3DCH_PWMPW5_POSN                                0x3
#define _PWM3DCH_PWMPW5_POSITION                            0x3
#define _PWM3DCH_PWMPW5_SIZE                                0x1
#define _PWM3DCH_PWMPW5_LENGTH                              0x1
#define _PWM3DCH_PWMPW5_MASK                                0x8
#define _PWM3DCH_PWMPW6_POSN                                0x4
#define _PWM3DCH_PWMPW6_POSITION                            0x4
#define _PWM3DCH_PWMPW6_SIZE                                0x1
#define _PWM3DCH_PWMPW6_LENGTH                              0x1
#define _PWM3DCH_PWMPW6_MASK                                0x10
#define _PWM3DCH_PWMPW7_POSN                                0x5
#define _PWM3DCH_PWMPW7_POSITION                            0x5
#define _PWM3DCH_PWMPW7_SIZE                                0x1
#define _PWM3DCH_PWMPW7_LENGTH                              0x1
#define _PWM3DCH_PWMPW7_MASK                                0x20
#define _PWM3DCH_PWMPW8_POSN                                0x6
#define _PWM3DCH_PWMPW8_POSITION                            0x6
#define _PWM3DCH_PWMPW8_SIZE                                0x1
#define _PWM3DCH_PWMPW8_LENGTH                              0x1
#define _PWM3DCH_PWMPW8_MASK                                0x40
#define _PWM3DCH_PWMPW9_POSN                                0x7
#define _PWM3DCH_PWMPW9_POSITION                            0x7
#define _PWM3DCH_PWMPW9_SIZE                                0x1
#define _PWM3DCH_PWMPW9_LENGTH                              0x1
#define _PWM3DCH_PWMPW9_MASK                                0x80

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0x619);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0619h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM3POL                :1;
        unsigned PWM3OUT                :1;
        unsigned                        :1;
        unsigned PWM3EN                 :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0x619);
// bitfield macros
#define _PWM3CON_POL_POSN                                   0x4
#define _PWM3CON_POL_POSITION                               0x4
#define _PWM3CON_POL_SIZE                                   0x1
#define _PWM3CON_POL_LENGTH                                 0x1
#define _PWM3CON_POL_MASK                                   0x10
#define _PWM3CON_OUT_POSN                                   0x5
#define _PWM3CON_OUT_POSITION                               0x5
#define _PWM3CON_OUT_SIZE                                   0x1
#define _PWM3CON_OUT_LENGTH                                 0x1
#define _PWM3CON_OUT_MASK                                   0x20
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80
#define _PWM3CON_PWM3POL_POSN                               0x4
#define _PWM3CON_PWM3POL_POSITION                           0x4
#define _PWM3CON_PWM3POL_SIZE                               0x1
#define _PWM3CON_PWM3POL_LENGTH                             0x1
#define _PWM3CON_PWM3POL_MASK                               0x10
#define _PWM3CON_PWM3OUT_POSN                               0x5
#define _PWM3CON_PWM3OUT_POSITION                           0x5
#define _PWM3CON_PWM3OUT_SIZE                               0x1
#define _PWM3CON_PWM3OUT_LENGTH                             0x1
#define _PWM3CON_PWM3OUT_MASK                               0x20
#define _PWM3CON_PWM3EN_POSN                                0x7
#define _PWM3CON_PWM3EN_POSITION                            0x7
#define _PWM3CON_PWM3EN_SIZE                                0x1
#define _PWM3CON_PWM3EN_LENGTH                              0x1
#define _PWM3CON_PWM3EN_MASK                                0x80

// Register: PWM4DC
#define PWM4DC PWM4DC
extern volatile unsigned short          PWM4DC              __at(0x61A);
#ifndef _LIB_BUILD
asm("PWM4DC equ 061Ah");
#endif

// Register: PWM4DCL
#define PWM4DCL PWM4DCL
extern volatile unsigned char           PWM4DCL             __at(0x61A);
#ifndef _LIB_BUILD
asm("PWM4DCL equ 061Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM4DC0                :1;
        unsigned PWM4DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM4DCLbits_t;
extern volatile PWM4DCLbits_t PWM4DCLbits __at(0x61A);
// bitfield macros
#define _PWM4DCL_DC_POSN                                    0x6
#define _PWM4DCL_DC_POSITION                                0x6
#define _PWM4DCL_DC_SIZE                                    0x2
#define _PWM4DCL_DC_LENGTH                                  0x2
#define _PWM4DCL_DC_MASK                                    0xC0
#define _PWM4DCL_DC0_POSN                                   0x6
#define _PWM4DCL_DC0_POSITION                               0x6
#define _PWM4DCL_DC0_SIZE                                   0x1
#define _PWM4DCL_DC0_LENGTH                                 0x1
#define _PWM4DCL_DC0_MASK                                   0x40
#define _PWM4DCL_DC1_POSN                                   0x7
#define _PWM4DCL_DC1_POSITION                               0x7
#define _PWM4DCL_DC1_SIZE                                   0x1
#define _PWM4DCL_DC1_LENGTH                                 0x1
#define _PWM4DCL_DC1_MASK                                   0x80
#define _PWM4DCL_PWM4DC0_POSN                               0x6
#define _PWM4DCL_PWM4DC0_POSITION                           0x6
#define _PWM4DCL_PWM4DC0_SIZE                               0x1
#define _PWM4DCL_PWM4DC0_LENGTH                             0x1
#define _PWM4DCL_PWM4DC0_MASK                               0x40
#define _PWM4DCL_PWM4DC1_POSN                               0x7
#define _PWM4DCL_PWM4DC1_POSITION                           0x7
#define _PWM4DCL_PWM4DC1_SIZE                               0x1
#define _PWM4DCL_PWM4DC1_LENGTH                             0x1
#define _PWM4DCL_PWM4DC1_MASK                               0x80
#define _PWM4DCL_PWMPW0_POSN                                0x6
#define _PWM4DCL_PWMPW0_POSITION                            0x6
#define _PWM4DCL_PWMPW0_SIZE                                0x1
#define _PWM4DCL_PWMPW0_LENGTH                              0x1
#define _PWM4DCL_PWMPW0_MASK                                0x40
#define _PWM4DCL_PWMPW1_POSN                                0x7
#define _PWM4DCL_PWMPW1_POSITION                            0x7
#define _PWM4DCL_PWMPW1_SIZE                                0x1
#define _PWM4DCL_PWMPW1_LENGTH                              0x1
#define _PWM4DCL_PWMPW1_MASK                                0x80

// Register: PWM4DCH
#define PWM4DCH PWM4DCH
extern volatile unsigned char           PWM4DCH             __at(0x61B);
#ifndef _LIB_BUILD
asm("PWM4DCH equ 061Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM4DC2                :1;
        unsigned PWM4DC3                :1;
        unsigned PWM4DC4                :1;
        unsigned PWM4DC5                :1;
        unsigned PWM4DC6                :1;
        unsigned PWM4DC7                :1;
        unsigned PWM4DC8                :1;
        unsigned PWM4DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM4DCHbits_t;
extern volatile PWM4DCHbits_t PWM4DCHbits __at(0x61B);
// bitfield macros
#define _PWM4DCH_DC_POSN                                    0x0
#define _PWM4DCH_DC_POSITION                                0x0
#define _PWM4DCH_DC_SIZE                                    0x8
#define _PWM4DCH_DC_LENGTH                                  0x8
#define _PWM4DCH_DC_MASK                                    0xFF
#define _PWM4DCH_DC2_POSN                                   0x0
#define _PWM4DCH_DC2_POSITION                               0x0
#define _PWM4DCH_DC2_SIZE                                   0x1
#define _PWM4DCH_DC2_LENGTH                                 0x1
#define _PWM4DCH_DC2_MASK                                   0x1
#define _PWM4DCH_DC3_POSN                                   0x1
#define _PWM4DCH_DC3_POSITION                               0x1
#define _PWM4DCH_DC3_SIZE                                   0x1
#define _PWM4DCH_DC3_LENGTH                                 0x1
#define _PWM4DCH_DC3_MASK                                   0x2
#define _PWM4DCH_DC4_POSN                                   0x2
#define _PWM4DCH_DC4_POSITION                               0x2
#define _PWM4DCH_DC4_SIZE                                   0x1
#define _PWM4DCH_DC4_LENGTH                                 0x1
#define _PWM4DCH_DC4_MASK                                   0x4
#define _PWM4DCH_DC5_POSN                                   0x3
#define _PWM4DCH_DC5_POSITION                               0x3
#define _PWM4DCH_DC5_SIZE                                   0x1
#define _PWM4DCH_DC5_LENGTH                                 0x1
#define _PWM4DCH_DC5_MASK                                   0x8
#define _PWM4DCH_DC6_POSN                                   0x4
#define _PWM4DCH_DC6_POSITION                               0x4
#define _PWM4DCH_DC6_SIZE                                   0x1
#define _PWM4DCH_DC6_LENGTH                                 0x1
#define _PWM4DCH_DC6_MASK                                   0x10
#define _PWM4DCH_DC7_POSN                                   0x5
#define _PWM4DCH_DC7_POSITION                               0x5
#define _PWM4DCH_DC7_SIZE                                   0x1
#define _PWM4DCH_DC7_LENGTH                                 0x1
#define _PWM4DCH_DC7_MASK                                   0x20
#define _PWM4DCH_DC8_POSN                                   0x6
#define _PWM4DCH_DC8_POSITION                               0x6
#define _PWM4DCH_DC8_SIZE                                   0x1
#define _PWM4DCH_DC8_LENGTH                                 0x1
#define _PWM4DCH_DC8_MASK                                   0x40
#define _PWM4DCH_DC9_POSN                                   0x7
#define _PWM4DCH_DC9_POSITION                               0x7
#define _PWM4DCH_DC9_SIZE                                   0x1
#define _PWM4DCH_DC9_LENGTH                                 0x1
#define _PWM4DCH_DC9_MASK                                   0x80
#define _PWM4DCH_PWM4DC2_POSN                               0x0
#define _PWM4DCH_PWM4DC2_POSITION                           0x0
#define _PWM4DCH_PWM4DC2_SIZE                               0x1
#define _PWM4DCH_PWM4DC2_LENGTH                             0x1
#define _PWM4DCH_PWM4DC2_MASK                               0x1
#define _PWM4DCH_PWM4DC3_POSN                               0x1
#define _PWM4DCH_PWM4DC3_POSITION                           0x1
#define _PWM4DCH_PWM4DC3_SIZE                               0x1
#define _PWM4DCH_PWM4DC3_LENGTH                             0x1
#define _PWM4DCH_PWM4DC3_MASK                               0x2
#define _PWM4DCH_PWM4DC4_POSN                               0x2
#define _PWM4DCH_PWM4DC4_POSITION                           0x2
#define _PWM4DCH_PWM4DC4_SIZE                               0x1
#define _PWM4DCH_PWM4DC4_LENGTH                             0x1
#define _PWM4DCH_PWM4DC4_MASK                               0x4
#define _PWM4DCH_PWM4DC5_POSN                               0x3
#define _PWM4DCH_PWM4DC5_POSITION                           0x3
#define _PWM4DCH_PWM4DC5_SIZE                               0x1
#define _PWM4DCH_PWM4DC5_LENGTH                             0x1
#define _PWM4DCH_PWM4DC5_MASK                               0x8
#define _PWM4DCH_PWM4DC6_POSN                               0x4
#define _PWM4DCH_PWM4DC6_POSITION                           0x4
#define _PWM4DCH_PWM4DC6_SIZE                               0x1
#define _PWM4DCH_PWM4DC6_LENGTH                             0x1
#define _PWM4DCH_PWM4DC6_MASK                               0x10
#define _PWM4DCH_PWM4DC7_POSN                               0x5
#define _PWM4DCH_PWM4DC7_POSITION                           0x5
#define _PWM4DCH_PWM4DC7_SIZE                               0x1
#define _PWM4DCH_PWM4DC7_LENGTH                             0x1
#define _PWM4DCH_PWM4DC7_MASK                               0x20
#define _PWM4DCH_PWM4DC8_POSN                               0x6
#define _PWM4DCH_PWM4DC8_POSITION                           0x6
#define _PWM4DCH_PWM4DC8_SIZE                               0x1
#define _PWM4DCH_PWM4DC8_LENGTH                             0x1
#define _PWM4DCH_PWM4DC8_MASK                               0x40
#define _PWM4DCH_PWM4DC9_POSN                               0x7
#define _PWM4DCH_PWM4DC9_POSITION                           0x7
#define _PWM4DCH_PWM4DC9_SIZE                               0x1
#define _PWM4DCH_PWM4DC9_LENGTH                             0x1
#define _PWM4DCH_PWM4DC9_MASK                               0x80
#define _PWM4DCH_PWMPW2_POSN                                0x0
#define _PWM4DCH_PWMPW2_POSITION                            0x0
#define _PWM4DCH_PWMPW2_SIZE                                0x1
#define _PWM4DCH_PWMPW2_LENGTH                              0x1
#define _PWM4DCH_PWMPW2_MASK                                0x1
#define _PWM4DCH_PWMPW3_POSN                                0x1
#define _PWM4DCH_PWMPW3_POSITION                            0x1
#define _PWM4DCH_PWMPW3_SIZE                                0x1
#define _PWM4DCH_PWMPW3_LENGTH                              0x1
#define _PWM4DCH_PWMPW3_MASK                                0x2
#define _PWM4DCH_PWMPW4_POSN                                0x2
#define _PWM4DCH_PWMPW4_POSITION                            0x2
#define _PWM4DCH_PWMPW4_SIZE                                0x1
#define _PWM4DCH_PWMPW4_LENGTH                              0x1
#define _PWM4DCH_PWMPW4_MASK                                0x4
#define _PWM4DCH_PWMPW5_POSN                                0x3
#define _PWM4DCH_PWMPW5_POSITION                            0x3
#define _PWM4DCH_PWMPW5_SIZE                                0x1
#define _PWM4DCH_PWMPW5_LENGTH                              0x1
#define _PWM4DCH_PWMPW5_MASK                                0x8
#define _PWM4DCH_PWMPW6_POSN                                0x4
#define _PWM4DCH_PWMPW6_POSITION                            0x4
#define _PWM4DCH_PWMPW6_SIZE                                0x1
#define _PWM4DCH_PWMPW6_LENGTH                              0x1
#define _PWM4DCH_PWMPW6_MASK                                0x10
#define _PWM4DCH_PWMPW7_POSN                                0x5
#define _PWM4DCH_PWMPW7_POSITION                            0x5
#define _PWM4DCH_PWMPW7_SIZE                                0x1
#define _PWM4DCH_PWMPW7_LENGTH                              0x1
#define _PWM4DCH_PWMPW7_MASK                                0x20
#define _PWM4DCH_PWMPW8_POSN                                0x6
#define _PWM4DCH_PWMPW8_POSITION                            0x6
#define _PWM4DCH_PWMPW8_SIZE                                0x1
#define _PWM4DCH_PWMPW8_LENGTH                              0x1
#define _PWM4DCH_PWMPW8_MASK                                0x40
#define _PWM4DCH_PWMPW9_POSN                                0x7
#define _PWM4DCH_PWMPW9_POSITION                            0x7
#define _PWM4DCH_PWMPW9_SIZE                                0x1
#define _PWM4DCH_PWMPW9_LENGTH                              0x1
#define _PWM4DCH_PWMPW9_MASK                                0x80

// Register: PWM4CON
#define PWM4CON PWM4CON
extern volatile unsigned char           PWM4CON             __at(0x61C);
#ifndef _LIB_BUILD
asm("PWM4CON equ 061Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM4POL                :1;
        unsigned PWM4OUT                :1;
        unsigned                        :1;
        unsigned PWM4EN                 :1;
    };
} PWM4CONbits_t;
extern volatile PWM4CONbits_t PWM4CONbits __at(0x61C);
// bitfield macros
#define _PWM4CON_POL_POSN                                   0x4
#define _PWM4CON_POL_POSITION                               0x4
#define _PWM4CON_POL_SIZE                                   0x1
#define _PWM4CON_POL_LENGTH                                 0x1
#define _PWM4CON_POL_MASK                                   0x10
#define _PWM4CON_OUT_POSN                                   0x5
#define _PWM4CON_OUT_POSITION                               0x5
#define _PWM4CON_OUT_SIZE                                   0x1
#define _PWM4CON_OUT_LENGTH                                 0x1
#define _PWM4CON_OUT_MASK                                   0x20
#define _PWM4CON_EN_POSN                                    0x7
#define _PWM4CON_EN_POSITION                                0x7
#define _PWM4CON_EN_SIZE                                    0x1
#define _PWM4CON_EN_LENGTH                                  0x1
#define _PWM4CON_EN_MASK                                    0x80
#define _PWM4CON_PWM4POL_POSN                               0x4
#define _PWM4CON_PWM4POL_POSITION                           0x4
#define _PWM4CON_PWM4POL_SIZE                               0x1
#define _PWM4CON_PWM4POL_LENGTH                             0x1
#define _PWM4CON_PWM4POL_MASK                               0x10
#define _PWM4CON_PWM4OUT_POSN                               0x5
#define _PWM4CON_PWM4OUT_POSITION                           0x5
#define _PWM4CON_PWM4OUT_SIZE                               0x1
#define _PWM4CON_PWM4OUT_LENGTH                             0x1
#define _PWM4CON_PWM4OUT_MASK                               0x20
#define _PWM4CON_PWM4EN_POSN                                0x7
#define _PWM4CON_PWM4EN_POSITION                            0x7
#define _PWM4CON_PWM4EN_SIZE                                0x1
#define _PWM4CON_PWM4EN_LENGTH                              0x1
#define _PWM4CON_PWM4EN_MASK                                0x80

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x691);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 0691h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :6;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x691);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x6
#define _CWG1DBR_DBR_LENGTH                                 0x6
#define _CWG1DBR_DBR_MASK                                   0x3F
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x6
#define _CWG1DBR_CWG1DBR_LENGTH                             0x6
#define _CWG1DBR_CWG1DBR_MASK                               0x3F
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x692);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 0692h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :6;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x692);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x6
#define _CWG1DBF_DBF_LENGTH                                 0x6
#define _CWG1DBF_DBF_MASK                                   0x3F
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x6
#define _CWG1DBF_CWG1DBF_LENGTH                             0x6
#define _CWG1DBF_CWG1DBF_MASK                               0x3F
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x693);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 0693h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSBD               :2;
        unsigned CWG1REN                :1;
        unsigned CWG1SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x693);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30
#define _CWG1AS0_CWG1REN_POSN                               0x6
#define _CWG1AS0_CWG1REN_POSITION                           0x6
#define _CWG1AS0_CWG1REN_SIZE                               0x1
#define _CWG1AS0_CWG1REN_LENGTH                             0x1
#define _CWG1AS0_CWG1REN_MASK                               0x40
#define _CWG1AS0_CWG1SHUTDOWN_POSN                          0x7
#define _CWG1AS0_CWG1SHUTDOWN_POSITION                      0x7
#define _CWG1AS0_CWG1SHUTDOWN_SIZE                          0x1
#define _CWG1AS0_CWG1SHUTDOWN_LENGTH                        0x1
#define _CWG1AS0_CWG1SHUTDOWN_MASK                          0x80
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x694);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 0694h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INAS                   :1;
        unsigned C1AS                   :1;
        unsigned C2AS                   :1;
        unsigned                        :1;
        unsigned TMR2AS                 :1;
        unsigned TMR4AS                 :1;
        unsigned TMR6AS                 :1;
    };
    struct {
        unsigned CWG1INAS               :1;
        unsigned CWG1C1AS               :1;
        unsigned CWG1C2AS               :1;
        unsigned                        :1;
        unsigned CWG1TMR2AS             :1;
        unsigned CWG1TMR4AS             :1;
        unsigned CWG1TMR6AS             :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x694);
// bitfield macros
#define _CWG1AS1_INAS_POSN                                  0x0
#define _CWG1AS1_INAS_POSITION                              0x0
#define _CWG1AS1_INAS_SIZE                                  0x1
#define _CWG1AS1_INAS_LENGTH                                0x1
#define _CWG1AS1_INAS_MASK                                  0x1
#define _CWG1AS1_C1AS_POSN                                  0x1
#define _CWG1AS1_C1AS_POSITION                              0x1
#define _CWG1AS1_C1AS_SIZE                                  0x1
#define _CWG1AS1_C1AS_LENGTH                                0x1
#define _CWG1AS1_C1AS_MASK                                  0x2
#define _CWG1AS1_C2AS_POSN                                  0x2
#define _CWG1AS1_C2AS_POSITION                              0x2
#define _CWG1AS1_C2AS_SIZE                                  0x1
#define _CWG1AS1_C2AS_LENGTH                                0x1
#define _CWG1AS1_C2AS_MASK                                  0x4
#define _CWG1AS1_TMR2AS_POSN                                0x4
#define _CWG1AS1_TMR2AS_POSITION                            0x4
#define _CWG1AS1_TMR2AS_SIZE                                0x1
#define _CWG1AS1_TMR2AS_LENGTH                              0x1
#define _CWG1AS1_TMR2AS_MASK                                0x10
#define _CWG1AS1_TMR4AS_POSN                                0x5
#define _CWG1AS1_TMR4AS_POSITION                            0x5
#define _CWG1AS1_TMR4AS_SIZE                                0x1
#define _CWG1AS1_TMR4AS_LENGTH                              0x1
#define _CWG1AS1_TMR4AS_MASK                                0x20
#define _CWG1AS1_TMR6AS_POSN                                0x6
#define _CWG1AS1_TMR6AS_POSITION                            0x6
#define _CWG1AS1_TMR6AS_SIZE                                0x1
#define _CWG1AS1_TMR6AS_LENGTH                              0x1
#define _CWG1AS1_TMR6AS_MASK                                0x40
#define _CWG1AS1_CWG1INAS_POSN                              0x0
#define _CWG1AS1_CWG1INAS_POSITION                          0x0
#define _CWG1AS1_CWG1INAS_SIZE                              0x1
#define _CWG1AS1_CWG1INAS_LENGTH                            0x1
#define _CWG1AS1_CWG1INAS_MASK                              0x1
#define _CWG1AS1_CWG1C1AS_POSN                              0x1
#define _CWG1AS1_CWG1C1AS_POSITION                          0x1
#define _CWG1AS1_CWG1C1AS_SIZE                              0x1
#define _CWG1AS1_CWG1C1AS_LENGTH                            0x1
#define _CWG1AS1_CWG1C1AS_MASK                              0x2
#define _CWG1AS1_CWG1C2AS_POSN                              0x2
#define _CWG1AS1_CWG1C2AS_POSITION                          0x2
#define _CWG1AS1_CWG1C2AS_SIZE                              0x1
#define _CWG1AS1_CWG1C2AS_LENGTH                            0x1
#define _CWG1AS1_CWG1C2AS_MASK                              0x4
#define _CWG1AS1_CWG1TMR2AS_POSN                            0x4
#define _CWG1AS1_CWG1TMR2AS_POSITION                        0x4
#define _CWG1AS1_CWG1TMR2AS_SIZE                            0x1
#define _CWG1AS1_CWG1TMR2AS_LENGTH                          0x1
#define _CWG1AS1_CWG1TMR2AS_MASK                            0x10
#define _CWG1AS1_CWG1TMR4AS_POSN                            0x5
#define _CWG1AS1_CWG1TMR4AS_POSITION                        0x5
#define _CWG1AS1_CWG1TMR4AS_SIZE                            0x1
#define _CWG1AS1_CWG1TMR4AS_LENGTH                          0x1
#define _CWG1AS1_CWG1TMR4AS_MASK                            0x20
#define _CWG1AS1_CWG1TMR6AS_POSN                            0x6
#define _CWG1AS1_CWG1TMR6AS_POSITION                        0x6
#define _CWG1AS1_CWG1TMR6AS_SIZE                            0x1
#define _CWG1AS1_CWG1TMR6AS_LENGTH                          0x1
#define _CWG1AS1_CWG1TMR6AS_MASK                            0x40

// Register: CWG1OCON0
#define CWG1OCON0 CWG1OCON0
extern volatile unsigned char           CWG1OCON0           __at(0x695);
#ifndef _LIB_BUILD
asm("CWG1OCON0 equ 0695h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1OCON0bits_t;
extern volatile CWG1OCON0bits_t CWG1OCON0bits __at(0x695);
// bitfield macros
#define _CWG1OCON0_STRA_POSN                                0x0
#define _CWG1OCON0_STRA_POSITION                            0x0
#define _CWG1OCON0_STRA_SIZE                                0x1
#define _CWG1OCON0_STRA_LENGTH                              0x1
#define _CWG1OCON0_STRA_MASK                                0x1
#define _CWG1OCON0_STRB_POSN                                0x1
#define _CWG1OCON0_STRB_POSITION                            0x1
#define _CWG1OCON0_STRB_SIZE                                0x1
#define _CWG1OCON0_STRB_LENGTH                              0x1
#define _CWG1OCON0_STRB_MASK                                0x2
#define _CWG1OCON0_STRC_POSN                                0x2
#define _CWG1OCON0_STRC_POSITION                            0x2
#define _CWG1OCON0_STRC_SIZE                                0x1
#define _CWG1OCON0_STRC_LENGTH                              0x1
#define _CWG1OCON0_STRC_MASK                                0x4
#define _CWG1OCON0_STRD_POSN                                0x3
#define _CWG1OCON0_STRD_POSITION                            0x3
#define _CWG1OCON0_STRD_SIZE                                0x1
#define _CWG1OCON0_STRD_LENGTH                              0x1
#define _CWG1OCON0_STRD_MASK                                0x8
#define _CWG1OCON0_OVRA_POSN                                0x4
#define _CWG1OCON0_OVRA_POSITION                            0x4
#define _CWG1OCON0_OVRA_SIZE                                0x1
#define _CWG1OCON0_OVRA_LENGTH                              0x1
#define _CWG1OCON0_OVRA_MASK                                0x10
#define _CWG1OCON0_OVRB_POSN                                0x5
#define _CWG1OCON0_OVRB_POSITION                            0x5
#define _CWG1OCON0_OVRB_SIZE                                0x1
#define _CWG1OCON0_OVRB_LENGTH                              0x1
#define _CWG1OCON0_OVRB_MASK                                0x20
#define _CWG1OCON0_OVRC_POSN                                0x6
#define _CWG1OCON0_OVRC_POSITION                            0x6
#define _CWG1OCON0_OVRC_SIZE                                0x1
#define _CWG1OCON0_OVRC_LENGTH                              0x1
#define _CWG1OCON0_OVRC_MASK                                0x40
#define _CWG1OCON0_OVRD_POSN                                0x7
#define _CWG1OCON0_OVRD_POSITION                            0x7
#define _CWG1OCON0_OVRD_SIZE                                0x1
#define _CWG1OCON0_OVRD_LENGTH                              0x1
#define _CWG1OCON0_OVRD_MASK                                0x80
#define _CWG1OCON0_CWG1STRA_POSN                            0x0
#define _CWG1OCON0_CWG1STRA_POSITION                        0x0
#define _CWG1OCON0_CWG1STRA_SIZE                            0x1
#define _CWG1OCON0_CWG1STRA_LENGTH                          0x1
#define _CWG1OCON0_CWG1STRA_MASK                            0x1
#define _CWG1OCON0_CWG1STRB_POSN                            0x1
#define _CWG1OCON0_CWG1STRB_POSITION                        0x1
#define _CWG1OCON0_CWG1STRB_SIZE                            0x1
#define _CWG1OCON0_CWG1STRB_LENGTH                          0x1
#define _CWG1OCON0_CWG1STRB_MASK                            0x2
#define _CWG1OCON0_CWG1STRC_POSN                            0x2
#define _CWG1OCON0_CWG1STRC_POSITION                        0x2
#define _CWG1OCON0_CWG1STRC_SIZE                            0x1
#define _CWG1OCON0_CWG1STRC_LENGTH                          0x1
#define _CWG1OCON0_CWG1STRC_MASK                            0x4
#define _CWG1OCON0_CWG1STRD_POSN                            0x3
#define _CWG1OCON0_CWG1STRD_POSITION                        0x3
#define _CWG1OCON0_CWG1STRD_SIZE                            0x1
#define _CWG1OCON0_CWG1STRD_LENGTH                          0x1
#define _CWG1OCON0_CWG1STRD_MASK                            0x8
#define _CWG1OCON0_CWG1OVRA_POSN                            0x4
#define _CWG1OCON0_CWG1OVRA_POSITION                        0x4
#define _CWG1OCON0_CWG1OVRA_SIZE                            0x1
#define _CWG1OCON0_CWG1OVRA_LENGTH                          0x1
#define _CWG1OCON0_CWG1OVRA_MASK                            0x10
#define _CWG1OCON0_CWG1OVRB_POSN                            0x5
#define _CWG1OCON0_CWG1OVRB_POSITION                        0x5
#define _CWG1OCON0_CWG1OVRB_SIZE                            0x1
#define _CWG1OCON0_CWG1OVRB_LENGTH                          0x1
#define _CWG1OCON0_CWG1OVRB_MASK                            0x20
#define _CWG1OCON0_CWG1OVRC_POSN                            0x6
#define _CWG1OCON0_CWG1OVRC_POSITION                        0x6
#define _CWG1OCON0_CWG1OVRC_SIZE                            0x1
#define _CWG1OCON0_CWG1OVRC_LENGTH                          0x1
#define _CWG1OCON0_CWG1OVRC_MASK                            0x40
#define _CWG1OCON0_CWG1OVRD_POSN                            0x7
#define _CWG1OCON0_CWG1OVRD_POSITION                        0x7
#define _CWG1OCON0_CWG1OVRD_SIZE                            0x1
#define _CWG1OCON0_CWG1OVRD_LENGTH                          0x1
#define _CWG1OCON0_CWG1OVRD_MASK                            0x80

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x696);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 0696h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x696);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x697);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 0697h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x697);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1CLKCON
#define CWG1CLKCON CWG1CLKCON
extern volatile unsigned char           CWG1CLKCON          __at(0x699);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 0699h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x699);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x69A);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 069Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :8;
    };
    struct {
        unsigned IS0                    :1;
        unsigned IS1                    :1;
        unsigned IS2                    :1;
        unsigned IS3                    :1;
    };
    struct {
        unsigned CWG1IS                 :8;
    };
    struct {
        unsigned CWG1IS0                :1;
        unsigned CWG1IS1                :1;
        unsigned CWG1IS2                :1;
        unsigned CWG1IS3                :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x69A);
// bitfield macros
#define _CWG1ISM_IS_POSN                                    0x0
#define _CWG1ISM_IS_POSITION                                0x0
#define _CWG1ISM_IS_SIZE                                    0x8
#define _CWG1ISM_IS_LENGTH                                  0x8
#define _CWG1ISM_IS_MASK                                    0xFF
#define _CWG1ISM_IS0_POSN                                   0x0
#define _CWG1ISM_IS0_POSITION                               0x0
#define _CWG1ISM_IS0_SIZE                                   0x1
#define _CWG1ISM_IS0_LENGTH                                 0x1
#define _CWG1ISM_IS0_MASK                                   0x1
#define _CWG1ISM_IS1_POSN                                   0x1
#define _CWG1ISM_IS1_POSITION                               0x1
#define _CWG1ISM_IS1_SIZE                                   0x1
#define _CWG1ISM_IS1_LENGTH                                 0x1
#define _CWG1ISM_IS1_MASK                                   0x2
#define _CWG1ISM_IS2_POSN                                   0x2
#define _CWG1ISM_IS2_POSITION                               0x2
#define _CWG1ISM_IS2_SIZE                                   0x1
#define _CWG1ISM_IS2_LENGTH                                 0x1
#define _CWG1ISM_IS2_MASK                                   0x4
#define _CWG1ISM_IS3_POSN                                   0x3
#define _CWG1ISM_IS3_POSITION                               0x3
#define _CWG1ISM_IS3_SIZE                                   0x1
#define _CWG1ISM_IS3_LENGTH                                 0x1
#define _CWG1ISM_IS3_MASK                                   0x8
#define _CWG1ISM_CWG1IS_POSN                                0x0
#define _CWG1ISM_CWG1IS_POSITION                            0x0
#define _CWG1ISM_CWG1IS_SIZE                                0x8
#define _CWG1ISM_CWG1IS_LENGTH                              0x8
#define _CWG1ISM_CWG1IS_MASK                                0xFF
#define _CWG1ISM_CWG1IS0_POSN                               0x0
#define _CWG1ISM_CWG1IS0_POSITION                           0x0
#define _CWG1ISM_CWG1IS0_SIZE                               0x1
#define _CWG1ISM_CWG1IS0_LENGTH                             0x1
#define _CWG1ISM_CWG1IS0_MASK                               0x1
#define _CWG1ISM_CWG1IS1_POSN                               0x1
#define _CWG1ISM_CWG1IS1_POSITION                           0x1
#define _CWG1ISM_CWG1IS1_SIZE                               0x1
#define _CWG1ISM_CWG1IS1_LENGTH                             0x1
#define _CWG1ISM_CWG1IS1_MASK                               0x2
#define _CWG1ISM_CWG1IS2_POSN                               0x2
#define _CWG1ISM_CWG1IS2_POSITION                           0x2
#define _CWG1ISM_CWG1IS2_SIZE                               0x1
#define _CWG1ISM_CWG1IS2_LENGTH                             0x1
#define _CWG1ISM_CWG1IS2_MASK                               0x4
#define _CWG1ISM_CWG1IS3_POSN                               0x3
#define _CWG1ISM_CWG1IS3_POSITION                           0x3
#define _CWG1ISM_CWG1IS3_SIZE                               0x1
#define _CWG1ISM_CWG1IS3_LENGTH                             0x1
#define _CWG1ISM_CWG1IS3_MASK                               0x8

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x711);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x711);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x712);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x712);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x713);
#ifndef _LIB_BUILD
asm("WDTPSL equ 0713h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x713);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x714);
#ifndef _LIB_BUILD
asm("WDTPSH equ 0714h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x714);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x715);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0715h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x715);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80

// Register: SCANLADR
#define SCANLADR SCANLADR
extern volatile unsigned short          SCANLADR            __at(0x718);
#ifndef _LIB_BUILD
asm("SCANLADR equ 0718h");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x718);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 0718h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LDAR0                  :1;
        unsigned LDAR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x718);
// bitfield macros
#define _SCANLADRL_LADR_POSN                                0x0
#define _SCANLADRL_LADR_POSITION                            0x0
#define _SCANLADRL_LADR_SIZE                                0x8
#define _SCANLADRL_LADR_LENGTH                              0x8
#define _SCANLADRL_LADR_MASK                                0xFF
#define _SCANLADRL_LDAR0_POSN                               0x0
#define _SCANLADRL_LDAR0_POSITION                           0x0
#define _SCANLADRL_LDAR0_SIZE                               0x1
#define _SCANLADRL_LDAR0_LENGTH                             0x1
#define _SCANLADRL_LDAR0_MASK                               0x1
#define _SCANLADRL_LDAR1_POSN                               0x1
#define _SCANLADRL_LDAR1_POSITION                           0x1
#define _SCANLADRL_LDAR1_SIZE                               0x1
#define _SCANLADRL_LDAR1_LENGTH                             0x1
#define _SCANLADRL_LDAR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADR_POSN                            0x0
#define _SCANLADRL_SCANLADR_POSITION                        0x0
#define _SCANLADRL_SCANLADR_SIZE                            0x8
#define _SCANLADRL_SCANLADR_LENGTH                          0x8
#define _SCANLADRL_SCANLADR_MASK                            0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x719);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 0719h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x719);
// bitfield macros
#define _SCANLADRH_LADR_POSN                                0x0
#define _SCANLADRH_LADR_POSITION                            0x0
#define _SCANLADRH_LADR_SIZE                                0x8
#define _SCANLADRH_LADR_LENGTH                              0x8
#define _SCANLADRH_LADR_MASK                                0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADR_POSN                            0x0
#define _SCANLADRH_SCANLADR_POSITION                        0x0
#define _SCANLADRH_SCANLADR_SIZE                            0x8
#define _SCANLADRH_SCANLADR_LENGTH                          0x8
#define _SCANLADRH_SCANLADR_MASK                            0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANHADR
#define SCANHADR SCANHADR
extern volatile unsigned short          SCANHADR            __at(0x71A);
#ifndef _LIB_BUILD
asm("SCANHADR equ 071Ah");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x71A);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 071Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HARD2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x71A);
// bitfield macros
#define _SCANHADRL_HADR_POSN                                0x0
#define _SCANHADRL_HADR_POSITION                            0x0
#define _SCANHADRL_HADR_SIZE                                0x8
#define _SCANHADRL_HADR_LENGTH                              0x8
#define _SCANHADRL_HADR_MASK                                0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HARD2_POSN                               0x2
#define _SCANHADRL_HARD2_POSITION                           0x2
#define _SCANHADRL_HARD2_SIZE                               0x1
#define _SCANHADRL_HARD2_LENGTH                             0x1
#define _SCANHADRL_HARD2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADR_POSN                            0x0
#define _SCANHADRL_SCANHADR_POSITION                        0x0
#define _SCANHADRL_SCANHADR_SIZE                            0x8
#define _SCANHADRL_SCANHADR_LENGTH                          0x8
#define _SCANHADRL_SCANHADR_MASK                            0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x71B);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 071Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x71B);
// bitfield macros
#define _SCANHADRH_HADR_POSN                                0x0
#define _SCANHADRH_HADR_POSITION                            0x0
#define _SCANHADRH_HADR_SIZE                                0x8
#define _SCANHADRH_HADR_LENGTH                              0x8
#define _SCANHADRH_HADR_MASK                                0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADR_POSN                            0x0
#define _SCANHADRH_SCANHADR_POSITION                        0x0
#define _SCANHADRH_SCANHADR_SIZE                            0x8
#define _SCANHADRH_SCANHADR_LENGTH                          0x8
#define _SCANHADRH_SCANHADR_MASK                            0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x71C);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 071Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :2;
        unsigned                        :1;
        unsigned INTM                   :1;
        unsigned INVALID                :1;
        unsigned BUSY                   :1;
        unsigned SCANGO                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
    };
    struct {
        unsigned SCANMODE               :2;
        unsigned                        :1;
        unsigned SCANINTM               :1;
        unsigned SCANINVALID            :1;
        unsigned SCANBUSY               :1;
        unsigned                        :1;
        unsigned SCANEN                 :1;
    };
    struct {
        unsigned SCANMODE0              :1;
        unsigned SCANMODE1              :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x71C);
// bitfield macros
#define _SCANCON0_MODE_POSN                                 0x0
#define _SCANCON0_MODE_POSITION                             0x0
#define _SCANCON0_MODE_SIZE                                 0x2
#define _SCANCON0_MODE_LENGTH                               0x2
#define _SCANCON0_MODE_MASK                                 0x3
#define _SCANCON0_INTM_POSN                                 0x3
#define _SCANCON0_INTM_POSITION                             0x3
#define _SCANCON0_INTM_SIZE                                 0x1
#define _SCANCON0_INTM_LENGTH                               0x1
#define _SCANCON0_INTM_MASK                                 0x8
#define _SCANCON0_INVALID_POSN                              0x4
#define _SCANCON0_INVALID_POSITION                          0x4
#define _SCANCON0_INVALID_SIZE                              0x1
#define _SCANCON0_INVALID_LENGTH                            0x1
#define _SCANCON0_INVALID_MASK                              0x10
#define _SCANCON0_BUSY_POSN                                 0x5
#define _SCANCON0_BUSY_POSITION                             0x5
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x20
#define _SCANCON0_SCANGO_POSN                               0x6
#define _SCANCON0_SCANGO_POSITION                           0x6
#define _SCANCON0_SCANGO_SIZE                               0x1
#define _SCANCON0_SCANGO_LENGTH                             0x1
#define _SCANCON0_SCANGO_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_MODE0_POSN                                0x0
#define _SCANCON0_MODE0_POSITION                            0x0
#define _SCANCON0_MODE0_SIZE                                0x1
#define _SCANCON0_MODE0_LENGTH                              0x1
#define _SCANCON0_MODE0_MASK                                0x1
#define _SCANCON0_MODE1_POSN                                0x1
#define _SCANCON0_MODE1_POSITION                            0x1
#define _SCANCON0_MODE1_SIZE                                0x1
#define _SCANCON0_MODE1_LENGTH                              0x1
#define _SCANCON0_MODE1_MASK                                0x2
#define _SCANCON0_SCANMODE_POSN                             0x0
#define _SCANCON0_SCANMODE_POSITION                         0x0
#define _SCANCON0_SCANMODE_SIZE                             0x2
#define _SCANCON0_SCANMODE_LENGTH                           0x2
#define _SCANCON0_SCANMODE_MASK                             0x3
#define _SCANCON0_SCANINTM_POSN                             0x3
#define _SCANCON0_SCANINTM_POSITION                         0x3
#define _SCANCON0_SCANINTM_SIZE                             0x1
#define _SCANCON0_SCANINTM_LENGTH                           0x1
#define _SCANCON0_SCANINTM_MASK                             0x8
#define _SCANCON0_SCANINVALID_POSN                          0x4
#define _SCANCON0_SCANINVALID_POSITION                      0x4
#define _SCANCON0_SCANINVALID_SIZE                          0x1
#define _SCANCON0_SCANINVALID_LENGTH                        0x1
#define _SCANCON0_SCANINVALID_MASK                          0x10
#define _SCANCON0_SCANBUSY_POSN                             0x5
#define _SCANCON0_SCANBUSY_POSITION                         0x5
#define _SCANCON0_SCANBUSY_SIZE                             0x1
#define _SCANCON0_SCANBUSY_LENGTH                           0x1
#define _SCANCON0_SCANBUSY_MASK                             0x20
#define _SCANCON0_SCANEN_POSN                               0x7
#define _SCANCON0_SCANEN_POSITION                           0x7
#define _SCANCON0_SCANEN_SIZE                               0x1
#define _SCANCON0_SCANEN_LENGTH                             0x1
#define _SCANCON0_SCANEN_MASK                               0x80
#define _SCANCON0_SCANMODE0_POSN                            0x0
#define _SCANCON0_SCANMODE0_POSITION                        0x0
#define _SCANCON0_SCANMODE0_SIZE                            0x1
#define _SCANCON0_SCANMODE0_LENGTH                          0x1
#define _SCANCON0_SCANMODE0_MASK                            0x1
#define _SCANCON0_SCANMODE1_POSN                            0x1
#define _SCANCON0_SCANMODE1_POSITION                        0x1
#define _SCANCON0_SCANMODE1_SIZE                            0x1
#define _SCANCON0_SCANMODE1_LENGTH                          0x1
#define _SCANCON0_SCANMODE1_MASK                            0x2

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x71D);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 071Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :8;
    };
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
        unsigned TSEL3                  :1;
    };
    struct {
        unsigned SCANTSEL               :8;
    };
    struct {
        unsigned SCANTSEL0              :1;
        unsigned SCANTSEL1              :1;
        unsigned SCANTSEL2              :1;
        unsigned SCANTSEL3              :1;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x71D);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x8
#define _SCANTRIG_TSEL_LENGTH                               0x8
#define _SCANTRIG_TSEL_MASK                                 0xFF
#define _SCANTRIG_TSEL0_POSN                                0x0
#define _SCANTRIG_TSEL0_POSITION                            0x0
#define _SCANTRIG_TSEL0_SIZE                                0x1
#define _SCANTRIG_TSEL0_LENGTH                              0x1
#define _SCANTRIG_TSEL0_MASK                                0x1
#define _SCANTRIG_TSEL1_POSN                                0x1
#define _SCANTRIG_TSEL1_POSITION                            0x1
#define _SCANTRIG_TSEL1_SIZE                                0x1
#define _SCANTRIG_TSEL1_LENGTH                              0x1
#define _SCANTRIG_TSEL1_MASK                                0x2
#define _SCANTRIG_TSEL2_POSN                                0x2
#define _SCANTRIG_TSEL2_POSITION                            0x2
#define _SCANTRIG_TSEL2_SIZE                                0x1
#define _SCANTRIG_TSEL2_LENGTH                              0x1
#define _SCANTRIG_TSEL2_MASK                                0x4
#define _SCANTRIG_TSEL3_POSN                                0x3
#define _SCANTRIG_TSEL3_POSITION                            0x3
#define _SCANTRIG_TSEL3_SIZE                                0x1
#define _SCANTRIG_TSEL3_LENGTH                              0x1
#define _SCANTRIG_TSEL3_MASK                                0x8
#define _SCANTRIG_SCANTSEL_POSN                             0x0
#define _SCANTRIG_SCANTSEL_POSITION                         0x0
#define _SCANTRIG_SCANTSEL_SIZE                             0x8
#define _SCANTRIG_SCANTSEL_LENGTH                           0x8
#define _SCANTRIG_SCANTSEL_MASK                             0xFF
#define _SCANTRIG_SCANTSEL0_POSN                            0x0
#define _SCANTRIG_SCANTSEL0_POSITION                        0x0
#define _SCANTRIG_SCANTSEL0_SIZE                            0x1
#define _SCANTRIG_SCANTSEL0_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL0_MASK                            0x1
#define _SCANTRIG_SCANTSEL1_POSN                            0x1
#define _SCANTRIG_SCANTSEL1_POSITION                        0x1
#define _SCANTRIG_SCANTSEL1_SIZE                            0x1
#define _SCANTRIG_SCANTSEL1_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL1_MASK                            0x2
#define _SCANTRIG_SCANTSEL2_POSN                            0x2
#define _SCANTRIG_SCANTSEL2_POSITION                        0x2
#define _SCANTRIG_SCANTSEL2_SIZE                            0x1
#define _SCANTRIG_SCANTSEL2_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL2_MASK                            0x4
#define _SCANTRIG_SCANTSEL3_POSN                            0x3
#define _SCANTRIG_SCANTSEL3_POSITION                        0x3
#define _SCANTRIG_SCANTSEL3_SIZE                            0x1
#define _SCANTRIG_SCANTSEL3_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL3_MASK                            0x8

// Register: CRCDAT
#define CRCDAT CRCDAT
extern volatile unsigned short          CRCDAT              __at(0x791);
#ifndef _LIB_BUILD
asm("CRCDAT equ 0791h");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0x791);
#ifndef _LIB_BUILD
asm("CRCDATL equ 0791h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAT                    :8;
    };
    struct {
        unsigned DAT0                   :1;
        unsigned DAT1                   :1;
        unsigned DAT2                   :1;
        unsigned DAT3                   :1;
        unsigned DAT4                   :1;
        unsigned DAT5                   :1;
        unsigned DAT6                   :1;
        unsigned DAT7                   :1;
    };
    struct {
        unsigned CRCDAT                 :8;
    };
    struct {
        unsigned CRCDAT0                :1;
        unsigned CRCDAT1                :1;
        unsigned CRCDAT2                :1;
        unsigned CRCDAT3                :1;
        unsigned CRCDAT4                :1;
        unsigned CRCDAT5                :1;
        unsigned CRCDAT6                :1;
        unsigned CRDCDAT7               :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0x791);
// bitfield macros
#define _CRCDATL_DAT_POSN                                   0x0
#define _CRCDATL_DAT_POSITION                               0x0
#define _CRCDATL_DAT_SIZE                                   0x8
#define _CRCDATL_DAT_LENGTH                                 0x8
#define _CRCDATL_DAT_MASK                                   0xFF
#define _CRCDATL_DAT0_POSN                                  0x0
#define _CRCDATL_DAT0_POSITION                              0x0
#define _CRCDATL_DAT0_SIZE                                  0x1
#define _CRCDATL_DAT0_LENGTH                                0x1
#define _CRCDATL_DAT0_MASK                                  0x1
#define _CRCDATL_DAT1_POSN                                  0x1
#define _CRCDATL_DAT1_POSITION                              0x1
#define _CRCDATL_DAT1_SIZE                                  0x1
#define _CRCDATL_DAT1_LENGTH                                0x1
#define _CRCDATL_DAT1_MASK                                  0x2
#define _CRCDATL_DAT2_POSN                                  0x2
#define _CRCDATL_DAT2_POSITION                              0x2
#define _CRCDATL_DAT2_SIZE                                  0x1
#define _CRCDATL_DAT2_LENGTH                                0x1
#define _CRCDATL_DAT2_MASK                                  0x4
#define _CRCDATL_DAT3_POSN                                  0x3
#define _CRCDATL_DAT3_POSITION                              0x3
#define _CRCDATL_DAT3_SIZE                                  0x1
#define _CRCDATL_DAT3_LENGTH                                0x1
#define _CRCDATL_DAT3_MASK                                  0x8
#define _CRCDATL_DAT4_POSN                                  0x4
#define _CRCDATL_DAT4_POSITION                              0x4
#define _CRCDATL_DAT4_SIZE                                  0x1
#define _CRCDATL_DAT4_LENGTH                                0x1
#define _CRCDATL_DAT4_MASK                                  0x10
#define _CRCDATL_DAT5_POSN                                  0x5
#define _CRCDATL_DAT5_POSITION                              0x5
#define _CRCDATL_DAT5_SIZE                                  0x1
#define _CRCDATL_DAT5_LENGTH                                0x1
#define _CRCDATL_DAT5_MASK                                  0x20
#define _CRCDATL_DAT6_POSN                                  0x6
#define _CRCDATL_DAT6_POSITION                              0x6
#define _CRCDATL_DAT6_SIZE                                  0x1
#define _CRCDATL_DAT6_LENGTH                                0x1
#define _CRCDATL_DAT6_MASK                                  0x40
#define _CRCDATL_DAT7_POSN                                  0x7
#define _CRCDATL_DAT7_POSITION                              0x7
#define _CRCDATL_DAT7_SIZE                                  0x1
#define _CRCDATL_DAT7_LENGTH                                0x1
#define _CRCDATL_DAT7_MASK                                  0x80
#define _CRCDATL_CRCDAT_POSN                                0x0
#define _CRCDATL_CRCDAT_POSITION                            0x0
#define _CRCDATL_CRCDAT_SIZE                                0x8
#define _CRCDATL_CRCDAT_LENGTH                              0x8
#define _CRCDATL_CRCDAT_MASK                                0xFF
#define _CRCDATL_CRCDAT0_POSN                               0x0
#define _CRCDATL_CRCDAT0_POSITION                           0x0
#define _CRCDATL_CRCDAT0_SIZE                               0x1
#define _CRCDATL_CRCDAT0_LENGTH                             0x1
#define _CRCDATL_CRCDAT0_MASK                               0x1
#define _CRCDATL_CRCDAT1_POSN                               0x1
#define _CRCDATL_CRCDAT1_POSITION                           0x1
#define _CRCDATL_CRCDAT1_SIZE                               0x1
#define _CRCDATL_CRCDAT1_LENGTH                             0x1
#define _CRCDATL_CRCDAT1_MASK                               0x2
#define _CRCDATL_CRCDAT2_POSN                               0x2
#define _CRCDATL_CRCDAT2_POSITION                           0x2
#define _CRCDATL_CRCDAT2_SIZE                               0x1
#define _CRCDATL_CRCDAT2_LENGTH                             0x1
#define _CRCDATL_CRCDAT2_MASK                               0x4
#define _CRCDATL_CRCDAT3_POSN                               0x3
#define _CRCDATL_CRCDAT3_POSITION                           0x3
#define _CRCDATL_CRCDAT3_SIZE                               0x1
#define _CRCDATL_CRCDAT3_LENGTH                             0x1
#define _CRCDATL_CRCDAT3_MASK                               0x8
#define _CRCDATL_CRCDAT4_POSN                               0x4
#define _CRCDATL_CRCDAT4_POSITION                           0x4
#define _CRCDATL_CRCDAT4_SIZE                               0x1
#define _CRCDATL_CRCDAT4_LENGTH                             0x1
#define _CRCDATL_CRCDAT4_MASK                               0x10
#define _CRCDATL_CRCDAT5_POSN                               0x5
#define _CRCDATL_CRCDAT5_POSITION                           0x5
#define _CRCDATL_CRCDAT5_SIZE                               0x1
#define _CRCDATL_CRCDAT5_LENGTH                             0x1
#define _CRCDATL_CRCDAT5_MASK                               0x20
#define _CRCDATL_CRCDAT6_POSN                               0x6
#define _CRCDATL_CRCDAT6_POSITION                           0x6
#define _CRCDATL_CRCDAT6_SIZE                               0x1
#define _CRCDATL_CRCDAT6_LENGTH                             0x1
#define _CRCDATL_CRCDAT6_MASK                               0x40
#define _CRCDATL_CRDCDAT7_POSN                              0x7
#define _CRCDATL_CRDCDAT7_POSITION                          0x7
#define _CRCDATL_CRDCDAT7_SIZE                              0x1
#define _CRCDATL_CRDCDAT7_LENGTH                            0x1
#define _CRCDATL_CRDCDAT7_MASK                              0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0x792);
#ifndef _LIB_BUILD
asm("CRCDATH equ 0792h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAT                    :8;
    };
    struct {
        unsigned DAT8                   :1;
        unsigned DAT9                   :1;
        unsigned DAT10                  :1;
        unsigned DAT11                  :1;
        unsigned DAT12                  :1;
        unsigned DAT13                  :1;
        unsigned DAT14                  :1;
        unsigned DAT15                  :1;
    };
    struct {
        unsigned CRCDAT                 :8;
    };
    struct {
        unsigned CRCDAT8                :1;
        unsigned CRCDAT9                :1;
        unsigned CRCDAT10               :1;
        unsigned CRCDAT11               :1;
        unsigned CRCDAT12               :1;
        unsigned CRCDAT13               :1;
        unsigned CRCDAT14               :1;
        unsigned CRCDAT15               :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0x792);
// bitfield macros
#define _CRCDATH_DAT_POSN                                   0x0
#define _CRCDATH_DAT_POSITION                               0x0
#define _CRCDATH_DAT_SIZE                                   0x8
#define _CRCDATH_DAT_LENGTH                                 0x8
#define _CRCDATH_DAT_MASK                                   0xFF
#define _CRCDATH_DAT8_POSN                                  0x0
#define _CRCDATH_DAT8_POSITION                              0x0
#define _CRCDATH_DAT8_SIZE                                  0x1
#define _CRCDATH_DAT8_LENGTH                                0x1
#define _CRCDATH_DAT8_MASK                                  0x1
#define _CRCDATH_DAT9_POSN                                  0x1
#define _CRCDATH_DAT9_POSITION                              0x1
#define _CRCDATH_DAT9_SIZE                                  0x1
#define _CRCDATH_DAT9_LENGTH                                0x1
#define _CRCDATH_DAT9_MASK                                  0x2
#define _CRCDATH_DAT10_POSN                                 0x2
#define _CRCDATH_DAT10_POSITION                             0x2
#define _CRCDATH_DAT10_SIZE                                 0x1
#define _CRCDATH_DAT10_LENGTH                               0x1
#define _CRCDATH_DAT10_MASK                                 0x4
#define _CRCDATH_DAT11_POSN                                 0x3
#define _CRCDATH_DAT11_POSITION                             0x3
#define _CRCDATH_DAT11_SIZE                                 0x1
#define _CRCDATH_DAT11_LENGTH                               0x1
#define _CRCDATH_DAT11_MASK                                 0x8
#define _CRCDATH_DAT12_POSN                                 0x4
#define _CRCDATH_DAT12_POSITION                             0x4
#define _CRCDATH_DAT12_SIZE                                 0x1
#define _CRCDATH_DAT12_LENGTH                               0x1
#define _CRCDATH_DAT12_MASK                                 0x10
#define _CRCDATH_DAT13_POSN                                 0x5
#define _CRCDATH_DAT13_POSITION                             0x5
#define _CRCDATH_DAT13_SIZE                                 0x1
#define _CRCDATH_DAT13_LENGTH                               0x1
#define _CRCDATH_DAT13_MASK                                 0x20
#define _CRCDATH_DAT14_POSN                                 0x6
#define _CRCDATH_DAT14_POSITION                             0x6
#define _CRCDATH_DAT14_SIZE                                 0x1
#define _CRCDATH_DAT14_LENGTH                               0x1
#define _CRCDATH_DAT14_MASK                                 0x40
#define _CRCDATH_DAT15_POSN                                 0x7
#define _CRCDATH_DAT15_POSITION                             0x7
#define _CRCDATH_DAT15_SIZE                                 0x1
#define _CRCDATH_DAT15_LENGTH                               0x1
#define _CRCDATH_DAT15_MASK                                 0x80
#define _CRCDATH_CRCDAT_POSN                                0x0
#define _CRCDATH_CRCDAT_POSITION                            0x0
#define _CRCDATH_CRCDAT_SIZE                                0x8
#define _CRCDATH_CRCDAT_LENGTH                              0x8
#define _CRCDATH_CRCDAT_MASK                                0xFF
#define _CRCDATH_CRCDAT8_POSN                               0x0
#define _CRCDATH_CRCDAT8_POSITION                           0x0
#define _CRCDATH_CRCDAT8_SIZE                               0x1
#define _CRCDATH_CRCDAT8_LENGTH                             0x1
#define _CRCDATH_CRCDAT8_MASK                               0x1
#define _CRCDATH_CRCDAT9_POSN                               0x1
#define _CRCDATH_CRCDAT9_POSITION                           0x1
#define _CRCDATH_CRCDAT9_SIZE                               0x1
#define _CRCDATH_CRCDAT9_LENGTH                             0x1
#define _CRCDATH_CRCDAT9_MASK                               0x2
#define _CRCDATH_CRCDAT10_POSN                              0x2
#define _CRCDATH_CRCDAT10_POSITION                          0x2
#define _CRCDATH_CRCDAT10_SIZE                              0x1
#define _CRCDATH_CRCDAT10_LENGTH                            0x1
#define _CRCDATH_CRCDAT10_MASK                              0x4
#define _CRCDATH_CRCDAT11_POSN                              0x3
#define _CRCDATH_CRCDAT11_POSITION                          0x3
#define _CRCDATH_CRCDAT11_SIZE                              0x1
#define _CRCDATH_CRCDAT11_LENGTH                            0x1
#define _CRCDATH_CRCDAT11_MASK                              0x8
#define _CRCDATH_CRCDAT12_POSN                              0x4
#define _CRCDATH_CRCDAT12_POSITION                          0x4
#define _CRCDATH_CRCDAT12_SIZE                              0x1
#define _CRCDATH_CRCDAT12_LENGTH                            0x1
#define _CRCDATH_CRCDAT12_MASK                              0x10
#define _CRCDATH_CRCDAT13_POSN                              0x5
#define _CRCDATH_CRCDAT13_POSITION                          0x5
#define _CRCDATH_CRCDAT13_SIZE                              0x1
#define _CRCDATH_CRCDAT13_LENGTH                            0x1
#define _CRCDATH_CRCDAT13_MASK                              0x20
#define _CRCDATH_CRCDAT14_POSN                              0x6
#define _CRCDATH_CRCDAT14_POSITION                          0x6
#define _CRCDATH_CRCDAT14_SIZE                              0x1
#define _CRCDATH_CRCDAT14_LENGTH                            0x1
#define _CRCDATH_CRCDAT14_MASK                              0x40
#define _CRCDATH_CRCDAT15_POSN                              0x7
#define _CRCDATH_CRCDAT15_POSITION                          0x7
#define _CRCDATH_CRCDAT15_SIZE                              0x1
#define _CRCDATH_CRCDAT15_LENGTH                            0x1
#define _CRCDATH_CRCDAT15_MASK                              0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0x793);
#ifndef _LIB_BUILD
asm("CRCACC equ 0793h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0x793);
#ifndef _LIB_BUILD
asm("CRCACCL equ 0793h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
    struct {
        unsigned CRCACC                 :8;
    };
    struct {
        unsigned CRCACC0                :1;
        unsigned CRCACC1                :1;
        unsigned CRCACC2                :1;
        unsigned CRCACC3                :1;
        unsigned CRCACC4                :1;
        unsigned CRCACC5                :1;
        unsigned CRCACC6                :1;
        unsigned CRCACC7                :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0x793);
// bitfield macros
#define _CRCACCL_ACC_POSN                                   0x0
#define _CRCACCL_ACC_POSITION                               0x0
#define _CRCACCL_ACC_SIZE                                   0x8
#define _CRCACCL_ACC_LENGTH                                 0x8
#define _CRCACCL_ACC_MASK                                   0xFF
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80
#define _CRCACCL_CRCACC_POSN                                0x0
#define _CRCACCL_CRCACC_POSITION                            0x0
#define _CRCACCL_CRCACC_SIZE                                0x8
#define _CRCACCL_CRCACC_LENGTH                              0x8
#define _CRCACCL_CRCACC_MASK                                0xFF
#define _CRCACCL_CRCACC0_POSN                               0x0
#define _CRCACCL_CRCACC0_POSITION                           0x0
#define _CRCACCL_CRCACC0_SIZE                               0x1
#define _CRCACCL_CRCACC0_LENGTH                             0x1
#define _CRCACCL_CRCACC0_MASK                               0x1
#define _CRCACCL_CRCACC1_POSN                               0x1
#define _CRCACCL_CRCACC1_POSITION                           0x1
#define _CRCACCL_CRCACC1_SIZE                               0x1
#define _CRCACCL_CRCACC1_LENGTH                             0x1
#define _CRCACCL_CRCACC1_MASK                               0x2
#define _CRCACCL_CRCACC2_POSN                               0x2
#define _CRCACCL_CRCACC2_POSITION                           0x2
#define _CRCACCL_CRCACC2_SIZE                               0x1
#define _CRCACCL_CRCACC2_LENGTH                             0x1
#define _CRCACCL_CRCACC2_MASK                               0x4
#define _CRCACCL_CRCACC3_POSN                               0x3
#define _CRCACCL_CRCACC3_POSITION                           0x3
#define _CRCACCL_CRCACC3_SIZE                               0x1
#define _CRCACCL_CRCACC3_LENGTH                             0x1
#define _CRCACCL_CRCACC3_MASK                               0x8
#define _CRCACCL_CRCACC4_POSN                               0x4
#define _CRCACCL_CRCACC4_POSITION                           0x4
#define _CRCACCL_CRCACC4_SIZE                               0x1
#define _CRCACCL_CRCACC4_LENGTH                             0x1
#define _CRCACCL_CRCACC4_MASK                               0x10
#define _CRCACCL_CRCACC5_POSN                               0x5
#define _CRCACCL_CRCACC5_POSITION                           0x5
#define _CRCACCL_CRCACC5_SIZE                               0x1
#define _CRCACCL_CRCACC5_LENGTH                             0x1
#define _CRCACCL_CRCACC5_MASK                               0x20
#define _CRCACCL_CRCACC6_POSN                               0x6
#define _CRCACCL_CRCACC6_POSITION                           0x6
#define _CRCACCL_CRCACC6_SIZE                               0x1
#define _CRCACCL_CRCACC6_LENGTH                             0x1
#define _CRCACCL_CRCACC6_MASK                               0x40
#define _CRCACCL_CRCACC7_POSN                               0x7
#define _CRCACCL_CRCACC7_POSITION                           0x7
#define _CRCACCL_CRCACC7_SIZE                               0x1
#define _CRCACCL_CRCACC7_LENGTH                             0x1
#define _CRCACCL_CRCACC7_MASK                               0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0x794);
#ifndef _LIB_BUILD
asm("CRCACCH equ 0794h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
    struct {
        unsigned CRCACC                 :8;
    };
    struct {
        unsigned CRCACC8                :1;
        unsigned CRCACC9                :1;
        unsigned CRCACC10               :1;
        unsigned CRCACC11               :1;
        unsigned CRCACC12               :1;
        unsigned CRCACC13               :1;
        unsigned CRCACC14               :1;
        unsigned CRCACC15               :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0x794);
// bitfield macros
#define _CRCACCH_ACC_POSN                                   0x0
#define _CRCACCH_ACC_POSITION                               0x0
#define _CRCACCH_ACC_SIZE                                   0x8
#define _CRCACCH_ACC_LENGTH                                 0x8
#define _CRCACCH_ACC_MASK                                   0xFF
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80
#define _CRCACCH_CRCACC_POSN                                0x0
#define _CRCACCH_CRCACC_POSITION                            0x0
#define _CRCACCH_CRCACC_SIZE                                0x8
#define _CRCACCH_CRCACC_LENGTH                              0x8
#define _CRCACCH_CRCACC_MASK                                0xFF
#define _CRCACCH_CRCACC8_POSN                               0x0
#define _CRCACCH_CRCACC8_POSITION                           0x0
#define _CRCACCH_CRCACC8_SIZE                               0x1
#define _CRCACCH_CRCACC8_LENGTH                             0x1
#define _CRCACCH_CRCACC8_MASK                               0x1
#define _CRCACCH_CRCACC9_POSN                               0x1
#define _CRCACCH_CRCACC9_POSITION                           0x1
#define _CRCACCH_CRCACC9_SIZE                               0x1
#define _CRCACCH_CRCACC9_LENGTH                             0x1
#define _CRCACCH_CRCACC9_MASK                               0x2
#define _CRCACCH_CRCACC10_POSN                              0x2
#define _CRCACCH_CRCACC10_POSITION                          0x2
#define _CRCACCH_CRCACC10_SIZE                              0x1
#define _CRCACCH_CRCACC10_LENGTH                            0x1
#define _CRCACCH_CRCACC10_MASK                              0x4
#define _CRCACCH_CRCACC11_POSN                              0x3
#define _CRCACCH_CRCACC11_POSITION                          0x3
#define _CRCACCH_CRCACC11_SIZE                              0x1
#define _CRCACCH_CRCACC11_LENGTH                            0x1
#define _CRCACCH_CRCACC11_MASK                              0x8
#define _CRCACCH_CRCACC12_POSN                              0x4
#define _CRCACCH_CRCACC12_POSITION                          0x4
#define _CRCACCH_CRCACC12_SIZE                              0x1
#define _CRCACCH_CRCACC12_LENGTH                            0x1
#define _CRCACCH_CRCACC12_MASK                              0x10
#define _CRCACCH_CRCACC13_POSN                              0x5
#define _CRCACCH_CRCACC13_POSITION                          0x5
#define _CRCACCH_CRCACC13_SIZE                              0x1
#define _CRCACCH_CRCACC13_LENGTH                            0x1
#define _CRCACCH_CRCACC13_MASK                              0x20
#define _CRCACCH_CRCACC14_POSN                              0x6
#define _CRCACCH_CRCACC14_POSITION                          0x6
#define _CRCACCH_CRCACC14_SIZE                              0x1
#define _CRCACCH_CRCACC14_LENGTH                            0x1
#define _CRCACCH_CRCACC14_MASK                              0x40
#define _CRCACCH_CRCACC15_POSN                              0x7
#define _CRCACCH_CRCACC15_POSITION                          0x7
#define _CRCACCH_CRCACC15_SIZE                              0x1
#define _CRCACCH_CRCACC15_LENGTH                            0x1
#define _CRCACCH_CRCACC15_MASK                              0x80

// Register: CRCSHIFT
#define CRCSHIFT CRCSHIFT
extern volatile unsigned short          CRCSHIFT            __at(0x795);
#ifndef _LIB_BUILD
asm("CRCSHIFT equ 0795h");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0x795);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 0795h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT0                 :1;
        unsigned SHIFT1                 :1;
        unsigned SHIFT2                 :1;
        unsigned SHIFT3                 :1;
        unsigned SHIFT4                 :1;
        unsigned SHIFT5                 :1;
        unsigned SHIFT6                 :1;
        unsigned SHIFT7                 :1;
    };
    struct {
        unsigned CRCSHIFT               :8;
    };
    struct {
        unsigned CRCSHIFT0              :1;
        unsigned CRCSHIFT1              :1;
        unsigned CRCSHIFT2              :1;
        unsigned CRCSHIFT3              :1;
        unsigned CRCSHIFT4              :1;
        unsigned CRCSHIFT5              :1;
        unsigned CRCSHIFT6              :1;
        unsigned CRCSHIFT7              :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x795);
// bitfield macros
#define _CRCSHIFTL_SHIFT_POSN                               0x0
#define _CRCSHIFTL_SHIFT_POSITION                           0x0
#define _CRCSHIFTL_SHIFT_SIZE                               0x8
#define _CRCSHIFTL_SHIFT_LENGTH                             0x8
#define _CRCSHIFTL_SHIFT_MASK                               0xFF
#define _CRCSHIFTL_SHIFT0_POSN                              0x0
#define _CRCSHIFTL_SHIFT0_POSITION                          0x0
#define _CRCSHIFTL_SHIFT0_SIZE                              0x1
#define _CRCSHIFTL_SHIFT0_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT0_MASK                              0x1
#define _CRCSHIFTL_SHIFT1_POSN                              0x1
#define _CRCSHIFTL_SHIFT1_POSITION                          0x1
#define _CRCSHIFTL_SHIFT1_SIZE                              0x1
#define _CRCSHIFTL_SHIFT1_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT1_MASK                              0x2
#define _CRCSHIFTL_SHIFT2_POSN                              0x2
#define _CRCSHIFTL_SHIFT2_POSITION                          0x2
#define _CRCSHIFTL_SHIFT2_SIZE                              0x1
#define _CRCSHIFTL_SHIFT2_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT2_MASK                              0x4
#define _CRCSHIFTL_SHIFT3_POSN                              0x3
#define _CRCSHIFTL_SHIFT3_POSITION                          0x3
#define _CRCSHIFTL_SHIFT3_SIZE                              0x1
#define _CRCSHIFTL_SHIFT3_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT3_MASK                              0x8
#define _CRCSHIFTL_SHIFT4_POSN                              0x4
#define _CRCSHIFTL_SHIFT4_POSITION                          0x4
#define _CRCSHIFTL_SHIFT4_SIZE                              0x1
#define _CRCSHIFTL_SHIFT4_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT4_MASK                              0x10
#define _CRCSHIFTL_SHIFT5_POSN                              0x5
#define _CRCSHIFTL_SHIFT5_POSITION                          0x5
#define _CRCSHIFTL_SHIFT5_SIZE                              0x1
#define _CRCSHIFTL_SHIFT5_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT5_MASK                              0x20
#define _CRCSHIFTL_SHIFT6_POSN                              0x6
#define _CRCSHIFTL_SHIFT6_POSITION                          0x6
#define _CRCSHIFTL_SHIFT6_SIZE                              0x1
#define _CRCSHIFTL_SHIFT6_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT6_MASK                              0x40
#define _CRCSHIFTL_SHIFT7_POSN                              0x7
#define _CRCSHIFTL_SHIFT7_POSITION                          0x7
#define _CRCSHIFTL_SHIFT7_SIZE                              0x1
#define _CRCSHIFTL_SHIFT7_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT7_MASK                              0x80
#define _CRCSHIFTL_CRCSHIFT_POSN                            0x0
#define _CRCSHIFTL_CRCSHIFT_POSITION                        0x0
#define _CRCSHIFTL_CRCSHIFT_SIZE                            0x8
#define _CRCSHIFTL_CRCSHIFT_LENGTH                          0x8
#define _CRCSHIFTL_CRCSHIFT_MASK                            0xFF
#define _CRCSHIFTL_CRCSHIFT0_POSN                           0x0
#define _CRCSHIFTL_CRCSHIFT0_POSITION                       0x0
#define _CRCSHIFTL_CRCSHIFT0_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT0_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT0_MASK                           0x1
#define _CRCSHIFTL_CRCSHIFT1_POSN                           0x1
#define _CRCSHIFTL_CRCSHIFT1_POSITION                       0x1
#define _CRCSHIFTL_CRCSHIFT1_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT1_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT1_MASK                           0x2
#define _CRCSHIFTL_CRCSHIFT2_POSN                           0x2
#define _CRCSHIFTL_CRCSHIFT2_POSITION                       0x2
#define _CRCSHIFTL_CRCSHIFT2_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT2_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT2_MASK                           0x4
#define _CRCSHIFTL_CRCSHIFT3_POSN                           0x3
#define _CRCSHIFTL_CRCSHIFT3_POSITION                       0x3
#define _CRCSHIFTL_CRCSHIFT3_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT3_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT3_MASK                           0x8
#define _CRCSHIFTL_CRCSHIFT4_POSN                           0x4
#define _CRCSHIFTL_CRCSHIFT4_POSITION                       0x4
#define _CRCSHIFTL_CRCSHIFT4_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT4_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT4_MASK                           0x10
#define _CRCSHIFTL_CRCSHIFT5_POSN                           0x5
#define _CRCSHIFTL_CRCSHIFT5_POSITION                       0x5
#define _CRCSHIFTL_CRCSHIFT5_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT5_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT5_MASK                           0x20
#define _CRCSHIFTL_CRCSHIFT6_POSN                           0x6
#define _CRCSHIFTL_CRCSHIFT6_POSITION                       0x6
#define _CRCSHIFTL_CRCSHIFT6_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT6_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT6_MASK                           0x40
#define _CRCSHIFTL_CRCSHIFT7_POSN                           0x7
#define _CRCSHIFTL_CRCSHIFT7_POSITION                       0x7
#define _CRCSHIFTL_CRCSHIFT7_SIZE                           0x1
#define _CRCSHIFTL_CRCSHIFT7_LENGTH                         0x1
#define _CRCSHIFTL_CRCSHIFT7_MASK                           0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0x796);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT8                 :1;
        unsigned SHIFT9                 :1;
        unsigned SHIFT10                :1;
        unsigned SHIFT11                :1;
        unsigned SHIFT12                :1;
        unsigned SHIFT13                :1;
        unsigned SHIFT14                :1;
        unsigned SHIFT15                :1;
    };
    struct {
        unsigned CRCSHIFT               :8;
    };
    struct {
        unsigned CRCSHIFT8              :1;
        unsigned CRCSHIFT9              :1;
        unsigned CRCSHIFT10             :1;
        unsigned CRCSHIFT11             :1;
        unsigned CRCSHIFT12             :1;
        unsigned CRCSHIFT13             :1;
        unsigned CRCSHIFT14             :1;
        unsigned CRCSHIFT15             :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x796);
// bitfield macros
#define _CRCSHIFTH_SHIFT_POSN                               0x0
#define _CRCSHIFTH_SHIFT_POSITION                           0x0
#define _CRCSHIFTH_SHIFT_SIZE                               0x8
#define _CRCSHIFTH_SHIFT_LENGTH                             0x8
#define _CRCSHIFTH_SHIFT_MASK                               0xFF
#define _CRCSHIFTH_SHIFT8_POSN                              0x0
#define _CRCSHIFTH_SHIFT8_POSITION                          0x0
#define _CRCSHIFTH_SHIFT8_SIZE                              0x1
#define _CRCSHIFTH_SHIFT8_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT8_MASK                              0x1
#define _CRCSHIFTH_SHIFT9_POSN                              0x1
#define _CRCSHIFTH_SHIFT9_POSITION                          0x1
#define _CRCSHIFTH_SHIFT9_SIZE                              0x1
#define _CRCSHIFTH_SHIFT9_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT9_MASK                              0x2
#define _CRCSHIFTH_SHIFT10_POSN                             0x2
#define _CRCSHIFTH_SHIFT10_POSITION                         0x2
#define _CRCSHIFTH_SHIFT10_SIZE                             0x1
#define _CRCSHIFTH_SHIFT10_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT10_MASK                             0x4
#define _CRCSHIFTH_SHIFT11_POSN                             0x3
#define _CRCSHIFTH_SHIFT11_POSITION                         0x3
#define _CRCSHIFTH_SHIFT11_SIZE                             0x1
#define _CRCSHIFTH_SHIFT11_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT11_MASK                             0x8
#define _CRCSHIFTH_SHIFT12_POSN                             0x4
#define _CRCSHIFTH_SHIFT12_POSITION                         0x4
#define _CRCSHIFTH_SHIFT12_SIZE                             0x1
#define _CRCSHIFTH_SHIFT12_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT12_MASK                             0x10
#define _CRCSHIFTH_SHIFT13_POSN                             0x5
#define _CRCSHIFTH_SHIFT13_POSITION                         0x5
#define _CRCSHIFTH_SHIFT13_SIZE                             0x1
#define _CRCSHIFTH_SHIFT13_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT13_MASK                             0x20
#define _CRCSHIFTH_SHIFT14_POSN                             0x6
#define _CRCSHIFTH_SHIFT14_POSITION                         0x6
#define _CRCSHIFTH_SHIFT14_SIZE                             0x1
#define _CRCSHIFTH_SHIFT14_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT14_MASK                             0x40
#define _CRCSHIFTH_SHIFT15_POSN                             0x7
#define _CRCSHIFTH_SHIFT15_POSITION                         0x7
#define _CRCSHIFTH_SHIFT15_SIZE                             0x1
#define _CRCSHIFTH_SHIFT15_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT15_MASK                             0x80
#define _CRCSHIFTH_CRCSHIFT_POSN                            0x0
#define _CRCSHIFTH_CRCSHIFT_POSITION                        0x0
#define _CRCSHIFTH_CRCSHIFT_SIZE                            0x8
#define _CRCSHIFTH_CRCSHIFT_LENGTH                          0x8
#define _CRCSHIFTH_CRCSHIFT_MASK                            0xFF
#define _CRCSHIFTH_CRCSHIFT8_POSN                           0x0
#define _CRCSHIFTH_CRCSHIFT8_POSITION                       0x0
#define _CRCSHIFTH_CRCSHIFT8_SIZE                           0x1
#define _CRCSHIFTH_CRCSHIFT8_LENGTH                         0x1
#define _CRCSHIFTH_CRCSHIFT8_MASK                           0x1
#define _CRCSHIFTH_CRCSHIFT9_POSN                           0x1
#define _CRCSHIFTH_CRCSHIFT9_POSITION                       0x1
#define _CRCSHIFTH_CRCSHIFT9_SIZE                           0x1
#define _CRCSHIFTH_CRCSHIFT9_LENGTH                         0x1
#define _CRCSHIFTH_CRCSHIFT9_MASK                           0x2
#define _CRCSHIFTH_CRCSHIFT10_POSN                          0x2
#define _CRCSHIFTH_CRCSHIFT10_POSITION                      0x2
#define _CRCSHIFTH_CRCSHIFT10_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT10_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT10_MASK                          0x4
#define _CRCSHIFTH_CRCSHIFT11_POSN                          0x3
#define _CRCSHIFTH_CRCSHIFT11_POSITION                      0x3
#define _CRCSHIFTH_CRCSHIFT11_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT11_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT11_MASK                          0x8
#define _CRCSHIFTH_CRCSHIFT12_POSN                          0x4
#define _CRCSHIFTH_CRCSHIFT12_POSITION                      0x4
#define _CRCSHIFTH_CRCSHIFT12_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT12_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT12_MASK                          0x10
#define _CRCSHIFTH_CRCSHIFT13_POSN                          0x5
#define _CRCSHIFTH_CRCSHIFT13_POSITION                      0x5
#define _CRCSHIFTH_CRCSHIFT13_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT13_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT13_MASK                          0x20
#define _CRCSHIFTH_CRCSHIFT14_POSN                          0x6
#define _CRCSHIFTH_CRCSHIFT14_POSITION                      0x6
#define _CRCSHIFTH_CRCSHIFT14_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT14_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT14_MASK                          0x40
#define _CRCSHIFTH_CRCSHIFT15_POSN                          0x7
#define _CRCSHIFTH_CRCSHIFT15_POSITION                      0x7
#define _CRCSHIFTH_CRCSHIFT15_SIZE                          0x1
#define _CRCSHIFTH_CRCSHIFT15_LENGTH                        0x1
#define _CRCSHIFTH_CRCSHIFT15_MASK                          0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0x797);
#ifndef _LIB_BUILD
asm("CRCXOR equ 0797h");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x797);
#ifndef _LIB_BUILD
asm("CRCXORL equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned XOR1                   :1;
        unsigned XOR2                   :1;
        unsigned XOR3                   :1;
        unsigned XOR4                   :1;
        unsigned XOR5                   :1;
        unsigned XOR6                   :1;
        unsigned XOR7                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned CRCXOR1                :1;
        unsigned CRCXOR2                :1;
        unsigned CRCXOR3                :1;
        unsigned CRCXOR4                :1;
        unsigned CRCXOR5                :1;
        unsigned CRCXOR6                :1;
        unsigned CRCXOR7                :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x797);
// bitfield macros
#define _CRCXORL_XOR1_POSN                                  0x1
#define _CRCXORL_XOR1_POSITION                              0x1
#define _CRCXORL_XOR1_SIZE                                  0x1
#define _CRCXORL_XOR1_LENGTH                                0x1
#define _CRCXORL_XOR1_MASK                                  0x2
#define _CRCXORL_XOR2_POSN                                  0x2
#define _CRCXORL_XOR2_POSITION                              0x2
#define _CRCXORL_XOR2_SIZE                                  0x1
#define _CRCXORL_XOR2_LENGTH                                0x1
#define _CRCXORL_XOR2_MASK                                  0x4
#define _CRCXORL_XOR3_POSN                                  0x3
#define _CRCXORL_XOR3_POSITION                              0x3
#define _CRCXORL_XOR3_SIZE                                  0x1
#define _CRCXORL_XOR3_LENGTH                                0x1
#define _CRCXORL_XOR3_MASK                                  0x8
#define _CRCXORL_XOR4_POSN                                  0x4
#define _CRCXORL_XOR4_POSITION                              0x4
#define _CRCXORL_XOR4_SIZE                                  0x1
#define _CRCXORL_XOR4_LENGTH                                0x1
#define _CRCXORL_XOR4_MASK                                  0x10
#define _CRCXORL_XOR5_POSN                                  0x5
#define _CRCXORL_XOR5_POSITION                              0x5
#define _CRCXORL_XOR5_SIZE                                  0x1
#define _CRCXORL_XOR5_LENGTH                                0x1
#define _CRCXORL_XOR5_MASK                                  0x20
#define _CRCXORL_XOR6_POSN                                  0x6
#define _CRCXORL_XOR6_POSITION                              0x6
#define _CRCXORL_XOR6_SIZE                                  0x1
#define _CRCXORL_XOR6_LENGTH                                0x1
#define _CRCXORL_XOR6_MASK                                  0x40
#define _CRCXORL_XOR7_POSN                                  0x7
#define _CRCXORL_XOR7_POSITION                              0x7
#define _CRCXORL_XOR7_SIZE                                  0x1
#define _CRCXORL_XOR7_LENGTH                                0x1
#define _CRCXORL_XOR7_MASK                                  0x80
#define _CRCXORL_CRCXOR1_POSN                               0x1
#define _CRCXORL_CRCXOR1_POSITION                           0x1
#define _CRCXORL_CRCXOR1_SIZE                               0x1
#define _CRCXORL_CRCXOR1_LENGTH                             0x1
#define _CRCXORL_CRCXOR1_MASK                               0x2
#define _CRCXORL_CRCXOR2_POSN                               0x2
#define _CRCXORL_CRCXOR2_POSITION                           0x2
#define _CRCXORL_CRCXOR2_SIZE                               0x1
#define _CRCXORL_CRCXOR2_LENGTH                             0x1
#define _CRCXORL_CRCXOR2_MASK                               0x4
#define _CRCXORL_CRCXOR3_POSN                               0x3
#define _CRCXORL_CRCXOR3_POSITION                           0x3
#define _CRCXORL_CRCXOR3_SIZE                               0x1
#define _CRCXORL_CRCXOR3_LENGTH                             0x1
#define _CRCXORL_CRCXOR3_MASK                               0x8
#define _CRCXORL_CRCXOR4_POSN                               0x4
#define _CRCXORL_CRCXOR4_POSITION                           0x4
#define _CRCXORL_CRCXOR4_SIZE                               0x1
#define _CRCXORL_CRCXOR4_LENGTH                             0x1
#define _CRCXORL_CRCXOR4_MASK                               0x10
#define _CRCXORL_CRCXOR5_POSN                               0x5
#define _CRCXORL_CRCXOR5_POSITION                           0x5
#define _CRCXORL_CRCXOR5_SIZE                               0x1
#define _CRCXORL_CRCXOR5_LENGTH                             0x1
#define _CRCXORL_CRCXOR5_MASK                               0x20
#define _CRCXORL_CRCXOR6_POSN                               0x6
#define _CRCXORL_CRCXOR6_POSITION                           0x6
#define _CRCXORL_CRCXOR6_SIZE                               0x1
#define _CRCXORL_CRCXOR6_LENGTH                             0x1
#define _CRCXORL_CRCXOR6_MASK                               0x40
#define _CRCXORL_CRCXOR7_POSN                               0x7
#define _CRCXORL_CRCXOR7_POSITION                           0x7
#define _CRCXORL_CRCXOR7_SIZE                               0x1
#define _CRCXORL_CRCXOR7_LENGTH                             0x1
#define _CRCXORL_CRCXOR7_MASK                               0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x798);
#ifndef _LIB_BUILD
asm("CRCXORH equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR8                   :1;
        unsigned XOR9                   :1;
        unsigned XOR10                  :1;
        unsigned XOR11                  :1;
        unsigned XOR12                  :1;
        unsigned XOR13                  :1;
        unsigned XOR14                  :1;
        unsigned XOR15                  :1;
    };
    struct {
        unsigned CRCXOR8                :1;
        unsigned CRCXOR9                :1;
        unsigned CRCXOR10               :1;
        unsigned CRCXOR11               :1;
        unsigned CRCXOR12               :1;
        unsigned CRCXOR13               :1;
        unsigned CRCXOR14               :1;
        unsigned CRCXOR15               :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x798);
// bitfield macros
#define _CRCXORH_XOR8_POSN                                  0x0
#define _CRCXORH_XOR8_POSITION                              0x0
#define _CRCXORH_XOR8_SIZE                                  0x1
#define _CRCXORH_XOR8_LENGTH                                0x1
#define _CRCXORH_XOR8_MASK                                  0x1
#define _CRCXORH_XOR9_POSN                                  0x1
#define _CRCXORH_XOR9_POSITION                              0x1
#define _CRCXORH_XOR9_SIZE                                  0x1
#define _CRCXORH_XOR9_LENGTH                                0x1
#define _CRCXORH_XOR9_MASK                                  0x2
#define _CRCXORH_XOR10_POSN                                 0x2
#define _CRCXORH_XOR10_POSITION                             0x2
#define _CRCXORH_XOR10_SIZE                                 0x1
#define _CRCXORH_XOR10_LENGTH                               0x1
#define _CRCXORH_XOR10_MASK                                 0x4
#define _CRCXORH_XOR11_POSN                                 0x3
#define _CRCXORH_XOR11_POSITION                             0x3
#define _CRCXORH_XOR11_SIZE                                 0x1
#define _CRCXORH_XOR11_LENGTH                               0x1
#define _CRCXORH_XOR11_MASK                                 0x8
#define _CRCXORH_XOR12_POSN                                 0x4
#define _CRCXORH_XOR12_POSITION                             0x4
#define _CRCXORH_XOR12_SIZE                                 0x1
#define _CRCXORH_XOR12_LENGTH                               0x1
#define _CRCXORH_XOR12_MASK                                 0x10
#define _CRCXORH_XOR13_POSN                                 0x5
#define _CRCXORH_XOR13_POSITION                             0x5
#define _CRCXORH_XOR13_SIZE                                 0x1
#define _CRCXORH_XOR13_LENGTH                               0x1
#define _CRCXORH_XOR13_MASK                                 0x20
#define _CRCXORH_XOR14_POSN                                 0x6
#define _CRCXORH_XOR14_POSITION                             0x6
#define _CRCXORH_XOR14_SIZE                                 0x1
#define _CRCXORH_XOR14_LENGTH                               0x1
#define _CRCXORH_XOR14_MASK                                 0x40
#define _CRCXORH_XOR15_POSN                                 0x7
#define _CRCXORH_XOR15_POSITION                             0x7
#define _CRCXORH_XOR15_SIZE                                 0x1
#define _CRCXORH_XOR15_LENGTH                               0x1
#define _CRCXORH_XOR15_MASK                                 0x80
#define _CRCXORH_CRCXOR8_POSN                               0x0
#define _CRCXORH_CRCXOR8_POSITION                           0x0
#define _CRCXORH_CRCXOR8_SIZE                               0x1
#define _CRCXORH_CRCXOR8_LENGTH                             0x1
#define _CRCXORH_CRCXOR8_MASK                               0x1
#define _CRCXORH_CRCXOR9_POSN                               0x1
#define _CRCXORH_CRCXOR9_POSITION                           0x1
#define _CRCXORH_CRCXOR9_SIZE                               0x1
#define _CRCXORH_CRCXOR9_LENGTH                             0x1
#define _CRCXORH_CRCXOR9_MASK                               0x2
#define _CRCXORH_CRCXOR10_POSN                              0x2
#define _CRCXORH_CRCXOR10_POSITION                          0x2
#define _CRCXORH_CRCXOR10_SIZE                              0x1
#define _CRCXORH_CRCXOR10_LENGTH                            0x1
#define _CRCXORH_CRCXOR10_MASK                              0x4
#define _CRCXORH_CRCXOR11_POSN                              0x3
#define _CRCXORH_CRCXOR11_POSITION                          0x3
#define _CRCXORH_CRCXOR11_SIZE                              0x1
#define _CRCXORH_CRCXOR11_LENGTH                            0x1
#define _CRCXORH_CRCXOR11_MASK                              0x8
#define _CRCXORH_CRCXOR12_POSN                              0x4
#define _CRCXORH_CRCXOR12_POSITION                          0x4
#define _CRCXORH_CRCXOR12_SIZE                              0x1
#define _CRCXORH_CRCXOR12_LENGTH                            0x1
#define _CRCXORH_CRCXOR12_MASK                              0x10
#define _CRCXORH_CRCXOR13_POSN                              0x5
#define _CRCXORH_CRCXOR13_POSITION                          0x5
#define _CRCXORH_CRCXOR13_SIZE                              0x1
#define _CRCXORH_CRCXOR13_LENGTH                            0x1
#define _CRCXORH_CRCXOR13_MASK                              0x20
#define _CRCXORH_CRCXOR14_POSN                              0x6
#define _CRCXORH_CRCXOR14_POSITION                          0x6
#define _CRCXORH_CRCXOR14_SIZE                              0x1
#define _CRCXORH_CRCXOR14_LENGTH                            0x1
#define _CRCXORH_CRCXOR14_MASK                              0x40
#define _CRCXORH_CRCXOR15_POSN                              0x7
#define _CRCXORH_CRCXOR15_POSITION                          0x7
#define _CRCXORH_CRCXOR15_SIZE                              0x1
#define _CRCXORH_CRCXOR15_LENGTH                            0x1
#define _CRCXORH_CRCXOR15_MASK                              0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x799);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned CRCFULL                :1;
        unsigned CRCSHIFTM              :1;
        unsigned                        :2;
        unsigned CRCACCM                :1;
        unsigned CRCBUSY                :1;
        unsigned                        :1;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x799);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCFULL_POSN                               0x0
#define _CRCCON0_CRCFULL_POSITION                           0x0
#define _CRCCON0_CRCFULL_SIZE                               0x1
#define _CRCCON0_CRCFULL_LENGTH                             0x1
#define _CRCCON0_CRCFULL_MASK                               0x1
#define _CRCCON0_CRCSHIFTM_POSN                             0x1
#define _CRCCON0_CRCSHIFTM_POSITION                         0x1
#define _CRCCON0_CRCSHIFTM_SIZE                             0x1
#define _CRCCON0_CRCSHIFTM_LENGTH                           0x1
#define _CRCCON0_CRCSHIFTM_MASK                             0x2
#define _CRCCON0_CRCACCM_POSN                               0x4
#define _CRCCON0_CRCACCM_POSITION                           0x4
#define _CRCCON0_CRCACCM_SIZE                               0x1
#define _CRCCON0_CRCACCM_LENGTH                             0x1
#define _CRCCON0_CRCACCM_MASK                               0x10
#define _CRCCON0_CRCBUSY_POSN                               0x5
#define _CRCCON0_CRCBUSY_POSITION                           0x5
#define _CRCCON0_CRCBUSY_SIZE                               0x1
#define _CRCCON0_CRCBUSY_LENGTH                             0x1
#define _CRCCON0_CRCBUSY_MASK                               0x20
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x79A);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 079Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
    struct {
        unsigned CRCPLEN                :4;
        unsigned CRCDLEN                :4;
    };
    struct {
        unsigned CRCPLEN0               :1;
        unsigned CRCPLEN1               :1;
        unsigned CRCPLEN2               :1;
        unsigned CRCPLEN3               :1;
        unsigned CRCDLEN0               :1;
        unsigned CRCDLEN1               :1;
        unsigned CRCDLEN2               :1;
        unsigned CRCDLEN3               :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x79A);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80
#define _CRCCON1_CRCPLEN_POSN                               0x0
#define _CRCCON1_CRCPLEN_POSITION                           0x0
#define _CRCCON1_CRCPLEN_SIZE                               0x4
#define _CRCCON1_CRCPLEN_LENGTH                             0x4
#define _CRCCON1_CRCPLEN_MASK                               0xF
#define _CRCCON1_CRCDLEN_POSN                               0x4
#define _CRCCON1_CRCDLEN_POSITION                           0x4
#define _CRCCON1_CRCDLEN_SIZE                               0x4
#define _CRCCON1_CRCDLEN_LENGTH                             0x4
#define _CRCCON1_CRCDLEN_MASK                               0xF0
#define _CRCCON1_CRCPLEN0_POSN                              0x0
#define _CRCCON1_CRCPLEN0_POSITION                          0x0
#define _CRCCON1_CRCPLEN0_SIZE                              0x1
#define _CRCCON1_CRCPLEN0_LENGTH                            0x1
#define _CRCCON1_CRCPLEN0_MASK                              0x1
#define _CRCCON1_CRCPLEN1_POSN                              0x1
#define _CRCCON1_CRCPLEN1_POSITION                          0x1
#define _CRCCON1_CRCPLEN1_SIZE                              0x1
#define _CRCCON1_CRCPLEN1_LENGTH                            0x1
#define _CRCCON1_CRCPLEN1_MASK                              0x2
#define _CRCCON1_CRCPLEN2_POSN                              0x2
#define _CRCCON1_CRCPLEN2_POSITION                          0x2
#define _CRCCON1_CRCPLEN2_SIZE                              0x1
#define _CRCCON1_CRCPLEN2_LENGTH                            0x1
#define _CRCCON1_CRCPLEN2_MASK                              0x4
#define _CRCCON1_CRCPLEN3_POSN                              0x3
#define _CRCCON1_CRCPLEN3_POSITION                          0x3
#define _CRCCON1_CRCPLEN3_SIZE                              0x1
#define _CRCCON1_CRCPLEN3_LENGTH                            0x1
#define _CRCCON1_CRCPLEN3_MASK                              0x8
#define _CRCCON1_CRCDLEN0_POSN                              0x4
#define _CRCCON1_CRCDLEN0_POSITION                          0x4
#define _CRCCON1_CRCDLEN0_SIZE                              0x1
#define _CRCCON1_CRCDLEN0_LENGTH                            0x1
#define _CRCCON1_CRCDLEN0_MASK                              0x10
#define _CRCCON1_CRCDLEN1_POSN                              0x5
#define _CRCCON1_CRCDLEN1_POSITION                          0x5
#define _CRCCON1_CRCDLEN1_SIZE                              0x1
#define _CRCCON1_CRCDLEN1_LENGTH                            0x1
#define _CRCCON1_CRCDLEN1_MASK                              0x20
#define _CRCCON1_CRCDLEN2_POSN                              0x6
#define _CRCCON1_CRCDLEN2_POSITION                          0x6
#define _CRCCON1_CRCDLEN2_SIZE                              0x1
#define _CRCCON1_CRCDLEN2_LENGTH                            0x1
#define _CRCCON1_CRCDLEN2_MASK                              0x40
#define _CRCCON1_CRCDLEN3_POSN                              0x7
#define _CRCCON1_CRCDLEN3_POSITION                          0x7
#define _CRCCON1_CRCDLEN3_SIZE                              0x1
#define _CRCCON1_CRCDLEN3_LENGTH                            0x1
#define _CRCCON1_CRCDLEN3_MASK                              0x80

// Register: AT1RES
#define AT1RES AT1RES
extern volatile unsigned short          AT1RES              __at(0x80C);
#ifndef _LIB_BUILD
asm("AT1RES equ 080Ch");
#endif

// Register: AT1RESL
#define AT1RESL AT1RESL
extern volatile unsigned char           AT1RESL             __at(0x80C);
#ifndef _LIB_BUILD
asm("AT1RESL equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1RES0                :1;
        unsigned AT1RES1                :1;
        unsigned AT1RES2                :1;
        unsigned AT1RES3                :1;
        unsigned AT1RES4                :1;
        unsigned AT1RES5                :1;
        unsigned AT1RES6                :1;
        unsigned AT1RES7                :1;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} AT1RESLbits_t;
extern volatile AT1RESLbits_t AT1RESLbits __at(0x80C);
// bitfield macros
#define _AT1RESL_AT1RES0_POSN                               0x0
#define _AT1RESL_AT1RES0_POSITION                           0x0
#define _AT1RESL_AT1RES0_SIZE                               0x1
#define _AT1RESL_AT1RES0_LENGTH                             0x1
#define _AT1RESL_AT1RES0_MASK                               0x1
#define _AT1RESL_AT1RES1_POSN                               0x1
#define _AT1RESL_AT1RES1_POSITION                           0x1
#define _AT1RESL_AT1RES1_SIZE                               0x1
#define _AT1RESL_AT1RES1_LENGTH                             0x1
#define _AT1RESL_AT1RES1_MASK                               0x2
#define _AT1RESL_AT1RES2_POSN                               0x2
#define _AT1RESL_AT1RES2_POSITION                           0x2
#define _AT1RESL_AT1RES2_SIZE                               0x1
#define _AT1RESL_AT1RES2_LENGTH                             0x1
#define _AT1RESL_AT1RES2_MASK                               0x4
#define _AT1RESL_AT1RES3_POSN                               0x3
#define _AT1RESL_AT1RES3_POSITION                           0x3
#define _AT1RESL_AT1RES3_SIZE                               0x1
#define _AT1RESL_AT1RES3_LENGTH                             0x1
#define _AT1RESL_AT1RES3_MASK                               0x8
#define _AT1RESL_AT1RES4_POSN                               0x4
#define _AT1RESL_AT1RES4_POSITION                           0x4
#define _AT1RESL_AT1RES4_SIZE                               0x1
#define _AT1RESL_AT1RES4_LENGTH                             0x1
#define _AT1RESL_AT1RES4_MASK                               0x10
#define _AT1RESL_AT1RES5_POSN                               0x5
#define _AT1RESL_AT1RES5_POSITION                           0x5
#define _AT1RESL_AT1RES5_SIZE                               0x1
#define _AT1RESL_AT1RES5_LENGTH                             0x1
#define _AT1RESL_AT1RES5_MASK                               0x20
#define _AT1RESL_AT1RES6_POSN                               0x6
#define _AT1RESL_AT1RES6_POSITION                           0x6
#define _AT1RESL_AT1RES6_SIZE                               0x1
#define _AT1RESL_AT1RES6_LENGTH                             0x1
#define _AT1RESL_AT1RES6_MASK                               0x40
#define _AT1RESL_AT1RES7_POSN                               0x7
#define _AT1RESL_AT1RES7_POSITION                           0x7
#define _AT1RESL_AT1RES7_SIZE                               0x1
#define _AT1RESL_AT1RES7_LENGTH                             0x1
#define _AT1RESL_AT1RES7_MASK                               0x80
#define _AT1RESL_RES0_POSN                                  0x0
#define _AT1RESL_RES0_POSITION                              0x0
#define _AT1RESL_RES0_SIZE                                  0x1
#define _AT1RESL_RES0_LENGTH                                0x1
#define _AT1RESL_RES0_MASK                                  0x1
#define _AT1RESL_RES1_POSN                                  0x1
#define _AT1RESL_RES1_POSITION                              0x1
#define _AT1RESL_RES1_SIZE                                  0x1
#define _AT1RESL_RES1_LENGTH                                0x1
#define _AT1RESL_RES1_MASK                                  0x2
#define _AT1RESL_RES2_POSN                                  0x2
#define _AT1RESL_RES2_POSITION                              0x2
#define _AT1RESL_RES2_SIZE                                  0x1
#define _AT1RESL_RES2_LENGTH                                0x1
#define _AT1RESL_RES2_MASK                                  0x4
#define _AT1RESL_RES3_POSN                                  0x3
#define _AT1RESL_RES3_POSITION                              0x3
#define _AT1RESL_RES3_SIZE                                  0x1
#define _AT1RESL_RES3_LENGTH                                0x1
#define _AT1RESL_RES3_MASK                                  0x8
#define _AT1RESL_RES4_POSN                                  0x4
#define _AT1RESL_RES4_POSITION                              0x4
#define _AT1RESL_RES4_SIZE                                  0x1
#define _AT1RESL_RES4_LENGTH                                0x1
#define _AT1RESL_RES4_MASK                                  0x10
#define _AT1RESL_RES5_POSN                                  0x5
#define _AT1RESL_RES5_POSITION                              0x5
#define _AT1RESL_RES5_SIZE                                  0x1
#define _AT1RESL_RES5_LENGTH                                0x1
#define _AT1RESL_RES5_MASK                                  0x20
#define _AT1RESL_RES6_POSN                                  0x6
#define _AT1RESL_RES6_POSITION                              0x6
#define _AT1RESL_RES6_SIZE                                  0x1
#define _AT1RESL_RES6_LENGTH                                0x1
#define _AT1RESL_RES6_MASK                                  0x40
#define _AT1RESL_RES7_POSN                                  0x7
#define _AT1RESL_RES7_POSITION                              0x7
#define _AT1RESL_RES7_SIZE                                  0x1
#define _AT1RESL_RES7_LENGTH                                0x1
#define _AT1RESL_RES7_MASK                                  0x80

// Register: AT1RESH
#define AT1RESH AT1RESH
extern volatile unsigned char           AT1RESH             __at(0x80D);
#ifndef _LIB_BUILD
asm("AT1RESH equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1RES8                :1;
        unsigned AT1RES9                :1;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
    };
} AT1RESHbits_t;
extern volatile AT1RESHbits_t AT1RESHbits __at(0x80D);
// bitfield macros
#define _AT1RESH_AT1RES8_POSN                               0x0
#define _AT1RESH_AT1RES8_POSITION                           0x0
#define _AT1RESH_AT1RES8_SIZE                               0x1
#define _AT1RESH_AT1RES8_LENGTH                             0x1
#define _AT1RESH_AT1RES8_MASK                               0x1
#define _AT1RESH_AT1RES9_POSN                               0x1
#define _AT1RESH_AT1RES9_POSITION                           0x1
#define _AT1RESH_AT1RES9_SIZE                               0x1
#define _AT1RESH_AT1RES9_LENGTH                             0x1
#define _AT1RESH_AT1RES9_MASK                               0x2
#define _AT1RESH_RES8_POSN                                  0x0
#define _AT1RESH_RES8_POSITION                              0x0
#define _AT1RESH_RES8_SIZE                                  0x1
#define _AT1RESH_RES8_LENGTH                                0x1
#define _AT1RESH_RES8_MASK                                  0x1
#define _AT1RESH_RES9_POSN                                  0x1
#define _AT1RESH_RES9_POSITION                              0x1
#define _AT1RESH_RES9_SIZE                                  0x1
#define _AT1RESH_RES9_LENGTH                                0x1
#define _AT1RESH_RES9_MASK                                  0x2

// Register: AT1MISS
#define AT1MISS AT1MISS
extern volatile unsigned short          AT1MISS             __at(0x80E);
#ifndef _LIB_BUILD
asm("AT1MISS equ 080Eh");
#endif

// Register: AT1MISSL
#define AT1MISSL AT1MISSL
extern volatile unsigned char           AT1MISSL            __at(0x80E);
#ifndef _LIB_BUILD
asm("AT1MISSL equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1MISS0               :1;
        unsigned AT1MISS1               :1;
        unsigned AT1MISS2               :1;
        unsigned AT1MISS3               :1;
        unsigned AT1MISS4               :1;
        unsigned AT1MISS5               :1;
        unsigned AT1MISS6               :1;
        unsigned AT1MISS7               :1;
    };
    struct {
        unsigned MISS0                  :1;
        unsigned MISS1                  :1;
        unsigned MISS2                  :1;
        unsigned MISS3                  :1;
        unsigned MISS4                  :1;
        unsigned MISS5                  :1;
        unsigned MISS6                  :1;
        unsigned MISS7                  :1;
    };
} AT1MISSLbits_t;
extern volatile AT1MISSLbits_t AT1MISSLbits __at(0x80E);
// bitfield macros
#define _AT1MISSL_AT1MISS0_POSN                             0x0
#define _AT1MISSL_AT1MISS0_POSITION                         0x0
#define _AT1MISSL_AT1MISS0_SIZE                             0x1
#define _AT1MISSL_AT1MISS0_LENGTH                           0x1
#define _AT1MISSL_AT1MISS0_MASK                             0x1
#define _AT1MISSL_AT1MISS1_POSN                             0x1
#define _AT1MISSL_AT1MISS1_POSITION                         0x1
#define _AT1MISSL_AT1MISS1_SIZE                             0x1
#define _AT1MISSL_AT1MISS1_LENGTH                           0x1
#define _AT1MISSL_AT1MISS1_MASK                             0x2
#define _AT1MISSL_AT1MISS2_POSN                             0x2
#define _AT1MISSL_AT1MISS2_POSITION                         0x2
#define _AT1MISSL_AT1MISS2_SIZE                             0x1
#define _AT1MISSL_AT1MISS2_LENGTH                           0x1
#define _AT1MISSL_AT1MISS2_MASK                             0x4
#define _AT1MISSL_AT1MISS3_POSN                             0x3
#define _AT1MISSL_AT1MISS3_POSITION                         0x3
#define _AT1MISSL_AT1MISS3_SIZE                             0x1
#define _AT1MISSL_AT1MISS3_LENGTH                           0x1
#define _AT1MISSL_AT1MISS3_MASK                             0x8
#define _AT1MISSL_AT1MISS4_POSN                             0x4
#define _AT1MISSL_AT1MISS4_POSITION                         0x4
#define _AT1MISSL_AT1MISS4_SIZE                             0x1
#define _AT1MISSL_AT1MISS4_LENGTH                           0x1
#define _AT1MISSL_AT1MISS4_MASK                             0x10
#define _AT1MISSL_AT1MISS5_POSN                             0x5
#define _AT1MISSL_AT1MISS5_POSITION                         0x5
#define _AT1MISSL_AT1MISS5_SIZE                             0x1
#define _AT1MISSL_AT1MISS5_LENGTH                           0x1
#define _AT1MISSL_AT1MISS5_MASK                             0x20
#define _AT1MISSL_AT1MISS6_POSN                             0x6
#define _AT1MISSL_AT1MISS6_POSITION                         0x6
#define _AT1MISSL_AT1MISS6_SIZE                             0x1
#define _AT1MISSL_AT1MISS6_LENGTH                           0x1
#define _AT1MISSL_AT1MISS6_MASK                             0x40
#define _AT1MISSL_AT1MISS7_POSN                             0x7
#define _AT1MISSL_AT1MISS7_POSITION                         0x7
#define _AT1MISSL_AT1MISS7_SIZE                             0x1
#define _AT1MISSL_AT1MISS7_LENGTH                           0x1
#define _AT1MISSL_AT1MISS7_MASK                             0x80
#define _AT1MISSL_MISS0_POSN                                0x0
#define _AT1MISSL_MISS0_POSITION                            0x0
#define _AT1MISSL_MISS0_SIZE                                0x1
#define _AT1MISSL_MISS0_LENGTH                              0x1
#define _AT1MISSL_MISS0_MASK                                0x1
#define _AT1MISSL_MISS1_POSN                                0x1
#define _AT1MISSL_MISS1_POSITION                            0x1
#define _AT1MISSL_MISS1_SIZE                                0x1
#define _AT1MISSL_MISS1_LENGTH                              0x1
#define _AT1MISSL_MISS1_MASK                                0x2
#define _AT1MISSL_MISS2_POSN                                0x2
#define _AT1MISSL_MISS2_POSITION                            0x2
#define _AT1MISSL_MISS2_SIZE                                0x1
#define _AT1MISSL_MISS2_LENGTH                              0x1
#define _AT1MISSL_MISS2_MASK                                0x4
#define _AT1MISSL_MISS3_POSN                                0x3
#define _AT1MISSL_MISS3_POSITION                            0x3
#define _AT1MISSL_MISS3_SIZE                                0x1
#define _AT1MISSL_MISS3_LENGTH                              0x1
#define _AT1MISSL_MISS3_MASK                                0x8
#define _AT1MISSL_MISS4_POSN                                0x4
#define _AT1MISSL_MISS4_POSITION                            0x4
#define _AT1MISSL_MISS4_SIZE                                0x1
#define _AT1MISSL_MISS4_LENGTH                              0x1
#define _AT1MISSL_MISS4_MASK                                0x10
#define _AT1MISSL_MISS5_POSN                                0x5
#define _AT1MISSL_MISS5_POSITION                            0x5
#define _AT1MISSL_MISS5_SIZE                                0x1
#define _AT1MISSL_MISS5_LENGTH                              0x1
#define _AT1MISSL_MISS5_MASK                                0x20
#define _AT1MISSL_MISS6_POSN                                0x6
#define _AT1MISSL_MISS6_POSITION                            0x6
#define _AT1MISSL_MISS6_SIZE                                0x1
#define _AT1MISSL_MISS6_LENGTH                              0x1
#define _AT1MISSL_MISS6_MASK                                0x40
#define _AT1MISSL_MISS7_POSN                                0x7
#define _AT1MISSL_MISS7_POSITION                            0x7
#define _AT1MISSL_MISS7_SIZE                                0x1
#define _AT1MISSL_MISS7_LENGTH                              0x1
#define _AT1MISSL_MISS7_MASK                                0x80

// Register: AT1MISSH
#define AT1MISSH AT1MISSH
extern volatile unsigned char           AT1MISSH            __at(0x80F);
#ifndef _LIB_BUILD
asm("AT1MISSH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1MISS8               :1;
        unsigned AT1MISS9               :1;
        unsigned AT1MISS10              :1;
        unsigned AT1MISS11              :1;
        unsigned AT1MISS12              :1;
        unsigned AT1MISS13              :1;
        unsigned AT1MISS14              :1;
        unsigned AT1MISS15              :1;
    };
    struct {
        unsigned MISS8                  :1;
        unsigned MISS9                  :1;
        unsigned MISS10                 :1;
        unsigned MISS11                 :1;
        unsigned MISS12                 :1;
        unsigned MISS13                 :1;
        unsigned MISS14                 :1;
        unsigned MISS15                 :1;
    };
} AT1MISSHbits_t;
extern volatile AT1MISSHbits_t AT1MISSHbits __at(0x80F);
// bitfield macros
#define _AT1MISSH_AT1MISS8_POSN                             0x0
#define _AT1MISSH_AT1MISS8_POSITION                         0x0
#define _AT1MISSH_AT1MISS8_SIZE                             0x1
#define _AT1MISSH_AT1MISS8_LENGTH                           0x1
#define _AT1MISSH_AT1MISS8_MASK                             0x1
#define _AT1MISSH_AT1MISS9_POSN                             0x1
#define _AT1MISSH_AT1MISS9_POSITION                         0x1
#define _AT1MISSH_AT1MISS9_SIZE                             0x1
#define _AT1MISSH_AT1MISS9_LENGTH                           0x1
#define _AT1MISSH_AT1MISS9_MASK                             0x2
#define _AT1MISSH_AT1MISS10_POSN                            0x2
#define _AT1MISSH_AT1MISS10_POSITION                        0x2
#define _AT1MISSH_AT1MISS10_SIZE                            0x1
#define _AT1MISSH_AT1MISS10_LENGTH                          0x1
#define _AT1MISSH_AT1MISS10_MASK                            0x4
#define _AT1MISSH_AT1MISS11_POSN                            0x3
#define _AT1MISSH_AT1MISS11_POSITION                        0x3
#define _AT1MISSH_AT1MISS11_SIZE                            0x1
#define _AT1MISSH_AT1MISS11_LENGTH                          0x1
#define _AT1MISSH_AT1MISS11_MASK                            0x8
#define _AT1MISSH_AT1MISS12_POSN                            0x4
#define _AT1MISSH_AT1MISS12_POSITION                        0x4
#define _AT1MISSH_AT1MISS12_SIZE                            0x1
#define _AT1MISSH_AT1MISS12_LENGTH                          0x1
#define _AT1MISSH_AT1MISS12_MASK                            0x10
#define _AT1MISSH_AT1MISS13_POSN                            0x5
#define _AT1MISSH_AT1MISS13_POSITION                        0x5
#define _AT1MISSH_AT1MISS13_SIZE                            0x1
#define _AT1MISSH_AT1MISS13_LENGTH                          0x1
#define _AT1MISSH_AT1MISS13_MASK                            0x20
#define _AT1MISSH_AT1MISS14_POSN                            0x6
#define _AT1MISSH_AT1MISS14_POSITION                        0x6
#define _AT1MISSH_AT1MISS14_SIZE                            0x1
#define _AT1MISSH_AT1MISS14_LENGTH                          0x1
#define _AT1MISSH_AT1MISS14_MASK                            0x40
#define _AT1MISSH_AT1MISS15_POSN                            0x7
#define _AT1MISSH_AT1MISS15_POSITION                        0x7
#define _AT1MISSH_AT1MISS15_SIZE                            0x1
#define _AT1MISSH_AT1MISS15_LENGTH                          0x1
#define _AT1MISSH_AT1MISS15_MASK                            0x80
#define _AT1MISSH_MISS8_POSN                                0x0
#define _AT1MISSH_MISS8_POSITION                            0x0
#define _AT1MISSH_MISS8_SIZE                                0x1
#define _AT1MISSH_MISS8_LENGTH                              0x1
#define _AT1MISSH_MISS8_MASK                                0x1
#define _AT1MISSH_MISS9_POSN                                0x1
#define _AT1MISSH_MISS9_POSITION                            0x1
#define _AT1MISSH_MISS9_SIZE                                0x1
#define _AT1MISSH_MISS9_LENGTH                              0x1
#define _AT1MISSH_MISS9_MASK                                0x2
#define _AT1MISSH_MISS10_POSN                               0x2
#define _AT1MISSH_MISS10_POSITION                           0x2
#define _AT1MISSH_MISS10_SIZE                               0x1
#define _AT1MISSH_MISS10_LENGTH                             0x1
#define _AT1MISSH_MISS10_MASK                               0x4
#define _AT1MISSH_MISS11_POSN                               0x3
#define _AT1MISSH_MISS11_POSITION                           0x3
#define _AT1MISSH_MISS11_SIZE                               0x1
#define _AT1MISSH_MISS11_LENGTH                             0x1
#define _AT1MISSH_MISS11_MASK                               0x8
#define _AT1MISSH_MISS12_POSN                               0x4
#define _AT1MISSH_MISS12_POSITION                           0x4
#define _AT1MISSH_MISS12_SIZE                               0x1
#define _AT1MISSH_MISS12_LENGTH                             0x1
#define _AT1MISSH_MISS12_MASK                               0x10
#define _AT1MISSH_MISS13_POSN                               0x5
#define _AT1MISSH_MISS13_POSITION                           0x5
#define _AT1MISSH_MISS13_SIZE                               0x1
#define _AT1MISSH_MISS13_LENGTH                             0x1
#define _AT1MISSH_MISS13_MASK                               0x20
#define _AT1MISSH_MISS14_POSN                               0x6
#define _AT1MISSH_MISS14_POSITION                           0x6
#define _AT1MISSH_MISS14_SIZE                               0x1
#define _AT1MISSH_MISS14_LENGTH                             0x1
#define _AT1MISSH_MISS14_MASK                               0x40
#define _AT1MISSH_MISS15_POSN                               0x7
#define _AT1MISSH_MISS15_POSITION                           0x7
#define _AT1MISSH_MISS15_SIZE                               0x1
#define _AT1MISSH_MISS15_LENGTH                             0x1
#define _AT1MISSH_MISS15_MASK                               0x80

// Register: AT1PER
#define AT1PER AT1PER
extern volatile unsigned short          AT1PER              __at(0x810);
#ifndef _LIB_BUILD
asm("AT1PER equ 0810h");
#endif

// Register: AT1PERL
#define AT1PERL AT1PERL
extern volatile unsigned char           AT1PERL             __at(0x810);
#ifndef _LIB_BUILD
asm("AT1PERL equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PER0                :1;
        unsigned AT1PER1                :1;
        unsigned AT1PER2                :1;
        unsigned AT1PER3                :1;
        unsigned AT1PER4                :1;
        unsigned AT1PER5                :1;
        unsigned AT1PER6                :1;
        unsigned AT1PER7                :1;
    };
    struct {
        unsigned PER0                   :1;
        unsigned PER1                   :1;
        unsigned PER2                   :1;
        unsigned PER3                   :1;
        unsigned PER4                   :1;
        unsigned PER5                   :1;
        unsigned PER6                   :1;
        unsigned PER7                   :1;
    };
    struct {
        unsigned PERL0                  :1;
        unsigned PERL1                  :1;
        unsigned PERL2                  :1;
        unsigned PERL3                  :1;
        unsigned PERL4                  :1;
        unsigned PERL5                  :1;
        unsigned PERL6                  :1;
        unsigned PERL7                  :1;
    };
} AT1PERLbits_t;
extern volatile AT1PERLbits_t AT1PERLbits __at(0x810);
// bitfield macros
#define _AT1PERL_AT1PER0_POSN                               0x0
#define _AT1PERL_AT1PER0_POSITION                           0x0
#define _AT1PERL_AT1PER0_SIZE                               0x1
#define _AT1PERL_AT1PER0_LENGTH                             0x1
#define _AT1PERL_AT1PER0_MASK                               0x1
#define _AT1PERL_AT1PER1_POSN                               0x1
#define _AT1PERL_AT1PER1_POSITION                           0x1
#define _AT1PERL_AT1PER1_SIZE                               0x1
#define _AT1PERL_AT1PER1_LENGTH                             0x1
#define _AT1PERL_AT1PER1_MASK                               0x2
#define _AT1PERL_AT1PER2_POSN                               0x2
#define _AT1PERL_AT1PER2_POSITION                           0x2
#define _AT1PERL_AT1PER2_SIZE                               0x1
#define _AT1PERL_AT1PER2_LENGTH                             0x1
#define _AT1PERL_AT1PER2_MASK                               0x4
#define _AT1PERL_AT1PER3_POSN                               0x3
#define _AT1PERL_AT1PER3_POSITION                           0x3
#define _AT1PERL_AT1PER3_SIZE                               0x1
#define _AT1PERL_AT1PER3_LENGTH                             0x1
#define _AT1PERL_AT1PER3_MASK                               0x8
#define _AT1PERL_AT1PER4_POSN                               0x4
#define _AT1PERL_AT1PER4_POSITION                           0x4
#define _AT1PERL_AT1PER4_SIZE                               0x1
#define _AT1PERL_AT1PER4_LENGTH                             0x1
#define _AT1PERL_AT1PER4_MASK                               0x10
#define _AT1PERL_AT1PER5_POSN                               0x5
#define _AT1PERL_AT1PER5_POSITION                           0x5
#define _AT1PERL_AT1PER5_SIZE                               0x1
#define _AT1PERL_AT1PER5_LENGTH                             0x1
#define _AT1PERL_AT1PER5_MASK                               0x20
#define _AT1PERL_AT1PER6_POSN                               0x6
#define _AT1PERL_AT1PER6_POSITION                           0x6
#define _AT1PERL_AT1PER6_SIZE                               0x1
#define _AT1PERL_AT1PER6_LENGTH                             0x1
#define _AT1PERL_AT1PER6_MASK                               0x40
#define _AT1PERL_AT1PER7_POSN                               0x7
#define _AT1PERL_AT1PER7_POSITION                           0x7
#define _AT1PERL_AT1PER7_SIZE                               0x1
#define _AT1PERL_AT1PER7_LENGTH                             0x1
#define _AT1PERL_AT1PER7_MASK                               0x80
#define _AT1PERL_PER0_POSN                                  0x0
#define _AT1PERL_PER0_POSITION                              0x0
#define _AT1PERL_PER0_SIZE                                  0x1
#define _AT1PERL_PER0_LENGTH                                0x1
#define _AT1PERL_PER0_MASK                                  0x1
#define _AT1PERL_PER1_POSN                                  0x1
#define _AT1PERL_PER1_POSITION                              0x1
#define _AT1PERL_PER1_SIZE                                  0x1
#define _AT1PERL_PER1_LENGTH                                0x1
#define _AT1PERL_PER1_MASK                                  0x2
#define _AT1PERL_PER2_POSN                                  0x2
#define _AT1PERL_PER2_POSITION                              0x2
#define _AT1PERL_PER2_SIZE                                  0x1
#define _AT1PERL_PER2_LENGTH                                0x1
#define _AT1PERL_PER2_MASK                                  0x4
#define _AT1PERL_PER3_POSN                                  0x3
#define _AT1PERL_PER3_POSITION                              0x3
#define _AT1PERL_PER3_SIZE                                  0x1
#define _AT1PERL_PER3_LENGTH                                0x1
#define _AT1PERL_PER3_MASK                                  0x8
#define _AT1PERL_PER4_POSN                                  0x4
#define _AT1PERL_PER4_POSITION                              0x4
#define _AT1PERL_PER4_SIZE                                  0x1
#define _AT1PERL_PER4_LENGTH                                0x1
#define _AT1PERL_PER4_MASK                                  0x10
#define _AT1PERL_PER5_POSN                                  0x5
#define _AT1PERL_PER5_POSITION                              0x5
#define _AT1PERL_PER5_SIZE                                  0x1
#define _AT1PERL_PER5_LENGTH                                0x1
#define _AT1PERL_PER5_MASK                                  0x20
#define _AT1PERL_PER6_POSN                                  0x6
#define _AT1PERL_PER6_POSITION                              0x6
#define _AT1PERL_PER6_SIZE                                  0x1
#define _AT1PERL_PER6_LENGTH                                0x1
#define _AT1PERL_PER6_MASK                                  0x40
#define _AT1PERL_PER7_POSN                                  0x7
#define _AT1PERL_PER7_POSITION                              0x7
#define _AT1PERL_PER7_SIZE                                  0x1
#define _AT1PERL_PER7_LENGTH                                0x1
#define _AT1PERL_PER7_MASK                                  0x80
#define _AT1PERL_PERL0_POSN                                 0x0
#define _AT1PERL_PERL0_POSITION                             0x0
#define _AT1PERL_PERL0_SIZE                                 0x1
#define _AT1PERL_PERL0_LENGTH                               0x1
#define _AT1PERL_PERL0_MASK                                 0x1
#define _AT1PERL_PERL1_POSN                                 0x1
#define _AT1PERL_PERL1_POSITION                             0x1
#define _AT1PERL_PERL1_SIZE                                 0x1
#define _AT1PERL_PERL1_LENGTH                               0x1
#define _AT1PERL_PERL1_MASK                                 0x2
#define _AT1PERL_PERL2_POSN                                 0x2
#define _AT1PERL_PERL2_POSITION                             0x2
#define _AT1PERL_PERL2_SIZE                                 0x1
#define _AT1PERL_PERL2_LENGTH                               0x1
#define _AT1PERL_PERL2_MASK                                 0x4
#define _AT1PERL_PERL3_POSN                                 0x3
#define _AT1PERL_PERL3_POSITION                             0x3
#define _AT1PERL_PERL3_SIZE                                 0x1
#define _AT1PERL_PERL3_LENGTH                               0x1
#define _AT1PERL_PERL3_MASK                                 0x8
#define _AT1PERL_PERL4_POSN                                 0x4
#define _AT1PERL_PERL4_POSITION                             0x4
#define _AT1PERL_PERL4_SIZE                                 0x1
#define _AT1PERL_PERL4_LENGTH                               0x1
#define _AT1PERL_PERL4_MASK                                 0x10
#define _AT1PERL_PERL5_POSN                                 0x5
#define _AT1PERL_PERL5_POSITION                             0x5
#define _AT1PERL_PERL5_SIZE                                 0x1
#define _AT1PERL_PERL5_LENGTH                               0x1
#define _AT1PERL_PERL5_MASK                                 0x20
#define _AT1PERL_PERL6_POSN                                 0x6
#define _AT1PERL_PERL6_POSITION                             0x6
#define _AT1PERL_PERL6_SIZE                                 0x1
#define _AT1PERL_PERL6_LENGTH                               0x1
#define _AT1PERL_PERL6_MASK                                 0x40
#define _AT1PERL_PERL7_POSN                                 0x7
#define _AT1PERL_PERL7_POSITION                             0x7
#define _AT1PERL_PERL7_SIZE                                 0x1
#define _AT1PERL_PERL7_LENGTH                               0x1
#define _AT1PERL_PERL7_MASK                                 0x80

// Register: AT1PERH
#define AT1PERH AT1PERH
extern volatile unsigned char           AT1PERH             __at(0x811);
#ifndef _LIB_BUILD
asm("AT1PERH equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PER8                :1;
        unsigned AT1PER9                :1;
        unsigned AT1PER10               :1;
        unsigned AT1PER11               :1;
        unsigned AT1PER12               :1;
        unsigned AT1PER13               :1;
        unsigned AT1PER14               :1;
        unsigned AT1POV                 :1;
    };
    struct {
        unsigned PER8                   :1;
        unsigned PER9                   :1;
        unsigned PER10                  :1;
        unsigned PER11                  :1;
        unsigned PER12                  :1;
        unsigned PER13                  :1;
        unsigned PER14                  :1;
        unsigned PER15                  :1;
    };
    struct {
        unsigned PERH0                  :1;
        unsigned PERH1                  :1;
        unsigned PERH2                  :1;
        unsigned PERH3                  :1;
        unsigned PERH4                  :1;
        unsigned PERH5                  :1;
        unsigned PERH6                  :1;
        unsigned PERH7                  :1;
    };
} AT1PERHbits_t;
extern volatile AT1PERHbits_t AT1PERHbits __at(0x811);
// bitfield macros
#define _AT1PERH_AT1PER8_POSN                               0x0
#define _AT1PERH_AT1PER8_POSITION                           0x0
#define _AT1PERH_AT1PER8_SIZE                               0x1
#define _AT1PERH_AT1PER8_LENGTH                             0x1
#define _AT1PERH_AT1PER8_MASK                               0x1
#define _AT1PERH_AT1PER9_POSN                               0x1
#define _AT1PERH_AT1PER9_POSITION                           0x1
#define _AT1PERH_AT1PER9_SIZE                               0x1
#define _AT1PERH_AT1PER9_LENGTH                             0x1
#define _AT1PERH_AT1PER9_MASK                               0x2
#define _AT1PERH_AT1PER10_POSN                              0x2
#define _AT1PERH_AT1PER10_POSITION                          0x2
#define _AT1PERH_AT1PER10_SIZE                              0x1
#define _AT1PERH_AT1PER10_LENGTH                            0x1
#define _AT1PERH_AT1PER10_MASK                              0x4
#define _AT1PERH_AT1PER11_POSN                              0x3
#define _AT1PERH_AT1PER11_POSITION                          0x3
#define _AT1PERH_AT1PER11_SIZE                              0x1
#define _AT1PERH_AT1PER11_LENGTH                            0x1
#define _AT1PERH_AT1PER11_MASK                              0x8
#define _AT1PERH_AT1PER12_POSN                              0x4
#define _AT1PERH_AT1PER12_POSITION                          0x4
#define _AT1PERH_AT1PER12_SIZE                              0x1
#define _AT1PERH_AT1PER12_LENGTH                            0x1
#define _AT1PERH_AT1PER12_MASK                              0x10
#define _AT1PERH_AT1PER13_POSN                              0x5
#define _AT1PERH_AT1PER13_POSITION                          0x5
#define _AT1PERH_AT1PER13_SIZE                              0x1
#define _AT1PERH_AT1PER13_LENGTH                            0x1
#define _AT1PERH_AT1PER13_MASK                              0x20
#define _AT1PERH_AT1PER14_POSN                              0x6
#define _AT1PERH_AT1PER14_POSITION                          0x6
#define _AT1PERH_AT1PER14_SIZE                              0x1
#define _AT1PERH_AT1PER14_LENGTH                            0x1
#define _AT1PERH_AT1PER14_MASK                              0x40
#define _AT1PERH_AT1POV_POSN                                0x7
#define _AT1PERH_AT1POV_POSITION                            0x7
#define _AT1PERH_AT1POV_SIZE                                0x1
#define _AT1PERH_AT1POV_LENGTH                              0x1
#define _AT1PERH_AT1POV_MASK                                0x80
#define _AT1PERH_PER8_POSN                                  0x0
#define _AT1PERH_PER8_POSITION                              0x0
#define _AT1PERH_PER8_SIZE                                  0x1
#define _AT1PERH_PER8_LENGTH                                0x1
#define _AT1PERH_PER8_MASK                                  0x1
#define _AT1PERH_PER9_POSN                                  0x1
#define _AT1PERH_PER9_POSITION                              0x1
#define _AT1PERH_PER9_SIZE                                  0x1
#define _AT1PERH_PER9_LENGTH                                0x1
#define _AT1PERH_PER9_MASK                                  0x2
#define _AT1PERH_PER10_POSN                                 0x2
#define _AT1PERH_PER10_POSITION                             0x2
#define _AT1PERH_PER10_SIZE                                 0x1
#define _AT1PERH_PER10_LENGTH                               0x1
#define _AT1PERH_PER10_MASK                                 0x4
#define _AT1PERH_PER11_POSN                                 0x3
#define _AT1PERH_PER11_POSITION                             0x3
#define _AT1PERH_PER11_SIZE                                 0x1
#define _AT1PERH_PER11_LENGTH                               0x1
#define _AT1PERH_PER11_MASK                                 0x8
#define _AT1PERH_PER12_POSN                                 0x4
#define _AT1PERH_PER12_POSITION                             0x4
#define _AT1PERH_PER12_SIZE                                 0x1
#define _AT1PERH_PER12_LENGTH                               0x1
#define _AT1PERH_PER12_MASK                                 0x10
#define _AT1PERH_PER13_POSN                                 0x5
#define _AT1PERH_PER13_POSITION                             0x5
#define _AT1PERH_PER13_SIZE                                 0x1
#define _AT1PERH_PER13_LENGTH                               0x1
#define _AT1PERH_PER13_MASK                                 0x20
#define _AT1PERH_PER14_POSN                                 0x6
#define _AT1PERH_PER14_POSITION                             0x6
#define _AT1PERH_PER14_SIZE                                 0x1
#define _AT1PERH_PER14_LENGTH                               0x1
#define _AT1PERH_PER14_MASK                                 0x40
#define _AT1PERH_PER15_POSN                                 0x7
#define _AT1PERH_PER15_POSITION                             0x7
#define _AT1PERH_PER15_SIZE                                 0x1
#define _AT1PERH_PER15_LENGTH                               0x1
#define _AT1PERH_PER15_MASK                                 0x80
#define _AT1PERH_PERH0_POSN                                 0x0
#define _AT1PERH_PERH0_POSITION                             0x0
#define _AT1PERH_PERH0_SIZE                                 0x1
#define _AT1PERH_PERH0_LENGTH                               0x1
#define _AT1PERH_PERH0_MASK                                 0x1
#define _AT1PERH_PERH1_POSN                                 0x1
#define _AT1PERH_PERH1_POSITION                             0x1
#define _AT1PERH_PERH1_SIZE                                 0x1
#define _AT1PERH_PERH1_LENGTH                               0x1
#define _AT1PERH_PERH1_MASK                                 0x2
#define _AT1PERH_PERH2_POSN                                 0x2
#define _AT1PERH_PERH2_POSITION                             0x2
#define _AT1PERH_PERH2_SIZE                                 0x1
#define _AT1PERH_PERH2_LENGTH                               0x1
#define _AT1PERH_PERH2_MASK                                 0x4
#define _AT1PERH_PERH3_POSN                                 0x3
#define _AT1PERH_PERH3_POSITION                             0x3
#define _AT1PERH_PERH3_SIZE                                 0x1
#define _AT1PERH_PERH3_LENGTH                               0x1
#define _AT1PERH_PERH3_MASK                                 0x8
#define _AT1PERH_PERH4_POSN                                 0x4
#define _AT1PERH_PERH4_POSITION                             0x4
#define _AT1PERH_PERH4_SIZE                                 0x1
#define _AT1PERH_PERH4_LENGTH                               0x1
#define _AT1PERH_PERH4_MASK                                 0x10
#define _AT1PERH_PERH5_POSN                                 0x5
#define _AT1PERH_PERH5_POSITION                             0x5
#define _AT1PERH_PERH5_SIZE                                 0x1
#define _AT1PERH_PERH5_LENGTH                               0x1
#define _AT1PERH_PERH5_MASK                                 0x20
#define _AT1PERH_PERH6_POSN                                 0x6
#define _AT1PERH_PERH6_POSITION                             0x6
#define _AT1PERH_PERH6_SIZE                                 0x1
#define _AT1PERH_PERH6_LENGTH                               0x1
#define _AT1PERH_PERH6_MASK                                 0x40
#define _AT1PERH_PERH7_POSN                                 0x7
#define _AT1PERH_PERH7_POSITION                             0x7
#define _AT1PERH_PERH7_SIZE                                 0x1
#define _AT1PERH_PERH7_LENGTH                               0x1
#define _AT1PERH_PERH7_MASK                                 0x80

// Register: AT1PHS
#define AT1PHS AT1PHS
extern volatile unsigned short          AT1PHS              __at(0x812);
#ifndef _LIB_BUILD
asm("AT1PHS equ 0812h");
#endif

// Register: AT1PHSL
#define AT1PHSL AT1PHSL
extern volatile unsigned char           AT1PHSL             __at(0x812);
#ifndef _LIB_BUILD
asm("AT1PHSL equ 0812h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PHS0                :1;
        unsigned AT1PHS1                :1;
        unsigned AT1PHS2                :1;
        unsigned AT1PHS3                :1;
        unsigned AT1PHS4                :1;
        unsigned AT1PHS5                :1;
        unsigned AT1PHS6                :1;
        unsigned AT1PHS7                :1;
    };
    struct {
        unsigned PHS0                   :1;
        unsigned PHS1                   :1;
        unsigned PHS2                   :1;
        unsigned PHS3                   :1;
        unsigned PHS4                   :1;
        unsigned PHS5                   :1;
        unsigned PHS6                   :1;
        unsigned PHS7                   :1;
    };
} AT1PHSLbits_t;
extern volatile AT1PHSLbits_t AT1PHSLbits __at(0x812);
// bitfield macros
#define _AT1PHSL_AT1PHS0_POSN                               0x0
#define _AT1PHSL_AT1PHS0_POSITION                           0x0
#define _AT1PHSL_AT1PHS0_SIZE                               0x1
#define _AT1PHSL_AT1PHS0_LENGTH                             0x1
#define _AT1PHSL_AT1PHS0_MASK                               0x1
#define _AT1PHSL_AT1PHS1_POSN                               0x1
#define _AT1PHSL_AT1PHS1_POSITION                           0x1
#define _AT1PHSL_AT1PHS1_SIZE                               0x1
#define _AT1PHSL_AT1PHS1_LENGTH                             0x1
#define _AT1PHSL_AT1PHS1_MASK                               0x2
#define _AT1PHSL_AT1PHS2_POSN                               0x2
#define _AT1PHSL_AT1PHS2_POSITION                           0x2
#define _AT1PHSL_AT1PHS2_SIZE                               0x1
#define _AT1PHSL_AT1PHS2_LENGTH                             0x1
#define _AT1PHSL_AT1PHS2_MASK                               0x4
#define _AT1PHSL_AT1PHS3_POSN                               0x3
#define _AT1PHSL_AT1PHS3_POSITION                           0x3
#define _AT1PHSL_AT1PHS3_SIZE                               0x1
#define _AT1PHSL_AT1PHS3_LENGTH                             0x1
#define _AT1PHSL_AT1PHS3_MASK                               0x8
#define _AT1PHSL_AT1PHS4_POSN                               0x4
#define _AT1PHSL_AT1PHS4_POSITION                           0x4
#define _AT1PHSL_AT1PHS4_SIZE                               0x1
#define _AT1PHSL_AT1PHS4_LENGTH                             0x1
#define _AT1PHSL_AT1PHS4_MASK                               0x10
#define _AT1PHSL_AT1PHS5_POSN                               0x5
#define _AT1PHSL_AT1PHS5_POSITION                           0x5
#define _AT1PHSL_AT1PHS5_SIZE                               0x1
#define _AT1PHSL_AT1PHS5_LENGTH                             0x1
#define _AT1PHSL_AT1PHS5_MASK                               0x20
#define _AT1PHSL_AT1PHS6_POSN                               0x6
#define _AT1PHSL_AT1PHS6_POSITION                           0x6
#define _AT1PHSL_AT1PHS6_SIZE                               0x1
#define _AT1PHSL_AT1PHS6_LENGTH                             0x1
#define _AT1PHSL_AT1PHS6_MASK                               0x40
#define _AT1PHSL_AT1PHS7_POSN                               0x7
#define _AT1PHSL_AT1PHS7_POSITION                           0x7
#define _AT1PHSL_AT1PHS7_SIZE                               0x1
#define _AT1PHSL_AT1PHS7_LENGTH                             0x1
#define _AT1PHSL_AT1PHS7_MASK                               0x80
#define _AT1PHSL_PHS0_POSN                                  0x0
#define _AT1PHSL_PHS0_POSITION                              0x0
#define _AT1PHSL_PHS0_SIZE                                  0x1
#define _AT1PHSL_PHS0_LENGTH                                0x1
#define _AT1PHSL_PHS0_MASK                                  0x1
#define _AT1PHSL_PHS1_POSN                                  0x1
#define _AT1PHSL_PHS1_POSITION                              0x1
#define _AT1PHSL_PHS1_SIZE                                  0x1
#define _AT1PHSL_PHS1_LENGTH                                0x1
#define _AT1PHSL_PHS1_MASK                                  0x2
#define _AT1PHSL_PHS2_POSN                                  0x2
#define _AT1PHSL_PHS2_POSITION                              0x2
#define _AT1PHSL_PHS2_SIZE                                  0x1
#define _AT1PHSL_PHS2_LENGTH                                0x1
#define _AT1PHSL_PHS2_MASK                                  0x4
#define _AT1PHSL_PHS3_POSN                                  0x3
#define _AT1PHSL_PHS3_POSITION                              0x3
#define _AT1PHSL_PHS3_SIZE                                  0x1
#define _AT1PHSL_PHS3_LENGTH                                0x1
#define _AT1PHSL_PHS3_MASK                                  0x8
#define _AT1PHSL_PHS4_POSN                                  0x4
#define _AT1PHSL_PHS4_POSITION                              0x4
#define _AT1PHSL_PHS4_SIZE                                  0x1
#define _AT1PHSL_PHS4_LENGTH                                0x1
#define _AT1PHSL_PHS4_MASK                                  0x10
#define _AT1PHSL_PHS5_POSN                                  0x5
#define _AT1PHSL_PHS5_POSITION                              0x5
#define _AT1PHSL_PHS5_SIZE                                  0x1
#define _AT1PHSL_PHS5_LENGTH                                0x1
#define _AT1PHSL_PHS5_MASK                                  0x20
#define _AT1PHSL_PHS6_POSN                                  0x6
#define _AT1PHSL_PHS6_POSITION                              0x6
#define _AT1PHSL_PHS6_SIZE                                  0x1
#define _AT1PHSL_PHS6_LENGTH                                0x1
#define _AT1PHSL_PHS6_MASK                                  0x40
#define _AT1PHSL_PHS7_POSN                                  0x7
#define _AT1PHSL_PHS7_POSITION                              0x7
#define _AT1PHSL_PHS7_SIZE                                  0x1
#define _AT1PHSL_PHS7_LENGTH                                0x1
#define _AT1PHSL_PHS7_MASK                                  0x80

// Register: AT1PHSH
#define AT1PHSH AT1PHSH
extern volatile unsigned char           AT1PHSH             __at(0x813);
#ifndef _LIB_BUILD
asm("AT1PHSH equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PHS8                :1;
        unsigned AT1PHS9                :1;
    };
    struct {
        unsigned PHS8                   :1;
        unsigned PHS9                   :1;
    };
    struct {
        unsigned PHSL8                  :1;
        unsigned PHSL9                  :1;
    };
} AT1PHSHbits_t;
extern volatile AT1PHSHbits_t AT1PHSHbits __at(0x813);
// bitfield macros
#define _AT1PHSH_AT1PHS8_POSN                               0x0
#define _AT1PHSH_AT1PHS8_POSITION                           0x0
#define _AT1PHSH_AT1PHS8_SIZE                               0x1
#define _AT1PHSH_AT1PHS8_LENGTH                             0x1
#define _AT1PHSH_AT1PHS8_MASK                               0x1
#define _AT1PHSH_AT1PHS9_POSN                               0x1
#define _AT1PHSH_AT1PHS9_POSITION                           0x1
#define _AT1PHSH_AT1PHS9_SIZE                               0x1
#define _AT1PHSH_AT1PHS9_LENGTH                             0x1
#define _AT1PHSH_AT1PHS9_MASK                               0x2
#define _AT1PHSH_PHS8_POSN                                  0x0
#define _AT1PHSH_PHS8_POSITION                              0x0
#define _AT1PHSH_PHS8_SIZE                                  0x1
#define _AT1PHSH_PHS8_LENGTH                                0x1
#define _AT1PHSH_PHS8_MASK                                  0x1
#define _AT1PHSH_PHS9_POSN                                  0x1
#define _AT1PHSH_PHS9_POSITION                              0x1
#define _AT1PHSH_PHS9_SIZE                                  0x1
#define _AT1PHSH_PHS9_LENGTH                                0x1
#define _AT1PHSH_PHS9_MASK                                  0x2
#define _AT1PHSH_PHSL8_POSN                                 0x0
#define _AT1PHSH_PHSL8_POSITION                             0x0
#define _AT1PHSH_PHSL8_SIZE                                 0x1
#define _AT1PHSH_PHSL8_LENGTH                               0x1
#define _AT1PHSH_PHSL8_MASK                                 0x1
#define _AT1PHSH_PHSL9_POSN                                 0x1
#define _AT1PHSH_PHSL9_POSITION                             0x1
#define _AT1PHSH_PHSL9_SIZE                                 0x1
#define _AT1PHSH_PHSL9_LENGTH                               0x1
#define _AT1PHSH_PHSL9_MASK                                 0x2

// Register: AT1CON0
#define AT1CON0 AT1CON0
extern volatile unsigned char           AT1CON0             __at(0x814);
#ifndef _LIB_BUILD
asm("AT1CON0 equ 0814h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :1;
        unsigned APMOD                  :1;
        unsigned                        :1;
        unsigned POL                    :1;
        unsigned PS                     :2;
        unsigned PREC                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PS0                    :1;
        unsigned PS1                    :1;
    };
    struct {
        unsigned AT1MODE                :1;
        unsigned AT1APMOD               :1;
        unsigned                        :1;
        unsigned AT1POL                 :1;
        unsigned AT1PS                  :2;
        unsigned AT1PREC                :1;
        unsigned AT1EN                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned AT1PS0                 :1;
        unsigned AT1PS1                 :1;
    };
} AT1CON0bits_t;
extern volatile AT1CON0bits_t AT1CON0bits __at(0x814);
// bitfield macros
#define _AT1CON0_MODE_POSN                                  0x0
#define _AT1CON0_MODE_POSITION                              0x0
#define _AT1CON0_MODE_SIZE                                  0x1
#define _AT1CON0_MODE_LENGTH                                0x1
#define _AT1CON0_MODE_MASK                                  0x1
#define _AT1CON0_APMOD_POSN                                 0x1
#define _AT1CON0_APMOD_POSITION                             0x1
#define _AT1CON0_APMOD_SIZE                                 0x1
#define _AT1CON0_APMOD_LENGTH                               0x1
#define _AT1CON0_APMOD_MASK                                 0x2
#define _AT1CON0_POL_POSN                                   0x3
#define _AT1CON0_POL_POSITION                               0x3
#define _AT1CON0_POL_SIZE                                   0x1
#define _AT1CON0_POL_LENGTH                                 0x1
#define _AT1CON0_POL_MASK                                   0x8
#define _AT1CON0_PS_POSN                                    0x4
#define _AT1CON0_PS_POSITION                                0x4
#define _AT1CON0_PS_SIZE                                    0x2
#define _AT1CON0_PS_LENGTH                                  0x2
#define _AT1CON0_PS_MASK                                    0x30
#define _AT1CON0_PREC_POSN                                  0x6
#define _AT1CON0_PREC_POSITION                              0x6
#define _AT1CON0_PREC_SIZE                                  0x1
#define _AT1CON0_PREC_LENGTH                                0x1
#define _AT1CON0_PREC_MASK                                  0x40
#define _AT1CON0_EN_POSN                                    0x7
#define _AT1CON0_EN_POSITION                                0x7
#define _AT1CON0_EN_SIZE                                    0x1
#define _AT1CON0_EN_LENGTH                                  0x1
#define _AT1CON0_EN_MASK                                    0x80
#define _AT1CON0_PS0_POSN                                   0x4
#define _AT1CON0_PS0_POSITION                               0x4
#define _AT1CON0_PS0_SIZE                                   0x1
#define _AT1CON0_PS0_LENGTH                                 0x1
#define _AT1CON0_PS0_MASK                                   0x10
#define _AT1CON0_PS1_POSN                                   0x5
#define _AT1CON0_PS1_POSITION                               0x5
#define _AT1CON0_PS1_SIZE                                   0x1
#define _AT1CON0_PS1_LENGTH                                 0x1
#define _AT1CON0_PS1_MASK                                   0x20
#define _AT1CON0_AT1MODE_POSN                               0x0
#define _AT1CON0_AT1MODE_POSITION                           0x0
#define _AT1CON0_AT1MODE_SIZE                               0x1
#define _AT1CON0_AT1MODE_LENGTH                             0x1
#define _AT1CON0_AT1MODE_MASK                               0x1
#define _AT1CON0_AT1APMOD_POSN                              0x1
#define _AT1CON0_AT1APMOD_POSITION                          0x1
#define _AT1CON0_AT1APMOD_SIZE                              0x1
#define _AT1CON0_AT1APMOD_LENGTH                            0x1
#define _AT1CON0_AT1APMOD_MASK                              0x2
#define _AT1CON0_AT1POL_POSN                                0x3
#define _AT1CON0_AT1POL_POSITION                            0x3
#define _AT1CON0_AT1POL_SIZE                                0x1
#define _AT1CON0_AT1POL_LENGTH                              0x1
#define _AT1CON0_AT1POL_MASK                                0x8
#define _AT1CON0_AT1PS_POSN                                 0x4
#define _AT1CON0_AT1PS_POSITION                             0x4
#define _AT1CON0_AT1PS_SIZE                                 0x2
#define _AT1CON0_AT1PS_LENGTH                               0x2
#define _AT1CON0_AT1PS_MASK                                 0x30
#define _AT1CON0_AT1PREC_POSN                               0x6
#define _AT1CON0_AT1PREC_POSITION                           0x6
#define _AT1CON0_AT1PREC_SIZE                               0x1
#define _AT1CON0_AT1PREC_LENGTH                             0x1
#define _AT1CON0_AT1PREC_MASK                               0x40
#define _AT1CON0_AT1EN_POSN                                 0x7
#define _AT1CON0_AT1EN_POSITION                             0x7
#define _AT1CON0_AT1EN_SIZE                                 0x1
#define _AT1CON0_AT1EN_LENGTH                               0x1
#define _AT1CON0_AT1EN_MASK                                 0x80
#define _AT1CON0_AT1PS0_POSN                                0x4
#define _AT1CON0_AT1PS0_POSITION                            0x4
#define _AT1CON0_AT1PS0_SIZE                                0x1
#define _AT1CON0_AT1PS0_LENGTH                              0x1
#define _AT1CON0_AT1PS0_MASK                                0x10
#define _AT1CON0_AT1PS1_POSN                                0x5
#define _AT1CON0_AT1PS1_POSITION                            0x5
#define _AT1CON0_AT1PS1_SIZE                                0x1
#define _AT1CON0_AT1PS1_LENGTH                              0x1
#define _AT1CON0_AT1PS1_MASK                                0x20

// Register: AT1CON1
#define AT1CON1 AT1CON1
extern volatile unsigned char           AT1CON1             __at(0x815);
#ifndef _LIB_BUILD
asm("AT1CON1 equ 0815h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VALID                  :1;
        unsigned ACCS                   :1;
        unsigned MPP                    :1;
        unsigned                        :1;
        unsigned PRP                    :1;
        unsigned                        :1;
        unsigned PHP                    :1;
    };
    struct {
        unsigned AT1VALID               :1;
        unsigned AT1ACCS                :1;
        unsigned AT1MPP                 :1;
        unsigned                        :1;
        unsigned AT1PRP                 :1;
        unsigned                        :1;
        unsigned AT1PHP                 :1;
    };
} AT1CON1bits_t;
extern volatile AT1CON1bits_t AT1CON1bits __at(0x815);
// bitfield macros
#define _AT1CON1_VALID_POSN                                 0x0
#define _AT1CON1_VALID_POSITION                             0x0
#define _AT1CON1_VALID_SIZE                                 0x1
#define _AT1CON1_VALID_LENGTH                               0x1
#define _AT1CON1_VALID_MASK                                 0x1
#define _AT1CON1_ACCS_POSN                                  0x1
#define _AT1CON1_ACCS_POSITION                              0x1
#define _AT1CON1_ACCS_SIZE                                  0x1
#define _AT1CON1_ACCS_LENGTH                                0x1
#define _AT1CON1_ACCS_MASK                                  0x2
#define _AT1CON1_MPP_POSN                                   0x2
#define _AT1CON1_MPP_POSITION                               0x2
#define _AT1CON1_MPP_SIZE                                   0x1
#define _AT1CON1_MPP_LENGTH                                 0x1
#define _AT1CON1_MPP_MASK                                   0x4
#define _AT1CON1_PRP_POSN                                   0x4
#define _AT1CON1_PRP_POSITION                               0x4
#define _AT1CON1_PRP_SIZE                                   0x1
#define _AT1CON1_PRP_LENGTH                                 0x1
#define _AT1CON1_PRP_MASK                                   0x10
#define _AT1CON1_PHP_POSN                                   0x6
#define _AT1CON1_PHP_POSITION                               0x6
#define _AT1CON1_PHP_SIZE                                   0x1
#define _AT1CON1_PHP_LENGTH                                 0x1
#define _AT1CON1_PHP_MASK                                   0x40
#define _AT1CON1_AT1VALID_POSN                              0x0
#define _AT1CON1_AT1VALID_POSITION                          0x0
#define _AT1CON1_AT1VALID_SIZE                              0x1
#define _AT1CON1_AT1VALID_LENGTH                            0x1
#define _AT1CON1_AT1VALID_MASK                              0x1
#define _AT1CON1_AT1ACCS_POSN                               0x1
#define _AT1CON1_AT1ACCS_POSITION                           0x1
#define _AT1CON1_AT1ACCS_SIZE                               0x1
#define _AT1CON1_AT1ACCS_LENGTH                             0x1
#define _AT1CON1_AT1ACCS_MASK                               0x2
#define _AT1CON1_AT1MPP_POSN                                0x2
#define _AT1CON1_AT1MPP_POSITION                            0x2
#define _AT1CON1_AT1MPP_SIZE                                0x1
#define _AT1CON1_AT1MPP_LENGTH                              0x1
#define _AT1CON1_AT1MPP_MASK                                0x4
#define _AT1CON1_AT1PRP_POSN                                0x4
#define _AT1CON1_AT1PRP_POSITION                            0x4
#define _AT1CON1_AT1PRP_SIZE                                0x1
#define _AT1CON1_AT1PRP_LENGTH                              0x1
#define _AT1CON1_AT1PRP_MASK                                0x10
#define _AT1CON1_AT1PHP_POSN                                0x6
#define _AT1CON1_AT1PHP_POSITION                            0x6
#define _AT1CON1_AT1PHP_SIZE                                0x1
#define _AT1CON1_AT1PHP_LENGTH                              0x1
#define _AT1CON1_AT1PHP_MASK                                0x40

// Register: AT1IR0
#define AT1IR0 AT1IR0
extern volatile unsigned char           AT1IR0              __at(0x816);
#ifndef _LIB_BUILD
asm("AT1IR0 equ 0816h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PERIF               :1;
        unsigned AT1MISSIF              :1;
        unsigned AT1PHSIF               :1;
    };
} AT1IR0bits_t;
extern volatile AT1IR0bits_t AT1IR0bits __at(0x816);
// bitfield macros
#define _AT1IR0_AT1PERIF_POSN                               0x0
#define _AT1IR0_AT1PERIF_POSITION                           0x0
#define _AT1IR0_AT1PERIF_SIZE                               0x1
#define _AT1IR0_AT1PERIF_LENGTH                             0x1
#define _AT1IR0_AT1PERIF_MASK                               0x1
#define _AT1IR0_AT1MISSIF_POSN                              0x1
#define _AT1IR0_AT1MISSIF_POSITION                          0x1
#define _AT1IR0_AT1MISSIF_SIZE                              0x1
#define _AT1IR0_AT1MISSIF_LENGTH                            0x1
#define _AT1IR0_AT1MISSIF_MASK                              0x2
#define _AT1IR0_AT1PHSIF_POSN                               0x2
#define _AT1IR0_AT1PHSIF_POSITION                           0x2
#define _AT1IR0_AT1PHSIF_SIZE                               0x1
#define _AT1IR0_AT1PHSIF_LENGTH                             0x1
#define _AT1IR0_AT1PHSIF_MASK                               0x4

// Register: AT1IE0
#define AT1IE0 AT1IE0
extern volatile unsigned char           AT1IE0              __at(0x817);
#ifndef _LIB_BUILD
asm("AT1IE0 equ 0817h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1PERIE               :1;
        unsigned AT1MISSIE              :1;
        unsigned AT1PHSIE               :1;
    };
} AT1IE0bits_t;
extern volatile AT1IE0bits_t AT1IE0bits __at(0x817);
// bitfield macros
#define _AT1IE0_AT1PERIE_POSN                               0x0
#define _AT1IE0_AT1PERIE_POSITION                           0x0
#define _AT1IE0_AT1PERIE_SIZE                               0x1
#define _AT1IE0_AT1PERIE_LENGTH                             0x1
#define _AT1IE0_AT1PERIE_MASK                               0x1
#define _AT1IE0_AT1MISSIE_POSN                              0x1
#define _AT1IE0_AT1MISSIE_POSITION                          0x1
#define _AT1IE0_AT1MISSIE_SIZE                              0x1
#define _AT1IE0_AT1MISSIE_LENGTH                            0x1
#define _AT1IE0_AT1MISSIE_MASK                              0x2
#define _AT1IE0_AT1PHSIE_POSN                               0x2
#define _AT1IE0_AT1PHSIE_POSITION                           0x2
#define _AT1IE0_AT1PHSIE_SIZE                               0x1
#define _AT1IE0_AT1PHSIE_LENGTH                             0x1
#define _AT1IE0_AT1PHSIE_MASK                               0x4

// Register: AT1IR1
#define AT1IR1 AT1IR1
extern volatile unsigned char           AT1IR1              __at(0x818);
#ifndef _LIB_BUILD
asm("AT1IR1 equ 0818h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC1IF               :1;
        unsigned AT1CC2IF               :1;
        unsigned AT1CC3IF               :1;
    };
} AT1IR1bits_t;
extern volatile AT1IR1bits_t AT1IR1bits __at(0x818);
// bitfield macros
#define _AT1IR1_AT1CC1IF_POSN                               0x0
#define _AT1IR1_AT1CC1IF_POSITION                           0x0
#define _AT1IR1_AT1CC1IF_SIZE                               0x1
#define _AT1IR1_AT1CC1IF_LENGTH                             0x1
#define _AT1IR1_AT1CC1IF_MASK                               0x1
#define _AT1IR1_AT1CC2IF_POSN                               0x1
#define _AT1IR1_AT1CC2IF_POSITION                           0x1
#define _AT1IR1_AT1CC2IF_SIZE                               0x1
#define _AT1IR1_AT1CC2IF_LENGTH                             0x1
#define _AT1IR1_AT1CC2IF_MASK                               0x2
#define _AT1IR1_AT1CC3IF_POSN                               0x2
#define _AT1IR1_AT1CC3IF_POSITION                           0x2
#define _AT1IR1_AT1CC3IF_SIZE                               0x1
#define _AT1IR1_AT1CC3IF_LENGTH                             0x1
#define _AT1IR1_AT1CC3IF_MASK                               0x4

// Register: AT1IE1
#define AT1IE1 AT1IE1
extern volatile unsigned char           AT1IE1              __at(0x819);
#ifndef _LIB_BUILD
asm("AT1IE1 equ 0819h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC1IE               :1;
        unsigned AT1CC2IE               :1;
        unsigned AT1CC3IE               :1;
    };
} AT1IE1bits_t;
extern volatile AT1IE1bits_t AT1IE1bits __at(0x819);
// bitfield macros
#define _AT1IE1_AT1CC1IE_POSN                               0x0
#define _AT1IE1_AT1CC1IE_POSITION                           0x0
#define _AT1IE1_AT1CC1IE_SIZE                               0x1
#define _AT1IE1_AT1CC1IE_LENGTH                             0x1
#define _AT1IE1_AT1CC1IE_MASK                               0x1
#define _AT1IE1_AT1CC2IE_POSN                               0x1
#define _AT1IE1_AT1CC2IE_POSITION                           0x1
#define _AT1IE1_AT1CC2IE_SIZE                               0x1
#define _AT1IE1_AT1CC2IE_LENGTH                             0x1
#define _AT1IE1_AT1CC2IE_MASK                               0x2
#define _AT1IE1_AT1CC3IE_POSN                               0x2
#define _AT1IE1_AT1CC3IE_POSITION                           0x2
#define _AT1IE1_AT1CC3IE_SIZE                               0x1
#define _AT1IE1_AT1CC3IE_LENGTH                             0x1
#define _AT1IE1_AT1CC3IE_MASK                               0x4

// Register: AT1STPT
#define AT1STPT AT1STPT
extern volatile unsigned short          AT1STPT             __at(0x81A);
#ifndef _LIB_BUILD
asm("AT1STPT equ 081Ah");
#endif

// Register: AT1STPTL
#define AT1STPTL AT1STPTL
extern volatile unsigned char           AT1STPTL            __at(0x81A);
#ifndef _LIB_BUILD
asm("AT1STPTL equ 081Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1STPT0               :1;
        unsigned AT1STPT1               :1;
        unsigned AT1STPT2               :1;
        unsigned AT1STPT3               :1;
        unsigned AT1STPT4               :1;
        unsigned AT1STPT5               :1;
        unsigned AT1STPT6               :1;
        unsigned AT1STPT7               :1;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} AT1STPTLbits_t;
extern volatile AT1STPTLbits_t AT1STPTLbits __at(0x81A);
// bitfield macros
#define _AT1STPTL_AT1STPT0_POSN                             0x0
#define _AT1STPTL_AT1STPT0_POSITION                         0x0
#define _AT1STPTL_AT1STPT0_SIZE                             0x1
#define _AT1STPTL_AT1STPT0_LENGTH                           0x1
#define _AT1STPTL_AT1STPT0_MASK                             0x1
#define _AT1STPTL_AT1STPT1_POSN                             0x1
#define _AT1STPTL_AT1STPT1_POSITION                         0x1
#define _AT1STPTL_AT1STPT1_SIZE                             0x1
#define _AT1STPTL_AT1STPT1_LENGTH                           0x1
#define _AT1STPTL_AT1STPT1_MASK                             0x2
#define _AT1STPTL_AT1STPT2_POSN                             0x2
#define _AT1STPTL_AT1STPT2_POSITION                         0x2
#define _AT1STPTL_AT1STPT2_SIZE                             0x1
#define _AT1STPTL_AT1STPT2_LENGTH                           0x1
#define _AT1STPTL_AT1STPT2_MASK                             0x4
#define _AT1STPTL_AT1STPT3_POSN                             0x3
#define _AT1STPTL_AT1STPT3_POSITION                         0x3
#define _AT1STPTL_AT1STPT3_SIZE                             0x1
#define _AT1STPTL_AT1STPT3_LENGTH                           0x1
#define _AT1STPTL_AT1STPT3_MASK                             0x8
#define _AT1STPTL_AT1STPT4_POSN                             0x4
#define _AT1STPTL_AT1STPT4_POSITION                         0x4
#define _AT1STPTL_AT1STPT4_SIZE                             0x1
#define _AT1STPTL_AT1STPT4_LENGTH                           0x1
#define _AT1STPTL_AT1STPT4_MASK                             0x10
#define _AT1STPTL_AT1STPT5_POSN                             0x5
#define _AT1STPTL_AT1STPT5_POSITION                         0x5
#define _AT1STPTL_AT1STPT5_SIZE                             0x1
#define _AT1STPTL_AT1STPT5_LENGTH                           0x1
#define _AT1STPTL_AT1STPT5_MASK                             0x20
#define _AT1STPTL_AT1STPT6_POSN                             0x6
#define _AT1STPTL_AT1STPT6_POSITION                         0x6
#define _AT1STPTL_AT1STPT6_SIZE                             0x1
#define _AT1STPTL_AT1STPT6_LENGTH                           0x1
#define _AT1STPTL_AT1STPT6_MASK                             0x40
#define _AT1STPTL_AT1STPT7_POSN                             0x7
#define _AT1STPTL_AT1STPT7_POSITION                         0x7
#define _AT1STPTL_AT1STPT7_SIZE                             0x1
#define _AT1STPTL_AT1STPT7_LENGTH                           0x1
#define _AT1STPTL_AT1STPT7_MASK                             0x80
#define _AT1STPTL_STPT0_POSN                                0x0
#define _AT1STPTL_STPT0_POSITION                            0x0
#define _AT1STPTL_STPT0_SIZE                                0x1
#define _AT1STPTL_STPT0_LENGTH                              0x1
#define _AT1STPTL_STPT0_MASK                                0x1
#define _AT1STPTL_STPT1_POSN                                0x1
#define _AT1STPTL_STPT1_POSITION                            0x1
#define _AT1STPTL_STPT1_SIZE                                0x1
#define _AT1STPTL_STPT1_LENGTH                              0x1
#define _AT1STPTL_STPT1_MASK                                0x2
#define _AT1STPTL_STPT2_POSN                                0x2
#define _AT1STPTL_STPT2_POSITION                            0x2
#define _AT1STPTL_STPT2_SIZE                                0x1
#define _AT1STPTL_STPT2_LENGTH                              0x1
#define _AT1STPTL_STPT2_MASK                                0x4
#define _AT1STPTL_STPT3_POSN                                0x3
#define _AT1STPTL_STPT3_POSITION                            0x3
#define _AT1STPTL_STPT3_SIZE                                0x1
#define _AT1STPTL_STPT3_LENGTH                              0x1
#define _AT1STPTL_STPT3_MASK                                0x8
#define _AT1STPTL_STPT4_POSN                                0x4
#define _AT1STPTL_STPT4_POSITION                            0x4
#define _AT1STPTL_STPT4_SIZE                                0x1
#define _AT1STPTL_STPT4_LENGTH                              0x1
#define _AT1STPTL_STPT4_MASK                                0x10
#define _AT1STPTL_STPT5_POSN                                0x5
#define _AT1STPTL_STPT5_POSITION                            0x5
#define _AT1STPTL_STPT5_SIZE                                0x1
#define _AT1STPTL_STPT5_LENGTH                              0x1
#define _AT1STPTL_STPT5_MASK                                0x20
#define _AT1STPTL_STPT6_POSN                                0x6
#define _AT1STPTL_STPT6_POSITION                            0x6
#define _AT1STPTL_STPT6_SIZE                                0x1
#define _AT1STPTL_STPT6_LENGTH                              0x1
#define _AT1STPTL_STPT6_MASK                                0x40
#define _AT1STPTL_STPT7_POSN                                0x7
#define _AT1STPTL_STPT7_POSITION                            0x7
#define _AT1STPTL_STPT7_SIZE                                0x1
#define _AT1STPTL_STPT7_LENGTH                              0x1
#define _AT1STPTL_STPT7_MASK                                0x80

// Register: AT1STPTH
#define AT1STPTH AT1STPTH
extern volatile unsigned char           AT1STPTH            __at(0x81B);
#ifndef _LIB_BUILD
asm("AT1STPTH equ 081Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1STPT8               :1;
        unsigned AT1STPT9               :1;
        unsigned AT1STPT10              :1;
        unsigned AT1STPT11              :1;
        unsigned AT1STPT12              :1;
        unsigned AT1STPT13              :1;
        unsigned AT1STPT14              :1;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT14                 :1;
    };
} AT1STPTHbits_t;
extern volatile AT1STPTHbits_t AT1STPTHbits __at(0x81B);
// bitfield macros
#define _AT1STPTH_AT1STPT8_POSN                             0x0
#define _AT1STPTH_AT1STPT8_POSITION                         0x0
#define _AT1STPTH_AT1STPT8_SIZE                             0x1
#define _AT1STPTH_AT1STPT8_LENGTH                           0x1
#define _AT1STPTH_AT1STPT8_MASK                             0x1
#define _AT1STPTH_AT1STPT9_POSN                             0x1
#define _AT1STPTH_AT1STPT9_POSITION                         0x1
#define _AT1STPTH_AT1STPT9_SIZE                             0x1
#define _AT1STPTH_AT1STPT9_LENGTH                           0x1
#define _AT1STPTH_AT1STPT9_MASK                             0x2
#define _AT1STPTH_AT1STPT10_POSN                            0x2
#define _AT1STPTH_AT1STPT10_POSITION                        0x2
#define _AT1STPTH_AT1STPT10_SIZE                            0x1
#define _AT1STPTH_AT1STPT10_LENGTH                          0x1
#define _AT1STPTH_AT1STPT10_MASK                            0x4
#define _AT1STPTH_AT1STPT11_POSN                            0x3
#define _AT1STPTH_AT1STPT11_POSITION                        0x3
#define _AT1STPTH_AT1STPT11_SIZE                            0x1
#define _AT1STPTH_AT1STPT11_LENGTH                          0x1
#define _AT1STPTH_AT1STPT11_MASK                            0x8
#define _AT1STPTH_AT1STPT12_POSN                            0x4
#define _AT1STPTH_AT1STPT12_POSITION                        0x4
#define _AT1STPTH_AT1STPT12_SIZE                            0x1
#define _AT1STPTH_AT1STPT12_LENGTH                          0x1
#define _AT1STPTH_AT1STPT12_MASK                            0x10
#define _AT1STPTH_AT1STPT13_POSN                            0x5
#define _AT1STPTH_AT1STPT13_POSITION                        0x5
#define _AT1STPTH_AT1STPT13_SIZE                            0x1
#define _AT1STPTH_AT1STPT13_LENGTH                          0x1
#define _AT1STPTH_AT1STPT13_MASK                            0x20
#define _AT1STPTH_AT1STPT14_POSN                            0x6
#define _AT1STPTH_AT1STPT14_POSITION                        0x6
#define _AT1STPTH_AT1STPT14_SIZE                            0x1
#define _AT1STPTH_AT1STPT14_LENGTH                          0x1
#define _AT1STPTH_AT1STPT14_MASK                            0x40
#define _AT1STPTH_STPT8_POSN                                0x0
#define _AT1STPTH_STPT8_POSITION                            0x0
#define _AT1STPTH_STPT8_SIZE                                0x1
#define _AT1STPTH_STPT8_LENGTH                              0x1
#define _AT1STPTH_STPT8_MASK                                0x1
#define _AT1STPTH_STPT9_POSN                                0x1
#define _AT1STPTH_STPT9_POSITION                            0x1
#define _AT1STPTH_STPT9_SIZE                                0x1
#define _AT1STPTH_STPT9_LENGTH                              0x1
#define _AT1STPTH_STPT9_MASK                                0x2
#define _AT1STPTH_STPT10_POSN                               0x2
#define _AT1STPTH_STPT10_POSITION                           0x2
#define _AT1STPTH_STPT10_SIZE                               0x1
#define _AT1STPTH_STPT10_LENGTH                             0x1
#define _AT1STPTH_STPT10_MASK                               0x4
#define _AT1STPTH_STPT11_POSN                               0x3
#define _AT1STPTH_STPT11_POSITION                           0x3
#define _AT1STPTH_STPT11_SIZE                               0x1
#define _AT1STPTH_STPT11_LENGTH                             0x1
#define _AT1STPTH_STPT11_MASK                               0x8
#define _AT1STPTH_STPT12_POSN                               0x4
#define _AT1STPTH_STPT12_POSITION                           0x4
#define _AT1STPTH_STPT12_SIZE                               0x1
#define _AT1STPTH_STPT12_LENGTH                             0x1
#define _AT1STPTH_STPT12_MASK                               0x10
#define _AT1STPTH_STPT13_POSN                               0x5
#define _AT1STPTH_STPT13_POSITION                           0x5
#define _AT1STPTH_STPT13_SIZE                               0x1
#define _AT1STPTH_STPT13_LENGTH                             0x1
#define _AT1STPTH_STPT13_MASK                               0x20
#define _AT1STPTH_STPT14_POSN                               0x6
#define _AT1STPTH_STPT14_POSITION                           0x6
#define _AT1STPTH_STPT14_SIZE                               0x1
#define _AT1STPTH_STPT14_LENGTH                             0x1
#define _AT1STPTH_STPT14_MASK                               0x40

// Register: AT1ERR
#define AT1ERR AT1ERR
extern volatile unsigned short          AT1ERR              __at(0x81C);
#ifndef _LIB_BUILD
asm("AT1ERR equ 081Ch");
#endif

// Register: AT1ERRL
#define AT1ERRL AT1ERRL
extern volatile unsigned char           AT1ERRL             __at(0x81C);
#ifndef _LIB_BUILD
asm("AT1ERRL equ 081Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1ERR0                :1;
        unsigned AT1ERR1                :1;
        unsigned AT1ERR2                :1;
        unsigned AT1ERR3                :1;
        unsigned AT1ERR4                :1;
        unsigned AT1ERR5                :1;
        unsigned AT1ERR6                :1;
        unsigned AT1ERR7                :1;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
    struct {
        unsigned ERRL0                  :1;
        unsigned ERRL1                  :1;
        unsigned ERRL2                  :1;
        unsigned ERRL3                  :1;
        unsigned ERRL4                  :1;
        unsigned ERRL5                  :1;
        unsigned ERRL6                  :1;
        unsigned ERRL7                  :1;
    };
} AT1ERRLbits_t;
extern volatile AT1ERRLbits_t AT1ERRLbits __at(0x81C);
// bitfield macros
#define _AT1ERRL_AT1ERR0_POSN                               0x0
#define _AT1ERRL_AT1ERR0_POSITION                           0x0
#define _AT1ERRL_AT1ERR0_SIZE                               0x1
#define _AT1ERRL_AT1ERR0_LENGTH                             0x1
#define _AT1ERRL_AT1ERR0_MASK                               0x1
#define _AT1ERRL_AT1ERR1_POSN                               0x1
#define _AT1ERRL_AT1ERR1_POSITION                           0x1
#define _AT1ERRL_AT1ERR1_SIZE                               0x1
#define _AT1ERRL_AT1ERR1_LENGTH                             0x1
#define _AT1ERRL_AT1ERR1_MASK                               0x2
#define _AT1ERRL_AT1ERR2_POSN                               0x2
#define _AT1ERRL_AT1ERR2_POSITION                           0x2
#define _AT1ERRL_AT1ERR2_SIZE                               0x1
#define _AT1ERRL_AT1ERR2_LENGTH                             0x1
#define _AT1ERRL_AT1ERR2_MASK                               0x4
#define _AT1ERRL_AT1ERR3_POSN                               0x3
#define _AT1ERRL_AT1ERR3_POSITION                           0x3
#define _AT1ERRL_AT1ERR3_SIZE                               0x1
#define _AT1ERRL_AT1ERR3_LENGTH                             0x1
#define _AT1ERRL_AT1ERR3_MASK                               0x8
#define _AT1ERRL_AT1ERR4_POSN                               0x4
#define _AT1ERRL_AT1ERR4_POSITION                           0x4
#define _AT1ERRL_AT1ERR4_SIZE                               0x1
#define _AT1ERRL_AT1ERR4_LENGTH                             0x1
#define _AT1ERRL_AT1ERR4_MASK                               0x10
#define _AT1ERRL_AT1ERR5_POSN                               0x5
#define _AT1ERRL_AT1ERR5_POSITION                           0x5
#define _AT1ERRL_AT1ERR5_SIZE                               0x1
#define _AT1ERRL_AT1ERR5_LENGTH                             0x1
#define _AT1ERRL_AT1ERR5_MASK                               0x20
#define _AT1ERRL_AT1ERR6_POSN                               0x6
#define _AT1ERRL_AT1ERR6_POSITION                           0x6
#define _AT1ERRL_AT1ERR6_SIZE                               0x1
#define _AT1ERRL_AT1ERR6_LENGTH                             0x1
#define _AT1ERRL_AT1ERR6_MASK                               0x40
#define _AT1ERRL_AT1ERR7_POSN                               0x7
#define _AT1ERRL_AT1ERR7_POSITION                           0x7
#define _AT1ERRL_AT1ERR7_SIZE                               0x1
#define _AT1ERRL_AT1ERR7_LENGTH                             0x1
#define _AT1ERRL_AT1ERR7_MASK                               0x80
#define _AT1ERRL_ERR0_POSN                                  0x0
#define _AT1ERRL_ERR0_POSITION                              0x0
#define _AT1ERRL_ERR0_SIZE                                  0x1
#define _AT1ERRL_ERR0_LENGTH                                0x1
#define _AT1ERRL_ERR0_MASK                                  0x1
#define _AT1ERRL_ERR1_POSN                                  0x1
#define _AT1ERRL_ERR1_POSITION                              0x1
#define _AT1ERRL_ERR1_SIZE                                  0x1
#define _AT1ERRL_ERR1_LENGTH                                0x1
#define _AT1ERRL_ERR1_MASK                                  0x2
#define _AT1ERRL_ERR2_POSN                                  0x2
#define _AT1ERRL_ERR2_POSITION                              0x2
#define _AT1ERRL_ERR2_SIZE                                  0x1
#define _AT1ERRL_ERR2_LENGTH                                0x1
#define _AT1ERRL_ERR2_MASK                                  0x4
#define _AT1ERRL_ERR3_POSN                                  0x3
#define _AT1ERRL_ERR3_POSITION                              0x3
#define _AT1ERRL_ERR3_SIZE                                  0x1
#define _AT1ERRL_ERR3_LENGTH                                0x1
#define _AT1ERRL_ERR3_MASK                                  0x8
#define _AT1ERRL_ERR4_POSN                                  0x4
#define _AT1ERRL_ERR4_POSITION                              0x4
#define _AT1ERRL_ERR4_SIZE                                  0x1
#define _AT1ERRL_ERR4_LENGTH                                0x1
#define _AT1ERRL_ERR4_MASK                                  0x10
#define _AT1ERRL_ERR5_POSN                                  0x5
#define _AT1ERRL_ERR5_POSITION                              0x5
#define _AT1ERRL_ERR5_SIZE                                  0x1
#define _AT1ERRL_ERR5_LENGTH                                0x1
#define _AT1ERRL_ERR5_MASK                                  0x20
#define _AT1ERRL_ERR6_POSN                                  0x6
#define _AT1ERRL_ERR6_POSITION                              0x6
#define _AT1ERRL_ERR6_SIZE                                  0x1
#define _AT1ERRL_ERR6_LENGTH                                0x1
#define _AT1ERRL_ERR6_MASK                                  0x40
#define _AT1ERRL_ERR7_POSN                                  0x7
#define _AT1ERRL_ERR7_POSITION                              0x7
#define _AT1ERRL_ERR7_SIZE                                  0x1
#define _AT1ERRL_ERR7_LENGTH                                0x1
#define _AT1ERRL_ERR7_MASK                                  0x80
#define _AT1ERRL_ERRL0_POSN                                 0x0
#define _AT1ERRL_ERRL0_POSITION                             0x0
#define _AT1ERRL_ERRL0_SIZE                                 0x1
#define _AT1ERRL_ERRL0_LENGTH                               0x1
#define _AT1ERRL_ERRL0_MASK                                 0x1
#define _AT1ERRL_ERRL1_POSN                                 0x1
#define _AT1ERRL_ERRL1_POSITION                             0x1
#define _AT1ERRL_ERRL1_SIZE                                 0x1
#define _AT1ERRL_ERRL1_LENGTH                               0x1
#define _AT1ERRL_ERRL1_MASK                                 0x2
#define _AT1ERRL_ERRL2_POSN                                 0x2
#define _AT1ERRL_ERRL2_POSITION                             0x2
#define _AT1ERRL_ERRL2_SIZE                                 0x1
#define _AT1ERRL_ERRL2_LENGTH                               0x1
#define _AT1ERRL_ERRL2_MASK                                 0x4
#define _AT1ERRL_ERRL3_POSN                                 0x3
#define _AT1ERRL_ERRL3_POSITION                             0x3
#define _AT1ERRL_ERRL3_SIZE                                 0x1
#define _AT1ERRL_ERRL3_LENGTH                               0x1
#define _AT1ERRL_ERRL3_MASK                                 0x8
#define _AT1ERRL_ERRL4_POSN                                 0x4
#define _AT1ERRL_ERRL4_POSITION                             0x4
#define _AT1ERRL_ERRL4_SIZE                                 0x1
#define _AT1ERRL_ERRL4_LENGTH                               0x1
#define _AT1ERRL_ERRL4_MASK                                 0x10
#define _AT1ERRL_ERRL5_POSN                                 0x5
#define _AT1ERRL_ERRL5_POSITION                             0x5
#define _AT1ERRL_ERRL5_SIZE                                 0x1
#define _AT1ERRL_ERRL5_LENGTH                               0x1
#define _AT1ERRL_ERRL5_MASK                                 0x20
#define _AT1ERRL_ERRL6_POSN                                 0x6
#define _AT1ERRL_ERRL6_POSITION                             0x6
#define _AT1ERRL_ERRL6_SIZE                                 0x1
#define _AT1ERRL_ERRL6_LENGTH                               0x1
#define _AT1ERRL_ERRL6_MASK                                 0x40
#define _AT1ERRL_ERRL7_POSN                                 0x7
#define _AT1ERRL_ERRL7_POSITION                             0x7
#define _AT1ERRL_ERRL7_SIZE                                 0x1
#define _AT1ERRL_ERRL7_LENGTH                               0x1
#define _AT1ERRL_ERRL7_MASK                                 0x80

// Register: AT1ERRH
#define AT1ERRH AT1ERRH
extern volatile unsigned char           AT1ERRH             __at(0x81D);
#ifndef _LIB_BUILD
asm("AT1ERRH equ 081Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1ERR8                :1;
        unsigned AT1ERR9                :1;
        unsigned AT1ERR10               :1;
        unsigned AT1ERR11               :1;
        unsigned AT1ERR12               :1;
        unsigned AT1ERR13               :1;
        unsigned AT1ERR14               :1;
        unsigned AT1ERR15               :1;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
    struct {
        unsigned ERRH0                  :1;
        unsigned ERRH1                  :1;
        unsigned ERRH2                  :1;
        unsigned ERRH3                  :1;
        unsigned ERRH4                  :1;
        unsigned ERRH5                  :1;
        unsigned ERRH6                  :1;
        unsigned ERRH7                  :1;
    };
} AT1ERRHbits_t;
extern volatile AT1ERRHbits_t AT1ERRHbits __at(0x81D);
// bitfield macros
#define _AT1ERRH_AT1ERR8_POSN                               0x0
#define _AT1ERRH_AT1ERR8_POSITION                           0x0
#define _AT1ERRH_AT1ERR8_SIZE                               0x1
#define _AT1ERRH_AT1ERR8_LENGTH                             0x1
#define _AT1ERRH_AT1ERR8_MASK                               0x1
#define _AT1ERRH_AT1ERR9_POSN                               0x1
#define _AT1ERRH_AT1ERR9_POSITION                           0x1
#define _AT1ERRH_AT1ERR9_SIZE                               0x1
#define _AT1ERRH_AT1ERR9_LENGTH                             0x1
#define _AT1ERRH_AT1ERR9_MASK                               0x2
#define _AT1ERRH_AT1ERR10_POSN                              0x2
#define _AT1ERRH_AT1ERR10_POSITION                          0x2
#define _AT1ERRH_AT1ERR10_SIZE                              0x1
#define _AT1ERRH_AT1ERR10_LENGTH                            0x1
#define _AT1ERRH_AT1ERR10_MASK                              0x4
#define _AT1ERRH_AT1ERR11_POSN                              0x3
#define _AT1ERRH_AT1ERR11_POSITION                          0x3
#define _AT1ERRH_AT1ERR11_SIZE                              0x1
#define _AT1ERRH_AT1ERR11_LENGTH                            0x1
#define _AT1ERRH_AT1ERR11_MASK                              0x8
#define _AT1ERRH_AT1ERR12_POSN                              0x4
#define _AT1ERRH_AT1ERR12_POSITION                          0x4
#define _AT1ERRH_AT1ERR12_SIZE                              0x1
#define _AT1ERRH_AT1ERR12_LENGTH                            0x1
#define _AT1ERRH_AT1ERR12_MASK                              0x10
#define _AT1ERRH_AT1ERR13_POSN                              0x5
#define _AT1ERRH_AT1ERR13_POSITION                          0x5
#define _AT1ERRH_AT1ERR13_SIZE                              0x1
#define _AT1ERRH_AT1ERR13_LENGTH                            0x1
#define _AT1ERRH_AT1ERR13_MASK                              0x20
#define _AT1ERRH_AT1ERR14_POSN                              0x6
#define _AT1ERRH_AT1ERR14_POSITION                          0x6
#define _AT1ERRH_AT1ERR14_SIZE                              0x1
#define _AT1ERRH_AT1ERR14_LENGTH                            0x1
#define _AT1ERRH_AT1ERR14_MASK                              0x40
#define _AT1ERRH_AT1ERR15_POSN                              0x7
#define _AT1ERRH_AT1ERR15_POSITION                          0x7
#define _AT1ERRH_AT1ERR15_SIZE                              0x1
#define _AT1ERRH_AT1ERR15_LENGTH                            0x1
#define _AT1ERRH_AT1ERR15_MASK                              0x80
#define _AT1ERRH_ERR8_POSN                                  0x0
#define _AT1ERRH_ERR8_POSITION                              0x0
#define _AT1ERRH_ERR8_SIZE                                  0x1
#define _AT1ERRH_ERR8_LENGTH                                0x1
#define _AT1ERRH_ERR8_MASK                                  0x1
#define _AT1ERRH_ERR9_POSN                                  0x1
#define _AT1ERRH_ERR9_POSITION                              0x1
#define _AT1ERRH_ERR9_SIZE                                  0x1
#define _AT1ERRH_ERR9_LENGTH                                0x1
#define _AT1ERRH_ERR9_MASK                                  0x2
#define _AT1ERRH_ERR10_POSN                                 0x2
#define _AT1ERRH_ERR10_POSITION                             0x2
#define _AT1ERRH_ERR10_SIZE                                 0x1
#define _AT1ERRH_ERR10_LENGTH                               0x1
#define _AT1ERRH_ERR10_MASK                                 0x4
#define _AT1ERRH_ERR11_POSN                                 0x3
#define _AT1ERRH_ERR11_POSITION                             0x3
#define _AT1ERRH_ERR11_SIZE                                 0x1
#define _AT1ERRH_ERR11_LENGTH                               0x1
#define _AT1ERRH_ERR11_MASK                                 0x8
#define _AT1ERRH_ERR12_POSN                                 0x4
#define _AT1ERRH_ERR12_POSITION                             0x4
#define _AT1ERRH_ERR12_SIZE                                 0x1
#define _AT1ERRH_ERR12_LENGTH                               0x1
#define _AT1ERRH_ERR12_MASK                                 0x10
#define _AT1ERRH_ERR13_POSN                                 0x5
#define _AT1ERRH_ERR13_POSITION                             0x5
#define _AT1ERRH_ERR13_SIZE                                 0x1
#define _AT1ERRH_ERR13_LENGTH                               0x1
#define _AT1ERRH_ERR13_MASK                                 0x20
#define _AT1ERRH_ERR14_POSN                                 0x6
#define _AT1ERRH_ERR14_POSITION                             0x6
#define _AT1ERRH_ERR14_SIZE                                 0x1
#define _AT1ERRH_ERR14_LENGTH                               0x1
#define _AT1ERRH_ERR14_MASK                                 0x40
#define _AT1ERRH_ERR15_POSN                                 0x7
#define _AT1ERRH_ERR15_POSITION                             0x7
#define _AT1ERRH_ERR15_SIZE                                 0x1
#define _AT1ERRH_ERR15_LENGTH                               0x1
#define _AT1ERRH_ERR15_MASK                                 0x80
#define _AT1ERRH_ERRH0_POSN                                 0x0
#define _AT1ERRH_ERRH0_POSITION                             0x0
#define _AT1ERRH_ERRH0_SIZE                                 0x1
#define _AT1ERRH_ERRH0_LENGTH                               0x1
#define _AT1ERRH_ERRH0_MASK                                 0x1
#define _AT1ERRH_ERRH1_POSN                                 0x1
#define _AT1ERRH_ERRH1_POSITION                             0x1
#define _AT1ERRH_ERRH1_SIZE                                 0x1
#define _AT1ERRH_ERRH1_LENGTH                               0x1
#define _AT1ERRH_ERRH1_MASK                                 0x2
#define _AT1ERRH_ERRH2_POSN                                 0x2
#define _AT1ERRH_ERRH2_POSITION                             0x2
#define _AT1ERRH_ERRH2_SIZE                                 0x1
#define _AT1ERRH_ERRH2_LENGTH                               0x1
#define _AT1ERRH_ERRH2_MASK                                 0x4
#define _AT1ERRH_ERRH3_POSN                                 0x3
#define _AT1ERRH_ERRH3_POSITION                             0x3
#define _AT1ERRH_ERRH3_SIZE                                 0x1
#define _AT1ERRH_ERRH3_LENGTH                               0x1
#define _AT1ERRH_ERRH3_MASK                                 0x8
#define _AT1ERRH_ERRH4_POSN                                 0x4
#define _AT1ERRH_ERRH4_POSITION                             0x4
#define _AT1ERRH_ERRH4_SIZE                                 0x1
#define _AT1ERRH_ERRH4_LENGTH                               0x1
#define _AT1ERRH_ERRH4_MASK                                 0x10
#define _AT1ERRH_ERRH5_POSN                                 0x5
#define _AT1ERRH_ERRH5_POSITION                             0x5
#define _AT1ERRH_ERRH5_SIZE                                 0x1
#define _AT1ERRH_ERRH5_LENGTH                               0x1
#define _AT1ERRH_ERRH5_MASK                                 0x20
#define _AT1ERRH_ERRH6_POSN                                 0x6
#define _AT1ERRH_ERRH6_POSITION                             0x6
#define _AT1ERRH_ERRH6_SIZE                                 0x1
#define _AT1ERRH_ERRH6_LENGTH                               0x1
#define _AT1ERRH_ERRH6_MASK                                 0x40
#define _AT1ERRH_ERRH7_POSN                                 0x7
#define _AT1ERRH_ERRH7_POSITION                             0x7
#define _AT1ERRH_ERRH7_SIZE                                 0x1
#define _AT1ERRH_ERRH7_LENGTH                               0x1
#define _AT1ERRH_ERRH7_MASK                                 0x80

// Register: AT1CLK
#define AT1CLK AT1CLK
extern volatile unsigned char           AT1CLK              __at(0x88C);
#ifndef _LIB_BUILD
asm("AT1CLK equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned AT1CS                  :1;
    };
    struct {
        unsigned CS0                    :1;
    };
    struct {
        unsigned AT1CS0                 :1;
    };
} AT1CLKbits_t;
extern volatile AT1CLKbits_t AT1CLKbits __at(0x88C);
// bitfield macros
#define _AT1CLK_CS_POSN                                     0x0
#define _AT1CLK_CS_POSITION                                 0x0
#define _AT1CLK_CS_SIZE                                     0x1
#define _AT1CLK_CS_LENGTH                                   0x1
#define _AT1CLK_CS_MASK                                     0x1
#define _AT1CLK_AT1CS_POSN                                  0x0
#define _AT1CLK_AT1CS_POSITION                              0x0
#define _AT1CLK_AT1CS_SIZE                                  0x1
#define _AT1CLK_AT1CS_LENGTH                                0x1
#define _AT1CLK_AT1CS_MASK                                  0x1
#define _AT1CLK_CS0_POSN                                    0x0
#define _AT1CLK_CS0_POSITION                                0x0
#define _AT1CLK_CS0_SIZE                                    0x1
#define _AT1CLK_CS0_LENGTH                                  0x1
#define _AT1CLK_CS0_MASK                                    0x1
#define _AT1CLK_AT1CS0_POSN                                 0x0
#define _AT1CLK_AT1CS0_POSITION                             0x0
#define _AT1CLK_AT1CS0_SIZE                                 0x1
#define _AT1CLK_AT1CS0_LENGTH                               0x1
#define _AT1CLK_AT1CS0_MASK                                 0x1

// Register: AT1SIG
#define AT1SIG AT1SIG
extern volatile unsigned char           AT1SIG              __at(0x88D);
#ifndef _LIB_BUILD
asm("AT1SIG equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :3;
    };
    struct {
        unsigned AT1SSEL0               :1;
        unsigned AT1SSEL1               :1;
        unsigned AT1SSEL2               :1;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
    };
    struct {
        unsigned AT1SSEL                :3;
    };
} AT1SIGbits_t;
extern volatile AT1SIGbits_t AT1SIGbits __at(0x88D);
// bitfield macros
#define _AT1SIG_SSEL_POSN                                   0x0
#define _AT1SIG_SSEL_POSITION                               0x0
#define _AT1SIG_SSEL_SIZE                                   0x3
#define _AT1SIG_SSEL_LENGTH                                 0x3
#define _AT1SIG_SSEL_MASK                                   0x7
#define _AT1SIG_AT1SSEL0_POSN                               0x0
#define _AT1SIG_AT1SSEL0_POSITION                           0x0
#define _AT1SIG_AT1SSEL0_SIZE                               0x1
#define _AT1SIG_AT1SSEL0_LENGTH                             0x1
#define _AT1SIG_AT1SSEL0_MASK                               0x1
#define _AT1SIG_AT1SSEL1_POSN                               0x1
#define _AT1SIG_AT1SSEL1_POSITION                           0x1
#define _AT1SIG_AT1SSEL1_SIZE                               0x1
#define _AT1SIG_AT1SSEL1_LENGTH                             0x1
#define _AT1SIG_AT1SSEL1_MASK                               0x2
#define _AT1SIG_AT1SSEL2_POSN                               0x2
#define _AT1SIG_AT1SSEL2_POSITION                           0x2
#define _AT1SIG_AT1SSEL2_SIZE                               0x1
#define _AT1SIG_AT1SSEL2_LENGTH                             0x1
#define _AT1SIG_AT1SSEL2_MASK                               0x4
#define _AT1SIG_SSEL0_POSN                                  0x0
#define _AT1SIG_SSEL0_POSITION                              0x0
#define _AT1SIG_SSEL0_SIZE                                  0x1
#define _AT1SIG_SSEL0_LENGTH                                0x1
#define _AT1SIG_SSEL0_MASK                                  0x1
#define _AT1SIG_SSEL1_POSN                                  0x1
#define _AT1SIG_SSEL1_POSITION                              0x1
#define _AT1SIG_SSEL1_SIZE                                  0x1
#define _AT1SIG_SSEL1_LENGTH                                0x1
#define _AT1SIG_SSEL1_MASK                                  0x2
#define _AT1SIG_SSEL2_POSN                                  0x2
#define _AT1SIG_SSEL2_POSITION                              0x2
#define _AT1SIG_SSEL2_SIZE                                  0x1
#define _AT1SIG_SSEL2_LENGTH                                0x1
#define _AT1SIG_SSEL2_MASK                                  0x4
#define _AT1SIG_AT1SSEL_POSN                                0x0
#define _AT1SIG_AT1SSEL_POSITION                            0x0
#define _AT1SIG_AT1SSEL_SIZE                                0x3
#define _AT1SIG_AT1SSEL_LENGTH                              0x3
#define _AT1SIG_AT1SSEL_MASK                                0x7

// Register: AT1CSEL1
#define AT1CSEL1 AT1CSEL1
extern volatile unsigned char           AT1CSEL1            __at(0x88E);
#ifndef _LIB_BUILD
asm("AT1CSEL1 equ 088Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CP1S                   :3;
    };
    struct {
        unsigned AT1CP1S0               :1;
        unsigned AT1CP1S1               :1;
        unsigned AT1CP1S2               :1;
    };
    struct {
        unsigned CP1S0                  :1;
        unsigned CP1S1                  :1;
        unsigned CP1S2                  :1;
    };
    struct {
        unsigned AT1CP1S                :3;
    };
} AT1CSEL1bits_t;
extern volatile AT1CSEL1bits_t AT1CSEL1bits __at(0x88E);
// bitfield macros
#define _AT1CSEL1_CP1S_POSN                                 0x0
#define _AT1CSEL1_CP1S_POSITION                             0x0
#define _AT1CSEL1_CP1S_SIZE                                 0x3
#define _AT1CSEL1_CP1S_LENGTH                               0x3
#define _AT1CSEL1_CP1S_MASK                                 0x7
#define _AT1CSEL1_AT1CP1S0_POSN                             0x0
#define _AT1CSEL1_AT1CP1S0_POSITION                         0x0
#define _AT1CSEL1_AT1CP1S0_SIZE                             0x1
#define _AT1CSEL1_AT1CP1S0_LENGTH                           0x1
#define _AT1CSEL1_AT1CP1S0_MASK                             0x1
#define _AT1CSEL1_AT1CP1S1_POSN                             0x1
#define _AT1CSEL1_AT1CP1S1_POSITION                         0x1
#define _AT1CSEL1_AT1CP1S1_SIZE                             0x1
#define _AT1CSEL1_AT1CP1S1_LENGTH                           0x1
#define _AT1CSEL1_AT1CP1S1_MASK                             0x2
#define _AT1CSEL1_AT1CP1S2_POSN                             0x2
#define _AT1CSEL1_AT1CP1S2_POSITION                         0x2
#define _AT1CSEL1_AT1CP1S2_SIZE                             0x1
#define _AT1CSEL1_AT1CP1S2_LENGTH                           0x1
#define _AT1CSEL1_AT1CP1S2_MASK                             0x4
#define _AT1CSEL1_CP1S0_POSN                                0x0
#define _AT1CSEL1_CP1S0_POSITION                            0x0
#define _AT1CSEL1_CP1S0_SIZE                                0x1
#define _AT1CSEL1_CP1S0_LENGTH                              0x1
#define _AT1CSEL1_CP1S0_MASK                                0x1
#define _AT1CSEL1_CP1S1_POSN                                0x1
#define _AT1CSEL1_CP1S1_POSITION                            0x1
#define _AT1CSEL1_CP1S1_SIZE                                0x1
#define _AT1CSEL1_CP1S1_LENGTH                              0x1
#define _AT1CSEL1_CP1S1_MASK                                0x2
#define _AT1CSEL1_CP1S2_POSN                                0x2
#define _AT1CSEL1_CP1S2_POSITION                            0x2
#define _AT1CSEL1_CP1S2_SIZE                                0x1
#define _AT1CSEL1_CP1S2_LENGTH                              0x1
#define _AT1CSEL1_CP1S2_MASK                                0x4
#define _AT1CSEL1_AT1CP1S_POSN                              0x0
#define _AT1CSEL1_AT1CP1S_POSITION                          0x0
#define _AT1CSEL1_AT1CP1S_SIZE                              0x3
#define _AT1CSEL1_AT1CP1S_LENGTH                            0x3
#define _AT1CSEL1_AT1CP1S_MASK                              0x7

// Register: AT1CC1
#define AT1CC1 AT1CC1
extern volatile unsigned short          AT1CC1              __at(0x88F);
#ifndef _LIB_BUILD
asm("AT1CC1 equ 088Fh");
#endif

// Register: AT1CC1L
#define AT1CC1L AT1CC1L
extern volatile unsigned char           AT1CC1L             __at(0x88F);
#ifndef _LIB_BUILD
asm("AT1CC1L equ 088Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC10                :1;
        unsigned AT1CC11                :1;
        unsigned AT1CC12                :1;
        unsigned AT1CC13                :1;
        unsigned AT1CC14                :1;
        unsigned AT1CC15                :1;
        unsigned AT1CC16                :1;
        unsigned AT1CC17                :1;
    };
    struct {
        unsigned CC10                   :1;
        unsigned CC11                   :1;
        unsigned CC12                   :1;
        unsigned CC13                   :1;
        unsigned CC14                   :1;
        unsigned CC15                   :1;
        unsigned CC16                   :1;
        unsigned CC17                   :1;
    };
} AT1CC1Lbits_t;
extern volatile AT1CC1Lbits_t AT1CC1Lbits __at(0x88F);
// bitfield macros
#define _AT1CC1L_AT1CC10_POSN                               0x0
#define _AT1CC1L_AT1CC10_POSITION                           0x0
#define _AT1CC1L_AT1CC10_SIZE                               0x1
#define _AT1CC1L_AT1CC10_LENGTH                             0x1
#define _AT1CC1L_AT1CC10_MASK                               0x1
#define _AT1CC1L_AT1CC11_POSN                               0x1
#define _AT1CC1L_AT1CC11_POSITION                           0x1
#define _AT1CC1L_AT1CC11_SIZE                               0x1
#define _AT1CC1L_AT1CC11_LENGTH                             0x1
#define _AT1CC1L_AT1CC11_MASK                               0x2
#define _AT1CC1L_AT1CC12_POSN                               0x2
#define _AT1CC1L_AT1CC12_POSITION                           0x2
#define _AT1CC1L_AT1CC12_SIZE                               0x1
#define _AT1CC1L_AT1CC12_LENGTH                             0x1
#define _AT1CC1L_AT1CC12_MASK                               0x4
#define _AT1CC1L_AT1CC13_POSN                               0x3
#define _AT1CC1L_AT1CC13_POSITION                           0x3
#define _AT1CC1L_AT1CC13_SIZE                               0x1
#define _AT1CC1L_AT1CC13_LENGTH                             0x1
#define _AT1CC1L_AT1CC13_MASK                               0x8
#define _AT1CC1L_AT1CC14_POSN                               0x4
#define _AT1CC1L_AT1CC14_POSITION                           0x4
#define _AT1CC1L_AT1CC14_SIZE                               0x1
#define _AT1CC1L_AT1CC14_LENGTH                             0x1
#define _AT1CC1L_AT1CC14_MASK                               0x10
#define _AT1CC1L_AT1CC15_POSN                               0x5
#define _AT1CC1L_AT1CC15_POSITION                           0x5
#define _AT1CC1L_AT1CC15_SIZE                               0x1
#define _AT1CC1L_AT1CC15_LENGTH                             0x1
#define _AT1CC1L_AT1CC15_MASK                               0x20
#define _AT1CC1L_AT1CC16_POSN                               0x6
#define _AT1CC1L_AT1CC16_POSITION                           0x6
#define _AT1CC1L_AT1CC16_SIZE                               0x1
#define _AT1CC1L_AT1CC16_LENGTH                             0x1
#define _AT1CC1L_AT1CC16_MASK                               0x40
#define _AT1CC1L_AT1CC17_POSN                               0x7
#define _AT1CC1L_AT1CC17_POSITION                           0x7
#define _AT1CC1L_AT1CC17_SIZE                               0x1
#define _AT1CC1L_AT1CC17_LENGTH                             0x1
#define _AT1CC1L_AT1CC17_MASK                               0x80
#define _AT1CC1L_CC10_POSN                                  0x0
#define _AT1CC1L_CC10_POSITION                              0x0
#define _AT1CC1L_CC10_SIZE                                  0x1
#define _AT1CC1L_CC10_LENGTH                                0x1
#define _AT1CC1L_CC10_MASK                                  0x1
#define _AT1CC1L_CC11_POSN                                  0x1
#define _AT1CC1L_CC11_POSITION                              0x1
#define _AT1CC1L_CC11_SIZE                                  0x1
#define _AT1CC1L_CC11_LENGTH                                0x1
#define _AT1CC1L_CC11_MASK                                  0x2
#define _AT1CC1L_CC12_POSN                                  0x2
#define _AT1CC1L_CC12_POSITION                              0x2
#define _AT1CC1L_CC12_SIZE                                  0x1
#define _AT1CC1L_CC12_LENGTH                                0x1
#define _AT1CC1L_CC12_MASK                                  0x4
#define _AT1CC1L_CC13_POSN                                  0x3
#define _AT1CC1L_CC13_POSITION                              0x3
#define _AT1CC1L_CC13_SIZE                                  0x1
#define _AT1CC1L_CC13_LENGTH                                0x1
#define _AT1CC1L_CC13_MASK                                  0x8
#define _AT1CC1L_CC14_POSN                                  0x4
#define _AT1CC1L_CC14_POSITION                              0x4
#define _AT1CC1L_CC14_SIZE                                  0x1
#define _AT1CC1L_CC14_LENGTH                                0x1
#define _AT1CC1L_CC14_MASK                                  0x10
#define _AT1CC1L_CC15_POSN                                  0x5
#define _AT1CC1L_CC15_POSITION                              0x5
#define _AT1CC1L_CC15_SIZE                                  0x1
#define _AT1CC1L_CC15_LENGTH                                0x1
#define _AT1CC1L_CC15_MASK                                  0x20
#define _AT1CC1L_CC16_POSN                                  0x6
#define _AT1CC1L_CC16_POSITION                              0x6
#define _AT1CC1L_CC16_SIZE                                  0x1
#define _AT1CC1L_CC16_LENGTH                                0x1
#define _AT1CC1L_CC16_MASK                                  0x40
#define _AT1CC1L_CC17_POSN                                  0x7
#define _AT1CC1L_CC17_POSITION                              0x7
#define _AT1CC1L_CC17_SIZE                                  0x1
#define _AT1CC1L_CC17_LENGTH                                0x1
#define _AT1CC1L_CC17_MASK                                  0x80

// Register: AT1CC1H
#define AT1CC1H AT1CC1H
extern volatile unsigned char           AT1CC1H             __at(0x890);
#ifndef _LIB_BUILD
asm("AT1CC1H equ 0890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC18                :1;
        unsigned AT1CC19                :1;
    };
    struct {
        unsigned CC18                   :1;
        unsigned CC19                   :1;
    };
} AT1CC1Hbits_t;
extern volatile AT1CC1Hbits_t AT1CC1Hbits __at(0x890);
// bitfield macros
#define _AT1CC1H_AT1CC18_POSN                               0x0
#define _AT1CC1H_AT1CC18_POSITION                           0x0
#define _AT1CC1H_AT1CC18_SIZE                               0x1
#define _AT1CC1H_AT1CC18_LENGTH                             0x1
#define _AT1CC1H_AT1CC18_MASK                               0x1
#define _AT1CC1H_AT1CC19_POSN                               0x1
#define _AT1CC1H_AT1CC19_POSITION                           0x1
#define _AT1CC1H_AT1CC19_SIZE                               0x1
#define _AT1CC1H_AT1CC19_LENGTH                             0x1
#define _AT1CC1H_AT1CC19_MASK                               0x2
#define _AT1CC1H_CC18_POSN                                  0x0
#define _AT1CC1H_CC18_POSITION                              0x0
#define _AT1CC1H_CC18_SIZE                                  0x1
#define _AT1CC1H_CC18_LENGTH                                0x1
#define _AT1CC1H_CC18_MASK                                  0x1
#define _AT1CC1H_CC19_POSN                                  0x1
#define _AT1CC1H_CC19_POSITION                              0x1
#define _AT1CC1H_CC19_SIZE                                  0x1
#define _AT1CC1H_CC19_LENGTH                                0x1
#define _AT1CC1H_CC19_MASK                                  0x2

// Register: AT1CCON1
#define AT1CCON1 AT1CCON1
extern volatile unsigned char           AT1CCON1            __at(0x891);
#ifndef _LIB_BUILD
asm("AT1CCON1 equ 0891h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC1MODE             :1;
        unsigned                        :2;
        unsigned AT1CAP1P               :1;
        unsigned AT1CC1POL              :1;
        unsigned                        :2;
        unsigned AT1CC1EN               :1;
    };
    struct {
        unsigned CC1MODE                :1;
        unsigned                        :2;
        unsigned CAP1P                  :1;
        unsigned CC1POL                 :1;
        unsigned                        :2;
        unsigned CC1EN                  :1;
    };
} AT1CCON1bits_t;
extern volatile AT1CCON1bits_t AT1CCON1bits __at(0x891);
// bitfield macros
#define _AT1CCON1_AT1CC1MODE_POSN                           0x0
#define _AT1CCON1_AT1CC1MODE_POSITION                       0x0
#define _AT1CCON1_AT1CC1MODE_SIZE                           0x1
#define _AT1CCON1_AT1CC1MODE_LENGTH                         0x1
#define _AT1CCON1_AT1CC1MODE_MASK                           0x1
#define _AT1CCON1_AT1CAP1P_POSN                             0x3
#define _AT1CCON1_AT1CAP1P_POSITION                         0x3
#define _AT1CCON1_AT1CAP1P_SIZE                             0x1
#define _AT1CCON1_AT1CAP1P_LENGTH                           0x1
#define _AT1CCON1_AT1CAP1P_MASK                             0x8
#define _AT1CCON1_AT1CC1POL_POSN                            0x4
#define _AT1CCON1_AT1CC1POL_POSITION                        0x4
#define _AT1CCON1_AT1CC1POL_SIZE                            0x1
#define _AT1CCON1_AT1CC1POL_LENGTH                          0x1
#define _AT1CCON1_AT1CC1POL_MASK                            0x10
#define _AT1CCON1_AT1CC1EN_POSN                             0x7
#define _AT1CCON1_AT1CC1EN_POSITION                         0x7
#define _AT1CCON1_AT1CC1EN_SIZE                             0x1
#define _AT1CCON1_AT1CC1EN_LENGTH                           0x1
#define _AT1CCON1_AT1CC1EN_MASK                             0x80
#define _AT1CCON1_CC1MODE_POSN                              0x0
#define _AT1CCON1_CC1MODE_POSITION                          0x0
#define _AT1CCON1_CC1MODE_SIZE                              0x1
#define _AT1CCON1_CC1MODE_LENGTH                            0x1
#define _AT1CCON1_CC1MODE_MASK                              0x1
#define _AT1CCON1_CAP1P_POSN                                0x3
#define _AT1CCON1_CAP1P_POSITION                            0x3
#define _AT1CCON1_CAP1P_SIZE                                0x1
#define _AT1CCON1_CAP1P_LENGTH                              0x1
#define _AT1CCON1_CAP1P_MASK                                0x8
#define _AT1CCON1_CC1POL_POSN                               0x4
#define _AT1CCON1_CC1POL_POSITION                           0x4
#define _AT1CCON1_CC1POL_SIZE                               0x1
#define _AT1CCON1_CC1POL_LENGTH                             0x1
#define _AT1CCON1_CC1POL_MASK                               0x10
#define _AT1CCON1_CC1EN_POSN                                0x7
#define _AT1CCON1_CC1EN_POSITION                            0x7
#define _AT1CCON1_CC1EN_SIZE                                0x1
#define _AT1CCON1_CC1EN_LENGTH                              0x1
#define _AT1CCON1_CC1EN_MASK                                0x80

// Register: AT1CSEL2
#define AT1CSEL2 AT1CSEL2
extern volatile unsigned char           AT1CSEL2            __at(0x892);
#ifndef _LIB_BUILD
asm("AT1CSEL2 equ 0892h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CP2S                :3;
    };
    struct {
        unsigned AT1CP2S0               :1;
        unsigned AT1CP2S1               :1;
        unsigned AT1CP2S2               :1;
    };
    struct {
        unsigned CP2S                   :3;
    };
    struct {
        unsigned CP2S0                  :1;
        unsigned CP2S1                  :1;
        unsigned CP2S2                  :1;
    };
} AT1CSEL2bits_t;
extern volatile AT1CSEL2bits_t AT1CSEL2bits __at(0x892);
// bitfield macros
#define _AT1CSEL2_AT1CP2S_POSN                              0x0
#define _AT1CSEL2_AT1CP2S_POSITION                          0x0
#define _AT1CSEL2_AT1CP2S_SIZE                              0x3
#define _AT1CSEL2_AT1CP2S_LENGTH                            0x3
#define _AT1CSEL2_AT1CP2S_MASK                              0x7
#define _AT1CSEL2_AT1CP2S0_POSN                             0x0
#define _AT1CSEL2_AT1CP2S0_POSITION                         0x0
#define _AT1CSEL2_AT1CP2S0_SIZE                             0x1
#define _AT1CSEL2_AT1CP2S0_LENGTH                           0x1
#define _AT1CSEL2_AT1CP2S0_MASK                             0x1
#define _AT1CSEL2_AT1CP2S1_POSN                             0x1
#define _AT1CSEL2_AT1CP2S1_POSITION                         0x1
#define _AT1CSEL2_AT1CP2S1_SIZE                             0x1
#define _AT1CSEL2_AT1CP2S1_LENGTH                           0x1
#define _AT1CSEL2_AT1CP2S1_MASK                             0x2
#define _AT1CSEL2_AT1CP2S2_POSN                             0x2
#define _AT1CSEL2_AT1CP2S2_POSITION                         0x2
#define _AT1CSEL2_AT1CP2S2_SIZE                             0x1
#define _AT1CSEL2_AT1CP2S2_LENGTH                           0x1
#define _AT1CSEL2_AT1CP2S2_MASK                             0x4
#define _AT1CSEL2_CP2S_POSN                                 0x0
#define _AT1CSEL2_CP2S_POSITION                             0x0
#define _AT1CSEL2_CP2S_SIZE                                 0x3
#define _AT1CSEL2_CP2S_LENGTH                               0x3
#define _AT1CSEL2_CP2S_MASK                                 0x7
#define _AT1CSEL2_CP2S0_POSN                                0x0
#define _AT1CSEL2_CP2S0_POSITION                            0x0
#define _AT1CSEL2_CP2S0_SIZE                                0x1
#define _AT1CSEL2_CP2S0_LENGTH                              0x1
#define _AT1CSEL2_CP2S0_MASK                                0x1
#define _AT1CSEL2_CP2S1_POSN                                0x1
#define _AT1CSEL2_CP2S1_POSITION                            0x1
#define _AT1CSEL2_CP2S1_SIZE                                0x1
#define _AT1CSEL2_CP2S1_LENGTH                              0x1
#define _AT1CSEL2_CP2S1_MASK                                0x2
#define _AT1CSEL2_CP2S2_POSN                                0x2
#define _AT1CSEL2_CP2S2_POSITION                            0x2
#define _AT1CSEL2_CP2S2_SIZE                                0x1
#define _AT1CSEL2_CP2S2_LENGTH                              0x1
#define _AT1CSEL2_CP2S2_MASK                                0x4

// Register: AT1CC2
#define AT1CC2 AT1CC2
extern volatile unsigned short          AT1CC2              __at(0x893);
#ifndef _LIB_BUILD
asm("AT1CC2 equ 0893h");
#endif

// Register: AT1CC2L
#define AT1CC2L AT1CC2L
extern volatile unsigned char           AT1CC2L             __at(0x893);
#ifndef _LIB_BUILD
asm("AT1CC2L equ 0893h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC20                :1;
        unsigned AT1CC21                :1;
        unsigned AT1CC22                :1;
        unsigned AT1CC23                :1;
        unsigned AT1CC24                :1;
        unsigned AT1CC25                :1;
        unsigned AT1CC26                :1;
        unsigned AT1CC27                :1;
    };
    struct {
        unsigned CC20                   :1;
        unsigned CC21                   :1;
        unsigned CC22                   :1;
        unsigned CC13                   :1;
        unsigned CC24                   :1;
        unsigned CCW5                   :1;
        unsigned CC26                   :1;
        unsigned CC27                   :1;
    };
} AT1CC2Lbits_t;
extern volatile AT1CC2Lbits_t AT1CC2Lbits __at(0x893);
// bitfield macros
#define _AT1CC2L_AT1CC20_POSN                               0x0
#define _AT1CC2L_AT1CC20_POSITION                           0x0
#define _AT1CC2L_AT1CC20_SIZE                               0x1
#define _AT1CC2L_AT1CC20_LENGTH                             0x1
#define _AT1CC2L_AT1CC20_MASK                               0x1
#define _AT1CC2L_AT1CC21_POSN                               0x1
#define _AT1CC2L_AT1CC21_POSITION                           0x1
#define _AT1CC2L_AT1CC21_SIZE                               0x1
#define _AT1CC2L_AT1CC21_LENGTH                             0x1
#define _AT1CC2L_AT1CC21_MASK                               0x2
#define _AT1CC2L_AT1CC22_POSN                               0x2
#define _AT1CC2L_AT1CC22_POSITION                           0x2
#define _AT1CC2L_AT1CC22_SIZE                               0x1
#define _AT1CC2L_AT1CC22_LENGTH                             0x1
#define _AT1CC2L_AT1CC22_MASK                               0x4
#define _AT1CC2L_AT1CC23_POSN                               0x3
#define _AT1CC2L_AT1CC23_POSITION                           0x3
#define _AT1CC2L_AT1CC23_SIZE                               0x1
#define _AT1CC2L_AT1CC23_LENGTH                             0x1
#define _AT1CC2L_AT1CC23_MASK                               0x8
#define _AT1CC2L_AT1CC24_POSN                               0x4
#define _AT1CC2L_AT1CC24_POSITION                           0x4
#define _AT1CC2L_AT1CC24_SIZE                               0x1
#define _AT1CC2L_AT1CC24_LENGTH                             0x1
#define _AT1CC2L_AT1CC24_MASK                               0x10
#define _AT1CC2L_AT1CC25_POSN                               0x5
#define _AT1CC2L_AT1CC25_POSITION                           0x5
#define _AT1CC2L_AT1CC25_SIZE                               0x1
#define _AT1CC2L_AT1CC25_LENGTH                             0x1
#define _AT1CC2L_AT1CC25_MASK                               0x20
#define _AT1CC2L_AT1CC26_POSN                               0x6
#define _AT1CC2L_AT1CC26_POSITION                           0x6
#define _AT1CC2L_AT1CC26_SIZE                               0x1
#define _AT1CC2L_AT1CC26_LENGTH                             0x1
#define _AT1CC2L_AT1CC26_MASK                               0x40
#define _AT1CC2L_AT1CC27_POSN                               0x7
#define _AT1CC2L_AT1CC27_POSITION                           0x7
#define _AT1CC2L_AT1CC27_SIZE                               0x1
#define _AT1CC2L_AT1CC27_LENGTH                             0x1
#define _AT1CC2L_AT1CC27_MASK                               0x80
#define _AT1CC2L_CC20_POSN                                  0x0
#define _AT1CC2L_CC20_POSITION                              0x0
#define _AT1CC2L_CC20_SIZE                                  0x1
#define _AT1CC2L_CC20_LENGTH                                0x1
#define _AT1CC2L_CC20_MASK                                  0x1
#define _AT1CC2L_CC21_POSN                                  0x1
#define _AT1CC2L_CC21_POSITION                              0x1
#define _AT1CC2L_CC21_SIZE                                  0x1
#define _AT1CC2L_CC21_LENGTH                                0x1
#define _AT1CC2L_CC21_MASK                                  0x2
#define _AT1CC2L_CC22_POSN                                  0x2
#define _AT1CC2L_CC22_POSITION                              0x2
#define _AT1CC2L_CC22_SIZE                                  0x1
#define _AT1CC2L_CC22_LENGTH                                0x1
#define _AT1CC2L_CC22_MASK                                  0x4
#define _AT1CC2L_CC13_POSN                                  0x3
#define _AT1CC2L_CC13_POSITION                              0x3
#define _AT1CC2L_CC13_SIZE                                  0x1
#define _AT1CC2L_CC13_LENGTH                                0x1
#define _AT1CC2L_CC13_MASK                                  0x8
#define _AT1CC2L_CC24_POSN                                  0x4
#define _AT1CC2L_CC24_POSITION                              0x4
#define _AT1CC2L_CC24_SIZE                                  0x1
#define _AT1CC2L_CC24_LENGTH                                0x1
#define _AT1CC2L_CC24_MASK                                  0x10
#define _AT1CC2L_CCW5_POSN                                  0x5
#define _AT1CC2L_CCW5_POSITION                              0x5
#define _AT1CC2L_CCW5_SIZE                                  0x1
#define _AT1CC2L_CCW5_LENGTH                                0x1
#define _AT1CC2L_CCW5_MASK                                  0x20
#define _AT1CC2L_CC26_POSN                                  0x6
#define _AT1CC2L_CC26_POSITION                              0x6
#define _AT1CC2L_CC26_SIZE                                  0x1
#define _AT1CC2L_CC26_LENGTH                                0x1
#define _AT1CC2L_CC26_MASK                                  0x40
#define _AT1CC2L_CC27_POSN                                  0x7
#define _AT1CC2L_CC27_POSITION                              0x7
#define _AT1CC2L_CC27_SIZE                                  0x1
#define _AT1CC2L_CC27_LENGTH                                0x1
#define _AT1CC2L_CC27_MASK                                  0x80

// Register: AT1CC2H
#define AT1CC2H AT1CC2H
extern volatile unsigned char           AT1CC2H             __at(0x894);
#ifndef _LIB_BUILD
asm("AT1CC2H equ 0894h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC28                :1;
        unsigned AT1CC29                :1;
    };
    struct {
        unsigned CC28                   :1;
        unsigned CC29                   :1;
    };
} AT1CC2Hbits_t;
extern volatile AT1CC2Hbits_t AT1CC2Hbits __at(0x894);
// bitfield macros
#define _AT1CC2H_AT1CC28_POSN                               0x0
#define _AT1CC2H_AT1CC28_POSITION                           0x0
#define _AT1CC2H_AT1CC28_SIZE                               0x1
#define _AT1CC2H_AT1CC28_LENGTH                             0x1
#define _AT1CC2H_AT1CC28_MASK                               0x1
#define _AT1CC2H_AT1CC29_POSN                               0x1
#define _AT1CC2H_AT1CC29_POSITION                           0x1
#define _AT1CC2H_AT1CC29_SIZE                               0x1
#define _AT1CC2H_AT1CC29_LENGTH                             0x1
#define _AT1CC2H_AT1CC29_MASK                               0x2
#define _AT1CC2H_CC28_POSN                                  0x0
#define _AT1CC2H_CC28_POSITION                              0x0
#define _AT1CC2H_CC28_SIZE                                  0x1
#define _AT1CC2H_CC28_LENGTH                                0x1
#define _AT1CC2H_CC28_MASK                                  0x1
#define _AT1CC2H_CC29_POSN                                  0x1
#define _AT1CC2H_CC29_POSITION                              0x1
#define _AT1CC2H_CC29_SIZE                                  0x1
#define _AT1CC2H_CC29_LENGTH                                0x1
#define _AT1CC2H_CC29_MASK                                  0x2

// Register: AT1CCON2
#define AT1CCON2 AT1CCON2
extern volatile unsigned char           AT1CCON2            __at(0x895);
#ifndef _LIB_BUILD
asm("AT1CCON2 equ 0895h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC2MODE             :1;
        unsigned                        :2;
        unsigned AT1CAP2P               :1;
        unsigned AT1CC2POL              :1;
        unsigned                        :2;
        unsigned AT1CC2EN               :1;
    };
    struct {
        unsigned CC2MODE                :1;
        unsigned                        :2;
        unsigned CAP2P                  :1;
        unsigned CC2POL                 :1;
        unsigned                        :2;
        unsigned CC2EN                  :1;
    };
} AT1CCON2bits_t;
extern volatile AT1CCON2bits_t AT1CCON2bits __at(0x895);
// bitfield macros
#define _AT1CCON2_AT1CC2MODE_POSN                           0x0
#define _AT1CCON2_AT1CC2MODE_POSITION                       0x0
#define _AT1CCON2_AT1CC2MODE_SIZE                           0x1
#define _AT1CCON2_AT1CC2MODE_LENGTH                         0x1
#define _AT1CCON2_AT1CC2MODE_MASK                           0x1
#define _AT1CCON2_AT1CAP2P_POSN                             0x3
#define _AT1CCON2_AT1CAP2P_POSITION                         0x3
#define _AT1CCON2_AT1CAP2P_SIZE                             0x1
#define _AT1CCON2_AT1CAP2P_LENGTH                           0x1
#define _AT1CCON2_AT1CAP2P_MASK                             0x8
#define _AT1CCON2_AT1CC2POL_POSN                            0x4
#define _AT1CCON2_AT1CC2POL_POSITION                        0x4
#define _AT1CCON2_AT1CC2POL_SIZE                            0x1
#define _AT1CCON2_AT1CC2POL_LENGTH                          0x1
#define _AT1CCON2_AT1CC2POL_MASK                            0x10
#define _AT1CCON2_AT1CC2EN_POSN                             0x7
#define _AT1CCON2_AT1CC2EN_POSITION                         0x7
#define _AT1CCON2_AT1CC2EN_SIZE                             0x1
#define _AT1CCON2_AT1CC2EN_LENGTH                           0x1
#define _AT1CCON2_AT1CC2EN_MASK                             0x80
#define _AT1CCON2_CC2MODE_POSN                              0x0
#define _AT1CCON2_CC2MODE_POSITION                          0x0
#define _AT1CCON2_CC2MODE_SIZE                              0x1
#define _AT1CCON2_CC2MODE_LENGTH                            0x1
#define _AT1CCON2_CC2MODE_MASK                              0x1
#define _AT1CCON2_CAP2P_POSN                                0x3
#define _AT1CCON2_CAP2P_POSITION                            0x3
#define _AT1CCON2_CAP2P_SIZE                                0x1
#define _AT1CCON2_CAP2P_LENGTH                              0x1
#define _AT1CCON2_CAP2P_MASK                                0x8
#define _AT1CCON2_CC2POL_POSN                               0x4
#define _AT1CCON2_CC2POL_POSITION                           0x4
#define _AT1CCON2_CC2POL_SIZE                               0x1
#define _AT1CCON2_CC2POL_LENGTH                             0x1
#define _AT1CCON2_CC2POL_MASK                               0x10
#define _AT1CCON2_CC2EN_POSN                                0x7
#define _AT1CCON2_CC2EN_POSITION                            0x7
#define _AT1CCON2_CC2EN_SIZE                                0x1
#define _AT1CCON2_CC2EN_LENGTH                              0x1
#define _AT1CCON2_CC2EN_MASK                                0x80

// Register: AT1CSEL3
#define AT1CSEL3 AT1CSEL3
extern volatile unsigned char           AT1CSEL3            __at(0x896);
#ifndef _LIB_BUILD
asm("AT1CSEL3 equ 0896h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CP3S                :3;
    };
    struct {
        unsigned AT1CP3S0               :1;
        unsigned AT1CP3S1               :1;
        unsigned AT1CP3S2               :1;
    };
    struct {
        unsigned CP3S                   :3;
    };
    struct {
        unsigned CP3S0                  :1;
        unsigned CP3S1                  :1;
        unsigned CP3S2                  :1;
    };
} AT1CSEL3bits_t;
extern volatile AT1CSEL3bits_t AT1CSEL3bits __at(0x896);
// bitfield macros
#define _AT1CSEL3_AT1CP3S_POSN                              0x0
#define _AT1CSEL3_AT1CP3S_POSITION                          0x0
#define _AT1CSEL3_AT1CP3S_SIZE                              0x3
#define _AT1CSEL3_AT1CP3S_LENGTH                            0x3
#define _AT1CSEL3_AT1CP3S_MASK                              0x7
#define _AT1CSEL3_AT1CP3S0_POSN                             0x0
#define _AT1CSEL3_AT1CP3S0_POSITION                         0x0
#define _AT1CSEL3_AT1CP3S0_SIZE                             0x1
#define _AT1CSEL3_AT1CP3S0_LENGTH                           0x1
#define _AT1CSEL3_AT1CP3S0_MASK                             0x1
#define _AT1CSEL3_AT1CP3S1_POSN                             0x1
#define _AT1CSEL3_AT1CP3S1_POSITION                         0x1
#define _AT1CSEL3_AT1CP3S1_SIZE                             0x1
#define _AT1CSEL3_AT1CP3S1_LENGTH                           0x1
#define _AT1CSEL3_AT1CP3S1_MASK                             0x2
#define _AT1CSEL3_AT1CP3S2_POSN                             0x2
#define _AT1CSEL3_AT1CP3S2_POSITION                         0x2
#define _AT1CSEL3_AT1CP3S2_SIZE                             0x1
#define _AT1CSEL3_AT1CP3S2_LENGTH                           0x1
#define _AT1CSEL3_AT1CP3S2_MASK                             0x4
#define _AT1CSEL3_CP3S_POSN                                 0x0
#define _AT1CSEL3_CP3S_POSITION                             0x0
#define _AT1CSEL3_CP3S_SIZE                                 0x3
#define _AT1CSEL3_CP3S_LENGTH                               0x3
#define _AT1CSEL3_CP3S_MASK                                 0x7
#define _AT1CSEL3_CP3S0_POSN                                0x0
#define _AT1CSEL3_CP3S0_POSITION                            0x0
#define _AT1CSEL3_CP3S0_SIZE                                0x1
#define _AT1CSEL3_CP3S0_LENGTH                              0x1
#define _AT1CSEL3_CP3S0_MASK                                0x1
#define _AT1CSEL3_CP3S1_POSN                                0x1
#define _AT1CSEL3_CP3S1_POSITION                            0x1
#define _AT1CSEL3_CP3S1_SIZE                                0x1
#define _AT1CSEL3_CP3S1_LENGTH                              0x1
#define _AT1CSEL3_CP3S1_MASK                                0x2
#define _AT1CSEL3_CP3S2_POSN                                0x2
#define _AT1CSEL3_CP3S2_POSITION                            0x2
#define _AT1CSEL3_CP3S2_SIZE                                0x1
#define _AT1CSEL3_CP3S2_LENGTH                              0x1
#define _AT1CSEL3_CP3S2_MASK                                0x4

// Register: AT1CC3
#define AT1CC3 AT1CC3
extern volatile unsigned short          AT1CC3              __at(0x897);
#ifndef _LIB_BUILD
asm("AT1CC3 equ 0897h");
#endif

// Register: AT1CC3L
#define AT1CC3L AT1CC3L
extern volatile unsigned char           AT1CC3L             __at(0x897);
#ifndef _LIB_BUILD
asm("AT1CC3L equ 0897h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC30                :1;
        unsigned AT1CC31                :1;
        unsigned AT1CC32                :1;
        unsigned AT1CC33                :1;
        unsigned AT1CC34                :1;
        unsigned AT1CC35                :1;
        unsigned AT1CC36                :1;
        unsigned AT1CC37                :1;
    };
    struct {
        unsigned CC30                   :1;
        unsigned CC31                   :1;
        unsigned CC32                   :1;
        unsigned CC33                   :1;
        unsigned CC34                   :1;
        unsigned CC35                   :1;
        unsigned CC36                   :1;
        unsigned CC37                   :1;
    };
} AT1CC3Lbits_t;
extern volatile AT1CC3Lbits_t AT1CC3Lbits __at(0x897);
// bitfield macros
#define _AT1CC3L_AT1CC30_POSN                               0x0
#define _AT1CC3L_AT1CC30_POSITION                           0x0
#define _AT1CC3L_AT1CC30_SIZE                               0x1
#define _AT1CC3L_AT1CC30_LENGTH                             0x1
#define _AT1CC3L_AT1CC30_MASK                               0x1
#define _AT1CC3L_AT1CC31_POSN                               0x1
#define _AT1CC3L_AT1CC31_POSITION                           0x1
#define _AT1CC3L_AT1CC31_SIZE                               0x1
#define _AT1CC3L_AT1CC31_LENGTH                             0x1
#define _AT1CC3L_AT1CC31_MASK                               0x2
#define _AT1CC3L_AT1CC32_POSN                               0x2
#define _AT1CC3L_AT1CC32_POSITION                           0x2
#define _AT1CC3L_AT1CC32_SIZE                               0x1
#define _AT1CC3L_AT1CC32_LENGTH                             0x1
#define _AT1CC3L_AT1CC32_MASK                               0x4
#define _AT1CC3L_AT1CC33_POSN                               0x3
#define _AT1CC3L_AT1CC33_POSITION                           0x3
#define _AT1CC3L_AT1CC33_SIZE                               0x1
#define _AT1CC3L_AT1CC33_LENGTH                             0x1
#define _AT1CC3L_AT1CC33_MASK                               0x8
#define _AT1CC3L_AT1CC34_POSN                               0x4
#define _AT1CC3L_AT1CC34_POSITION                           0x4
#define _AT1CC3L_AT1CC34_SIZE                               0x1
#define _AT1CC3L_AT1CC34_LENGTH                             0x1
#define _AT1CC3L_AT1CC34_MASK                               0x10
#define _AT1CC3L_AT1CC35_POSN                               0x5
#define _AT1CC3L_AT1CC35_POSITION                           0x5
#define _AT1CC3L_AT1CC35_SIZE                               0x1
#define _AT1CC3L_AT1CC35_LENGTH                             0x1
#define _AT1CC3L_AT1CC35_MASK                               0x20
#define _AT1CC3L_AT1CC36_POSN                               0x6
#define _AT1CC3L_AT1CC36_POSITION                           0x6
#define _AT1CC3L_AT1CC36_SIZE                               0x1
#define _AT1CC3L_AT1CC36_LENGTH                             0x1
#define _AT1CC3L_AT1CC36_MASK                               0x40
#define _AT1CC3L_AT1CC37_POSN                               0x7
#define _AT1CC3L_AT1CC37_POSITION                           0x7
#define _AT1CC3L_AT1CC37_SIZE                               0x1
#define _AT1CC3L_AT1CC37_LENGTH                             0x1
#define _AT1CC3L_AT1CC37_MASK                               0x80
#define _AT1CC3L_CC30_POSN                                  0x0
#define _AT1CC3L_CC30_POSITION                              0x0
#define _AT1CC3L_CC30_SIZE                                  0x1
#define _AT1CC3L_CC30_LENGTH                                0x1
#define _AT1CC3L_CC30_MASK                                  0x1
#define _AT1CC3L_CC31_POSN                                  0x1
#define _AT1CC3L_CC31_POSITION                              0x1
#define _AT1CC3L_CC31_SIZE                                  0x1
#define _AT1CC3L_CC31_LENGTH                                0x1
#define _AT1CC3L_CC31_MASK                                  0x2
#define _AT1CC3L_CC32_POSN                                  0x2
#define _AT1CC3L_CC32_POSITION                              0x2
#define _AT1CC3L_CC32_SIZE                                  0x1
#define _AT1CC3L_CC32_LENGTH                                0x1
#define _AT1CC3L_CC32_MASK                                  0x4
#define _AT1CC3L_CC33_POSN                                  0x3
#define _AT1CC3L_CC33_POSITION                              0x3
#define _AT1CC3L_CC33_SIZE                                  0x1
#define _AT1CC3L_CC33_LENGTH                                0x1
#define _AT1CC3L_CC33_MASK                                  0x8
#define _AT1CC3L_CC34_POSN                                  0x4
#define _AT1CC3L_CC34_POSITION                              0x4
#define _AT1CC3L_CC34_SIZE                                  0x1
#define _AT1CC3L_CC34_LENGTH                                0x1
#define _AT1CC3L_CC34_MASK                                  0x10
#define _AT1CC3L_CC35_POSN                                  0x5
#define _AT1CC3L_CC35_POSITION                              0x5
#define _AT1CC3L_CC35_SIZE                                  0x1
#define _AT1CC3L_CC35_LENGTH                                0x1
#define _AT1CC3L_CC35_MASK                                  0x20
#define _AT1CC3L_CC36_POSN                                  0x6
#define _AT1CC3L_CC36_POSITION                              0x6
#define _AT1CC3L_CC36_SIZE                                  0x1
#define _AT1CC3L_CC36_LENGTH                                0x1
#define _AT1CC3L_CC36_MASK                                  0x40
#define _AT1CC3L_CC37_POSN                                  0x7
#define _AT1CC3L_CC37_POSITION                              0x7
#define _AT1CC3L_CC37_SIZE                                  0x1
#define _AT1CC3L_CC37_LENGTH                                0x1
#define _AT1CC3L_CC37_MASK                                  0x80

// Register: AT1CC3H
#define AT1CC3H AT1CC3H
extern volatile unsigned char           AT1CC3H             __at(0x898);
#ifndef _LIB_BUILD
asm("AT1CC3H equ 0898h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC38                :1;
        unsigned AT1CC39                :1;
    };
    struct {
        unsigned CC38                   :1;
        unsigned CC39                   :1;
    };
} AT1CC3Hbits_t;
extern volatile AT1CC3Hbits_t AT1CC3Hbits __at(0x898);
// bitfield macros
#define _AT1CC3H_AT1CC38_POSN                               0x0
#define _AT1CC3H_AT1CC38_POSITION                           0x0
#define _AT1CC3H_AT1CC38_SIZE                               0x1
#define _AT1CC3H_AT1CC38_LENGTH                             0x1
#define _AT1CC3H_AT1CC38_MASK                               0x1
#define _AT1CC3H_AT1CC39_POSN                               0x1
#define _AT1CC3H_AT1CC39_POSITION                           0x1
#define _AT1CC3H_AT1CC39_SIZE                               0x1
#define _AT1CC3H_AT1CC39_LENGTH                             0x1
#define _AT1CC3H_AT1CC39_MASK                               0x2
#define _AT1CC3H_CC38_POSN                                  0x0
#define _AT1CC3H_CC38_POSITION                              0x0
#define _AT1CC3H_CC38_SIZE                                  0x1
#define _AT1CC3H_CC38_LENGTH                                0x1
#define _AT1CC3H_CC38_MASK                                  0x1
#define _AT1CC3H_CC39_POSN                                  0x1
#define _AT1CC3H_CC39_POSITION                              0x1
#define _AT1CC3H_CC39_SIZE                                  0x1
#define _AT1CC3H_CC39_LENGTH                                0x1
#define _AT1CC3H_CC39_MASK                                  0x2

// Register: AT1CCON3
#define AT1CCON3 AT1CCON3
extern volatile unsigned char           AT1CCON3            __at(0x899);
#ifndef _LIB_BUILD
asm("AT1CCON3 equ 0899h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AT1CC3MODE             :1;
        unsigned                        :2;
        unsigned AT1CAP3P               :1;
        unsigned AT1CC3POL              :1;
        unsigned                        :2;
        unsigned AT1CC3EN               :1;
    };
    struct {
        unsigned CC3MODE                :1;
        unsigned                        :2;
        unsigned CAP3P                  :1;
        unsigned CC3POL                 :1;
        unsigned                        :2;
        unsigned CC3EN                  :1;
    };
} AT1CCON3bits_t;
extern volatile AT1CCON3bits_t AT1CCON3bits __at(0x899);
// bitfield macros
#define _AT1CCON3_AT1CC3MODE_POSN                           0x0
#define _AT1CCON3_AT1CC3MODE_POSITION                       0x0
#define _AT1CCON3_AT1CC3MODE_SIZE                           0x1
#define _AT1CCON3_AT1CC3MODE_LENGTH                         0x1
#define _AT1CCON3_AT1CC3MODE_MASK                           0x1
#define _AT1CCON3_AT1CAP3P_POSN                             0x3
#define _AT1CCON3_AT1CAP3P_POSITION                         0x3
#define _AT1CCON3_AT1CAP3P_SIZE                             0x1
#define _AT1CCON3_AT1CAP3P_LENGTH                           0x1
#define _AT1CCON3_AT1CAP3P_MASK                             0x8
#define _AT1CCON3_AT1CC3POL_POSN                            0x4
#define _AT1CCON3_AT1CC3POL_POSITION                        0x4
#define _AT1CCON3_AT1CC3POL_SIZE                            0x1
#define _AT1CCON3_AT1CC3POL_LENGTH                          0x1
#define _AT1CCON3_AT1CC3POL_MASK                            0x10
#define _AT1CCON3_AT1CC3EN_POSN                             0x7
#define _AT1CCON3_AT1CC3EN_POSITION                         0x7
#define _AT1CCON3_AT1CC3EN_SIZE                             0x1
#define _AT1CCON3_AT1CC3EN_LENGTH                           0x1
#define _AT1CCON3_AT1CC3EN_MASK                             0x80
#define _AT1CCON3_CC3MODE_POSN                              0x0
#define _AT1CCON3_CC3MODE_POSITION                          0x0
#define _AT1CCON3_CC3MODE_SIZE                              0x1
#define _AT1CCON3_CC3MODE_LENGTH                            0x1
#define _AT1CCON3_CC3MODE_MASK                              0x1
#define _AT1CCON3_CAP3P_POSN                                0x3
#define _AT1CCON3_CAP3P_POSITION                            0x3
#define _AT1CCON3_CAP3P_SIZE                                0x1
#define _AT1CCON3_CAP3P_LENGTH                              0x1
#define _AT1CCON3_CAP3P_MASK                                0x8
#define _AT1CCON3_CC3POL_POSN                               0x4
#define _AT1CCON3_CC3POL_POSITION                           0x4
#define _AT1CCON3_CC3POL_SIZE                               0x1
#define _AT1CCON3_CC3POL_LENGTH                             0x1
#define _AT1CCON3_CC3POL_MASK                               0x10
#define _AT1CCON3_CC3EN_POSN                                0x7
#define _AT1CCON3_CC3EN_POSITION                            0x7
#define _AT1CCON3_CC3EN_SIZE                                0x1
#define _AT1CCON3_CC3EN_LENGTH                              0x1
#define _AT1CCON3_CC3EN_MASK                                0x80

// Register: SMT1TMR
#define SMT1TMR SMT1TMR
#ifndef __CCI__
extern volatile __uint24                SMT1TMR             __at(0xD8C);
#endif
#ifndef _LIB_BUILD
asm("SMT1TMR equ 0D8Ch");
#endif

// Register: SMT1TMRL
#define SMT1TMRL SMT1TMRL
extern volatile unsigned char           SMT1TMRL            __at(0xD8C);
#ifndef _LIB_BUILD
asm("SMT1TMRL equ 0D8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR0               :1;
        unsigned SMT1TMR1               :1;
        unsigned SMT1TMR2               :1;
        unsigned SMT1TMR3               :1;
        unsigned SMT1TMR4               :1;
        unsigned SMT1TMR5               :1;
        unsigned SMT1TMR6               :1;
        unsigned SMT1TMR7               :1;
    };
} SMT1TMRLbits_t;
extern volatile SMT1TMRLbits_t SMT1TMRLbits __at(0xD8C);
// bitfield macros
#define _SMT1TMRL_SMT1TMR_POSN                              0x0
#define _SMT1TMRL_SMT1TMR_POSITION                          0x0
#define _SMT1TMRL_SMT1TMR_SIZE                              0x8
#define _SMT1TMRL_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRL_SMT1TMR_MASK                              0xFF
#define _SMT1TMRL_SMT1TMR0_POSN                             0x0
#define _SMT1TMRL_SMT1TMR0_POSITION                         0x0
#define _SMT1TMRL_SMT1TMR0_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR0_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR0_MASK                             0x1
#define _SMT1TMRL_SMT1TMR1_POSN                             0x1
#define _SMT1TMRL_SMT1TMR1_POSITION                         0x1
#define _SMT1TMRL_SMT1TMR1_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR1_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR1_MASK                             0x2
#define _SMT1TMRL_SMT1TMR2_POSN                             0x2
#define _SMT1TMRL_SMT1TMR2_POSITION                         0x2
#define _SMT1TMRL_SMT1TMR2_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR2_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR2_MASK                             0x4
#define _SMT1TMRL_SMT1TMR3_POSN                             0x3
#define _SMT1TMRL_SMT1TMR3_POSITION                         0x3
#define _SMT1TMRL_SMT1TMR3_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR3_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR3_MASK                             0x8
#define _SMT1TMRL_SMT1TMR4_POSN                             0x4
#define _SMT1TMRL_SMT1TMR4_POSITION                         0x4
#define _SMT1TMRL_SMT1TMR4_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR4_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR4_MASK                             0x10
#define _SMT1TMRL_SMT1TMR5_POSN                             0x5
#define _SMT1TMRL_SMT1TMR5_POSITION                         0x5
#define _SMT1TMRL_SMT1TMR5_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR5_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR5_MASK                             0x20
#define _SMT1TMRL_SMT1TMR6_POSN                             0x6
#define _SMT1TMRL_SMT1TMR6_POSITION                         0x6
#define _SMT1TMRL_SMT1TMR6_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR6_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR6_MASK                             0x40
#define _SMT1TMRL_SMT1TMR7_POSN                             0x7
#define _SMT1TMRL_SMT1TMR7_POSITION                         0x7
#define _SMT1TMRL_SMT1TMR7_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR7_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR7_MASK                             0x80

// Register: SMT1TMRH
#define SMT1TMRH SMT1TMRH
extern volatile unsigned char           SMT1TMRH            __at(0xD8D);
#ifndef _LIB_BUILD
asm("SMT1TMRH equ 0D8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR8               :1;
        unsigned SMT1TMR9               :1;
        unsigned SMT1TMR10              :1;
        unsigned SMT1TMR11              :1;
        unsigned SMT1TMR12              :1;
        unsigned SMT1TMR13              :1;
        unsigned SMT1TMR14              :1;
        unsigned SMT1TMR15              :1;
    };
} SMT1TMRHbits_t;
extern volatile SMT1TMRHbits_t SMT1TMRHbits __at(0xD8D);
// bitfield macros
#define _SMT1TMRH_SMT1TMR_POSN                              0x0
#define _SMT1TMRH_SMT1TMR_POSITION                          0x0
#define _SMT1TMRH_SMT1TMR_SIZE                              0x8
#define _SMT1TMRH_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRH_SMT1TMR_MASK                              0xFF
#define _SMT1TMRH_SMT1TMR8_POSN                             0x0
#define _SMT1TMRH_SMT1TMR8_POSITION                         0x0
#define _SMT1TMRH_SMT1TMR8_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR8_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR8_MASK                             0x1
#define _SMT1TMRH_SMT1TMR9_POSN                             0x1
#define _SMT1TMRH_SMT1TMR9_POSITION                         0x1
#define _SMT1TMRH_SMT1TMR9_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR9_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR9_MASK                             0x2
#define _SMT1TMRH_SMT1TMR10_POSN                            0x2
#define _SMT1TMRH_SMT1TMR10_POSITION                        0x2
#define _SMT1TMRH_SMT1TMR10_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR10_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR10_MASK                            0x4
#define _SMT1TMRH_SMT1TMR11_POSN                            0x3
#define _SMT1TMRH_SMT1TMR11_POSITION                        0x3
#define _SMT1TMRH_SMT1TMR11_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR11_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR11_MASK                            0x8
#define _SMT1TMRH_SMT1TMR12_POSN                            0x4
#define _SMT1TMRH_SMT1TMR12_POSITION                        0x4
#define _SMT1TMRH_SMT1TMR12_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR12_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR12_MASK                            0x10
#define _SMT1TMRH_SMT1TMR13_POSN                            0x5
#define _SMT1TMRH_SMT1TMR13_POSITION                        0x5
#define _SMT1TMRH_SMT1TMR13_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR13_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR13_MASK                            0x20
#define _SMT1TMRH_SMT1TMR14_POSN                            0x6
#define _SMT1TMRH_SMT1TMR14_POSITION                        0x6
#define _SMT1TMRH_SMT1TMR14_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR14_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR14_MASK                            0x40
#define _SMT1TMRH_SMT1TMR15_POSN                            0x7
#define _SMT1TMRH_SMT1TMR15_POSITION                        0x7
#define _SMT1TMRH_SMT1TMR15_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR15_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR15_MASK                            0x80

// Register: SMT1TMRU
#define SMT1TMRU SMT1TMRU
extern volatile unsigned char           SMT1TMRU            __at(0xD8E);
#ifndef _LIB_BUILD
asm("SMT1TMRU equ 0D8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR16              :1;
        unsigned SMT1TMR17              :1;
        unsigned SMT1TMR18              :1;
        unsigned SMT1TMR19              :1;
        unsigned SMT1TMR20              :1;
        unsigned SMT1TMR21              :1;
        unsigned SMT1TMR22              :1;
        unsigned SMT1TMR23              :1;
    };
} SMT1TMRUbits_t;
extern volatile SMT1TMRUbits_t SMT1TMRUbits __at(0xD8E);
// bitfield macros
#define _SMT1TMRU_SMT1TMR_POSN                              0x0
#define _SMT1TMRU_SMT1TMR_POSITION                          0x0
#define _SMT1TMRU_SMT1TMR_SIZE                              0x8
#define _SMT1TMRU_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRU_SMT1TMR_MASK                              0xFF
#define _SMT1TMRU_SMT1TMR16_POSN                            0x0
#define _SMT1TMRU_SMT1TMR16_POSITION                        0x0
#define _SMT1TMRU_SMT1TMR16_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR16_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR16_MASK                            0x1
#define _SMT1TMRU_SMT1TMR17_POSN                            0x1
#define _SMT1TMRU_SMT1TMR17_POSITION                        0x1
#define _SMT1TMRU_SMT1TMR17_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR17_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR17_MASK                            0x2
#define _SMT1TMRU_SMT1TMR18_POSN                            0x2
#define _SMT1TMRU_SMT1TMR18_POSITION                        0x2
#define _SMT1TMRU_SMT1TMR18_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR18_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR18_MASK                            0x4
#define _SMT1TMRU_SMT1TMR19_POSN                            0x3
#define _SMT1TMRU_SMT1TMR19_POSITION                        0x3
#define _SMT1TMRU_SMT1TMR19_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR19_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR19_MASK                            0x8
#define _SMT1TMRU_SMT1TMR20_POSN                            0x4
#define _SMT1TMRU_SMT1TMR20_POSITION                        0x4
#define _SMT1TMRU_SMT1TMR20_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR20_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR20_MASK                            0x10
#define _SMT1TMRU_SMT1TMR21_POSN                            0x5
#define _SMT1TMRU_SMT1TMR21_POSITION                        0x5
#define _SMT1TMRU_SMT1TMR21_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR21_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR21_MASK                            0x20
#define _SMT1TMRU_SMT1TMR22_POSN                            0x6
#define _SMT1TMRU_SMT1TMR22_POSITION                        0x6
#define _SMT1TMRU_SMT1TMR22_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR22_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR22_MASK                            0x40
#define _SMT1TMRU_SMT1TMR23_POSN                            0x7
#define _SMT1TMRU_SMT1TMR23_POSITION                        0x7
#define _SMT1TMRU_SMT1TMR23_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR23_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR23_MASK                            0x80

// Register: SMT1CPR
#define SMT1CPR SMT1CPR
#ifndef __CCI__
extern volatile __uint24                SMT1CPR             __at(0xD8F);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPR equ 0D8Fh");
#endif

// Register: SMT1CPRL
#define SMT1CPRL SMT1CPRL
extern volatile unsigned char           SMT1CPRL            __at(0xD8F);
#ifndef _LIB_BUILD
asm("SMT1CPRL equ 0D8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR0               :1;
        unsigned SMT1CPR1               :1;
        unsigned SMT1CPR2               :1;
        unsigned SMT1CPR3               :1;
        unsigned SMT1CPR4               :1;
        unsigned SMT1CPR5               :1;
        unsigned SMT1CPR6               :1;
        unsigned SMT1CPR7               :1;
    };
} SMT1CPRLbits_t;
extern volatile SMT1CPRLbits_t SMT1CPRLbits __at(0xD8F);
// bitfield macros
#define _SMT1CPRL_SMT1CPR_POSN                              0x0
#define _SMT1CPRL_SMT1CPR_POSITION                          0x0
#define _SMT1CPRL_SMT1CPR_SIZE                              0x8
#define _SMT1CPRL_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRL_SMT1CPR_MASK                              0xFF
#define _SMT1CPRL_SMT1CPR0_POSN                             0x0
#define _SMT1CPRL_SMT1CPR0_POSITION                         0x0
#define _SMT1CPRL_SMT1CPR0_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR0_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR0_MASK                             0x1
#define _SMT1CPRL_SMT1CPR1_POSN                             0x1
#define _SMT1CPRL_SMT1CPR1_POSITION                         0x1
#define _SMT1CPRL_SMT1CPR1_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR1_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR1_MASK                             0x2
#define _SMT1CPRL_SMT1CPR2_POSN                             0x2
#define _SMT1CPRL_SMT1CPR2_POSITION                         0x2
#define _SMT1CPRL_SMT1CPR2_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR2_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR2_MASK                             0x4
#define _SMT1CPRL_SMT1CPR3_POSN                             0x3
#define _SMT1CPRL_SMT1CPR3_POSITION                         0x3
#define _SMT1CPRL_SMT1CPR3_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR3_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR3_MASK                             0x8
#define _SMT1CPRL_SMT1CPR4_POSN                             0x4
#define _SMT1CPRL_SMT1CPR4_POSITION                         0x4
#define _SMT1CPRL_SMT1CPR4_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR4_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR4_MASK                             0x10
#define _SMT1CPRL_SMT1CPR5_POSN                             0x5
#define _SMT1CPRL_SMT1CPR5_POSITION                         0x5
#define _SMT1CPRL_SMT1CPR5_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR5_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR5_MASK                             0x20
#define _SMT1CPRL_SMT1CPR6_POSN                             0x6
#define _SMT1CPRL_SMT1CPR6_POSITION                         0x6
#define _SMT1CPRL_SMT1CPR6_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR6_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR6_MASK                             0x40
#define _SMT1CPRL_SMT1CPR7_POSN                             0x7
#define _SMT1CPRL_SMT1CPR7_POSITION                         0x7
#define _SMT1CPRL_SMT1CPR7_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR7_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR7_MASK                             0x80

// Register: SMT1CPRH
#define SMT1CPRH SMT1CPRH
extern volatile unsigned char           SMT1CPRH            __at(0xD90);
#ifndef _LIB_BUILD
asm("SMT1CPRH equ 0D90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR8               :1;
        unsigned SMT1CPR9               :1;
        unsigned SMT1CPR10              :1;
        unsigned SMT1CPR11              :1;
        unsigned SMT1CPR12              :1;
        unsigned SMT1CPR13              :1;
        unsigned SMT1CPR14              :1;
        unsigned SMT1CPR15              :1;
    };
} SMT1CPRHbits_t;
extern volatile SMT1CPRHbits_t SMT1CPRHbits __at(0xD90);
// bitfield macros
#define _SMT1CPRH_SMT1CPR_POSN                              0x0
#define _SMT1CPRH_SMT1CPR_POSITION                          0x0
#define _SMT1CPRH_SMT1CPR_SIZE                              0x8
#define _SMT1CPRH_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRH_SMT1CPR_MASK                              0xFF
#define _SMT1CPRH_SMT1CPR8_POSN                             0x0
#define _SMT1CPRH_SMT1CPR8_POSITION                         0x0
#define _SMT1CPRH_SMT1CPR8_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR8_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR8_MASK                             0x1
#define _SMT1CPRH_SMT1CPR9_POSN                             0x1
#define _SMT1CPRH_SMT1CPR9_POSITION                         0x1
#define _SMT1CPRH_SMT1CPR9_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR9_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR9_MASK                             0x2
#define _SMT1CPRH_SMT1CPR10_POSN                            0x2
#define _SMT1CPRH_SMT1CPR10_POSITION                        0x2
#define _SMT1CPRH_SMT1CPR10_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR10_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR10_MASK                            0x4
#define _SMT1CPRH_SMT1CPR11_POSN                            0x3
#define _SMT1CPRH_SMT1CPR11_POSITION                        0x3
#define _SMT1CPRH_SMT1CPR11_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR11_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR11_MASK                            0x8
#define _SMT1CPRH_SMT1CPR12_POSN                            0x4
#define _SMT1CPRH_SMT1CPR12_POSITION                        0x4
#define _SMT1CPRH_SMT1CPR12_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR12_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR12_MASK                            0x10
#define _SMT1CPRH_SMT1CPR13_POSN                            0x5
#define _SMT1CPRH_SMT1CPR13_POSITION                        0x5
#define _SMT1CPRH_SMT1CPR13_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR13_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR13_MASK                            0x20
#define _SMT1CPRH_SMT1CPR14_POSN                            0x6
#define _SMT1CPRH_SMT1CPR14_POSITION                        0x6
#define _SMT1CPRH_SMT1CPR14_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR14_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR14_MASK                            0x40
#define _SMT1CPRH_SMT1CPR15_POSN                            0x7
#define _SMT1CPRH_SMT1CPR15_POSITION                        0x7
#define _SMT1CPRH_SMT1CPR15_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR15_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR15_MASK                            0x80

// Register: SMT1CPRU
#define SMT1CPRU SMT1CPRU
extern volatile unsigned char           SMT1CPRU            __at(0xD91);
#ifndef _LIB_BUILD
asm("SMT1CPRU equ 0D91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR16              :1;
        unsigned SMT1CPR17              :1;
        unsigned SMT1CPR18              :1;
        unsigned SMT1CPR19              :1;
        unsigned SMT1CPR20              :1;
        unsigned SMT1CPR21              :1;
        unsigned SMT1CPR22              :1;
        unsigned SMT1CPR23              :1;
    };
} SMT1CPRUbits_t;
extern volatile SMT1CPRUbits_t SMT1CPRUbits __at(0xD91);
// bitfield macros
#define _SMT1CPRU_SMT1CPR_POSN                              0x0
#define _SMT1CPRU_SMT1CPR_POSITION                          0x0
#define _SMT1CPRU_SMT1CPR_SIZE                              0x8
#define _SMT1CPRU_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRU_SMT1CPR_MASK                              0xFF
#define _SMT1CPRU_SMT1CPR16_POSN                            0x0
#define _SMT1CPRU_SMT1CPR16_POSITION                        0x0
#define _SMT1CPRU_SMT1CPR16_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR16_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR16_MASK                            0x1
#define _SMT1CPRU_SMT1CPR17_POSN                            0x1
#define _SMT1CPRU_SMT1CPR17_POSITION                        0x1
#define _SMT1CPRU_SMT1CPR17_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR17_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR17_MASK                            0x2
#define _SMT1CPRU_SMT1CPR18_POSN                            0x2
#define _SMT1CPRU_SMT1CPR18_POSITION                        0x2
#define _SMT1CPRU_SMT1CPR18_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR18_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR18_MASK                            0x4
#define _SMT1CPRU_SMT1CPR19_POSN                            0x3
#define _SMT1CPRU_SMT1CPR19_POSITION                        0x3
#define _SMT1CPRU_SMT1CPR19_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR19_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR19_MASK                            0x8
#define _SMT1CPRU_SMT1CPR20_POSN                            0x4
#define _SMT1CPRU_SMT1CPR20_POSITION                        0x4
#define _SMT1CPRU_SMT1CPR20_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR20_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR20_MASK                            0x10
#define _SMT1CPRU_SMT1CPR21_POSN                            0x5
#define _SMT1CPRU_SMT1CPR21_POSITION                        0x5
#define _SMT1CPRU_SMT1CPR21_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR21_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR21_MASK                            0x20
#define _SMT1CPRU_SMT1CPR22_POSN                            0x6
#define _SMT1CPRU_SMT1CPR22_POSITION                        0x6
#define _SMT1CPRU_SMT1CPR22_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR22_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR22_MASK                            0x40
#define _SMT1CPRU_SMT1CPR23_POSN                            0x7
#define _SMT1CPRU_SMT1CPR23_POSITION                        0x7
#define _SMT1CPRU_SMT1CPR23_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR23_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR23_MASK                            0x80

// Register: SMT1CPW
#define SMT1CPW SMT1CPW
#ifndef __CCI__
extern volatile __uint24                SMT1CPW             __at(0xD92);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPW equ 0D92h");
#endif

// Register: SMT1CPWL
#define SMT1CPWL SMT1CPWL
extern volatile unsigned char           SMT1CPWL            __at(0xD92);
#ifndef _LIB_BUILD
asm("SMT1CPWL equ 0D92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW0               :1;
        unsigned SMT1CPW1               :1;
        unsigned SMT1CPW2               :1;
        unsigned SMT1CPW3               :1;
        unsigned SMT1CPW4               :1;
        unsigned SMT1CPW5               :1;
        unsigned SMT1CPW6               :1;
        unsigned SMT1CPW7               :1;
    };
} SMT1CPWLbits_t;
extern volatile SMT1CPWLbits_t SMT1CPWLbits __at(0xD92);
// bitfield macros
#define _SMT1CPWL_SMT1CPW_POSN                              0x0
#define _SMT1CPWL_SMT1CPW_POSITION                          0x0
#define _SMT1CPWL_SMT1CPW_SIZE                              0x8
#define _SMT1CPWL_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWL_SMT1CPW_MASK                              0xFF
#define _SMT1CPWL_SMT1CPW0_POSN                             0x0
#define _SMT1CPWL_SMT1CPW0_POSITION                         0x0
#define _SMT1CPWL_SMT1CPW0_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW0_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW0_MASK                             0x1
#define _SMT1CPWL_SMT1CPW1_POSN                             0x1
#define _SMT1CPWL_SMT1CPW1_POSITION                         0x1
#define _SMT1CPWL_SMT1CPW1_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW1_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW1_MASK                             0x2
#define _SMT1CPWL_SMT1CPW2_POSN                             0x2
#define _SMT1CPWL_SMT1CPW2_POSITION                         0x2
#define _SMT1CPWL_SMT1CPW2_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW2_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW2_MASK                             0x4
#define _SMT1CPWL_SMT1CPW3_POSN                             0x3
#define _SMT1CPWL_SMT1CPW3_POSITION                         0x3
#define _SMT1CPWL_SMT1CPW3_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW3_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW3_MASK                             0x8
#define _SMT1CPWL_SMT1CPW4_POSN                             0x4
#define _SMT1CPWL_SMT1CPW4_POSITION                         0x4
#define _SMT1CPWL_SMT1CPW4_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW4_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW4_MASK                             0x10
#define _SMT1CPWL_SMT1CPW5_POSN                             0x5
#define _SMT1CPWL_SMT1CPW5_POSITION                         0x5
#define _SMT1CPWL_SMT1CPW5_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW5_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW5_MASK                             0x20
#define _SMT1CPWL_SMT1CPW6_POSN                             0x6
#define _SMT1CPWL_SMT1CPW6_POSITION                         0x6
#define _SMT1CPWL_SMT1CPW6_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW6_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW6_MASK                             0x40
#define _SMT1CPWL_SMT1CPW7_POSN                             0x7
#define _SMT1CPWL_SMT1CPW7_POSITION                         0x7
#define _SMT1CPWL_SMT1CPW7_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW7_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW7_MASK                             0x80

// Register: SMT1CPWH
#define SMT1CPWH SMT1CPWH
extern volatile unsigned char           SMT1CPWH            __at(0xD93);
#ifndef _LIB_BUILD
asm("SMT1CPWH equ 0D93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW8               :1;
        unsigned SMT1CPW9               :1;
        unsigned SMT1CPW10              :1;
        unsigned SMT1CPW11              :1;
        unsigned SMT1CPW12              :1;
        unsigned SMT1CPW13              :1;
        unsigned SMT1CPW14              :1;
        unsigned SMT1CPW15              :1;
    };
} SMT1CPWHbits_t;
extern volatile SMT1CPWHbits_t SMT1CPWHbits __at(0xD93);
// bitfield macros
#define _SMT1CPWH_SMT1CPW_POSN                              0x0
#define _SMT1CPWH_SMT1CPW_POSITION                          0x0
#define _SMT1CPWH_SMT1CPW_SIZE                              0x8
#define _SMT1CPWH_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWH_SMT1CPW_MASK                              0xFF
#define _SMT1CPWH_SMT1CPW8_POSN                             0x0
#define _SMT1CPWH_SMT1CPW8_POSITION                         0x0
#define _SMT1CPWH_SMT1CPW8_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW8_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW8_MASK                             0x1
#define _SMT1CPWH_SMT1CPW9_POSN                             0x1
#define _SMT1CPWH_SMT1CPW9_POSITION                         0x1
#define _SMT1CPWH_SMT1CPW9_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW9_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW9_MASK                             0x2
#define _SMT1CPWH_SMT1CPW10_POSN                            0x2
#define _SMT1CPWH_SMT1CPW10_POSITION                        0x2
#define _SMT1CPWH_SMT1CPW10_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW10_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW10_MASK                            0x4
#define _SMT1CPWH_SMT1CPW11_POSN                            0x3
#define _SMT1CPWH_SMT1CPW11_POSITION                        0x3
#define _SMT1CPWH_SMT1CPW11_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW11_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW11_MASK                            0x8
#define _SMT1CPWH_SMT1CPW12_POSN                            0x4
#define _SMT1CPWH_SMT1CPW12_POSITION                        0x4
#define _SMT1CPWH_SMT1CPW12_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW12_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW12_MASK                            0x10
#define _SMT1CPWH_SMT1CPW13_POSN                            0x5
#define _SMT1CPWH_SMT1CPW13_POSITION                        0x5
#define _SMT1CPWH_SMT1CPW13_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW13_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW13_MASK                            0x20
#define _SMT1CPWH_SMT1CPW14_POSN                            0x6
#define _SMT1CPWH_SMT1CPW14_POSITION                        0x6
#define _SMT1CPWH_SMT1CPW14_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW14_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW14_MASK                            0x40
#define _SMT1CPWH_SMT1CPW15_POSN                            0x7
#define _SMT1CPWH_SMT1CPW15_POSITION                        0x7
#define _SMT1CPWH_SMT1CPW15_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW15_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW15_MASK                            0x80

// Register: SMT1CPWU
#define SMT1CPWU SMT1CPWU
extern volatile unsigned char           SMT1CPWU            __at(0xD94);
#ifndef _LIB_BUILD
asm("SMT1CPWU equ 0D94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW16              :1;
        unsigned SMT1CPW17              :1;
        unsigned SMT1CPW18              :1;
        unsigned SMT1CPW19              :1;
        unsigned SMT1CPW20              :1;
        unsigned SMT1CPW21              :1;
        unsigned SMT1CPW22              :1;
        unsigned SMT1CPW23              :1;
    };
} SMT1CPWUbits_t;
extern volatile SMT1CPWUbits_t SMT1CPWUbits __at(0xD94);
// bitfield macros
#define _SMT1CPWU_SMT1CPW_POSN                              0x0
#define _SMT1CPWU_SMT1CPW_POSITION                          0x0
#define _SMT1CPWU_SMT1CPW_SIZE                              0x8
#define _SMT1CPWU_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWU_SMT1CPW_MASK                              0xFF
#define _SMT1CPWU_SMT1CPW16_POSN                            0x0
#define _SMT1CPWU_SMT1CPW16_POSITION                        0x0
#define _SMT1CPWU_SMT1CPW16_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW16_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW16_MASK                            0x1
#define _SMT1CPWU_SMT1CPW17_POSN                            0x1
#define _SMT1CPWU_SMT1CPW17_POSITION                        0x1
#define _SMT1CPWU_SMT1CPW17_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW17_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW17_MASK                            0x2
#define _SMT1CPWU_SMT1CPW18_POSN                            0x2
#define _SMT1CPWU_SMT1CPW18_POSITION                        0x2
#define _SMT1CPWU_SMT1CPW18_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW18_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW18_MASK                            0x4
#define _SMT1CPWU_SMT1CPW19_POSN                            0x3
#define _SMT1CPWU_SMT1CPW19_POSITION                        0x3
#define _SMT1CPWU_SMT1CPW19_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW19_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW19_MASK                            0x8
#define _SMT1CPWU_SMT1CPW20_POSN                            0x4
#define _SMT1CPWU_SMT1CPW20_POSITION                        0x4
#define _SMT1CPWU_SMT1CPW20_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW20_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW20_MASK                            0x10
#define _SMT1CPWU_SMT1CPW21_POSN                            0x5
#define _SMT1CPWU_SMT1CPW21_POSITION                        0x5
#define _SMT1CPWU_SMT1CPW21_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW21_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW21_MASK                            0x20
#define _SMT1CPWU_SMT1CPW22_POSN                            0x6
#define _SMT1CPWU_SMT1CPW22_POSITION                        0x6
#define _SMT1CPWU_SMT1CPW22_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW22_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW22_MASK                            0x40
#define _SMT1CPWU_SMT1CPW23_POSN                            0x7
#define _SMT1CPWU_SMT1CPW23_POSITION                        0x7
#define _SMT1CPWU_SMT1CPW23_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW23_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW23_MASK                            0x80

// Register: SMT1PR
#define SMT1PR SMT1PR
#ifndef __CCI__
extern volatile __uint24                SMT1PR              __at(0xD95);
#endif
#ifndef _LIB_BUILD
asm("SMT1PR equ 0D95h");
#endif

// Register: SMT1PRL
#define SMT1PRL SMT1PRL
extern volatile unsigned char           SMT1PRL             __at(0xD95);
#ifndef _LIB_BUILD
asm("SMT1PRL equ 0D95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR0                :1;
        unsigned SMT1PR1                :1;
        unsigned SMT1PR2                :1;
        unsigned SMT1PR3                :1;
        unsigned SMT1PR4                :1;
        unsigned SMT1PR5                :1;
        unsigned SMT1PR6                :1;
        unsigned SMT1PR7                :1;
    };
} SMT1PRLbits_t;
extern volatile SMT1PRLbits_t SMT1PRLbits __at(0xD95);
// bitfield macros
#define _SMT1PRL_SMT1PR_POSN                                0x0
#define _SMT1PRL_SMT1PR_POSITION                            0x0
#define _SMT1PRL_SMT1PR_SIZE                                0x8
#define _SMT1PRL_SMT1PR_LENGTH                              0x8
#define _SMT1PRL_SMT1PR_MASK                                0xFF
#define _SMT1PRL_SMT1PR0_POSN                               0x0
#define _SMT1PRL_SMT1PR0_POSITION                           0x0
#define _SMT1PRL_SMT1PR0_SIZE                               0x1
#define _SMT1PRL_SMT1PR0_LENGTH                             0x1
#define _SMT1PRL_SMT1PR0_MASK                               0x1
#define _SMT1PRL_SMT1PR1_POSN                               0x1
#define _SMT1PRL_SMT1PR1_POSITION                           0x1
#define _SMT1PRL_SMT1PR1_SIZE                               0x1
#define _SMT1PRL_SMT1PR1_LENGTH                             0x1
#define _SMT1PRL_SMT1PR1_MASK                               0x2
#define _SMT1PRL_SMT1PR2_POSN                               0x2
#define _SMT1PRL_SMT1PR2_POSITION                           0x2
#define _SMT1PRL_SMT1PR2_SIZE                               0x1
#define _SMT1PRL_SMT1PR2_LENGTH                             0x1
#define _SMT1PRL_SMT1PR2_MASK                               0x4
#define _SMT1PRL_SMT1PR3_POSN                               0x3
#define _SMT1PRL_SMT1PR3_POSITION                           0x3
#define _SMT1PRL_SMT1PR3_SIZE                               0x1
#define _SMT1PRL_SMT1PR3_LENGTH                             0x1
#define _SMT1PRL_SMT1PR3_MASK                               0x8
#define _SMT1PRL_SMT1PR4_POSN                               0x4
#define _SMT1PRL_SMT1PR4_POSITION                           0x4
#define _SMT1PRL_SMT1PR4_SIZE                               0x1
#define _SMT1PRL_SMT1PR4_LENGTH                             0x1
#define _SMT1PRL_SMT1PR4_MASK                               0x10
#define _SMT1PRL_SMT1PR5_POSN                               0x5
#define _SMT1PRL_SMT1PR5_POSITION                           0x5
#define _SMT1PRL_SMT1PR5_SIZE                               0x1
#define _SMT1PRL_SMT1PR5_LENGTH                             0x1
#define _SMT1PRL_SMT1PR5_MASK                               0x20
#define _SMT1PRL_SMT1PR6_POSN                               0x6
#define _SMT1PRL_SMT1PR6_POSITION                           0x6
#define _SMT1PRL_SMT1PR6_SIZE                               0x1
#define _SMT1PRL_SMT1PR6_LENGTH                             0x1
#define _SMT1PRL_SMT1PR6_MASK                               0x40
#define _SMT1PRL_SMT1PR7_POSN                               0x7
#define _SMT1PRL_SMT1PR7_POSITION                           0x7
#define _SMT1PRL_SMT1PR7_SIZE                               0x1
#define _SMT1PRL_SMT1PR7_LENGTH                             0x1
#define _SMT1PRL_SMT1PR7_MASK                               0x80

// Register: SMT1PRH
#define SMT1PRH SMT1PRH
extern volatile unsigned char           SMT1PRH             __at(0xD96);
#ifndef _LIB_BUILD
asm("SMT1PRH equ 0D96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR8                :1;
        unsigned SMT1PR9                :1;
        unsigned SMT1PR10               :1;
        unsigned SMT1PR11               :1;
        unsigned SMT1PR12               :1;
        unsigned SMT1PR13               :1;
        unsigned SMT1PR14               :1;
        unsigned SMT1PR15               :1;
    };
} SMT1PRHbits_t;
extern volatile SMT1PRHbits_t SMT1PRHbits __at(0xD96);
// bitfield macros
#define _SMT1PRH_SMT1PR_POSN                                0x0
#define _SMT1PRH_SMT1PR_POSITION                            0x0
#define _SMT1PRH_SMT1PR_SIZE                                0x8
#define _SMT1PRH_SMT1PR_LENGTH                              0x8
#define _SMT1PRH_SMT1PR_MASK                                0xFF
#define _SMT1PRH_SMT1PR8_POSN                               0x0
#define _SMT1PRH_SMT1PR8_POSITION                           0x0
#define _SMT1PRH_SMT1PR8_SIZE                               0x1
#define _SMT1PRH_SMT1PR8_LENGTH                             0x1
#define _SMT1PRH_SMT1PR8_MASK                               0x1
#define _SMT1PRH_SMT1PR9_POSN                               0x1
#define _SMT1PRH_SMT1PR9_POSITION                           0x1
#define _SMT1PRH_SMT1PR9_SIZE                               0x1
#define _SMT1PRH_SMT1PR9_LENGTH                             0x1
#define _SMT1PRH_SMT1PR9_MASK                               0x2
#define _SMT1PRH_SMT1PR10_POSN                              0x2
#define _SMT1PRH_SMT1PR10_POSITION                          0x2
#define _SMT1PRH_SMT1PR10_SIZE                              0x1
#define _SMT1PRH_SMT1PR10_LENGTH                            0x1
#define _SMT1PRH_SMT1PR10_MASK                              0x4
#define _SMT1PRH_SMT1PR11_POSN                              0x3
#define _SMT1PRH_SMT1PR11_POSITION                          0x3
#define _SMT1PRH_SMT1PR11_SIZE                              0x1
#define _SMT1PRH_SMT1PR11_LENGTH                            0x1
#define _SMT1PRH_SMT1PR11_MASK                              0x8
#define _SMT1PRH_SMT1PR12_POSN                              0x4
#define _SMT1PRH_SMT1PR12_POSITION                          0x4
#define _SMT1PRH_SMT1PR12_SIZE                              0x1
#define _SMT1PRH_SMT1PR12_LENGTH                            0x1
#define _SMT1PRH_SMT1PR12_MASK                              0x10
#define _SMT1PRH_SMT1PR13_POSN                              0x5
#define _SMT1PRH_SMT1PR13_POSITION                          0x5
#define _SMT1PRH_SMT1PR13_SIZE                              0x1
#define _SMT1PRH_SMT1PR13_LENGTH                            0x1
#define _SMT1PRH_SMT1PR13_MASK                              0x20
#define _SMT1PRH_SMT1PR14_POSN                              0x6
#define _SMT1PRH_SMT1PR14_POSITION                          0x6
#define _SMT1PRH_SMT1PR14_SIZE                              0x1
#define _SMT1PRH_SMT1PR14_LENGTH                            0x1
#define _SMT1PRH_SMT1PR14_MASK                              0x40
#define _SMT1PRH_SMT1PR15_POSN                              0x7
#define _SMT1PRH_SMT1PR15_POSITION                          0x7
#define _SMT1PRH_SMT1PR15_SIZE                              0x1
#define _SMT1PRH_SMT1PR15_LENGTH                            0x1
#define _SMT1PRH_SMT1PR15_MASK                              0x80

// Register: SMT1PRU
#define SMT1PRU SMT1PRU
extern volatile unsigned char           SMT1PRU             __at(0xD97);
#ifndef _LIB_BUILD
asm("SMT1PRU equ 0D97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR16               :1;
        unsigned SMT1PR17               :1;
        unsigned SMT1PR18               :1;
        unsigned SMT1PR19               :1;
        unsigned SMT1PR20               :1;
        unsigned SMT1PR21               :1;
        unsigned SMT1PR22               :1;
        unsigned SMT1PR23               :1;
    };
} SMT1PRUbits_t;
extern volatile SMT1PRUbits_t SMT1PRUbits __at(0xD97);
// bitfield macros
#define _SMT1PRU_SMT1PR_POSN                                0x0
#define _SMT1PRU_SMT1PR_POSITION                            0x0
#define _SMT1PRU_SMT1PR_SIZE                                0x8
#define _SMT1PRU_SMT1PR_LENGTH                              0x8
#define _SMT1PRU_SMT1PR_MASK                                0xFF
#define _SMT1PRU_SMT1PR16_POSN                              0x0
#define _SMT1PRU_SMT1PR16_POSITION                          0x0
#define _SMT1PRU_SMT1PR16_SIZE                              0x1
#define _SMT1PRU_SMT1PR16_LENGTH                            0x1
#define _SMT1PRU_SMT1PR16_MASK                              0x1
#define _SMT1PRU_SMT1PR17_POSN                              0x1
#define _SMT1PRU_SMT1PR17_POSITION                          0x1
#define _SMT1PRU_SMT1PR17_SIZE                              0x1
#define _SMT1PRU_SMT1PR17_LENGTH                            0x1
#define _SMT1PRU_SMT1PR17_MASK                              0x2
#define _SMT1PRU_SMT1PR18_POSN                              0x2
#define _SMT1PRU_SMT1PR18_POSITION                          0x2
#define _SMT1PRU_SMT1PR18_SIZE                              0x1
#define _SMT1PRU_SMT1PR18_LENGTH                            0x1
#define _SMT1PRU_SMT1PR18_MASK                              0x4
#define _SMT1PRU_SMT1PR19_POSN                              0x3
#define _SMT1PRU_SMT1PR19_POSITION                          0x3
#define _SMT1PRU_SMT1PR19_SIZE                              0x1
#define _SMT1PRU_SMT1PR19_LENGTH                            0x1
#define _SMT1PRU_SMT1PR19_MASK                              0x8
#define _SMT1PRU_SMT1PR20_POSN                              0x4
#define _SMT1PRU_SMT1PR20_POSITION                          0x4
#define _SMT1PRU_SMT1PR20_SIZE                              0x1
#define _SMT1PRU_SMT1PR20_LENGTH                            0x1
#define _SMT1PRU_SMT1PR20_MASK                              0x10
#define _SMT1PRU_SMT1PR21_POSN                              0x5
#define _SMT1PRU_SMT1PR21_POSITION                          0x5
#define _SMT1PRU_SMT1PR21_SIZE                              0x1
#define _SMT1PRU_SMT1PR21_LENGTH                            0x1
#define _SMT1PRU_SMT1PR21_MASK                              0x20
#define _SMT1PRU_SMT1PR22_POSN                              0x6
#define _SMT1PRU_SMT1PR22_POSITION                          0x6
#define _SMT1PRU_SMT1PR22_SIZE                              0x1
#define _SMT1PRU_SMT1PR22_LENGTH                            0x1
#define _SMT1PRU_SMT1PR22_MASK                              0x40
#define _SMT1PRU_SMT1PR23_POSN                              0x7
#define _SMT1PRU_SMT1PR23_POSITION                          0x7
#define _SMT1PRU_SMT1PR23_SIZE                              0x1
#define _SMT1PRU_SMT1PR23_LENGTH                            0x1
#define _SMT1PRU_SMT1PR23_MASK                              0x80

// Register: SMT1CON0
#define SMT1CON0 SMT1CON0
extern volatile unsigned char           SMT1CON0            __at(0xD98);
#ifndef _LIB_BUILD
asm("SMT1CON0 equ 0D98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PS                 :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT1PS0                :1;
        unsigned SMT1PS1                :1;
    };
} SMT1CON0bits_t;
extern volatile SMT1CON0bits_t SMT1CON0bits __at(0xD98);
// bitfield macros
#define _SMT1CON0_SMT1PS_POSN                               0x0
#define _SMT1CON0_SMT1PS_POSITION                           0x0
#define _SMT1CON0_SMT1PS_SIZE                               0x2
#define _SMT1CON0_SMT1PS_LENGTH                             0x2
#define _SMT1CON0_SMT1PS_MASK                               0x3
#define _SMT1CON0_CPOL_POSN                                 0x2
#define _SMT1CON0_CPOL_POSITION                             0x2
#define _SMT1CON0_CPOL_SIZE                                 0x1
#define _SMT1CON0_CPOL_LENGTH                               0x1
#define _SMT1CON0_CPOL_MASK                                 0x4
#define _SMT1CON0_SPOL_POSN                                 0x3
#define _SMT1CON0_SPOL_POSITION                             0x3
#define _SMT1CON0_SPOL_SIZE                                 0x1
#define _SMT1CON0_SPOL_LENGTH                               0x1
#define _SMT1CON0_SPOL_MASK                                 0x8
#define _SMT1CON0_WPOL_POSN                                 0x4
#define _SMT1CON0_WPOL_POSITION                             0x4
#define _SMT1CON0_WPOL_SIZE                                 0x1
#define _SMT1CON0_WPOL_LENGTH                               0x1
#define _SMT1CON0_WPOL_MASK                                 0x10
#define _SMT1CON0_STP_POSN                                  0x5
#define _SMT1CON0_STP_POSITION                              0x5
#define _SMT1CON0_STP_SIZE                                  0x1
#define _SMT1CON0_STP_LENGTH                                0x1
#define _SMT1CON0_STP_MASK                                  0x20
#define _SMT1CON0_EN_POSN                                   0x7
#define _SMT1CON0_EN_POSITION                               0x7
#define _SMT1CON0_EN_SIZE                                   0x1
#define _SMT1CON0_EN_LENGTH                                 0x1
#define _SMT1CON0_EN_MASK                                   0x80
#define _SMT1CON0_SMT1PS0_POSN                              0x0
#define _SMT1CON0_SMT1PS0_POSITION                          0x0
#define _SMT1CON0_SMT1PS0_SIZE                              0x1
#define _SMT1CON0_SMT1PS0_LENGTH                            0x1
#define _SMT1CON0_SMT1PS0_MASK                              0x1
#define _SMT1CON0_SMT1PS1_POSN                              0x1
#define _SMT1CON0_SMT1PS1_POSITION                          0x1
#define _SMT1CON0_SMT1PS1_SIZE                              0x1
#define _SMT1CON0_SMT1PS1_LENGTH                            0x1
#define _SMT1CON0_SMT1PS1_MASK                              0x2

// Register: SMT1CON1
#define SMT1CON1 SMT1CON1
extern volatile unsigned char           SMT1CON1            __at(0xD99);
#ifndef _LIB_BUILD
asm("SMT1CON1 equ 0D99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned SMT1GO                 :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned SMT1MODE               :4;
        unsigned                        :2;
        unsigned SMT1REPEAT             :1;
    };
    struct {
        unsigned SMT1MODE0              :1;
        unsigned SMT1MODE1              :1;
        unsigned SMT1MODE2              :1;
        unsigned SMT1MODE3              :1;
    };
} SMT1CON1bits_t;
extern volatile SMT1CON1bits_t SMT1CON1bits __at(0xD99);
// bitfield macros
#define _SMT1CON1_MODE_POSN                                 0x0
#define _SMT1CON1_MODE_POSITION                             0x0
#define _SMT1CON1_MODE_SIZE                                 0x4
#define _SMT1CON1_MODE_LENGTH                               0x4
#define _SMT1CON1_MODE_MASK                                 0xF
#define _SMT1CON1_REPEAT_POSN                               0x6
#define _SMT1CON1_REPEAT_POSITION                           0x6
#define _SMT1CON1_REPEAT_SIZE                               0x1
#define _SMT1CON1_REPEAT_LENGTH                             0x1
#define _SMT1CON1_REPEAT_MASK                               0x40
#define _SMT1CON1_SMT1GO_POSN                               0x7
#define _SMT1CON1_SMT1GO_POSITION                           0x7
#define _SMT1CON1_SMT1GO_SIZE                               0x1
#define _SMT1CON1_SMT1GO_LENGTH                             0x1
#define _SMT1CON1_SMT1GO_MASK                               0x80
#define _SMT1CON1_MODE0_POSN                                0x0
#define _SMT1CON1_MODE0_POSITION                            0x0
#define _SMT1CON1_MODE0_SIZE                                0x1
#define _SMT1CON1_MODE0_LENGTH                              0x1
#define _SMT1CON1_MODE0_MASK                                0x1
#define _SMT1CON1_MODE1_POSN                                0x1
#define _SMT1CON1_MODE1_POSITION                            0x1
#define _SMT1CON1_MODE1_SIZE                                0x1
#define _SMT1CON1_MODE1_LENGTH                              0x1
#define _SMT1CON1_MODE1_MASK                                0x2
#define _SMT1CON1_MODE2_POSN                                0x2
#define _SMT1CON1_MODE2_POSITION                            0x2
#define _SMT1CON1_MODE2_SIZE                                0x1
#define _SMT1CON1_MODE2_LENGTH                              0x1
#define _SMT1CON1_MODE2_MASK                                0x4
#define _SMT1CON1_MODE3_POSN                                0x3
#define _SMT1CON1_MODE3_POSITION                            0x3
#define _SMT1CON1_MODE3_SIZE                                0x1
#define _SMT1CON1_MODE3_LENGTH                              0x1
#define _SMT1CON1_MODE3_MASK                                0x8
#define _SMT1CON1_SMT1MODE_POSN                             0x0
#define _SMT1CON1_SMT1MODE_POSITION                         0x0
#define _SMT1CON1_SMT1MODE_SIZE                             0x4
#define _SMT1CON1_SMT1MODE_LENGTH                           0x4
#define _SMT1CON1_SMT1MODE_MASK                             0xF
#define _SMT1CON1_SMT1REPEAT_POSN                           0x6
#define _SMT1CON1_SMT1REPEAT_POSITION                       0x6
#define _SMT1CON1_SMT1REPEAT_SIZE                           0x1
#define _SMT1CON1_SMT1REPEAT_LENGTH                         0x1
#define _SMT1CON1_SMT1REPEAT_MASK                           0x40
#define _SMT1CON1_SMT1MODE0_POSN                            0x0
#define _SMT1CON1_SMT1MODE0_POSITION                        0x0
#define _SMT1CON1_SMT1MODE0_SIZE                            0x1
#define _SMT1CON1_SMT1MODE0_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE0_MASK                            0x1
#define _SMT1CON1_SMT1MODE1_POSN                            0x1
#define _SMT1CON1_SMT1MODE1_POSITION                        0x1
#define _SMT1CON1_SMT1MODE1_SIZE                            0x1
#define _SMT1CON1_SMT1MODE1_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE1_MASK                            0x2
#define _SMT1CON1_SMT1MODE2_POSN                            0x2
#define _SMT1CON1_SMT1MODE2_POSITION                        0x2
#define _SMT1CON1_SMT1MODE2_SIZE                            0x1
#define _SMT1CON1_SMT1MODE2_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE2_MASK                            0x4
#define _SMT1CON1_SMT1MODE3_POSN                            0x3
#define _SMT1CON1_SMT1MODE3_POSITION                        0x3
#define _SMT1CON1_SMT1MODE3_SIZE                            0x1
#define _SMT1CON1_SMT1MODE3_LENGTH                          0x1
#define _SMT1CON1_SMT1MODE3_MASK                            0x8

// Register: SMT1STAT
#define SMT1STAT SMT1STAT
extern volatile unsigned char           SMT1STAT            __at(0xD9A);
#ifndef _LIB_BUILD
asm("SMT1STAT equ 0D9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT1AS                 :1;
        unsigned SMT1WS                 :1;
        unsigned SMT1TS                 :1;
        unsigned                        :2;
        unsigned SMT1RESET              :1;
        unsigned SMT1CPWUP              :1;
        unsigned SMT1CPRUP              :1;
    };
} SMT1STATbits_t;
extern volatile SMT1STATbits_t SMT1STATbits __at(0xD9A);
// bitfield macros
#define _SMT1STAT_AS_POSN                                   0x0
#define _SMT1STAT_AS_POSITION                               0x0
#define _SMT1STAT_AS_SIZE                                   0x1
#define _SMT1STAT_AS_LENGTH                                 0x1
#define _SMT1STAT_AS_MASK                                   0x1
#define _SMT1STAT_WS_POSN                                   0x1
#define _SMT1STAT_WS_POSITION                               0x1
#define _SMT1STAT_WS_SIZE                                   0x1
#define _SMT1STAT_WS_LENGTH                                 0x1
#define _SMT1STAT_WS_MASK                                   0x2
#define _SMT1STAT_TS_POSN                                   0x2
#define _SMT1STAT_TS_POSITION                               0x2
#define _SMT1STAT_TS_SIZE                                   0x1
#define _SMT1STAT_TS_LENGTH                                 0x1
#define _SMT1STAT_TS_MASK                                   0x4
#define _SMT1STAT_RST_POSN                                  0x5
#define _SMT1STAT_RST_POSITION                              0x5
#define _SMT1STAT_RST_SIZE                                  0x1
#define _SMT1STAT_RST_LENGTH                                0x1
#define _SMT1STAT_RST_MASK                                  0x20
#define _SMT1STAT_CPWUP_POSN                                0x6
#define _SMT1STAT_CPWUP_POSITION                            0x6
#define _SMT1STAT_CPWUP_SIZE                                0x1
#define _SMT1STAT_CPWUP_LENGTH                              0x1
#define _SMT1STAT_CPWUP_MASK                                0x40
#define _SMT1STAT_CPRUP_POSN                                0x7
#define _SMT1STAT_CPRUP_POSITION                            0x7
#define _SMT1STAT_CPRUP_SIZE                                0x1
#define _SMT1STAT_CPRUP_LENGTH                              0x1
#define _SMT1STAT_CPRUP_MASK                                0x80
#define _SMT1STAT_SMT1AS_POSN                               0x0
#define _SMT1STAT_SMT1AS_POSITION                           0x0
#define _SMT1STAT_SMT1AS_SIZE                               0x1
#define _SMT1STAT_SMT1AS_LENGTH                             0x1
#define _SMT1STAT_SMT1AS_MASK                               0x1
#define _SMT1STAT_SMT1WS_POSN                               0x1
#define _SMT1STAT_SMT1WS_POSITION                           0x1
#define _SMT1STAT_SMT1WS_SIZE                               0x1
#define _SMT1STAT_SMT1WS_LENGTH                             0x1
#define _SMT1STAT_SMT1WS_MASK                               0x2
#define _SMT1STAT_SMT1TS_POSN                               0x2
#define _SMT1STAT_SMT1TS_POSITION                           0x2
#define _SMT1STAT_SMT1TS_SIZE                               0x1
#define _SMT1STAT_SMT1TS_LENGTH                             0x1
#define _SMT1STAT_SMT1TS_MASK                               0x4
#define _SMT1STAT_SMT1RESET_POSN                            0x5
#define _SMT1STAT_SMT1RESET_POSITION                        0x5
#define _SMT1STAT_SMT1RESET_SIZE                            0x1
#define _SMT1STAT_SMT1RESET_LENGTH                          0x1
#define _SMT1STAT_SMT1RESET_MASK                            0x20
#define _SMT1STAT_SMT1CPWUP_POSN                            0x6
#define _SMT1STAT_SMT1CPWUP_POSITION                        0x6
#define _SMT1STAT_SMT1CPWUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPWUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPWUP_MASK                            0x40
#define _SMT1STAT_SMT1CPRUP_POSN                            0x7
#define _SMT1STAT_SMT1CPRUP_POSITION                        0x7
#define _SMT1STAT_SMT1CPRUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPRUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPRUP_MASK                            0x80

// Register: SMT1CLK
#define SMT1CLK SMT1CLK
extern volatile unsigned char           SMT1CLK             __at(0xD9B);
#ifndef _LIB_BUILD
asm("SMT1CLK equ 0D9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :8;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT1CSEL               :8;
    };
    struct {
        unsigned SMT1CSEL0              :1;
        unsigned SMT1CSEL1              :1;
        unsigned SMT1CSEL2              :1;
    };
} SMT1CLKbits_t;
extern volatile SMT1CLKbits_t SMT1CLKbits __at(0xD9B);
// bitfield macros
#define _SMT1CLK_CSEL_POSN                                  0x0
#define _SMT1CLK_CSEL_POSITION                              0x0
#define _SMT1CLK_CSEL_SIZE                                  0x8
#define _SMT1CLK_CSEL_LENGTH                                0x8
#define _SMT1CLK_CSEL_MASK                                  0xFF
#define _SMT1CLK_CSEL0_POSN                                 0x0
#define _SMT1CLK_CSEL0_POSITION                             0x0
#define _SMT1CLK_CSEL0_SIZE                                 0x1
#define _SMT1CLK_CSEL0_LENGTH                               0x1
#define _SMT1CLK_CSEL0_MASK                                 0x1
#define _SMT1CLK_CSEL1_POSN                                 0x1
#define _SMT1CLK_CSEL1_POSITION                             0x1
#define _SMT1CLK_CSEL1_SIZE                                 0x1
#define _SMT1CLK_CSEL1_LENGTH                               0x1
#define _SMT1CLK_CSEL1_MASK                                 0x2
#define _SMT1CLK_CSEL2_POSN                                 0x2
#define _SMT1CLK_CSEL2_POSITION                             0x2
#define _SMT1CLK_CSEL2_SIZE                                 0x1
#define _SMT1CLK_CSEL2_LENGTH                               0x1
#define _SMT1CLK_CSEL2_MASK                                 0x4
#define _SMT1CLK_SMT1CSEL_POSN                              0x0
#define _SMT1CLK_SMT1CSEL_POSITION                          0x0
#define _SMT1CLK_SMT1CSEL_SIZE                              0x8
#define _SMT1CLK_SMT1CSEL_LENGTH                            0x8
#define _SMT1CLK_SMT1CSEL_MASK                              0xFF
#define _SMT1CLK_SMT1CSEL0_POSN                             0x0
#define _SMT1CLK_SMT1CSEL0_POSITION                         0x0
#define _SMT1CLK_SMT1CSEL0_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL0_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL0_MASK                             0x1
#define _SMT1CLK_SMT1CSEL1_POSN                             0x1
#define _SMT1CLK_SMT1CSEL1_POSITION                         0x1
#define _SMT1CLK_SMT1CSEL1_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL1_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL1_MASK                             0x2
#define _SMT1CLK_SMT1CSEL2_POSN                             0x2
#define _SMT1CLK_SMT1CSEL2_POSITION                         0x2
#define _SMT1CLK_SMT1CSEL2_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL2_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL2_MASK                             0x4

// Register: SMT1SIG
#define SMT1SIG SMT1SIG
extern volatile unsigned char           SMT1SIG             __at(0xD9C);
#ifndef _LIB_BUILD
asm("SMT1SIG equ 0D9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :8;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT1SSEL               :8;
    };
    struct {
        unsigned SMT1SSEL0              :1;
        unsigned SMT1SSEL1              :1;
        unsigned SMT1SSEL2              :1;
        unsigned SMT1SSEL3              :1;
        unsigned SMT1SSEL4              :1;
    };
} SMT1SIGbits_t;
extern volatile SMT1SIGbits_t SMT1SIGbits __at(0xD9C);
// bitfield macros
#define _SMT1SIG_SSEL_POSN                                  0x0
#define _SMT1SIG_SSEL_POSITION                              0x0
#define _SMT1SIG_SSEL_SIZE                                  0x8
#define _SMT1SIG_SSEL_LENGTH                                0x8
#define _SMT1SIG_SSEL_MASK                                  0xFF
#define _SMT1SIG_SSEL0_POSN                                 0x0
#define _SMT1SIG_SSEL0_POSITION                             0x0
#define _SMT1SIG_SSEL0_SIZE                                 0x1
#define _SMT1SIG_SSEL0_LENGTH                               0x1
#define _SMT1SIG_SSEL0_MASK                                 0x1
#define _SMT1SIG_SSEL1_POSN                                 0x1
#define _SMT1SIG_SSEL1_POSITION                             0x1
#define _SMT1SIG_SSEL1_SIZE                                 0x1
#define _SMT1SIG_SSEL1_LENGTH                               0x1
#define _SMT1SIG_SSEL1_MASK                                 0x2
#define _SMT1SIG_SSEL2_POSN                                 0x2
#define _SMT1SIG_SSEL2_POSITION                             0x2
#define _SMT1SIG_SSEL2_SIZE                                 0x1
#define _SMT1SIG_SSEL2_LENGTH                               0x1
#define _SMT1SIG_SSEL2_MASK                                 0x4
#define _SMT1SIG_SSEL3_POSN                                 0x3
#define _SMT1SIG_SSEL3_POSITION                             0x3
#define _SMT1SIG_SSEL3_SIZE                                 0x1
#define _SMT1SIG_SSEL3_LENGTH                               0x1
#define _SMT1SIG_SSEL3_MASK                                 0x8
#define _SMT1SIG_SSEL4_POSN                                 0x4
#define _SMT1SIG_SSEL4_POSITION                             0x4
#define _SMT1SIG_SSEL4_SIZE                                 0x1
#define _SMT1SIG_SSEL4_LENGTH                               0x1
#define _SMT1SIG_SSEL4_MASK                                 0x10
#define _SMT1SIG_SMT1SSEL_POSN                              0x0
#define _SMT1SIG_SMT1SSEL_POSITION                          0x0
#define _SMT1SIG_SMT1SSEL_SIZE                              0x8
#define _SMT1SIG_SMT1SSEL_LENGTH                            0x8
#define _SMT1SIG_SMT1SSEL_MASK                              0xFF
#define _SMT1SIG_SMT1SSEL0_POSN                             0x0
#define _SMT1SIG_SMT1SSEL0_POSITION                         0x0
#define _SMT1SIG_SMT1SSEL0_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL0_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL0_MASK                             0x1
#define _SMT1SIG_SMT1SSEL1_POSN                             0x1
#define _SMT1SIG_SMT1SSEL1_POSITION                         0x1
#define _SMT1SIG_SMT1SSEL1_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL1_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL1_MASK                             0x2
#define _SMT1SIG_SMT1SSEL2_POSN                             0x2
#define _SMT1SIG_SMT1SSEL2_POSITION                         0x2
#define _SMT1SIG_SMT1SSEL2_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL2_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL2_MASK                             0x4
#define _SMT1SIG_SMT1SSEL3_POSN                             0x3
#define _SMT1SIG_SMT1SSEL3_POSITION                         0x3
#define _SMT1SIG_SMT1SSEL3_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL3_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL3_MASK                             0x8
#define _SMT1SIG_SMT1SSEL4_POSN                             0x4
#define _SMT1SIG_SMT1SSEL4_POSITION                         0x4
#define _SMT1SIG_SMT1SSEL4_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL4_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL4_MASK                             0x10

// Register: SMT1WIN
#define SMT1WIN SMT1WIN
extern volatile unsigned char           SMT1WIN             __at(0xD9D);
#ifndef _LIB_BUILD
asm("SMT1WIN equ 0D9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :8;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT1WSEL               :8;
    };
    struct {
        unsigned SMT1WSEL0              :1;
        unsigned SMT1WSEL1              :1;
        unsigned SMT1WSEL2              :1;
        unsigned SMT1WSEL3              :1;
        unsigned SMT1WSEL4              :1;
    };
} SMT1WINbits_t;
extern volatile SMT1WINbits_t SMT1WINbits __at(0xD9D);
// bitfield macros
#define _SMT1WIN_WSEL_POSN                                  0x0
#define _SMT1WIN_WSEL_POSITION                              0x0
#define _SMT1WIN_WSEL_SIZE                                  0x8
#define _SMT1WIN_WSEL_LENGTH                                0x8
#define _SMT1WIN_WSEL_MASK                                  0xFF
#define _SMT1WIN_WSEL0_POSN                                 0x0
#define _SMT1WIN_WSEL0_POSITION                             0x0
#define _SMT1WIN_WSEL0_SIZE                                 0x1
#define _SMT1WIN_WSEL0_LENGTH                               0x1
#define _SMT1WIN_WSEL0_MASK                                 0x1
#define _SMT1WIN_WSEL1_POSN                                 0x1
#define _SMT1WIN_WSEL1_POSITION                             0x1
#define _SMT1WIN_WSEL1_SIZE                                 0x1
#define _SMT1WIN_WSEL1_LENGTH                               0x1
#define _SMT1WIN_WSEL1_MASK                                 0x2
#define _SMT1WIN_WSEL2_POSN                                 0x2
#define _SMT1WIN_WSEL2_POSITION                             0x2
#define _SMT1WIN_WSEL2_SIZE                                 0x1
#define _SMT1WIN_WSEL2_LENGTH                               0x1
#define _SMT1WIN_WSEL2_MASK                                 0x4
#define _SMT1WIN_WSEL3_POSN                                 0x3
#define _SMT1WIN_WSEL3_POSITION                             0x3
#define _SMT1WIN_WSEL3_SIZE                                 0x1
#define _SMT1WIN_WSEL3_LENGTH                               0x1
#define _SMT1WIN_WSEL3_MASK                                 0x8
#define _SMT1WIN_WSEL4_POSN                                 0x4
#define _SMT1WIN_WSEL4_POSITION                             0x4
#define _SMT1WIN_WSEL4_SIZE                                 0x1
#define _SMT1WIN_WSEL4_LENGTH                               0x1
#define _SMT1WIN_WSEL4_MASK                                 0x10
#define _SMT1WIN_SMT1WSEL_POSN                              0x0
#define _SMT1WIN_SMT1WSEL_POSITION                          0x0
#define _SMT1WIN_SMT1WSEL_SIZE                              0x8
#define _SMT1WIN_SMT1WSEL_LENGTH                            0x8
#define _SMT1WIN_SMT1WSEL_MASK                              0xFF
#define _SMT1WIN_SMT1WSEL0_POSN                             0x0
#define _SMT1WIN_SMT1WSEL0_POSITION                         0x0
#define _SMT1WIN_SMT1WSEL0_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL0_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL0_MASK                             0x1
#define _SMT1WIN_SMT1WSEL1_POSN                             0x1
#define _SMT1WIN_SMT1WSEL1_POSITION                         0x1
#define _SMT1WIN_SMT1WSEL1_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL1_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL1_MASK                             0x2
#define _SMT1WIN_SMT1WSEL2_POSN                             0x2
#define _SMT1WIN_SMT1WSEL2_POSITION                         0x2
#define _SMT1WIN_SMT1WSEL2_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL2_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL2_MASK                             0x4
#define _SMT1WIN_SMT1WSEL3_POSN                             0x3
#define _SMT1WIN_SMT1WSEL3_POSITION                         0x3
#define _SMT1WIN_SMT1WSEL3_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL3_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL3_MASK                             0x8
#define _SMT1WIN_SMT1WSEL4_POSN                             0x4
#define _SMT1WIN_SMT1WSEL4_POSITION                         0x4
#define _SMT1WIN_SMT1WSEL4_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL4_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL4_MASK                             0x10

// Register: SMT2TMR
#define SMT2TMR SMT2TMR
#ifndef __CCI__
extern volatile __uint24                SMT2TMR             __at(0xD9E);
#endif
#ifndef _LIB_BUILD
asm("SMT2TMR equ 0D9Eh");
#endif

// Register: SMT2TMRL
#define SMT2TMRL SMT2TMRL
extern volatile unsigned char           SMT2TMRL            __at(0xD9E);
#ifndef _LIB_BUILD
asm("SMT2TMRL equ 0D9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR0               :1;
        unsigned SMT2TMR1               :1;
        unsigned SMT2TMR2               :1;
        unsigned SMT2TMR3               :1;
        unsigned SMT2TMR4               :1;
        unsigned SMT2TMR5               :1;
        unsigned SMT2TMR6               :1;
        unsigned SMT2TMR7               :1;
    };
} SMT2TMRLbits_t;
extern volatile SMT2TMRLbits_t SMT2TMRLbits __at(0xD9E);
// bitfield macros
#define _SMT2TMRL_SMT2TMR_POSN                              0x0
#define _SMT2TMRL_SMT2TMR_POSITION                          0x0
#define _SMT2TMRL_SMT2TMR_SIZE                              0x8
#define _SMT2TMRL_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRL_SMT2TMR_MASK                              0xFF
#define _SMT2TMRL_SMT2TMR0_POSN                             0x0
#define _SMT2TMRL_SMT2TMR0_POSITION                         0x0
#define _SMT2TMRL_SMT2TMR0_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR0_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR0_MASK                             0x1
#define _SMT2TMRL_SMT2TMR1_POSN                             0x1
#define _SMT2TMRL_SMT2TMR1_POSITION                         0x1
#define _SMT2TMRL_SMT2TMR1_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR1_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR1_MASK                             0x2
#define _SMT2TMRL_SMT2TMR2_POSN                             0x2
#define _SMT2TMRL_SMT2TMR2_POSITION                         0x2
#define _SMT2TMRL_SMT2TMR2_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR2_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR2_MASK                             0x4
#define _SMT2TMRL_SMT2TMR3_POSN                             0x3
#define _SMT2TMRL_SMT2TMR3_POSITION                         0x3
#define _SMT2TMRL_SMT2TMR3_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR3_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR3_MASK                             0x8
#define _SMT2TMRL_SMT2TMR4_POSN                             0x4
#define _SMT2TMRL_SMT2TMR4_POSITION                         0x4
#define _SMT2TMRL_SMT2TMR4_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR4_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR4_MASK                             0x10
#define _SMT2TMRL_SMT2TMR5_POSN                             0x5
#define _SMT2TMRL_SMT2TMR5_POSITION                         0x5
#define _SMT2TMRL_SMT2TMR5_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR5_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR5_MASK                             0x20
#define _SMT2TMRL_SMT2TMR6_POSN                             0x6
#define _SMT2TMRL_SMT2TMR6_POSITION                         0x6
#define _SMT2TMRL_SMT2TMR6_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR6_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR6_MASK                             0x40
#define _SMT2TMRL_SMT2TMR7_POSN                             0x7
#define _SMT2TMRL_SMT2TMR7_POSITION                         0x7
#define _SMT2TMRL_SMT2TMR7_SIZE                             0x1
#define _SMT2TMRL_SMT2TMR7_LENGTH                           0x1
#define _SMT2TMRL_SMT2TMR7_MASK                             0x80

// Register: SMT2TMRH
#define SMT2TMRH SMT2TMRH
extern volatile unsigned char           SMT2TMRH            __at(0xD9F);
#ifndef _LIB_BUILD
asm("SMT2TMRH equ 0D9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR8               :1;
        unsigned SMT2TMR9               :1;
        unsigned SMT2TMR10              :1;
        unsigned SMT2TMR11              :1;
        unsigned SMT2TMR12              :1;
        unsigned SMT2TMR13              :1;
        unsigned SMT2TMR14              :1;
        unsigned SMT2TMR15              :1;
    };
} SMT2TMRHbits_t;
extern volatile SMT2TMRHbits_t SMT2TMRHbits __at(0xD9F);
// bitfield macros
#define _SMT2TMRH_SMT2TMR_POSN                              0x0
#define _SMT2TMRH_SMT2TMR_POSITION                          0x0
#define _SMT2TMRH_SMT2TMR_SIZE                              0x8
#define _SMT2TMRH_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRH_SMT2TMR_MASK                              0xFF
#define _SMT2TMRH_SMT2TMR8_POSN                             0x0
#define _SMT2TMRH_SMT2TMR8_POSITION                         0x0
#define _SMT2TMRH_SMT2TMR8_SIZE                             0x1
#define _SMT2TMRH_SMT2TMR8_LENGTH                           0x1
#define _SMT2TMRH_SMT2TMR8_MASK                             0x1
#define _SMT2TMRH_SMT2TMR9_POSN                             0x1
#define _SMT2TMRH_SMT2TMR9_POSITION                         0x1
#define _SMT2TMRH_SMT2TMR9_SIZE                             0x1
#define _SMT2TMRH_SMT2TMR9_LENGTH                           0x1
#define _SMT2TMRH_SMT2TMR9_MASK                             0x2
#define _SMT2TMRH_SMT2TMR10_POSN                            0x2
#define _SMT2TMRH_SMT2TMR10_POSITION                        0x2
#define _SMT2TMRH_SMT2TMR10_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR10_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR10_MASK                            0x4
#define _SMT2TMRH_SMT2TMR11_POSN                            0x3
#define _SMT2TMRH_SMT2TMR11_POSITION                        0x3
#define _SMT2TMRH_SMT2TMR11_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR11_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR11_MASK                            0x8
#define _SMT2TMRH_SMT2TMR12_POSN                            0x4
#define _SMT2TMRH_SMT2TMR12_POSITION                        0x4
#define _SMT2TMRH_SMT2TMR12_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR12_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR12_MASK                            0x10
#define _SMT2TMRH_SMT2TMR13_POSN                            0x5
#define _SMT2TMRH_SMT2TMR13_POSITION                        0x5
#define _SMT2TMRH_SMT2TMR13_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR13_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR13_MASK                            0x20
#define _SMT2TMRH_SMT2TMR14_POSN                            0x6
#define _SMT2TMRH_SMT2TMR14_POSITION                        0x6
#define _SMT2TMRH_SMT2TMR14_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR14_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR14_MASK                            0x40
#define _SMT2TMRH_SMT2TMR15_POSN                            0x7
#define _SMT2TMRH_SMT2TMR15_POSITION                        0x7
#define _SMT2TMRH_SMT2TMR15_SIZE                            0x1
#define _SMT2TMRH_SMT2TMR15_LENGTH                          0x1
#define _SMT2TMRH_SMT2TMR15_MASK                            0x80

// Register: SMT2TMRU
#define SMT2TMRU SMT2TMRU
extern volatile unsigned char           SMT2TMRU            __at(0xDA0);
#ifndef _LIB_BUILD
asm("SMT2TMRU equ 0DA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2TMR                :8;
    };
    struct {
        unsigned SMT2TMR16              :1;
        unsigned SMT2TMR17              :1;
        unsigned SMT2TMR18              :1;
        unsigned SMT2TMR19              :1;
        unsigned SMT2TMR20              :1;
        unsigned SMT2TMR21              :1;
        unsigned SMT2TMR22              :1;
        unsigned SMT2TMR23              :1;
    };
} SMT2TMRUbits_t;
extern volatile SMT2TMRUbits_t SMT2TMRUbits __at(0xDA0);
// bitfield macros
#define _SMT2TMRU_SMT2TMR_POSN                              0x0
#define _SMT2TMRU_SMT2TMR_POSITION                          0x0
#define _SMT2TMRU_SMT2TMR_SIZE                              0x8
#define _SMT2TMRU_SMT2TMR_LENGTH                            0x8
#define _SMT2TMRU_SMT2TMR_MASK                              0xFF
#define _SMT2TMRU_SMT2TMR16_POSN                            0x0
#define _SMT2TMRU_SMT2TMR16_POSITION                        0x0
#define _SMT2TMRU_SMT2TMR16_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR16_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR16_MASK                            0x1
#define _SMT2TMRU_SMT2TMR17_POSN                            0x1
#define _SMT2TMRU_SMT2TMR17_POSITION                        0x1
#define _SMT2TMRU_SMT2TMR17_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR17_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR17_MASK                            0x2
#define _SMT2TMRU_SMT2TMR18_POSN                            0x2
#define _SMT2TMRU_SMT2TMR18_POSITION                        0x2
#define _SMT2TMRU_SMT2TMR18_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR18_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR18_MASK                            0x4
#define _SMT2TMRU_SMT2TMR19_POSN                            0x3
#define _SMT2TMRU_SMT2TMR19_POSITION                        0x3
#define _SMT2TMRU_SMT2TMR19_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR19_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR19_MASK                            0x8
#define _SMT2TMRU_SMT2TMR20_POSN                            0x4
#define _SMT2TMRU_SMT2TMR20_POSITION                        0x4
#define _SMT2TMRU_SMT2TMR20_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR20_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR20_MASK                            0x10
#define _SMT2TMRU_SMT2TMR21_POSN                            0x5
#define _SMT2TMRU_SMT2TMR21_POSITION                        0x5
#define _SMT2TMRU_SMT2TMR21_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR21_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR21_MASK                            0x20
#define _SMT2TMRU_SMT2TMR22_POSN                            0x6
#define _SMT2TMRU_SMT2TMR22_POSITION                        0x6
#define _SMT2TMRU_SMT2TMR22_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR22_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR22_MASK                            0x40
#define _SMT2TMRU_SMT2TMR23_POSN                            0x7
#define _SMT2TMRU_SMT2TMR23_POSITION                        0x7
#define _SMT2TMRU_SMT2TMR23_SIZE                            0x1
#define _SMT2TMRU_SMT2TMR23_LENGTH                          0x1
#define _SMT2TMRU_SMT2TMR23_MASK                            0x80

// Register: SMT2CPR
#define SMT2CPR SMT2CPR
#ifndef __CCI__
extern volatile __uint24                SMT2CPR             __at(0xDA1);
#endif
#ifndef _LIB_BUILD
asm("SMT2CPR equ 0DA1h");
#endif

// Register: SMT2CPRL
#define SMT2CPRL SMT2CPRL
extern volatile unsigned char           SMT2CPRL            __at(0xDA1);
#ifndef _LIB_BUILD
asm("SMT2CPRL equ 0DA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPR                :8;
    };
    struct {
        unsigned SMT2CPR0               :1;
        unsigned SMT2CPR1               :1;
        unsigned SMT2CPR2               :1;
        unsigned SMT2CPR3               :1;
        unsigned SMT2CPR4               :1;
        unsigned SMT2CPR5               :1;
        unsigned SMT2CPR6               :1;
        unsigned SMT2CPR7               :1;
    };
} SMT2CPRLbits_t;
extern volatile SMT2CPRLbits_t SMT2CPRLbits __at(0xDA1);
// bitfield macros
#define _SMT2CPRL_SMT2CPR_POSN                              0x0
#define _SMT2CPRL_SMT2CPR_POSITION                          0x0
#define _SMT2CPRL_SMT2CPR_SIZE                              0x8
#define _SMT2CPRL_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRL_SMT2CPR_MASK                              0xFF
#define _SMT2CPRL_SMT2CPR0_POSN                             0x0
#define _SMT2CPRL_SMT2CPR0_POSITION                         0x0
#define _SMT2CPRL_SMT2CPR0_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR0_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR0_MASK                             0x1
#define _SMT2CPRL_SMT2CPR1_POSN                             0x1
#define _SMT2CPRL_SMT2CPR1_POSITION                         0x1
#define _SMT2CPRL_SMT2CPR1_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR1_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR1_MASK                             0x2
#define _SMT2CPRL_SMT2CPR2_POSN                             0x2
#define _SMT2CPRL_SMT2CPR2_POSITION                         0x2
#define _SMT2CPRL_SMT2CPR2_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR2_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR2_MASK                             0x4
#define _SMT2CPRL_SMT2CPR3_POSN                             0x3
#define _SMT2CPRL_SMT2CPR3_POSITION                         0x3
#define _SMT2CPRL_SMT2CPR3_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR3_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR3_MASK                             0x8
#define _SMT2CPRL_SMT2CPR4_POSN                             0x4
#define _SMT2CPRL_SMT2CPR4_POSITION                         0x4
#define _SMT2CPRL_SMT2CPR4_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR4_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR4_MASK                             0x10
#define _SMT2CPRL_SMT2CPR5_POSN                             0x5
#define _SMT2CPRL_SMT2CPR5_POSITION                         0x5
#define _SMT2CPRL_SMT2CPR5_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR5_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR5_MASK                             0x20
#define _SMT2CPRL_SMT2CPR6_POSN                             0x6
#define _SMT2CPRL_SMT2CPR6_POSITION                         0x6
#define _SMT2CPRL_SMT2CPR6_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR6_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR6_MASK                             0x40
#define _SMT2CPRL_SMT2CPR7_POSN                             0x7
#define _SMT2CPRL_SMT2CPR7_POSITION                         0x7
#define _SMT2CPRL_SMT2CPR7_SIZE                             0x1
#define _SMT2CPRL_SMT2CPR7_LENGTH                           0x1
#define _SMT2CPRL_SMT2CPR7_MASK                             0x80

// Register: SMT2CPRH
#define SMT2CPRH SMT2CPRH
extern volatile unsigned char           SMT2CPRH            __at(0xDA2);
#ifndef _LIB_BUILD
asm("SMT2CPRH equ 0DA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPR                :8;
    };
    struct {
        unsigned SMT2CPR8               :1;
        unsigned SMT2CPR9               :1;
        unsigned SMT2CPR10              :1;
        unsigned SMT2CPR11              :1;
        unsigned SMT2CPR12              :1;
        unsigned SMT2CPR13              :1;
        unsigned SMT2CPR14              :1;
        unsigned SMT2CPR15              :1;
    };
} SMT2CPRHbits_t;
extern volatile SMT2CPRHbits_t SMT2CPRHbits __at(0xDA2);
// bitfield macros
#define _SMT2CPRH_SMT2CPR_POSN                              0x0
#define _SMT2CPRH_SMT2CPR_POSITION                          0x0
#define _SMT2CPRH_SMT2CPR_SIZE                              0x8
#define _SMT2CPRH_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRH_SMT2CPR_MASK                              0xFF
#define _SMT2CPRH_SMT2CPR8_POSN                             0x0
#define _SMT2CPRH_SMT2CPR8_POSITION                         0x0
#define _SMT2CPRH_SMT2CPR8_SIZE                             0x1
#define _SMT2CPRH_SMT2CPR8_LENGTH                           0x1
#define _SMT2CPRH_SMT2CPR8_MASK                             0x1
#define _SMT2CPRH_SMT2CPR9_POSN                             0x1
#define _SMT2CPRH_SMT2CPR9_POSITION                         0x1
#define _SMT2CPRH_SMT2CPR9_SIZE                             0x1
#define _SMT2CPRH_SMT2CPR9_LENGTH                           0x1
#define _SMT2CPRH_SMT2CPR9_MASK                             0x2
#define _SMT2CPRH_SMT2CPR10_POSN                            0x2
#define _SMT2CPRH_SMT2CPR10_POSITION                        0x2
#define _SMT2CPRH_SMT2CPR10_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR10_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR10_MASK                            0x4
#define _SMT2CPRH_SMT2CPR11_POSN                            0x3
#define _SMT2CPRH_SMT2CPR11_POSITION                        0x3
#define _SMT2CPRH_SMT2CPR11_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR11_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR11_MASK                            0x8
#define _SMT2CPRH_SMT2CPR12_POSN                            0x4
#define _SMT2CPRH_SMT2CPR12_POSITION                        0x4
#define _SMT2CPRH_SMT2CPR12_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR12_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR12_MASK                            0x10
#define _SMT2CPRH_SMT2CPR13_POSN                            0x5
#define _SMT2CPRH_SMT2CPR13_POSITION                        0x5
#define _SMT2CPRH_SMT2CPR13_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR13_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR13_MASK                            0x20
#define _SMT2CPRH_SMT2CPR14_POSN                            0x6
#define _SMT2CPRH_SMT2CPR14_POSITION                        0x6
#define _SMT2CPRH_SMT2CPR14_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR14_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR14_MASK                            0x40
#define _SMT2CPRH_SMT2CPR15_POSN                            0x7
#define _SMT2CPRH_SMT2CPR15_POSITION                        0x7
#define _SMT2CPRH_SMT2CPR15_SIZE                            0x1
#define _SMT2CPRH_SMT2CPR15_LENGTH                          0x1
#define _SMT2CPRH_SMT2CPR15_MASK                            0x80

// Register: SMT2CPRU
#define SMT2CPRU SMT2CPRU
extern volatile unsigned char           SMT2CPRU            __at(0xDA3);
#ifndef _LIB_BUILD
asm("SMT2CPRU equ 0DA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPR                :8;
    };
    struct {
        unsigned SMT2CPR16              :1;
        unsigned SMT2CPR17              :1;
        unsigned SMT2CPR18              :1;
        unsigned SMT2CPR19              :1;
        unsigned SMT2CPR20              :1;
        unsigned SMT2CPR21              :1;
        unsigned SMT2CPR22              :1;
        unsigned SMT2CPR23              :1;
    };
} SMT2CPRUbits_t;
extern volatile SMT2CPRUbits_t SMT2CPRUbits __at(0xDA3);
// bitfield macros
#define _SMT2CPRU_SMT2CPR_POSN                              0x0
#define _SMT2CPRU_SMT2CPR_POSITION                          0x0
#define _SMT2CPRU_SMT2CPR_SIZE                              0x8
#define _SMT2CPRU_SMT2CPR_LENGTH                            0x8
#define _SMT2CPRU_SMT2CPR_MASK                              0xFF
#define _SMT2CPRU_SMT2CPR16_POSN                            0x0
#define _SMT2CPRU_SMT2CPR16_POSITION                        0x0
#define _SMT2CPRU_SMT2CPR16_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR16_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR16_MASK                            0x1
#define _SMT2CPRU_SMT2CPR17_POSN                            0x1
#define _SMT2CPRU_SMT2CPR17_POSITION                        0x1
#define _SMT2CPRU_SMT2CPR17_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR17_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR17_MASK                            0x2
#define _SMT2CPRU_SMT2CPR18_POSN                            0x2
#define _SMT2CPRU_SMT2CPR18_POSITION                        0x2
#define _SMT2CPRU_SMT2CPR18_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR18_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR18_MASK                            0x4
#define _SMT2CPRU_SMT2CPR19_POSN                            0x3
#define _SMT2CPRU_SMT2CPR19_POSITION                        0x3
#define _SMT2CPRU_SMT2CPR19_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR19_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR19_MASK                            0x8
#define _SMT2CPRU_SMT2CPR20_POSN                            0x4
#define _SMT2CPRU_SMT2CPR20_POSITION                        0x4
#define _SMT2CPRU_SMT2CPR20_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR20_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR20_MASK                            0x10
#define _SMT2CPRU_SMT2CPR21_POSN                            0x5
#define _SMT2CPRU_SMT2CPR21_POSITION                        0x5
#define _SMT2CPRU_SMT2CPR21_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR21_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR21_MASK                            0x20
#define _SMT2CPRU_SMT2CPR22_POSN                            0x6
#define _SMT2CPRU_SMT2CPR22_POSITION                        0x6
#define _SMT2CPRU_SMT2CPR22_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR22_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR22_MASK                            0x40
#define _SMT2CPRU_SMT2CPR23_POSN                            0x7
#define _SMT2CPRU_SMT2CPR23_POSITION                        0x7
#define _SMT2CPRU_SMT2CPR23_SIZE                            0x1
#define _SMT2CPRU_SMT2CPR23_LENGTH                          0x1
#define _SMT2CPRU_SMT2CPR23_MASK                            0x80

// Register: SMT2CPW
#define SMT2CPW SMT2CPW
#ifndef __CCI__
extern volatile __uint24                SMT2CPW             __at(0xDA4);
#endif
#ifndef _LIB_BUILD
asm("SMT2CPW equ 0DA4h");
#endif

// Register: SMT2CPWL
#define SMT2CPWL SMT2CPWL
extern volatile unsigned char           SMT2CPWL            __at(0xDA4);
#ifndef _LIB_BUILD
asm("SMT2CPWL equ 0DA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW0               :1;
        unsigned SMT2CPW1               :1;
        unsigned SMT2CPW2               :1;
        unsigned SMT2CPW3               :1;
        unsigned SMT2CPW4               :1;
        unsigned SMT2CPW5               :1;
        unsigned SMT2CPW6               :1;
        unsigned SMT2CPW7               :1;
    };
} SMT2CPWLbits_t;
extern volatile SMT2CPWLbits_t SMT2CPWLbits __at(0xDA4);
// bitfield macros
#define _SMT2CPWL_SMT2CPW_POSN                              0x0
#define _SMT2CPWL_SMT2CPW_POSITION                          0x0
#define _SMT2CPWL_SMT2CPW_SIZE                              0x8
#define _SMT2CPWL_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWL_SMT2CPW_MASK                              0xFF
#define _SMT2CPWL_SMT2CPW0_POSN                             0x0
#define _SMT2CPWL_SMT2CPW0_POSITION                         0x0
#define _SMT2CPWL_SMT2CPW0_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW0_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW0_MASK                             0x1
#define _SMT2CPWL_SMT2CPW1_POSN                             0x1
#define _SMT2CPWL_SMT2CPW1_POSITION                         0x1
#define _SMT2CPWL_SMT2CPW1_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW1_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW1_MASK                             0x2
#define _SMT2CPWL_SMT2CPW2_POSN                             0x2
#define _SMT2CPWL_SMT2CPW2_POSITION                         0x2
#define _SMT2CPWL_SMT2CPW2_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW2_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW2_MASK                             0x4
#define _SMT2CPWL_SMT2CPW3_POSN                             0x3
#define _SMT2CPWL_SMT2CPW3_POSITION                         0x3
#define _SMT2CPWL_SMT2CPW3_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW3_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW3_MASK                             0x8
#define _SMT2CPWL_SMT2CPW4_POSN                             0x4
#define _SMT2CPWL_SMT2CPW4_POSITION                         0x4
#define _SMT2CPWL_SMT2CPW4_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW4_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW4_MASK                             0x10
#define _SMT2CPWL_SMT2CPW5_POSN                             0x5
#define _SMT2CPWL_SMT2CPW5_POSITION                         0x5
#define _SMT2CPWL_SMT2CPW5_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW5_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW5_MASK                             0x20
#define _SMT2CPWL_SMT2CPW6_POSN                             0x6
#define _SMT2CPWL_SMT2CPW6_POSITION                         0x6
#define _SMT2CPWL_SMT2CPW6_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW6_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW6_MASK                             0x40
#define _SMT2CPWL_SMT2CPW7_POSN                             0x7
#define _SMT2CPWL_SMT2CPW7_POSITION                         0x7
#define _SMT2CPWL_SMT2CPW7_SIZE                             0x1
#define _SMT2CPWL_SMT2CPW7_LENGTH                           0x1
#define _SMT2CPWL_SMT2CPW7_MASK                             0x80

// Register: SMT2CPWH
#define SMT2CPWH SMT2CPWH
extern volatile unsigned char           SMT2CPWH            __at(0xDA5);
#ifndef _LIB_BUILD
asm("SMT2CPWH equ 0DA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW8               :1;
        unsigned SMT2CPW9               :1;
        unsigned SMT2CPW10              :1;
        unsigned SMT2CPW11              :1;
        unsigned SMT2CPW12              :1;
        unsigned SMT2CPW13              :1;
        unsigned SMT2CPW14              :1;
        unsigned SMT2CPW15              :1;
    };
} SMT2CPWHbits_t;
extern volatile SMT2CPWHbits_t SMT2CPWHbits __at(0xDA5);
// bitfield macros
#define _SMT2CPWH_SMT2CPW_POSN                              0x0
#define _SMT2CPWH_SMT2CPW_POSITION                          0x0
#define _SMT2CPWH_SMT2CPW_SIZE                              0x8
#define _SMT2CPWH_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWH_SMT2CPW_MASK                              0xFF
#define _SMT2CPWH_SMT2CPW8_POSN                             0x0
#define _SMT2CPWH_SMT2CPW8_POSITION                         0x0
#define _SMT2CPWH_SMT2CPW8_SIZE                             0x1
#define _SMT2CPWH_SMT2CPW8_LENGTH                           0x1
#define _SMT2CPWH_SMT2CPW8_MASK                             0x1
#define _SMT2CPWH_SMT2CPW9_POSN                             0x1
#define _SMT2CPWH_SMT2CPW9_POSITION                         0x1
#define _SMT2CPWH_SMT2CPW9_SIZE                             0x1
#define _SMT2CPWH_SMT2CPW9_LENGTH                           0x1
#define _SMT2CPWH_SMT2CPW9_MASK                             0x2
#define _SMT2CPWH_SMT2CPW10_POSN                            0x2
#define _SMT2CPWH_SMT2CPW10_POSITION                        0x2
#define _SMT2CPWH_SMT2CPW10_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW10_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW10_MASK                            0x4
#define _SMT2CPWH_SMT2CPW11_POSN                            0x3
#define _SMT2CPWH_SMT2CPW11_POSITION                        0x3
#define _SMT2CPWH_SMT2CPW11_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW11_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW11_MASK                            0x8
#define _SMT2CPWH_SMT2CPW12_POSN                            0x4
#define _SMT2CPWH_SMT2CPW12_POSITION                        0x4
#define _SMT2CPWH_SMT2CPW12_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW12_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW12_MASK                            0x10
#define _SMT2CPWH_SMT2CPW13_POSN                            0x5
#define _SMT2CPWH_SMT2CPW13_POSITION                        0x5
#define _SMT2CPWH_SMT2CPW13_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW13_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW13_MASK                            0x20
#define _SMT2CPWH_SMT2CPW14_POSN                            0x6
#define _SMT2CPWH_SMT2CPW14_POSITION                        0x6
#define _SMT2CPWH_SMT2CPW14_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW14_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW14_MASK                            0x40
#define _SMT2CPWH_SMT2CPW15_POSN                            0x7
#define _SMT2CPWH_SMT2CPW15_POSITION                        0x7
#define _SMT2CPWH_SMT2CPW15_SIZE                            0x1
#define _SMT2CPWH_SMT2CPW15_LENGTH                          0x1
#define _SMT2CPWH_SMT2CPW15_MASK                            0x80

// Register: SMT2CPWU
#define SMT2CPWU SMT2CPWU
extern volatile unsigned char           SMT2CPWU            __at(0xDA6);
#ifndef _LIB_BUILD
asm("SMT2CPWU equ 0DA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2CPW                :8;
    };
    struct {
        unsigned SMT2CPW16              :1;
        unsigned SMT2CPW17              :1;
        unsigned SMT2CPW18              :1;
        unsigned SMT2CPW19              :1;
        unsigned SMT2CPW20              :1;
        unsigned SMT2CPW21              :1;
        unsigned SMT2CPW22              :1;
        unsigned SMT2CPW23              :1;
    };
} SMT2CPWUbits_t;
extern volatile SMT2CPWUbits_t SMT2CPWUbits __at(0xDA6);
// bitfield macros
#define _SMT2CPWU_SMT2CPW_POSN                              0x0
#define _SMT2CPWU_SMT2CPW_POSITION                          0x0
#define _SMT2CPWU_SMT2CPW_SIZE                              0x8
#define _SMT2CPWU_SMT2CPW_LENGTH                            0x8
#define _SMT2CPWU_SMT2CPW_MASK                              0xFF
#define _SMT2CPWU_SMT2CPW16_POSN                            0x0
#define _SMT2CPWU_SMT2CPW16_POSITION                        0x0
#define _SMT2CPWU_SMT2CPW16_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW16_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW16_MASK                            0x1
#define _SMT2CPWU_SMT2CPW17_POSN                            0x1
#define _SMT2CPWU_SMT2CPW17_POSITION                        0x1
#define _SMT2CPWU_SMT2CPW17_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW17_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW17_MASK                            0x2
#define _SMT2CPWU_SMT2CPW18_POSN                            0x2
#define _SMT2CPWU_SMT2CPW18_POSITION                        0x2
#define _SMT2CPWU_SMT2CPW18_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW18_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW18_MASK                            0x4
#define _SMT2CPWU_SMT2CPW19_POSN                            0x3
#define _SMT2CPWU_SMT2CPW19_POSITION                        0x3
#define _SMT2CPWU_SMT2CPW19_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW19_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW19_MASK                            0x8
#define _SMT2CPWU_SMT2CPW20_POSN                            0x4
#define _SMT2CPWU_SMT2CPW20_POSITION                        0x4
#define _SMT2CPWU_SMT2CPW20_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW20_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW20_MASK                            0x10
#define _SMT2CPWU_SMT2CPW21_POSN                            0x5
#define _SMT2CPWU_SMT2CPW21_POSITION                        0x5
#define _SMT2CPWU_SMT2CPW21_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW21_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW21_MASK                            0x20
#define _SMT2CPWU_SMT2CPW22_POSN                            0x6
#define _SMT2CPWU_SMT2CPW22_POSITION                        0x6
#define _SMT2CPWU_SMT2CPW22_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW22_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW22_MASK                            0x40
#define _SMT2CPWU_SMT2CPW23_POSN                            0x7
#define _SMT2CPWU_SMT2CPW23_POSITION                        0x7
#define _SMT2CPWU_SMT2CPW23_SIZE                            0x1
#define _SMT2CPWU_SMT2CPW23_LENGTH                          0x1
#define _SMT2CPWU_SMT2CPW23_MASK                            0x80

// Register: SMT2PR
#define SMT2PR SMT2PR
#ifndef __CCI__
extern volatile __uint24                SMT2PR              __at(0xDA7);
#endif
#ifndef _LIB_BUILD
asm("SMT2PR equ 0DA7h");
#endif

// Register: SMT2PRL
#define SMT2PRL SMT2PRL
extern volatile unsigned char           SMT2PRL             __at(0xDA7);
#ifndef _LIB_BUILD
asm("SMT2PRL equ 0DA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR0                :1;
        unsigned SMT2PR1                :1;
        unsigned SMT2PR2                :1;
        unsigned SMT2PR3                :1;
        unsigned SMT2PR4                :1;
        unsigned SMT2PR5                :1;
        unsigned SMT2PR6                :1;
        unsigned SMT2PR7                :1;
    };
} SMT2PRLbits_t;
extern volatile SMT2PRLbits_t SMT2PRLbits __at(0xDA7);
// bitfield macros
#define _SMT2PRL_SMT2PR_POSN                                0x0
#define _SMT2PRL_SMT2PR_POSITION                            0x0
#define _SMT2PRL_SMT2PR_SIZE                                0x8
#define _SMT2PRL_SMT2PR_LENGTH                              0x8
#define _SMT2PRL_SMT2PR_MASK                                0xFF
#define _SMT2PRL_SMT2PR0_POSN                               0x0
#define _SMT2PRL_SMT2PR0_POSITION                           0x0
#define _SMT2PRL_SMT2PR0_SIZE                               0x1
#define _SMT2PRL_SMT2PR0_LENGTH                             0x1
#define _SMT2PRL_SMT2PR0_MASK                               0x1
#define _SMT2PRL_SMT2PR1_POSN                               0x1
#define _SMT2PRL_SMT2PR1_POSITION                           0x1
#define _SMT2PRL_SMT2PR1_SIZE                               0x1
#define _SMT2PRL_SMT2PR1_LENGTH                             0x1
#define _SMT2PRL_SMT2PR1_MASK                               0x2
#define _SMT2PRL_SMT2PR2_POSN                               0x2
#define _SMT2PRL_SMT2PR2_POSITION                           0x2
#define _SMT2PRL_SMT2PR2_SIZE                               0x1
#define _SMT2PRL_SMT2PR2_LENGTH                             0x1
#define _SMT2PRL_SMT2PR2_MASK                               0x4
#define _SMT2PRL_SMT2PR3_POSN                               0x3
#define _SMT2PRL_SMT2PR3_POSITION                           0x3
#define _SMT2PRL_SMT2PR3_SIZE                               0x1
#define _SMT2PRL_SMT2PR3_LENGTH                             0x1
#define _SMT2PRL_SMT2PR3_MASK                               0x8
#define _SMT2PRL_SMT2PR4_POSN                               0x4
#define _SMT2PRL_SMT2PR4_POSITION                           0x4
#define _SMT2PRL_SMT2PR4_SIZE                               0x1
#define _SMT2PRL_SMT2PR4_LENGTH                             0x1
#define _SMT2PRL_SMT2PR4_MASK                               0x10
#define _SMT2PRL_SMT2PR5_POSN                               0x5
#define _SMT2PRL_SMT2PR5_POSITION                           0x5
#define _SMT2PRL_SMT2PR5_SIZE                               0x1
#define _SMT2PRL_SMT2PR5_LENGTH                             0x1
#define _SMT2PRL_SMT2PR5_MASK                               0x20
#define _SMT2PRL_SMT2PR6_POSN                               0x6
#define _SMT2PRL_SMT2PR6_POSITION                           0x6
#define _SMT2PRL_SMT2PR6_SIZE                               0x1
#define _SMT2PRL_SMT2PR6_LENGTH                             0x1
#define _SMT2PRL_SMT2PR6_MASK                               0x40
#define _SMT2PRL_SMT2PR7_POSN                               0x7
#define _SMT2PRL_SMT2PR7_POSITION                           0x7
#define _SMT2PRL_SMT2PR7_SIZE                               0x1
#define _SMT2PRL_SMT2PR7_LENGTH                             0x1
#define _SMT2PRL_SMT2PR7_MASK                               0x80

// Register: SMT2PRH
#define SMT2PRH SMT2PRH
extern volatile unsigned char           SMT2PRH             __at(0xDA8);
#ifndef _LIB_BUILD
asm("SMT2PRH equ 0DA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR8                :1;
        unsigned SMT2PR9                :1;
        unsigned SMT2PR10               :1;
        unsigned SMT2PR11               :1;
        unsigned SMT2PR12               :1;
        unsigned SMT2PR13               :1;
        unsigned SMT2PR14               :1;
        unsigned SMT2PR15               :1;
    };
} SMT2PRHbits_t;
extern volatile SMT2PRHbits_t SMT2PRHbits __at(0xDA8);
// bitfield macros
#define _SMT2PRH_SMT2PR_POSN                                0x0
#define _SMT2PRH_SMT2PR_POSITION                            0x0
#define _SMT2PRH_SMT2PR_SIZE                                0x8
#define _SMT2PRH_SMT2PR_LENGTH                              0x8
#define _SMT2PRH_SMT2PR_MASK                                0xFF
#define _SMT2PRH_SMT2PR8_POSN                               0x0
#define _SMT2PRH_SMT2PR8_POSITION                           0x0
#define _SMT2PRH_SMT2PR8_SIZE                               0x1
#define _SMT2PRH_SMT2PR8_LENGTH                             0x1
#define _SMT2PRH_SMT2PR8_MASK                               0x1
#define _SMT2PRH_SMT2PR9_POSN                               0x1
#define _SMT2PRH_SMT2PR9_POSITION                           0x1
#define _SMT2PRH_SMT2PR9_SIZE                               0x1
#define _SMT2PRH_SMT2PR9_LENGTH                             0x1
#define _SMT2PRH_SMT2PR9_MASK                               0x2
#define _SMT2PRH_SMT2PR10_POSN                              0x2
#define _SMT2PRH_SMT2PR10_POSITION                          0x2
#define _SMT2PRH_SMT2PR10_SIZE                              0x1
#define _SMT2PRH_SMT2PR10_LENGTH                            0x1
#define _SMT2PRH_SMT2PR10_MASK                              0x4
#define _SMT2PRH_SMT2PR11_POSN                              0x3
#define _SMT2PRH_SMT2PR11_POSITION                          0x3
#define _SMT2PRH_SMT2PR11_SIZE                              0x1
#define _SMT2PRH_SMT2PR11_LENGTH                            0x1
#define _SMT2PRH_SMT2PR11_MASK                              0x8
#define _SMT2PRH_SMT2PR12_POSN                              0x4
#define _SMT2PRH_SMT2PR12_POSITION                          0x4
#define _SMT2PRH_SMT2PR12_SIZE                              0x1
#define _SMT2PRH_SMT2PR12_LENGTH                            0x1
#define _SMT2PRH_SMT2PR12_MASK                              0x10
#define _SMT2PRH_SMT2PR13_POSN                              0x5
#define _SMT2PRH_SMT2PR13_POSITION                          0x5
#define _SMT2PRH_SMT2PR13_SIZE                              0x1
#define _SMT2PRH_SMT2PR13_LENGTH                            0x1
#define _SMT2PRH_SMT2PR13_MASK                              0x20
#define _SMT2PRH_SMT2PR14_POSN                              0x6
#define _SMT2PRH_SMT2PR14_POSITION                          0x6
#define _SMT2PRH_SMT2PR14_SIZE                              0x1
#define _SMT2PRH_SMT2PR14_LENGTH                            0x1
#define _SMT2PRH_SMT2PR14_MASK                              0x40
#define _SMT2PRH_SMT2PR15_POSN                              0x7
#define _SMT2PRH_SMT2PR15_POSITION                          0x7
#define _SMT2PRH_SMT2PR15_SIZE                              0x1
#define _SMT2PRH_SMT2PR15_LENGTH                            0x1
#define _SMT2PRH_SMT2PR15_MASK                              0x80

// Register: SMT2PRU
#define SMT2PRU SMT2PRU
extern volatile unsigned char           SMT2PRU             __at(0xDA9);
#ifndef _LIB_BUILD
asm("SMT2PRU equ 0DA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2PR                 :8;
    };
    struct {
        unsigned SMT2PR16               :1;
        unsigned SMT2PR17               :1;
        unsigned SMT2PR18               :1;
        unsigned SMT2PR19               :1;
        unsigned SMT2PR20               :1;
        unsigned SMT2PR21               :1;
        unsigned SMT2PR22               :1;
        unsigned SMT2PR23               :1;
    };
} SMT2PRUbits_t;
extern volatile SMT2PRUbits_t SMT2PRUbits __at(0xDA9);
// bitfield macros
#define _SMT2PRU_SMT2PR_POSN                                0x0
#define _SMT2PRU_SMT2PR_POSITION                            0x0
#define _SMT2PRU_SMT2PR_SIZE                                0x8
#define _SMT2PRU_SMT2PR_LENGTH                              0x8
#define _SMT2PRU_SMT2PR_MASK                                0xFF
#define _SMT2PRU_SMT2PR16_POSN                              0x0
#define _SMT2PRU_SMT2PR16_POSITION                          0x0
#define _SMT2PRU_SMT2PR16_SIZE                              0x1
#define _SMT2PRU_SMT2PR16_LENGTH                            0x1
#define _SMT2PRU_SMT2PR16_MASK                              0x1
#define _SMT2PRU_SMT2PR17_POSN                              0x1
#define _SMT2PRU_SMT2PR17_POSITION                          0x1
#define _SMT2PRU_SMT2PR17_SIZE                              0x1
#define _SMT2PRU_SMT2PR17_LENGTH                            0x1
#define _SMT2PRU_SMT2PR17_MASK                              0x2
#define _SMT2PRU_SMT2PR18_POSN                              0x2
#define _SMT2PRU_SMT2PR18_POSITION                          0x2
#define _SMT2PRU_SMT2PR18_SIZE                              0x1
#define _SMT2PRU_SMT2PR18_LENGTH                            0x1
#define _SMT2PRU_SMT2PR18_MASK                              0x4
#define _SMT2PRU_SMT2PR19_POSN                              0x3
#define _SMT2PRU_SMT2PR19_POSITION                          0x3
#define _SMT2PRU_SMT2PR19_SIZE                              0x1
#define _SMT2PRU_SMT2PR19_LENGTH                            0x1
#define _SMT2PRU_SMT2PR19_MASK                              0x8
#define _SMT2PRU_SMT2PR20_POSN                              0x4
#define _SMT2PRU_SMT2PR20_POSITION                          0x4
#define _SMT2PRU_SMT2PR20_SIZE                              0x1
#define _SMT2PRU_SMT2PR20_LENGTH                            0x1
#define _SMT2PRU_SMT2PR20_MASK                              0x10
#define _SMT2PRU_SMT2PR21_POSN                              0x5
#define _SMT2PRU_SMT2PR21_POSITION                          0x5
#define _SMT2PRU_SMT2PR21_SIZE                              0x1
#define _SMT2PRU_SMT2PR21_LENGTH                            0x1
#define _SMT2PRU_SMT2PR21_MASK                              0x20
#define _SMT2PRU_SMT2PR22_POSN                              0x6
#define _SMT2PRU_SMT2PR22_POSITION                          0x6
#define _SMT2PRU_SMT2PR22_SIZE                              0x1
#define _SMT2PRU_SMT2PR22_LENGTH                            0x1
#define _SMT2PRU_SMT2PR22_MASK                              0x40
#define _SMT2PRU_SMT2PR23_POSN                              0x7
#define _SMT2PRU_SMT2PR23_POSITION                          0x7
#define _SMT2PRU_SMT2PR23_SIZE                              0x1
#define _SMT2PRU_SMT2PR23_LENGTH                            0x1
#define _SMT2PRU_SMT2PR23_MASK                              0x80

// Register: SMT2CON0
#define SMT2CON0 SMT2CON0
extern volatile unsigned char           SMT2CON0            __at(0xDAA);
#ifndef _LIB_BUILD
asm("SMT2CON0 equ 0DAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2PS                 :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT2PS0                :1;
        unsigned SMT2PS1                :1;
    };
} SMT2CON0bits_t;
extern volatile SMT2CON0bits_t SMT2CON0bits __at(0xDAA);
// bitfield macros
#define _SMT2CON0_SMT2PS_POSN                               0x0
#define _SMT2CON0_SMT2PS_POSITION                           0x0
#define _SMT2CON0_SMT2PS_SIZE                               0x2
#define _SMT2CON0_SMT2PS_LENGTH                             0x2
#define _SMT2CON0_SMT2PS_MASK                               0x3
#define _SMT2CON0_CPOL_POSN                                 0x2
#define _SMT2CON0_CPOL_POSITION                             0x2
#define _SMT2CON0_CPOL_SIZE                                 0x1
#define _SMT2CON0_CPOL_LENGTH                               0x1
#define _SMT2CON0_CPOL_MASK                                 0x4
#define _SMT2CON0_SPOL_POSN                                 0x3
#define _SMT2CON0_SPOL_POSITION                             0x3
#define _SMT2CON0_SPOL_SIZE                                 0x1
#define _SMT2CON0_SPOL_LENGTH                               0x1
#define _SMT2CON0_SPOL_MASK                                 0x8
#define _SMT2CON0_WPOL_POSN                                 0x4
#define _SMT2CON0_WPOL_POSITION                             0x4
#define _SMT2CON0_WPOL_SIZE                                 0x1
#define _SMT2CON0_WPOL_LENGTH                               0x1
#define _SMT2CON0_WPOL_MASK                                 0x10
#define _SMT2CON0_STP_POSN                                  0x5
#define _SMT2CON0_STP_POSITION                              0x5
#define _SMT2CON0_STP_SIZE                                  0x1
#define _SMT2CON0_STP_LENGTH                                0x1
#define _SMT2CON0_STP_MASK                                  0x20
#define _SMT2CON0_EN_POSN                                   0x7
#define _SMT2CON0_EN_POSITION                               0x7
#define _SMT2CON0_EN_SIZE                                   0x1
#define _SMT2CON0_EN_LENGTH                                 0x1
#define _SMT2CON0_EN_MASK                                   0x80
#define _SMT2CON0_SMT2PS0_POSN                              0x0
#define _SMT2CON0_SMT2PS0_POSITION                          0x0
#define _SMT2CON0_SMT2PS0_SIZE                              0x1
#define _SMT2CON0_SMT2PS0_LENGTH                            0x1
#define _SMT2CON0_SMT2PS0_MASK                              0x1
#define _SMT2CON0_SMT2PS1_POSN                              0x1
#define _SMT2CON0_SMT2PS1_POSITION                          0x1
#define _SMT2CON0_SMT2PS1_SIZE                              0x1
#define _SMT2CON0_SMT2PS1_LENGTH                            0x1
#define _SMT2CON0_SMT2PS1_MASK                              0x2

// Register: SMT2CON1
#define SMT2CON1 SMT2CON1
extern volatile unsigned char           SMT2CON1            __at(0xDAB);
#ifndef _LIB_BUILD
asm("SMT2CON1 equ 0DABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned SMT2GO                 :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned SMT2MODE               :4;
        unsigned                        :2;
        unsigned SMT2REPEAT             :1;
    };
    struct {
        unsigned SMT2MODE0              :1;
        unsigned SMT2MODE1              :1;
        unsigned SMT2MODE2              :1;
        unsigned SMT2MODE3              :1;
    };
} SMT2CON1bits_t;
extern volatile SMT2CON1bits_t SMT2CON1bits __at(0xDAB);
// bitfield macros
#define _SMT2CON1_MODE_POSN                                 0x0
#define _SMT2CON1_MODE_POSITION                             0x0
#define _SMT2CON1_MODE_SIZE                                 0x4
#define _SMT2CON1_MODE_LENGTH                               0x4
#define _SMT2CON1_MODE_MASK                                 0xF
#define _SMT2CON1_REPEAT_POSN                               0x6
#define _SMT2CON1_REPEAT_POSITION                           0x6
#define _SMT2CON1_REPEAT_SIZE                               0x1
#define _SMT2CON1_REPEAT_LENGTH                             0x1
#define _SMT2CON1_REPEAT_MASK                               0x40
#define _SMT2CON1_SMT2GO_POSN                               0x7
#define _SMT2CON1_SMT2GO_POSITION                           0x7
#define _SMT2CON1_SMT2GO_SIZE                               0x1
#define _SMT2CON1_SMT2GO_LENGTH                             0x1
#define _SMT2CON1_SMT2GO_MASK                               0x80
#define _SMT2CON1_MODE0_POSN                                0x0
#define _SMT2CON1_MODE0_POSITION                            0x0
#define _SMT2CON1_MODE0_SIZE                                0x1
#define _SMT2CON1_MODE0_LENGTH                              0x1
#define _SMT2CON1_MODE0_MASK                                0x1
#define _SMT2CON1_MODE1_POSN                                0x1
#define _SMT2CON1_MODE1_POSITION                            0x1
#define _SMT2CON1_MODE1_SIZE                                0x1
#define _SMT2CON1_MODE1_LENGTH                              0x1
#define _SMT2CON1_MODE1_MASK                                0x2
#define _SMT2CON1_MODE2_POSN                                0x2
#define _SMT2CON1_MODE2_POSITION                            0x2
#define _SMT2CON1_MODE2_SIZE                                0x1
#define _SMT2CON1_MODE2_LENGTH                              0x1
#define _SMT2CON1_MODE2_MASK                                0x4
#define _SMT2CON1_MODE3_POSN                                0x3
#define _SMT2CON1_MODE3_POSITION                            0x3
#define _SMT2CON1_MODE3_SIZE                                0x1
#define _SMT2CON1_MODE3_LENGTH                              0x1
#define _SMT2CON1_MODE3_MASK                                0x8
#define _SMT2CON1_SMT2MODE_POSN                             0x0
#define _SMT2CON1_SMT2MODE_POSITION                         0x0
#define _SMT2CON1_SMT2MODE_SIZE                             0x4
#define _SMT2CON1_SMT2MODE_LENGTH                           0x4
#define _SMT2CON1_SMT2MODE_MASK                             0xF
#define _SMT2CON1_SMT2REPEAT_POSN                           0x6
#define _SMT2CON1_SMT2REPEAT_POSITION                       0x6
#define _SMT2CON1_SMT2REPEAT_SIZE                           0x1
#define _SMT2CON1_SMT2REPEAT_LENGTH                         0x1
#define _SMT2CON1_SMT2REPEAT_MASK                           0x40
#define _SMT2CON1_SMT2MODE0_POSN                            0x0
#define _SMT2CON1_SMT2MODE0_POSITION                        0x0
#define _SMT2CON1_SMT2MODE0_SIZE                            0x1
#define _SMT2CON1_SMT2MODE0_LENGTH                          0x1
#define _SMT2CON1_SMT2MODE0_MASK                            0x1
#define _SMT2CON1_SMT2MODE1_POSN                            0x1
#define _SMT2CON1_SMT2MODE1_POSITION                        0x1
#define _SMT2CON1_SMT2MODE1_SIZE                            0x1
#define _SMT2CON1_SMT2MODE1_LENGTH                          0x1
#define _SMT2CON1_SMT2MODE1_MASK                            0x2
#define _SMT2CON1_SMT2MODE2_POSN                            0x2
#define _SMT2CON1_SMT2MODE2_POSITION                        0x2
#define _SMT2CON1_SMT2MODE2_SIZE                            0x1
#define _SMT2CON1_SMT2MODE2_LENGTH                          0x1
#define _SMT2CON1_SMT2MODE2_MASK                            0x4
#define _SMT2CON1_SMT2MODE3_POSN                            0x3
#define _SMT2CON1_SMT2MODE3_POSITION                        0x3
#define _SMT2CON1_SMT2MODE3_SIZE                            0x1
#define _SMT2CON1_SMT2MODE3_LENGTH                          0x1
#define _SMT2CON1_SMT2MODE3_MASK                            0x8

// Register: SMT2STAT
#define SMT2STAT SMT2STAT
extern volatile unsigned char           SMT2STAT            __at(0xDAC);
#ifndef _LIB_BUILD
asm("SMT2STAT equ 0DACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT2AS                 :1;
        unsigned SMT2WS                 :1;
        unsigned SMT2TS                 :1;
        unsigned                        :2;
        unsigned SMT2RESET              :1;
        unsigned SMT2CPWUP              :1;
        unsigned SMT2CPRUP              :1;
    };
} SMT2STATbits_t;
extern volatile SMT2STATbits_t SMT2STATbits __at(0xDAC);
// bitfield macros
#define _SMT2STAT_AS_POSN                                   0x0
#define _SMT2STAT_AS_POSITION                               0x0
#define _SMT2STAT_AS_SIZE                                   0x1
#define _SMT2STAT_AS_LENGTH                                 0x1
#define _SMT2STAT_AS_MASK                                   0x1
#define _SMT2STAT_WS_POSN                                   0x1
#define _SMT2STAT_WS_POSITION                               0x1
#define _SMT2STAT_WS_SIZE                                   0x1
#define _SMT2STAT_WS_LENGTH                                 0x1
#define _SMT2STAT_WS_MASK                                   0x2
#define _SMT2STAT_TS_POSN                                   0x2
#define _SMT2STAT_TS_POSITION                               0x2
#define _SMT2STAT_TS_SIZE                                   0x1
#define _SMT2STAT_TS_LENGTH                                 0x1
#define _SMT2STAT_TS_MASK                                   0x4
#define _SMT2STAT_RST_POSN                                  0x5
#define _SMT2STAT_RST_POSITION                              0x5
#define _SMT2STAT_RST_SIZE                                  0x1
#define _SMT2STAT_RST_LENGTH                                0x1
#define _SMT2STAT_RST_MASK                                  0x20
#define _SMT2STAT_CPWUP_POSN                                0x6
#define _SMT2STAT_CPWUP_POSITION                            0x6
#define _SMT2STAT_CPWUP_SIZE                                0x1
#define _SMT2STAT_CPWUP_LENGTH                              0x1
#define _SMT2STAT_CPWUP_MASK                                0x40
#define _SMT2STAT_CPRUP_POSN                                0x7
#define _SMT2STAT_CPRUP_POSITION                            0x7
#define _SMT2STAT_CPRUP_SIZE                                0x1
#define _SMT2STAT_CPRUP_LENGTH                              0x1
#define _SMT2STAT_CPRUP_MASK                                0x80
#define _SMT2STAT_SMT2AS_POSN                               0x0
#define _SMT2STAT_SMT2AS_POSITION                           0x0
#define _SMT2STAT_SMT2AS_SIZE                               0x1
#define _SMT2STAT_SMT2AS_LENGTH                             0x1
#define _SMT2STAT_SMT2AS_MASK                               0x1
#define _SMT2STAT_SMT2WS_POSN                               0x1
#define _SMT2STAT_SMT2WS_POSITION                           0x1
#define _SMT2STAT_SMT2WS_SIZE                               0x1
#define _SMT2STAT_SMT2WS_LENGTH                             0x1
#define _SMT2STAT_SMT2WS_MASK                               0x2
#define _SMT2STAT_SMT2TS_POSN                               0x2
#define _SMT2STAT_SMT2TS_POSITION                           0x2
#define _SMT2STAT_SMT2TS_SIZE                               0x1
#define _SMT2STAT_SMT2TS_LENGTH                             0x1
#define _SMT2STAT_SMT2TS_MASK                               0x4
#define _SMT2STAT_SMT2RESET_POSN                            0x5
#define _SMT2STAT_SMT2RESET_POSITION                        0x5
#define _SMT2STAT_SMT2RESET_SIZE                            0x1
#define _SMT2STAT_SMT2RESET_LENGTH                          0x1
#define _SMT2STAT_SMT2RESET_MASK                            0x20
#define _SMT2STAT_SMT2CPWUP_POSN                            0x6
#define _SMT2STAT_SMT2CPWUP_POSITION                        0x6
#define _SMT2STAT_SMT2CPWUP_SIZE                            0x1
#define _SMT2STAT_SMT2CPWUP_LENGTH                          0x1
#define _SMT2STAT_SMT2CPWUP_MASK                            0x40
#define _SMT2STAT_SMT2CPRUP_POSN                            0x7
#define _SMT2STAT_SMT2CPRUP_POSITION                        0x7
#define _SMT2STAT_SMT2CPRUP_SIZE                            0x1
#define _SMT2STAT_SMT2CPRUP_LENGTH                          0x1
#define _SMT2STAT_SMT2CPRUP_MASK                            0x80

// Register: SMT2CLK
#define SMT2CLK SMT2CLK
extern volatile unsigned char           SMT2CLK             __at(0xDAD);
#ifndef _LIB_BUILD
asm("SMT2CLK equ 0DADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :8;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT2CSEL               :8;
    };
    struct {
        unsigned SMT2CSEL0              :1;
        unsigned SMT2CSEL1              :1;
        unsigned SMT2CSEL2              :1;
    };
} SMT2CLKbits_t;
extern volatile SMT2CLKbits_t SMT2CLKbits __at(0xDAD);
// bitfield macros
#define _SMT2CLK_CSEL_POSN                                  0x0
#define _SMT2CLK_CSEL_POSITION                              0x0
#define _SMT2CLK_CSEL_SIZE                                  0x8
#define _SMT2CLK_CSEL_LENGTH                                0x8
#define _SMT2CLK_CSEL_MASK                                  0xFF
#define _SMT2CLK_CSEL0_POSN                                 0x0
#define _SMT2CLK_CSEL0_POSITION                             0x0
#define _SMT2CLK_CSEL0_SIZE                                 0x1
#define _SMT2CLK_CSEL0_LENGTH                               0x1
#define _SMT2CLK_CSEL0_MASK                                 0x1
#define _SMT2CLK_CSEL1_POSN                                 0x1
#define _SMT2CLK_CSEL1_POSITION                             0x1
#define _SMT2CLK_CSEL1_SIZE                                 0x1
#define _SMT2CLK_CSEL1_LENGTH                               0x1
#define _SMT2CLK_CSEL1_MASK                                 0x2
#define _SMT2CLK_CSEL2_POSN                                 0x2
#define _SMT2CLK_CSEL2_POSITION                             0x2
#define _SMT2CLK_CSEL2_SIZE                                 0x1
#define _SMT2CLK_CSEL2_LENGTH                               0x1
#define _SMT2CLK_CSEL2_MASK                                 0x4
#define _SMT2CLK_SMT2CSEL_POSN                              0x0
#define _SMT2CLK_SMT2CSEL_POSITION                          0x0
#define _SMT2CLK_SMT2CSEL_SIZE                              0x8
#define _SMT2CLK_SMT2CSEL_LENGTH                            0x8
#define _SMT2CLK_SMT2CSEL_MASK                              0xFF
#define _SMT2CLK_SMT2CSEL0_POSN                             0x0
#define _SMT2CLK_SMT2CSEL0_POSITION                         0x0
#define _SMT2CLK_SMT2CSEL0_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL0_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL0_MASK                             0x1
#define _SMT2CLK_SMT2CSEL1_POSN                             0x1
#define _SMT2CLK_SMT2CSEL1_POSITION                         0x1
#define _SMT2CLK_SMT2CSEL1_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL1_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL1_MASK                             0x2
#define _SMT2CLK_SMT2CSEL2_POSN                             0x2
#define _SMT2CLK_SMT2CSEL2_POSITION                         0x2
#define _SMT2CLK_SMT2CSEL2_SIZE                             0x1
#define _SMT2CLK_SMT2CSEL2_LENGTH                           0x1
#define _SMT2CLK_SMT2CSEL2_MASK                             0x4

// Register: SMT2SIG
#define SMT2SIG SMT2SIG
extern volatile unsigned char           SMT2SIG             __at(0xDAE);
#ifndef _LIB_BUILD
asm("SMT2SIG equ 0DAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :8;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT2SSEL               :8;
    };
    struct {
        unsigned SMT2SSEL0              :1;
        unsigned SMT2SSEL1              :1;
        unsigned SMT2SSEL2              :1;
        unsigned SMT2SSEL3              :1;
        unsigned SMT2SSEL4              :1;
    };
} SMT2SIGbits_t;
extern volatile SMT2SIGbits_t SMT2SIGbits __at(0xDAE);
// bitfield macros
#define _SMT2SIG_SSEL_POSN                                  0x0
#define _SMT2SIG_SSEL_POSITION                              0x0
#define _SMT2SIG_SSEL_SIZE                                  0x8
#define _SMT2SIG_SSEL_LENGTH                                0x8
#define _SMT2SIG_SSEL_MASK                                  0xFF
#define _SMT2SIG_SSEL0_POSN                                 0x0
#define _SMT2SIG_SSEL0_POSITION                             0x0
#define _SMT2SIG_SSEL0_SIZE                                 0x1
#define _SMT2SIG_SSEL0_LENGTH                               0x1
#define _SMT2SIG_SSEL0_MASK                                 0x1
#define _SMT2SIG_SSEL1_POSN                                 0x1
#define _SMT2SIG_SSEL1_POSITION                             0x1
#define _SMT2SIG_SSEL1_SIZE                                 0x1
#define _SMT2SIG_SSEL1_LENGTH                               0x1
#define _SMT2SIG_SSEL1_MASK                                 0x2
#define _SMT2SIG_SSEL2_POSN                                 0x2
#define _SMT2SIG_SSEL2_POSITION                             0x2
#define _SMT2SIG_SSEL2_SIZE                                 0x1
#define _SMT2SIG_SSEL2_LENGTH                               0x1
#define _SMT2SIG_SSEL2_MASK                                 0x4
#define _SMT2SIG_SSEL3_POSN                                 0x3
#define _SMT2SIG_SSEL3_POSITION                             0x3
#define _SMT2SIG_SSEL3_SIZE                                 0x1
#define _SMT2SIG_SSEL3_LENGTH                               0x1
#define _SMT2SIG_SSEL3_MASK                                 0x8
#define _SMT2SIG_SSEL4_POSN                                 0x4
#define _SMT2SIG_SSEL4_POSITION                             0x4
#define _SMT2SIG_SSEL4_SIZE                                 0x1
#define _SMT2SIG_SSEL4_LENGTH                               0x1
#define _SMT2SIG_SSEL4_MASK                                 0x10
#define _SMT2SIG_SMT2SSEL_POSN                              0x0
#define _SMT2SIG_SMT2SSEL_POSITION                          0x0
#define _SMT2SIG_SMT2SSEL_SIZE                              0x8
#define _SMT2SIG_SMT2SSEL_LENGTH                            0x8
#define _SMT2SIG_SMT2SSEL_MASK                              0xFF
#define _SMT2SIG_SMT2SSEL0_POSN                             0x0
#define _SMT2SIG_SMT2SSEL0_POSITION                         0x0
#define _SMT2SIG_SMT2SSEL0_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL0_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL0_MASK                             0x1
#define _SMT2SIG_SMT2SSEL1_POSN                             0x1
#define _SMT2SIG_SMT2SSEL1_POSITION                         0x1
#define _SMT2SIG_SMT2SSEL1_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL1_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL1_MASK                             0x2
#define _SMT2SIG_SMT2SSEL2_POSN                             0x2
#define _SMT2SIG_SMT2SSEL2_POSITION                         0x2
#define _SMT2SIG_SMT2SSEL2_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL2_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL2_MASK                             0x4
#define _SMT2SIG_SMT2SSEL3_POSN                             0x3
#define _SMT2SIG_SMT2SSEL3_POSITION                         0x3
#define _SMT2SIG_SMT2SSEL3_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL3_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL3_MASK                             0x8
#define _SMT2SIG_SMT2SSEL4_POSN                             0x4
#define _SMT2SIG_SMT2SSEL4_POSITION                         0x4
#define _SMT2SIG_SMT2SSEL4_SIZE                             0x1
#define _SMT2SIG_SMT2SSEL4_LENGTH                           0x1
#define _SMT2SIG_SMT2SSEL4_MASK                             0x10

// Register: SMT2WIN
#define SMT2WIN SMT2WIN
extern volatile unsigned char           SMT2WIN             __at(0xDAF);
#ifndef _LIB_BUILD
asm("SMT2WIN equ 0DAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :8;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT2WSEL               :8;
    };
    struct {
        unsigned SMT2WSEL0              :1;
        unsigned SMT2WSEL1              :1;
        unsigned SMT2WSEL2              :1;
        unsigned SMT2WSEL3              :1;
        unsigned SMT2WSEL4              :1;
    };
} SMT2WINbits_t;
extern volatile SMT2WINbits_t SMT2WINbits __at(0xDAF);
// bitfield macros
#define _SMT2WIN_WSEL_POSN                                  0x0
#define _SMT2WIN_WSEL_POSITION                              0x0
#define _SMT2WIN_WSEL_SIZE                                  0x8
#define _SMT2WIN_WSEL_LENGTH                                0x8
#define _SMT2WIN_WSEL_MASK                                  0xFF
#define _SMT2WIN_WSEL0_POSN                                 0x0
#define _SMT2WIN_WSEL0_POSITION                             0x0
#define _SMT2WIN_WSEL0_SIZE                                 0x1
#define _SMT2WIN_WSEL0_LENGTH                               0x1
#define _SMT2WIN_WSEL0_MASK                                 0x1
#define _SMT2WIN_WSEL1_POSN                                 0x1
#define _SMT2WIN_WSEL1_POSITION                             0x1
#define _SMT2WIN_WSEL1_SIZE                                 0x1
#define _SMT2WIN_WSEL1_LENGTH                               0x1
#define _SMT2WIN_WSEL1_MASK                                 0x2
#define _SMT2WIN_WSEL2_POSN                                 0x2
#define _SMT2WIN_WSEL2_POSITION                             0x2
#define _SMT2WIN_WSEL2_SIZE                                 0x1
#define _SMT2WIN_WSEL2_LENGTH                               0x1
#define _SMT2WIN_WSEL2_MASK                                 0x4
#define _SMT2WIN_WSEL3_POSN                                 0x3
#define _SMT2WIN_WSEL3_POSITION                             0x3
#define _SMT2WIN_WSEL3_SIZE                                 0x1
#define _SMT2WIN_WSEL3_LENGTH                               0x1
#define _SMT2WIN_WSEL3_MASK                                 0x8
#define _SMT2WIN_WSEL4_POSN                                 0x4
#define _SMT2WIN_WSEL4_POSITION                             0x4
#define _SMT2WIN_WSEL4_SIZE                                 0x1
#define _SMT2WIN_WSEL4_LENGTH                               0x1
#define _SMT2WIN_WSEL4_MASK                                 0x10
#define _SMT2WIN_SMT2WSEL_POSN                              0x0
#define _SMT2WIN_SMT2WSEL_POSITION                          0x0
#define _SMT2WIN_SMT2WSEL_SIZE                              0x8
#define _SMT2WIN_SMT2WSEL_LENGTH                            0x8
#define _SMT2WIN_SMT2WSEL_MASK                              0xFF
#define _SMT2WIN_SMT2WSEL0_POSN                             0x0
#define _SMT2WIN_SMT2WSEL0_POSITION                         0x0
#define _SMT2WIN_SMT2WSEL0_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL0_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL0_MASK                             0x1
#define _SMT2WIN_SMT2WSEL1_POSN                             0x1
#define _SMT2WIN_SMT2WSEL1_POSITION                         0x1
#define _SMT2WIN_SMT2WSEL1_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL1_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL1_MASK                             0x2
#define _SMT2WIN_SMT2WSEL2_POSN                             0x2
#define _SMT2WIN_SMT2WSEL2_POSITION                         0x2
#define _SMT2WIN_SMT2WSEL2_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL2_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL2_MASK                             0x4
#define _SMT2WIN_SMT2WSEL3_POSN                             0x3
#define _SMT2WIN_SMT2WSEL3_POSITION                         0x3
#define _SMT2WIN_SMT2WSEL3_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL3_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL3_MASK                             0x8
#define _SMT2WIN_SMT2WSEL4_POSN                             0x4
#define _SMT2WIN_SMT2WSEL4_POSITION                         0x4
#define _SMT2WIN_SMT2WSEL4_SIZE                             0x1
#define _SMT2WIN_SMT2WSEL4_LENGTH                           0x1
#define _SMT2WIN_SMT2WSEL4_MASK                             0x10

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0xE0F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0xE0F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0xE10);
#ifndef _LIB_BUILD
asm("INTPPS equ 0E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
        unsigned INTPPS4                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0xE10);
// bitfield macros
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8
#define _INTPPS_INTPPS4_POSN                                0x4
#define _INTPPS_INTPPS4_POSITION                            0x4
#define _INTPPS_INTPPS4_SIZE                                0x1
#define _INTPPS_INTPPS4_LENGTH                              0x1
#define _INTPPS_INTPPS4_MASK                                0x10

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0xE11);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0xE11);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0xE12);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0xE12);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0xE13);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0xE13);
// bitfield macros
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0xE14);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 0E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0xE14);
// bitfield macros
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0xE15);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 0E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0xE15);
// bitfield macros
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: ATINPPS
#define ATINPPS ATINPPS
extern volatile unsigned char           ATINPPS             __at(0xE16);
#ifndef _LIB_BUILD
asm("ATINPPS equ 0E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ATINPPS0               :1;
        unsigned ATINPPS1               :1;
        unsigned ATINPPS2               :1;
        unsigned ATINPPS3               :1;
        unsigned ATINPPS4               :1;
    };
} ATINPPSbits_t;
extern volatile ATINPPSbits_t ATINPPSbits __at(0xE16);
// bitfield macros
#define _ATINPPS_ATINPPS0_POSN                              0x0
#define _ATINPPS_ATINPPS0_POSITION                          0x0
#define _ATINPPS_ATINPPS0_SIZE                              0x1
#define _ATINPPS_ATINPPS0_LENGTH                            0x1
#define _ATINPPS_ATINPPS0_MASK                              0x1
#define _ATINPPS_ATINPPS1_POSN                              0x1
#define _ATINPPS_ATINPPS1_POSITION                          0x1
#define _ATINPPS_ATINPPS1_SIZE                              0x1
#define _ATINPPS_ATINPPS1_LENGTH                            0x1
#define _ATINPPS_ATINPPS1_MASK                              0x2
#define _ATINPPS_ATINPPS2_POSN                              0x2
#define _ATINPPS_ATINPPS2_POSITION                          0x2
#define _ATINPPS_ATINPPS2_SIZE                              0x1
#define _ATINPPS_ATINPPS2_LENGTH                            0x1
#define _ATINPPS_ATINPPS2_MASK                              0x4
#define _ATINPPS_ATINPPS3_POSN                              0x3
#define _ATINPPS_ATINPPS3_POSITION                          0x3
#define _ATINPPS_ATINPPS3_SIZE                              0x1
#define _ATINPPS_ATINPPS3_LENGTH                            0x1
#define _ATINPPS_ATINPPS3_MASK                              0x8
#define _ATINPPS_ATINPPS4_POSN                              0x4
#define _ATINPPS_ATINPPS4_POSITION                          0x4
#define _ATINPPS_ATINPPS4_SIZE                              0x1
#define _ATINPPS_ATINPPS4_LENGTH                            0x1
#define _ATINPPS_ATINPPS4_MASK                              0x10

// Register: CWGINPPS
#define CWGINPPS CWGINPPS
extern volatile unsigned char           CWGINPPS            __at(0xE17);
#ifndef _LIB_BUILD
asm("CWGINPPS equ 0E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
} CWGINPPSbits_t;
extern volatile CWGINPPSbits_t CWGINPPSbits __at(0xE17);
// bitfield macros
#define _CWGINPPS_CWGINPPS0_POSN                            0x0
#define _CWGINPPS_CWGINPPS0_POSITION                        0x0
#define _CWGINPPS_CWGINPPS0_SIZE                            0x1
#define _CWGINPPS_CWGINPPS0_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS0_MASK                            0x1
#define _CWGINPPS_CWGINPPS1_POSN                            0x1
#define _CWGINPPS_CWGINPPS1_POSITION                        0x1
#define _CWGINPPS_CWGINPPS1_SIZE                            0x1
#define _CWGINPPS_CWGINPPS1_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS1_MASK                            0x2
#define _CWGINPPS_CWGINPPS2_POSN                            0x2
#define _CWGINPPS_CWGINPPS2_POSITION                        0x2
#define _CWGINPPS_CWGINPPS2_SIZE                            0x1
#define _CWGINPPS_CWGINPPS2_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS2_MASK                            0x4
#define _CWGINPPS_CWGINPPS3_POSN                            0x3
#define _CWGINPPS_CWGINPPS3_POSITION                        0x3
#define _CWGINPPS_CWGINPPS3_SIZE                            0x1
#define _CWGINPPS_CWGINPPS3_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS3_MASK                            0x8
#define _CWGINPPS_CWGINPPS4_POSN                            0x4
#define _CWGINPPS_CWGINPPS4_POSITION                        0x4
#define _CWGINPPS_CWGINPPS4_SIZE                            0x1
#define _CWGINPPS_CWGINPPS4_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS4_MASK                            0x10

// Register: T2PPS
#define T2PPS T2PPS
extern volatile unsigned char           T2PPS               __at(0xE18);
#ifndef _LIB_BUILD
asm("T2PPS equ 0E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2PPS0                 :1;
        unsigned T2PPS1                 :1;
        unsigned T2PPS2                 :1;
        unsigned T2PPS3                 :1;
        unsigned T2PPS4                 :1;
    };
} T2PPSbits_t;
extern volatile T2PPSbits_t T2PPSbits __at(0xE18);
// bitfield macros
#define _T2PPS_T2PPS0_POSN                                  0x0
#define _T2PPS_T2PPS0_POSITION                              0x0
#define _T2PPS_T2PPS0_SIZE                                  0x1
#define _T2PPS_T2PPS0_LENGTH                                0x1
#define _T2PPS_T2PPS0_MASK                                  0x1
#define _T2PPS_T2PPS1_POSN                                  0x1
#define _T2PPS_T2PPS1_POSITION                              0x1
#define _T2PPS_T2PPS1_SIZE                                  0x1
#define _T2PPS_T2PPS1_LENGTH                                0x1
#define _T2PPS_T2PPS1_MASK                                  0x2
#define _T2PPS_T2PPS2_POSN                                  0x2
#define _T2PPS_T2PPS2_POSITION                              0x2
#define _T2PPS_T2PPS2_SIZE                                  0x1
#define _T2PPS_T2PPS2_LENGTH                                0x1
#define _T2PPS_T2PPS2_MASK                                  0x4
#define _T2PPS_T2PPS3_POSN                                  0x3
#define _T2PPS_T2PPS3_POSITION                              0x3
#define _T2PPS_T2PPS3_SIZE                                  0x1
#define _T2PPS_T2PPS3_LENGTH                                0x1
#define _T2PPS_T2PPS3_MASK                                  0x8
#define _T2PPS_T2PPS4_POSN                                  0x4
#define _T2PPS_T2PPS4_POSITION                              0x4
#define _T2PPS_T2PPS4_SIZE                                  0x1
#define _T2PPS_T2PPS4_LENGTH                                0x1
#define _T2PPS_T2PPS4_MASK                                  0x10

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0xE19);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 0E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3CKIPPS0              :1;
        unsigned T3CKIPPS1              :1;
        unsigned T3CKIPPS2              :1;
        unsigned T3CKIPPS3              :1;
        unsigned T3CKIPPS4              :1;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0xE19);
// bitfield macros
#define _T3CKIPPS_T3CKIPPS0_POSN                            0x0
#define _T3CKIPPS_T3CKIPPS0_POSITION                        0x0
#define _T3CKIPPS_T3CKIPPS0_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS0_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS0_MASK                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSN                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSITION                        0x1
#define _T3CKIPPS_T3CKIPPS1_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS1_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS1_MASK                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSN                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSITION                        0x2
#define _T3CKIPPS_T3CKIPPS2_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS2_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS2_MASK                            0x4
#define _T3CKIPPS_T3CKIPPS3_POSN                            0x3
#define _T3CKIPPS_T3CKIPPS3_POSITION                        0x3
#define _T3CKIPPS_T3CKIPPS3_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS3_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS3_MASK                            0x8
#define _T3CKIPPS_T3CKIPPS4_POSN                            0x4
#define _T3CKIPPS_T3CKIPPS4_POSITION                        0x4
#define _T3CKIPPS_T3CKIPPS4_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS4_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS4_MASK                            0x10

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0xE1A);
#ifndef _LIB_BUILD
asm("T3GPPS equ 0E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GPPS0                :1;
        unsigned T3GPPS1                :1;
        unsigned T3GPPS2                :1;
        unsigned T3GPPS3                :1;
        unsigned T3GPPS4                :1;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0xE1A);
// bitfield macros
#define _T3GPPS_T3GPPS0_POSN                                0x0
#define _T3GPPS_T3GPPS0_POSITION                            0x0
#define _T3GPPS_T3GPPS0_SIZE                                0x1
#define _T3GPPS_T3GPPS0_LENGTH                              0x1
#define _T3GPPS_T3GPPS0_MASK                                0x1
#define _T3GPPS_T3GPPS1_POSN                                0x1
#define _T3GPPS_T3GPPS1_POSITION                            0x1
#define _T3GPPS_T3GPPS1_SIZE                                0x1
#define _T3GPPS_T3GPPS1_LENGTH                              0x1
#define _T3GPPS_T3GPPS1_MASK                                0x2
#define _T3GPPS_T3GPPS2_POSN                                0x2
#define _T3GPPS_T3GPPS2_POSITION                            0x2
#define _T3GPPS_T3GPPS2_SIZE                                0x1
#define _T3GPPS_T3GPPS2_LENGTH                              0x1
#define _T3GPPS_T3GPPS2_MASK                                0x4
#define _T3GPPS_T3GPPS3_POSN                                0x3
#define _T3GPPS_T3GPPS3_POSITION                            0x3
#define _T3GPPS_T3GPPS3_SIZE                                0x1
#define _T3GPPS_T3GPPS3_LENGTH                              0x1
#define _T3GPPS_T3GPPS3_MASK                                0x8
#define _T3GPPS_T3GPPS4_POSN                                0x4
#define _T3GPPS_T3GPPS4_POSITION                            0x4
#define _T3GPPS_T3GPPS4_SIZE                                0x1
#define _T3GPPS_T3GPPS4_LENGTH                              0x1
#define _T3GPPS_T3GPPS4_MASK                                0x10

// Register: T4PPS
#define T4PPS T4PPS
extern volatile unsigned char           T4PPS               __at(0xE1B);
#ifndef _LIB_BUILD
asm("T4PPS equ 0E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4PPS0                 :1;
        unsigned T4PPS1                 :1;
        unsigned T4PPS2                 :1;
        unsigned T4PPS3                 :1;
        unsigned T4PPS4                 :1;
    };
} T4PPSbits_t;
extern volatile T4PPSbits_t T4PPSbits __at(0xE1B);
// bitfield macros
#define _T4PPS_T4PPS0_POSN                                  0x0
#define _T4PPS_T4PPS0_POSITION                              0x0
#define _T4PPS_T4PPS0_SIZE                                  0x1
#define _T4PPS_T4PPS0_LENGTH                                0x1
#define _T4PPS_T4PPS0_MASK                                  0x1
#define _T4PPS_T4PPS1_POSN                                  0x1
#define _T4PPS_T4PPS1_POSITION                              0x1
#define _T4PPS_T4PPS1_SIZE                                  0x1
#define _T4PPS_T4PPS1_LENGTH                                0x1
#define _T4PPS_T4PPS1_MASK                                  0x2
#define _T4PPS_T4PPS2_POSN                                  0x2
#define _T4PPS_T4PPS2_POSITION                              0x2
#define _T4PPS_T4PPS2_SIZE                                  0x1
#define _T4PPS_T4PPS2_LENGTH                                0x1
#define _T4PPS_T4PPS2_MASK                                  0x4
#define _T4PPS_T4PPS3_POSN                                  0x3
#define _T4PPS_T4PPS3_POSITION                              0x3
#define _T4PPS_T4PPS3_SIZE                                  0x1
#define _T4PPS_T4PPS3_LENGTH                                0x1
#define _T4PPS_T4PPS3_MASK                                  0x8
#define _T4PPS_T4PPS4_POSN                                  0x4
#define _T4PPS_T4PPS4_POSITION                              0x4
#define _T4PPS_T4PPS4_SIZE                                  0x1
#define _T4PPS_T4PPS4_LENGTH                                0x1
#define _T4PPS_T4PPS4_MASK                                  0x10

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0xE1C);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 0E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5CKIPPS0              :1;
        unsigned T5CKIPPS1              :1;
        unsigned T5CKIPPS2              :1;
        unsigned T5CKIPPS3              :1;
        unsigned T5CKIPPS4              :1;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0xE1C);
// bitfield macros
#define _T5CKIPPS_T5CKIPPS0_POSN                            0x0
#define _T5CKIPPS_T5CKIPPS0_POSITION                        0x0
#define _T5CKIPPS_T5CKIPPS0_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS0_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS0_MASK                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSN                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSITION                        0x1
#define _T5CKIPPS_T5CKIPPS1_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS1_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS1_MASK                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSN                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSITION                        0x2
#define _T5CKIPPS_T5CKIPPS2_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS2_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS2_MASK                            0x4
#define _T5CKIPPS_T5CKIPPS3_POSN                            0x3
#define _T5CKIPPS_T5CKIPPS3_POSITION                        0x3
#define _T5CKIPPS_T5CKIPPS3_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS3_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS3_MASK                            0x8
#define _T5CKIPPS_T5CKIPPS4_POSN                            0x4
#define _T5CKIPPS_T5CKIPPS4_POSITION                        0x4
#define _T5CKIPPS_T5CKIPPS4_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS4_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS4_MASK                            0x10

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0xE1D);
#ifndef _LIB_BUILD
asm("T5GPPS equ 0E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GPPS0                :1;
        unsigned T5GPPS1                :1;
        unsigned T5GPPS2                :1;
        unsigned T5GPPS3                :1;
        unsigned T5GPPS4                :1;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0xE1D);
// bitfield macros
#define _T5GPPS_T5GPPS0_POSN                                0x0
#define _T5GPPS_T5GPPS0_POSITION                            0x0
#define _T5GPPS_T5GPPS0_SIZE                                0x1
#define _T5GPPS_T5GPPS0_LENGTH                              0x1
#define _T5GPPS_T5GPPS0_MASK                                0x1
#define _T5GPPS_T5GPPS1_POSN                                0x1
#define _T5GPPS_T5GPPS1_POSITION                            0x1
#define _T5GPPS_T5GPPS1_SIZE                                0x1
#define _T5GPPS_T5GPPS1_LENGTH                              0x1
#define _T5GPPS_T5GPPS1_MASK                                0x2
#define _T5GPPS_T5GPPS2_POSN                                0x2
#define _T5GPPS_T5GPPS2_POSITION                            0x2
#define _T5GPPS_T5GPPS2_SIZE                                0x1
#define _T5GPPS_T5GPPS2_LENGTH                              0x1
#define _T5GPPS_T5GPPS2_MASK                                0x4
#define _T5GPPS_T5GPPS3_POSN                                0x3
#define _T5GPPS_T5GPPS3_POSITION                            0x3
#define _T5GPPS_T5GPPS3_SIZE                                0x1
#define _T5GPPS_T5GPPS3_LENGTH                              0x1
#define _T5GPPS_T5GPPS3_MASK                                0x8
#define _T5GPPS_T5GPPS4_POSN                                0x4
#define _T5GPPS_T5GPPS4_POSITION                            0x4
#define _T5GPPS_T5GPPS4_SIZE                                0x1
#define _T5GPPS_T5GPPS4_LENGTH                              0x1
#define _T5GPPS_T5GPPS4_MASK                                0x10

// Register: T6PPS
#define T6PPS T6PPS
extern volatile unsigned char           T6PPS               __at(0xE1E);
#ifndef _LIB_BUILD
asm("T6PPS equ 0E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T6PPS0                 :1;
        unsigned T6PPS1                 :1;
        unsigned T6PPS2                 :1;
        unsigned T6PPS3                 :1;
        unsigned T6PPS4                 :1;
    };
} T6PPSbits_t;
extern volatile T6PPSbits_t T6PPSbits __at(0xE1E);
// bitfield macros
#define _T6PPS_T6PPS0_POSN                                  0x0
#define _T6PPS_T6PPS0_POSITION                              0x0
#define _T6PPS_T6PPS0_SIZE                                  0x1
#define _T6PPS_T6PPS0_LENGTH                                0x1
#define _T6PPS_T6PPS0_MASK                                  0x1
#define _T6PPS_T6PPS1_POSN                                  0x1
#define _T6PPS_T6PPS1_POSITION                              0x1
#define _T6PPS_T6PPS1_SIZE                                  0x1
#define _T6PPS_T6PPS1_LENGTH                                0x1
#define _T6PPS_T6PPS1_MASK                                  0x2
#define _T6PPS_T6PPS2_POSN                                  0x2
#define _T6PPS_T6PPS2_POSITION                              0x2
#define _T6PPS_T6PPS2_SIZE                                  0x1
#define _T6PPS_T6PPS2_LENGTH                                0x1
#define _T6PPS_T6PPS2_MASK                                  0x4
#define _T6PPS_T6PPS3_POSN                                  0x3
#define _T6PPS_T6PPS3_POSITION                              0x3
#define _T6PPS_T6PPS3_SIZE                                  0x1
#define _T6PPS_T6PPS3_LENGTH                                0x1
#define _T6PPS_T6PPS3_MASK                                  0x8
#define _T6PPS_T6PPS4_POSN                                  0x4
#define _T6PPS_T6PPS4_POSITION                              0x4
#define _T6PPS_T6PPS4_SIZE                                  0x1
#define _T6PPS_T6PPS4_LENGTH                                0x1
#define _T6PPS_T6PPS4_MASK                                  0x10

// Register: ATCC1PPS
#define ATCC1PPS ATCC1PPS
extern volatile unsigned char           ATCC1PPS            __at(0xE1F);
#ifndef _LIB_BUILD
asm("ATCC1PPS equ 0E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ATCC1PPS0              :1;
        unsigned ATCC1PPS1              :1;
        unsigned ATCC1PPS2              :1;
        unsigned ATCC1PPS3              :1;
        unsigned ATCC1PPS4              :1;
    };
} ATCC1PPSbits_t;
extern volatile ATCC1PPSbits_t ATCC1PPSbits __at(0xE1F);
// bitfield macros
#define _ATCC1PPS_ATCC1PPS0_POSN                            0x0
#define _ATCC1PPS_ATCC1PPS0_POSITION                        0x0
#define _ATCC1PPS_ATCC1PPS0_SIZE                            0x1
#define _ATCC1PPS_ATCC1PPS0_LENGTH                          0x1
#define _ATCC1PPS_ATCC1PPS0_MASK                            0x1
#define _ATCC1PPS_ATCC1PPS1_POSN                            0x1
#define _ATCC1PPS_ATCC1PPS1_POSITION                        0x1
#define _ATCC1PPS_ATCC1PPS1_SIZE                            0x1
#define _ATCC1PPS_ATCC1PPS1_LENGTH                          0x1
#define _ATCC1PPS_ATCC1PPS1_MASK                            0x2
#define _ATCC1PPS_ATCC1PPS2_POSN                            0x2
#define _ATCC1PPS_ATCC1PPS2_POSITION                        0x2
#define _ATCC1PPS_ATCC1PPS2_SIZE                            0x1
#define _ATCC1PPS_ATCC1PPS2_LENGTH                          0x1
#define _ATCC1PPS_ATCC1PPS2_MASK                            0x4
#define _ATCC1PPS_ATCC1PPS3_POSN                            0x3
#define _ATCC1PPS_ATCC1PPS3_POSITION                        0x3
#define _ATCC1PPS_ATCC1PPS3_SIZE                            0x1
#define _ATCC1PPS_ATCC1PPS3_LENGTH                          0x1
#define _ATCC1PPS_ATCC1PPS3_MASK                            0x8
#define _ATCC1PPS_ATCC1PPS4_POSN                            0x4
#define _ATCC1PPS_ATCC1PPS4_POSITION                        0x4
#define _ATCC1PPS_ATCC1PPS4_SIZE                            0x1
#define _ATCC1PPS_ATCC1PPS4_LENGTH                          0x1
#define _ATCC1PPS_ATCC1PPS4_MASK                            0x10

// Register: SSPCLKPPS
#define SSPCLKPPS SSPCLKPPS
extern volatile unsigned char           SSPCLKPPS           __at(0xE20);
#ifndef _LIB_BUILD
asm("SSPCLKPPS equ 0E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPCLKPPS0             :1;
        unsigned SSPCLKPPS1             :1;
        unsigned SSPCLKPPS2             :1;
        unsigned SSPCLKPPS3             :1;
        unsigned SSPCLKPPS4             :1;
    };
} SSPCLKPPSbits_t;
extern volatile SSPCLKPPSbits_t SSPCLKPPSbits __at(0xE20);
// bitfield macros
#define _SSPCLKPPS_SSPCLKPPS0_POSN                          0x0
#define _SSPCLKPPS_SSPCLKPPS0_POSITION                      0x0
#define _SSPCLKPPS_SSPCLKPPS0_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS0_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS0_MASK                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_POSN                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_POSITION                      0x1
#define _SSPCLKPPS_SSPCLKPPS1_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS1_MASK                          0x2
#define _SSPCLKPPS_SSPCLKPPS2_POSN                          0x2
#define _SSPCLKPPS_SSPCLKPPS2_POSITION                      0x2
#define _SSPCLKPPS_SSPCLKPPS2_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS2_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS2_MASK                          0x4
#define _SSPCLKPPS_SSPCLKPPS3_POSN                          0x3
#define _SSPCLKPPS_SSPCLKPPS3_POSITION                      0x3
#define _SSPCLKPPS_SSPCLKPPS3_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS3_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS3_MASK                          0x8
#define _SSPCLKPPS_SSPCLKPPS4_POSN                          0x4
#define _SSPCLKPPS_SSPCLKPPS4_POSITION                      0x4
#define _SSPCLKPPS_SSPCLKPPS4_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS4_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS4_MASK                          0x10

// Register: SSPDATPPS
#define SSPDATPPS SSPDATPPS
extern volatile unsigned char           SSPDATPPS           __at(0xE21);
#ifndef _LIB_BUILD
asm("SSPDATPPS equ 0E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPDATPPS0             :1;
        unsigned SSPDATPPS1             :1;
        unsigned SSPDATPPS2             :1;
        unsigned SSPDATPPS3             :1;
        unsigned SSPDATPPS4             :1;
    };
} SSPDATPPSbits_t;
extern volatile SSPDATPPSbits_t SSPDATPPSbits __at(0xE21);
// bitfield macros
#define _SSPDATPPS_SSPDATPPS0_POSN                          0x0
#define _SSPDATPPS_SSPDATPPS0_POSITION                      0x0
#define _SSPDATPPS_SSPDATPPS0_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS0_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS0_MASK                          0x1
#define _SSPDATPPS_SSPDATPPS1_POSN                          0x1
#define _SSPDATPPS_SSPDATPPS1_POSITION                      0x1
#define _SSPDATPPS_SSPDATPPS1_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS1_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS1_MASK                          0x2
#define _SSPDATPPS_SSPDATPPS2_POSN                          0x2
#define _SSPDATPPS_SSPDATPPS2_POSITION                      0x2
#define _SSPDATPPS_SSPDATPPS2_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS2_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS2_MASK                          0x4
#define _SSPDATPPS_SSPDATPPS3_POSN                          0x3
#define _SSPDATPPS_SSPDATPPS3_POSITION                      0x3
#define _SSPDATPPS_SSPDATPPS3_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS3_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS3_MASK                          0x8
#define _SSPDATPPS_SSPDATPPS4_POSN                          0x4
#define _SSPDATPPS_SSPDATPPS4_POSITION                      0x4
#define _SSPDATPPS_SSPDATPPS4_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS4_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS4_MASK                          0x10

// Register: SSPSSPPS
#define SSPSSPPS SSPSSPPS
extern volatile unsigned char           SSPSSPPS            __at(0xE22);
#ifndef _LIB_BUILD
asm("SSPSSPPS equ 0E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPSSPPS0              :1;
        unsigned SSPSSPPS1              :1;
        unsigned SSPSSPPS2              :1;
        unsigned SSPSSPPS3              :1;
        unsigned SSPSSPPS4              :1;
    };
} SSPSSPPSbits_t;
extern volatile SSPSSPPSbits_t SSPSSPPSbits __at(0xE22);
// bitfield macros
#define _SSPSSPPS_SSPSSPPS0_POSN                            0x0
#define _SSPSSPPS_SSPSSPPS0_POSITION                        0x0
#define _SSPSSPPS_SSPSSPPS0_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS0_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS0_MASK                            0x1
#define _SSPSSPPS_SSPSSPPS1_POSN                            0x1
#define _SSPSSPPS_SSPSSPPS1_POSITION                        0x1
#define _SSPSSPPS_SSPSSPPS1_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS1_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS1_MASK                            0x2
#define _SSPSSPPS_SSPSSPPS2_POSN                            0x2
#define _SSPSSPPS_SSPSSPPS2_POSITION                        0x2
#define _SSPSSPPS_SSPSSPPS2_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS2_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS2_MASK                            0x4
#define _SSPSSPPS_SSPSSPPS3_POSN                            0x3
#define _SSPSSPPS_SSPSSPPS3_POSITION                        0x3
#define _SSPSSPPS_SSPSSPPS3_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS3_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS3_MASK                            0x8
#define _SSPSSPPS_SSPSSPPS4_POSN                            0x4
#define _SSPSSPPS_SSPSSPPS4_POSITION                        0x4
#define _SSPSSPPS_SSPSSPPS4_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS4_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS4_MASK                            0x10

// Register: ATCC2PPS
#define ATCC2PPS ATCC2PPS
extern volatile unsigned char           ATCC2PPS            __at(0xE23);
#ifndef _LIB_BUILD
asm("ATCC2PPS equ 0E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ATCC2PPS0              :1;
        unsigned ATCC2PPS1              :1;
        unsigned ATCC2PPS2              :1;
        unsigned ATCC2PPS3              :1;
        unsigned ATCC2PPS4              :1;
    };
} ATCC2PPSbits_t;
extern volatile ATCC2PPSbits_t ATCC2PPSbits __at(0xE23);
// bitfield macros
#define _ATCC2PPS_ATCC2PPS0_POSN                            0x0
#define _ATCC2PPS_ATCC2PPS0_POSITION                        0x0
#define _ATCC2PPS_ATCC2PPS0_SIZE                            0x1
#define _ATCC2PPS_ATCC2PPS0_LENGTH                          0x1
#define _ATCC2PPS_ATCC2PPS0_MASK                            0x1
#define _ATCC2PPS_ATCC2PPS1_POSN                            0x1
#define _ATCC2PPS_ATCC2PPS1_POSITION                        0x1
#define _ATCC2PPS_ATCC2PPS1_SIZE                            0x1
#define _ATCC2PPS_ATCC2PPS1_LENGTH                          0x1
#define _ATCC2PPS_ATCC2PPS1_MASK                            0x2
#define _ATCC2PPS_ATCC2PPS2_POSN                            0x2
#define _ATCC2PPS_ATCC2PPS2_POSITION                        0x2
#define _ATCC2PPS_ATCC2PPS2_SIZE                            0x1
#define _ATCC2PPS_ATCC2PPS2_LENGTH                          0x1
#define _ATCC2PPS_ATCC2PPS2_MASK                            0x4
#define _ATCC2PPS_ATCC2PPS3_POSN                            0x3
#define _ATCC2PPS_ATCC2PPS3_POSITION                        0x3
#define _ATCC2PPS_ATCC2PPS3_SIZE                            0x1
#define _ATCC2PPS_ATCC2PPS3_LENGTH                          0x1
#define _ATCC2PPS_ATCC2PPS3_MASK                            0x8
#define _ATCC2PPS_ATCC2PPS4_POSN                            0x4
#define _ATCC2PPS_ATCC2PPS4_POSITION                        0x4
#define _ATCC2PPS_ATCC2PPS4_SIZE                            0x1
#define _ATCC2PPS_ATCC2PPS4_LENGTH                          0x1
#define _ATCC2PPS_ATCC2PPS4_MASK                            0x10

// Register: RXPPS
#define RXPPS RXPPS
extern volatile unsigned char           RXPPS               __at(0xE24);
#ifndef _LIB_BUILD
asm("RXPPS equ 0E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXPPS0                 :1;
        unsigned RXPPS1                 :1;
        unsigned RXPPS2                 :1;
        unsigned RXPPS3                 :1;
        unsigned RXPPS4                 :1;
    };
} RXPPSbits_t;
extern volatile RXPPSbits_t RXPPSbits __at(0xE24);
// bitfield macros
#define _RXPPS_RXPPS0_POSN                                  0x0
#define _RXPPS_RXPPS0_POSITION                              0x0
#define _RXPPS_RXPPS0_SIZE                                  0x1
#define _RXPPS_RXPPS0_LENGTH                                0x1
#define _RXPPS_RXPPS0_MASK                                  0x1
#define _RXPPS_RXPPS1_POSN                                  0x1
#define _RXPPS_RXPPS1_POSITION                              0x1
#define _RXPPS_RXPPS1_SIZE                                  0x1
#define _RXPPS_RXPPS1_LENGTH                                0x1
#define _RXPPS_RXPPS1_MASK                                  0x2
#define _RXPPS_RXPPS2_POSN                                  0x2
#define _RXPPS_RXPPS2_POSITION                              0x2
#define _RXPPS_RXPPS2_SIZE                                  0x1
#define _RXPPS_RXPPS2_LENGTH                                0x1
#define _RXPPS_RXPPS2_MASK                                  0x4
#define _RXPPS_RXPPS3_POSN                                  0x3
#define _RXPPS_RXPPS3_POSITION                              0x3
#define _RXPPS_RXPPS3_SIZE                                  0x1
#define _RXPPS_RXPPS3_LENGTH                                0x1
#define _RXPPS_RXPPS3_MASK                                  0x8
#define _RXPPS_RXPPS4_POSN                                  0x4
#define _RXPPS_RXPPS4_POSITION                              0x4
#define _RXPPS_RXPPS4_SIZE                                  0x1
#define _RXPPS_RXPPS4_LENGTH                                0x1
#define _RXPPS_RXPPS4_MASK                                  0x10

// Register: CKPPS
#define CKPPS CKPPS
extern volatile unsigned char           CKPPS               __at(0xE25);
#ifndef _LIB_BUILD
asm("CKPPS equ 0E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPPS0                 :1;
        unsigned CKPPS1                 :1;
        unsigned CKPPS2                 :1;
        unsigned CKPPS3                 :1;
        unsigned CKPPS4                 :1;
    };
} CKPPSbits_t;
extern volatile CKPPSbits_t CKPPSbits __at(0xE25);
// bitfield macros
#define _CKPPS_CKPPS0_POSN                                  0x0
#define _CKPPS_CKPPS0_POSITION                              0x0
#define _CKPPS_CKPPS0_SIZE                                  0x1
#define _CKPPS_CKPPS0_LENGTH                                0x1
#define _CKPPS_CKPPS0_MASK                                  0x1
#define _CKPPS_CKPPS1_POSN                                  0x1
#define _CKPPS_CKPPS1_POSITION                              0x1
#define _CKPPS_CKPPS1_SIZE                                  0x1
#define _CKPPS_CKPPS1_LENGTH                                0x1
#define _CKPPS_CKPPS1_MASK                                  0x2
#define _CKPPS_CKPPS2_POSN                                  0x2
#define _CKPPS_CKPPS2_POSITION                              0x2
#define _CKPPS_CKPPS2_SIZE                                  0x1
#define _CKPPS_CKPPS2_LENGTH                                0x1
#define _CKPPS_CKPPS2_MASK                                  0x4
#define _CKPPS_CKPPS3_POSN                                  0x3
#define _CKPPS_CKPPS3_POSITION                              0x3
#define _CKPPS_CKPPS3_SIZE                                  0x1
#define _CKPPS_CKPPS3_LENGTH                                0x1
#define _CKPPS_CKPPS3_MASK                                  0x8
#define _CKPPS_CKPPS4_POSN                                  0x4
#define _CKPPS_CKPPS4_POSITION                              0x4
#define _CKPPS_CKPPS4_SIZE                                  0x1
#define _CKPPS_CKPPS4_LENGTH                                0x1
#define _CKPPS_CKPPS4_MASK                                  0x10

// Register: SMT1SIGPPS
#define SMT1SIGPPS SMT1SIGPPS
extern volatile unsigned char           SMT1SIGPPS          __at(0xE26);
#ifndef _LIB_BUILD
asm("SMT1SIGPPS equ 0E26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1SIGPPS0            :1;
        unsigned SMT1SIGPPS1            :1;
        unsigned SMT1SIGPPS2            :1;
        unsigned SMT1SIGPPS3            :1;
        unsigned SMT1SIGPPS4            :1;
    };
} SMT1SIGPPSbits_t;
extern volatile SMT1SIGPPSbits_t SMT1SIGPPSbits __at(0xE26);
// bitfield macros
#define _SMT1SIGPPS_SMT1SIGPPS0_POSN                        0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_POSITION                    0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_MASK                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSN                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSITION                    0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_MASK                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSN                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSITION                    0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_MASK                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS3_POSN                        0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_POSITION                    0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_MASK                        0x8
#define _SMT1SIGPPS_SMT1SIGPPS4_POSN                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_POSITION                    0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_MASK                        0x10

// Register: SMT1WINPPS
#define SMT1WINPPS SMT1WINPPS
extern volatile unsigned char           SMT1WINPPS          __at(0xE27);
#ifndef _LIB_BUILD
asm("SMT1WINPPS equ 0E27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMTWINPPS0             :1;
        unsigned SMTWINPPS1             :1;
        unsigned SMTWINPPS2             :1;
        unsigned SMTWINPPS3             :1;
        unsigned SMTWINPPS4             :1;
    };
} SMT1WINPPSbits_t;
extern volatile SMT1WINPPSbits_t SMT1WINPPSbits __at(0xE27);
// bitfield macros
#define _SMT1WINPPS_SMTWINPPS0_POSN                         0x0
#define _SMT1WINPPS_SMTWINPPS0_POSITION                     0x0
#define _SMT1WINPPS_SMTWINPPS0_SIZE                         0x1
#define _SMT1WINPPS_SMTWINPPS0_LENGTH                       0x1
#define _SMT1WINPPS_SMTWINPPS0_MASK                         0x1
#define _SMT1WINPPS_SMTWINPPS1_POSN                         0x1
#define _SMT1WINPPS_SMTWINPPS1_POSITION                     0x1
#define _SMT1WINPPS_SMTWINPPS1_SIZE                         0x1
#define _SMT1WINPPS_SMTWINPPS1_LENGTH                       0x1
#define _SMT1WINPPS_SMTWINPPS1_MASK                         0x2
#define _SMT1WINPPS_SMTWINPPS2_POSN                         0x2
#define _SMT1WINPPS_SMTWINPPS2_POSITION                     0x2
#define _SMT1WINPPS_SMTWINPPS2_SIZE                         0x1
#define _SMT1WINPPS_SMTWINPPS2_LENGTH                       0x1
#define _SMT1WINPPS_SMTWINPPS2_MASK                         0x4
#define _SMT1WINPPS_SMTWINPPS3_POSN                         0x3
#define _SMT1WINPPS_SMTWINPPS3_POSITION                     0x3
#define _SMT1WINPPS_SMTWINPPS3_SIZE                         0x1
#define _SMT1WINPPS_SMTWINPPS3_LENGTH                       0x1
#define _SMT1WINPPS_SMTWINPPS3_MASK                         0x8
#define _SMT1WINPPS_SMTWINPPS4_POSN                         0x4
#define _SMT1WINPPS_SMTWINPPS4_POSITION                     0x4
#define _SMT1WINPPS_SMTWINPPS4_SIZE                         0x1
#define _SMT1WINPPS_SMTWINPPS4_LENGTH                       0x1
#define _SMT1WINPPS_SMTWINPPS4_MASK                         0x10

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0xE28);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 0E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0xE28);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0xE29);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 0E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0xE29);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0xE2A);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 0E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0xE2A);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0xE2B);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 0E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0xE2B);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10

// Register: SMT2SIGPPS
#define SMT2SIGPPS SMT2SIGPPS
extern volatile unsigned char           SMT2SIGPPS          __at(0xE2C);
#ifndef _LIB_BUILD
asm("SMT2SIGPPS equ 0E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2SIGPPS0            :1;
        unsigned SMT2SIGPPS1            :1;
        unsigned SMT2SIGPPS2            :1;
        unsigned SMT2SIGPPS3            :1;
        unsigned SMT2SIGPPS4            :1;
    };
} SMT2SIGPPSbits_t;
extern volatile SMT2SIGPPSbits_t SMT2SIGPPSbits __at(0xE2C);
// bitfield macros
#define _SMT2SIGPPS_SMT2SIGPPS0_POSN                        0x0
#define _SMT2SIGPPS_SMT2SIGPPS0_POSITION                    0x0
#define _SMT2SIGPPS_SMT2SIGPPS0_SIZE                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS0_LENGTH                      0x1
#define _SMT2SIGPPS_SMT2SIGPPS0_MASK                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS1_POSN                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS1_POSITION                    0x1
#define _SMT2SIGPPS_SMT2SIGPPS1_SIZE                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS1_LENGTH                      0x1
#define _SMT2SIGPPS_SMT2SIGPPS1_MASK                        0x2
#define _SMT2SIGPPS_SMT2SIGPPS2_POSN                        0x2
#define _SMT2SIGPPS_SMT2SIGPPS2_POSITION                    0x2
#define _SMT2SIGPPS_SMT2SIGPPS2_SIZE                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS2_LENGTH                      0x1
#define _SMT2SIGPPS_SMT2SIGPPS2_MASK                        0x4
#define _SMT2SIGPPS_SMT2SIGPPS3_POSN                        0x3
#define _SMT2SIGPPS_SMT2SIGPPS3_POSITION                    0x3
#define _SMT2SIGPPS_SMT2SIGPPS3_SIZE                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS3_LENGTH                      0x1
#define _SMT2SIGPPS_SMT2SIGPPS3_MASK                        0x8
#define _SMT2SIGPPS_SMT2SIGPPS4_POSN                        0x4
#define _SMT2SIGPPS_SMT2SIGPPS4_POSITION                    0x4
#define _SMT2SIGPPS_SMT2SIGPPS4_SIZE                        0x1
#define _SMT2SIGPPS_SMT2SIGPPS4_LENGTH                      0x1
#define _SMT2SIGPPS_SMT2SIGPPS4_MASK                        0x10

// Register: SMT2WINPPS
#define SMT2WINPPS SMT2WINPPS
extern volatile unsigned char           SMT2WINPPS          __at(0xE2D);
#ifndef _LIB_BUILD
asm("SMT2WINPPS equ 0E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT2WINPPS0            :1;
        unsigned SMT2WINPPS1            :1;
        unsigned SMT2WINPPS2            :1;
        unsigned SMT2WINPPS3            :1;
        unsigned SMT2WINPPS4            :1;
    };
} SMT2WINPPSbits_t;
extern volatile SMT2WINPPSbits_t SMT2WINPPSbits __at(0xE2D);
// bitfield macros
#define _SMT2WINPPS_SMT2WINPPS0_POSN                        0x0
#define _SMT2WINPPS_SMT2WINPPS0_POSITION                    0x0
#define _SMT2WINPPS_SMT2WINPPS0_SIZE                        0x1
#define _SMT2WINPPS_SMT2WINPPS0_LENGTH                      0x1
#define _SMT2WINPPS_SMT2WINPPS0_MASK                        0x1
#define _SMT2WINPPS_SMT2WINPPS1_POSN                        0x1
#define _SMT2WINPPS_SMT2WINPPS1_POSITION                    0x1
#define _SMT2WINPPS_SMT2WINPPS1_SIZE                        0x1
#define _SMT2WINPPS_SMT2WINPPS1_LENGTH                      0x1
#define _SMT2WINPPS_SMT2WINPPS1_MASK                        0x2
#define _SMT2WINPPS_SMT2WINPPS2_POSN                        0x2
#define _SMT2WINPPS_SMT2WINPPS2_POSITION                    0x2
#define _SMT2WINPPS_SMT2WINPPS2_SIZE                        0x1
#define _SMT2WINPPS_SMT2WINPPS2_LENGTH                      0x1
#define _SMT2WINPPS_SMT2WINPPS2_MASK                        0x4
#define _SMT2WINPPS_SMT2WINPPS3_POSN                        0x3
#define _SMT2WINPPS_SMT2WINPPS3_POSITION                    0x3
#define _SMT2WINPPS_SMT2WINPPS3_SIZE                        0x1
#define _SMT2WINPPS_SMT2WINPPS3_LENGTH                      0x1
#define _SMT2WINPPS_SMT2WINPPS3_MASK                        0x8
#define _SMT2WINPPS_SMT2WINPPS4_POSN                        0x4
#define _SMT2WINPPS_SMT2WINPPS4_POSITION                    0x4
#define _SMT2WINPPS_SMT2WINPPS4_SIZE                        0x1
#define _SMT2WINPPS_SMT2WINPPS4_LENGTH                      0x1
#define _SMT2WINPPS_SMT2WINPPS4_MASK                        0x10

// Register: ATCC3PPS
#define ATCC3PPS ATCC3PPS
extern volatile unsigned char           ATCC3PPS            __at(0xE2E);
#ifndef _LIB_BUILD
asm("ATCC3PPS equ 0E2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ATCC3PPS0              :1;
        unsigned ATCC3PPS1              :1;
        unsigned ATCC3PPS2              :1;
        unsigned ATCC3PPS3              :1;
        unsigned ATCC3PPS4              :1;
    };
} ATCC3PPSbits_t;
extern volatile ATCC3PPSbits_t ATCC3PPSbits __at(0xE2E);
// bitfield macros
#define _ATCC3PPS_ATCC3PPS0_POSN                            0x0
#define _ATCC3PPS_ATCC3PPS0_POSITION                        0x0
#define _ATCC3PPS_ATCC3PPS0_SIZE                            0x1
#define _ATCC3PPS_ATCC3PPS0_LENGTH                          0x1
#define _ATCC3PPS_ATCC3PPS0_MASK                            0x1
#define _ATCC3PPS_ATCC3PPS1_POSN                            0x1
#define _ATCC3PPS_ATCC3PPS1_POSITION                        0x1
#define _ATCC3PPS_ATCC3PPS1_SIZE                            0x1
#define _ATCC3PPS_ATCC3PPS1_LENGTH                          0x1
#define _ATCC3PPS_ATCC3PPS1_MASK                            0x2
#define _ATCC3PPS_ATCC3PPS2_POSN                            0x2
#define _ATCC3PPS_ATCC3PPS2_POSITION                        0x2
#define _ATCC3PPS_ATCC3PPS2_SIZE                            0x1
#define _ATCC3PPS_ATCC3PPS2_LENGTH                          0x1
#define _ATCC3PPS_ATCC3PPS2_MASK                            0x4
#define _ATCC3PPS_ATCC3PPS3_POSN                            0x3
#define _ATCC3PPS_ATCC3PPS3_POSITION                        0x3
#define _ATCC3PPS_ATCC3PPS3_SIZE                            0x1
#define _ATCC3PPS_ATCC3PPS3_LENGTH                          0x1
#define _ATCC3PPS_ATCC3PPS3_MASK                            0x8
#define _ATCC3PPS_ATCC3PPS4_POSN                            0x4
#define _ATCC3PPS_ATCC3PPS4_POSITION                        0x4
#define _ATCC3PPS_ATCC3PPS4_SIZE                            0x1
#define _ATCC3PPS_ATCC3PPS4_LENGTH                          0x1
#define _ATCC3PPS_ATCC3PPS4_MASK                            0x10

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0xE90);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0xE90);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0xE91);
#ifndef _LIB_BUILD
asm("RA1PPS equ 0E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0xE91);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0xE92);
#ifndef _LIB_BUILD
asm("RA2PPS equ 0E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0xE92);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0xE94);
#ifndef _LIB_BUILD
asm("RA4PPS equ 0E94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0xE94);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0xE95);
#ifndef _LIB_BUILD
asm("RA5PPS equ 0E95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0xE95);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0xEA0);
#ifndef _LIB_BUILD
asm("RC0PPS equ 0EA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0xEA0);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0xEA1);
#ifndef _LIB_BUILD
asm("RC1PPS equ 0EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0xEA1);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0xEA2);
#ifndef _LIB_BUILD
asm("RC2PPS equ 0EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0xEA2);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0xEA3);
#ifndef _LIB_BUILD
asm("RC3PPS equ 0EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0xEA3);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0xEA4);
#ifndef _LIB_BUILD
asm("RC4PPS equ 0EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0xEA4);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0xEA5);
#ifndef _LIB_BUILD
asm("RC5PPS equ 0EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0xEA5);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0xF0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 0F0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MLC1OUT                :1;
        unsigned MLC2OUT                :1;
        unsigned MLC3OUT                :1;
        unsigned MLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0xF0F);
// bitfield macros
#define _CLCDATA_MLC1OUT_POSN                               0x0
#define _CLCDATA_MLC1OUT_POSITION                           0x0
#define _CLCDATA_MLC1OUT_SIZE                               0x1
#define _CLCDATA_MLC1OUT_LENGTH                             0x1
#define _CLCDATA_MLC1OUT_MASK                               0x1
#define _CLCDATA_MLC2OUT_POSN                               0x1
#define _CLCDATA_MLC2OUT_POSITION                           0x1
#define _CLCDATA_MLC2OUT_SIZE                               0x1
#define _CLCDATA_MLC2OUT_LENGTH                             0x1
#define _CLCDATA_MLC2OUT_MASK                               0x2
#define _CLCDATA_MLC3OUT_POSN                               0x2
#define _CLCDATA_MLC3OUT_POSITION                           0x2
#define _CLCDATA_MLC3OUT_SIZE                               0x1
#define _CLCDATA_MLC3OUT_LENGTH                             0x1
#define _CLCDATA_MLC3OUT_MASK                               0x4
#define _CLCDATA_MLC4OUT_POSN                               0x3
#define _CLCDATA_MLC4OUT_POSITION                           0x3
#define _CLCDATA_MLC4OUT_SIZE                               0x1
#define _CLCDATA_MLC4OUT_LENGTH                             0x1
#define _CLCDATA_MLC4OUT_MASK                               0x8

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0xF10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 0F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0xF10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0xF11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 0F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0xF11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0xF12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 0F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0xF12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0xF13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 0F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0xF13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0xF14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 0F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0xF14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0xF15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 0F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0xF15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0xF16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 0F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0xF16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0xF17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 0F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0xF17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0xF18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 0F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0xF18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0xF19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 0F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0xF19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0xF1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 0F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0xF1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0xF1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 0F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0xF1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0xF1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 0F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0xF1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0xF1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 0F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0xF1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0xF1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 0F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0xF1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0xF1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 0F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0xF1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0xF20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 0F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0xF20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0xF21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 0F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0xF21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0xF22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 0F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0xF22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0xF23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 0F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0xF23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0xF24);
#ifndef _LIB_BUILD
asm("CLC3CON equ 0F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned                        :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0xF24);
// bitfield macros
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0xF25);
#ifndef _LIB_BUILD
asm("CLC3POL equ 0F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0xF25);
// bitfield macros
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0xF26);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 0F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
        unsigned LC3D1S5                :1;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0xF26);
// bitfield macros
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S5_POSN                              0x5
#define _CLC3SEL0_LC3D1S5_POSITION                          0x5
#define _CLC3SEL0_LC3D1S5_SIZE                              0x1
#define _CLC3SEL0_LC3D1S5_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S5_MASK                              0x20
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10
#define _CLC3SEL0_D1S5_POSN                                 0x5
#define _CLC3SEL0_D1S5_POSITION                             0x5
#define _CLC3SEL0_D1S5_SIZE                                 0x1
#define _CLC3SEL0_D1S5_LENGTH                               0x1
#define _CLC3SEL0_D1S5_MASK                                 0x20

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0xF27);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 0F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
        unsigned LC3D2S5                :1;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0xF27);
// bitfield macros
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S5_POSN                              0x5
#define _CLC3SEL1_LC3D2S5_POSITION                          0x5
#define _CLC3SEL1_LC3D2S5_SIZE                              0x1
#define _CLC3SEL1_LC3D2S5_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S5_MASK                              0x20
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10
#define _CLC3SEL1_D2S5_POSN                                 0x5
#define _CLC3SEL1_D2S5_POSITION                             0x5
#define _CLC3SEL1_D2S5_SIZE                                 0x1
#define _CLC3SEL1_D2S5_LENGTH                               0x1
#define _CLC3SEL1_D2S5_MASK                                 0x20

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0xF28);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 0F28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
        unsigned LC3D3S5                :1;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0xF28);
// bitfield macros
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S5_POSN                              0x5
#define _CLC3SEL2_LC3D3S5_POSITION                          0x5
#define _CLC3SEL2_LC3D3S5_SIZE                              0x1
#define _CLC3SEL2_LC3D3S5_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S5_MASK                              0x20
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10
#define _CLC3SEL2_D3S5_POSN                                 0x5
#define _CLC3SEL2_D3S5_POSITION                             0x5
#define _CLC3SEL2_D3S5_SIZE                                 0x1
#define _CLC3SEL2_D3S5_LENGTH                               0x1
#define _CLC3SEL2_D3S5_MASK                                 0x20

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0xF29);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 0F29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
        unsigned LC3D4S5                :1;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0xF29);
// bitfield macros
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S5_POSN                              0x5
#define _CLC3SEL3_LC3D4S5_POSITION                          0x5
#define _CLC3SEL3_LC3D4S5_SIZE                              0x1
#define _CLC3SEL3_LC3D4S5_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S5_MASK                              0x20
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10
#define _CLC3SEL3_D4S5_POSN                                 0x5
#define _CLC3SEL3_D4S5_POSITION                             0x5
#define _CLC3SEL3_D4S5_SIZE                                 0x1
#define _CLC3SEL3_D4S5_LENGTH                               0x1
#define _CLC3SEL3_D4S5_MASK                                 0x20

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0xF2A);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 0F2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0xF2A);
// bitfield macros
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80
#define _CLC3GLS0_D1N_POSN                                  0x0
#define _CLC3GLS0_D1N_POSITION                              0x0
#define _CLC3GLS0_D1N_SIZE                                  0x1
#define _CLC3GLS0_D1N_LENGTH                                0x1
#define _CLC3GLS0_D1N_MASK                                  0x1
#define _CLC3GLS0_D1T_POSN                                  0x1
#define _CLC3GLS0_D1T_POSITION                              0x1
#define _CLC3GLS0_D1T_SIZE                                  0x1
#define _CLC3GLS0_D1T_LENGTH                                0x1
#define _CLC3GLS0_D1T_MASK                                  0x2
#define _CLC3GLS0_D2N_POSN                                  0x2
#define _CLC3GLS0_D2N_POSITION                              0x2
#define _CLC3GLS0_D2N_SIZE                                  0x1
#define _CLC3GLS0_D2N_LENGTH                                0x1
#define _CLC3GLS0_D2N_MASK                                  0x4
#define _CLC3GLS0_D2T_POSN                                  0x3
#define _CLC3GLS0_D2T_POSITION                              0x3
#define _CLC3GLS0_D2T_SIZE                                  0x1
#define _CLC3GLS0_D2T_LENGTH                                0x1
#define _CLC3GLS0_D2T_MASK                                  0x8
#define _CLC3GLS0_D3N_POSN                                  0x4
#define _CLC3GLS0_D3N_POSITION                              0x4
#define _CLC3GLS0_D3N_SIZE                                  0x1
#define _CLC3GLS0_D3N_LENGTH                                0x1
#define _CLC3GLS0_D3N_MASK                                  0x10
#define _CLC3GLS0_D3T_POSN                                  0x5
#define _CLC3GLS0_D3T_POSITION                              0x5
#define _CLC3GLS0_D3T_SIZE                                  0x1
#define _CLC3GLS0_D3T_LENGTH                                0x1
#define _CLC3GLS0_D3T_MASK                                  0x20
#define _CLC3GLS0_D4N_POSN                                  0x6
#define _CLC3GLS0_D4N_POSITION                              0x6
#define _CLC3GLS0_D4N_SIZE                                  0x1
#define _CLC3GLS0_D4N_LENGTH                                0x1
#define _CLC3GLS0_D4N_MASK                                  0x40
#define _CLC3GLS0_D4T_POSN                                  0x7
#define _CLC3GLS0_D4T_POSITION                              0x7
#define _CLC3GLS0_D4T_SIZE                                  0x1
#define _CLC3GLS0_D4T_LENGTH                                0x1
#define _CLC3GLS0_D4T_MASK                                  0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0xF2B);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 0F2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0xF2B);
// bitfield macros
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80
#define _CLC3GLS1_D1N_POSN                                  0x0
#define _CLC3GLS1_D1N_POSITION                              0x0
#define _CLC3GLS1_D1N_SIZE                                  0x1
#define _CLC3GLS1_D1N_LENGTH                                0x1
#define _CLC3GLS1_D1N_MASK                                  0x1
#define _CLC3GLS1_D1T_POSN                                  0x1
#define _CLC3GLS1_D1T_POSITION                              0x1
#define _CLC3GLS1_D1T_SIZE                                  0x1
#define _CLC3GLS1_D1T_LENGTH                                0x1
#define _CLC3GLS1_D1T_MASK                                  0x2
#define _CLC3GLS1_D2N_POSN                                  0x2
#define _CLC3GLS1_D2N_POSITION                              0x2
#define _CLC3GLS1_D2N_SIZE                                  0x1
#define _CLC3GLS1_D2N_LENGTH                                0x1
#define _CLC3GLS1_D2N_MASK                                  0x4
#define _CLC3GLS1_D2T_POSN                                  0x3
#define _CLC3GLS1_D2T_POSITION                              0x3
#define _CLC3GLS1_D2T_SIZE                                  0x1
#define _CLC3GLS1_D2T_LENGTH                                0x1
#define _CLC3GLS1_D2T_MASK                                  0x8
#define _CLC3GLS1_D3N_POSN                                  0x4
#define _CLC3GLS1_D3N_POSITION                              0x4
#define _CLC3GLS1_D3N_SIZE                                  0x1
#define _CLC3GLS1_D3N_LENGTH                                0x1
#define _CLC3GLS1_D3N_MASK                                  0x10
#define _CLC3GLS1_D3T_POSN                                  0x5
#define _CLC3GLS1_D3T_POSITION                              0x5
#define _CLC3GLS1_D3T_SIZE                                  0x1
#define _CLC3GLS1_D3T_LENGTH                                0x1
#define _CLC3GLS1_D3T_MASK                                  0x20
#define _CLC3GLS1_D4N_POSN                                  0x6
#define _CLC3GLS1_D4N_POSITION                              0x6
#define _CLC3GLS1_D4N_SIZE                                  0x1
#define _CLC3GLS1_D4N_LENGTH                                0x1
#define _CLC3GLS1_D4N_MASK                                  0x40
#define _CLC3GLS1_D4T_POSN                                  0x7
#define _CLC3GLS1_D4T_POSITION                              0x7
#define _CLC3GLS1_D4T_SIZE                                  0x1
#define _CLC3GLS1_D4T_LENGTH                                0x1
#define _CLC3GLS1_D4T_MASK                                  0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0xF2C);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 0F2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0xF2C);
// bitfield macros
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80
#define _CLC3GLS2_D1N_POSN                                  0x0
#define _CLC3GLS2_D1N_POSITION                              0x0
#define _CLC3GLS2_D1N_SIZE                                  0x1
#define _CLC3GLS2_D1N_LENGTH                                0x1
#define _CLC3GLS2_D1N_MASK                                  0x1
#define _CLC3GLS2_D1T_POSN                                  0x1
#define _CLC3GLS2_D1T_POSITION                              0x1
#define _CLC3GLS2_D1T_SIZE                                  0x1
#define _CLC3GLS2_D1T_LENGTH                                0x1
#define _CLC3GLS2_D1T_MASK                                  0x2
#define _CLC3GLS2_D2N_POSN                                  0x2
#define _CLC3GLS2_D2N_POSITION                              0x2
#define _CLC3GLS2_D2N_SIZE                                  0x1
#define _CLC3GLS2_D2N_LENGTH                                0x1
#define _CLC3GLS2_D2N_MASK                                  0x4
#define _CLC3GLS2_D2T_POSN                                  0x3
#define _CLC3GLS2_D2T_POSITION                              0x3
#define _CLC3GLS2_D2T_SIZE                                  0x1
#define _CLC3GLS2_D2T_LENGTH                                0x1
#define _CLC3GLS2_D2T_MASK                                  0x8
#define _CLC3GLS2_D3N_POSN                                  0x4
#define _CLC3GLS2_D3N_POSITION                              0x4
#define _CLC3GLS2_D3N_SIZE                                  0x1
#define _CLC3GLS2_D3N_LENGTH                                0x1
#define _CLC3GLS2_D3N_MASK                                  0x10
#define _CLC3GLS2_D3T_POSN                                  0x5
#define _CLC3GLS2_D3T_POSITION                              0x5
#define _CLC3GLS2_D3T_SIZE                                  0x1
#define _CLC3GLS2_D3T_LENGTH                                0x1
#define _CLC3GLS2_D3T_MASK                                  0x20
#define _CLC3GLS2_D4N_POSN                                  0x6
#define _CLC3GLS2_D4N_POSITION                              0x6
#define _CLC3GLS2_D4N_SIZE                                  0x1
#define _CLC3GLS2_D4N_LENGTH                                0x1
#define _CLC3GLS2_D4N_MASK                                  0x40
#define _CLC3GLS2_D4T_POSN                                  0x7
#define _CLC3GLS2_D4T_POSITION                              0x7
#define _CLC3GLS2_D4T_SIZE                                  0x1
#define _CLC3GLS2_D4T_LENGTH                                0x1
#define _CLC3GLS2_D4T_MASK                                  0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0xF2D);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 0F2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0xF2D);
// bitfield macros
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80

// Register: CLC4CON
#define CLC4CON CLC4CON
extern volatile unsigned char           CLC4CON             __at(0xF2E);
#ifndef _LIB_BUILD
asm("CLC4CON equ 0F2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4MODE                :3;
        unsigned LC4INTN                :1;
        unsigned LC4INTP                :1;
        unsigned LC4OUT                 :1;
        unsigned                        :1;
        unsigned LC4EN                  :1;
    };
    struct {
        unsigned LC4MODE0               :1;
        unsigned LC4MODE1               :1;
        unsigned LC4MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC4CONbits_t;
extern volatile CLC4CONbits_t CLC4CONbits __at(0xF2E);
// bitfield macros
#define _CLC4CON_LC4MODE_POSN                               0x0
#define _CLC4CON_LC4MODE_POSITION                           0x0
#define _CLC4CON_LC4MODE_SIZE                               0x3
#define _CLC4CON_LC4MODE_LENGTH                             0x3
#define _CLC4CON_LC4MODE_MASK                               0x7
#define _CLC4CON_LC4INTN_POSN                               0x3
#define _CLC4CON_LC4INTN_POSITION                           0x3
#define _CLC4CON_LC4INTN_SIZE                               0x1
#define _CLC4CON_LC4INTN_LENGTH                             0x1
#define _CLC4CON_LC4INTN_MASK                               0x8
#define _CLC4CON_LC4INTP_POSN                               0x4
#define _CLC4CON_LC4INTP_POSITION                           0x4
#define _CLC4CON_LC4INTP_SIZE                               0x1
#define _CLC4CON_LC4INTP_LENGTH                             0x1
#define _CLC4CON_LC4INTP_MASK                               0x10
#define _CLC4CON_LC4OUT_POSN                                0x5
#define _CLC4CON_LC4OUT_POSITION                            0x5
#define _CLC4CON_LC4OUT_SIZE                                0x1
#define _CLC4CON_LC4OUT_LENGTH                              0x1
#define _CLC4CON_LC4OUT_MASK                                0x20
#define _CLC4CON_LC4EN_POSN                                 0x7
#define _CLC4CON_LC4EN_POSITION                             0x7
#define _CLC4CON_LC4EN_SIZE                                 0x1
#define _CLC4CON_LC4EN_LENGTH                               0x1
#define _CLC4CON_LC4EN_MASK                                 0x80
#define _CLC4CON_LC4MODE0_POSN                              0x0
#define _CLC4CON_LC4MODE0_POSITION                          0x0
#define _CLC4CON_LC4MODE0_SIZE                              0x1
#define _CLC4CON_LC4MODE0_LENGTH                            0x1
#define _CLC4CON_LC4MODE0_MASK                              0x1
#define _CLC4CON_LC4MODE1_POSN                              0x1
#define _CLC4CON_LC4MODE1_POSITION                          0x1
#define _CLC4CON_LC4MODE1_SIZE                              0x1
#define _CLC4CON_LC4MODE1_LENGTH                            0x1
#define _CLC4CON_LC4MODE1_MASK                              0x2
#define _CLC4CON_LC4MODE2_POSN                              0x2
#define _CLC4CON_LC4MODE2_POSITION                          0x2
#define _CLC4CON_LC4MODE2_SIZE                              0x1
#define _CLC4CON_LC4MODE2_LENGTH                            0x1
#define _CLC4CON_LC4MODE2_MASK                              0x4
#define _CLC4CON_MODE_POSN                                  0x0
#define _CLC4CON_MODE_POSITION                              0x0
#define _CLC4CON_MODE_SIZE                                  0x3
#define _CLC4CON_MODE_LENGTH                                0x3
#define _CLC4CON_MODE_MASK                                  0x7
#define _CLC4CON_INTN_POSN                                  0x3
#define _CLC4CON_INTN_POSITION                              0x3
#define _CLC4CON_INTN_SIZE                                  0x1
#define _CLC4CON_INTN_LENGTH                                0x1
#define _CLC4CON_INTN_MASK                                  0x8
#define _CLC4CON_INTP_POSN                                  0x4
#define _CLC4CON_INTP_POSITION                              0x4
#define _CLC4CON_INTP_SIZE                                  0x1
#define _CLC4CON_INTP_LENGTH                                0x1
#define _CLC4CON_INTP_MASK                                  0x10
#define _CLC4CON_OUT_POSN                                   0x5
#define _CLC4CON_OUT_POSITION                               0x5
#define _CLC4CON_OUT_SIZE                                   0x1
#define _CLC4CON_OUT_LENGTH                                 0x1
#define _CLC4CON_OUT_MASK                                   0x20
#define _CLC4CON_EN_POSN                                    0x7
#define _CLC4CON_EN_POSITION                                0x7
#define _CLC4CON_EN_SIZE                                    0x1
#define _CLC4CON_EN_LENGTH                                  0x1
#define _CLC4CON_EN_MASK                                    0x80
#define _CLC4CON_MODE0_POSN                                 0x0
#define _CLC4CON_MODE0_POSITION                             0x0
#define _CLC4CON_MODE0_SIZE                                 0x1
#define _CLC4CON_MODE0_LENGTH                               0x1
#define _CLC4CON_MODE0_MASK                                 0x1
#define _CLC4CON_MODE1_POSN                                 0x1
#define _CLC4CON_MODE1_POSITION                             0x1
#define _CLC4CON_MODE1_SIZE                                 0x1
#define _CLC4CON_MODE1_LENGTH                               0x1
#define _CLC4CON_MODE1_MASK                                 0x2
#define _CLC4CON_MODE2_POSN                                 0x2
#define _CLC4CON_MODE2_POSITION                             0x2
#define _CLC4CON_MODE2_SIZE                                 0x1
#define _CLC4CON_MODE2_LENGTH                               0x1
#define _CLC4CON_MODE2_MASK                                 0x4

// Register: CLC4POL
#define CLC4POL CLC4POL
extern volatile unsigned char           CLC4POL             __at(0xF2F);
#ifndef _LIB_BUILD
asm("CLC4POL equ 0F2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1POL               :1;
        unsigned LC4G2POL               :1;
        unsigned LC4G3POL               :1;
        unsigned LC4G4POL               :1;
        unsigned                        :3;
        unsigned LC4POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC4POLbits_t;
extern volatile CLC4POLbits_t CLC4POLbits __at(0xF2F);
// bitfield macros
#define _CLC4POL_LC4G1POL_POSN                              0x0
#define _CLC4POL_LC4G1POL_POSITION                          0x0
#define _CLC4POL_LC4G1POL_SIZE                              0x1
#define _CLC4POL_LC4G1POL_LENGTH                            0x1
#define _CLC4POL_LC4G1POL_MASK                              0x1
#define _CLC4POL_LC4G2POL_POSN                              0x1
#define _CLC4POL_LC4G2POL_POSITION                          0x1
#define _CLC4POL_LC4G2POL_SIZE                              0x1
#define _CLC4POL_LC4G2POL_LENGTH                            0x1
#define _CLC4POL_LC4G2POL_MASK                              0x2
#define _CLC4POL_LC4G3POL_POSN                              0x2
#define _CLC4POL_LC4G3POL_POSITION                          0x2
#define _CLC4POL_LC4G3POL_SIZE                              0x1
#define _CLC4POL_LC4G3POL_LENGTH                            0x1
#define _CLC4POL_LC4G3POL_MASK                              0x4
#define _CLC4POL_LC4G4POL_POSN                              0x3
#define _CLC4POL_LC4G4POL_POSITION                          0x3
#define _CLC4POL_LC4G4POL_SIZE                              0x1
#define _CLC4POL_LC4G4POL_LENGTH                            0x1
#define _CLC4POL_LC4G4POL_MASK                              0x8
#define _CLC4POL_LC4POL_POSN                                0x7
#define _CLC4POL_LC4POL_POSITION                            0x7
#define _CLC4POL_LC4POL_SIZE                                0x1
#define _CLC4POL_LC4POL_LENGTH                              0x1
#define _CLC4POL_LC4POL_MASK                                0x80
#define _CLC4POL_G1POL_POSN                                 0x0
#define _CLC4POL_G1POL_POSITION                             0x0
#define _CLC4POL_G1POL_SIZE                                 0x1
#define _CLC4POL_G1POL_LENGTH                               0x1
#define _CLC4POL_G1POL_MASK                                 0x1
#define _CLC4POL_G2POL_POSN                                 0x1
#define _CLC4POL_G2POL_POSITION                             0x1
#define _CLC4POL_G2POL_SIZE                                 0x1
#define _CLC4POL_G2POL_LENGTH                               0x1
#define _CLC4POL_G2POL_MASK                                 0x2
#define _CLC4POL_G3POL_POSN                                 0x2
#define _CLC4POL_G3POL_POSITION                             0x2
#define _CLC4POL_G3POL_SIZE                                 0x1
#define _CLC4POL_G3POL_LENGTH                               0x1
#define _CLC4POL_G3POL_MASK                                 0x4
#define _CLC4POL_G4POL_POSN                                 0x3
#define _CLC4POL_G4POL_POSITION                             0x3
#define _CLC4POL_G4POL_SIZE                                 0x1
#define _CLC4POL_G4POL_LENGTH                               0x1
#define _CLC4POL_G4POL_MASK                                 0x8
#define _CLC4POL_POL_POSN                                   0x7
#define _CLC4POL_POL_POSITION                               0x7
#define _CLC4POL_POL_SIZE                                   0x1
#define _CLC4POL_POL_LENGTH                                 0x1
#define _CLC4POL_POL_MASK                                   0x80

// Register: CLC4SEL0
#define CLC4SEL0 CLC4SEL0
extern volatile unsigned char           CLC4SEL0            __at(0xF30);
#ifndef _LIB_BUILD
asm("CLC4SEL0 equ 0F30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D1S0                :1;
        unsigned LC4D1S1                :1;
        unsigned LC4D1S2                :1;
        unsigned LC4D1S3                :1;
        unsigned LC4D1S4                :1;
        unsigned LC4D1S5                :1;
    };
    struct {
        unsigned LC4D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC4SEL0bits_t;
extern volatile CLC4SEL0bits_t CLC4SEL0bits __at(0xF30);
// bitfield macros
#define _CLC4SEL0_LC4D1S0_POSN                              0x0
#define _CLC4SEL0_LC4D1S0_POSITION                          0x0
#define _CLC4SEL0_LC4D1S0_SIZE                              0x1
#define _CLC4SEL0_LC4D1S0_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S0_MASK                              0x1
#define _CLC4SEL0_LC4D1S1_POSN                              0x1
#define _CLC4SEL0_LC4D1S1_POSITION                          0x1
#define _CLC4SEL0_LC4D1S1_SIZE                              0x1
#define _CLC4SEL0_LC4D1S1_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S1_MASK                              0x2
#define _CLC4SEL0_LC4D1S2_POSN                              0x2
#define _CLC4SEL0_LC4D1S2_POSITION                          0x2
#define _CLC4SEL0_LC4D1S2_SIZE                              0x1
#define _CLC4SEL0_LC4D1S2_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S2_MASK                              0x4
#define _CLC4SEL0_LC4D1S3_POSN                              0x3
#define _CLC4SEL0_LC4D1S3_POSITION                          0x3
#define _CLC4SEL0_LC4D1S3_SIZE                              0x1
#define _CLC4SEL0_LC4D1S3_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S3_MASK                              0x8
#define _CLC4SEL0_LC4D1S4_POSN                              0x4
#define _CLC4SEL0_LC4D1S4_POSITION                          0x4
#define _CLC4SEL0_LC4D1S4_SIZE                              0x1
#define _CLC4SEL0_LC4D1S4_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S4_MASK                              0x10
#define _CLC4SEL0_LC4D1S5_POSN                              0x5
#define _CLC4SEL0_LC4D1S5_POSITION                          0x5
#define _CLC4SEL0_LC4D1S5_SIZE                              0x1
#define _CLC4SEL0_LC4D1S5_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S5_MASK                              0x20
#define _CLC4SEL0_LC4D1S_POSN                               0x0
#define _CLC4SEL0_LC4D1S_POSITION                           0x0
#define _CLC4SEL0_LC4D1S_SIZE                               0x8
#define _CLC4SEL0_LC4D1S_LENGTH                             0x8
#define _CLC4SEL0_LC4D1S_MASK                               0xFF
#define _CLC4SEL0_D1S_POSN                                  0x0
#define _CLC4SEL0_D1S_POSITION                              0x0
#define _CLC4SEL0_D1S_SIZE                                  0x8
#define _CLC4SEL0_D1S_LENGTH                                0x8
#define _CLC4SEL0_D1S_MASK                                  0xFF
#define _CLC4SEL0_D1S0_POSN                                 0x0
#define _CLC4SEL0_D1S0_POSITION                             0x0
#define _CLC4SEL0_D1S0_SIZE                                 0x1
#define _CLC4SEL0_D1S0_LENGTH                               0x1
#define _CLC4SEL0_D1S0_MASK                                 0x1
#define _CLC4SEL0_D1S1_POSN                                 0x1
#define _CLC4SEL0_D1S1_POSITION                             0x1
#define _CLC4SEL0_D1S1_SIZE                                 0x1
#define _CLC4SEL0_D1S1_LENGTH                               0x1
#define _CLC4SEL0_D1S1_MASK                                 0x2
#define _CLC4SEL0_D1S2_POSN                                 0x2
#define _CLC4SEL0_D1S2_POSITION                             0x2
#define _CLC4SEL0_D1S2_SIZE                                 0x1
#define _CLC4SEL0_D1S2_LENGTH                               0x1
#define _CLC4SEL0_D1S2_MASK                                 0x4
#define _CLC4SEL0_D1S3_POSN                                 0x3
#define _CLC4SEL0_D1S3_POSITION                             0x3
#define _CLC4SEL0_D1S3_SIZE                                 0x1
#define _CLC4SEL0_D1S3_LENGTH                               0x1
#define _CLC4SEL0_D1S3_MASK                                 0x8
#define _CLC4SEL0_D1S4_POSN                                 0x4
#define _CLC4SEL0_D1S4_POSITION                             0x4
#define _CLC4SEL0_D1S4_SIZE                                 0x1
#define _CLC4SEL0_D1S4_LENGTH                               0x1
#define _CLC4SEL0_D1S4_MASK                                 0x10
#define _CLC4SEL0_D1S5_POSN                                 0x5
#define _CLC4SEL0_D1S5_POSITION                             0x5
#define _CLC4SEL0_D1S5_SIZE                                 0x1
#define _CLC4SEL0_D1S5_LENGTH                               0x1
#define _CLC4SEL0_D1S5_MASK                                 0x20

// Register: CLC4SEL1
#define CLC4SEL1 CLC4SEL1
extern volatile unsigned char           CLC4SEL1            __at(0xF31);
#ifndef _LIB_BUILD
asm("CLC4SEL1 equ 0F31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D2S0                :1;
        unsigned LC4D2S1                :1;
        unsigned LC4D2S2                :1;
        unsigned LC4D2S3                :1;
        unsigned LC4D2S4                :1;
        unsigned LC4D2S5                :1;
    };
    struct {
        unsigned LC4D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC4SEL1bits_t;
extern volatile CLC4SEL1bits_t CLC4SEL1bits __at(0xF31);
// bitfield macros
#define _CLC4SEL1_LC4D2S0_POSN                              0x0
#define _CLC4SEL1_LC4D2S0_POSITION                          0x0
#define _CLC4SEL1_LC4D2S0_SIZE                              0x1
#define _CLC4SEL1_LC4D2S0_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S0_MASK                              0x1
#define _CLC4SEL1_LC4D2S1_POSN                              0x1
#define _CLC4SEL1_LC4D2S1_POSITION                          0x1
#define _CLC4SEL1_LC4D2S1_SIZE                              0x1
#define _CLC4SEL1_LC4D2S1_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S1_MASK                              0x2
#define _CLC4SEL1_LC4D2S2_POSN                              0x2
#define _CLC4SEL1_LC4D2S2_POSITION                          0x2
#define _CLC4SEL1_LC4D2S2_SIZE                              0x1
#define _CLC4SEL1_LC4D2S2_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S2_MASK                              0x4
#define _CLC4SEL1_LC4D2S3_POSN                              0x3
#define _CLC4SEL1_LC4D2S3_POSITION                          0x3
#define _CLC4SEL1_LC4D2S3_SIZE                              0x1
#define _CLC4SEL1_LC4D2S3_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S3_MASK                              0x8
#define _CLC4SEL1_LC4D2S4_POSN                              0x4
#define _CLC4SEL1_LC4D2S4_POSITION                          0x4
#define _CLC4SEL1_LC4D2S4_SIZE                              0x1
#define _CLC4SEL1_LC4D2S4_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S4_MASK                              0x10
#define _CLC4SEL1_LC4D2S5_POSN                              0x5
#define _CLC4SEL1_LC4D2S5_POSITION                          0x5
#define _CLC4SEL1_LC4D2S5_SIZE                              0x1
#define _CLC4SEL1_LC4D2S5_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S5_MASK                              0x20
#define _CLC4SEL1_LC4D2S_POSN                               0x0
#define _CLC4SEL1_LC4D2S_POSITION                           0x0
#define _CLC4SEL1_LC4D2S_SIZE                               0x8
#define _CLC4SEL1_LC4D2S_LENGTH                             0x8
#define _CLC4SEL1_LC4D2S_MASK                               0xFF
#define _CLC4SEL1_D2S_POSN                                  0x0
#define _CLC4SEL1_D2S_POSITION                              0x0
#define _CLC4SEL1_D2S_SIZE                                  0x8
#define _CLC4SEL1_D2S_LENGTH                                0x8
#define _CLC4SEL1_D2S_MASK                                  0xFF
#define _CLC4SEL1_D2S0_POSN                                 0x0
#define _CLC4SEL1_D2S0_POSITION                             0x0
#define _CLC4SEL1_D2S0_SIZE                                 0x1
#define _CLC4SEL1_D2S0_LENGTH                               0x1
#define _CLC4SEL1_D2S0_MASK                                 0x1
#define _CLC4SEL1_D2S1_POSN                                 0x1
#define _CLC4SEL1_D2S1_POSITION                             0x1
#define _CLC4SEL1_D2S1_SIZE                                 0x1
#define _CLC4SEL1_D2S1_LENGTH                               0x1
#define _CLC4SEL1_D2S1_MASK                                 0x2
#define _CLC4SEL1_D2S2_POSN                                 0x2
#define _CLC4SEL1_D2S2_POSITION                             0x2
#define _CLC4SEL1_D2S2_SIZE                                 0x1
#define _CLC4SEL1_D2S2_LENGTH                               0x1
#define _CLC4SEL1_D2S2_MASK                                 0x4
#define _CLC4SEL1_D2S3_POSN                                 0x3
#define _CLC4SEL1_D2S3_POSITION                             0x3
#define _CLC4SEL1_D2S3_SIZE                                 0x1
#define _CLC4SEL1_D2S3_LENGTH                               0x1
#define _CLC4SEL1_D2S3_MASK                                 0x8
#define _CLC4SEL1_D2S4_POSN                                 0x4
#define _CLC4SEL1_D2S4_POSITION                             0x4
#define _CLC4SEL1_D2S4_SIZE                                 0x1
#define _CLC4SEL1_D2S4_LENGTH                               0x1
#define _CLC4SEL1_D2S4_MASK                                 0x10
#define _CLC4SEL1_D2S5_POSN                                 0x5
#define _CLC4SEL1_D2S5_POSITION                             0x5
#define _CLC4SEL1_D2S5_SIZE                                 0x1
#define _CLC4SEL1_D2S5_LENGTH                               0x1
#define _CLC4SEL1_D2S5_MASK                                 0x20

// Register: CLC4SEL2
#define CLC4SEL2 CLC4SEL2
extern volatile unsigned char           CLC4SEL2            __at(0xF32);
#ifndef _LIB_BUILD
asm("CLC4SEL2 equ 0F32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D3S0                :1;
        unsigned LC4D3S1                :1;
        unsigned LC4D3S2                :1;
        unsigned LC4D3S3                :1;
        unsigned LC4D3S4                :1;
        unsigned LC4D3S5                :1;
    };
    struct {
        unsigned LC4D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC4SEL2bits_t;
extern volatile CLC4SEL2bits_t CLC4SEL2bits __at(0xF32);
// bitfield macros
#define _CLC4SEL2_LC4D3S0_POSN                              0x0
#define _CLC4SEL2_LC4D3S0_POSITION                          0x0
#define _CLC4SEL2_LC4D3S0_SIZE                              0x1
#define _CLC4SEL2_LC4D3S0_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S0_MASK                              0x1
#define _CLC4SEL2_LC4D3S1_POSN                              0x1
#define _CLC4SEL2_LC4D3S1_POSITION                          0x1
#define _CLC4SEL2_LC4D3S1_SIZE                              0x1
#define _CLC4SEL2_LC4D3S1_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S1_MASK                              0x2
#define _CLC4SEL2_LC4D3S2_POSN                              0x2
#define _CLC4SEL2_LC4D3S2_POSITION                          0x2
#define _CLC4SEL2_LC4D3S2_SIZE                              0x1
#define _CLC4SEL2_LC4D3S2_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S2_MASK                              0x4
#define _CLC4SEL2_LC4D3S3_POSN                              0x3
#define _CLC4SEL2_LC4D3S3_POSITION                          0x3
#define _CLC4SEL2_LC4D3S3_SIZE                              0x1
#define _CLC4SEL2_LC4D3S3_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S3_MASK                              0x8
#define _CLC4SEL2_LC4D3S4_POSN                              0x4
#define _CLC4SEL2_LC4D3S4_POSITION                          0x4
#define _CLC4SEL2_LC4D3S4_SIZE                              0x1
#define _CLC4SEL2_LC4D3S4_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S4_MASK                              0x10
#define _CLC4SEL2_LC4D3S5_POSN                              0x5
#define _CLC4SEL2_LC4D3S5_POSITION                          0x5
#define _CLC4SEL2_LC4D3S5_SIZE                              0x1
#define _CLC4SEL2_LC4D3S5_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S5_MASK                              0x20
#define _CLC4SEL2_LC4D3S_POSN                               0x0
#define _CLC4SEL2_LC4D3S_POSITION                           0x0
#define _CLC4SEL2_LC4D3S_SIZE                               0x8
#define _CLC4SEL2_LC4D3S_LENGTH                             0x8
#define _CLC4SEL2_LC4D3S_MASK                               0xFF
#define _CLC4SEL2_D3S_POSN                                  0x0
#define _CLC4SEL2_D3S_POSITION                              0x0
#define _CLC4SEL2_D3S_SIZE                                  0x8
#define _CLC4SEL2_D3S_LENGTH                                0x8
#define _CLC4SEL2_D3S_MASK                                  0xFF
#define _CLC4SEL2_D3S0_POSN                                 0x0
#define _CLC4SEL2_D3S0_POSITION                             0x0
#define _CLC4SEL2_D3S0_SIZE                                 0x1
#define _CLC4SEL2_D3S0_LENGTH                               0x1
#define _CLC4SEL2_D3S0_MASK                                 0x1
#define _CLC4SEL2_D3S1_POSN                                 0x1
#define _CLC4SEL2_D3S1_POSITION                             0x1
#define _CLC4SEL2_D3S1_SIZE                                 0x1
#define _CLC4SEL2_D3S1_LENGTH                               0x1
#define _CLC4SEL2_D3S1_MASK                                 0x2
#define _CLC4SEL2_D3S2_POSN                                 0x2
#define _CLC4SEL2_D3S2_POSITION                             0x2
#define _CLC4SEL2_D3S2_SIZE                                 0x1
#define _CLC4SEL2_D3S2_LENGTH                               0x1
#define _CLC4SEL2_D3S2_MASK                                 0x4
#define _CLC4SEL2_D3S3_POSN                                 0x3
#define _CLC4SEL2_D3S3_POSITION                             0x3
#define _CLC4SEL2_D3S3_SIZE                                 0x1
#define _CLC4SEL2_D3S3_LENGTH                               0x1
#define _CLC4SEL2_D3S3_MASK                                 0x8
#define _CLC4SEL2_D3S4_POSN                                 0x4
#define _CLC4SEL2_D3S4_POSITION                             0x4
#define _CLC4SEL2_D3S4_SIZE                                 0x1
#define _CLC4SEL2_D3S4_LENGTH                               0x1
#define _CLC4SEL2_D3S4_MASK                                 0x10
#define _CLC4SEL2_D3S5_POSN                                 0x5
#define _CLC4SEL2_D3S5_POSITION                             0x5
#define _CLC4SEL2_D3S5_SIZE                                 0x1
#define _CLC4SEL2_D3S5_LENGTH                               0x1
#define _CLC4SEL2_D3S5_MASK                                 0x20

// Register: CLC4SEL3
#define CLC4SEL3 CLC4SEL3
extern volatile unsigned char           CLC4SEL3            __at(0xF33);
#ifndef _LIB_BUILD
asm("CLC4SEL3 equ 0F33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D4S0                :1;
        unsigned LC4D4S1                :1;
        unsigned LC4D4S2                :1;
        unsigned LC4D4S3                :1;
        unsigned LC4D4S4                :1;
        unsigned LC4D4S5                :1;
    };
    struct {
        unsigned LC4D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC4SEL3bits_t;
extern volatile CLC4SEL3bits_t CLC4SEL3bits __at(0xF33);
// bitfield macros
#define _CLC4SEL3_LC4D4S0_POSN                              0x0
#define _CLC4SEL3_LC4D4S0_POSITION                          0x0
#define _CLC4SEL3_LC4D4S0_SIZE                              0x1
#define _CLC4SEL3_LC4D4S0_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S0_MASK                              0x1
#define _CLC4SEL3_LC4D4S1_POSN                              0x1
#define _CLC4SEL3_LC4D4S1_POSITION                          0x1
#define _CLC4SEL3_LC4D4S1_SIZE                              0x1
#define _CLC4SEL3_LC4D4S1_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S1_MASK                              0x2
#define _CLC4SEL3_LC4D4S2_POSN                              0x2
#define _CLC4SEL3_LC4D4S2_POSITION                          0x2
#define _CLC4SEL3_LC4D4S2_SIZE                              0x1
#define _CLC4SEL3_LC4D4S2_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S2_MASK                              0x4
#define _CLC4SEL3_LC4D4S3_POSN                              0x3
#define _CLC4SEL3_LC4D4S3_POSITION                          0x3
#define _CLC4SEL3_LC4D4S3_SIZE                              0x1
#define _CLC4SEL3_LC4D4S3_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S3_MASK                              0x8
#define _CLC4SEL3_LC4D4S4_POSN                              0x4
#define _CLC4SEL3_LC4D4S4_POSITION                          0x4
#define _CLC4SEL3_LC4D4S4_SIZE                              0x1
#define _CLC4SEL3_LC4D4S4_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S4_MASK                              0x10
#define _CLC4SEL3_LC4D4S5_POSN                              0x5
#define _CLC4SEL3_LC4D4S5_POSITION                          0x5
#define _CLC4SEL3_LC4D4S5_SIZE                              0x1
#define _CLC4SEL3_LC4D4S5_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S5_MASK                              0x20
#define _CLC4SEL3_LC4D4S_POSN                               0x0
#define _CLC4SEL3_LC4D4S_POSITION                           0x0
#define _CLC4SEL3_LC4D4S_SIZE                               0x8
#define _CLC4SEL3_LC4D4S_LENGTH                             0x8
#define _CLC4SEL3_LC4D4S_MASK                               0xFF
#define _CLC4SEL3_D4S_POSN                                  0x0
#define _CLC4SEL3_D4S_POSITION                              0x0
#define _CLC4SEL3_D4S_SIZE                                  0x8
#define _CLC4SEL3_D4S_LENGTH                                0x8
#define _CLC4SEL3_D4S_MASK                                  0xFF
#define _CLC4SEL3_D4S0_POSN                                 0x0
#define _CLC4SEL3_D4S0_POSITION                             0x0
#define _CLC4SEL3_D4S0_SIZE                                 0x1
#define _CLC4SEL3_D4S0_LENGTH                               0x1
#define _CLC4SEL3_D4S0_MASK                                 0x1
#define _CLC4SEL3_D4S1_POSN                                 0x1
#define _CLC4SEL3_D4S1_POSITION                             0x1
#define _CLC4SEL3_D4S1_SIZE                                 0x1
#define _CLC4SEL3_D4S1_LENGTH                               0x1
#define _CLC4SEL3_D4S1_MASK                                 0x2
#define _CLC4SEL3_D4S2_POSN                                 0x2
#define _CLC4SEL3_D4S2_POSITION                             0x2
#define _CLC4SEL3_D4S2_SIZE                                 0x1
#define _CLC4SEL3_D4S2_LENGTH                               0x1
#define _CLC4SEL3_D4S2_MASK                                 0x4
#define _CLC4SEL3_D4S3_POSN                                 0x3
#define _CLC4SEL3_D4S3_POSITION                             0x3
#define _CLC4SEL3_D4S3_SIZE                                 0x1
#define _CLC4SEL3_D4S3_LENGTH                               0x1
#define _CLC4SEL3_D4S3_MASK                                 0x8
#define _CLC4SEL3_D4S4_POSN                                 0x4
#define _CLC4SEL3_D4S4_POSITION                             0x4
#define _CLC4SEL3_D4S4_SIZE                                 0x1
#define _CLC4SEL3_D4S4_LENGTH                               0x1
#define _CLC4SEL3_D4S4_MASK                                 0x10
#define _CLC4SEL3_D4S5_POSN                                 0x5
#define _CLC4SEL3_D4S5_POSITION                             0x5
#define _CLC4SEL3_D4S5_SIZE                                 0x1
#define _CLC4SEL3_D4S5_LENGTH                               0x1
#define _CLC4SEL3_D4S5_MASK                                 0x20

// Register: CLC4GLS0
#define CLC4GLS0 CLC4GLS0
extern volatile unsigned char           CLC4GLS0            __at(0xF34);
#ifndef _LIB_BUILD
asm("CLC4GLS0 equ 0F34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1D1N               :1;
        unsigned LC4G1D1T               :1;
        unsigned LC4G1D2N               :1;
        unsigned LC4G1D2T               :1;
        unsigned LC4G1D3N               :1;
        unsigned LC4G1D3T               :1;
        unsigned LC4G1D4N               :1;
        unsigned LC4G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS0bits_t;
extern volatile CLC4GLS0bits_t CLC4GLS0bits __at(0xF34);
// bitfield macros
#define _CLC4GLS0_LC4G1D1N_POSN                             0x0
#define _CLC4GLS0_LC4G1D1N_POSITION                         0x0
#define _CLC4GLS0_LC4G1D1N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1N_MASK                             0x1
#define _CLC4GLS0_LC4G1D1T_POSN                             0x1
#define _CLC4GLS0_LC4G1D1T_POSITION                         0x1
#define _CLC4GLS0_LC4G1D1T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1T_MASK                             0x2
#define _CLC4GLS0_LC4G1D2N_POSN                             0x2
#define _CLC4GLS0_LC4G1D2N_POSITION                         0x2
#define _CLC4GLS0_LC4G1D2N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2N_MASK                             0x4
#define _CLC4GLS0_LC4G1D2T_POSN                             0x3
#define _CLC4GLS0_LC4G1D2T_POSITION                         0x3
#define _CLC4GLS0_LC4G1D2T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2T_MASK                             0x8
#define _CLC4GLS0_LC4G1D3N_POSN                             0x4
#define _CLC4GLS0_LC4G1D3N_POSITION                         0x4
#define _CLC4GLS0_LC4G1D3N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3N_MASK                             0x10
#define _CLC4GLS0_LC4G1D3T_POSN                             0x5
#define _CLC4GLS0_LC4G1D3T_POSITION                         0x5
#define _CLC4GLS0_LC4G1D3T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3T_MASK                             0x20
#define _CLC4GLS0_LC4G1D4N_POSN                             0x6
#define _CLC4GLS0_LC4G1D4N_POSITION                         0x6
#define _CLC4GLS0_LC4G1D4N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4N_MASK                             0x40
#define _CLC4GLS0_LC4G1D4T_POSN                             0x7
#define _CLC4GLS0_LC4G1D4T_POSITION                         0x7
#define _CLC4GLS0_LC4G1D4T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4T_MASK                             0x80
#define _CLC4GLS0_D1N_POSN                                  0x0
#define _CLC4GLS0_D1N_POSITION                              0x0
#define _CLC4GLS0_D1N_SIZE                                  0x1
#define _CLC4GLS0_D1N_LENGTH                                0x1
#define _CLC4GLS0_D1N_MASK                                  0x1
#define _CLC4GLS0_D1T_POSN                                  0x1
#define _CLC4GLS0_D1T_POSITION                              0x1
#define _CLC4GLS0_D1T_SIZE                                  0x1
#define _CLC4GLS0_D1T_LENGTH                                0x1
#define _CLC4GLS0_D1T_MASK                                  0x2
#define _CLC4GLS0_D2N_POSN                                  0x2
#define _CLC4GLS0_D2N_POSITION                              0x2
#define _CLC4GLS0_D2N_SIZE                                  0x1
#define _CLC4GLS0_D2N_LENGTH                                0x1
#define _CLC4GLS0_D2N_MASK                                  0x4
#define _CLC4GLS0_D2T_POSN                                  0x3
#define _CLC4GLS0_D2T_POSITION                              0x3
#define _CLC4GLS0_D2T_SIZE                                  0x1
#define _CLC4GLS0_D2T_LENGTH                                0x1
#define _CLC4GLS0_D2T_MASK                                  0x8
#define _CLC4GLS0_D3N_POSN                                  0x4
#define _CLC4GLS0_D3N_POSITION                              0x4
#define _CLC4GLS0_D3N_SIZE                                  0x1
#define _CLC4GLS0_D3N_LENGTH                                0x1
#define _CLC4GLS0_D3N_MASK                                  0x10
#define _CLC4GLS0_D3T_POSN                                  0x5
#define _CLC4GLS0_D3T_POSITION                              0x5
#define _CLC4GLS0_D3T_SIZE                                  0x1
#define _CLC4GLS0_D3T_LENGTH                                0x1
#define _CLC4GLS0_D3T_MASK                                  0x20
#define _CLC4GLS0_D4N_POSN                                  0x6
#define _CLC4GLS0_D4N_POSITION                              0x6
#define _CLC4GLS0_D4N_SIZE                                  0x1
#define _CLC4GLS0_D4N_LENGTH                                0x1
#define _CLC4GLS0_D4N_MASK                                  0x40
#define _CLC4GLS0_D4T_POSN                                  0x7
#define _CLC4GLS0_D4T_POSITION                              0x7
#define _CLC4GLS0_D4T_SIZE                                  0x1
#define _CLC4GLS0_D4T_LENGTH                                0x1
#define _CLC4GLS0_D4T_MASK                                  0x80

// Register: CLC4GLS1
#define CLC4GLS1 CLC4GLS1
extern volatile unsigned char           CLC4GLS1            __at(0xF35);
#ifndef _LIB_BUILD
asm("CLC4GLS1 equ 0F35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G2D1N               :1;
        unsigned LC4G2D1T               :1;
        unsigned LC4G2D2N               :1;
        unsigned LC4G2D2T               :1;
        unsigned LC4G2D3N               :1;
        unsigned LC4G2D3T               :1;
        unsigned LC4G2D4N               :1;
        unsigned LC4G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS1bits_t;
extern volatile CLC4GLS1bits_t CLC4GLS1bits __at(0xF35);
// bitfield macros
#define _CLC4GLS1_LC4G2D1N_POSN                             0x0
#define _CLC4GLS1_LC4G2D1N_POSITION                         0x0
#define _CLC4GLS1_LC4G2D1N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1N_MASK                             0x1
#define _CLC4GLS1_LC4G2D1T_POSN                             0x1
#define _CLC4GLS1_LC4G2D1T_POSITION                         0x1
#define _CLC4GLS1_LC4G2D1T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1T_MASK                             0x2
#define _CLC4GLS1_LC4G2D2N_POSN                             0x2
#define _CLC4GLS1_LC4G2D2N_POSITION                         0x2
#define _CLC4GLS1_LC4G2D2N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2N_MASK                             0x4
#define _CLC4GLS1_LC4G2D2T_POSN                             0x3
#define _CLC4GLS1_LC4G2D2T_POSITION                         0x3
#define _CLC4GLS1_LC4G2D2T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2T_MASK                             0x8
#define _CLC4GLS1_LC4G2D3N_POSN                             0x4
#define _CLC4GLS1_LC4G2D3N_POSITION                         0x4
#define _CLC4GLS1_LC4G2D3N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3N_MASK                             0x10
#define _CLC4GLS1_LC4G2D3T_POSN                             0x5
#define _CLC4GLS1_LC4G2D3T_POSITION                         0x5
#define _CLC4GLS1_LC4G2D3T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3T_MASK                             0x20
#define _CLC4GLS1_LC4G2D4N_POSN                             0x6
#define _CLC4GLS1_LC4G2D4N_POSITION                         0x6
#define _CLC4GLS1_LC4G2D4N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4N_MASK                             0x40
#define _CLC4GLS1_LC4G2D4T_POSN                             0x7
#define _CLC4GLS1_LC4G2D4T_POSITION                         0x7
#define _CLC4GLS1_LC4G2D4T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4T_MASK                             0x80
#define _CLC4GLS1_D1N_POSN                                  0x0
#define _CLC4GLS1_D1N_POSITION                              0x0
#define _CLC4GLS1_D1N_SIZE                                  0x1
#define _CLC4GLS1_D1N_LENGTH                                0x1
#define _CLC4GLS1_D1N_MASK                                  0x1
#define _CLC4GLS1_D1T_POSN                                  0x1
#define _CLC4GLS1_D1T_POSITION                              0x1
#define _CLC4GLS1_D1T_SIZE                                  0x1
#define _CLC4GLS1_D1T_LENGTH                                0x1
#define _CLC4GLS1_D1T_MASK                                  0x2
#define _CLC4GLS1_D2N_POSN                                  0x2
#define _CLC4GLS1_D2N_POSITION                              0x2
#define _CLC4GLS1_D2N_SIZE                                  0x1
#define _CLC4GLS1_D2N_LENGTH                                0x1
#define _CLC4GLS1_D2N_MASK                                  0x4
#define _CLC4GLS1_D2T_POSN                                  0x3
#define _CLC4GLS1_D2T_POSITION                              0x3
#define _CLC4GLS1_D2T_SIZE                                  0x1
#define _CLC4GLS1_D2T_LENGTH                                0x1
#define _CLC4GLS1_D2T_MASK                                  0x8
#define _CLC4GLS1_D3N_POSN                                  0x4
#define _CLC4GLS1_D3N_POSITION                              0x4
#define _CLC4GLS1_D3N_SIZE                                  0x1
#define _CLC4GLS1_D3N_LENGTH                                0x1
#define _CLC4GLS1_D3N_MASK                                  0x10
#define _CLC4GLS1_D3T_POSN                                  0x5
#define _CLC4GLS1_D3T_POSITION                              0x5
#define _CLC4GLS1_D3T_SIZE                                  0x1
#define _CLC4GLS1_D3T_LENGTH                                0x1
#define _CLC4GLS1_D3T_MASK                                  0x20
#define _CLC4GLS1_D4N_POSN                                  0x6
#define _CLC4GLS1_D4N_POSITION                              0x6
#define _CLC4GLS1_D4N_SIZE                                  0x1
#define _CLC4GLS1_D4N_LENGTH                                0x1
#define _CLC4GLS1_D4N_MASK                                  0x40
#define _CLC4GLS1_D4T_POSN                                  0x7
#define _CLC4GLS1_D4T_POSITION                              0x7
#define _CLC4GLS1_D4T_SIZE                                  0x1
#define _CLC4GLS1_D4T_LENGTH                                0x1
#define _CLC4GLS1_D4T_MASK                                  0x80

// Register: CLC4GLS2
#define CLC4GLS2 CLC4GLS2
extern volatile unsigned char           CLC4GLS2            __at(0xF36);
#ifndef _LIB_BUILD
asm("CLC4GLS2 equ 0F36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G3D1N               :1;
        unsigned LC4G3D1T               :1;
        unsigned LC4G3D2N               :1;
        unsigned LC4G3D2T               :1;
        unsigned LC4G3D3N               :1;
        unsigned LC4G3D3T               :1;
        unsigned LC4G3D4N               :1;
        unsigned LC4G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS2bits_t;
extern volatile CLC4GLS2bits_t CLC4GLS2bits __at(0xF36);
// bitfield macros
#define _CLC4GLS2_LC4G3D1N_POSN                             0x0
#define _CLC4GLS2_LC4G3D1N_POSITION                         0x0
#define _CLC4GLS2_LC4G3D1N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1N_MASK                             0x1
#define _CLC4GLS2_LC4G3D1T_POSN                             0x1
#define _CLC4GLS2_LC4G3D1T_POSITION                         0x1
#define _CLC4GLS2_LC4G3D1T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1T_MASK                             0x2
#define _CLC4GLS2_LC4G3D2N_POSN                             0x2
#define _CLC4GLS2_LC4G3D2N_POSITION                         0x2
#define _CLC4GLS2_LC4G3D2N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2N_MASK                             0x4
#define _CLC4GLS2_LC4G3D2T_POSN                             0x3
#define _CLC4GLS2_LC4G3D2T_POSITION                         0x3
#define _CLC4GLS2_LC4G3D2T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2T_MASK                             0x8
#define _CLC4GLS2_LC4G3D3N_POSN                             0x4
#define _CLC4GLS2_LC4G3D3N_POSITION                         0x4
#define _CLC4GLS2_LC4G3D3N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3N_MASK                             0x10
#define _CLC4GLS2_LC4G3D3T_POSN                             0x5
#define _CLC4GLS2_LC4G3D3T_POSITION                         0x5
#define _CLC4GLS2_LC4G3D3T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3T_MASK                             0x20
#define _CLC4GLS2_LC4G3D4N_POSN                             0x6
#define _CLC4GLS2_LC4G3D4N_POSITION                         0x6
#define _CLC4GLS2_LC4G3D4N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4N_MASK                             0x40
#define _CLC4GLS2_LC4G3D4T_POSN                             0x7
#define _CLC4GLS2_LC4G3D4T_POSITION                         0x7
#define _CLC4GLS2_LC4G3D4T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4T_MASK                             0x80
#define _CLC4GLS2_D1N_POSN                                  0x0
#define _CLC4GLS2_D1N_POSITION                              0x0
#define _CLC4GLS2_D1N_SIZE                                  0x1
#define _CLC4GLS2_D1N_LENGTH                                0x1
#define _CLC4GLS2_D1N_MASK                                  0x1
#define _CLC4GLS2_D1T_POSN                                  0x1
#define _CLC4GLS2_D1T_POSITION                              0x1
#define _CLC4GLS2_D1T_SIZE                                  0x1
#define _CLC4GLS2_D1T_LENGTH                                0x1
#define _CLC4GLS2_D1T_MASK                                  0x2
#define _CLC4GLS2_D2N_POSN                                  0x2
#define _CLC4GLS2_D2N_POSITION                              0x2
#define _CLC4GLS2_D2N_SIZE                                  0x1
#define _CLC4GLS2_D2N_LENGTH                                0x1
#define _CLC4GLS2_D2N_MASK                                  0x4
#define _CLC4GLS2_D2T_POSN                                  0x3
#define _CLC4GLS2_D2T_POSITION                              0x3
#define _CLC4GLS2_D2T_SIZE                                  0x1
#define _CLC4GLS2_D2T_LENGTH                                0x1
#define _CLC4GLS2_D2T_MASK                                  0x8
#define _CLC4GLS2_D3N_POSN                                  0x4
#define _CLC4GLS2_D3N_POSITION                              0x4
#define _CLC4GLS2_D3N_SIZE                                  0x1
#define _CLC4GLS2_D3N_LENGTH                                0x1
#define _CLC4GLS2_D3N_MASK                                  0x10
#define _CLC4GLS2_D3T_POSN                                  0x5
#define _CLC4GLS2_D3T_POSITION                              0x5
#define _CLC4GLS2_D3T_SIZE                                  0x1
#define _CLC4GLS2_D3T_LENGTH                                0x1
#define _CLC4GLS2_D3T_MASK                                  0x20
#define _CLC4GLS2_D4N_POSN                                  0x6
#define _CLC4GLS2_D4N_POSITION                              0x6
#define _CLC4GLS2_D4N_SIZE                                  0x1
#define _CLC4GLS2_D4N_LENGTH                                0x1
#define _CLC4GLS2_D4N_MASK                                  0x40
#define _CLC4GLS2_D4T_POSN                                  0x7
#define _CLC4GLS2_D4T_POSITION                              0x7
#define _CLC4GLS2_D4T_SIZE                                  0x1
#define _CLC4GLS2_D4T_LENGTH                                0x1
#define _CLC4GLS2_D4T_MASK                                  0x80

// Register: CLC4GLS3
#define CLC4GLS3 CLC4GLS3
extern volatile unsigned char           CLC4GLS3            __at(0xF37);
#ifndef _LIB_BUILD
asm("CLC4GLS3 equ 0F37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G4D1N               :1;
        unsigned LC4G4D1T               :1;
        unsigned LC4G4D2N               :1;
        unsigned LC4G4D2T               :1;
        unsigned LC4G4D3N               :1;
        unsigned LC4G4D3T               :1;
        unsigned LC4G4D4N               :1;
        unsigned LC4G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC4GLS3bits_t;
extern volatile CLC4GLS3bits_t CLC4GLS3bits __at(0xF37);
// bitfield macros
#define _CLC4GLS3_LC4G4D1N_POSN                             0x0
#define _CLC4GLS3_LC4G4D1N_POSITION                         0x0
#define _CLC4GLS3_LC4G4D1N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1N_MASK                             0x1
#define _CLC4GLS3_LC4G4D1T_POSN                             0x1
#define _CLC4GLS3_LC4G4D1T_POSITION                         0x1
#define _CLC4GLS3_LC4G4D1T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1T_MASK                             0x2
#define _CLC4GLS3_LC4G4D2N_POSN                             0x2
#define _CLC4GLS3_LC4G4D2N_POSITION                         0x2
#define _CLC4GLS3_LC4G4D2N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2N_MASK                             0x4
#define _CLC4GLS3_LC4G4D2T_POSN                             0x3
#define _CLC4GLS3_LC4G4D2T_POSITION                         0x3
#define _CLC4GLS3_LC4G4D2T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2T_MASK                             0x8
#define _CLC4GLS3_LC4G4D3N_POSN                             0x4
#define _CLC4GLS3_LC4G4D3N_POSITION                         0x4
#define _CLC4GLS3_LC4G4D3N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3N_MASK                             0x10
#define _CLC4GLS3_LC4G4D3T_POSN                             0x5
#define _CLC4GLS3_LC4G4D3T_POSITION                         0x5
#define _CLC4GLS3_LC4G4D3T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3T_MASK                             0x20
#define _CLC4GLS3_LC4G4D4N_POSN                             0x6
#define _CLC4GLS3_LC4G4D4N_POSITION                         0x6
#define _CLC4GLS3_LC4G4D4N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4N_MASK                             0x40
#define _CLC4GLS3_LC4G4D4T_POSN                             0x7
#define _CLC4GLS3_LC4G4D4T_POSITION                         0x7
#define _CLC4GLS3_LC4G4D4T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4T_MASK                             0x80
#define _CLC4GLS3_G4D1N_POSN                                0x0
#define _CLC4GLS3_G4D1N_POSITION                            0x0
#define _CLC4GLS3_G4D1N_SIZE                                0x1
#define _CLC4GLS3_G4D1N_LENGTH                              0x1
#define _CLC4GLS3_G4D1N_MASK                                0x1
#define _CLC4GLS3_G4D1T_POSN                                0x1
#define _CLC4GLS3_G4D1T_POSITION                            0x1
#define _CLC4GLS3_G4D1T_SIZE                                0x1
#define _CLC4GLS3_G4D1T_LENGTH                              0x1
#define _CLC4GLS3_G4D1T_MASK                                0x2
#define _CLC4GLS3_G4D2N_POSN                                0x2
#define _CLC4GLS3_G4D2N_POSITION                            0x2
#define _CLC4GLS3_G4D2N_SIZE                                0x1
#define _CLC4GLS3_G4D2N_LENGTH                              0x1
#define _CLC4GLS3_G4D2N_MASK                                0x4
#define _CLC4GLS3_G4D2T_POSN                                0x3
#define _CLC4GLS3_G4D2T_POSITION                            0x3
#define _CLC4GLS3_G4D2T_SIZE                                0x1
#define _CLC4GLS3_G4D2T_LENGTH                              0x1
#define _CLC4GLS3_G4D2T_MASK                                0x8
#define _CLC4GLS3_G4D3N_POSN                                0x4
#define _CLC4GLS3_G4D3N_POSITION                            0x4
#define _CLC4GLS3_G4D3N_SIZE                                0x1
#define _CLC4GLS3_G4D3N_LENGTH                              0x1
#define _CLC4GLS3_G4D3N_MASK                                0x10
#define _CLC4GLS3_G4D3T_POSN                                0x5
#define _CLC4GLS3_G4D3T_POSITION                            0x5
#define _CLC4GLS3_G4D3T_SIZE                                0x1
#define _CLC4GLS3_G4D3T_LENGTH                              0x1
#define _CLC4GLS3_G4D3T_MASK                                0x20
#define _CLC4GLS3_G4D4N_POSN                                0x6
#define _CLC4GLS3_G4D4N_POSITION                            0x6
#define _CLC4GLS3_G4D4N_SIZE                                0x1
#define _CLC4GLS3_G4D4N_LENGTH                              0x1
#define _CLC4GLS3_G4D4N_MASK                                0x40
#define _CLC4GLS3_G4D4T_POSN                                0x7
#define _CLC4GLS3_G4D4T_POSITION                            0x7
#define _CLC4GLS3_G4D4T_SIZE                                0x1
#define _CLC4GLS3_G4D4T_LENGTH                              0x1
#define _CLC4GLS3_G4D4T_MASK                                0x80

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0xFE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 0FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C_SHAD                 :1;
        unsigned DC_SHAD                :1;
        unsigned Z_SHAD                 :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0xFE4);
// bitfield macros
#define _STATUS_SHAD_C_SHAD_POSN                            0x0
#define _STATUS_SHAD_C_SHAD_POSITION                        0x0
#define _STATUS_SHAD_C_SHAD_SIZE                            0x1
#define _STATUS_SHAD_C_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_C_SHAD_MASK                            0x1
#define _STATUS_SHAD_DC_SHAD_POSN                           0x1
#define _STATUS_SHAD_DC_SHAD_POSITION                       0x1
#define _STATUS_SHAD_DC_SHAD_SIZE                           0x1
#define _STATUS_SHAD_DC_SHAD_LENGTH                         0x1
#define _STATUS_SHAD_DC_SHAD_MASK                           0x2
#define _STATUS_SHAD_Z_SHAD_POSN                            0x2
#define _STATUS_SHAD_Z_SHAD_POSITION                        0x2
#define _STATUS_SHAD_Z_SHAD_SIZE                            0x1
#define _STATUS_SHAD_Z_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_Z_SHAD_MASK                            0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0xFE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 0FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0xFE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0xFE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 0FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :5;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0xFE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x5
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x5
#define _BSR_SHAD_BSR_SHAD_MASK                             0x1F

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0xFE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 0FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :7;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0xFE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x7
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x7
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0x7F

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0xFE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 0FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0xFE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 0FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0xFE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0xFEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 0FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0xFEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0xFEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 0FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0xFEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0xFED);
#ifndef _LIB_BUILD
asm("STKPTR equ 0FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0xFED);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0xFEE);
#ifndef _LIB_BUILD
asm("TOSL equ 0FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0xFEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0xFEF);
#ifndef _LIB_BUILD
asm("TOSH equ 0FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :7;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0xFEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x7
#define _TOSH_TOSH_LENGTH                                   0x7
#define _TOSH_TOSH_MASK                                     0x7F

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0xCF8);	// @ (0x19F * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0xCFF);	// @ (0x19F * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// PID1ACCHL<ACC16>
extern volatile __bit                   ACC16               __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 ACC16_bit           _BIT_ACCESS(PID1ACCHL,0)
// PID1ACCHL<ACC17>
extern volatile __bit                   ACC17               __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 ACC17_bit           _BIT_ACCESS(PID1ACCHL,1)
// PID1ACCHL<ACC18>
extern volatile __bit                   ACC18               __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 ACC18_bit           _BIT_ACCESS(PID1ACCHL,2)
// PID1ACCHL<ACC19>
extern volatile __bit                   ACC19               __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 ACC19_bit           _BIT_ACCESS(PID1ACCHL,3)
// PID1ACCHL<ACC20>
extern volatile __bit                   ACC20               __at(0x308C);	// @ (0x611 * 8 + 4)
#define                                 ACC20_bit           _BIT_ACCESS(PID1ACCHL,4)
// PID1ACCHL<ACC21>
extern volatile __bit                   ACC21               __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 ACC21_bit           _BIT_ACCESS(PID1ACCHL,5)
// PID1ACCHL<ACC22>
extern volatile __bit                   ACC22               __at(0x308E);	// @ (0x611 * 8 + 6)
#define                                 ACC22_bit           _BIT_ACCESS(PID1ACCHL,6)
// PID1ACCHL<ACC23>
extern volatile __bit                   ACC23               __at(0x308F);	// @ (0x611 * 8 + 7)
#define                                 ACC23_bit           _BIT_ACCESS(PID1ACCHL,7)
// PID1ACCHH<ACC24>
extern volatile __bit                   ACC24               __at(0x3090);	// @ (0x612 * 8 + 0)
#define                                 ACC24_bit           _BIT_ACCESS(PID1ACCHH,0)
// PID1ACCHH<ACC25>
extern volatile __bit                   ACC25               __at(0x3091);	// @ (0x612 * 8 + 1)
#define                                 ACC25_bit           _BIT_ACCESS(PID1ACCHH,1)
// PID1ACCHH<ACC26>
extern volatile __bit                   ACC26               __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 ACC26_bit           _BIT_ACCESS(PID1ACCHH,2)
// PID1ACCHH<ACC27>
extern volatile __bit                   ACC27               __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 ACC27_bit           _BIT_ACCESS(PID1ACCHH,3)
// PID1ACCHH<ACC28>
extern volatile __bit                   ACC28               __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 ACC28_bit           _BIT_ACCESS(PID1ACCHH,4)
// PID1ACCHH<ACC29>
extern volatile __bit                   ACC29               __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 ACC29_bit           _BIT_ACCESS(PID1ACCHH,5)
// PID1ACCHH<ACC30>
extern volatile __bit                   ACC30               __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 ACC30_bit           _BIT_ACCESS(PID1ACCHH,6)
// PID1ACCHH<ACC31>
extern volatile __bit                   ACC31               __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 ACC31_bit           _BIT_ACCESS(PID1ACCHH,7)
// PID1ACCU<ACC32>
extern volatile __bit                   ACC32               __at(0x3098);	// @ (0x613 * 8 + 0)
#define                                 ACC32_bit           _BIT_ACCESS(PID1ACCU,0)
// PID1ACCU<ACC33>
extern volatile __bit                   ACC33               __at(0x3099);	// @ (0x613 * 8 + 1)
#define                                 ACC33_bit           _BIT_ACCESS(PID1ACCU,1)
// PID1ACCU<ACC34>
extern volatile __bit                   ACC34               __at(0x309A);	// @ (0x613 * 8 + 2)
#define                                 ACC34_bit           _BIT_ACCESS(PID1ACCU,2)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// AT1CON1<ACCS>
extern volatile __bit                   ACCS                __at(0x40A9);	// @ (0x815 * 8 + 1)
#define                                 ACCS_bit            _BIT_ACCESS(AT1CON1,1)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0x10B5);	// @ (0x216 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0x10B6);	// @ (0x216 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0x10BF);	// @ (0x217 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// ADCON1<ADCS0>
extern volatile __bit                   ADCS0               __at(0x4F4);	// @ (0x9E * 8 + 4)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCON1,4)
// ADCON1<ADCS1>
extern volatile __bit                   ADCS1               __at(0x4F5);	// @ (0x9E * 8 + 5)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCON1,5)
// ADCON1<ADCS2>
extern volatile __bit                   ADCS2               __at(0x4F6);	// @ (0x9E * 8 + 6)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCON1,6)
// SSP1ADD<ADD0>
extern volatile __bit                   ADD0                __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 ADD0_bit            _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<ADD1>
extern volatile __bit                   ADD1                __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 ADD1_bit            _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<ADD2>
extern volatile __bit                   ADD2                __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 ADD2_bit            _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<ADD3>
extern volatile __bit                   ADD3                __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 ADD3_bit            _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<ADD4>
extern volatile __bit                   ADD4                __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 ADD4_bit            _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<ADD5>
extern volatile __bit                   ADD5                __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 ADD5_bit            _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<ADD6>
extern volatile __bit                   ADD6                __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 ADD6_bit            _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<ADD7>
extern volatile __bit                   ADD7                __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 ADD7_bit            _BIT_ACCESS(SSP1ADD,7)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0xCEB);	// @ (0x19D * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADFM>
extern volatile __bit                   ADFM                __at(0x4F7);	// @ (0x9E * 8 + 7)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON1,7)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x8B8);	// @ (0x117 * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x8B9);	// @ (0x117 * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,1)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x486);	// @ (0x90 * 8 + 6)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,6)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x86);	// @ (0x10 * 8 + 6)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,6)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADCON1,0)
// ADCON1<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADCON1,1)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xC60);	// @ (0x18C * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xC61);	// @ (0x18C * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xC62);	// @ (0x18C * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xC64);	// @ (0x18C * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELC<ANSC0>
extern volatile __bit                   ANSC0               __at(0xC70);	// @ (0x18E * 8 + 0)
#define                                 ANSC0_bit           _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSC1>
extern volatile __bit                   ANSC1               __at(0xC71);	// @ (0x18E * 8 + 1)
#define                                 ANSC1_bit           _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSC2>
extern volatile __bit                   ANSC2               __at(0xC72);	// @ (0x18E * 8 + 2)
#define                                 ANSC2_bit           _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSC3>
extern volatile __bit                   ANSC3               __at(0xC73);	// @ (0x18E * 8 + 3)
#define                                 ANSC3_bit           _BIT_ACCESS(ANSELC,3)
// AT1CON0<APMOD>
extern volatile __bit                   APMOD               __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 APMOD_bit           _BIT_ACCESS(AT1CON0,1)
// AT1CON1<AT1ACCS>
extern volatile __bit                   AT1ACCS             __at(0x40A9);	// @ (0x815 * 8 + 1)
#define                                 AT1ACCS_bit         _BIT_ACCESS(AT1CON1,1)
// AT1CON0<AT1APMOD>
extern volatile __bit                   AT1APMOD            __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 AT1APMOD_bit        _BIT_ACCESS(AT1CON0,1)
// AT1CCON1<AT1CAP1P>
extern volatile __bit                   AT1CAP1P            __at(0x448B);	// @ (0x891 * 8 + 3)
#define                                 AT1CAP1P_bit        _BIT_ACCESS(AT1CCON1,3)
// AT1CCON2<AT1CAP2P>
extern volatile __bit                   AT1CAP2P            __at(0x44AB);	// @ (0x895 * 8 + 3)
#define                                 AT1CAP2P_bit        _BIT_ACCESS(AT1CCON2,3)
// AT1CCON3<AT1CAP3P>
extern volatile __bit                   AT1CAP3P            __at(0x44CB);	// @ (0x899 * 8 + 3)
#define                                 AT1CAP3P_bit        _BIT_ACCESS(AT1CCON3,3)
// AT1CC1L<AT1CC10>
extern volatile __bit                   AT1CC10             __at(0x4478);	// @ (0x88F * 8 + 0)
#define                                 AT1CC10_bit         _BIT_ACCESS(AT1CC1L,0)
// AT1CC1L<AT1CC11>
extern volatile __bit                   AT1CC11             __at(0x4479);	// @ (0x88F * 8 + 1)
#define                                 AT1CC11_bit         _BIT_ACCESS(AT1CC1L,1)
// AT1CC1L<AT1CC12>
extern volatile __bit                   AT1CC12             __at(0x447A);	// @ (0x88F * 8 + 2)
#define                                 AT1CC12_bit         _BIT_ACCESS(AT1CC1L,2)
// AT1CC1L<AT1CC13>
extern volatile __bit                   AT1CC13             __at(0x447B);	// @ (0x88F * 8 + 3)
#define                                 AT1CC13_bit         _BIT_ACCESS(AT1CC1L,3)
// AT1CC1L<AT1CC14>
extern volatile __bit                   AT1CC14             __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 AT1CC14_bit         _BIT_ACCESS(AT1CC1L,4)
// AT1CC1L<AT1CC15>
extern volatile __bit                   AT1CC15             __at(0x447D);	// @ (0x88F * 8 + 5)
#define                                 AT1CC15_bit         _BIT_ACCESS(AT1CC1L,5)
// AT1CC1L<AT1CC16>
extern volatile __bit                   AT1CC16             __at(0x447E);	// @ (0x88F * 8 + 6)
#define                                 AT1CC16_bit         _BIT_ACCESS(AT1CC1L,6)
// AT1CC1L<AT1CC17>
extern volatile __bit                   AT1CC17             __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 AT1CC17_bit         _BIT_ACCESS(AT1CC1L,7)
// AT1CC1H<AT1CC18>
extern volatile __bit                   AT1CC18             __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 AT1CC18_bit         _BIT_ACCESS(AT1CC1H,0)
// AT1CC1H<AT1CC19>
extern volatile __bit                   AT1CC19             __at(0x4481);	// @ (0x890 * 8 + 1)
#define                                 AT1CC19_bit         _BIT_ACCESS(AT1CC1H,1)
// AT1CCON1<AT1CC1EN>
extern volatile __bit                   AT1CC1EN            __at(0x448F);	// @ (0x891 * 8 + 7)
#define                                 AT1CC1EN_bit        _BIT_ACCESS(AT1CCON1,7)
// AT1IE1<AT1CC1IE>
extern volatile __bit                   AT1CC1IE            __at(0x40C8);	// @ (0x819 * 8 + 0)
#define                                 AT1CC1IE_bit        _BIT_ACCESS(AT1IE1,0)
// AT1IR1<AT1CC1IF>
extern volatile __bit                   AT1CC1IF            __at(0x40C0);	// @ (0x818 * 8 + 0)
#define                                 AT1CC1IF_bit        _BIT_ACCESS(AT1IR1,0)
// AT1CCON1<AT1CC1MODE>
extern volatile __bit                   AT1CC1MODE          __at(0x4488);	// @ (0x891 * 8 + 0)
#define                                 AT1CC1MODE_bit      _BIT_ACCESS(AT1CCON1,0)
// AT1CCON1<AT1CC1POL>
extern volatile __bit                   AT1CC1POL           __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 AT1CC1POL_bit       _BIT_ACCESS(AT1CCON1,4)
// AT1CC2L<AT1CC20>
extern volatile __bit                   AT1CC20             __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 AT1CC20_bit         _BIT_ACCESS(AT1CC2L,0)
// AT1CC2L<AT1CC21>
extern volatile __bit                   AT1CC21             __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 AT1CC21_bit         _BIT_ACCESS(AT1CC2L,1)
// AT1CC2L<AT1CC22>
extern volatile __bit                   AT1CC22             __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 AT1CC22_bit         _BIT_ACCESS(AT1CC2L,2)
// AT1CC2L<AT1CC23>
extern volatile __bit                   AT1CC23             __at(0x449B);	// @ (0x893 * 8 + 3)
#define                                 AT1CC23_bit         _BIT_ACCESS(AT1CC2L,3)
// AT1CC2L<AT1CC24>
extern volatile __bit                   AT1CC24             __at(0x449C);	// @ (0x893 * 8 + 4)
#define                                 AT1CC24_bit         _BIT_ACCESS(AT1CC2L,4)
// AT1CC2L<AT1CC25>
extern volatile __bit                   AT1CC25             __at(0x449D);	// @ (0x893 * 8 + 5)
#define                                 AT1CC25_bit         _BIT_ACCESS(AT1CC2L,5)
// AT1CC2L<AT1CC26>
extern volatile __bit                   AT1CC26             __at(0x449E);	// @ (0x893 * 8 + 6)
#define                                 AT1CC26_bit         _BIT_ACCESS(AT1CC2L,6)
// AT1CC2L<AT1CC27>
extern volatile __bit                   AT1CC27             __at(0x449F);	// @ (0x893 * 8 + 7)
#define                                 AT1CC27_bit         _BIT_ACCESS(AT1CC2L,7)
// AT1CC2H<AT1CC28>
extern volatile __bit                   AT1CC28             __at(0x44A0);	// @ (0x894 * 8 + 0)
#define                                 AT1CC28_bit         _BIT_ACCESS(AT1CC2H,0)
// AT1CC2H<AT1CC29>
extern volatile __bit                   AT1CC29             __at(0x44A1);	// @ (0x894 * 8 + 1)
#define                                 AT1CC29_bit         _BIT_ACCESS(AT1CC2H,1)
// AT1CCON2<AT1CC2EN>
extern volatile __bit                   AT1CC2EN            __at(0x44AF);	// @ (0x895 * 8 + 7)
#define                                 AT1CC2EN_bit        _BIT_ACCESS(AT1CCON2,7)
// AT1IE1<AT1CC2IE>
extern volatile __bit                   AT1CC2IE            __at(0x40C9);	// @ (0x819 * 8 + 1)
#define                                 AT1CC2IE_bit        _BIT_ACCESS(AT1IE1,1)
// AT1IR1<AT1CC2IF>
extern volatile __bit                   AT1CC2IF            __at(0x40C1);	// @ (0x818 * 8 + 1)
#define                                 AT1CC2IF_bit        _BIT_ACCESS(AT1IR1,1)
// AT1CCON2<AT1CC2MODE>
extern volatile __bit                   AT1CC2MODE          __at(0x44A8);	// @ (0x895 * 8 + 0)
#define                                 AT1CC2MODE_bit      _BIT_ACCESS(AT1CCON2,0)
// AT1CCON2<AT1CC2POL>
extern volatile __bit                   AT1CC2POL           __at(0x44AC);	// @ (0x895 * 8 + 4)
#define                                 AT1CC2POL_bit       _BIT_ACCESS(AT1CCON2,4)
// AT1CC3L<AT1CC30>
extern volatile __bit                   AT1CC30             __at(0x44B8);	// @ (0x897 * 8 + 0)
#define                                 AT1CC30_bit         _BIT_ACCESS(AT1CC3L,0)
// AT1CC3L<AT1CC31>
extern volatile __bit                   AT1CC31             __at(0x44B9);	// @ (0x897 * 8 + 1)
#define                                 AT1CC31_bit         _BIT_ACCESS(AT1CC3L,1)
// AT1CC3L<AT1CC32>
extern volatile __bit                   AT1CC32             __at(0x44BA);	// @ (0x897 * 8 + 2)
#define                                 AT1CC32_bit         _BIT_ACCESS(AT1CC3L,2)
// AT1CC3L<AT1CC33>
extern volatile __bit                   AT1CC33             __at(0x44BB);	// @ (0x897 * 8 + 3)
#define                                 AT1CC33_bit         _BIT_ACCESS(AT1CC3L,3)
// AT1CC3L<AT1CC34>
extern volatile __bit                   AT1CC34             __at(0x44BC);	// @ (0x897 * 8 + 4)
#define                                 AT1CC34_bit         _BIT_ACCESS(AT1CC3L,4)
// AT1CC3L<AT1CC35>
extern volatile __bit                   AT1CC35             __at(0x44BD);	// @ (0x897 * 8 + 5)
#define                                 AT1CC35_bit         _BIT_ACCESS(AT1CC3L,5)
// AT1CC3L<AT1CC36>
extern volatile __bit                   AT1CC36             __at(0x44BE);	// @ (0x897 * 8 + 6)
#define                                 AT1CC36_bit         _BIT_ACCESS(AT1CC3L,6)
// AT1CC3L<AT1CC37>
extern volatile __bit                   AT1CC37             __at(0x44BF);	// @ (0x897 * 8 + 7)
#define                                 AT1CC37_bit         _BIT_ACCESS(AT1CC3L,7)
// AT1CC3H<AT1CC38>
extern volatile __bit                   AT1CC38             __at(0x44C0);	// @ (0x898 * 8 + 0)
#define                                 AT1CC38_bit         _BIT_ACCESS(AT1CC3H,0)
// AT1CC3H<AT1CC39>
extern volatile __bit                   AT1CC39             __at(0x44C1);	// @ (0x898 * 8 + 1)
#define                                 AT1CC39_bit         _BIT_ACCESS(AT1CC3H,1)
// AT1CCON3<AT1CC3EN>
extern volatile __bit                   AT1CC3EN            __at(0x44CF);	// @ (0x899 * 8 + 7)
#define                                 AT1CC3EN_bit        _BIT_ACCESS(AT1CCON3,7)
// AT1IE1<AT1CC3IE>
extern volatile __bit                   AT1CC3IE            __at(0x40CA);	// @ (0x819 * 8 + 2)
#define                                 AT1CC3IE_bit        _BIT_ACCESS(AT1IE1,2)
// AT1IR1<AT1CC3IF>
extern volatile __bit                   AT1CC3IF            __at(0x40C2);	// @ (0x818 * 8 + 2)
#define                                 AT1CC3IF_bit        _BIT_ACCESS(AT1IR1,2)
// AT1CCON3<AT1CC3MODE>
extern volatile __bit                   AT1CC3MODE          __at(0x44C8);	// @ (0x899 * 8 + 0)
#define                                 AT1CC3MODE_bit      _BIT_ACCESS(AT1CCON3,0)
// AT1CCON3<AT1CC3POL>
extern volatile __bit                   AT1CC3POL           __at(0x44CC);	// @ (0x899 * 8 + 4)
#define                                 AT1CC3POL_bit       _BIT_ACCESS(AT1CCON3,4)
// AT1CSEL1<AT1CP1S0>
extern volatile __bit                   AT1CP1S0            __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 AT1CP1S0_bit        _BIT_ACCESS(AT1CSEL1,0)
// AT1CSEL1<AT1CP1S1>
extern volatile __bit                   AT1CP1S1            __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 AT1CP1S1_bit        _BIT_ACCESS(AT1CSEL1,1)
// AT1CSEL1<AT1CP1S2>
extern volatile __bit                   AT1CP1S2            __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 AT1CP1S2_bit        _BIT_ACCESS(AT1CSEL1,2)
// AT1CSEL2<AT1CP2S0>
extern volatile __bit                   AT1CP2S0            __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 AT1CP2S0_bit        _BIT_ACCESS(AT1CSEL2,0)
// AT1CSEL2<AT1CP2S1>
extern volatile __bit                   AT1CP2S1            __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 AT1CP2S1_bit        _BIT_ACCESS(AT1CSEL2,1)
// AT1CSEL2<AT1CP2S2>
extern volatile __bit                   AT1CP2S2            __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 AT1CP2S2_bit        _BIT_ACCESS(AT1CSEL2,2)
// AT1CSEL3<AT1CP3S0>
extern volatile __bit                   AT1CP3S0            __at(0x44B0);	// @ (0x896 * 8 + 0)
#define                                 AT1CP3S0_bit        _BIT_ACCESS(AT1CSEL3,0)
// AT1CSEL3<AT1CP3S1>
extern volatile __bit                   AT1CP3S1            __at(0x44B1);	// @ (0x896 * 8 + 1)
#define                                 AT1CP3S1_bit        _BIT_ACCESS(AT1CSEL3,1)
// AT1CSEL3<AT1CP3S2>
extern volatile __bit                   AT1CP3S2            __at(0x44B2);	// @ (0x896 * 8 + 2)
#define                                 AT1CP3S2_bit        _BIT_ACCESS(AT1CSEL3,2)
// AT1CLK<AT1CS>
extern volatile __bit                   AT1CS               __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 AT1CS_bit           _BIT_ACCESS(AT1CLK,0)
// AT1CLK<AT1CS0>
extern volatile __bit                   AT1CS0              __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 AT1CS0_bit          _BIT_ACCESS(AT1CLK,0)
// AT1CON0<AT1EN>
extern volatile __bit                   AT1EN               __at(0x40A7);	// @ (0x814 * 8 + 7)
#define                                 AT1EN_bit           _BIT_ACCESS(AT1CON0,7)
// AT1ERRL<AT1ERR0>
extern volatile __bit                   AT1ERR0             __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 AT1ERR0_bit         _BIT_ACCESS(AT1ERRL,0)
// AT1ERRL<AT1ERR1>
extern volatile __bit                   AT1ERR1             __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 AT1ERR1_bit         _BIT_ACCESS(AT1ERRL,1)
// AT1ERRH<AT1ERR10>
extern volatile __bit                   AT1ERR10            __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 AT1ERR10_bit        _BIT_ACCESS(AT1ERRH,2)
// AT1ERRH<AT1ERR11>
extern volatile __bit                   AT1ERR11            __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 AT1ERR11_bit        _BIT_ACCESS(AT1ERRH,3)
// AT1ERRH<AT1ERR12>
extern volatile __bit                   AT1ERR12            __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 AT1ERR12_bit        _BIT_ACCESS(AT1ERRH,4)
// AT1ERRH<AT1ERR13>
extern volatile __bit                   AT1ERR13            __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 AT1ERR13_bit        _BIT_ACCESS(AT1ERRH,5)
// AT1ERRH<AT1ERR14>
extern volatile __bit                   AT1ERR14            __at(0x40EE);	// @ (0x81D * 8 + 6)
#define                                 AT1ERR14_bit        _BIT_ACCESS(AT1ERRH,6)
// AT1ERRH<AT1ERR15>
extern volatile __bit                   AT1ERR15            __at(0x40EF);	// @ (0x81D * 8 + 7)
#define                                 AT1ERR15_bit        _BIT_ACCESS(AT1ERRH,7)
// AT1ERRL<AT1ERR2>
extern volatile __bit                   AT1ERR2             __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 AT1ERR2_bit         _BIT_ACCESS(AT1ERRL,2)
// AT1ERRL<AT1ERR3>
extern volatile __bit                   AT1ERR3             __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 AT1ERR3_bit         _BIT_ACCESS(AT1ERRL,3)
// AT1ERRL<AT1ERR4>
extern volatile __bit                   AT1ERR4             __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 AT1ERR4_bit         _BIT_ACCESS(AT1ERRL,4)
// AT1ERRL<AT1ERR5>
extern volatile __bit                   AT1ERR5             __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 AT1ERR5_bit         _BIT_ACCESS(AT1ERRL,5)
// AT1ERRL<AT1ERR6>
extern volatile __bit                   AT1ERR6             __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 AT1ERR6_bit         _BIT_ACCESS(AT1ERRL,6)
// AT1ERRL<AT1ERR7>
extern volatile __bit                   AT1ERR7             __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 AT1ERR7_bit         _BIT_ACCESS(AT1ERRL,7)
// AT1ERRH<AT1ERR8>
extern volatile __bit                   AT1ERR8             __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 AT1ERR8_bit         _BIT_ACCESS(AT1ERRH,0)
// AT1ERRH<AT1ERR9>
extern volatile __bit                   AT1ERR9             __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 AT1ERR9_bit         _BIT_ACCESS(AT1ERRH,1)
// PIE5<AT1IE>
extern volatile __bit                   AT1IE               __at(0x4A2);	// @ (0x94 * 8 + 2)
#define                                 AT1IE_bit           _BIT_ACCESS(PIE5,2)
// PIR5<AT1IF>
extern volatile __bit                   AT1IF               __at(0xA2);	// @ (0x14 * 8 + 2)
#define                                 AT1IF_bit           _BIT_ACCESS(PIR5,2)
// AT1MISSL<AT1MISS0>
extern volatile __bit                   AT1MISS0            __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 AT1MISS0_bit        _BIT_ACCESS(AT1MISSL,0)
// AT1MISSL<AT1MISS1>
extern volatile __bit                   AT1MISS1            __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 AT1MISS1_bit        _BIT_ACCESS(AT1MISSL,1)
// AT1MISSH<AT1MISS10>
extern volatile __bit                   AT1MISS10           __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 AT1MISS10_bit       _BIT_ACCESS(AT1MISSH,2)
// AT1MISSH<AT1MISS11>
extern volatile __bit                   AT1MISS11           __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 AT1MISS11_bit       _BIT_ACCESS(AT1MISSH,3)
// AT1MISSH<AT1MISS12>
extern volatile __bit                   AT1MISS12           __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 AT1MISS12_bit       _BIT_ACCESS(AT1MISSH,4)
// AT1MISSH<AT1MISS13>
extern volatile __bit                   AT1MISS13           __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 AT1MISS13_bit       _BIT_ACCESS(AT1MISSH,5)
// AT1MISSH<AT1MISS14>
extern volatile __bit                   AT1MISS14           __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 AT1MISS14_bit       _BIT_ACCESS(AT1MISSH,6)
// AT1MISSH<AT1MISS15>
extern volatile __bit                   AT1MISS15           __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 AT1MISS15_bit       _BIT_ACCESS(AT1MISSH,7)
// AT1MISSL<AT1MISS2>
extern volatile __bit                   AT1MISS2            __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 AT1MISS2_bit        _BIT_ACCESS(AT1MISSL,2)
// AT1MISSL<AT1MISS3>
extern volatile __bit                   AT1MISS3            __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 AT1MISS3_bit        _BIT_ACCESS(AT1MISSL,3)
// AT1MISSL<AT1MISS4>
extern volatile __bit                   AT1MISS4            __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 AT1MISS4_bit        _BIT_ACCESS(AT1MISSL,4)
// AT1MISSL<AT1MISS5>
extern volatile __bit                   AT1MISS5            __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 AT1MISS5_bit        _BIT_ACCESS(AT1MISSL,5)
// AT1MISSL<AT1MISS6>
extern volatile __bit                   AT1MISS6            __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 AT1MISS6_bit        _BIT_ACCESS(AT1MISSL,6)
// AT1MISSL<AT1MISS7>
extern volatile __bit                   AT1MISS7            __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 AT1MISS7_bit        _BIT_ACCESS(AT1MISSL,7)
// AT1MISSH<AT1MISS8>
extern volatile __bit                   AT1MISS8            __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 AT1MISS8_bit        _BIT_ACCESS(AT1MISSH,0)
// AT1MISSH<AT1MISS9>
extern volatile __bit                   AT1MISS9            __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 AT1MISS9_bit        _BIT_ACCESS(AT1MISSH,1)
// AT1IE0<AT1MISSIE>
extern volatile __bit                   AT1MISSIE           __at(0x40B9);	// @ (0x817 * 8 + 1)
#define                                 AT1MISSIE_bit       _BIT_ACCESS(AT1IE0,1)
// AT1IR0<AT1MISSIF>
extern volatile __bit                   AT1MISSIF           __at(0x40B1);	// @ (0x816 * 8 + 1)
#define                                 AT1MISSIF_bit       _BIT_ACCESS(AT1IR0,1)
// AT1CON0<AT1MODE>
extern volatile __bit                   AT1MODE             __at(0x40A0);	// @ (0x814 * 8 + 0)
#define                                 AT1MODE_bit         _BIT_ACCESS(AT1CON0,0)
// AT1CON1<AT1MPP>
extern volatile __bit                   AT1MPP              __at(0x40AA);	// @ (0x815 * 8 + 2)
#define                                 AT1MPP_bit          _BIT_ACCESS(AT1CON1,2)
// AT1PERL<AT1PER0>
extern volatile __bit                   AT1PER0             __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 AT1PER0_bit         _BIT_ACCESS(AT1PERL,0)
// AT1PERL<AT1PER1>
extern volatile __bit                   AT1PER1             __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 AT1PER1_bit         _BIT_ACCESS(AT1PERL,1)
// AT1PERH<AT1PER10>
extern volatile __bit                   AT1PER10            __at(0x408A);	// @ (0x811 * 8 + 2)
#define                                 AT1PER10_bit        _BIT_ACCESS(AT1PERH,2)
// AT1PERH<AT1PER11>
extern volatile __bit                   AT1PER11            __at(0x408B);	// @ (0x811 * 8 + 3)
#define                                 AT1PER11_bit        _BIT_ACCESS(AT1PERH,3)
// AT1PERH<AT1PER12>
extern volatile __bit                   AT1PER12            __at(0x408C);	// @ (0x811 * 8 + 4)
#define                                 AT1PER12_bit        _BIT_ACCESS(AT1PERH,4)
// AT1PERH<AT1PER13>
extern volatile __bit                   AT1PER13            __at(0x408D);	// @ (0x811 * 8 + 5)
#define                                 AT1PER13_bit        _BIT_ACCESS(AT1PERH,5)
// AT1PERH<AT1PER14>
extern volatile __bit                   AT1PER14            __at(0x408E);	// @ (0x811 * 8 + 6)
#define                                 AT1PER14_bit        _BIT_ACCESS(AT1PERH,6)
// AT1PERL<AT1PER2>
extern volatile __bit                   AT1PER2             __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 AT1PER2_bit         _BIT_ACCESS(AT1PERL,2)
// AT1PERL<AT1PER3>
extern volatile __bit                   AT1PER3             __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 AT1PER3_bit         _BIT_ACCESS(AT1PERL,3)
// AT1PERL<AT1PER4>
extern volatile __bit                   AT1PER4             __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 AT1PER4_bit         _BIT_ACCESS(AT1PERL,4)
// AT1PERL<AT1PER5>
extern volatile __bit                   AT1PER5             __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 AT1PER5_bit         _BIT_ACCESS(AT1PERL,5)
// AT1PERL<AT1PER6>
extern volatile __bit                   AT1PER6             __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 AT1PER6_bit         _BIT_ACCESS(AT1PERL,6)
// AT1PERL<AT1PER7>
extern volatile __bit                   AT1PER7             __at(0x4087);	// @ (0x810 * 8 + 7)
#define                                 AT1PER7_bit         _BIT_ACCESS(AT1PERL,7)
// AT1PERH<AT1PER8>
extern volatile __bit                   AT1PER8             __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 AT1PER8_bit         _BIT_ACCESS(AT1PERH,0)
// AT1PERH<AT1PER9>
extern volatile __bit                   AT1PER9             __at(0x4089);	// @ (0x811 * 8 + 1)
#define                                 AT1PER9_bit         _BIT_ACCESS(AT1PERH,1)
// AT1IE0<AT1PERIE>
extern volatile __bit                   AT1PERIE            __at(0x40B8);	// @ (0x817 * 8 + 0)
#define                                 AT1PERIE_bit        _BIT_ACCESS(AT1IE0,0)
// AT1IR0<AT1PERIF>
extern volatile __bit                   AT1PERIF            __at(0x40B0);	// @ (0x816 * 8 + 0)
#define                                 AT1PERIF_bit        _BIT_ACCESS(AT1IR0,0)
// AT1CON1<AT1PHP>
extern volatile __bit                   AT1PHP              __at(0x40AE);	// @ (0x815 * 8 + 6)
#define                                 AT1PHP_bit          _BIT_ACCESS(AT1CON1,6)
// AT1PHSL<AT1PHS0>
extern volatile __bit                   AT1PHS0             __at(0x4090);	// @ (0x812 * 8 + 0)
#define                                 AT1PHS0_bit         _BIT_ACCESS(AT1PHSL,0)
// AT1PHSL<AT1PHS1>
extern volatile __bit                   AT1PHS1             __at(0x4091);	// @ (0x812 * 8 + 1)
#define                                 AT1PHS1_bit         _BIT_ACCESS(AT1PHSL,1)
// AT1PHSL<AT1PHS2>
extern volatile __bit                   AT1PHS2             __at(0x4092);	// @ (0x812 * 8 + 2)
#define                                 AT1PHS2_bit         _BIT_ACCESS(AT1PHSL,2)
// AT1PHSL<AT1PHS3>
extern volatile __bit                   AT1PHS3             __at(0x4093);	// @ (0x812 * 8 + 3)
#define                                 AT1PHS3_bit         _BIT_ACCESS(AT1PHSL,3)
// AT1PHSL<AT1PHS4>
extern volatile __bit                   AT1PHS4             __at(0x4094);	// @ (0x812 * 8 + 4)
#define                                 AT1PHS4_bit         _BIT_ACCESS(AT1PHSL,4)
// AT1PHSL<AT1PHS5>
extern volatile __bit                   AT1PHS5             __at(0x4095);	// @ (0x812 * 8 + 5)
#define                                 AT1PHS5_bit         _BIT_ACCESS(AT1PHSL,5)
// AT1PHSL<AT1PHS6>
extern volatile __bit                   AT1PHS6             __at(0x4096);	// @ (0x812 * 8 + 6)
#define                                 AT1PHS6_bit         _BIT_ACCESS(AT1PHSL,6)
// AT1PHSL<AT1PHS7>
extern volatile __bit                   AT1PHS7             __at(0x4097);	// @ (0x812 * 8 + 7)
#define                                 AT1PHS7_bit         _BIT_ACCESS(AT1PHSL,7)
// AT1PHSH<AT1PHS8>
extern volatile __bit                   AT1PHS8             __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 AT1PHS8_bit         _BIT_ACCESS(AT1PHSH,0)
// AT1PHSH<AT1PHS9>
extern volatile __bit                   AT1PHS9             __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 AT1PHS9_bit         _BIT_ACCESS(AT1PHSH,1)
// AT1IE0<AT1PHSIE>
extern volatile __bit                   AT1PHSIE            __at(0x40BA);	// @ (0x817 * 8 + 2)
#define                                 AT1PHSIE_bit        _BIT_ACCESS(AT1IE0,2)
// AT1IR0<AT1PHSIF>
extern volatile __bit                   AT1PHSIF            __at(0x40B2);	// @ (0x816 * 8 + 2)
#define                                 AT1PHSIF_bit        _BIT_ACCESS(AT1IR0,2)
// AT1CON0<AT1POL>
extern volatile __bit                   AT1POL              __at(0x40A3);	// @ (0x814 * 8 + 3)
#define                                 AT1POL_bit          _BIT_ACCESS(AT1CON0,3)
// AT1PERH<AT1POV>
extern volatile __bit                   AT1POV              __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 AT1POV_bit          _BIT_ACCESS(AT1PERH,7)
// AT1CON0<AT1PREC>
extern volatile __bit                   AT1PREC             __at(0x40A6);	// @ (0x814 * 8 + 6)
#define                                 AT1PREC_bit         _BIT_ACCESS(AT1CON0,6)
// AT1CON1<AT1PRP>
extern volatile __bit                   AT1PRP              __at(0x40AC);	// @ (0x815 * 8 + 4)
#define                                 AT1PRP_bit          _BIT_ACCESS(AT1CON1,4)
// AT1CON0<AT1PS0>
extern volatile __bit                   AT1PS0              __at(0x40A4);	// @ (0x814 * 8 + 4)
#define                                 AT1PS0_bit          _BIT_ACCESS(AT1CON0,4)
// AT1CON0<AT1PS1>
extern volatile __bit                   AT1PS1              __at(0x40A5);	// @ (0x814 * 8 + 5)
#define                                 AT1PS1_bit          _BIT_ACCESS(AT1CON0,5)
// AT1RESL<AT1RES0>
extern volatile __bit                   AT1RES0             __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 AT1RES0_bit         _BIT_ACCESS(AT1RESL,0)
// AT1RESL<AT1RES1>
extern volatile __bit                   AT1RES1             __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 AT1RES1_bit         _BIT_ACCESS(AT1RESL,1)
// AT1RESL<AT1RES2>
extern volatile __bit                   AT1RES2             __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 AT1RES2_bit         _BIT_ACCESS(AT1RESL,2)
// AT1RESL<AT1RES3>
extern volatile __bit                   AT1RES3             __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 AT1RES3_bit         _BIT_ACCESS(AT1RESL,3)
// AT1RESL<AT1RES4>
extern volatile __bit                   AT1RES4             __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 AT1RES4_bit         _BIT_ACCESS(AT1RESL,4)
// AT1RESL<AT1RES5>
extern volatile __bit                   AT1RES5             __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 AT1RES5_bit         _BIT_ACCESS(AT1RESL,5)
// AT1RESL<AT1RES6>
extern volatile __bit                   AT1RES6             __at(0x4066);	// @ (0x80C * 8 + 6)
#define                                 AT1RES6_bit         _BIT_ACCESS(AT1RESL,6)
// AT1RESL<AT1RES7>
extern volatile __bit                   AT1RES7             __at(0x4067);	// @ (0x80C * 8 + 7)
#define                                 AT1RES7_bit         _BIT_ACCESS(AT1RESL,7)
// AT1RESH<AT1RES8>
extern volatile __bit                   AT1RES8             __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 AT1RES8_bit         _BIT_ACCESS(AT1RESH,0)
// AT1RESH<AT1RES9>
extern volatile __bit                   AT1RES9             __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 AT1RES9_bit         _BIT_ACCESS(AT1RESH,1)
// AT1SIG<AT1SSEL0>
extern volatile __bit                   AT1SSEL0            __at(0x4468);	// @ (0x88D * 8 + 0)
#define                                 AT1SSEL0_bit        _BIT_ACCESS(AT1SIG,0)
// AT1SIG<AT1SSEL1>
extern volatile __bit                   AT1SSEL1            __at(0x4469);	// @ (0x88D * 8 + 1)
#define                                 AT1SSEL1_bit        _BIT_ACCESS(AT1SIG,1)
// AT1SIG<AT1SSEL2>
extern volatile __bit                   AT1SSEL2            __at(0x446A);	// @ (0x88D * 8 + 2)
#define                                 AT1SSEL2_bit        _BIT_ACCESS(AT1SIG,2)
// AT1STPTL<AT1STPT0>
extern volatile __bit                   AT1STPT0            __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 AT1STPT0_bit        _BIT_ACCESS(AT1STPTL,0)
// AT1STPTL<AT1STPT1>
extern volatile __bit                   AT1STPT1            __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 AT1STPT1_bit        _BIT_ACCESS(AT1STPTL,1)
// AT1STPTH<AT1STPT10>
extern volatile __bit                   AT1STPT10           __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 AT1STPT10_bit       _BIT_ACCESS(AT1STPTH,2)
// AT1STPTH<AT1STPT11>
extern volatile __bit                   AT1STPT11           __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 AT1STPT11_bit       _BIT_ACCESS(AT1STPTH,3)
// AT1STPTH<AT1STPT12>
extern volatile __bit                   AT1STPT12           __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 AT1STPT12_bit       _BIT_ACCESS(AT1STPTH,4)
// AT1STPTH<AT1STPT13>
extern volatile __bit                   AT1STPT13           __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 AT1STPT13_bit       _BIT_ACCESS(AT1STPTH,5)
// AT1STPTH<AT1STPT14>
extern volatile __bit                   AT1STPT14           __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 AT1STPT14_bit       _BIT_ACCESS(AT1STPTH,6)
// AT1STPTL<AT1STPT2>
extern volatile __bit                   AT1STPT2            __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 AT1STPT2_bit        _BIT_ACCESS(AT1STPTL,2)
// AT1STPTL<AT1STPT3>
extern volatile __bit                   AT1STPT3            __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 AT1STPT3_bit        _BIT_ACCESS(AT1STPTL,3)
// AT1STPTL<AT1STPT4>
extern volatile __bit                   AT1STPT4            __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 AT1STPT4_bit        _BIT_ACCESS(AT1STPTL,4)
// AT1STPTL<AT1STPT5>
extern volatile __bit                   AT1STPT5            __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 AT1STPT5_bit        _BIT_ACCESS(AT1STPTL,5)
// AT1STPTL<AT1STPT6>
extern volatile __bit                   AT1STPT6            __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 AT1STPT6_bit        _BIT_ACCESS(AT1STPTL,6)
// AT1STPTL<AT1STPT7>
extern volatile __bit                   AT1STPT7            __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 AT1STPT7_bit        _BIT_ACCESS(AT1STPTL,7)
// AT1STPTH<AT1STPT8>
extern volatile __bit                   AT1STPT8            __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 AT1STPT8_bit        _BIT_ACCESS(AT1STPTH,0)
// AT1STPTH<AT1STPT9>
extern volatile __bit                   AT1STPT9            __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 AT1STPT9_bit        _BIT_ACCESS(AT1STPTH,1)
// AT1CON1<AT1VALID>
extern volatile __bit                   AT1VALID            __at(0x40A8);	// @ (0x815 * 8 + 0)
#define                                 AT1VALID_bit        _BIT_ACCESS(AT1CON1,0)
// ATCC1PPS<ATCC1PPS0>
extern volatile __bit                   ATCC1PPS0           __at(0x70F8);	// @ (0xE1F * 8 + 0)
#define                                 ATCC1PPS0_bit       _BIT_ACCESS(ATCC1PPS,0)
// ATCC1PPS<ATCC1PPS1>
extern volatile __bit                   ATCC1PPS1           __at(0x70F9);	// @ (0xE1F * 8 + 1)
#define                                 ATCC1PPS1_bit       _BIT_ACCESS(ATCC1PPS,1)
// ATCC1PPS<ATCC1PPS2>
extern volatile __bit                   ATCC1PPS2           __at(0x70FA);	// @ (0xE1F * 8 + 2)
#define                                 ATCC1PPS2_bit       _BIT_ACCESS(ATCC1PPS,2)
// ATCC1PPS<ATCC1PPS3>
extern volatile __bit                   ATCC1PPS3           __at(0x70FB);	// @ (0xE1F * 8 + 3)
#define                                 ATCC1PPS3_bit       _BIT_ACCESS(ATCC1PPS,3)
// ATCC1PPS<ATCC1PPS4>
extern volatile __bit                   ATCC1PPS4           __at(0x70FC);	// @ (0xE1F * 8 + 4)
#define                                 ATCC1PPS4_bit       _BIT_ACCESS(ATCC1PPS,4)
// ATCC2PPS<ATCC2PPS0>
extern volatile __bit                   ATCC2PPS0           __at(0x7118);	// @ (0xE23 * 8 + 0)
#define                                 ATCC2PPS0_bit       _BIT_ACCESS(ATCC2PPS,0)
// ATCC2PPS<ATCC2PPS1>
extern volatile __bit                   ATCC2PPS1           __at(0x7119);	// @ (0xE23 * 8 + 1)
#define                                 ATCC2PPS1_bit       _BIT_ACCESS(ATCC2PPS,1)
// ATCC2PPS<ATCC2PPS2>
extern volatile __bit                   ATCC2PPS2           __at(0x711A);	// @ (0xE23 * 8 + 2)
#define                                 ATCC2PPS2_bit       _BIT_ACCESS(ATCC2PPS,2)
// ATCC2PPS<ATCC2PPS3>
extern volatile __bit                   ATCC2PPS3           __at(0x711B);	// @ (0xE23 * 8 + 3)
#define                                 ATCC2PPS3_bit       _BIT_ACCESS(ATCC2PPS,3)
// ATCC2PPS<ATCC2PPS4>
extern volatile __bit                   ATCC2PPS4           __at(0x711C);	// @ (0xE23 * 8 + 4)
#define                                 ATCC2PPS4_bit       _BIT_ACCESS(ATCC2PPS,4)
// ATCC3PPS<ATCC3PPS0>
extern volatile __bit                   ATCC3PPS0           __at(0x7170);	// @ (0xE2E * 8 + 0)
#define                                 ATCC3PPS0_bit       _BIT_ACCESS(ATCC3PPS,0)
// ATCC3PPS<ATCC3PPS1>
extern volatile __bit                   ATCC3PPS1           __at(0x7171);	// @ (0xE2E * 8 + 1)
#define                                 ATCC3PPS1_bit       _BIT_ACCESS(ATCC3PPS,1)
// ATCC3PPS<ATCC3PPS2>
extern volatile __bit                   ATCC3PPS2           __at(0x7172);	// @ (0xE2E * 8 + 2)
#define                                 ATCC3PPS2_bit       _BIT_ACCESS(ATCC3PPS,2)
// ATCC3PPS<ATCC3PPS3>
extern volatile __bit                   ATCC3PPS3           __at(0x7173);	// @ (0xE2E * 8 + 3)
#define                                 ATCC3PPS3_bit       _BIT_ACCESS(ATCC3PPS,3)
// ATCC3PPS<ATCC3PPS4>
extern volatile __bit                   ATCC3PPS4           __at(0x7174);	// @ (0xE2E * 8 + 4)
#define                                 ATCC3PPS4_bit       _BIT_ACCESS(ATCC3PPS,4)
// ATINPPS<ATINPPS0>
extern volatile __bit                   ATINPPS0            __at(0x70B0);	// @ (0xE16 * 8 + 0)
#define                                 ATINPPS0_bit        _BIT_ACCESS(ATINPPS,0)
// ATINPPS<ATINPPS1>
extern volatile __bit                   ATINPPS1            __at(0x70B1);	// @ (0xE16 * 8 + 1)
#define                                 ATINPPS1_bit        _BIT_ACCESS(ATINPPS,1)
// ATINPPS<ATINPPS2>
extern volatile __bit                   ATINPPS2            __at(0x70B2);	// @ (0xE16 * 8 + 2)
#define                                 ATINPPS2_bit        _BIT_ACCESS(ATINPPS,2)
// ATINPPS<ATINPPS3>
extern volatile __bit                   ATINPPS3            __at(0x70B3);	// @ (0xE16 * 8 + 3)
#define                                 ATINPPS3_bit        _BIT_ACCESS(ATINPPS,3)
// ATINPPS<ATINPPS4>
extern volatile __bit                   ATINPPS4            __at(0x70B4);	// @ (0xE16 * 8 + 4)
#define                                 ATINPPS4_bit        _BIT_ACCESS(ATINPPS,4)
// PIE2<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE2,3)
// PIR2<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x8B);	// @ (0x11 * 8 + 3)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR2,3)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0x10A0);	// @ (0x214 * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0x10BC);	// @ (0x217 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// BORCON<BORFS>
extern volatile __bit                   BORFS               __at(0x8B6);	// @ (0x116 * 8 + 6)
#define                                 BORFS_bit           _BIT_ACCESS(BORCON,6)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x8B0);	// @ (0x116 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0xCF2);	// @ (0x19E * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// SSP1BUF<BUF0>
extern volatile __bit                   BUF0                __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 BUF0_bit            _BIT_ACCESS(SSP1BUF,0)
// SSP1BUF<BUF1>
extern volatile __bit                   BUF1                __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 BUF1_bit            _BIT_ACCESS(SSP1BUF,1)
// SSP1BUF<BUF2>
extern volatile __bit                   BUF2                __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 BUF2_bit            _BIT_ACCESS(SSP1BUF,2)
// SSP1BUF<BUF3>
extern volatile __bit                   BUF3                __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 BUF3_bit            _BIT_ACCESS(SSP1BUF,3)
// SSP1BUF<BUF4>
extern volatile __bit                   BUF4                __at(0x108C);	// @ (0x211 * 8 + 4)
#define                                 BUF4_bit            _BIT_ACCESS(SSP1BUF,4)
// SSP1BUF<BUF5>
extern volatile __bit                   BUF5                __at(0x108D);	// @ (0x211 * 8 + 5)
#define                                 BUF5_bit            _BIT_ACCESS(SSP1BUF,5)
// SSP1BUF<BUF6>
extern volatile __bit                   BUF6                __at(0x108E);	// @ (0x211 * 8 + 6)
#define                                 BUF6_bit            _BIT_ACCESS(SSP1BUF,6)
// SSP1BUF<BUF7>
extern volatile __bit                   BUF7                __at(0x108F);	// @ (0x211 * 8 + 7)
#define                                 BUF7_bit            _BIT_ACCESS(SSP1BUF,7)
// CWG1AS1<C1AS>
extern volatile __bit                   C1AS                __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 C1AS_bit            _BIT_ACCESS(CWG1AS1,1)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x889);	// @ (0x111 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x48D);	// @ (0x91 * 8 + 5)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,5)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x8D);	// @ (0x11 * 8 + 5)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,5)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x896);	// @ (0x112 * 8 + 6)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,6)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x897);	// @ (0x112 * 8 + 7)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,7)
// CM1CON1<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x890);	// @ (0x112 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x891);	// @ (0x112 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1CON1,1)
// CM1CON1<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x892);	// @ (0x112 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1CON1,2)
// CM1CON0<C1ON>
extern volatile __bit                   C1ON                __at(0x88F);	// @ (0x111 * 8 + 7)
#define                                 C1ON_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1OUT>
extern volatile __bit                   C1OUT               __at(0x88E);	// @ (0x111 * 8 + 6)
#define                                 C1OUT_bit           _BIT_ACCESS(CM1CON0,6)
// CM1CON1<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x894);	// @ (0x112 * 8 + 4)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1CON1,4)
// CM1CON1<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x895);	// @ (0x112 * 8 + 5)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1CON1,5)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x88C);	// @ (0x111 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SP>
extern volatile __bit                   C1SP                __at(0x88A);	// @ (0x111 * 8 + 2)
#define                                 C1SP_bit            _BIT_ACCESS(CM1CON0,2)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CWG1AS1<C2AS>
extern volatile __bit                   C2AS                __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 C2AS_bit            _BIT_ACCESS(CWG1AS1,2)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x899);	// @ (0x113 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,6)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x8E);	// @ (0x11 * 8 + 6)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,6)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x8A6);	// @ (0x114 * 8 + 6)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,6)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x8A7);	// @ (0x114 * 8 + 7)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,7)
// CM2CON1<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x8A0);	// @ (0x114 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x8A1);	// @ (0x114 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2CON1,1)
// CM2CON1<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x8A2);	// @ (0x114 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2CON1,2)
// CM2CON0<C2ON>
extern volatile __bit                   C2ON                __at(0x89F);	// @ (0x113 * 8 + 7)
#define                                 C2ON_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2OUT>
extern volatile __bit                   C2OUT               __at(0x89E);	// @ (0x113 * 8 + 6)
#define                                 C2OUT_bit           _BIT_ACCESS(CM2CON0,6)
// CM2CON1<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x8A4);	// @ (0x114 * 8 + 4)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2CON1,4)
// CM2CON1<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x8A5);	// @ (0x114 * 8 + 5)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2CON1,5)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x89C);	// @ (0x113 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SP>
extern volatile __bit                   C2SP                __at(0x89A);	// @ (0x113 * 8 + 2)
#define                                 C2SP_bit            _BIT_ACCESS(CM2CON0,2)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x898);	// @ (0x113 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// AT1CCON1<CAP1P>
extern volatile __bit                   CAP1P               __at(0x448B);	// @ (0x891 * 8 + 3)
#define                                 CAP1P_bit           _BIT_ACCESS(AT1CCON1,3)
// AT1CCON2<CAP2P>
extern volatile __bit                   CAP2P               __at(0x44AB);	// @ (0x895 * 8 + 3)
#define                                 CAP2P_bit           _BIT_ACCESS(AT1CCON2,3)
// AT1CCON3<CAP3P>
extern volatile __bit                   CAP3P               __at(0x44CB);	// @ (0x899 * 8 + 3)
#define                                 CAP3P_bit           _BIT_ACCESS(AT1CCON3,3)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// AT1CC1L<CC10>
extern volatile __bit                   CC10                __at(0x4478);	// @ (0x88F * 8 + 0)
#define                                 CC10_bit            _BIT_ACCESS(AT1CC1L,0)
// AT1CC1L<CC11>
extern volatile __bit                   CC11                __at(0x4479);	// @ (0x88F * 8 + 1)
#define                                 CC11_bit            _BIT_ACCESS(AT1CC1L,1)
// AT1CC1L<CC12>
extern volatile __bit                   CC12                __at(0x447A);	// @ (0x88F * 8 + 2)
#define                                 CC12_bit            _BIT_ACCESS(AT1CC1L,2)
// AT1CC1L<CC14>
extern volatile __bit                   CC14                __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 CC14_bit            _BIT_ACCESS(AT1CC1L,4)
// AT1CC1L<CC15>
extern volatile __bit                   CC15                __at(0x447D);	// @ (0x88F * 8 + 5)
#define                                 CC15_bit            _BIT_ACCESS(AT1CC1L,5)
// AT1CC1L<CC16>
extern volatile __bit                   CC16                __at(0x447E);	// @ (0x88F * 8 + 6)
#define                                 CC16_bit            _BIT_ACCESS(AT1CC1L,6)
// AT1CC1L<CC17>
extern volatile __bit                   CC17                __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 CC17_bit            _BIT_ACCESS(AT1CC1L,7)
// AT1CC1H<CC18>
extern volatile __bit                   CC18                __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 CC18_bit            _BIT_ACCESS(AT1CC1H,0)
// AT1CC1H<CC19>
extern volatile __bit                   CC19                __at(0x4481);	// @ (0x890 * 8 + 1)
#define                                 CC19_bit            _BIT_ACCESS(AT1CC1H,1)
// AT1CCON1<CC1EN>
extern volatile __bit                   CC1EN               __at(0x448F);	// @ (0x891 * 8 + 7)
#define                                 CC1EN_bit           _BIT_ACCESS(AT1CCON1,7)
// AT1CCON1<CC1MODE>
extern volatile __bit                   CC1MODE             __at(0x4488);	// @ (0x891 * 8 + 0)
#define                                 CC1MODE_bit         _BIT_ACCESS(AT1CCON1,0)
// AT1CCON1<CC1POL>
extern volatile __bit                   CC1POL              __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 CC1POL_bit          _BIT_ACCESS(AT1CCON1,4)
// AT1CC2L<CC20>
extern volatile __bit                   CC20                __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 CC20_bit            _BIT_ACCESS(AT1CC2L,0)
// AT1CC2L<CC21>
extern volatile __bit                   CC21                __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 CC21_bit            _BIT_ACCESS(AT1CC2L,1)
// AT1CC2L<CC22>
extern volatile __bit                   CC22                __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 CC22_bit            _BIT_ACCESS(AT1CC2L,2)
// AT1CC2L<CC24>
extern volatile __bit                   CC24                __at(0x449C);	// @ (0x893 * 8 + 4)
#define                                 CC24_bit            _BIT_ACCESS(AT1CC2L,4)
// AT1CC2L<CC26>
extern volatile __bit                   CC26                __at(0x449E);	// @ (0x893 * 8 + 6)
#define                                 CC26_bit            _BIT_ACCESS(AT1CC2L,6)
// AT1CC2L<CC27>
extern volatile __bit                   CC27                __at(0x449F);	// @ (0x893 * 8 + 7)
#define                                 CC27_bit            _BIT_ACCESS(AT1CC2L,7)
// AT1CC2H<CC28>
extern volatile __bit                   CC28                __at(0x44A0);	// @ (0x894 * 8 + 0)
#define                                 CC28_bit            _BIT_ACCESS(AT1CC2H,0)
// AT1CC2H<CC29>
extern volatile __bit                   CC29                __at(0x44A1);	// @ (0x894 * 8 + 1)
#define                                 CC29_bit            _BIT_ACCESS(AT1CC2H,1)
// AT1CCON2<CC2EN>
extern volatile __bit                   CC2EN               __at(0x44AF);	// @ (0x895 * 8 + 7)
#define                                 CC2EN_bit           _BIT_ACCESS(AT1CCON2,7)
// AT1CCON2<CC2MODE>
extern volatile __bit                   CC2MODE             __at(0x44A8);	// @ (0x895 * 8 + 0)
#define                                 CC2MODE_bit         _BIT_ACCESS(AT1CCON2,0)
// AT1CCON2<CC2POL>
extern volatile __bit                   CC2POL              __at(0x44AC);	// @ (0x895 * 8 + 4)
#define                                 CC2POL_bit          _BIT_ACCESS(AT1CCON2,4)
// AT1CC3L<CC30>
extern volatile __bit                   CC30                __at(0x44B8);	// @ (0x897 * 8 + 0)
#define                                 CC30_bit            _BIT_ACCESS(AT1CC3L,0)
// AT1CC3L<CC31>
extern volatile __bit                   CC31                __at(0x44B9);	// @ (0x897 * 8 + 1)
#define                                 CC31_bit            _BIT_ACCESS(AT1CC3L,1)
// AT1CC3L<CC32>
extern volatile __bit                   CC32                __at(0x44BA);	// @ (0x897 * 8 + 2)
#define                                 CC32_bit            _BIT_ACCESS(AT1CC3L,2)
// AT1CC3L<CC33>
extern volatile __bit                   CC33                __at(0x44BB);	// @ (0x897 * 8 + 3)
#define                                 CC33_bit            _BIT_ACCESS(AT1CC3L,3)
// AT1CC3L<CC34>
extern volatile __bit                   CC34                __at(0x44BC);	// @ (0x897 * 8 + 4)
#define                                 CC34_bit            _BIT_ACCESS(AT1CC3L,4)
// AT1CC3L<CC35>
extern volatile __bit                   CC35                __at(0x44BD);	// @ (0x897 * 8 + 5)
#define                                 CC35_bit            _BIT_ACCESS(AT1CC3L,5)
// AT1CC3L<CC36>
extern volatile __bit                   CC36                __at(0x44BE);	// @ (0x897 * 8 + 6)
#define                                 CC36_bit            _BIT_ACCESS(AT1CC3L,6)
// AT1CC3L<CC37>
extern volatile __bit                   CC37                __at(0x44BF);	// @ (0x897 * 8 + 7)
#define                                 CC37_bit            _BIT_ACCESS(AT1CC3L,7)
// AT1CC3H<CC38>
extern volatile __bit                   CC38                __at(0x44C0);	// @ (0x898 * 8 + 0)
#define                                 CC38_bit            _BIT_ACCESS(AT1CC3H,0)
// AT1CC3H<CC39>
extern volatile __bit                   CC39                __at(0x44C1);	// @ (0x898 * 8 + 1)
#define                                 CC39_bit            _BIT_ACCESS(AT1CC3H,1)
// AT1CCON3<CC3EN>
extern volatile __bit                   CC3EN               __at(0x44CF);	// @ (0x899 * 8 + 7)
#define                                 CC3EN_bit           _BIT_ACCESS(AT1CCON3,7)
// AT1CCON3<CC3MODE>
extern volatile __bit                   CC3MODE             __at(0x44C8);	// @ (0x899 * 8 + 0)
#define                                 CC3MODE_bit         _BIT_ACCESS(AT1CCON3,0)
// AT1CCON3<CC3POL>
extern volatile __bit                   CC3POL              __at(0x44CC);	// @ (0x899 * 8 + 4)
#define                                 CC3POL_bit          _BIT_ACCESS(AT1CCON3,4)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x14A0);	// @ (0x294 * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x14A1);	// @ (0x294 * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x14A2);	// @ (0x294 * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x149F);	// @ (0x293 * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x149C);	// @ (0x293 * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE1<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE1,2)
// PIR1<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x82);	// @ (0x10 * 8 + 2)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR1,2)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1498);	// @ (0x293 * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1499);	// @ (0x293 * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x149A);	// @ (0x293 * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x149B);	// @ (0x293 * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x149D);	// @ (0x293 * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0x70A0);	// @ (0xE14 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0x70A1);	// @ (0xE14 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0x70A2);	// @ (0xE14 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0x70A3);	// @ (0xE14 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0x70A4);	// @ (0xE14 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCPTMRS<CCP1TSEL0>
extern volatile __bit                   CCP1TSEL0           __at(0x14F0);	// @ (0x29E * 8 + 0)
#define                                 CCP1TSEL0_bit       _BIT_ACCESS(CCPTMRS,0)
// CCPTMRS<CCP1TSEL1>
extern volatile __bit                   CCP1TSEL1           __at(0x14F1);	// @ (0x29E * 8 + 1)
#define                                 CCP1TSEL1_bit       _BIT_ACCESS(CCPTMRS,1)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x14D8);	// @ (0x29B * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x14D9);	// @ (0x29B * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x14DA);	// @ (0x29B * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x14D7);	// @ (0x29A * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x14D4);	// @ (0x29A * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE2<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE2,0)
// PIR2<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x88);	// @ (0x11 * 8 + 0)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR2,0)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x14D0);	// @ (0x29A * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x14D1);	// @ (0x29A * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x14D2);	// @ (0x29A * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x14D3);	// @ (0x29A * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x14D5);	// @ (0x29A * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0x70A8);	// @ (0xE15 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0x70A9);	// @ (0xE15 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0x70AA);	// @ (0xE15 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0x70AB);	// @ (0xE15 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0x70AC);	// @ (0xE15 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// CCPTMRS<CCP2TSEL0>
extern volatile __bit                   CCP2TSEL0           __at(0x14F2);	// @ (0x29E * 8 + 2)
#define                                 CCP2TSEL0_bit       _BIT_ACCESS(CCPTMRS,2)
// CCPTMRS<CCP2TSEL1>
extern volatile __bit                   CCP2TSEL1           __at(0x14F3);	// @ (0x29E * 8 + 3)
#define                                 CCP2TSEL1_bit       _BIT_ACCESS(CCPTMRS,3)
// AT1CC2L<CCW5>
extern volatile __bit                   CCW5                __at(0x449D);	// @ (0x893 * 8 + 5)
#define                                 CCW5_bit            _BIT_ACCESS(AT1CC2L,5)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x8BA);	// @ (0x117 * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x8BB);	// @ (0x117 * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// PMCON1<CFGS>
extern volatile __bit                   CFGS                __at(0xCAE);	// @ (0x195 * 8 + 6)
#define                                 CFGS_bit            _BIT_ACCESS(PMCON1,6)
// ADCON0<CHS0>
extern volatile __bit                   CHS0                __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 CHS0_bit            _BIT_ACCESS(ADCON0,2)
// ADCON0<CHS1>
extern volatile __bit                   CHS1                __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 CHS1_bit            _BIT_ACCESS(ADCON0,3)
// ADCON0<CHS2>
extern volatile __bit                   CHS2                __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 CHS2_bit            _BIT_ACCESS(ADCON0,4)
// ADCON0<CHS3>
extern volatile __bit                   CHS3                __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 CHS3_bit            _BIT_ACCESS(ADCON0,5)
// ADCON0<CHS4>
extern volatile __bit                   CHS4                __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 CHS4_bit            _BIT_ACCESS(ADCON0,6)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0x10A6);	// @ (0x214 * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// CKPPS<CKPPS0>
extern volatile __bit                   CKPPS0              __at(0x7128);	// @ (0xE25 * 8 + 0)
#define                                 CKPPS0_bit          _BIT_ACCESS(CKPPS,0)
// CKPPS<CKPPS1>
extern volatile __bit                   CKPPS1              __at(0x7129);	// @ (0xE25 * 8 + 1)
#define                                 CKPPS1_bit          _BIT_ACCESS(CKPPS,1)
// CKPPS<CKPPS2>
extern volatile __bit                   CKPPS2              __at(0x712A);	// @ (0xE25 * 8 + 2)
#define                                 CKPPS2_bit          _BIT_ACCESS(CKPPS,2)
// CKPPS<CKPPS3>
extern volatile __bit                   CKPPS3              __at(0x712B);	// @ (0xE25 * 8 + 3)
#define                                 CKPPS3_bit          _BIT_ACCESS(CKPPS,3)
// CKPPS<CKPPS4>
extern volatile __bit                   CKPPS4              __at(0x712C);	// @ (0xE25 * 8 + 4)
#define                                 CKPPS4_bit          _BIT_ACCESS(CKPPS,4)
// PIE3<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x490);	// @ (0x92 * 8 + 0)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR3,0)
// PIE3<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x491);	// @ (0x92 * 8 + 1)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR3,1)
// PIE3<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x492);	// @ (0x92 * 8 + 2)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE3,2)
// PIR3<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR3,2)
// PIE3<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x493);	// @ (0x92 * 8 + 3)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR3,3)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0x7140);	// @ (0xE28 * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0x7141);	// @ (0xE28 * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0x7142);	// @ (0xE28 * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0x7143);	// @ (0xE28 * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0x7144);	// @ (0xE28 * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0x7148);	// @ (0xE29 * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0x7149);	// @ (0xE29 * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0x714A);	// @ (0xE29 * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0x714B);	// @ (0xE29 * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0x714C);	// @ (0xE29 * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0x7150);	// @ (0xE2A * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0x7151);	// @ (0xE2A * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0x7152);	// @ (0xE2A * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0x7153);	// @ (0xE2A * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0x7154);	// @ (0xE2A * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0x7158);	// @ (0xE2B * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0x7159);	// @ (0xE2B * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0x715A);	// @ (0xE2B * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0x715B);	// @ (0xE2B * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0x715C);	// @ (0xE2B * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// AT1CSEL1<CP1S0>
extern volatile __bit                   CP1S0               __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 CP1S0_bit           _BIT_ACCESS(AT1CSEL1,0)
// AT1CSEL1<CP1S1>
extern volatile __bit                   CP1S1               __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 CP1S1_bit           _BIT_ACCESS(AT1CSEL1,1)
// AT1CSEL1<CP1S2>
extern volatile __bit                   CP1S2               __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 CP1S2_bit           _BIT_ACCESS(AT1CSEL1,2)
// AT1CSEL2<CP2S0>
extern volatile __bit                   CP2S0               __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 CP2S0_bit           _BIT_ACCESS(AT1CSEL2,0)
// AT1CSEL2<CP2S1>
extern volatile __bit                   CP2S1               __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 CP2S1_bit           _BIT_ACCESS(AT1CSEL2,1)
// AT1CSEL2<CP2S2>
extern volatile __bit                   CP2S2               __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 CP2S2_bit           _BIT_ACCESS(AT1CSEL2,2)
// AT1CSEL3<CP3S0>
extern volatile __bit                   CP3S0               __at(0x44B0);	// @ (0x896 * 8 + 0)
#define                                 CP3S0_bit           _BIT_ACCESS(AT1CSEL3,0)
// AT1CSEL3<CP3S1>
extern volatile __bit                   CP3S1               __at(0x44B1);	// @ (0x896 * 8 + 1)
#define                                 CP3S1_bit           _BIT_ACCESS(AT1CSEL3,1)
// AT1CSEL3<CP3S2>
extern volatile __bit                   CP3S2               __at(0x44B2);	// @ (0x896 * 8 + 2)
#define                                 CP3S2_bit           _BIT_ACCESS(AT1CSEL3,2)
// CRCACCL<CRCACC0>
extern volatile __bit                   CRCACC0             __at(0x3C98);	// @ (0x793 * 8 + 0)
#define                                 CRCACC0_bit         _BIT_ACCESS(CRCACCL,0)
// CRCACCL<CRCACC1>
extern volatile __bit                   CRCACC1             __at(0x3C99);	// @ (0x793 * 8 + 1)
#define                                 CRCACC1_bit         _BIT_ACCESS(CRCACCL,1)
// CRCACCH<CRCACC10>
extern volatile __bit                   CRCACC10            __at(0x3CA2);	// @ (0x794 * 8 + 2)
#define                                 CRCACC10_bit        _BIT_ACCESS(CRCACCH,2)
// CRCACCH<CRCACC11>
extern volatile __bit                   CRCACC11            __at(0x3CA3);	// @ (0x794 * 8 + 3)
#define                                 CRCACC11_bit        _BIT_ACCESS(CRCACCH,3)
// CRCACCH<CRCACC12>
extern volatile __bit                   CRCACC12            __at(0x3CA4);	// @ (0x794 * 8 + 4)
#define                                 CRCACC12_bit        _BIT_ACCESS(CRCACCH,4)
// CRCACCH<CRCACC13>
extern volatile __bit                   CRCACC13            __at(0x3CA5);	// @ (0x794 * 8 + 5)
#define                                 CRCACC13_bit        _BIT_ACCESS(CRCACCH,5)
// CRCACCH<CRCACC14>
extern volatile __bit                   CRCACC14            __at(0x3CA6);	// @ (0x794 * 8 + 6)
#define                                 CRCACC14_bit        _BIT_ACCESS(CRCACCH,6)
// CRCACCH<CRCACC15>
extern volatile __bit                   CRCACC15            __at(0x3CA7);	// @ (0x794 * 8 + 7)
#define                                 CRCACC15_bit        _BIT_ACCESS(CRCACCH,7)
// CRCACCL<CRCACC2>
extern volatile __bit                   CRCACC2             __at(0x3C9A);	// @ (0x793 * 8 + 2)
#define                                 CRCACC2_bit         _BIT_ACCESS(CRCACCL,2)
// CRCACCL<CRCACC3>
extern volatile __bit                   CRCACC3             __at(0x3C9B);	// @ (0x793 * 8 + 3)
#define                                 CRCACC3_bit         _BIT_ACCESS(CRCACCL,3)
// CRCACCL<CRCACC4>
extern volatile __bit                   CRCACC4             __at(0x3C9C);	// @ (0x793 * 8 + 4)
#define                                 CRCACC4_bit         _BIT_ACCESS(CRCACCL,4)
// CRCACCL<CRCACC5>
extern volatile __bit                   CRCACC5             __at(0x3C9D);	// @ (0x793 * 8 + 5)
#define                                 CRCACC5_bit         _BIT_ACCESS(CRCACCL,5)
// CRCACCL<CRCACC6>
extern volatile __bit                   CRCACC6             __at(0x3C9E);	// @ (0x793 * 8 + 6)
#define                                 CRCACC6_bit         _BIT_ACCESS(CRCACCL,6)
// CRCACCL<CRCACC7>
extern volatile __bit                   CRCACC7             __at(0x3C9F);	// @ (0x793 * 8 + 7)
#define                                 CRCACC7_bit         _BIT_ACCESS(CRCACCL,7)
// CRCACCH<CRCACC8>
extern volatile __bit                   CRCACC8             __at(0x3CA0);	// @ (0x794 * 8 + 0)
#define                                 CRCACC8_bit         _BIT_ACCESS(CRCACCH,0)
// CRCACCH<CRCACC9>
extern volatile __bit                   CRCACC9             __at(0x3CA1);	// @ (0x794 * 8 + 1)
#define                                 CRCACC9_bit         _BIT_ACCESS(CRCACCH,1)
// CRCCON0<CRCACCM>
extern volatile __bit                   CRCACCM             __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 CRCACCM_bit         _BIT_ACCESS(CRCCON0,4)
// CRCCON0<CRCBUSY>
extern volatile __bit                   CRCBUSY             __at(0x3CCD);	// @ (0x799 * 8 + 5)
#define                                 CRCBUSY_bit         _BIT_ACCESS(CRCCON0,5)
// CRCDATL<CRCDAT0>
extern volatile __bit                   CRCDAT0             __at(0x3C88);	// @ (0x791 * 8 + 0)
#define                                 CRCDAT0_bit         _BIT_ACCESS(CRCDATL,0)
// CRCDATL<CRCDAT1>
extern volatile __bit                   CRCDAT1             __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 CRCDAT1_bit         _BIT_ACCESS(CRCDATL,1)
// CRCDATH<CRCDAT10>
extern volatile __bit                   CRCDAT10            __at(0x3C92);	// @ (0x792 * 8 + 2)
#define                                 CRCDAT10_bit        _BIT_ACCESS(CRCDATH,2)
// CRCDATH<CRCDAT11>
extern volatile __bit                   CRCDAT11            __at(0x3C93);	// @ (0x792 * 8 + 3)
#define                                 CRCDAT11_bit        _BIT_ACCESS(CRCDATH,3)
// CRCDATH<CRCDAT12>
extern volatile __bit                   CRCDAT12            __at(0x3C94);	// @ (0x792 * 8 + 4)
#define                                 CRCDAT12_bit        _BIT_ACCESS(CRCDATH,4)
// CRCDATH<CRCDAT13>
extern volatile __bit                   CRCDAT13            __at(0x3C95);	// @ (0x792 * 8 + 5)
#define                                 CRCDAT13_bit        _BIT_ACCESS(CRCDATH,5)
// CRCDATH<CRCDAT14>
extern volatile __bit                   CRCDAT14            __at(0x3C96);	// @ (0x792 * 8 + 6)
#define                                 CRCDAT14_bit        _BIT_ACCESS(CRCDATH,6)
// CRCDATH<CRCDAT15>
extern volatile __bit                   CRCDAT15            __at(0x3C97);	// @ (0x792 * 8 + 7)
#define                                 CRCDAT15_bit        _BIT_ACCESS(CRCDATH,7)
// CRCDATL<CRCDAT2>
extern volatile __bit                   CRCDAT2             __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 CRCDAT2_bit         _BIT_ACCESS(CRCDATL,2)
// CRCDATL<CRCDAT3>
extern volatile __bit                   CRCDAT3             __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 CRCDAT3_bit         _BIT_ACCESS(CRCDATL,3)
// CRCDATL<CRCDAT4>
extern volatile __bit                   CRCDAT4             __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 CRCDAT4_bit         _BIT_ACCESS(CRCDATL,4)
// CRCDATL<CRCDAT5>
extern volatile __bit                   CRCDAT5             __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 CRCDAT5_bit         _BIT_ACCESS(CRCDATL,5)
// CRCDATL<CRCDAT6>
extern volatile __bit                   CRCDAT6             __at(0x3C8E);	// @ (0x791 * 8 + 6)
#define                                 CRCDAT6_bit         _BIT_ACCESS(CRCDATL,6)
// CRCDATH<CRCDAT8>
extern volatile __bit                   CRCDAT8             __at(0x3C90);	// @ (0x792 * 8 + 0)
#define                                 CRCDAT8_bit         _BIT_ACCESS(CRCDATH,0)
// CRCDATH<CRCDAT9>
extern volatile __bit                   CRCDAT9             __at(0x3C91);	// @ (0x792 * 8 + 1)
#define                                 CRCDAT9_bit         _BIT_ACCESS(CRCDATH,1)
// CRCCON1<CRCDLEN0>
extern volatile __bit                   CRCDLEN0            __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 CRCDLEN0_bit        _BIT_ACCESS(CRCCON1,4)
// CRCCON1<CRCDLEN1>
extern volatile __bit                   CRCDLEN1            __at(0x3CD5);	// @ (0x79A * 8 + 5)
#define                                 CRCDLEN1_bit        _BIT_ACCESS(CRCCON1,5)
// CRCCON1<CRCDLEN2>
extern volatile __bit                   CRCDLEN2            __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 CRCDLEN2_bit        _BIT_ACCESS(CRCCON1,6)
// CRCCON1<CRCDLEN3>
extern volatile __bit                   CRCDLEN3            __at(0x3CD7);	// @ (0x79A * 8 + 7)
#define                                 CRCDLEN3_bit        _BIT_ACCESS(CRCCON1,7)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x3CCF);	// @ (0x799 * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCFULL>
extern volatile __bit                   CRCFULL             __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 CRCFULL_bit         _BIT_ACCESS(CRCCON0,0)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x3CCE);	// @ (0x799 * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE4<CRCIE>
extern volatile __bit                   CRCIE               __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE4,6)
// PIR4<CRCIF>
extern volatile __bit                   CRCIF               __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR4,6)
// CRCCON1<CRCPLEN0>
extern volatile __bit                   CRCPLEN0            __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 CRCPLEN0_bit        _BIT_ACCESS(CRCCON1,0)
// CRCCON1<CRCPLEN1>
extern volatile __bit                   CRCPLEN1            __at(0x3CD1);	// @ (0x79A * 8 + 1)
#define                                 CRCPLEN1_bit        _BIT_ACCESS(CRCCON1,1)
// CRCCON1<CRCPLEN2>
extern volatile __bit                   CRCPLEN2            __at(0x3CD2);	// @ (0x79A * 8 + 2)
#define                                 CRCPLEN2_bit        _BIT_ACCESS(CRCCON1,2)
// CRCCON1<CRCPLEN3>
extern volatile __bit                   CRCPLEN3            __at(0x3CD3);	// @ (0x79A * 8 + 3)
#define                                 CRCPLEN3_bit        _BIT_ACCESS(CRCCON1,3)
// CRCSHIFTL<CRCSHIFT0>
extern volatile __bit                   CRCSHIFT0           __at(0x3CA8);	// @ (0x795 * 8 + 0)
#define                                 CRCSHIFT0_bit       _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<CRCSHIFT1>
extern volatile __bit                   CRCSHIFT1           __at(0x3CA9);	// @ (0x795 * 8 + 1)
#define                                 CRCSHIFT1_bit       _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<CRCSHIFT10>
extern volatile __bit                   CRCSHIFT10          __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 CRCSHIFT10_bit      _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<CRCSHIFT11>
extern volatile __bit                   CRCSHIFT11          __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 CRCSHIFT11_bit      _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<CRCSHIFT12>
extern volatile __bit                   CRCSHIFT12          __at(0x3CB4);	// @ (0x796 * 8 + 4)
#define                                 CRCSHIFT12_bit      _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<CRCSHIFT13>
extern volatile __bit                   CRCSHIFT13          __at(0x3CB5);	// @ (0x796 * 8 + 5)
#define                                 CRCSHIFT13_bit      _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<CRCSHIFT14>
extern volatile __bit                   CRCSHIFT14          __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 CRCSHIFT14_bit      _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<CRCSHIFT15>
extern volatile __bit                   CRCSHIFT15          __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 CRCSHIFT15_bit      _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<CRCSHIFT2>
extern volatile __bit                   CRCSHIFT2           __at(0x3CAA);	// @ (0x795 * 8 + 2)
#define                                 CRCSHIFT2_bit       _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<CRCSHIFT3>
extern volatile __bit                   CRCSHIFT3           __at(0x3CAB);	// @ (0x795 * 8 + 3)
#define                                 CRCSHIFT3_bit       _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<CRCSHIFT4>
extern volatile __bit                   CRCSHIFT4           __at(0x3CAC);	// @ (0x795 * 8 + 4)
#define                                 CRCSHIFT4_bit       _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<CRCSHIFT5>
extern volatile __bit                   CRCSHIFT5           __at(0x3CAD);	// @ (0x795 * 8 + 5)
#define                                 CRCSHIFT5_bit       _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<CRCSHIFT6>
extern volatile __bit                   CRCSHIFT6           __at(0x3CAE);	// @ (0x795 * 8 + 6)
#define                                 CRCSHIFT6_bit       _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<CRCSHIFT7>
extern volatile __bit                   CRCSHIFT7           __at(0x3CAF);	// @ (0x795 * 8 + 7)
#define                                 CRCSHIFT7_bit       _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<CRCSHIFT8>
extern volatile __bit                   CRCSHIFT8           __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 CRCSHIFT8_bit       _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<CRCSHIFT9>
extern volatile __bit                   CRCSHIFT9           __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 CRCSHIFT9_bit       _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<CRCSHIFTM>
extern volatile __bit                   CRCSHIFTM           __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 CRCSHIFTM_bit       _BIT_ACCESS(CRCCON0,1)
// CRCXORL<CRCXOR1>
extern volatile __bit                   CRCXOR1             __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 CRCXOR1_bit         _BIT_ACCESS(CRCXORL,1)
// CRCXORH<CRCXOR10>
extern volatile __bit                   CRCXOR10            __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 CRCXOR10_bit        _BIT_ACCESS(CRCXORH,2)
// CRCXORH<CRCXOR11>
extern volatile __bit                   CRCXOR11            __at(0x3CC3);	// @ (0x798 * 8 + 3)
#define                                 CRCXOR11_bit        _BIT_ACCESS(CRCXORH,3)
// CRCXORH<CRCXOR12>
extern volatile __bit                   CRCXOR12            __at(0x3CC4);	// @ (0x798 * 8 + 4)
#define                                 CRCXOR12_bit        _BIT_ACCESS(CRCXORH,4)
// CRCXORH<CRCXOR13>
extern volatile __bit                   CRCXOR13            __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 CRCXOR13_bit        _BIT_ACCESS(CRCXORH,5)
// CRCXORH<CRCXOR14>
extern volatile __bit                   CRCXOR14            __at(0x3CC6);	// @ (0x798 * 8 + 6)
#define                                 CRCXOR14_bit        _BIT_ACCESS(CRCXORH,6)
// CRCXORH<CRCXOR15>
extern volatile __bit                   CRCXOR15            __at(0x3CC7);	// @ (0x798 * 8 + 7)
#define                                 CRCXOR15_bit        _BIT_ACCESS(CRCXORH,7)
// CRCXORL<CRCXOR2>
extern volatile __bit                   CRCXOR2             __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 CRCXOR2_bit         _BIT_ACCESS(CRCXORL,2)
// CRCXORL<CRCXOR3>
extern volatile __bit                   CRCXOR3             __at(0x3CBB);	// @ (0x797 * 8 + 3)
#define                                 CRCXOR3_bit         _BIT_ACCESS(CRCXORL,3)
// CRCXORL<CRCXOR4>
extern volatile __bit                   CRCXOR4             __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 CRCXOR4_bit         _BIT_ACCESS(CRCXORL,4)
// CRCXORL<CRCXOR5>
extern volatile __bit                   CRCXOR5             __at(0x3CBD);	// @ (0x797 * 8 + 5)
#define                                 CRCXOR5_bit         _BIT_ACCESS(CRCXORL,5)
// CRCXORL<CRCXOR6>
extern volatile __bit                   CRCXOR6             __at(0x3CBE);	// @ (0x797 * 8 + 6)
#define                                 CRCXOR6_bit         _BIT_ACCESS(CRCXORL,6)
// CRCXORL<CRCXOR7>
extern volatile __bit                   CRCXOR7             __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 CRCXOR7_bit         _BIT_ACCESS(CRCXORL,7)
// CRCXORH<CRCXOR8>
extern volatile __bit                   CRCXOR8             __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 CRCXOR8_bit         _BIT_ACCESS(CRCXORH,0)
// CRCXORH<CRCXOR9>
extern volatile __bit                   CRCXOR9             __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 CRCXOR9_bit         _BIT_ACCESS(CRCXORH,1)
// CRCDATL<CRDCDAT7>
extern volatile __bit                   CRDCDAT7            __at(0x3C8F);	// @ (0x791 * 8 + 7)
#define                                 CRDCDAT7_bit        _BIT_ACCESS(CRCDATL,7)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0xCEC);	// @ (0x19D * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0xCF7);	// @ (0x19E * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// CWG1AS1<CWG1C1AS>
extern volatile __bit                   CWG1C1AS            __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 CWG1C1AS_bit        _BIT_ACCESS(CWG1AS1,1)
// CWG1AS1<CWG1C2AS>
extern volatile __bit                   CWG1C2AS            __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 CWG1C2AS_bit        _BIT_ACCESS(CWG1AS1,2)
// CWG1CLKCON<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x34C8);	// @ (0x699 * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLKCON,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x3490);	// @ (0x692 * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x3491);	// @ (0x692 * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x348C);	// @ (0x691 * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x34B7);	// @ (0x696 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x34BD);	// @ (0x697 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1AS1<CWG1INAS>
extern volatile __bit                   CWG1INAS            __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 CWG1INAS_bit        _BIT_ACCESS(CWG1AS1,0)
// CWG1ISM<CWG1IS0>
extern volatile __bit                   CWG1IS0             __at(0x34D0);	// @ (0x69A * 8 + 0)
#define                                 CWG1IS0_bit         _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<CWG1IS1>
extern volatile __bit                   CWG1IS1             __at(0x34D1);	// @ (0x69A * 8 + 1)
#define                                 CWG1IS1_bit         _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<CWG1IS2>
extern volatile __bit                   CWG1IS2             __at(0x34D2);	// @ (0x69A * 8 + 2)
#define                                 CWG1IS2_bit         _BIT_ACCESS(CWG1ISM,2)
// CWG1ISM<CWG1IS3>
extern volatile __bit                   CWG1IS3             __at(0x34D3);	// @ (0x69A * 8 + 3)
#define                                 CWG1IS3_bit         _BIT_ACCESS(CWG1ISM,3)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x34B6);	// @ (0x696 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x349A);	// @ (0x693 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x349B);	// @ (0x693 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x349C);	// @ (0x693 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x349D);	// @ (0x693 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x34B0);	// @ (0x696 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x34B1);	// @ (0x696 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x34B2);	// @ (0x696 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1OCON0<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x34AC);	// @ (0x695 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1OCON0,4)
// CWG1OCON0<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x34AD);	// @ (0x695 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1OCON0,5)
// CWG1OCON0<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x34AE);	// @ (0x695 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1OCON0,6)
// CWG1OCON0<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x34AF);	// @ (0x695 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1OCON0,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x34B8);	// @ (0x697 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x34B9);	// @ (0x697 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x34BA);	// @ (0x697 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x34BB);	// @ (0x697 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1AS0<CWG1REN>
extern volatile __bit                   CWG1REN             __at(0x349E);	// @ (0x693 * 8 + 6)
#define                                 CWG1REN_bit         _BIT_ACCESS(CWG1AS0,6)
// CWG1AS0<CWG1SHUTDOWN>
extern volatile __bit                   CWG1SHUTDOWN        __at(0x349F);	// @ (0x693 * 8 + 7)
#define                                 CWG1SHUTDOWN_bit    _BIT_ACCESS(CWG1AS0,7)
// CWG1OCON0<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x34A8);	// @ (0x695 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1OCON0,0)
// CWG1OCON0<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x34A9);	// @ (0x695 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1OCON0,1)
// CWG1OCON0<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x34AA);	// @ (0x695 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1OCON0,2)
// CWG1OCON0<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x34AB);	// @ (0x695 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1OCON0,3)
// CWG1AS1<CWG1TMR2AS>
extern volatile __bit                   CWG1TMR2AS          __at(0x34A4);	// @ (0x694 * 8 + 4)
#define                                 CWG1TMR2AS_bit      _BIT_ACCESS(CWG1AS1,4)
// CWG1AS1<CWG1TMR4AS>
extern volatile __bit                   CWG1TMR4AS          __at(0x34A5);	// @ (0x694 * 8 + 5)
#define                                 CWG1TMR4AS_bit      _BIT_ACCESS(CWG1AS1,5)
// CWG1AS1<CWG1TMR6AS>
extern volatile __bit                   CWG1TMR6AS          __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 CWG1TMR6AS_bit      _BIT_ACCESS(CWG1AS1,6)
// PIE3<CWGIE>
extern volatile __bit                   CWGIE               __at(0x495);	// @ (0x92 * 8 + 5)
#define                                 CWGIE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<CWGIF>
extern volatile __bit                   CWGIF               __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 CWGIF_bit           _BIT_ACCESS(PIR3,5)
// CWGINPPS<CWGINPPS0>
extern volatile __bit                   CWGINPPS0           __at(0x70B8);	// @ (0xE17 * 8 + 0)
#define                                 CWGINPPS0_bit       _BIT_ACCESS(CWGINPPS,0)
// CWGINPPS<CWGINPPS1>
extern volatile __bit                   CWGINPPS1           __at(0x70B9);	// @ (0xE17 * 8 + 1)
#define                                 CWGINPPS1_bit       _BIT_ACCESS(CWGINPPS,1)
// CWGINPPS<CWGINPPS2>
extern volatile __bit                   CWGINPPS2           __at(0x70BA);	// @ (0xE17 * 8 + 2)
#define                                 CWGINPPS2_bit       _BIT_ACCESS(CWGINPPS,2)
// CWGINPPS<CWGINPPS3>
extern volatile __bit                   CWGINPPS3           __at(0x70BB);	// @ (0xE17 * 8 + 3)
#define                                 CWGINPPS3_bit       _BIT_ACCESS(CWGINPPS,3)
// CWGINPPS<CWGINPPS4>
extern volatile __bit                   CWGINPPS4           __at(0x70BC);	// @ (0xE17 * 8 + 4)
#define                                 CWGINPPS4_bit       _BIT_ACCESS(CWGINPPS,4)
// STATUS_SHAD<C_SHAD>
extern volatile __bit                   C_SHAD              __at(0x7F20);	// @ (0xFE4 * 8 + 0)
#define                                 C_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,0)
// DAC1CON0<D1PSS0>
extern volatile __bit                   D1PSS0              __at(0x8C2);	// @ (0x118 * 8 + 2)
#define                                 D1PSS0_bit          _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<D1PSS1>
extern volatile __bit                   D1PSS1              __at(0x8C3);	// @ (0x118 * 8 + 3)
#define                                 D1PSS1_bit          _BIT_ACCESS(DAC1CON0,3)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x8C7);	// @ (0x118 * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1OE>
extern volatile __bit                   DAC1OE              __at(0x8C5);	// @ (0x118 * 8 + 5)
#define                                 DAC1OE_bit          _BIT_ACCESS(DAC1CON0,5)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x8C8);	// @ (0x119 * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x8C9);	// @ (0x119 * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x8CA);	// @ (0x119 * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x8CB);	// @ (0x119 * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x8CC);	// @ (0x119 * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// DAC1CON1<DAC1R5>
extern volatile __bit                   DAC1R5              __at(0x8CD);	// @ (0x119 * 8 + 5)
#define                                 DAC1R5_bit          _BIT_ACCESS(DAC1CON1,5)
// DAC1CON1<DAC1R6>
extern volatile __bit                   DAC1R6              __at(0x8CE);	// @ (0x119 * 8 + 6)
#define                                 DAC1R6_bit          _BIT_ACCESS(DAC1CON1,6)
// DAC1CON1<DAC1R7>
extern volatile __bit                   DAC1R7              __at(0x8CF);	// @ (0x119 * 8 + 7)
#define                                 DAC1R7_bit          _BIT_ACCESS(DAC1CON1,7)
// CRCDATL<DAT0>
extern volatile __bit                   DAT0                __at(0x3C88);	// @ (0x791 * 8 + 0)
#define                                 DAT0_bit            _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DAT1>
extern volatile __bit                   DAT1                __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 DAT1_bit            _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DAT10>
extern volatile __bit                   DAT10               __at(0x3C92);	// @ (0x792 * 8 + 2)
#define                                 DAT10_bit           _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DAT11>
extern volatile __bit                   DAT11               __at(0x3C93);	// @ (0x792 * 8 + 3)
#define                                 DAT11_bit           _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DAT12>
extern volatile __bit                   DAT12               __at(0x3C94);	// @ (0x792 * 8 + 4)
#define                                 DAT12_bit           _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DAT13>
extern volatile __bit                   DAT13               __at(0x3C95);	// @ (0x792 * 8 + 5)
#define                                 DAT13_bit           _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DAT14>
extern volatile __bit                   DAT14               __at(0x3C96);	// @ (0x792 * 8 + 6)
#define                                 DAT14_bit           _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DAT15>
extern volatile __bit                   DAT15               __at(0x3C97);	// @ (0x792 * 8 + 7)
#define                                 DAT15_bit           _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DAT2>
extern volatile __bit                   DAT2                __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 DAT2_bit            _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DAT3>
extern volatile __bit                   DAT3                __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 DAT3_bit            _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DAT4>
extern volatile __bit                   DAT4                __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 DAT4_bit            _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DAT5>
extern volatile __bit                   DAT5                __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 DAT5_bit            _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DAT6>
extern volatile __bit                   DAT6                __at(0x3C8E);	// @ (0x791 * 8 + 6)
#define                                 DAT6_bit            _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DAT7>
extern volatile __bit                   DAT7                __at(0x3C8F);	// @ (0x791 * 8 + 7)
#define                                 DAT7_bit            _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DAT8>
extern volatile __bit                   DAT8                __at(0x3C90);	// @ (0x792 * 8 + 0)
#define                                 DAT8_bit            _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DAT9>
extern volatile __bit                   DAT9                __at(0x3C91);	// @ (0x792 * 8 + 1)
#define                                 DAT9_bit            _BIT_ACCESS(CRCDATH,1)
// CWG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0x3490);	// @ (0x692 * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0x3491);	// @ (0x692 * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0x348C);	// @ (0x691 * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(CWG1DBR,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// STATUS_SHAD<DC_SHAD>
extern volatile __bit                   DC_SHAD             __at(0x7F21);	// @ (0xFE4 * 8 + 1)
#define                                 DC_SHAD_bit         _BIT_ACCESS(STATUS_SHAD,1)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x3CD5);	// @ (0x79A * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x3CD7);	// @ (0x79A * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0x10A5);	// @ (0x214 * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// AT1ERRL<ERR0>
extern volatile __bit                   ERR0                __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(AT1ERRL,0)
// AT1ERRL<ERR1>
extern volatile __bit                   ERR1                __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(AT1ERRL,1)
// AT1ERRH<ERR10>
extern volatile __bit                   ERR10               __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(AT1ERRH,2)
// AT1ERRH<ERR11>
extern volatile __bit                   ERR11               __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(AT1ERRH,3)
// AT1ERRH<ERR12>
extern volatile __bit                   ERR12               __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(AT1ERRH,4)
// AT1ERRH<ERR13>
extern volatile __bit                   ERR13               __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(AT1ERRH,5)
// AT1ERRH<ERR14>
extern volatile __bit                   ERR14               __at(0x40EE);	// @ (0x81D * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(AT1ERRH,6)
// AT1ERRH<ERR15>
extern volatile __bit                   ERR15               __at(0x40EF);	// @ (0x81D * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(AT1ERRH,7)
// AT1ERRL<ERR2>
extern volatile __bit                   ERR2                __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(AT1ERRL,2)
// AT1ERRL<ERR3>
extern volatile __bit                   ERR3                __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(AT1ERRL,3)
// AT1ERRL<ERR4>
extern volatile __bit                   ERR4                __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(AT1ERRL,4)
// AT1ERRL<ERR5>
extern volatile __bit                   ERR5                __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(AT1ERRL,5)
// AT1ERRL<ERR6>
extern volatile __bit                   ERR6                __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(AT1ERRL,6)
// AT1ERRL<ERR7>
extern volatile __bit                   ERR7                __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(AT1ERRL,7)
// AT1ERRH<ERR8>
extern volatile __bit                   ERR8                __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(AT1ERRH,0)
// AT1ERRH<ERR9>
extern volatile __bit                   ERR9                __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(AT1ERRH,1)
// AT1ERRH<ERRH0>
extern volatile __bit                   ERRH0               __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 ERRH0_bit           _BIT_ACCESS(AT1ERRH,0)
// AT1ERRH<ERRH1>
extern volatile __bit                   ERRH1               __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 ERRH1_bit           _BIT_ACCESS(AT1ERRH,1)
// AT1ERRH<ERRH2>
extern volatile __bit                   ERRH2               __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 ERRH2_bit           _BIT_ACCESS(AT1ERRH,2)
// AT1ERRH<ERRH3>
extern volatile __bit                   ERRH3               __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 ERRH3_bit           _BIT_ACCESS(AT1ERRH,3)
// AT1ERRH<ERRH4>
extern volatile __bit                   ERRH4               __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 ERRH4_bit           _BIT_ACCESS(AT1ERRH,4)
// AT1ERRH<ERRH5>
extern volatile __bit                   ERRH5               __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 ERRH5_bit           _BIT_ACCESS(AT1ERRH,5)
// AT1ERRH<ERRH6>
extern volatile __bit                   ERRH6               __at(0x40EE);	// @ (0x81D * 8 + 6)
#define                                 ERRH6_bit           _BIT_ACCESS(AT1ERRH,6)
// AT1ERRH<ERRH7>
extern volatile __bit                   ERRH7               __at(0x40EF);	// @ (0x81D * 8 + 7)
#define                                 ERRH7_bit           _BIT_ACCESS(AT1ERRH,7)
// AT1ERRL<ERRL0>
extern volatile __bit                   ERRL0               __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 ERRL0_bit           _BIT_ACCESS(AT1ERRL,0)
// AT1ERRL<ERRL1>
extern volatile __bit                   ERRL1               __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 ERRL1_bit           _BIT_ACCESS(AT1ERRL,1)
// AT1ERRL<ERRL2>
extern volatile __bit                   ERRL2               __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 ERRL2_bit           _BIT_ACCESS(AT1ERRL,2)
// AT1ERRL<ERRL3>
extern volatile __bit                   ERRL3               __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 ERRL3_bit           _BIT_ACCESS(AT1ERRL,3)
// AT1ERRL<ERRL4>
extern volatile __bit                   ERRL4               __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 ERRL4_bit           _BIT_ACCESS(AT1ERRL,4)
// AT1ERRL<ERRL5>
extern volatile __bit                   ERRL5               __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 ERRL5_bit           _BIT_ACCESS(AT1ERRL,5)
// AT1ERRL<ERRL6>
extern volatile __bit                   ERRL6               __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 ERRL6_bit           _BIT_ACCESS(AT1ERRL,6)
// AT1ERRL<ERRL7>
extern volatile __bit                   ERRL7               __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 ERRL7_bit           _BIT_ACCESS(AT1ERRL,7)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0xCEA);	// @ (0x19D * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// PMCON1<FREE>
extern volatile __bit                   FREE                __at(0xCAC);	// @ (0x195 * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(PMCON1,4)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x8BF);	// @ (0x117 * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x8BE);	// @ (0x117 * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x34B7);	// @ (0x696 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0x10B7);	// @ (0x216 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO>
extern volatile __bit                   GO                  __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 GO_bit              _BIT_ACCESS(ADCON0,1)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,1)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x38DA);	// @ (0x71B * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x38DB);	// @ (0x71B * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x38DF);	// @ (0x71B * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x38D3);	// @ (0x71A * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x38D4);	// @ (0x71A * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x38D5);	// @ (0x71A * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x38D6);	// @ (0x71A * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x38D7);	// @ (0x71A * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x38D9);	// @ (0x71B * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// SCANHADRL<HARD2>
extern volatile __bit                   HARD2               __at(0x38D2);	// @ (0x71A * 8 + 2)
#define                                 HARD2_bit           _BIT_ACCESS(SCANHADRL,2)
// OSCSTAT<HFIOFL>
extern volatile __bit                   HFIOFL              __at(0x4D3);	// @ (0x9A * 8 + 3)
#define                                 HFIOFL_bit          _BIT_ACCESS(OSCSTAT,3)
// OSCSTAT<HFIOFR>
extern volatile __bit                   HFIOFR              __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 HFIOFR_bit          _BIT_ACCESS(OSCSTAT,4)
// OSCSTAT<HFIOFS>
extern volatile __bit                   HFIOFS              __at(0x4D0);	// @ (0x9A * 8 + 0)
#define                                 HFIOFS_bit          _BIT_ACCESS(OSCSTAT,0)
// HIDRVC<HIDC4>
extern volatile __bit                   HIDC4               __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 HIDC4_bit           _BIT_ACCESS(HIDRVC,4)
// HIDRVC<HIDC5>
extern volatile __bit                   HIDC5               __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 HIDC5_bit           _BIT_ACCESS(HIDRVC,5)
// CWG1CON1<IN>
extern volatile __bit                   IN                  __at(0x34BD);	// @ (0x697 * 8 + 5)
#define                                 IN_bit              _BIT_ACCESS(CWG1CON1,5)
// PID1INL<IN0>
extern volatile __bit                   IN0                 __at(0x2C70);	// @ (0x58E * 8 + 0)
#define                                 IN0_bit             _BIT_ACCESS(PID1INL,0)
// PID1INL<IN1>
extern volatile __bit                   IN1                 __at(0x2C71);	// @ (0x58E * 8 + 1)
#define                                 IN1_bit             _BIT_ACCESS(PID1INL,1)
// PID1INH<IN10>
extern volatile __bit                   IN10                __at(0x2C7A);	// @ (0x58F * 8 + 2)
#define                                 IN10_bit            _BIT_ACCESS(PID1INH,2)
// PID1INH<IN11>
extern volatile __bit                   IN11                __at(0x2C7B);	// @ (0x58F * 8 + 3)
#define                                 IN11_bit            _BIT_ACCESS(PID1INH,3)
// PID1INH<IN12>
extern volatile __bit                   IN12                __at(0x2C7C);	// @ (0x58F * 8 + 4)
#define                                 IN12_bit            _BIT_ACCESS(PID1INH,4)
// PID1INH<IN13>
extern volatile __bit                   IN13                __at(0x2C7D);	// @ (0x58F * 8 + 5)
#define                                 IN13_bit            _BIT_ACCESS(PID1INH,5)
// PID1INH<IN14>
extern volatile __bit                   IN14                __at(0x2C7E);	// @ (0x58F * 8 + 6)
#define                                 IN14_bit            _BIT_ACCESS(PID1INH,6)
// PID1INH<IN15>
extern volatile __bit                   IN15                __at(0x2C7F);	// @ (0x58F * 8 + 7)
#define                                 IN15_bit            _BIT_ACCESS(PID1INH,7)
// PID1INL<IN2>
extern volatile __bit                   IN2                 __at(0x2C72);	// @ (0x58E * 8 + 2)
#define                                 IN2_bit             _BIT_ACCESS(PID1INL,2)
// PID1INL<IN3>
extern volatile __bit                   IN3                 __at(0x2C73);	// @ (0x58E * 8 + 3)
#define                                 IN3_bit             _BIT_ACCESS(PID1INL,3)
// PID1INL<IN4>
extern volatile __bit                   IN4                 __at(0x2C74);	// @ (0x58E * 8 + 4)
#define                                 IN4_bit             _BIT_ACCESS(PID1INL,4)
// PID1INL<IN5>
extern volatile __bit                   IN5                 __at(0x2C75);	// @ (0x58E * 8 + 5)
#define                                 IN5_bit             _BIT_ACCESS(PID1INL,5)
// PID1INL<IN6>
extern volatile __bit                   IN6                 __at(0x2C76);	// @ (0x58E * 8 + 6)
#define                                 IN6_bit             _BIT_ACCESS(PID1INL,6)
// PID1INL<IN7>
extern volatile __bit                   IN7                 __at(0x2C77);	// @ (0x58E * 8 + 7)
#define                                 IN7_bit             _BIT_ACCESS(PID1INL,7)
// PID1INH<IN8>
extern volatile __bit                   IN8                 __at(0x2C78);	// @ (0x58F * 8 + 0)
#define                                 IN8_bit             _BIT_ACCESS(PID1INH,0)
// PID1INH<IN9>
extern volatile __bit                   IN9                 __at(0x2C79);	// @ (0x58F * 8 + 1)
#define                                 IN9_bit             _BIT_ACCESS(PID1INH,1)
// CWG1AS1<INAS>
extern volatile __bit                   INAS                __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 INAS_bit            _BIT_ACCESS(CWG1AS1,0)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x1C60);	// @ (0x38C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x1C61);	// @ (0x38C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x1C62);	// @ (0x38C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x1C63);	// @ (0x38C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x1C64);	// @ (0x38C * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x1C65);	// @ (0x38C * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x1C70);	// @ (0x38E * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x1C71);	// @ (0x38E * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x1C72);	// @ (0x38E * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x1C73);	// @ (0x38E * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x1C74);	// @ (0x38E * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x1C75);	// @ (0x38E * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INTCON<INTE>
extern volatile __bit                   INTE                __at(0x5C);	// @ (0xB * 8 + 4)
#define                                 INTE_bit            _BIT_ACCESS(INTCON,4)
// OPTION_REG<INTEDG>
extern volatile __bit                   INTEDG              __at(0x4AE);	// @ (0x95 * 8 + 6)
#define                                 INTEDG_bit          _BIT_ACCESS(OPTION_REG,6)
// INTCON<INTF>
extern volatile __bit                   INTF                __at(0x59);	// @ (0xB * 8 + 1)
#define                                 INTF_bit            _BIT_ACCESS(INTCON,1)
// SCANCON0<INTM>
extern volatile __bit                   INTM                __at(0x38E3);	// @ (0x71C * 8 + 3)
#define                                 INTM_bit            _BIT_ACCESS(SCANCON0,3)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0x7080);	// @ (0xE10 * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0x7081);	// @ (0xE10 * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0x7082);	// @ (0xE10 * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0x7083);	// @ (0xE10 * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// INTPPS<INTPPS4>
extern volatile __bit                   INTPPS4             __at(0x7084);	// @ (0xE10 * 8 + 4)
#define                                 INTPPS4_bit         _BIT_ACCESS(INTPPS,4)
// SCANCON0<INVALID>
extern volatile __bit                   INVALID             __at(0x38E4);	// @ (0x71C * 8 + 4)
#define                                 INVALID_bit         _BIT_ACCESS(SCANCON0,4)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x1C98);	// @ (0x393 * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x1C99);	// @ (0x393 * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x1C9A);	// @ (0x393 * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x1C9B);	// @ (0x393 * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x1C9C);	// @ (0x393 * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x1C9D);	// @ (0x393 * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x1C90);	// @ (0x392 * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x1C91);	// @ (0x392 * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x1C92);	// @ (0x392 * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x1C93);	// @ (0x392 * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x1C94);	// @ (0x392 * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x1C95);	// @ (0x392 * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x1C88);	// @ (0x391 * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x1C89);	// @ (0x391 * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x1C8D);	// @ (0x391 * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x1CC8);	// @ (0x399 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x1CC9);	// @ (0x399 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0x1CCA);	// @ (0x399 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x1CCB);	// @ (0x399 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x1CCC);	// @ (0x399 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x1CCD);	// @ (0x399 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x1CCE);	// @ (0x399 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x1CCF);	// @ (0x399 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x1CC0);	// @ (0x398 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x1CC1);	// @ (0x398 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0x1CC2);	// @ (0x398 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x1CC3);	// @ (0x398 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x1CC4);	// @ (0x398 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x1CC5);	// @ (0x398 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x1CC6);	// @ (0x398 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x1CC7);	// @ (0x398 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x1CB8);	// @ (0x397 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x1CB9);	// @ (0x397 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0x1CBA);	// @ (0x397 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x1CBB);	// @ (0x397 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x1CBC);	// @ (0x397 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x1CBD);	// @ (0x397 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x1CBE);	// @ (0x397 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x1CBF);	// @ (0x397 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// INTCON<IOCIE>
extern volatile __bit                   IOCIE               __at(0x5B);	// @ (0xB * 8 + 3)
#define                                 IOCIE_bit           _BIT_ACCESS(INTCON,3)
// INTCON<IOCIF>
extern volatile __bit                   IOCIF               __at(0x58);	// @ (0xB * 8 + 0)
#define                                 IOCIF_bit           _BIT_ACCESS(INTCON,0)
// OSCCON<IRCF0>
extern volatile __bit                   IRCF0               __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 IRCF0_bit           _BIT_ACCESS(OSCCON,3)
// OSCCON<IRCF1>
extern volatile __bit                   IRCF1               __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 IRCF1_bit           _BIT_ACCESS(OSCCON,4)
// OSCCON<IRCF2>
extern volatile __bit                   IRCF2               __at(0x4CD);	// @ (0x99 * 8 + 5)
#define                                 IRCF2_bit           _BIT_ACCESS(OSCCON,5)
// OSCCON<IRCF3>
extern volatile __bit                   IRCF3               __at(0x4CE);	// @ (0x99 * 8 + 6)
#define                                 IRCF3_bit           _BIT_ACCESS(OSCCON,6)
// CWG1ISM<IS0>
extern volatile __bit                   IS0                 __at(0x34D0);	// @ (0x69A * 8 + 0)
#define                                 IS0_bit             _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<IS1>
extern volatile __bit                   IS1                 __at(0x34D1);	// @ (0x69A * 8 + 1)
#define                                 IS1_bit             _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<IS2>
extern volatile __bit                   IS2                 __at(0x34D2);	// @ (0x69A * 8 + 2)
#define                                 IS2_bit             _BIT_ACCESS(CWG1ISM,2)
// CWG1ISM<IS3>
extern volatile __bit                   IS3                 __at(0x34D3);	// @ (0x69A * 8 + 3)
#define                                 IS3_bit             _BIT_ACCESS(CWG1ISM,3)
// PID1K1L<K10>
extern volatile __bit                   K10                 __at(0x2C80);	// @ (0x590 * 8 + 0)
#define                                 K10_bit             _BIT_ACCESS(PID1K1L,0)
// PID1K1L<K11>
extern volatile __bit                   K11                 __at(0x2C81);	// @ (0x590 * 8 + 1)
#define                                 K11_bit             _BIT_ACCESS(PID1K1L,1)
// PID1K1H<K110>
extern volatile __bit                   K110                __at(0x2C8A);	// @ (0x591 * 8 + 2)
#define                                 K110_bit            _BIT_ACCESS(PID1K1H,2)
// PID1K1H<K111>
extern volatile __bit                   K111                __at(0x2C8B);	// @ (0x591 * 8 + 3)
#define                                 K111_bit            _BIT_ACCESS(PID1K1H,3)
// PID1K1H<K112>
extern volatile __bit                   K112                __at(0x2C8C);	// @ (0x591 * 8 + 4)
#define                                 K112_bit            _BIT_ACCESS(PID1K1H,4)
// PID1K1H<K113>
extern volatile __bit                   K113                __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 K113_bit            _BIT_ACCESS(PID1K1H,5)
// PID1K1H<K114>
extern volatile __bit                   K114                __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 K114_bit            _BIT_ACCESS(PID1K1H,6)
// PID1K1H<K115>
extern volatile __bit                   K115                __at(0x2C8F);	// @ (0x591 * 8 + 7)
#define                                 K115_bit            _BIT_ACCESS(PID1K1H,7)
// PID1K1L<K12>
extern volatile __bit                   K12                 __at(0x2C82);	// @ (0x590 * 8 + 2)
#define                                 K12_bit             _BIT_ACCESS(PID1K1L,2)
// PID1K1L<K13>
extern volatile __bit                   K13                 __at(0x2C83);	// @ (0x590 * 8 + 3)
#define                                 K13_bit             _BIT_ACCESS(PID1K1L,3)
// PID1K1L<K14>
extern volatile __bit                   K14                 __at(0x2C84);	// @ (0x590 * 8 + 4)
#define                                 K14_bit             _BIT_ACCESS(PID1K1L,4)
// PID1K1L<K15>
extern volatile __bit                   K15                 __at(0x2C85);	// @ (0x590 * 8 + 5)
#define                                 K15_bit             _BIT_ACCESS(PID1K1L,5)
// PID1K1L<K16>
extern volatile __bit                   K16                 __at(0x2C86);	// @ (0x590 * 8 + 6)
#define                                 K16_bit             _BIT_ACCESS(PID1K1L,6)
// PID1K1L<K17>
extern volatile __bit                   K17                 __at(0x2C87);	// @ (0x590 * 8 + 7)
#define                                 K17_bit             _BIT_ACCESS(PID1K1L,7)
// PID1K1H<K18>
extern volatile __bit                   K18                 __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 K18_bit             _BIT_ACCESS(PID1K1H,0)
// PID1K1H<K19>
extern volatile __bit                   K19                 __at(0x2C89);	// @ (0x591 * 8 + 1)
#define                                 K19_bit             _BIT_ACCESS(PID1K1H,1)
// PID1K2L<K20>
extern volatile __bit                   K20                 __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 K20_bit             _BIT_ACCESS(PID1K2L,0)
// PID1K2L<K21>
extern volatile __bit                   K21                 __at(0x2C91);	// @ (0x592 * 8 + 1)
#define                                 K21_bit             _BIT_ACCESS(PID1K2L,1)
// PID1K2H<K210>
extern volatile __bit                   K210                __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 K210_bit            _BIT_ACCESS(PID1K2H,2)
// PID1K2H<K211>
extern volatile __bit                   K211                __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 K211_bit            _BIT_ACCESS(PID1K2H,3)
// PID1K2H<K212>
extern volatile __bit                   K212                __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 K212_bit            _BIT_ACCESS(PID1K2H,4)
// PID1K2H<K213>
extern volatile __bit                   K213                __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 K213_bit            _BIT_ACCESS(PID1K2H,5)
// PID1K2H<K214>
extern volatile __bit                   K214                __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 K214_bit            _BIT_ACCESS(PID1K2H,6)
// PID1K2H<K215>
extern volatile __bit                   K215                __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 K215_bit            _BIT_ACCESS(PID1K2H,7)
// PID1K2L<K22>
extern volatile __bit                   K22                 __at(0x2C92);	// @ (0x592 * 8 + 2)
#define                                 K22_bit             _BIT_ACCESS(PID1K2L,2)
// PID1K2L<K23>
extern volatile __bit                   K23                 __at(0x2C93);	// @ (0x592 * 8 + 3)
#define                                 K23_bit             _BIT_ACCESS(PID1K2L,3)
// PID1K2L<K24>
extern volatile __bit                   K24                 __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 K24_bit             _BIT_ACCESS(PID1K2L,4)
// PID1K2L<K25>
extern volatile __bit                   K25                 __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 K25_bit             _BIT_ACCESS(PID1K2L,5)
// PID1K2L<K26>
extern volatile __bit                   K26                 __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 K26_bit             _BIT_ACCESS(PID1K2L,6)
// PID1K2L<K27>
extern volatile __bit                   K27                 __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 K27_bit             _BIT_ACCESS(PID1K2L,7)
// PID1K2H<K28>
extern volatile __bit                   K28                 __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 K28_bit             _BIT_ACCESS(PID1K2H,0)
// PID1K2H<K29>
extern volatile __bit                   K29                 __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 K29_bit             _BIT_ACCESS(PID1K2H,1)
// PID1K3L<K30>
extern volatile __bit                   K30                 __at(0x2CA0);	// @ (0x594 * 8 + 0)
#define                                 K30_bit             _BIT_ACCESS(PID1K3L,0)
// PID1K3L<K31>
extern volatile __bit                   K31                 __at(0x2CA1);	// @ (0x594 * 8 + 1)
#define                                 K31_bit             _BIT_ACCESS(PID1K3L,1)
// PID1K3H<K310>
extern volatile __bit                   K310                __at(0x2CAA);	// @ (0x595 * 8 + 2)
#define                                 K310_bit            _BIT_ACCESS(PID1K3H,2)
// PID1K3H<K311>
extern volatile __bit                   K311                __at(0x2CAB);	// @ (0x595 * 8 + 3)
#define                                 K311_bit            _BIT_ACCESS(PID1K3H,3)
// PID1K3H<K312>
extern volatile __bit                   K312                __at(0x2CAC);	// @ (0x595 * 8 + 4)
#define                                 K312_bit            _BIT_ACCESS(PID1K3H,4)
// PID1K3H<K313>
extern volatile __bit                   K313                __at(0x2CAD);	// @ (0x595 * 8 + 5)
#define                                 K313_bit            _BIT_ACCESS(PID1K3H,5)
// PID1K3H<K314>
extern volatile __bit                   K314                __at(0x2CAE);	// @ (0x595 * 8 + 6)
#define                                 K314_bit            _BIT_ACCESS(PID1K3H,6)
// PID1K3H<K315>
extern volatile __bit                   K315                __at(0x2CAF);	// @ (0x595 * 8 + 7)
#define                                 K315_bit            _BIT_ACCESS(PID1K3H,7)
// PID1K3L<K32>
extern volatile __bit                   K32                 __at(0x2CA2);	// @ (0x594 * 8 + 2)
#define                                 K32_bit             _BIT_ACCESS(PID1K3L,2)
// PID1K3L<K33>
extern volatile __bit                   K33                 __at(0x2CA3);	// @ (0x594 * 8 + 3)
#define                                 K33_bit             _BIT_ACCESS(PID1K3L,3)
// PID1K3L<K34>
extern volatile __bit                   K34                 __at(0x2CA4);	// @ (0x594 * 8 + 4)
#define                                 K34_bit             _BIT_ACCESS(PID1K3L,4)
// PID1K3L<K35>
extern volatile __bit                   K35                 __at(0x2CA5);	// @ (0x594 * 8 + 5)
#define                                 K35_bit             _BIT_ACCESS(PID1K3L,5)
// PID1K3L<K36>
extern volatile __bit                   K36                 __at(0x2CA6);	// @ (0x594 * 8 + 6)
#define                                 K36_bit             _BIT_ACCESS(PID1K3L,6)
// PID1K3L<K37>
extern volatile __bit                   K37                 __at(0x2CA7);	// @ (0x594 * 8 + 7)
#define                                 K37_bit             _BIT_ACCESS(PID1K3L,7)
// PID1K3H<K38>
extern volatile __bit                   K38                 __at(0x2CA8);	// @ (0x595 * 8 + 0)
#define                                 K38_bit             _BIT_ACCESS(PID1K3H,0)
// PID1K3H<K39>
extern volatile __bit                   K39                 __at(0x2CA9);	// @ (0x595 * 8 + 1)
#define                                 K39_bit             _BIT_ACCESS(PID1K3H,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x38CA);	// @ (0x719 * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x38CB);	// @ (0x719 * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x38CE);	// @ (0x719 * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x38CF);	// @ (0x719 * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x38C2);	// @ (0x718 * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x38C3);	// @ (0x718 * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x38C4);	// @ (0x718 * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x38C5);	// @ (0x718 * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x38C7);	// @ (0x718 * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x864);	// @ (0x10C * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x870);	// @ (0x10E * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x871);	// @ (0x10E * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x872);	// @ (0x10E * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x873);	// @ (0x10E * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x874);	// @ (0x10E * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x875);	// @ (0x10E * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0x7890);	// @ (0xF12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0x7891);	// @ (0xF12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0x7892);	// @ (0xF12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0x7893);	// @ (0xF12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0x7894);	// @ (0xF12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0x7895);	// @ (0xF12 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0x7898);	// @ (0xF13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0x7899);	// @ (0xF13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0x789A);	// @ (0xF13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0x789C);	// @ (0xF13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0x789D);	// @ (0xF13 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0x78A0);	// @ (0xF14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0x78A1);	// @ (0xF14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0x78A2);	// @ (0xF14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0x78A3);	// @ (0xF14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0x78A4);	// @ (0xF14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0x78A5);	// @ (0xF14 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0x78A8);	// @ (0xF15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0x78A9);	// @ (0xF15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0x78AA);	// @ (0xF15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0x78AB);	// @ (0xF15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0x78AC);	// @ (0xF15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0x78AD);	// @ (0xF15 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0x7887);	// @ (0xF10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0x78B0);	// @ (0xF16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0x78B1);	// @ (0xF16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0x78B2);	// @ (0xF16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0x78B3);	// @ (0xF16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0x78B4);	// @ (0xF16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0x78B5);	// @ (0xF16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0x78B6);	// @ (0xF16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0x78B7);	// @ (0xF16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0x7888);	// @ (0xF11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0x78B8);	// @ (0xF17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0x78B9);	// @ (0xF17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0x78BA);	// @ (0xF17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0x78BB);	// @ (0xF17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0x78BC);	// @ (0xF17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0x78BD);	// @ (0xF17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0x78BE);	// @ (0xF17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0x78BF);	// @ (0xF17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0x7889);	// @ (0xF11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0x78C0);	// @ (0xF18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0x78C6);	// @ (0xF18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0x78C7);	// @ (0xF18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0x788A);	// @ (0xF11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0x78C8);	// @ (0xF19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0x78C9);	// @ (0xF19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0x78CA);	// @ (0xF19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0x78CB);	// @ (0xF19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0x78CC);	// @ (0xF19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0x78CD);	// @ (0xF19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0x78CE);	// @ (0xF19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0x78CF);	// @ (0xF19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0x788B);	// @ (0xF11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0x7883);	// @ (0xF10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0x7880);	// @ (0xF10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0x7881);	// @ (0xF10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0x7882);	// @ (0xF10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0x788F);	// @ (0xF11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0x78E5);	// @ (0xF1C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0x78E8);	// @ (0xF1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0x78E9);	// @ (0xF1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0x78EA);	// @ (0xF1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0x78EB);	// @ (0xF1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0x78EC);	// @ (0xF1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0x78ED);	// @ (0xF1D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0x78F0);	// @ (0xF1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0x78F1);	// @ (0xF1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0x78F2);	// @ (0xF1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0x78F3);	// @ (0xF1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0x78F4);	// @ (0xF1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0x78F5);	// @ (0xF1E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0x78F8);	// @ (0xF1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0x78F9);	// @ (0xF1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0x78FA);	// @ (0xF1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0x78FB);	// @ (0xF1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0x78FC);	// @ (0xF1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0x78FD);	// @ (0xF1F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0x78D7);	// @ (0xF1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0x7900);	// @ (0xF20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0x7901);	// @ (0xF20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0x7902);	// @ (0xF20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0x7903);	// @ (0xF20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0x7904);	// @ (0xF20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0x7905);	// @ (0xF20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0x7906);	// @ (0xF20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0x7907);	// @ (0xF20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0x7908);	// @ (0xF21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0x7909);	// @ (0xF21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0x790A);	// @ (0xF21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0x790B);	// @ (0xF21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0x790C);	// @ (0xF21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0x790D);	// @ (0xF21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0x790E);	// @ (0xF21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0x790F);	// @ (0xF21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0x7910);	// @ (0xF22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0x7911);	// @ (0xF22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0x7912);	// @ (0xF22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0x7913);	// @ (0xF22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0x7914);	// @ (0xF22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0x7915);	// @ (0xF22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0x7916);	// @ (0xF22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0x7917);	// @ (0xF22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0x7918);	// @ (0xF23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0x7919);	// @ (0xF23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0x791A);	// @ (0xF23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0x791B);	// @ (0xF23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0x791C);	// @ (0xF23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0x791D);	// @ (0xF23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0x791E);	// @ (0xF23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0x791F);	// @ (0xF23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0x78D4);	// @ (0xF1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0x78D0);	// @ (0xF1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0x78D1);	// @ (0xF1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0x78DF);	// @ (0xF1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0x7930);	// @ (0xF26 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0x7931);	// @ (0xF26 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0x7932);	// @ (0xF26 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0x7933);	// @ (0xF26 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0x7934);	// @ (0xF26 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL0<LC3D1S5>
extern volatile __bit                   LC3D1S5             __at(0x7935);	// @ (0xF26 * 8 + 5)
#define                                 LC3D1S5_bit         _BIT_ACCESS(CLC3SEL0,5)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0x7938);	// @ (0xF27 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0x7939);	// @ (0xF27 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0x793A);	// @ (0xF27 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0x793B);	// @ (0xF27 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0x793C);	// @ (0xF27 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL1<LC3D2S5>
extern volatile __bit                   LC3D2S5             __at(0x793D);	// @ (0xF27 * 8 + 5)
#define                                 LC3D2S5_bit         _BIT_ACCESS(CLC3SEL1,5)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0x7940);	// @ (0xF28 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0x7941);	// @ (0xF28 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0x7942);	// @ (0xF28 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0x7943);	// @ (0xF28 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0x7944);	// @ (0xF28 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL2<LC3D3S5>
extern volatile __bit                   LC3D3S5             __at(0x7945);	// @ (0xF28 * 8 + 5)
#define                                 LC3D3S5_bit         _BIT_ACCESS(CLC3SEL2,5)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0x7948);	// @ (0xF29 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0x7949);	// @ (0xF29 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0x794A);	// @ (0xF29 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0x794B);	// @ (0xF29 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0x794C);	// @ (0xF29 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3SEL3<LC3D4S5>
extern volatile __bit                   LC3D4S5             __at(0x794D);	// @ (0xF29 * 8 + 5)
#define                                 LC3D4S5_bit         _BIT_ACCESS(CLC3SEL3,5)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0x7927);	// @ (0xF24 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0x7950);	// @ (0xF2A * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0x7951);	// @ (0xF2A * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0x7952);	// @ (0xF2A * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0x7953);	// @ (0xF2A * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0x7954);	// @ (0xF2A * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0x7955);	// @ (0xF2A * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0x7956);	// @ (0xF2A * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0x7957);	// @ (0xF2A * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0x7928);	// @ (0xF25 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0x7958);	// @ (0xF2B * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0x7959);	// @ (0xF2B * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0x795A);	// @ (0xF2B * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0x795B);	// @ (0xF2B * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0x795C);	// @ (0xF2B * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0x795D);	// @ (0xF2B * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0x795E);	// @ (0xF2B * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0x795F);	// @ (0xF2B * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0x7929);	// @ (0xF25 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0x7960);	// @ (0xF2C * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0x7961);	// @ (0xF2C * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0x7962);	// @ (0xF2C * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0x7963);	// @ (0xF2C * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0x7964);	// @ (0xF2C * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0x7965);	// @ (0xF2C * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0x7966);	// @ (0xF2C * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0x7967);	// @ (0xF2C * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0x792A);	// @ (0xF25 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0x7968);	// @ (0xF2D * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0x7969);	// @ (0xF2D * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0x796A);	// @ (0xF2D * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0x796B);	// @ (0xF2D * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0x796C);	// @ (0xF2D * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0x796D);	// @ (0xF2D * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0x796E);	// @ (0xF2D * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0x796F);	// @ (0xF2D * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0x792B);	// @ (0xF25 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0x7923);	// @ (0xF24 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0x7924);	// @ (0xF24 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0x7920);	// @ (0xF24 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0x7921);	// @ (0xF24 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0x7922);	// @ (0xF24 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0x7925);	// @ (0xF24 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0x792F);	// @ (0xF25 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// CLC4SEL0<LC4D1S0>
extern volatile __bit                   LC4D1S0             __at(0x7980);	// @ (0xF30 * 8 + 0)
#define                                 LC4D1S0_bit         _BIT_ACCESS(CLC4SEL0,0)
// CLC4SEL0<LC4D1S1>
extern volatile __bit                   LC4D1S1             __at(0x7981);	// @ (0xF30 * 8 + 1)
#define                                 LC4D1S1_bit         _BIT_ACCESS(CLC4SEL0,1)
// CLC4SEL0<LC4D1S2>
extern volatile __bit                   LC4D1S2             __at(0x7982);	// @ (0xF30 * 8 + 2)
#define                                 LC4D1S2_bit         _BIT_ACCESS(CLC4SEL0,2)
// CLC4SEL0<LC4D1S3>
extern volatile __bit                   LC4D1S3             __at(0x7983);	// @ (0xF30 * 8 + 3)
#define                                 LC4D1S3_bit         _BIT_ACCESS(CLC4SEL0,3)
// CLC4SEL0<LC4D1S4>
extern volatile __bit                   LC4D1S4             __at(0x7984);	// @ (0xF30 * 8 + 4)
#define                                 LC4D1S4_bit         _BIT_ACCESS(CLC4SEL0,4)
// CLC4SEL0<LC4D1S5>
extern volatile __bit                   LC4D1S5             __at(0x7985);	// @ (0xF30 * 8 + 5)
#define                                 LC4D1S5_bit         _BIT_ACCESS(CLC4SEL0,5)
// CLC4SEL1<LC4D2S0>
extern volatile __bit                   LC4D2S0             __at(0x7988);	// @ (0xF31 * 8 + 0)
#define                                 LC4D2S0_bit         _BIT_ACCESS(CLC4SEL1,0)
// CLC4SEL1<LC4D2S1>
extern volatile __bit                   LC4D2S1             __at(0x7989);	// @ (0xF31 * 8 + 1)
#define                                 LC4D2S1_bit         _BIT_ACCESS(CLC4SEL1,1)
// CLC4SEL1<LC4D2S2>
extern volatile __bit                   LC4D2S2             __at(0x798A);	// @ (0xF31 * 8 + 2)
#define                                 LC4D2S2_bit         _BIT_ACCESS(CLC4SEL1,2)
// CLC4SEL1<LC4D2S3>
extern volatile __bit                   LC4D2S3             __at(0x798B);	// @ (0xF31 * 8 + 3)
#define                                 LC4D2S3_bit         _BIT_ACCESS(CLC4SEL1,3)
// CLC4SEL1<LC4D2S4>
extern volatile __bit                   LC4D2S4             __at(0x798C);	// @ (0xF31 * 8 + 4)
#define                                 LC4D2S4_bit         _BIT_ACCESS(CLC4SEL1,4)
// CLC4SEL1<LC4D2S5>
extern volatile __bit                   LC4D2S5             __at(0x798D);	// @ (0xF31 * 8 + 5)
#define                                 LC4D2S5_bit         _BIT_ACCESS(CLC4SEL1,5)
// CLC4SEL2<LC4D3S0>
extern volatile __bit                   LC4D3S0             __at(0x7990);	// @ (0xF32 * 8 + 0)
#define                                 LC4D3S0_bit         _BIT_ACCESS(CLC4SEL2,0)
// CLC4SEL2<LC4D3S1>
extern volatile __bit                   LC4D3S1             __at(0x7991);	// @ (0xF32 * 8 + 1)
#define                                 LC4D3S1_bit         _BIT_ACCESS(CLC4SEL2,1)
// CLC4SEL2<LC4D3S2>
extern volatile __bit                   LC4D3S2             __at(0x7992);	// @ (0xF32 * 8 + 2)
#define                                 LC4D3S2_bit         _BIT_ACCESS(CLC4SEL2,2)
// CLC4SEL2<LC4D3S3>
extern volatile __bit                   LC4D3S3             __at(0x7993);	// @ (0xF32 * 8 + 3)
#define                                 LC4D3S3_bit         _BIT_ACCESS(CLC4SEL2,3)
// CLC4SEL2<LC4D3S4>
extern volatile __bit                   LC4D3S4             __at(0x7994);	// @ (0xF32 * 8 + 4)
#define                                 LC4D3S4_bit         _BIT_ACCESS(CLC4SEL2,4)
// CLC4SEL2<LC4D3S5>
extern volatile __bit                   LC4D3S5             __at(0x7995);	// @ (0xF32 * 8 + 5)
#define                                 LC4D3S5_bit         _BIT_ACCESS(CLC4SEL2,5)
// CLC4SEL3<LC4D4S0>
extern volatile __bit                   LC4D4S0             __at(0x7998);	// @ (0xF33 * 8 + 0)
#define                                 LC4D4S0_bit         _BIT_ACCESS(CLC4SEL3,0)
// CLC4SEL3<LC4D4S1>
extern volatile __bit                   LC4D4S1             __at(0x7999);	// @ (0xF33 * 8 + 1)
#define                                 LC4D4S1_bit         _BIT_ACCESS(CLC4SEL3,1)
// CLC4SEL3<LC4D4S2>
extern volatile __bit                   LC4D4S2             __at(0x799A);	// @ (0xF33 * 8 + 2)
#define                                 LC4D4S2_bit         _BIT_ACCESS(CLC4SEL3,2)
// CLC4SEL3<LC4D4S3>
extern volatile __bit                   LC4D4S3             __at(0x799B);	// @ (0xF33 * 8 + 3)
#define                                 LC4D4S3_bit         _BIT_ACCESS(CLC4SEL3,3)
// CLC4SEL3<LC4D4S4>
extern volatile __bit                   LC4D4S4             __at(0x799C);	// @ (0xF33 * 8 + 4)
#define                                 LC4D4S4_bit         _BIT_ACCESS(CLC4SEL3,4)
// CLC4SEL3<LC4D4S5>
extern volatile __bit                   LC4D4S5             __at(0x799D);	// @ (0xF33 * 8 + 5)
#define                                 LC4D4S5_bit         _BIT_ACCESS(CLC4SEL3,5)
// CLC4CON<LC4EN>
extern volatile __bit                   LC4EN               __at(0x7977);	// @ (0xF2E * 8 + 7)
#define                                 LC4EN_bit           _BIT_ACCESS(CLC4CON,7)
// CLC4GLS0<LC4G1D1N>
extern volatile __bit                   LC4G1D1N            __at(0x79A0);	// @ (0xF34 * 8 + 0)
#define                                 LC4G1D1N_bit        _BIT_ACCESS(CLC4GLS0,0)
// CLC4GLS0<LC4G1D1T>
extern volatile __bit                   LC4G1D1T            __at(0x79A1);	// @ (0xF34 * 8 + 1)
#define                                 LC4G1D1T_bit        _BIT_ACCESS(CLC4GLS0,1)
// CLC4GLS0<LC4G1D2N>
extern volatile __bit                   LC4G1D2N            __at(0x79A2);	// @ (0xF34 * 8 + 2)
#define                                 LC4G1D2N_bit        _BIT_ACCESS(CLC4GLS0,2)
// CLC4GLS0<LC4G1D2T>
extern volatile __bit                   LC4G1D2T            __at(0x79A3);	// @ (0xF34 * 8 + 3)
#define                                 LC4G1D2T_bit        _BIT_ACCESS(CLC4GLS0,3)
// CLC4GLS0<LC4G1D3N>
extern volatile __bit                   LC4G1D3N            __at(0x79A4);	// @ (0xF34 * 8 + 4)
#define                                 LC4G1D3N_bit        _BIT_ACCESS(CLC4GLS0,4)
// CLC4GLS0<LC4G1D3T>
extern volatile __bit                   LC4G1D3T            __at(0x79A5);	// @ (0xF34 * 8 + 5)
#define                                 LC4G1D3T_bit        _BIT_ACCESS(CLC4GLS0,5)
// CLC4GLS0<LC4G1D4N>
extern volatile __bit                   LC4G1D4N            __at(0x79A6);	// @ (0xF34 * 8 + 6)
#define                                 LC4G1D4N_bit        _BIT_ACCESS(CLC4GLS0,6)
// CLC4GLS0<LC4G1D4T>
extern volatile __bit                   LC4G1D4T            __at(0x79A7);	// @ (0xF34 * 8 + 7)
#define                                 LC4G1D4T_bit        _BIT_ACCESS(CLC4GLS0,7)
// CLC4POL<LC4G1POL>
extern volatile __bit                   LC4G1POL            __at(0x7978);	// @ (0xF2F * 8 + 0)
#define                                 LC4G1POL_bit        _BIT_ACCESS(CLC4POL,0)
// CLC4GLS1<LC4G2D1N>
extern volatile __bit                   LC4G2D1N            __at(0x79A8);	// @ (0xF35 * 8 + 0)
#define                                 LC4G2D1N_bit        _BIT_ACCESS(CLC4GLS1,0)
// CLC4GLS1<LC4G2D1T>
extern volatile __bit                   LC4G2D1T            __at(0x79A9);	// @ (0xF35 * 8 + 1)
#define                                 LC4G2D1T_bit        _BIT_ACCESS(CLC4GLS1,1)
// CLC4GLS1<LC4G2D2N>
extern volatile __bit                   LC4G2D2N            __at(0x79AA);	// @ (0xF35 * 8 + 2)
#define                                 LC4G2D2N_bit        _BIT_ACCESS(CLC4GLS1,2)
// CLC4GLS1<LC4G2D2T>
extern volatile __bit                   LC4G2D2T            __at(0x79AB);	// @ (0xF35 * 8 + 3)
#define                                 LC4G2D2T_bit        _BIT_ACCESS(CLC4GLS1,3)
// CLC4GLS1<LC4G2D3N>
extern volatile __bit                   LC4G2D3N            __at(0x79AC);	// @ (0xF35 * 8 + 4)
#define                                 LC4G2D3N_bit        _BIT_ACCESS(CLC4GLS1,4)
// CLC4GLS1<LC4G2D3T>
extern volatile __bit                   LC4G2D3T            __at(0x79AD);	// @ (0xF35 * 8 + 5)
#define                                 LC4G2D3T_bit        _BIT_ACCESS(CLC4GLS1,5)
// CLC4GLS1<LC4G2D4N>
extern volatile __bit                   LC4G2D4N            __at(0x79AE);	// @ (0xF35 * 8 + 6)
#define                                 LC4G2D4N_bit        _BIT_ACCESS(CLC4GLS1,6)
// CLC4GLS1<LC4G2D4T>
extern volatile __bit                   LC4G2D4T            __at(0x79AF);	// @ (0xF35 * 8 + 7)
#define                                 LC4G2D4T_bit        _BIT_ACCESS(CLC4GLS1,7)
// CLC4POL<LC4G2POL>
extern volatile __bit                   LC4G2POL            __at(0x7979);	// @ (0xF2F * 8 + 1)
#define                                 LC4G2POL_bit        _BIT_ACCESS(CLC4POL,1)
// CLC4GLS2<LC4G3D1N>
extern volatile __bit                   LC4G3D1N            __at(0x79B0);	// @ (0xF36 * 8 + 0)
#define                                 LC4G3D1N_bit        _BIT_ACCESS(CLC4GLS2,0)
// CLC4GLS2<LC4G3D1T>
extern volatile __bit                   LC4G3D1T            __at(0x79B1);	// @ (0xF36 * 8 + 1)
#define                                 LC4G3D1T_bit        _BIT_ACCESS(CLC4GLS2,1)
// CLC4GLS2<LC4G3D2N>
extern volatile __bit                   LC4G3D2N            __at(0x79B2);	// @ (0xF36 * 8 + 2)
#define                                 LC4G3D2N_bit        _BIT_ACCESS(CLC4GLS2,2)
// CLC4GLS2<LC4G3D2T>
extern volatile __bit                   LC4G3D2T            __at(0x79B3);	// @ (0xF36 * 8 + 3)
#define                                 LC4G3D2T_bit        _BIT_ACCESS(CLC4GLS2,3)
// CLC4GLS2<LC4G3D3N>
extern volatile __bit                   LC4G3D3N            __at(0x79B4);	// @ (0xF36 * 8 + 4)
#define                                 LC4G3D3N_bit        _BIT_ACCESS(CLC4GLS2,4)
// CLC4GLS2<LC4G3D3T>
extern volatile __bit                   LC4G3D3T            __at(0x79B5);	// @ (0xF36 * 8 + 5)
#define                                 LC4G3D3T_bit        _BIT_ACCESS(CLC4GLS2,5)
// CLC4GLS2<LC4G3D4N>
extern volatile __bit                   LC4G3D4N            __at(0x79B6);	// @ (0xF36 * 8 + 6)
#define                                 LC4G3D4N_bit        _BIT_ACCESS(CLC4GLS2,6)
// CLC4GLS2<LC4G3D4T>
extern volatile __bit                   LC4G3D4T            __at(0x79B7);	// @ (0xF36 * 8 + 7)
#define                                 LC4G3D4T_bit        _BIT_ACCESS(CLC4GLS2,7)
// CLC4POL<LC4G3POL>
extern volatile __bit                   LC4G3POL            __at(0x797A);	// @ (0xF2F * 8 + 2)
#define                                 LC4G3POL_bit        _BIT_ACCESS(CLC4POL,2)
// CLC4GLS3<LC4G4D1N>
extern volatile __bit                   LC4G4D1N            __at(0x79B8);	// @ (0xF37 * 8 + 0)
#define                                 LC4G4D1N_bit        _BIT_ACCESS(CLC4GLS3,0)
// CLC4GLS3<LC4G4D1T>
extern volatile __bit                   LC4G4D1T            __at(0x79B9);	// @ (0xF37 * 8 + 1)
#define                                 LC4G4D1T_bit        _BIT_ACCESS(CLC4GLS3,1)
// CLC4GLS3<LC4G4D2N>
extern volatile __bit                   LC4G4D2N            __at(0x79BA);	// @ (0xF37 * 8 + 2)
#define                                 LC4G4D2N_bit        _BIT_ACCESS(CLC4GLS3,2)
// CLC4GLS3<LC4G4D2T>
extern volatile __bit                   LC4G4D2T            __at(0x79BB);	// @ (0xF37 * 8 + 3)
#define                                 LC4G4D2T_bit        _BIT_ACCESS(CLC4GLS3,3)
// CLC4GLS3<LC4G4D3N>
extern volatile __bit                   LC4G4D3N            __at(0x79BC);	// @ (0xF37 * 8 + 4)
#define                                 LC4G4D3N_bit        _BIT_ACCESS(CLC4GLS3,4)
// CLC4GLS3<LC4G4D3T>
extern volatile __bit                   LC4G4D3T            __at(0x79BD);	// @ (0xF37 * 8 + 5)
#define                                 LC4G4D3T_bit        _BIT_ACCESS(CLC4GLS3,5)
// CLC4GLS3<LC4G4D4N>
extern volatile __bit                   LC4G4D4N            __at(0x79BE);	// @ (0xF37 * 8 + 6)
#define                                 LC4G4D4N_bit        _BIT_ACCESS(CLC4GLS3,6)
// CLC4GLS3<LC4G4D4T>
extern volatile __bit                   LC4G4D4T            __at(0x79BF);	// @ (0xF37 * 8 + 7)
#define                                 LC4G4D4T_bit        _BIT_ACCESS(CLC4GLS3,7)
// CLC4POL<LC4G4POL>
extern volatile __bit                   LC4G4POL            __at(0x797B);	// @ (0xF2F * 8 + 3)
#define                                 LC4G4POL_bit        _BIT_ACCESS(CLC4POL,3)
// CLC4CON<LC4INTN>
extern volatile __bit                   LC4INTN             __at(0x7973);	// @ (0xF2E * 8 + 3)
#define                                 LC4INTN_bit         _BIT_ACCESS(CLC4CON,3)
// CLC4CON<LC4INTP>
extern volatile __bit                   LC4INTP             __at(0x7974);	// @ (0xF2E * 8 + 4)
#define                                 LC4INTP_bit         _BIT_ACCESS(CLC4CON,4)
// CLC4CON<LC4MODE0>
extern volatile __bit                   LC4MODE0            __at(0x7970);	// @ (0xF2E * 8 + 0)
#define                                 LC4MODE0_bit        _BIT_ACCESS(CLC4CON,0)
// CLC4CON<LC4MODE1>
extern volatile __bit                   LC4MODE1            __at(0x7971);	// @ (0xF2E * 8 + 1)
#define                                 LC4MODE1_bit        _BIT_ACCESS(CLC4CON,1)
// CLC4CON<LC4MODE2>
extern volatile __bit                   LC4MODE2            __at(0x7972);	// @ (0xF2E * 8 + 2)
#define                                 LC4MODE2_bit        _BIT_ACCESS(CLC4CON,2)
// CLC4CON<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0x7975);	// @ (0xF2E * 8 + 5)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLC4CON,5)
// CLC4POL<LC4POL>
extern volatile __bit                   LC4POL              __at(0x797F);	// @ (0xF2F * 8 + 7)
#define                                 LC4POL_bit          _BIT_ACCESS(CLC4POL,7)
// CWG1CON0<LD>
extern volatile __bit                   LD                  __at(0x34B6);	// @ (0x696 * 8 + 6)
#define                                 LD_bit              _BIT_ACCESS(CWG1CON0,6)
// SCANLADRL<LDAR0>
extern volatile __bit                   LDAR0               __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 LDAR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LDAR1>
extern volatile __bit                   LDAR1               __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 LDAR1_bit           _BIT_ACCESS(SCANLADRL,1)
// OSCSTAT<LFIOFR>
extern volatile __bit                   LFIOFR              __at(0x4D1);	// @ (0x9A * 8 + 1)
#define                                 LFIOFR_bit          _BIT_ACCESS(OSCSTAT,1)
// CWG1AS0<LSAC0>
extern volatile __bit                   LSAC0               __at(0x349A);	// @ (0x693 * 8 + 2)
#define                                 LSAC0_bit           _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<LSAC1>
extern volatile __bit                   LSAC1               __at(0x349B);	// @ (0x693 * 8 + 3)
#define                                 LSAC1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSBD0>
extern volatile __bit                   LSBD0               __at(0x349C);	// @ (0x693 * 8 + 4)
#define                                 LSBD0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSBD1>
extern volatile __bit                   LSBD1               __at(0x349D);	// @ (0x693 * 8 + 5)
#define                                 LSBD1_bit           _BIT_ACCESS(CWG1AS0,5)
// PMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0xCAD);	// @ (0x195 * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(PMCON1,5)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x8A8);	// @ (0x115 * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x8A9);	// @ (0x115 * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// OSCSTAT<MFIOFR>
extern volatile __bit                   MFIOFR              __at(0x4D2);	// @ (0x9A * 8 + 2)
#define                                 MFIOFR_bit          _BIT_ACCESS(OSCSTAT,2)
// AT1MISSL<MISS0>
extern volatile __bit                   MISS0               __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 MISS0_bit           _BIT_ACCESS(AT1MISSL,0)
// AT1MISSL<MISS1>
extern volatile __bit                   MISS1               __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 MISS1_bit           _BIT_ACCESS(AT1MISSL,1)
// AT1MISSH<MISS10>
extern volatile __bit                   MISS10              __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 MISS10_bit          _BIT_ACCESS(AT1MISSH,2)
// AT1MISSH<MISS11>
extern volatile __bit                   MISS11              __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 MISS11_bit          _BIT_ACCESS(AT1MISSH,3)
// AT1MISSH<MISS12>
extern volatile __bit                   MISS12              __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 MISS12_bit          _BIT_ACCESS(AT1MISSH,4)
// AT1MISSH<MISS13>
extern volatile __bit                   MISS13              __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 MISS13_bit          _BIT_ACCESS(AT1MISSH,5)
// AT1MISSH<MISS14>
extern volatile __bit                   MISS14              __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 MISS14_bit          _BIT_ACCESS(AT1MISSH,6)
// AT1MISSH<MISS15>
extern volatile __bit                   MISS15              __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 MISS15_bit          _BIT_ACCESS(AT1MISSH,7)
// AT1MISSL<MISS2>
extern volatile __bit                   MISS2               __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 MISS2_bit           _BIT_ACCESS(AT1MISSL,2)
// AT1MISSL<MISS3>
extern volatile __bit                   MISS3               __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 MISS3_bit           _BIT_ACCESS(AT1MISSL,3)
// AT1MISSL<MISS4>
extern volatile __bit                   MISS4               __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 MISS4_bit           _BIT_ACCESS(AT1MISSL,4)
// AT1MISSL<MISS5>
extern volatile __bit                   MISS5               __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 MISS5_bit           _BIT_ACCESS(AT1MISSL,5)
// AT1MISSL<MISS6>
extern volatile __bit                   MISS6               __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 MISS6_bit           _BIT_ACCESS(AT1MISSL,6)
// AT1MISSL<MISS7>
extern volatile __bit                   MISS7               __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 MISS7_bit           _BIT_ACCESS(AT1MISSL,7)
// AT1MISSH<MISS8>
extern volatile __bit                   MISS8               __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 MISS8_bit           _BIT_ACCESS(AT1MISSH,0)
// AT1MISSH<MISS9>
extern volatile __bit                   MISS9               __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 MISS9_bit           _BIT_ACCESS(AT1MISSH,1)
// CLCDATA<MLC1OUT>
extern volatile __bit                   MLC1OUT             __at(0x7878);	// @ (0xF0F * 8 + 0)
#define                                 MLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// CLCDATA<MLC2OUT>
extern volatile __bit                   MLC2OUT             __at(0x7879);	// @ (0xF0F * 8 + 1)
#define                                 MLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// CLCDATA<MLC3OUT>
extern volatile __bit                   MLC3OUT             __at(0x787A);	// @ (0xF0F * 8 + 2)
#define                                 MLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// CLCDATA<MLC4OUT>
extern volatile __bit                   MLC4OUT             __at(0x787B);	// @ (0xF0F * 8 + 3)
#define                                 MLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// AT1CON0<MODE>
extern volatile __bit                   MODE                __at(0x40A0);	// @ (0x814 * 8 + 0)
#define                                 MODE_bit            _BIT_ACCESS(AT1CON0,0)
// AT1CON1<MPP>
extern volatile __bit                   MPP                 __at(0x40AA);	// @ (0x815 * 8 + 2)
#define                                 MPP_bit             _BIT_ACCESS(AT1CON1,2)
// SSP1MSK<MSK0>
extern volatile __bit                   MSK0                __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 MSK0_bit            _BIT_ACCESS(SSP1MSK,0)
// SSP1MSK<MSK1>
extern volatile __bit                   MSK1                __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 MSK1_bit            _BIT_ACCESS(SSP1MSK,1)
// SSP1MSK<MSK2>
extern volatile __bit                   MSK2                __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 MSK2_bit            _BIT_ACCESS(SSP1MSK,2)
// SSP1MSK<MSK3>
extern volatile __bit                   MSK3                __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 MSK3_bit            _BIT_ACCESS(SSP1MSK,3)
// SSP1MSK<MSK4>
extern volatile __bit                   MSK4                __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 MSK4_bit            _BIT_ACCESS(SSP1MSK,4)
// SSP1MSK<MSK5>
extern volatile __bit                   MSK5                __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 MSK5_bit            _BIT_ACCESS(SSP1MSK,5)
// SSP1MSK<MSK6>
extern volatile __bit                   MSK6                __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 MSK6_bit            _BIT_ACCESS(SSP1MSK,6)
// SSP1MSK<MSK7>
extern volatile __bit                   MSK7                __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 MSK7_bit            _BIT_ACCESS(SSP1MSK,7)
// ODCONA<ODA0>
extern volatile __bit                   ODA0                __at(0x1460);	// @ (0x28C * 8 + 0)
#define                                 ODA0_bit            _BIT_ACCESS(ODCONA,0)
// ODCONA<ODA1>
extern volatile __bit                   ODA1                __at(0x1461);	// @ (0x28C * 8 + 1)
#define                                 ODA1_bit            _BIT_ACCESS(ODCONA,1)
// ODCONA<ODA2>
extern volatile __bit                   ODA2                __at(0x1462);	// @ (0x28C * 8 + 2)
#define                                 ODA2_bit            _BIT_ACCESS(ODCONA,2)
// ODCONA<ODA4>
extern volatile __bit                   ODA4                __at(0x1464);	// @ (0x28C * 8 + 4)
#define                                 ODA4_bit            _BIT_ACCESS(ODCONA,4)
// ODCONA<ODA5>
extern volatile __bit                   ODA5                __at(0x1465);	// @ (0x28C * 8 + 5)
#define                                 ODA5_bit            _BIT_ACCESS(ODCONA,5)
// ODCONC<ODC0>
extern volatile __bit                   ODC0                __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 ODC0_bit            _BIT_ACCESS(ODCONC,0)
// ODCONC<ODC1>
extern volatile __bit                   ODC1                __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 ODC1_bit            _BIT_ACCESS(ODCONC,1)
// ODCONC<ODC2>
extern volatile __bit                   ODC2                __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 ODC2_bit            _BIT_ACCESS(ODCONC,2)
// ODCONC<ODC3>
extern volatile __bit                   ODC3                __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 ODC3_bit            _BIT_ACCESS(ODCONC,3)
// ODCONC<ODC4>
extern volatile __bit                   ODC4                __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 ODC4_bit            _BIT_ACCESS(ODCONC,4)
// ODCONC<ODC5>
extern volatile __bit                   ODC5                __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 ODC5_bit            _BIT_ACCESS(ODCONC,5)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0xCE9);	// @ (0x19D * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// PIE2<OSCFIE>
extern volatile __bit                   OSCFIE              __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 OSCFIE_bit          _BIT_ACCESS(PIE2,7)
// PIR2<OSFIF>
extern volatile __bit                   OSFIF               __at(0x8F);	// @ (0x11 * 8 + 7)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR2,7)
// OSCSTAT<OSTS>
extern volatile __bit                   OSTS                __at(0x4D5);	// @ (0x9A * 8 + 5)
#define                                 OSTS_bit            _BIT_ACCESS(OSCSTAT,5)
// PID1OUTLL<OUT0>
extern volatile __bit                   OUT0                __at(0x2CB0);	// @ (0x596 * 8 + 0)
#define                                 OUT0_bit            _BIT_ACCESS(PID1OUTLL,0)
// PID1OUTLL<OUT1>
extern volatile __bit                   OUT1                __at(0x2CB1);	// @ (0x596 * 8 + 1)
#define                                 OUT1_bit            _BIT_ACCESS(PID1OUTLL,1)
// PID1OUTLH<OUT10>
extern volatile __bit                   OUT10               __at(0x2CBA);	// @ (0x597 * 8 + 2)
#define                                 OUT10_bit           _BIT_ACCESS(PID1OUTLH,2)
// PID1OUTLH<OUT11>
extern volatile __bit                   OUT11               __at(0x2CBB);	// @ (0x597 * 8 + 3)
#define                                 OUT11_bit           _BIT_ACCESS(PID1OUTLH,3)
// PID1OUTLH<OUT12>
extern volatile __bit                   OUT12               __at(0x2CBC);	// @ (0x597 * 8 + 4)
#define                                 OUT12_bit           _BIT_ACCESS(PID1OUTLH,4)
// PID1OUTLH<OUT13>
extern volatile __bit                   OUT13               __at(0x2CBD);	// @ (0x597 * 8 + 5)
#define                                 OUT13_bit           _BIT_ACCESS(PID1OUTLH,5)
// PID1OUTLH<OUT14>
extern volatile __bit                   OUT14               __at(0x2CBE);	// @ (0x597 * 8 + 6)
#define                                 OUT14_bit           _BIT_ACCESS(PID1OUTLH,6)
// PID1OUTLH<OUT15>
extern volatile __bit                   OUT15               __at(0x2CBF);	// @ (0x597 * 8 + 7)
#define                                 OUT15_bit           _BIT_ACCESS(PID1OUTLH,7)
// PID1OUTHL<OUT16>
extern volatile __bit                   OUT16               __at(0x2CC0);	// @ (0x598 * 8 + 0)
#define                                 OUT16_bit           _BIT_ACCESS(PID1OUTHL,0)
// PID1OUTHL<OUT17>
extern volatile __bit                   OUT17               __at(0x2CC1);	// @ (0x598 * 8 + 1)
#define                                 OUT17_bit           _BIT_ACCESS(PID1OUTHL,1)
// PID1OUTHL<OUT18>
extern volatile __bit                   OUT18               __at(0x2CC2);	// @ (0x598 * 8 + 2)
#define                                 OUT18_bit           _BIT_ACCESS(PID1OUTHL,2)
// PID1OUTHL<OUT19>
extern volatile __bit                   OUT19               __at(0x2CC3);	// @ (0x598 * 8 + 3)
#define                                 OUT19_bit           _BIT_ACCESS(PID1OUTHL,3)
// PID1OUTLL<OUT2>
extern volatile __bit                   OUT2                __at(0x2CB2);	// @ (0x596 * 8 + 2)
#define                                 OUT2_bit            _BIT_ACCESS(PID1OUTLL,2)
// PID1OUTHL<OUT20>
extern volatile __bit                   OUT20               __at(0x2CC4);	// @ (0x598 * 8 + 4)
#define                                 OUT20_bit           _BIT_ACCESS(PID1OUTHL,4)
// PID1OUTHL<OUT21>
extern volatile __bit                   OUT21               __at(0x2CC5);	// @ (0x598 * 8 + 5)
#define                                 OUT21_bit           _BIT_ACCESS(PID1OUTHL,5)
// PID1OUTHL<OUT22>
extern volatile __bit                   OUT22               __at(0x2CC6);	// @ (0x598 * 8 + 6)
#define                                 OUT22_bit           _BIT_ACCESS(PID1OUTHL,6)
// PID1OUTHL<OUT23>
extern volatile __bit                   OUT23               __at(0x2CC7);	// @ (0x598 * 8 + 7)
#define                                 OUT23_bit           _BIT_ACCESS(PID1OUTHL,7)
// PID1OUTHH<OUT24>
extern volatile __bit                   OUT24               __at(0x2CC8);	// @ (0x599 * 8 + 0)
#define                                 OUT24_bit           _BIT_ACCESS(PID1OUTHH,0)
// PID1OUTHH<OUT25>
extern volatile __bit                   OUT25               __at(0x2CC9);	// @ (0x599 * 8 + 1)
#define                                 OUT25_bit           _BIT_ACCESS(PID1OUTHH,1)
// PID1OUTHH<OUT26>
extern volatile __bit                   OUT26               __at(0x2CCA);	// @ (0x599 * 8 + 2)
#define                                 OUT26_bit           _BIT_ACCESS(PID1OUTHH,2)
// PID1OUTHH<OUT27>
extern volatile __bit                   OUT27               __at(0x2CCB);	// @ (0x599 * 8 + 3)
#define                                 OUT27_bit           _BIT_ACCESS(PID1OUTHH,3)
// PID1OUTHH<OUT28>
extern volatile __bit                   OUT28               __at(0x2CCC);	// @ (0x599 * 8 + 4)
#define                                 OUT28_bit           _BIT_ACCESS(PID1OUTHH,4)
// PID1OUTHH<OUT29>
extern volatile __bit                   OUT29               __at(0x2CCD);	// @ (0x599 * 8 + 5)
#define                                 OUT29_bit           _BIT_ACCESS(PID1OUTHH,5)
// PID1OUTLL<OUT3>
extern volatile __bit                   OUT3                __at(0x2CB3);	// @ (0x596 * 8 + 3)
#define                                 OUT3_bit            _BIT_ACCESS(PID1OUTLL,3)
// PID1OUTHH<OUT30>
extern volatile __bit                   OUT30               __at(0x2CCE);	// @ (0x599 * 8 + 6)
#define                                 OUT30_bit           _BIT_ACCESS(PID1OUTHH,6)
// PID1OUTHH<OUT31>
extern volatile __bit                   OUT31               __at(0x2CCF);	// @ (0x599 * 8 + 7)
#define                                 OUT31_bit           _BIT_ACCESS(PID1OUTHH,7)
// PID1OUTU<OUT32>
extern volatile __bit                   OUT32               __at(0x2CD0);	// @ (0x59A * 8 + 0)
#define                                 OUT32_bit           _BIT_ACCESS(PID1OUTU,0)
// PID1OUTU<OUT33>
extern volatile __bit                   OUT33               __at(0x2CD1);	// @ (0x59A * 8 + 1)
#define                                 OUT33_bit           _BIT_ACCESS(PID1OUTU,1)
// PID1OUTU<OUT34>
extern volatile __bit                   OUT34               __at(0x2CD2);	// @ (0x59A * 8 + 2)
#define                                 OUT34_bit           _BIT_ACCESS(PID1OUTU,2)
// PID1OUTU<OUT35>
extern volatile __bit                   OUT35               __at(0x2CD3);	// @ (0x59A * 8 + 3)
#define                                 OUT35_bit           _BIT_ACCESS(PID1OUTU,3)
// PID1OUTLL<OUT4>
extern volatile __bit                   OUT4                __at(0x2CB4);	// @ (0x596 * 8 + 4)
#define                                 OUT4_bit            _BIT_ACCESS(PID1OUTLL,4)
// PID1OUTLL<OUT5>
extern volatile __bit                   OUT5                __at(0x2CB5);	// @ (0x596 * 8 + 5)
#define                                 OUT5_bit            _BIT_ACCESS(PID1OUTLL,5)
// PID1OUTLL<OUT6>
extern volatile __bit                   OUT6                __at(0x2CB6);	// @ (0x596 * 8 + 6)
#define                                 OUT6_bit            _BIT_ACCESS(PID1OUTLL,6)
// PID1OUTLL<OUT7>
extern volatile __bit                   OUT7                __at(0x2CB7);	// @ (0x596 * 8 + 7)
#define                                 OUT7_bit            _BIT_ACCESS(PID1OUTLL,7)
// PID1OUTLH<OUT8>
extern volatile __bit                   OUT8                __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 OUT8_bit            _BIT_ACCESS(PID1OUTLH,0)
// PID1OUTLH<OUT9>
extern volatile __bit                   OUT9                __at(0x2CB9);	// @ (0x597 * 8 + 1)
#define                                 OUT9_bit            _BIT_ACCESS(PID1OUTLH,1)
// CWG1OCON0<OVRA>
extern volatile __bit                   OVRA                __at(0x34AC);	// @ (0x695 * 8 + 4)
#define                                 OVRA_bit            _BIT_ACCESS(CWG1OCON0,4)
// CWG1OCON0<OVRB>
extern volatile __bit                   OVRB                __at(0x34AD);	// @ (0x695 * 8 + 5)
#define                                 OVRB_bit            _BIT_ACCESS(CWG1OCON0,5)
// CWG1OCON0<OVRC>
extern volatile __bit                   OVRC                __at(0x34AE);	// @ (0x695 * 8 + 6)
#define                                 OVRC_bit            _BIT_ACCESS(CWG1OCON0,6)
// CWG1OCON0<OVRD>
extern volatile __bit                   OVRD                __at(0x34AF);	// @ (0x695 * 8 + 7)
#define                                 OVRD_bit            _BIT_ACCESS(CWG1OCON0,7)
// CCPTMRS<P3TSEL0>
extern volatile __bit                   P3TSEL0             __at(0x14F4);	// @ (0x29E * 8 + 4)
#define                                 P3TSEL0_bit         _BIT_ACCESS(CCPTMRS,4)
// CCPTMRS<P3TSEL1>
extern volatile __bit                   P3TSEL1             __at(0x14F5);	// @ (0x29E * 8 + 5)
#define                                 P3TSEL1_bit         _BIT_ACCESS(CCPTMRS,5)
// CCPTMRS<P4TSEL0>
extern volatile __bit                   P4TSEL0             __at(0x14F6);	// @ (0x29E * 8 + 6)
#define                                 P4TSEL0_bit         _BIT_ACCESS(CCPTMRS,6)
// CCPTMRS<P4TSEL1>
extern volatile __bit                   P4TSEL1             __at(0x14F7);	// @ (0x29E * 8 + 7)
#define                                 P4TSEL1_bit         _BIT_ACCESS(CCPTMRS,7)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0x10BE);	// @ (0x217 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// AT1PERL<PER0>
extern volatile __bit                   PER0                __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PER0_bit            _BIT_ACCESS(AT1PERL,0)
// AT1PERL<PER1>
extern volatile __bit                   PER1                __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PER1_bit            _BIT_ACCESS(AT1PERL,1)
// AT1PERH<PER10>
extern volatile __bit                   PER10               __at(0x408A);	// @ (0x811 * 8 + 2)
#define                                 PER10_bit           _BIT_ACCESS(AT1PERH,2)
// AT1PERH<PER11>
extern volatile __bit                   PER11               __at(0x408B);	// @ (0x811 * 8 + 3)
#define                                 PER11_bit           _BIT_ACCESS(AT1PERH,3)
// AT1PERH<PER12>
extern volatile __bit                   PER12               __at(0x408C);	// @ (0x811 * 8 + 4)
#define                                 PER12_bit           _BIT_ACCESS(AT1PERH,4)
// AT1PERH<PER13>
extern volatile __bit                   PER13               __at(0x408D);	// @ (0x811 * 8 + 5)
#define                                 PER13_bit           _BIT_ACCESS(AT1PERH,5)
// AT1PERH<PER14>
extern volatile __bit                   PER14               __at(0x408E);	// @ (0x811 * 8 + 6)
#define                                 PER14_bit           _BIT_ACCESS(AT1PERH,6)
// AT1PERH<PER15>
extern volatile __bit                   PER15               __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 PER15_bit           _BIT_ACCESS(AT1PERH,7)
// AT1PERL<PER2>
extern volatile __bit                   PER2                __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 PER2_bit            _BIT_ACCESS(AT1PERL,2)
// AT1PERL<PER3>
extern volatile __bit                   PER3                __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 PER3_bit            _BIT_ACCESS(AT1PERL,3)
// AT1PERL<PER4>
extern volatile __bit                   PER4                __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 PER4_bit            _BIT_ACCESS(AT1PERL,4)
// AT1PERL<PER5>
extern volatile __bit                   PER5                __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 PER5_bit            _BIT_ACCESS(AT1PERL,5)
// AT1PERL<PER6>
extern volatile __bit                   PER6                __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 PER6_bit            _BIT_ACCESS(AT1PERL,6)
// AT1PERL<PER7>
extern volatile __bit                   PER7                __at(0x4087);	// @ (0x810 * 8 + 7)
#define                                 PER7_bit            _BIT_ACCESS(AT1PERL,7)
// AT1PERH<PER8>
extern volatile __bit                   PER8                __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 PER8_bit            _BIT_ACCESS(AT1PERH,0)
// AT1PERH<PER9>
extern volatile __bit                   PER9                __at(0x4089);	// @ (0x811 * 8 + 1)
#define                                 PER9_bit            _BIT_ACCESS(AT1PERH,1)
// AT1PERH<PERH0>
extern volatile __bit                   PERH0               __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 PERH0_bit           _BIT_ACCESS(AT1PERH,0)
// AT1PERH<PERH1>
extern volatile __bit                   PERH1               __at(0x4089);	// @ (0x811 * 8 + 1)
#define                                 PERH1_bit           _BIT_ACCESS(AT1PERH,1)
// AT1PERH<PERH2>
extern volatile __bit                   PERH2               __at(0x408A);	// @ (0x811 * 8 + 2)
#define                                 PERH2_bit           _BIT_ACCESS(AT1PERH,2)
// AT1PERH<PERH3>
extern volatile __bit                   PERH3               __at(0x408B);	// @ (0x811 * 8 + 3)
#define                                 PERH3_bit           _BIT_ACCESS(AT1PERH,3)
// AT1PERH<PERH4>
extern volatile __bit                   PERH4               __at(0x408C);	// @ (0x811 * 8 + 4)
#define                                 PERH4_bit           _BIT_ACCESS(AT1PERH,4)
// AT1PERH<PERH5>
extern volatile __bit                   PERH5               __at(0x408D);	// @ (0x811 * 8 + 5)
#define                                 PERH5_bit           _BIT_ACCESS(AT1PERH,5)
// AT1PERH<PERH6>
extern volatile __bit                   PERH6               __at(0x408E);	// @ (0x811 * 8 + 6)
#define                                 PERH6_bit           _BIT_ACCESS(AT1PERH,6)
// AT1PERH<PERH7>
extern volatile __bit                   PERH7               __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 PERH7_bit           _BIT_ACCESS(AT1PERH,7)
// AT1PERL<PERL0>
extern volatile __bit                   PERL0               __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PERL0_bit           _BIT_ACCESS(AT1PERL,0)
// AT1PERL<PERL1>
extern volatile __bit                   PERL1               __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PERL1_bit           _BIT_ACCESS(AT1PERL,1)
// AT1PERL<PERL2>
extern volatile __bit                   PERL2               __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 PERL2_bit           _BIT_ACCESS(AT1PERL,2)
// AT1PERL<PERL3>
extern volatile __bit                   PERL3               __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 PERL3_bit           _BIT_ACCESS(AT1PERL,3)
// AT1PERL<PERL4>
extern volatile __bit                   PERL4               __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 PERL4_bit           _BIT_ACCESS(AT1PERL,4)
// AT1PERL<PERL5>
extern volatile __bit                   PERL5               __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 PERL5_bit           _BIT_ACCESS(AT1PERL,5)
// AT1PERL<PERL6>
extern volatile __bit                   PERL6               __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 PERL6_bit           _BIT_ACCESS(AT1PERL,6)
// AT1PERL<PERL7>
extern volatile __bit                   PERL7               __at(0x4087);	// @ (0x810 * 8 + 7)
#define                                 PERL7_bit           _BIT_ACCESS(AT1PERL,7)
// AT1CON1<PHP>
extern volatile __bit                   PHP                 __at(0x40AE);	// @ (0x815 * 8 + 6)
#define                                 PHP_bit             _BIT_ACCESS(AT1CON1,6)
// AT1PHSL<PHS0>
extern volatile __bit                   PHS0                __at(0x4090);	// @ (0x812 * 8 + 0)
#define                                 PHS0_bit            _BIT_ACCESS(AT1PHSL,0)
// AT1PHSL<PHS1>
extern volatile __bit                   PHS1                __at(0x4091);	// @ (0x812 * 8 + 1)
#define                                 PHS1_bit            _BIT_ACCESS(AT1PHSL,1)
// AT1PHSL<PHS2>
extern volatile __bit                   PHS2                __at(0x4092);	// @ (0x812 * 8 + 2)
#define                                 PHS2_bit            _BIT_ACCESS(AT1PHSL,2)
// AT1PHSL<PHS3>
extern volatile __bit                   PHS3                __at(0x4093);	// @ (0x812 * 8 + 3)
#define                                 PHS3_bit            _BIT_ACCESS(AT1PHSL,3)
// AT1PHSL<PHS4>
extern volatile __bit                   PHS4                __at(0x4094);	// @ (0x812 * 8 + 4)
#define                                 PHS4_bit            _BIT_ACCESS(AT1PHSL,4)
// AT1PHSL<PHS5>
extern volatile __bit                   PHS5                __at(0x4095);	// @ (0x812 * 8 + 5)
#define                                 PHS5_bit            _BIT_ACCESS(AT1PHSL,5)
// AT1PHSL<PHS6>
extern volatile __bit                   PHS6                __at(0x4096);	// @ (0x812 * 8 + 6)
#define                                 PHS6_bit            _BIT_ACCESS(AT1PHSL,6)
// AT1PHSL<PHS7>
extern volatile __bit                   PHS7                __at(0x4097);	// @ (0x812 * 8 + 7)
#define                                 PHS7_bit            _BIT_ACCESS(AT1PHSL,7)
// AT1PHSH<PHS8>
extern volatile __bit                   PHS8                __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 PHS8_bit            _BIT_ACCESS(AT1PHSH,0)
// AT1PHSH<PHS9>
extern volatile __bit                   PHS9                __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 PHS9_bit            _BIT_ACCESS(AT1PHSH,1)
// AT1PHSH<PHSL8>
extern volatile __bit                   PHSL8               __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 PHSL8_bit           _BIT_ACCESS(AT1PHSH,0)
// AT1PHSH<PHSL9>
extern volatile __bit                   PHSL9               __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 PHSL9_bit           _BIT_ACCESS(AT1PHSH,1)
// PID1ACCLL<PID1ACC0>
extern volatile __bit                   PID1ACC0            __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 PID1ACC0_bit        _BIT_ACCESS(PID1ACCLL,0)
// PID1ACCLL<PID1ACC1>
extern volatile __bit                   PID1ACC1            __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 PID1ACC1_bit        _BIT_ACCESS(PID1ACCLL,1)
// PID1ACCLH<PID1ACC10>
extern volatile __bit                   PID1ACC10           __at(0x3082);	// @ (0x610 * 8 + 2)
#define                                 PID1ACC10_bit       _BIT_ACCESS(PID1ACCLH,2)
// PID1ACCLH<PID1ACC11>
extern volatile __bit                   PID1ACC11           __at(0x3083);	// @ (0x610 * 8 + 3)
#define                                 PID1ACC11_bit       _BIT_ACCESS(PID1ACCLH,3)
// PID1ACCLH<PID1ACC12>
extern volatile __bit                   PID1ACC12           __at(0x3084);	// @ (0x610 * 8 + 4)
#define                                 PID1ACC12_bit       _BIT_ACCESS(PID1ACCLH,4)
// PID1ACCLH<PID1ACC13>
extern volatile __bit                   PID1ACC13           __at(0x3085);	// @ (0x610 * 8 + 5)
#define                                 PID1ACC13_bit       _BIT_ACCESS(PID1ACCLH,5)
// PID1ACCLH<PID1ACC14>
extern volatile __bit                   PID1ACC14           __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 PID1ACC14_bit       _BIT_ACCESS(PID1ACCLH,6)
// PID1ACCLH<PID1ACC15>
extern volatile __bit                   PID1ACC15           __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 PID1ACC15_bit       _BIT_ACCESS(PID1ACCLH,7)
// PID1ACCHL<PID1ACC16>
extern volatile __bit                   PID1ACC16           __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 PID1ACC16_bit       _BIT_ACCESS(PID1ACCHL,0)
// PID1ACCHL<PID1ACC17>
extern volatile __bit                   PID1ACC17           __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 PID1ACC17_bit       _BIT_ACCESS(PID1ACCHL,1)
// PID1ACCHL<PID1ACC18>
extern volatile __bit                   PID1ACC18           __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 PID1ACC18_bit       _BIT_ACCESS(PID1ACCHL,2)
// PID1ACCHL<PID1ACC19>
extern volatile __bit                   PID1ACC19           __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 PID1ACC19_bit       _BIT_ACCESS(PID1ACCHL,3)
// PID1ACCLL<PID1ACC2>
extern volatile __bit                   PID1ACC2            __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 PID1ACC2_bit        _BIT_ACCESS(PID1ACCLL,2)
// PID1ACCHL<PID1ACC20>
extern volatile __bit                   PID1ACC20           __at(0x308C);	// @ (0x611 * 8 + 4)
#define                                 PID1ACC20_bit       _BIT_ACCESS(PID1ACCHL,4)
// PID1ACCHL<PID1ACC21>
extern volatile __bit                   PID1ACC21           __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 PID1ACC21_bit       _BIT_ACCESS(PID1ACCHL,5)
// PID1ACCHL<PID1ACC22>
extern volatile __bit                   PID1ACC22           __at(0x308E);	// @ (0x611 * 8 + 6)
#define                                 PID1ACC22_bit       _BIT_ACCESS(PID1ACCHL,6)
// PID1ACCHL<PID1ACC23>
extern volatile __bit                   PID1ACC23           __at(0x308F);	// @ (0x611 * 8 + 7)
#define                                 PID1ACC23_bit       _BIT_ACCESS(PID1ACCHL,7)
// PID1ACCHH<PID1ACC24>
extern volatile __bit                   PID1ACC24           __at(0x3090);	// @ (0x612 * 8 + 0)
#define                                 PID1ACC24_bit       _BIT_ACCESS(PID1ACCHH,0)
// PID1ACCHH<PID1ACC25>
extern volatile __bit                   PID1ACC25           __at(0x3091);	// @ (0x612 * 8 + 1)
#define                                 PID1ACC25_bit       _BIT_ACCESS(PID1ACCHH,1)
// PID1ACCHH<PID1ACC26>
extern volatile __bit                   PID1ACC26           __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 PID1ACC26_bit       _BIT_ACCESS(PID1ACCHH,2)
// PID1ACCHH<PID1ACC27>
extern volatile __bit                   PID1ACC27           __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 PID1ACC27_bit       _BIT_ACCESS(PID1ACCHH,3)
// PID1ACCHH<PID1ACC28>
extern volatile __bit                   PID1ACC28           __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 PID1ACC28_bit       _BIT_ACCESS(PID1ACCHH,4)
// PID1ACCHH<PID1ACC29>
extern volatile __bit                   PID1ACC29           __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 PID1ACC29_bit       _BIT_ACCESS(PID1ACCHH,5)
// PID1ACCLL<PID1ACC3>
extern volatile __bit                   PID1ACC3            __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 PID1ACC3_bit        _BIT_ACCESS(PID1ACCLL,3)
// PID1ACCHH<PID1ACC30>
extern volatile __bit                   PID1ACC30           __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 PID1ACC30_bit       _BIT_ACCESS(PID1ACCHH,6)
// PID1ACCHH<PID1ACC31>
extern volatile __bit                   PID1ACC31           __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 PID1ACC31_bit       _BIT_ACCESS(PID1ACCHH,7)
// PID1ACCU<PID1ACC32>
extern volatile __bit                   PID1ACC32           __at(0x3098);	// @ (0x613 * 8 + 0)
#define                                 PID1ACC32_bit       _BIT_ACCESS(PID1ACCU,0)
// PID1ACCU<PID1ACC33>
extern volatile __bit                   PID1ACC33           __at(0x3099);	// @ (0x613 * 8 + 1)
#define                                 PID1ACC33_bit       _BIT_ACCESS(PID1ACCU,1)
// PID1ACCU<PID1ACC34>
extern volatile __bit                   PID1ACC34           __at(0x309A);	// @ (0x613 * 8 + 2)
#define                                 PID1ACC34_bit       _BIT_ACCESS(PID1ACCU,2)
// PID1ACCLL<PID1ACC4>
extern volatile __bit                   PID1ACC4            __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 PID1ACC4_bit        _BIT_ACCESS(PID1ACCLL,4)
// PID1ACCLL<PID1ACC5>
extern volatile __bit                   PID1ACC5            __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 PID1ACC5_bit        _BIT_ACCESS(PID1ACCLL,5)
// PID1ACCLL<PID1ACC6>
extern volatile __bit                   PID1ACC6            __at(0x307E);	// @ (0x60F * 8 + 6)
#define                                 PID1ACC6_bit        _BIT_ACCESS(PID1ACCLL,6)
// PID1ACCLL<PID1ACC7>
extern volatile __bit                   PID1ACC7            __at(0x307F);	// @ (0x60F * 8 + 7)
#define                                 PID1ACC7_bit        _BIT_ACCESS(PID1ACCLL,7)
// PID1ACCLH<PID1ACC8>
extern volatile __bit                   PID1ACC8            __at(0x3080);	// @ (0x610 * 8 + 0)
#define                                 PID1ACC8_bit        _BIT_ACCESS(PID1ACCLH,0)
// PID1ACCLH<PID1ACC9>
extern volatile __bit                   PID1ACC9            __at(0x3081);	// @ (0x610 * 8 + 1)
#define                                 PID1ACC9_bit        _BIT_ACCESS(PID1ACCLH,1)
// PID1CON<PID1BUSY>
extern volatile __bit                   PID1BUSY            __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 PID1BUSY_bit        _BIT_ACCESS(PID1CON,6)
// PIE5<PID1DIE>
extern volatile __bit                   PID1DIE             __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 PID1DIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<PID1DIF>
extern volatile __bit                   PID1DIF             __at(0xA0);	// @ (0x14 * 8 + 0)
#define                                 PID1DIF_bit         _BIT_ACCESS(PIR5,0)
// PIE5<PID1EIE>
extern volatile __bit                   PID1EIE             __at(0x4A1);	// @ (0x94 * 8 + 1)
#define                                 PID1EIE_bit         _BIT_ACCESS(PIE5,1)
// PIR5<PID1EIF>
extern volatile __bit                   PID1EIF             __at(0xA1);	// @ (0x14 * 8 + 1)
#define                                 PID1EIF_bit         _BIT_ACCESS(PIR5,1)
// PID1CON<PID1EN>
extern volatile __bit                   PID1EN              __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 PID1EN_bit          _BIT_ACCESS(PID1CON,7)
// PID1INL<PID1IN0>
extern volatile __bit                   PID1IN0             __at(0x2C70);	// @ (0x58E * 8 + 0)
#define                                 PID1IN0_bit         _BIT_ACCESS(PID1INL,0)
// PID1INL<PID1IN1>
extern volatile __bit                   PID1IN1             __at(0x2C71);	// @ (0x58E * 8 + 1)
#define                                 PID1IN1_bit         _BIT_ACCESS(PID1INL,1)
// PID1INH<PID1IN10>
extern volatile __bit                   PID1IN10            __at(0x2C7A);	// @ (0x58F * 8 + 2)
#define                                 PID1IN10_bit        _BIT_ACCESS(PID1INH,2)
// PID1INH<PID1IN11>
extern volatile __bit                   PID1IN11            __at(0x2C7B);	// @ (0x58F * 8 + 3)
#define                                 PID1IN11_bit        _BIT_ACCESS(PID1INH,3)
// PID1INH<PID1IN12>
extern volatile __bit                   PID1IN12            __at(0x2C7C);	// @ (0x58F * 8 + 4)
#define                                 PID1IN12_bit        _BIT_ACCESS(PID1INH,4)
// PID1INH<PID1IN13>
extern volatile __bit                   PID1IN13            __at(0x2C7D);	// @ (0x58F * 8 + 5)
#define                                 PID1IN13_bit        _BIT_ACCESS(PID1INH,5)
// PID1INH<PID1IN14>
extern volatile __bit                   PID1IN14            __at(0x2C7E);	// @ (0x58F * 8 + 6)
#define                                 PID1IN14_bit        _BIT_ACCESS(PID1INH,6)
// PID1INH<PID1IN15>
extern volatile __bit                   PID1IN15            __at(0x2C7F);	// @ (0x58F * 8 + 7)
#define                                 PID1IN15_bit        _BIT_ACCESS(PID1INH,7)
// PID1INL<PID1IN2>
extern volatile __bit                   PID1IN2             __at(0x2C72);	// @ (0x58E * 8 + 2)
#define                                 PID1IN2_bit         _BIT_ACCESS(PID1INL,2)
// PID1INL<PID1IN3>
extern volatile __bit                   PID1IN3             __at(0x2C73);	// @ (0x58E * 8 + 3)
#define                                 PID1IN3_bit         _BIT_ACCESS(PID1INL,3)
// PID1INL<PID1IN4>
extern volatile __bit                   PID1IN4             __at(0x2C74);	// @ (0x58E * 8 + 4)
#define                                 PID1IN4_bit         _BIT_ACCESS(PID1INL,4)
// PID1INL<PID1IN5>
extern volatile __bit                   PID1IN5             __at(0x2C75);	// @ (0x58E * 8 + 5)
#define                                 PID1IN5_bit         _BIT_ACCESS(PID1INL,5)
// PID1INL<PID1IN6>
extern volatile __bit                   PID1IN6             __at(0x2C76);	// @ (0x58E * 8 + 6)
#define                                 PID1IN6_bit         _BIT_ACCESS(PID1INL,6)
// PID1INL<PID1IN7>
extern volatile __bit                   PID1IN7             __at(0x2C77);	// @ (0x58E * 8 + 7)
#define                                 PID1IN7_bit         _BIT_ACCESS(PID1INL,7)
// PID1INH<PID1IN8>
extern volatile __bit                   PID1IN8             __at(0x2C78);	// @ (0x58F * 8 + 0)
#define                                 PID1IN8_bit         _BIT_ACCESS(PID1INH,0)
// PID1INH<PID1IN9>
extern volatile __bit                   PID1IN9             __at(0x2C79);	// @ (0x58F * 8 + 1)
#define                                 PID1IN9_bit         _BIT_ACCESS(PID1INH,1)
// PID1K1L<PID1K10>
extern volatile __bit                   PID1K10             __at(0x2C80);	// @ (0x590 * 8 + 0)
#define                                 PID1K10_bit         _BIT_ACCESS(PID1K1L,0)
// PID1K1L<PID1K11>
extern volatile __bit                   PID1K11             __at(0x2C81);	// @ (0x590 * 8 + 1)
#define                                 PID1K11_bit         _BIT_ACCESS(PID1K1L,1)
// PID1K1H<PID1K110>
extern volatile __bit                   PID1K110            __at(0x2C8A);	// @ (0x591 * 8 + 2)
#define                                 PID1K110_bit        _BIT_ACCESS(PID1K1H,2)
// PID1K1H<PID1K111>
extern volatile __bit                   PID1K111            __at(0x2C8B);	// @ (0x591 * 8 + 3)
#define                                 PID1K111_bit        _BIT_ACCESS(PID1K1H,3)
// PID1K1H<PID1K112>
extern volatile __bit                   PID1K112            __at(0x2C8C);	// @ (0x591 * 8 + 4)
#define                                 PID1K112_bit        _BIT_ACCESS(PID1K1H,4)
// PID1K1H<PID1K113>
extern volatile __bit                   PID1K113            __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 PID1K113_bit        _BIT_ACCESS(PID1K1H,5)
// PID1K1H<PID1K114>
extern volatile __bit                   PID1K114            __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 PID1K114_bit        _BIT_ACCESS(PID1K1H,6)
// PID1K1H<PID1K115>
extern volatile __bit                   PID1K115            __at(0x2C8F);	// @ (0x591 * 8 + 7)
#define                                 PID1K115_bit        _BIT_ACCESS(PID1K1H,7)
// PID1K1L<PID1K12>
extern volatile __bit                   PID1K12             __at(0x2C82);	// @ (0x590 * 8 + 2)
#define                                 PID1K12_bit         _BIT_ACCESS(PID1K1L,2)
// PID1K1L<PID1K13>
extern volatile __bit                   PID1K13             __at(0x2C83);	// @ (0x590 * 8 + 3)
#define                                 PID1K13_bit         _BIT_ACCESS(PID1K1L,3)
// PID1K1L<PID1K14>
extern volatile __bit                   PID1K14             __at(0x2C84);	// @ (0x590 * 8 + 4)
#define                                 PID1K14_bit         _BIT_ACCESS(PID1K1L,4)
// PID1K1L<PID1K15>
extern volatile __bit                   PID1K15             __at(0x2C85);	// @ (0x590 * 8 + 5)
#define                                 PID1K15_bit         _BIT_ACCESS(PID1K1L,5)
// PID1K1L<PID1K16>
extern volatile __bit                   PID1K16             __at(0x2C86);	// @ (0x590 * 8 + 6)
#define                                 PID1K16_bit         _BIT_ACCESS(PID1K1L,6)
// PID1K1L<PID1K17>
extern volatile __bit                   PID1K17             __at(0x2C87);	// @ (0x590 * 8 + 7)
#define                                 PID1K17_bit         _BIT_ACCESS(PID1K1L,7)
// PID1K1H<PID1K18>
extern volatile __bit                   PID1K18             __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 PID1K18_bit         _BIT_ACCESS(PID1K1H,0)
// PID1K1H<PID1K19>
extern volatile __bit                   PID1K19             __at(0x2C89);	// @ (0x591 * 8 + 1)
#define                                 PID1K19_bit         _BIT_ACCESS(PID1K1H,1)
// PID1K2L<PID1K20>
extern volatile __bit                   PID1K20             __at(0x2C90);	// @ (0x592 * 8 + 0)
#define                                 PID1K20_bit         _BIT_ACCESS(PID1K2L,0)
// PID1K2L<PID1K21>
extern volatile __bit                   PID1K21             __at(0x2C91);	// @ (0x592 * 8 + 1)
#define                                 PID1K21_bit         _BIT_ACCESS(PID1K2L,1)
// PID1K2H<PID1K210>
extern volatile __bit                   PID1K210            __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 PID1K210_bit        _BIT_ACCESS(PID1K2H,2)
// PID1K2H<PID1K211>
extern volatile __bit                   PID1K211            __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 PID1K211_bit        _BIT_ACCESS(PID1K2H,3)
// PID1K2H<PID1K212>
extern volatile __bit                   PID1K212            __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 PID1K212_bit        _BIT_ACCESS(PID1K2H,4)
// PID1K2H<PID1K213>
extern volatile __bit                   PID1K213            __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 PID1K213_bit        _BIT_ACCESS(PID1K2H,5)
// PID1K2H<PID1K214>
extern volatile __bit                   PID1K214            __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 PID1K214_bit        _BIT_ACCESS(PID1K2H,6)
// PID1K2H<PID1K215>
extern volatile __bit                   PID1K215            __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 PID1K215_bit        _BIT_ACCESS(PID1K2H,7)
// PID1K2L<PID1K22>
extern volatile __bit                   PID1K22             __at(0x2C92);	// @ (0x592 * 8 + 2)
#define                                 PID1K22_bit         _BIT_ACCESS(PID1K2L,2)
// PID1K2L<PID1K23>
extern volatile __bit                   PID1K23             __at(0x2C93);	// @ (0x592 * 8 + 3)
#define                                 PID1K23_bit         _BIT_ACCESS(PID1K2L,3)
// PID1K2L<PID1K24>
extern volatile __bit                   PID1K24             __at(0x2C94);	// @ (0x592 * 8 + 4)
#define                                 PID1K24_bit         _BIT_ACCESS(PID1K2L,4)
// PID1K2L<PID1K25>
extern volatile __bit                   PID1K25             __at(0x2C95);	// @ (0x592 * 8 + 5)
#define                                 PID1K25_bit         _BIT_ACCESS(PID1K2L,5)
// PID1K2L<PID1K26>
extern volatile __bit                   PID1K26             __at(0x2C96);	// @ (0x592 * 8 + 6)
#define                                 PID1K26_bit         _BIT_ACCESS(PID1K2L,6)
// PID1K2L<PID1K27>
extern volatile __bit                   PID1K27             __at(0x2C97);	// @ (0x592 * 8 + 7)
#define                                 PID1K27_bit         _BIT_ACCESS(PID1K2L,7)
// PID1K2H<PID1K28>
extern volatile __bit                   PID1K28             __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 PID1K28_bit         _BIT_ACCESS(PID1K2H,0)
// PID1K2H<PID1K29>
extern volatile __bit                   PID1K29             __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 PID1K29_bit         _BIT_ACCESS(PID1K2H,1)
// PID1K3L<PID1K30>
extern volatile __bit                   PID1K30             __at(0x2CA0);	// @ (0x594 * 8 + 0)
#define                                 PID1K30_bit         _BIT_ACCESS(PID1K3L,0)
// PID1K3L<PID1K31>
extern volatile __bit                   PID1K31             __at(0x2CA1);	// @ (0x594 * 8 + 1)
#define                                 PID1K31_bit         _BIT_ACCESS(PID1K3L,1)
// PID1K3H<PID1K310>
extern volatile __bit                   PID1K310            __at(0x2CAA);	// @ (0x595 * 8 + 2)
#define                                 PID1K310_bit        _BIT_ACCESS(PID1K3H,2)
// PID1K3H<PID1K311>
extern volatile __bit                   PID1K311            __at(0x2CAB);	// @ (0x595 * 8 + 3)
#define                                 PID1K311_bit        _BIT_ACCESS(PID1K3H,3)
// PID1K3H<PID1K312>
extern volatile __bit                   PID1K312            __at(0x2CAC);	// @ (0x595 * 8 + 4)
#define                                 PID1K312_bit        _BIT_ACCESS(PID1K3H,4)
// PID1K3H<PID1K313>
extern volatile __bit                   PID1K313            __at(0x2CAD);	// @ (0x595 * 8 + 5)
#define                                 PID1K313_bit        _BIT_ACCESS(PID1K3H,5)
// PID1K3H<PID1K314>
extern volatile __bit                   PID1K314            __at(0x2CAE);	// @ (0x595 * 8 + 6)
#define                                 PID1K314_bit        _BIT_ACCESS(PID1K3H,6)
// PID1K3H<PID1K315>
extern volatile __bit                   PID1K315            __at(0x2CAF);	// @ (0x595 * 8 + 7)
#define                                 PID1K315_bit        _BIT_ACCESS(PID1K3H,7)
// PID1K3L<PID1K32>
extern volatile __bit                   PID1K32             __at(0x2CA2);	// @ (0x594 * 8 + 2)
#define                                 PID1K32_bit         _BIT_ACCESS(PID1K3L,2)
// PID1K3L<PID1K33>
extern volatile __bit                   PID1K33             __at(0x2CA3);	// @ (0x594 * 8 + 3)
#define                                 PID1K33_bit         _BIT_ACCESS(PID1K3L,3)
// PID1K3L<PID1K34>
extern volatile __bit                   PID1K34             __at(0x2CA4);	// @ (0x594 * 8 + 4)
#define                                 PID1K34_bit         _BIT_ACCESS(PID1K3L,4)
// PID1K3L<PID1K35>
extern volatile __bit                   PID1K35             __at(0x2CA5);	// @ (0x594 * 8 + 5)
#define                                 PID1K35_bit         _BIT_ACCESS(PID1K3L,5)
// PID1K3L<PID1K36>
extern volatile __bit                   PID1K36             __at(0x2CA6);	// @ (0x594 * 8 + 6)
#define                                 PID1K36_bit         _BIT_ACCESS(PID1K3L,6)
// PID1K3L<PID1K37>
extern volatile __bit                   PID1K37             __at(0x2CA7);	// @ (0x594 * 8 + 7)
#define                                 PID1K37_bit         _BIT_ACCESS(PID1K3L,7)
// PID1K3H<PID1K38>
extern volatile __bit                   PID1K38             __at(0x2CA8);	// @ (0x595 * 8 + 0)
#define                                 PID1K38_bit         _BIT_ACCESS(PID1K3H,0)
// PID1K3H<PID1K39>
extern volatile __bit                   PID1K39             __at(0x2CA9);	// @ (0x595 * 8 + 1)
#define                                 PID1K39_bit         _BIT_ACCESS(PID1K3H,1)
// PID1CON<PID1MODE0>
extern volatile __bit                   PID1MODE0           __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 PID1MODE0_bit       _BIT_ACCESS(PID1CON,0)
// PID1CON<PID1MODE1>
extern volatile __bit                   PID1MODE1           __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 PID1MODE1_bit       _BIT_ACCESS(PID1CON,1)
// PID1CON<PID1MODE2>
extern volatile __bit                   PID1MODE2           __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 PID1MODE2_bit       _BIT_ACCESS(PID1CON,2)
// PID1OUTLL<PID1OUT0>
extern volatile __bit                   PID1OUT0            __at(0x2CB0);	// @ (0x596 * 8 + 0)
#define                                 PID1OUT0_bit        _BIT_ACCESS(PID1OUTLL,0)
// PID1OUTLL<PID1OUT1>
extern volatile __bit                   PID1OUT1            __at(0x2CB1);	// @ (0x596 * 8 + 1)
#define                                 PID1OUT1_bit        _BIT_ACCESS(PID1OUTLL,1)
// PID1OUTLH<PID1OUT10>
extern volatile __bit                   PID1OUT10           __at(0x2CBA);	// @ (0x597 * 8 + 2)
#define                                 PID1OUT10_bit       _BIT_ACCESS(PID1OUTLH,2)
// PID1OUTLH<PID1OUT11>
extern volatile __bit                   PID1OUT11           __at(0x2CBB);	// @ (0x597 * 8 + 3)
#define                                 PID1OUT11_bit       _BIT_ACCESS(PID1OUTLH,3)
// PID1OUTLH<PID1OUT12>
extern volatile __bit                   PID1OUT12           __at(0x2CBC);	// @ (0x597 * 8 + 4)
#define                                 PID1OUT12_bit       _BIT_ACCESS(PID1OUTLH,4)
// PID1OUTLH<PID1OUT13>
extern volatile __bit                   PID1OUT13           __at(0x2CBD);	// @ (0x597 * 8 + 5)
#define                                 PID1OUT13_bit       _BIT_ACCESS(PID1OUTLH,5)
// PID1OUTLH<PID1OUT14>
extern volatile __bit                   PID1OUT14           __at(0x2CBE);	// @ (0x597 * 8 + 6)
#define                                 PID1OUT14_bit       _BIT_ACCESS(PID1OUTLH,6)
// PID1OUTLH<PID1OUT15>
extern volatile __bit                   PID1OUT15           __at(0x2CBF);	// @ (0x597 * 8 + 7)
#define                                 PID1OUT15_bit       _BIT_ACCESS(PID1OUTLH,7)
// PID1OUTHL<PID1OUT16>
extern volatile __bit                   PID1OUT16           __at(0x2CC0);	// @ (0x598 * 8 + 0)
#define                                 PID1OUT16_bit       _BIT_ACCESS(PID1OUTHL,0)
// PID1OUTHL<PID1OUT17>
extern volatile __bit                   PID1OUT17           __at(0x2CC1);	// @ (0x598 * 8 + 1)
#define                                 PID1OUT17_bit       _BIT_ACCESS(PID1OUTHL,1)
// PID1OUTHL<PID1OUT18>
extern volatile __bit                   PID1OUT18           __at(0x2CC2);	// @ (0x598 * 8 + 2)
#define                                 PID1OUT18_bit       _BIT_ACCESS(PID1OUTHL,2)
// PID1OUTHL<PID1OUT19>
extern volatile __bit                   PID1OUT19           __at(0x2CC3);	// @ (0x598 * 8 + 3)
#define                                 PID1OUT19_bit       _BIT_ACCESS(PID1OUTHL,3)
// PID1OUTLL<PID1OUT2>
extern volatile __bit                   PID1OUT2            __at(0x2CB2);	// @ (0x596 * 8 + 2)
#define                                 PID1OUT2_bit        _BIT_ACCESS(PID1OUTLL,2)
// PID1OUTHL<PID1OUT20>
extern volatile __bit                   PID1OUT20           __at(0x2CC4);	// @ (0x598 * 8 + 4)
#define                                 PID1OUT20_bit       _BIT_ACCESS(PID1OUTHL,4)
// PID1OUTHL<PID1OUT21>
extern volatile __bit                   PID1OUT21           __at(0x2CC5);	// @ (0x598 * 8 + 5)
#define                                 PID1OUT21_bit       _BIT_ACCESS(PID1OUTHL,5)
// PID1OUTHL<PID1OUT22>
extern volatile __bit                   PID1OUT22           __at(0x2CC6);	// @ (0x598 * 8 + 6)
#define                                 PID1OUT22_bit       _BIT_ACCESS(PID1OUTHL,6)
// PID1OUTHL<PID1OUT23>
extern volatile __bit                   PID1OUT23           __at(0x2CC7);	// @ (0x598 * 8 + 7)
#define                                 PID1OUT23_bit       _BIT_ACCESS(PID1OUTHL,7)
// PID1OUTHH<PID1OUT24>
extern volatile __bit                   PID1OUT24           __at(0x2CC8);	// @ (0x599 * 8 + 0)
#define                                 PID1OUT24_bit       _BIT_ACCESS(PID1OUTHH,0)
// PID1OUTHH<PID1OUT25>
extern volatile __bit                   PID1OUT25           __at(0x2CC9);	// @ (0x599 * 8 + 1)
#define                                 PID1OUT25_bit       _BIT_ACCESS(PID1OUTHH,1)
// PID1OUTHH<PID1OUT26>
extern volatile __bit                   PID1OUT26           __at(0x2CCA);	// @ (0x599 * 8 + 2)
#define                                 PID1OUT26_bit       _BIT_ACCESS(PID1OUTHH,2)
// PID1OUTHH<PID1OUT27>
extern volatile __bit                   PID1OUT27           __at(0x2CCB);	// @ (0x599 * 8 + 3)
#define                                 PID1OUT27_bit       _BIT_ACCESS(PID1OUTHH,3)
// PID1OUTHH<PID1OUT28>
extern volatile __bit                   PID1OUT28           __at(0x2CCC);	// @ (0x599 * 8 + 4)
#define                                 PID1OUT28_bit       _BIT_ACCESS(PID1OUTHH,4)
// PID1OUTHH<PID1OUT29>
extern volatile __bit                   PID1OUT29           __at(0x2CCD);	// @ (0x599 * 8 + 5)
#define                                 PID1OUT29_bit       _BIT_ACCESS(PID1OUTHH,5)
// PID1OUTLL<PID1OUT3>
extern volatile __bit                   PID1OUT3            __at(0x2CB3);	// @ (0x596 * 8 + 3)
#define                                 PID1OUT3_bit        _BIT_ACCESS(PID1OUTLL,3)
// PID1OUTHH<PID1OUT30>
extern volatile __bit                   PID1OUT30           __at(0x2CCE);	// @ (0x599 * 8 + 6)
#define                                 PID1OUT30_bit       _BIT_ACCESS(PID1OUTHH,6)
// PID1OUTHH<PID1OUT31>
extern volatile __bit                   PID1OUT31           __at(0x2CCF);	// @ (0x599 * 8 + 7)
#define                                 PID1OUT31_bit       _BIT_ACCESS(PID1OUTHH,7)
// PID1OUTU<PID1OUT32>
extern volatile __bit                   PID1OUT32           __at(0x2CD0);	// @ (0x59A * 8 + 0)
#define                                 PID1OUT32_bit       _BIT_ACCESS(PID1OUTU,0)
// PID1OUTU<PID1OUT33>
extern volatile __bit                   PID1OUT33           __at(0x2CD1);	// @ (0x59A * 8 + 1)
#define                                 PID1OUT33_bit       _BIT_ACCESS(PID1OUTU,1)
// PID1OUTU<PID1OUT34>
extern volatile __bit                   PID1OUT34           __at(0x2CD2);	// @ (0x59A * 8 + 2)
#define                                 PID1OUT34_bit       _BIT_ACCESS(PID1OUTU,2)
// PID1OUTU<PID1OUT35>
extern volatile __bit                   PID1OUT35           __at(0x2CD3);	// @ (0x59A * 8 + 3)
#define                                 PID1OUT35_bit       _BIT_ACCESS(PID1OUTU,3)
// PID1OUTLL<PID1OUT4>
extern volatile __bit                   PID1OUT4            __at(0x2CB4);	// @ (0x596 * 8 + 4)
#define                                 PID1OUT4_bit        _BIT_ACCESS(PID1OUTLL,4)
// PID1OUTLL<PID1OUT5>
extern volatile __bit                   PID1OUT5            __at(0x2CB5);	// @ (0x596 * 8 + 5)
#define                                 PID1OUT5_bit        _BIT_ACCESS(PID1OUTLL,5)
// PID1OUTLL<PID1OUT6>
extern volatile __bit                   PID1OUT6            __at(0x2CB6);	// @ (0x596 * 8 + 6)
#define                                 PID1OUT6_bit        _BIT_ACCESS(PID1OUTLL,6)
// PID1OUTLL<PID1OUT7>
extern volatile __bit                   PID1OUT7            __at(0x2CB7);	// @ (0x596 * 8 + 7)
#define                                 PID1OUT7_bit        _BIT_ACCESS(PID1OUTLL,7)
// PID1OUTLH<PID1OUT8>
extern volatile __bit                   PID1OUT8            __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 PID1OUT8_bit        _BIT_ACCESS(PID1OUTLH,0)
// PID1OUTLH<PID1OUT9>
extern volatile __bit                   PID1OUT9            __at(0x2CB9);	// @ (0x597 * 8 + 1)
#define                                 PID1OUT9_bit        _BIT_ACCESS(PID1OUTLH,1)
// PID1SETL<PID1SET0>
extern volatile __bit                   PID1SET0            __at(0x2C60);	// @ (0x58C * 8 + 0)
#define                                 PID1SET0_bit        _BIT_ACCESS(PID1SETL,0)
// PID1SETL<PID1SET1>
extern volatile __bit                   PID1SET1            __at(0x2C61);	// @ (0x58C * 8 + 1)
#define                                 PID1SET1_bit        _BIT_ACCESS(PID1SETL,1)
// PID1SETH<PID1SET10>
extern volatile __bit                   PID1SET10           __at(0x2C6A);	// @ (0x58D * 8 + 2)
#define                                 PID1SET10_bit       _BIT_ACCESS(PID1SETH,2)
// PID1SETH<PID1SET11>
extern volatile __bit                   PID1SET11           __at(0x2C6B);	// @ (0x58D * 8 + 3)
#define                                 PID1SET11_bit       _BIT_ACCESS(PID1SETH,3)
// PID1SETH<PID1SET12>
extern volatile __bit                   PID1SET12           __at(0x2C6C);	// @ (0x58D * 8 + 4)
#define                                 PID1SET12_bit       _BIT_ACCESS(PID1SETH,4)
// PID1SETH<PID1SET13>
extern volatile __bit                   PID1SET13           __at(0x2C6D);	// @ (0x58D * 8 + 5)
#define                                 PID1SET13_bit       _BIT_ACCESS(PID1SETH,5)
// PID1SETH<PID1SET14>
extern volatile __bit                   PID1SET14           __at(0x2C6E);	// @ (0x58D * 8 + 6)
#define                                 PID1SET14_bit       _BIT_ACCESS(PID1SETH,6)
// PID1SETH<PID1SET15>
extern volatile __bit                   PID1SET15           __at(0x2C6F);	// @ (0x58D * 8 + 7)
#define                                 PID1SET15_bit       _BIT_ACCESS(PID1SETH,7)
// PID1SETL<PID1SET2>
extern volatile __bit                   PID1SET2            __at(0x2C62);	// @ (0x58C * 8 + 2)
#define                                 PID1SET2_bit        _BIT_ACCESS(PID1SETL,2)
// PID1SETL<PID1SET3>
extern volatile __bit                   PID1SET3            __at(0x2C63);	// @ (0x58C * 8 + 3)
#define                                 PID1SET3_bit        _BIT_ACCESS(PID1SETL,3)
// PID1SETL<PID1SET4>
extern volatile __bit                   PID1SET4            __at(0x2C64);	// @ (0x58C * 8 + 4)
#define                                 PID1SET4_bit        _BIT_ACCESS(PID1SETL,4)
// PID1SETL<PID1SET5>
extern volatile __bit                   PID1SET5            __at(0x2C65);	// @ (0x58C * 8 + 5)
#define                                 PID1SET5_bit        _BIT_ACCESS(PID1SETL,5)
// PID1SETL<PID1SET6>
extern volatile __bit                   PID1SET6            __at(0x2C66);	// @ (0x58C * 8 + 6)
#define                                 PID1SET6_bit        _BIT_ACCESS(PID1SETL,6)
// PID1SETL<PID1SET7>
extern volatile __bit                   PID1SET7            __at(0x2C67);	// @ (0x58C * 8 + 7)
#define                                 PID1SET7_bit        _BIT_ACCESS(PID1SETL,7)
// PID1SETH<PID1SET8>
extern volatile __bit                   PID1SET8            __at(0x2C68);	// @ (0x58D * 8 + 0)
#define                                 PID1SET8_bit        _BIT_ACCESS(PID1SETH,0)
// PID1SETH<PID1SET9>
extern volatile __bit                   PID1SET9            __at(0x2C69);	// @ (0x58D * 8 + 1)
#define                                 PID1SET9_bit        _BIT_ACCESS(PID1SETH,1)
// PID1Z1L<PID1Z10>
extern volatile __bit                   PID1Z10             __at(0x2CD8);	// @ (0x59B * 8 + 0)
#define                                 PID1Z10_bit         _BIT_ACCESS(PID1Z1L,0)
// PID1Z1L<PID1Z11>
extern volatile __bit                   PID1Z11             __at(0x2CD9);	// @ (0x59B * 8 + 1)
#define                                 PID1Z11_bit         _BIT_ACCESS(PID1Z1L,1)
// PID1Z1H<PID1Z110>
extern volatile __bit                   PID1Z110            __at(0x2CE2);	// @ (0x59C * 8 + 2)
#define                                 PID1Z110_bit        _BIT_ACCESS(PID1Z1H,2)
// PID1Z1H<PID1Z111>
extern volatile __bit                   PID1Z111            __at(0x2CE3);	// @ (0x59C * 8 + 3)
#define                                 PID1Z111_bit        _BIT_ACCESS(PID1Z1H,3)
// PID1Z1H<PID1Z112>
extern volatile __bit                   PID1Z112            __at(0x2CE4);	// @ (0x59C * 8 + 4)
#define                                 PID1Z112_bit        _BIT_ACCESS(PID1Z1H,4)
// PID1Z1H<PID1Z113>
extern volatile __bit                   PID1Z113            __at(0x2CE5);	// @ (0x59C * 8 + 5)
#define                                 PID1Z113_bit        _BIT_ACCESS(PID1Z1H,5)
// PID1Z1H<PID1Z114>
extern volatile __bit                   PID1Z114            __at(0x2CE6);	// @ (0x59C * 8 + 6)
#define                                 PID1Z114_bit        _BIT_ACCESS(PID1Z1H,6)
// PID1Z1H<PID1Z115>
extern volatile __bit                   PID1Z115            __at(0x2CE7);	// @ (0x59C * 8 + 7)
#define                                 PID1Z115_bit        _BIT_ACCESS(PID1Z1H,7)
// PID1Z1U<PID1Z116>
extern volatile __bit                   PID1Z116            __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 PID1Z116_bit        _BIT_ACCESS(PID1Z1U,0)
// PID1Z1L<PID1Z12>
extern volatile __bit                   PID1Z12             __at(0x2CDA);	// @ (0x59B * 8 + 2)
#define                                 PID1Z12_bit         _BIT_ACCESS(PID1Z1L,2)
// PID1Z1L<PID1Z13>
extern volatile __bit                   PID1Z13             __at(0x2CDB);	// @ (0x59B * 8 + 3)
#define                                 PID1Z13_bit         _BIT_ACCESS(PID1Z1L,3)
// PID1Z1L<PID1Z14>
extern volatile __bit                   PID1Z14             __at(0x2CDC);	// @ (0x59B * 8 + 4)
#define                                 PID1Z14_bit         _BIT_ACCESS(PID1Z1L,4)
// PID1Z1L<PID1Z15>
extern volatile __bit                   PID1Z15             __at(0x2CDD);	// @ (0x59B * 8 + 5)
#define                                 PID1Z15_bit         _BIT_ACCESS(PID1Z1L,5)
// PID1Z1L<PID1Z16>
extern volatile __bit                   PID1Z16             __at(0x2CDE);	// @ (0x59B * 8 + 6)
#define                                 PID1Z16_bit         _BIT_ACCESS(PID1Z1L,6)
// PID1Z1L<PID1Z17>
extern volatile __bit                   PID1Z17             __at(0x2CDF);	// @ (0x59B * 8 + 7)
#define                                 PID1Z17_bit         _BIT_ACCESS(PID1Z1L,7)
// PID1Z1H<PID1Z18>
extern volatile __bit                   PID1Z18             __at(0x2CE0);	// @ (0x59C * 8 + 0)
#define                                 PID1Z18_bit         _BIT_ACCESS(PID1Z1H,0)
// PID1Z1H<PID1Z19>
extern volatile __bit                   PID1Z19             __at(0x2CE1);	// @ (0x59C * 8 + 1)
#define                                 PID1Z19_bit         _BIT_ACCESS(PID1Z1H,1)
// PID1Z2L<PID1Z20>
extern volatile __bit                   PID1Z20             __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 PID1Z20_bit         _BIT_ACCESS(PID1Z2L,0)
// PID1Z2L<PID1Z21>
extern volatile __bit                   PID1Z21             __at(0x3061);	// @ (0x60C * 8 + 1)
#define                                 PID1Z21_bit         _BIT_ACCESS(PID1Z2L,1)
// PID1Z2H<PID1Z210>
extern volatile __bit                   PID1Z210            __at(0x306A);	// @ (0x60D * 8 + 2)
#define                                 PID1Z210_bit        _BIT_ACCESS(PID1Z2H,2)
// PID1Z2H<PID1Z211>
extern volatile __bit                   PID1Z211            __at(0x306B);	// @ (0x60D * 8 + 3)
#define                                 PID1Z211_bit        _BIT_ACCESS(PID1Z2H,3)
// PID1Z2H<PID1Z212>
extern volatile __bit                   PID1Z212            __at(0x306C);	// @ (0x60D * 8 + 4)
#define                                 PID1Z212_bit        _BIT_ACCESS(PID1Z2H,4)
// PID1Z2H<PID1Z213>
extern volatile __bit                   PID1Z213            __at(0x306D);	// @ (0x60D * 8 + 5)
#define                                 PID1Z213_bit        _BIT_ACCESS(PID1Z2H,5)
// PID1Z2H<PID1Z214>
extern volatile __bit                   PID1Z214            __at(0x306E);	// @ (0x60D * 8 + 6)
#define                                 PID1Z214_bit        _BIT_ACCESS(PID1Z2H,6)
// PID1Z2H<PID1Z215>
extern volatile __bit                   PID1Z215            __at(0x306F);	// @ (0x60D * 8 + 7)
#define                                 PID1Z215_bit        _BIT_ACCESS(PID1Z2H,7)
// PID1Z2U<PID1Z216>
extern volatile __bit                   PID1Z216            __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 PID1Z216_bit        _BIT_ACCESS(PID1Z2U,0)
// PID1Z2L<PID1Z22>
extern volatile __bit                   PID1Z22             __at(0x3062);	// @ (0x60C * 8 + 2)
#define                                 PID1Z22_bit         _BIT_ACCESS(PID1Z2L,2)
// PID1Z2L<PID1Z23>
extern volatile __bit                   PID1Z23             __at(0x3063);	// @ (0x60C * 8 + 3)
#define                                 PID1Z23_bit         _BIT_ACCESS(PID1Z2L,3)
// PID1Z2L<PID1Z24>
extern volatile __bit                   PID1Z24             __at(0x3064);	// @ (0x60C * 8 + 4)
#define                                 PID1Z24_bit         _BIT_ACCESS(PID1Z2L,4)
// PID1Z2L<PID1Z25>
extern volatile __bit                   PID1Z25             __at(0x3065);	// @ (0x60C * 8 + 5)
#define                                 PID1Z25_bit         _BIT_ACCESS(PID1Z2L,5)
// PID1Z2L<PID1Z26>
extern volatile __bit                   PID1Z26             __at(0x3066);	// @ (0x60C * 8 + 6)
#define                                 PID1Z26_bit         _BIT_ACCESS(PID1Z2L,6)
// PID1Z2L<PID1Z27>
extern volatile __bit                   PID1Z27             __at(0x3067);	// @ (0x60C * 8 + 7)
#define                                 PID1Z27_bit         _BIT_ACCESS(PID1Z2L,7)
// PID1Z2H<PID1Z28>
extern volatile __bit                   PID1Z28             __at(0x3068);	// @ (0x60D * 8 + 0)
#define                                 PID1Z28_bit         _BIT_ACCESS(PID1Z2H,0)
// PID1Z2H<PID1Z29>
extern volatile __bit                   PID1Z29             __at(0x3069);	// @ (0x60D * 8 + 1)
#define                                 PID1Z29_bit         _BIT_ACCESS(PID1Z2H,1)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x3CD1);	// @ (0x79A * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x3CD2);	// @ (0x79A * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x3CD3);	// @ (0x79A * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x4D6);	// @ (0x9A * 8 + 6)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,6)
// CWG1CON1<POLA>
extern volatile __bit                   POLA                __at(0x34B8);	// @ (0x697 * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<POLB>
extern volatile __bit                   POLB                __at(0x34B9);	// @ (0x697 * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<POLC>
extern volatile __bit                   POLC                __at(0x34BA);	// @ (0x697 * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<POLD>
extern volatile __bit                   POLD                __at(0x34BB);	// @ (0x697 * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(CWG1CON1,3)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x7078);	// @ (0xE0F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// AT1CON0<PREC>
extern volatile __bit                   PREC                __at(0x40A6);	// @ (0x814 * 8 + 6)
#define                                 PREC_bit            _BIT_ACCESS(AT1CON0,6)
// AT1CON1<PRP>
extern volatile __bit                   PRP                 __at(0x40AC);	// @ (0x815 * 8 + 4)
#define                                 PRP_bit             _BIT_ACCESS(AT1CON1,4)
// OPTION_REG<PS2>
extern volatile __bit                   PS2                 __at(0x4AA);	// @ (0x95 * 8 + 2)
#define                                 PS2_bit             _BIT_ACCESS(OPTION_REG,2)
// OPTION_REG<PSA>
extern volatile __bit                   PSA                 __at(0x4AB);	// @ (0x95 * 8 + 3)
#define                                 PSA_bit             _BIT_ACCESS(OPTION_REG,3)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x3899);	// @ (0x713 * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x38A2);	// @ (0x714 * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x38A3);	// @ (0x714 * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x38A4);	// @ (0x714 * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x38A5);	// @ (0x714 * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x38A6);	// @ (0x714 * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x38A7);	// @ (0x714 * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x38A8);	// @ (0x715 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x38A9);	// @ (0x715 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x389A);	// @ (0x713 * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x389B);	// @ (0x713 * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x389D);	// @ (0x713 * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x389E);	// @ (0x713 * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x389F);	// @ (0x713 * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x38A0);	// @ (0x714 * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x38A1);	// @ (0x714 * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// PWM3DCL<PWM3DC0>
extern volatile __bit                   PWM3DC0             __at(0x30BE);	// @ (0x617 * 8 + 6)
#define                                 PWM3DC0_bit         _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWM3DC1>
extern volatile __bit                   PWM3DC1             __at(0x30BF);	// @ (0x617 * 8 + 7)
#define                                 PWM3DC1_bit         _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWM3DC2>
extern volatile __bit                   PWM3DC2             __at(0x30C0);	// @ (0x618 * 8 + 0)
#define                                 PWM3DC2_bit         _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWM3DC3>
extern volatile __bit                   PWM3DC3             __at(0x30C1);	// @ (0x618 * 8 + 1)
#define                                 PWM3DC3_bit         _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWM3DC4>
extern volatile __bit                   PWM3DC4             __at(0x30C2);	// @ (0x618 * 8 + 2)
#define                                 PWM3DC4_bit         _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWM3DC5>
extern volatile __bit                   PWM3DC5             __at(0x30C3);	// @ (0x618 * 8 + 3)
#define                                 PWM3DC5_bit         _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWM3DC6>
extern volatile __bit                   PWM3DC6             __at(0x30C4);	// @ (0x618 * 8 + 4)
#define                                 PWM3DC6_bit         _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWM3DC7>
extern volatile __bit                   PWM3DC7             __at(0x30C5);	// @ (0x618 * 8 + 5)
#define                                 PWM3DC7_bit         _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWM3DC8>
extern volatile __bit                   PWM3DC8             __at(0x30C6);	// @ (0x618 * 8 + 6)
#define                                 PWM3DC8_bit         _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWM3DC9>
extern volatile __bit                   PWM3DC9             __at(0x30C7);	// @ (0x618 * 8 + 7)
#define                                 PWM3DC9_bit         _BIT_ACCESS(PWM3DCH,7)
// PWM3CON<PWM3EN>
extern volatile __bit                   PWM3EN              __at(0x30CF);	// @ (0x619 * 8 + 7)
#define                                 PWM3EN_bit          _BIT_ACCESS(PWM3CON,7)
// PWM3CON<PWM3OUT>
extern volatile __bit                   PWM3OUT             __at(0x30CD);	// @ (0x619 * 8 + 5)
#define                                 PWM3OUT_bit         _BIT_ACCESS(PWM3CON,5)
// PWM3CON<PWM3POL>
extern volatile __bit                   PWM3POL             __at(0x30CC);	// @ (0x619 * 8 + 4)
#define                                 PWM3POL_bit         _BIT_ACCESS(PWM3CON,4)
// PWM4DCL<PWM4DC0>
extern volatile __bit                   PWM4DC0             __at(0x30D6);	// @ (0x61A * 8 + 6)
#define                                 PWM4DC0_bit         _BIT_ACCESS(PWM4DCL,6)
// PWM4DCL<PWM4DC1>
extern volatile __bit                   PWM4DC1             __at(0x30D7);	// @ (0x61A * 8 + 7)
#define                                 PWM4DC1_bit         _BIT_ACCESS(PWM4DCL,7)
// PWM4DCH<PWM4DC2>
extern volatile __bit                   PWM4DC2             __at(0x30D8);	// @ (0x61B * 8 + 0)
#define                                 PWM4DC2_bit         _BIT_ACCESS(PWM4DCH,0)
// PWM4DCH<PWM4DC3>
extern volatile __bit                   PWM4DC3             __at(0x30D9);	// @ (0x61B * 8 + 1)
#define                                 PWM4DC3_bit         _BIT_ACCESS(PWM4DCH,1)
// PWM4DCH<PWM4DC4>
extern volatile __bit                   PWM4DC4             __at(0x30DA);	// @ (0x61B * 8 + 2)
#define                                 PWM4DC4_bit         _BIT_ACCESS(PWM4DCH,2)
// PWM4DCH<PWM4DC5>
extern volatile __bit                   PWM4DC5             __at(0x30DB);	// @ (0x61B * 8 + 3)
#define                                 PWM4DC5_bit         _BIT_ACCESS(PWM4DCH,3)
// PWM4DCH<PWM4DC6>
extern volatile __bit                   PWM4DC6             __at(0x30DC);	// @ (0x61B * 8 + 4)
#define                                 PWM4DC6_bit         _BIT_ACCESS(PWM4DCH,4)
// PWM4DCH<PWM4DC7>
extern volatile __bit                   PWM4DC7             __at(0x30DD);	// @ (0x61B * 8 + 5)
#define                                 PWM4DC7_bit         _BIT_ACCESS(PWM4DCH,5)
// PWM4DCH<PWM4DC8>
extern volatile __bit                   PWM4DC8             __at(0x30DE);	// @ (0x61B * 8 + 6)
#define                                 PWM4DC8_bit         _BIT_ACCESS(PWM4DCH,6)
// PWM4DCH<PWM4DC9>
extern volatile __bit                   PWM4DC9             __at(0x30DF);	// @ (0x61B * 8 + 7)
#define                                 PWM4DC9_bit         _BIT_ACCESS(PWM4DCH,7)
// PWM4CON<PWM4EN>
extern volatile __bit                   PWM4EN              __at(0x30E7);	// @ (0x61C * 8 + 7)
#define                                 PWM4EN_bit          _BIT_ACCESS(PWM4CON,7)
// PWM4CON<PWM4OUT>
extern volatile __bit                   PWM4OUT             __at(0x30E5);	// @ (0x61C * 8 + 5)
#define                                 PWM4OUT_bit         _BIT_ACCESS(PWM4CON,5)
// PWM4CON<PWM4POL>
extern volatile __bit                   PWM4POL             __at(0x30E4);	// @ (0x61C * 8 + 4)
#define                                 PWM4POL_bit         _BIT_ACCESS(PWM4CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x7480);	// @ (0xE90 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x7481);	// @ (0xE90 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x7482);	// @ (0xE90 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x7483);	// @ (0xE90 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x7484);	// @ (0xE90 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x7488);	// @ (0xE91 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x7489);	// @ (0xE91 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x748A);	// @ (0xE91 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x748B);	// @ (0xE91 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x748C);	// @ (0xE91 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x7490);	// @ (0xE92 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x7491);	// @ (0xE92 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x7492);	// @ (0xE92 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x7493);	// @ (0xE92 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x7494);	// @ (0xE92 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0x74A0);	// @ (0xE94 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0x74A1);	// @ (0xE94 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0x74A2);	// @ (0xE94 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0x74A3);	// @ (0xE94 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0x74A4);	// @ (0xE94 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0x74A8);	// @ (0xE95 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0x74A9);	// @ (0xE95 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0x74AA);	// @ (0xE95 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0x74AB);	// @ (0xE95 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0x74AC);	// @ (0xE95 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0x7500);	// @ (0xEA0 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0x7501);	// @ (0xEA0 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0x7502);	// @ (0xEA0 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0x7503);	// @ (0xEA0 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0x7504);	// @ (0xEA0 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0x7508);	// @ (0xEA1 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0x7509);	// @ (0xEA1 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0x750A);	// @ (0xEA1 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0x750B);	// @ (0xEA1 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0x750C);	// @ (0xEA1 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0x7510);	// @ (0xEA2 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0x7511);	// @ (0xEA2 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0x7512);	// @ (0xEA2 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0x7513);	// @ (0xEA2 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0x7514);	// @ (0xEA2 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0x7518);	// @ (0xEA3 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0x7519);	// @ (0xEA3 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0x751A);	// @ (0xEA3 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0x751B);	// @ (0xEA3 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0x751C);	// @ (0xEA3 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x7520);	// @ (0xEA4 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x7521);	// @ (0xEA4 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x7522);	// @ (0xEA4 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x7523);	// @ (0xEA4 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x7524);	// @ (0xEA4 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x7528);	// @ (0xEA5 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x7529);	// @ (0xEA5 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x752A);	// @ (0xEA5 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x752B);	// @ (0xEA5 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x752C);	// @ (0xEA5 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0xCFE);	// @ (0x19F * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// PIE1<RCIE>
extern volatile __bit                   RCIE                __at(0x485);	// @ (0x90 * 8 + 5)
#define                                 RCIE_bit            _BIT_ACCESS(PIE1,5)
// PIR1<RCIF>
extern volatile __bit                   RCIF                __at(0x85);	// @ (0x10 * 8 + 5)
#define                                 RCIF_bit            _BIT_ACCESS(PIR1,5)
// PMCON1<RD>
extern volatile __bit                   RD                  __at(0xCA8);	// @ (0x195 * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(PMCON1,0)
// CWG1AS0<REN>
extern volatile __bit                   REN                 __at(0x349E);	// @ (0x693 * 8 + 6)
#define                                 REN_bit             _BIT_ACCESS(CWG1AS0,6)
// AT1RESL<RES0>
extern volatile __bit                   RES0                __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(AT1RESL,0)
// AT1RESL<RES1>
extern volatile __bit                   RES1                __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(AT1RESL,1)
// AT1RESL<RES2>
extern volatile __bit                   RES2                __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(AT1RESL,2)
// AT1RESL<RES3>
extern volatile __bit                   RES3                __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(AT1RESL,3)
// AT1RESL<RES4>
extern volatile __bit                   RES4                __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(AT1RESL,4)
// AT1RESL<RES5>
extern volatile __bit                   RES5                __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(AT1RESL,5)
// AT1RESL<RES6>
extern volatile __bit                   RES6                __at(0x4066);	// @ (0x80C * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(AT1RESL,6)
// AT1RESL<RES7>
extern volatile __bit                   RES7                __at(0x4067);	// @ (0x80C * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(AT1RESL,7)
// AT1RESH<RES8>
extern volatile __bit                   RES8                __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(AT1RESH,0)
// AT1RESH<RES9>
extern volatile __bit                   RES9                __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(AT1RESH,1)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0xCEE);	// @ (0x19D * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0xCE8);	// @ (0x19D * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// RXPPS<RXPPS0>
extern volatile __bit                   RXPPS0              __at(0x7120);	// @ (0xE24 * 8 + 0)
#define                                 RXPPS0_bit          _BIT_ACCESS(RXPPS,0)
// RXPPS<RXPPS1>
extern volatile __bit                   RXPPS1              __at(0x7121);	// @ (0xE24 * 8 + 1)
#define                                 RXPPS1_bit          _BIT_ACCESS(RXPPS,1)
// RXPPS<RXPPS2>
extern volatile __bit                   RXPPS2              __at(0x7122);	// @ (0xE24 * 8 + 2)
#define                                 RXPPS2_bit          _BIT_ACCESS(RXPPS,2)
// RXPPS<RXPPS3>
extern volatile __bit                   RXPPS3              __at(0x7123);	// @ (0xE24 * 8 + 3)
#define                                 RXPPS3_bit          _BIT_ACCESS(RXPPS,3)
// RXPPS<RXPPS4>
extern volatile __bit                   RXPPS4              __at(0x7124);	// @ (0xE24 * 8 + 4)
#define                                 RXPPS4_bit          _BIT_ACCESS(RXPPS,4)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0x10A2);	// @ (0x214 * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x8B7);	// @ (0x116 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SCANCON0<SCANBUSY>
extern volatile __bit                   SCANBUSY            __at(0x38E5);	// @ (0x71C * 8 + 5)
#define                                 SCANBUSY_bit        _BIT_ACCESS(SCANCON0,5)
// SCANCON0<SCANEN>
extern volatile __bit                   SCANEN              __at(0x38E7);	// @ (0x71C * 8 + 7)
#define                                 SCANEN_bit          _BIT_ACCESS(SCANCON0,7)
// SCANCON0<SCANGO>
extern volatile __bit                   SCANGO              __at(0x38E6);	// @ (0x71C * 8 + 6)
#define                                 SCANGO_bit          _BIT_ACCESS(SCANCON0,6)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x38DA);	// @ (0x71B * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x38DB);	// @ (0x71B * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x38DF);	// @ (0x71B * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x38D2);	// @ (0x71A * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x38D3);	// @ (0x71A * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x38D4);	// @ (0x71A * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x38D5);	// @ (0x71A * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x38D6);	// @ (0x71A * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x38D7);	// @ (0x71A * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x38D9);	// @ (0x71B * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE4<SCANIE>
extern volatile __bit                   SCANIE              __at(0x49F);	// @ (0x93 * 8 + 7)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE4,7)
// PIR4<SCANIF>
extern volatile __bit                   SCANIF              __at(0x9F);	// @ (0x13 * 8 + 7)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR4,7)
// SCANCON0<SCANINTM>
extern volatile __bit                   SCANINTM            __at(0x38E3);	// @ (0x71C * 8 + 3)
#define                                 SCANINTM_bit        _BIT_ACCESS(SCANCON0,3)
// SCANCON0<SCANINVALID>
extern volatile __bit                   SCANINVALID         __at(0x38E4);	// @ (0x71C * 8 + 4)
#define                                 SCANINVALID_bit     _BIT_ACCESS(SCANCON0,4)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x38CA);	// @ (0x719 * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x38CB);	// @ (0x719 * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x38CE);	// @ (0x719 * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x38CF);	// @ (0x719 * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x38C2);	// @ (0x718 * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x38C3);	// @ (0x718 * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x38C4);	// @ (0x718 * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x38C5);	// @ (0x718 * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x38C7);	// @ (0x718 * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// SCANCON0<SCANMODE0>
extern volatile __bit                   SCANMODE0           __at(0x38E0);	// @ (0x71C * 8 + 0)
#define                                 SCANMODE0_bit       _BIT_ACCESS(SCANCON0,0)
// SCANCON0<SCANMODE1>
extern volatile __bit                   SCANMODE1           __at(0x38E1);	// @ (0x71C * 8 + 1)
#define                                 SCANMODE1_bit       _BIT_ACCESS(SCANCON0,1)
// SCANTRIG<SCANTSEL0>
extern volatile __bit                   SCANTSEL0           __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 SCANTSEL0_bit       _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<SCANTSEL1>
extern volatile __bit                   SCANTSEL1           __at(0x38E9);	// @ (0x71D * 8 + 1)
#define                                 SCANTSEL1_bit       _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<SCANTSEL2>
extern volatile __bit                   SCANTSEL2           __at(0x38EA);	// @ (0x71D * 8 + 2)
#define                                 SCANTSEL2_bit       _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<SCANTSEL3>
extern volatile __bit                   SCANTSEL3           __at(0x38EB);	// @ (0x71D * 8 + 3)
#define                                 SCANTSEL3_bit       _BIT_ACCESS(SCANTRIG,3)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0x10BD);	// @ (0x217 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// OSCCON<SCS0>
extern volatile __bit                   SCS0                __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 SCS0_bit            _BIT_ACCESS(OSCCON,0)
// OSCCON<SCS1>
extern volatile __bit                   SCS1                __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 SCS1_bit            _BIT_ACCESS(OSCCON,1)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0xCF3);	// @ (0x19E * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// PID1SETL<SET0>
extern volatile __bit                   SET0                __at(0x2C60);	// @ (0x58C * 8 + 0)
#define                                 SET0_bit            _BIT_ACCESS(PID1SETL,0)
// PID1SETL<SET1>
extern volatile __bit                   SET1                __at(0x2C61);	// @ (0x58C * 8 + 1)
#define                                 SET1_bit            _BIT_ACCESS(PID1SETL,1)
// PID1SETH<SET10>
extern volatile __bit                   SET10               __at(0x2C6A);	// @ (0x58D * 8 + 2)
#define                                 SET10_bit           _BIT_ACCESS(PID1SETH,2)
// PID1SETH<SET11>
extern volatile __bit                   SET11               __at(0x2C6B);	// @ (0x58D * 8 + 3)
#define                                 SET11_bit           _BIT_ACCESS(PID1SETH,3)
// PID1SETH<SET12>
extern volatile __bit                   SET12               __at(0x2C6C);	// @ (0x58D * 8 + 4)
#define                                 SET12_bit           _BIT_ACCESS(PID1SETH,4)
// PID1SETH<SET13>
extern volatile __bit                   SET13               __at(0x2C6D);	// @ (0x58D * 8 + 5)
#define                                 SET13_bit           _BIT_ACCESS(PID1SETH,5)
// PID1SETH<SET14>
extern volatile __bit                   SET14               __at(0x2C6E);	// @ (0x58D * 8 + 6)
#define                                 SET14_bit           _BIT_ACCESS(PID1SETH,6)
// PID1SETH<SET15>
extern volatile __bit                   SET15               __at(0x2C6F);	// @ (0x58D * 8 + 7)
#define                                 SET15_bit           _BIT_ACCESS(PID1SETH,7)
// PID1SETL<SET2>
extern volatile __bit                   SET2                __at(0x2C62);	// @ (0x58C * 8 + 2)
#define                                 SET2_bit            _BIT_ACCESS(PID1SETL,2)
// PID1SETL<SET3>
extern volatile __bit                   SET3                __at(0x2C63);	// @ (0x58C * 8 + 3)
#define                                 SET3_bit            _BIT_ACCESS(PID1SETL,3)
// PID1SETL<SET4>
extern volatile __bit                   SET4                __at(0x2C64);	// @ (0x58C * 8 + 4)
#define                                 SET4_bit            _BIT_ACCESS(PID1SETL,4)
// PID1SETL<SET5>
extern volatile __bit                   SET5                __at(0x2C65);	// @ (0x58C * 8 + 5)
#define                                 SET5_bit            _BIT_ACCESS(PID1SETL,5)
// PID1SETL<SET6>
extern volatile __bit                   SET6                __at(0x2C66);	// @ (0x58C * 8 + 6)
#define                                 SET6_bit            _BIT_ACCESS(PID1SETL,6)
// PID1SETL<SET7>
extern volatile __bit                   SET7                __at(0x2C67);	// @ (0x58C * 8 + 7)
#define                                 SET7_bit            _BIT_ACCESS(PID1SETL,7)
// PID1SETH<SET8>
extern volatile __bit                   SET8                __at(0x2C68);	// @ (0x58D * 8 + 0)
#define                                 SET8_bit            _BIT_ACCESS(PID1SETH,0)
// PID1SETH<SET9>
extern volatile __bit                   SET9                __at(0x2C69);	// @ (0x58D * 8 + 1)
#define                                 SET9_bit            _BIT_ACCESS(PID1SETH,1)
// CRCSHIFTL<SHIFT0>
extern volatile __bit                   SHIFT0              __at(0x3CA8);	// @ (0x795 * 8 + 0)
#define                                 SHIFT0_bit          _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHIFT1>
extern volatile __bit                   SHIFT1              __at(0x3CA9);	// @ (0x795 * 8 + 1)
#define                                 SHIFT1_bit          _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHIFT10>
extern volatile __bit                   SHIFT10             __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 SHIFT10_bit         _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHIFT11>
extern volatile __bit                   SHIFT11             __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 SHIFT11_bit         _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHIFT12>
extern volatile __bit                   SHIFT12             __at(0x3CB4);	// @ (0x796 * 8 + 4)
#define                                 SHIFT12_bit         _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHIFT13>
extern volatile __bit                   SHIFT13             __at(0x3CB5);	// @ (0x796 * 8 + 5)
#define                                 SHIFT13_bit         _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHIFT14>
extern volatile __bit                   SHIFT14             __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 SHIFT14_bit         _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHIFT15>
extern volatile __bit                   SHIFT15             __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 SHIFT15_bit         _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHIFT2>
extern volatile __bit                   SHIFT2              __at(0x3CAA);	// @ (0x795 * 8 + 2)
#define                                 SHIFT2_bit          _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHIFT3>
extern volatile __bit                   SHIFT3              __at(0x3CAB);	// @ (0x795 * 8 + 3)
#define                                 SHIFT3_bit          _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHIFT4>
extern volatile __bit                   SHIFT4              __at(0x3CAC);	// @ (0x795 * 8 + 4)
#define                                 SHIFT4_bit          _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHIFT5>
extern volatile __bit                   SHIFT5              __at(0x3CAD);	// @ (0x795 * 8 + 5)
#define                                 SHIFT5_bit          _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHIFT6>
extern volatile __bit                   SHIFT6              __at(0x3CAE);	// @ (0x795 * 8 + 6)
#define                                 SHIFT6_bit          _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHIFT7>
extern volatile __bit                   SHIFT7              __at(0x3CAF);	// @ (0x795 * 8 + 7)
#define                                 SHIFT7_bit          _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHIFT8>
extern volatile __bit                   SHIFT8              __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 SHIFT8_bit          _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHIFT9>
extern volatile __bit                   SHIFT9              __at(0x3CB1);	// @ (0x796 * 8 + 1)
#define                                 SHIFT9_bit          _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// CWG1AS0<SHUTDOWN>
extern volatile __bit                   SHUTDOWN            __at(0x349F);	// @ (0x693 * 8 + 7)
#define                                 SHUTDOWN_bit        _BIT_ACCESS(CWG1AS0,7)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x1873);	// @ (0x30E * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0x10A7);	// @ (0x214 * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// SMT1STAT<SMT1AS>
extern volatile __bit                   SMT1AS              __at(0x6CD0);	// @ (0xD9A * 8 + 0)
#define                                 SMT1AS_bit          _BIT_ACCESS(SMT1STAT,0)
// SMT1CPRL<SMT1CPR0>
extern volatile __bit                   SMT1CPR0            __at(0x6C78);	// @ (0xD8F * 8 + 0)
#define                                 SMT1CPR0_bit        _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<SMT1CPR1>
extern volatile __bit                   SMT1CPR1            __at(0x6C79);	// @ (0xD8F * 8 + 1)
#define                                 SMT1CPR1_bit        _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<SMT1CPR10>
extern volatile __bit                   SMT1CPR10           __at(0x6C82);	// @ (0xD90 * 8 + 2)
#define                                 SMT1CPR10_bit       _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<SMT1CPR11>
extern volatile __bit                   SMT1CPR11           __at(0x6C83);	// @ (0xD90 * 8 + 3)
#define                                 SMT1CPR11_bit       _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<SMT1CPR12>
extern volatile __bit                   SMT1CPR12           __at(0x6C84);	// @ (0xD90 * 8 + 4)
#define                                 SMT1CPR12_bit       _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<SMT1CPR13>
extern volatile __bit                   SMT1CPR13           __at(0x6C85);	// @ (0xD90 * 8 + 5)
#define                                 SMT1CPR13_bit       _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<SMT1CPR14>
extern volatile __bit                   SMT1CPR14           __at(0x6C86);	// @ (0xD90 * 8 + 6)
#define                                 SMT1CPR14_bit       _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<SMT1CPR15>
extern volatile __bit                   SMT1CPR15           __at(0x6C87);	// @ (0xD90 * 8 + 7)
#define                                 SMT1CPR15_bit       _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<SMT1CPR16>
extern volatile __bit                   SMT1CPR16           __at(0x6C88);	// @ (0xD91 * 8 + 0)
#define                                 SMT1CPR16_bit       _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<SMT1CPR17>
extern volatile __bit                   SMT1CPR17           __at(0x6C89);	// @ (0xD91 * 8 + 1)
#define                                 SMT1CPR17_bit       _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<SMT1CPR18>
extern volatile __bit                   SMT1CPR18           __at(0x6C8A);	// @ (0xD91 * 8 + 2)
#define                                 SMT1CPR18_bit       _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<SMT1CPR19>
extern volatile __bit                   SMT1CPR19           __at(0x6C8B);	// @ (0xD91 * 8 + 3)
#define                                 SMT1CPR19_bit       _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<SMT1CPR2>
extern volatile __bit                   SMT1CPR2            __at(0x6C7A);	// @ (0xD8F * 8 + 2)
#define                                 SMT1CPR2_bit        _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<SMT1CPR20>
extern volatile __bit                   SMT1CPR20           __at(0x6C8C);	// @ (0xD91 * 8 + 4)
#define                                 SMT1CPR20_bit       _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<SMT1CPR21>
extern volatile __bit                   SMT1CPR21           __at(0x6C8D);	// @ (0xD91 * 8 + 5)
#define                                 SMT1CPR21_bit       _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<SMT1CPR22>
extern volatile __bit                   SMT1CPR22           __at(0x6C8E);	// @ (0xD91 * 8 + 6)
#define                                 SMT1CPR22_bit       _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<SMT1CPR23>
extern volatile __bit                   SMT1CPR23           __at(0x6C8F);	// @ (0xD91 * 8 + 7)
#define                                 SMT1CPR23_bit       _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<SMT1CPR3>
extern volatile __bit                   SMT1CPR3            __at(0x6C7B);	// @ (0xD8F * 8 + 3)
#define                                 SMT1CPR3_bit        _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<SMT1CPR4>
extern volatile __bit                   SMT1CPR4            __at(0x6C7C);	// @ (0xD8F * 8 + 4)
#define                                 SMT1CPR4_bit        _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<SMT1CPR5>
extern volatile __bit                   SMT1CPR5            __at(0x6C7D);	// @ (0xD8F * 8 + 5)
#define                                 SMT1CPR5_bit        _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<SMT1CPR6>
extern volatile __bit                   SMT1CPR6            __at(0x6C7E);	// @ (0xD8F * 8 + 6)
#define                                 SMT1CPR6_bit        _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<SMT1CPR7>
extern volatile __bit                   SMT1CPR7            __at(0x6C7F);	// @ (0xD8F * 8 + 7)
#define                                 SMT1CPR7_bit        _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<SMT1CPR8>
extern volatile __bit                   SMT1CPR8            __at(0x6C80);	// @ (0xD90 * 8 + 0)
#define                                 SMT1CPR8_bit        _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<SMT1CPR9>
extern volatile __bit                   SMT1CPR9            __at(0x6C81);	// @ (0xD90 * 8 + 1)
#define                                 SMT1CPR9_bit        _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<SMT1CPRUP>
extern volatile __bit                   SMT1CPRUP           __at(0x6CD7);	// @ (0xD9A * 8 + 7)
#define                                 SMT1CPRUP_bit       _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<SMT1CPW0>
extern volatile __bit                   SMT1CPW0            __at(0x6C90);	// @ (0xD92 * 8 + 0)
#define                                 SMT1CPW0_bit        _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<SMT1CPW1>
extern volatile __bit                   SMT1CPW1            __at(0x6C91);	// @ (0xD92 * 8 + 1)
#define                                 SMT1CPW1_bit        _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<SMT1CPW10>
extern volatile __bit                   SMT1CPW10           __at(0x6C9A);	// @ (0xD93 * 8 + 2)
#define                                 SMT1CPW10_bit       _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<SMT1CPW11>
extern volatile __bit                   SMT1CPW11           __at(0x6C9B);	// @ (0xD93 * 8 + 3)
#define                                 SMT1CPW11_bit       _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<SMT1CPW12>
extern volatile __bit                   SMT1CPW12           __at(0x6C9C);	// @ (0xD93 * 8 + 4)
#define                                 SMT1CPW12_bit       _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<SMT1CPW13>
extern volatile __bit                   SMT1CPW13           __at(0x6C9D);	// @ (0xD93 * 8 + 5)
#define                                 SMT1CPW13_bit       _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<SMT1CPW14>
extern volatile __bit                   SMT1CPW14           __at(0x6C9E);	// @ (0xD93 * 8 + 6)
#define                                 SMT1CPW14_bit       _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<SMT1CPW15>
extern volatile __bit                   SMT1CPW15           __at(0x6C9F);	// @ (0xD93 * 8 + 7)
#define                                 SMT1CPW15_bit       _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<SMT1CPW16>
extern volatile __bit                   SMT1CPW16           __at(0x6CA0);	// @ (0xD94 * 8 + 0)
#define                                 SMT1CPW16_bit       _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<SMT1CPW17>
extern volatile __bit                   SMT1CPW17           __at(0x6CA1);	// @ (0xD94 * 8 + 1)
#define                                 SMT1CPW17_bit       _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<SMT1CPW18>
extern volatile __bit                   SMT1CPW18           __at(0x6CA2);	// @ (0xD94 * 8 + 2)
#define                                 SMT1CPW18_bit       _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<SMT1CPW19>
extern volatile __bit                   SMT1CPW19           __at(0x6CA3);	// @ (0xD94 * 8 + 3)
#define                                 SMT1CPW19_bit       _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<SMT1CPW2>
extern volatile __bit                   SMT1CPW2            __at(0x6C92);	// @ (0xD92 * 8 + 2)
#define                                 SMT1CPW2_bit        _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<SMT1CPW20>
extern volatile __bit                   SMT1CPW20           __at(0x6CA4);	// @ (0xD94 * 8 + 4)
#define                                 SMT1CPW20_bit       _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<SMT1CPW21>
extern volatile __bit                   SMT1CPW21           __at(0x6CA5);	// @ (0xD94 * 8 + 5)
#define                                 SMT1CPW21_bit       _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<SMT1CPW22>
extern volatile __bit                   SMT1CPW22           __at(0x6CA6);	// @ (0xD94 * 8 + 6)
#define                                 SMT1CPW22_bit       _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<SMT1CPW23>
extern volatile __bit                   SMT1CPW23           __at(0x6CA7);	// @ (0xD94 * 8 + 7)
#define                                 SMT1CPW23_bit       _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<SMT1CPW3>
extern volatile __bit                   SMT1CPW3            __at(0x6C93);	// @ (0xD92 * 8 + 3)
#define                                 SMT1CPW3_bit        _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<SMT1CPW4>
extern volatile __bit                   SMT1CPW4            __at(0x6C94);	// @ (0xD92 * 8 + 4)
#define                                 SMT1CPW4_bit        _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<SMT1CPW5>
extern volatile __bit                   SMT1CPW5            __at(0x6C95);	// @ (0xD92 * 8 + 5)
#define                                 SMT1CPW5_bit        _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<SMT1CPW6>
extern volatile __bit                   SMT1CPW6            __at(0x6C96);	// @ (0xD92 * 8 + 6)
#define                                 SMT1CPW6_bit        _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<SMT1CPW7>
extern volatile __bit                   SMT1CPW7            __at(0x6C97);	// @ (0xD92 * 8 + 7)
#define                                 SMT1CPW7_bit        _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<SMT1CPW8>
extern volatile __bit                   SMT1CPW8            __at(0x6C98);	// @ (0xD93 * 8 + 0)
#define                                 SMT1CPW8_bit        _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<SMT1CPW9>
extern volatile __bit                   SMT1CPW9            __at(0x6C99);	// @ (0xD93 * 8 + 1)
#define                                 SMT1CPW9_bit        _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<SMT1CPWUP>
extern volatile __bit                   SMT1CPWUP           __at(0x6CD6);	// @ (0xD9A * 8 + 6)
#define                                 SMT1CPWUP_bit       _BIT_ACCESS(SMT1STAT,6)
// SMT1CLK<SMT1CSEL0>
extern volatile __bit                   SMT1CSEL0           __at(0x6CD8);	// @ (0xD9B * 8 + 0)
#define                                 SMT1CSEL0_bit       _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<SMT1CSEL1>
extern volatile __bit                   SMT1CSEL1           __at(0x6CD9);	// @ (0xD9B * 8 + 1)
#define                                 SMT1CSEL1_bit       _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<SMT1CSEL2>
extern volatile __bit                   SMT1CSEL2           __at(0x6CDA);	// @ (0xD9B * 8 + 2)
#define                                 SMT1CSEL2_bit       _BIT_ACCESS(SMT1CLK,2)
// SMT1CON1<SMT1GO>
extern volatile __bit                   SMT1GO              __at(0x6CCF);	// @ (0xD99 * 8 + 7)
#define                                 SMT1GO_bit          _BIT_ACCESS(SMT1CON1,7)
// PIE4<SMT1IE>
extern volatile __bit                   SMT1IE              __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 SMT1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<SMT1IF>
extern volatile __bit                   SMT1IF              __at(0x98);	// @ (0x13 * 8 + 0)
#define                                 SMT1IF_bit          _BIT_ACCESS(PIR4,0)
// SMT1CON1<SMT1MODE0>
extern volatile __bit                   SMT1MODE0           __at(0x6CC8);	// @ (0xD99 * 8 + 0)
#define                                 SMT1MODE0_bit       _BIT_ACCESS(SMT1CON1,0)
// SMT1CON1<SMT1MODE1>
extern volatile __bit                   SMT1MODE1           __at(0x6CC9);	// @ (0xD99 * 8 + 1)
#define                                 SMT1MODE1_bit       _BIT_ACCESS(SMT1CON1,1)
// SMT1CON1<SMT1MODE2>
extern volatile __bit                   SMT1MODE2           __at(0x6CCA);	// @ (0xD99 * 8 + 2)
#define                                 SMT1MODE2_bit       _BIT_ACCESS(SMT1CON1,2)
// SMT1CON1<SMT1MODE3>
extern volatile __bit                   SMT1MODE3           __at(0x6CCB);	// @ (0xD99 * 8 + 3)
#define                                 SMT1MODE3_bit       _BIT_ACCESS(SMT1CON1,3)
// SMT1PRL<SMT1PR0>
extern volatile __bit                   SMT1PR0             __at(0x6CA8);	// @ (0xD95 * 8 + 0)
#define                                 SMT1PR0_bit         _BIT_ACCESS(SMT1PRL,0)
// SMT1PRL<SMT1PR1>
extern volatile __bit                   SMT1PR1             __at(0x6CA9);	// @ (0xD95 * 8 + 1)
#define                                 SMT1PR1_bit         _BIT_ACCESS(SMT1PRL,1)
// SMT1PRH<SMT1PR10>
extern volatile __bit                   SMT1PR10            __at(0x6CB2);	// @ (0xD96 * 8 + 2)
#define                                 SMT1PR10_bit        _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<SMT1PR11>
extern volatile __bit                   SMT1PR11            __at(0x6CB3);	// @ (0xD96 * 8 + 3)
#define                                 SMT1PR11_bit        _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<SMT1PR12>
extern volatile __bit                   SMT1PR12            __at(0x6CB4);	// @ (0xD96 * 8 + 4)
#define                                 SMT1PR12_bit        _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<SMT1PR13>
extern volatile __bit                   SMT1PR13            __at(0x6CB5);	// @ (0xD96 * 8 + 5)
#define                                 SMT1PR13_bit        _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<SMT1PR14>
extern volatile __bit                   SMT1PR14            __at(0x6CB6);	// @ (0xD96 * 8 + 6)
#define                                 SMT1PR14_bit        _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<SMT1PR15>
extern volatile __bit                   SMT1PR15            __at(0x6CB7);	// @ (0xD96 * 8 + 7)
#define                                 SMT1PR15_bit        _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<SMT1PR16>
extern volatile __bit                   SMT1PR16            __at(0x6CB8);	// @ (0xD97 * 8 + 0)
#define                                 SMT1PR16_bit        _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<SMT1PR17>
extern volatile __bit                   SMT1PR17            __at(0x6CB9);	// @ (0xD97 * 8 + 1)
#define                                 SMT1PR17_bit        _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<SMT1PR18>
extern volatile __bit                   SMT1PR18            __at(0x6CBA);	// @ (0xD97 * 8 + 2)
#define                                 SMT1PR18_bit        _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<SMT1PR19>
extern volatile __bit                   SMT1PR19            __at(0x6CBB);	// @ (0xD97 * 8 + 3)
#define                                 SMT1PR19_bit        _BIT_ACCESS(SMT1PRU,3)
// SMT1PRL<SMT1PR2>
extern volatile __bit                   SMT1PR2             __at(0x6CAA);	// @ (0xD95 * 8 + 2)
#define                                 SMT1PR2_bit         _BIT_ACCESS(SMT1PRL,2)
// SMT1PRU<SMT1PR20>
extern volatile __bit                   SMT1PR20            __at(0x6CBC);	// @ (0xD97 * 8 + 4)
#define                                 SMT1PR20_bit        _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<SMT1PR21>
extern volatile __bit                   SMT1PR21            __at(0x6CBD);	// @ (0xD97 * 8 + 5)
#define                                 SMT1PR21_bit        _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<SMT1PR22>
extern volatile __bit                   SMT1PR22            __at(0x6CBE);	// @ (0xD97 * 8 + 6)
#define                                 SMT1PR22_bit        _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<SMT1PR23>
extern volatile __bit                   SMT1PR23            __at(0x6CBF);	// @ (0xD97 * 8 + 7)
#define                                 SMT1PR23_bit        _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<SMT1PR3>
extern volatile __bit                   SMT1PR3             __at(0x6CAB);	// @ (0xD95 * 8 + 3)
#define                                 SMT1PR3_bit         _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<SMT1PR4>
extern volatile __bit                   SMT1PR4             __at(0x6CAC);	// @ (0xD95 * 8 + 4)
#define                                 SMT1PR4_bit         _BIT_ACCESS(SMT1PRL,4)
// SMT1PRL<SMT1PR5>
extern volatile __bit                   SMT1PR5             __at(0x6CAD);	// @ (0xD95 * 8 + 5)
#define                                 SMT1PR5_bit         _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<SMT1PR6>
extern volatile __bit                   SMT1PR6             __at(0x6CAE);	// @ (0xD95 * 8 + 6)
#define                                 SMT1PR6_bit         _BIT_ACCESS(SMT1PRL,6)
// SMT1PRL<SMT1PR7>
extern volatile __bit                   SMT1PR7             __at(0x6CAF);	// @ (0xD95 * 8 + 7)
#define                                 SMT1PR7_bit         _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<SMT1PR8>
extern volatile __bit                   SMT1PR8             __at(0x6CB0);	// @ (0xD96 * 8 + 0)
#define                                 SMT1PR8_bit         _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<SMT1PR9>
extern volatile __bit                   SMT1PR9             __at(0x6CB1);	// @ (0xD96 * 8 + 1)
#define                                 SMT1PR9_bit         _BIT_ACCESS(SMT1PRH,1)
// PIE4<SMT1PRAIE>
extern volatile __bit                   SMT1PRAIE           __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 SMT1PRAIE_bit       _BIT_ACCESS(PIE4,1)
// PIR4<SMT1PRAIF>
extern volatile __bit                   SMT1PRAIF           __at(0x99);	// @ (0x13 * 8 + 1)
#define                                 SMT1PRAIF_bit       _BIT_ACCESS(PIR4,1)
// SMT1CON0<SMT1PS0>
extern volatile __bit                   SMT1PS0             __at(0x6CC0);	// @ (0xD98 * 8 + 0)
#define                                 SMT1PS0_bit         _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<SMT1PS1>
extern volatile __bit                   SMT1PS1             __at(0x6CC1);	// @ (0xD98 * 8 + 1)
#define                                 SMT1PS1_bit         _BIT_ACCESS(SMT1CON0,1)
// PIE4<SMT1PWAIE>
extern volatile __bit                   SMT1PWAIE           __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 SMT1PWAIE_bit       _BIT_ACCESS(PIE4,2)
// PIR4<SMT1PWAIF>
extern volatile __bit                   SMT1PWAIF           __at(0x9A);	// @ (0x13 * 8 + 2)
#define                                 SMT1PWAIF_bit       _BIT_ACCESS(PIR4,2)
// SMT1CON1<SMT1REPEAT>
extern volatile __bit                   SMT1REPEAT          __at(0x6CCE);	// @ (0xD99 * 8 + 6)
#define                                 SMT1REPEAT_bit      _BIT_ACCESS(SMT1CON1,6)
// SMT1STAT<SMT1RESET>
extern volatile __bit                   SMT1RESET           __at(0x6CD5);	// @ (0xD9A * 8 + 5)
#define                                 SMT1RESET_bit       _BIT_ACCESS(SMT1STAT,5)
// SMT1SIGPPS<SMT1SIGPPS0>
extern volatile __bit                   SMT1SIGPPS0         __at(0x7130);	// @ (0xE26 * 8 + 0)
#define                                 SMT1SIGPPS0_bit     _BIT_ACCESS(SMT1SIGPPS,0)
// SMT1SIGPPS<SMT1SIGPPS1>
extern volatile __bit                   SMT1SIGPPS1         __at(0x7131);	// @ (0xE26 * 8 + 1)
#define                                 SMT1SIGPPS1_bit     _BIT_ACCESS(SMT1SIGPPS,1)
// SMT1SIGPPS<SMT1SIGPPS2>
extern volatile __bit                   SMT1SIGPPS2         __at(0x7132);	// @ (0xE26 * 8 + 2)
#define                                 SMT1SIGPPS2_bit     _BIT_ACCESS(SMT1SIGPPS,2)
// SMT1SIGPPS<SMT1SIGPPS3>
extern volatile __bit                   SMT1SIGPPS3         __at(0x7133);	// @ (0xE26 * 8 + 3)
#define                                 SMT1SIGPPS3_bit     _BIT_ACCESS(SMT1SIGPPS,3)
// SMT1SIGPPS<SMT1SIGPPS4>
extern volatile __bit                   SMT1SIGPPS4         __at(0x7134);	// @ (0xE26 * 8 + 4)
#define                                 SMT1SIGPPS4_bit     _BIT_ACCESS(SMT1SIGPPS,4)
// SMT1SIG<SMT1SSEL0>
extern volatile __bit                   SMT1SSEL0           __at(0x6CE0);	// @ (0xD9C * 8 + 0)
#define                                 SMT1SSEL0_bit       _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SMT1SSEL1>
extern volatile __bit                   SMT1SSEL1           __at(0x6CE1);	// @ (0xD9C * 8 + 1)
#define                                 SMT1SSEL1_bit       _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SMT1SSEL2>
extern volatile __bit                   SMT1SSEL2           __at(0x6CE2);	// @ (0xD9C * 8 + 2)
#define                                 SMT1SSEL2_bit       _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SMT1SSEL3>
extern volatile __bit                   SMT1SSEL3           __at(0x6CE3);	// @ (0xD9C * 8 + 3)
#define                                 SMT1SSEL3_bit       _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SMT1SSEL4>
extern volatile __bit                   SMT1SSEL4           __at(0x6CE4);	// @ (0xD9C * 8 + 4)
#define                                 SMT1SSEL4_bit       _BIT_ACCESS(SMT1SIG,4)
// SMT1TMRL<SMT1TMR0>
extern volatile __bit                   SMT1TMR0            __at(0x6C60);	// @ (0xD8C * 8 + 0)
#define                                 SMT1TMR0_bit        _BIT_ACCESS(SMT1TMRL,0)
// SMT1TMRL<SMT1TMR1>
extern volatile __bit                   SMT1TMR1            __at(0x6C61);	// @ (0xD8C * 8 + 1)
#define                                 SMT1TMR1_bit        _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<SMT1TMR10>
extern volatile __bit                   SMT1TMR10           __at(0x6C6A);	// @ (0xD8D * 8 + 2)
#define                                 SMT1TMR10_bit       _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<SMT1TMR11>
extern volatile __bit                   SMT1TMR11           __at(0x6C6B);	// @ (0xD8D * 8 + 3)
#define                                 SMT1TMR11_bit       _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<SMT1TMR12>
extern volatile __bit                   SMT1TMR12           __at(0x6C6C);	// @ (0xD8D * 8 + 4)
#define                                 SMT1TMR12_bit       _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<SMT1TMR13>
extern volatile __bit                   SMT1TMR13           __at(0x6C6D);	// @ (0xD8D * 8 + 5)
#define                                 SMT1TMR13_bit       _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<SMT1TMR14>
extern volatile __bit                   SMT1TMR14           __at(0x6C6E);	// @ (0xD8D * 8 + 6)
#define                                 SMT1TMR14_bit       _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<SMT1TMR15>
extern volatile __bit                   SMT1TMR15           __at(0x6C6F);	// @ (0xD8D * 8 + 7)
#define                                 SMT1TMR15_bit       _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<SMT1TMR16>
extern volatile __bit                   SMT1TMR16           __at(0x6C70);	// @ (0xD8E * 8 + 0)
#define                                 SMT1TMR16_bit       _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<SMT1TMR17>
extern volatile __bit                   SMT1TMR17           __at(0x6C71);	// @ (0xD8E * 8 + 1)
#define                                 SMT1TMR17_bit       _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<SMT1TMR18>
extern volatile __bit                   SMT1TMR18           __at(0x6C72);	// @ (0xD8E * 8 + 2)
#define                                 SMT1TMR18_bit       _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<SMT1TMR19>
extern volatile __bit                   SMT1TMR19           __at(0x6C73);	// @ (0xD8E * 8 + 3)
#define                                 SMT1TMR19_bit       _BIT_ACCESS(SMT1TMRU,3)
// SMT1TMRL<SMT1TMR2>
extern volatile __bit                   SMT1TMR2            __at(0x6C62);	// @ (0xD8C * 8 + 2)
#define                                 SMT1TMR2_bit        _BIT_ACCESS(SMT1TMRL,2)
// SMT1TMRU<SMT1TMR20>
extern volatile __bit                   SMT1TMR20           __at(0x6C74);	// @ (0xD8E * 8 + 4)
#define                                 SMT1TMR20_bit       _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<SMT1TMR21>
extern volatile __bit                   SMT1TMR21           __at(0x6C75);	// @ (0xD8E * 8 + 5)
#define                                 SMT1TMR21_bit       _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<SMT1TMR22>
extern volatile __bit                   SMT1TMR22           __at(0x6C76);	// @ (0xD8E * 8 + 6)
#define                                 SMT1TMR22_bit       _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<SMT1TMR23>
extern volatile __bit                   SMT1TMR23           __at(0x6C77);	// @ (0xD8E * 8 + 7)
#define                                 SMT1TMR23_bit       _BIT_ACCESS(SMT1TMRU,7)
// SMT1TMRL<SMT1TMR3>
extern volatile __bit                   SMT1TMR3            __at(0x6C63);	// @ (0xD8C * 8 + 3)
#define                                 SMT1TMR3_bit        _BIT_ACCESS(SMT1TMRL,3)
// SMT1TMRL<SMT1TMR4>
extern volatile __bit                   SMT1TMR4            __at(0x6C64);	// @ (0xD8C * 8 + 4)
#define                                 SMT1TMR4_bit        _BIT_ACCESS(SMT1TMRL,4)
// SMT1TMRL<SMT1TMR5>
extern volatile __bit                   SMT1TMR5            __at(0x6C65);	// @ (0xD8C * 8 + 5)
#define                                 SMT1TMR5_bit        _BIT_ACCESS(SMT1TMRL,5)
// SMT1TMRL<SMT1TMR6>
extern volatile __bit                   SMT1TMR6            __at(0x6C66);	// @ (0xD8C * 8 + 6)
#define                                 SMT1TMR6_bit        _BIT_ACCESS(SMT1TMRL,6)
// SMT1TMRL<SMT1TMR7>
extern volatile __bit                   SMT1TMR7            __at(0x6C67);	// @ (0xD8C * 8 + 7)
#define                                 SMT1TMR7_bit        _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<SMT1TMR8>
extern volatile __bit                   SMT1TMR8            __at(0x6C68);	// @ (0xD8D * 8 + 0)
#define                                 SMT1TMR8_bit        _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<SMT1TMR9>
extern volatile __bit                   SMT1TMR9            __at(0x6C69);	// @ (0xD8D * 8 + 1)
#define                                 SMT1TMR9_bit        _BIT_ACCESS(SMT1TMRH,1)
// SMT1STAT<SMT1TS>
extern volatile __bit                   SMT1TS              __at(0x6CD2);	// @ (0xD9A * 8 + 2)
#define                                 SMT1TS_bit          _BIT_ACCESS(SMT1STAT,2)
// SMT1STAT<SMT1WS>
extern volatile __bit                   SMT1WS              __at(0x6CD1);	// @ (0xD9A * 8 + 1)
#define                                 SMT1WS_bit          _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<SMT1WSEL0>
extern volatile __bit                   SMT1WSEL0           __at(0x6CE8);	// @ (0xD9D * 8 + 0)
#define                                 SMT1WSEL0_bit       _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<SMT1WSEL1>
extern volatile __bit                   SMT1WSEL1           __at(0x6CE9);	// @ (0xD9D * 8 + 1)
#define                                 SMT1WSEL1_bit       _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<SMT1WSEL2>
extern volatile __bit                   SMT1WSEL2           __at(0x6CEA);	// @ (0xD9D * 8 + 2)
#define                                 SMT1WSEL2_bit       _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<SMT1WSEL3>
extern volatile __bit                   SMT1WSEL3           __at(0x6CEB);	// @ (0xD9D * 8 + 3)
#define                                 SMT1WSEL3_bit       _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<SMT1WSEL4>
extern volatile __bit                   SMT1WSEL4           __at(0x6CEC);	// @ (0xD9D * 8 + 4)
#define                                 SMT1WSEL4_bit       _BIT_ACCESS(SMT1WIN,4)
// SMT2STAT<SMT2AS>
extern volatile __bit                   SMT2AS              __at(0x6D60);	// @ (0xDAC * 8 + 0)
#define                                 SMT2AS_bit          _BIT_ACCESS(SMT2STAT,0)
// SMT2CPRL<SMT2CPR0>
extern volatile __bit                   SMT2CPR0            __at(0x6D08);	// @ (0xDA1 * 8 + 0)
#define                                 SMT2CPR0_bit        _BIT_ACCESS(SMT2CPRL,0)
// SMT2CPRL<SMT2CPR1>
extern volatile __bit                   SMT2CPR1            __at(0x6D09);	// @ (0xDA1 * 8 + 1)
#define                                 SMT2CPR1_bit        _BIT_ACCESS(SMT2CPRL,1)
// SMT2CPRH<SMT2CPR10>
extern volatile __bit                   SMT2CPR10           __at(0x6D12);	// @ (0xDA2 * 8 + 2)
#define                                 SMT2CPR10_bit       _BIT_ACCESS(SMT2CPRH,2)
// SMT2CPRH<SMT2CPR11>
extern volatile __bit                   SMT2CPR11           __at(0x6D13);	// @ (0xDA2 * 8 + 3)
#define                                 SMT2CPR11_bit       _BIT_ACCESS(SMT2CPRH,3)
// SMT2CPRH<SMT2CPR12>
extern volatile __bit                   SMT2CPR12           __at(0x6D14);	// @ (0xDA2 * 8 + 4)
#define                                 SMT2CPR12_bit       _BIT_ACCESS(SMT2CPRH,4)
// SMT2CPRH<SMT2CPR13>
extern volatile __bit                   SMT2CPR13           __at(0x6D15);	// @ (0xDA2 * 8 + 5)
#define                                 SMT2CPR13_bit       _BIT_ACCESS(SMT2CPRH,5)
// SMT2CPRH<SMT2CPR14>
extern volatile __bit                   SMT2CPR14           __at(0x6D16);	// @ (0xDA2 * 8 + 6)
#define                                 SMT2CPR14_bit       _BIT_ACCESS(SMT2CPRH,6)
// SMT2CPRH<SMT2CPR15>
extern volatile __bit                   SMT2CPR15           __at(0x6D17);	// @ (0xDA2 * 8 + 7)
#define                                 SMT2CPR15_bit       _BIT_ACCESS(SMT2CPRH,7)
// SMT2CPRU<SMT2CPR16>
extern volatile __bit                   SMT2CPR16           __at(0x6D18);	// @ (0xDA3 * 8 + 0)
#define                                 SMT2CPR16_bit       _BIT_ACCESS(SMT2CPRU,0)
// SMT2CPRU<SMT2CPR17>
extern volatile __bit                   SMT2CPR17           __at(0x6D19);	// @ (0xDA3 * 8 + 1)
#define                                 SMT2CPR17_bit       _BIT_ACCESS(SMT2CPRU,1)
// SMT2CPRU<SMT2CPR18>
extern volatile __bit                   SMT2CPR18           __at(0x6D1A);	// @ (0xDA3 * 8 + 2)
#define                                 SMT2CPR18_bit       _BIT_ACCESS(SMT2CPRU,2)
// SMT2CPRU<SMT2CPR19>
extern volatile __bit                   SMT2CPR19           __at(0x6D1B);	// @ (0xDA3 * 8 + 3)
#define                                 SMT2CPR19_bit       _BIT_ACCESS(SMT2CPRU,3)
// SMT2CPRL<SMT2CPR2>
extern volatile __bit                   SMT2CPR2            __at(0x6D0A);	// @ (0xDA1 * 8 + 2)
#define                                 SMT2CPR2_bit        _BIT_ACCESS(SMT2CPRL,2)
// SMT2CPRU<SMT2CPR20>
extern volatile __bit                   SMT2CPR20           __at(0x6D1C);	// @ (0xDA3 * 8 + 4)
#define                                 SMT2CPR20_bit       _BIT_ACCESS(SMT2CPRU,4)
// SMT2CPRU<SMT2CPR21>
extern volatile __bit                   SMT2CPR21           __at(0x6D1D);	// @ (0xDA3 * 8 + 5)
#define                                 SMT2CPR21_bit       _BIT_ACCESS(SMT2CPRU,5)
// SMT2CPRU<SMT2CPR22>
extern volatile __bit                   SMT2CPR22           __at(0x6D1E);	// @ (0xDA3 * 8 + 6)
#define                                 SMT2CPR22_bit       _BIT_ACCESS(SMT2CPRU,6)
// SMT2CPRU<SMT2CPR23>
extern volatile __bit                   SMT2CPR23           __at(0x6D1F);	// @ (0xDA3 * 8 + 7)
#define                                 SMT2CPR23_bit       _BIT_ACCESS(SMT2CPRU,7)
// SMT2CPRL<SMT2CPR3>
extern volatile __bit                   SMT2CPR3            __at(0x6D0B);	// @ (0xDA1 * 8 + 3)
#define                                 SMT2CPR3_bit        _BIT_ACCESS(SMT2CPRL,3)
// SMT2CPRL<SMT2CPR4>
extern volatile __bit                   SMT2CPR4            __at(0x6D0C);	// @ (0xDA1 * 8 + 4)
#define                                 SMT2CPR4_bit        _BIT_ACCESS(SMT2CPRL,4)
// SMT2CPRL<SMT2CPR5>
extern volatile __bit                   SMT2CPR5            __at(0x6D0D);	// @ (0xDA1 * 8 + 5)
#define                                 SMT2CPR5_bit        _BIT_ACCESS(SMT2CPRL,5)
// SMT2CPRL<SMT2CPR6>
extern volatile __bit                   SMT2CPR6            __at(0x6D0E);	// @ (0xDA1 * 8 + 6)
#define                                 SMT2CPR6_bit        _BIT_ACCESS(SMT2CPRL,6)
// SMT2CPRL<SMT2CPR7>
extern volatile __bit                   SMT2CPR7            __at(0x6D0F);	// @ (0xDA1 * 8 + 7)
#define                                 SMT2CPR7_bit        _BIT_ACCESS(SMT2CPRL,7)
// SMT2CPRH<SMT2CPR8>
extern volatile __bit                   SMT2CPR8            __at(0x6D10);	// @ (0xDA2 * 8 + 0)
#define                                 SMT2CPR8_bit        _BIT_ACCESS(SMT2CPRH,0)
// SMT2CPRH<SMT2CPR9>
extern volatile __bit                   SMT2CPR9            __at(0x6D11);	// @ (0xDA2 * 8 + 1)
#define                                 SMT2CPR9_bit        _BIT_ACCESS(SMT2CPRH,1)
// SMT2STAT<SMT2CPRUP>
extern volatile __bit                   SMT2CPRUP           __at(0x6D67);	// @ (0xDAC * 8 + 7)
#define                                 SMT2CPRUP_bit       _BIT_ACCESS(SMT2STAT,7)
// SMT2CPWL<SMT2CPW0>
extern volatile __bit                   SMT2CPW0            __at(0x6D20);	// @ (0xDA4 * 8 + 0)
#define                                 SMT2CPW0_bit        _BIT_ACCESS(SMT2CPWL,0)
// SMT2CPWL<SMT2CPW1>
extern volatile __bit                   SMT2CPW1            __at(0x6D21);	// @ (0xDA4 * 8 + 1)
#define                                 SMT2CPW1_bit        _BIT_ACCESS(SMT2CPWL,1)
// SMT2CPWH<SMT2CPW10>
extern volatile __bit                   SMT2CPW10           __at(0x6D2A);	// @ (0xDA5 * 8 + 2)
#define                                 SMT2CPW10_bit       _BIT_ACCESS(SMT2CPWH,2)
// SMT2CPWH<SMT2CPW11>
extern volatile __bit                   SMT2CPW11           __at(0x6D2B);	// @ (0xDA5 * 8 + 3)
#define                                 SMT2CPW11_bit       _BIT_ACCESS(SMT2CPWH,3)
// SMT2CPWH<SMT2CPW12>
extern volatile __bit                   SMT2CPW12           __at(0x6D2C);	// @ (0xDA5 * 8 + 4)
#define                                 SMT2CPW12_bit       _BIT_ACCESS(SMT2CPWH,4)
// SMT2CPWH<SMT2CPW13>
extern volatile __bit                   SMT2CPW13           __at(0x6D2D);	// @ (0xDA5 * 8 + 5)
#define                                 SMT2CPW13_bit       _BIT_ACCESS(SMT2CPWH,5)
// SMT2CPWH<SMT2CPW14>
extern volatile __bit                   SMT2CPW14           __at(0x6D2E);	// @ (0xDA5 * 8 + 6)
#define                                 SMT2CPW14_bit       _BIT_ACCESS(SMT2CPWH,6)
// SMT2CPWH<SMT2CPW15>
extern volatile __bit                   SMT2CPW15           __at(0x6D2F);	// @ (0xDA5 * 8 + 7)
#define                                 SMT2CPW15_bit       _BIT_ACCESS(SMT2CPWH,7)
// SMT2CPWU<SMT2CPW16>
extern volatile __bit                   SMT2CPW16           __at(0x6D30);	// @ (0xDA6 * 8 + 0)
#define                                 SMT2CPW16_bit       _BIT_ACCESS(SMT2CPWU,0)
// SMT2CPWU<SMT2CPW17>
extern volatile __bit                   SMT2CPW17           __at(0x6D31);	// @ (0xDA6 * 8 + 1)
#define                                 SMT2CPW17_bit       _BIT_ACCESS(SMT2CPWU,1)
// SMT2CPWU<SMT2CPW18>
extern volatile __bit                   SMT2CPW18           __at(0x6D32);	// @ (0xDA6 * 8 + 2)
#define                                 SMT2CPW18_bit       _BIT_ACCESS(SMT2CPWU,2)
// SMT2CPWU<SMT2CPW19>
extern volatile __bit                   SMT2CPW19           __at(0x6D33);	// @ (0xDA6 * 8 + 3)
#define                                 SMT2CPW19_bit       _BIT_ACCESS(SMT2CPWU,3)
// SMT2CPWL<SMT2CPW2>
extern volatile __bit                   SMT2CPW2            __at(0x6D22);	// @ (0xDA4 * 8 + 2)
#define                                 SMT2CPW2_bit        _BIT_ACCESS(SMT2CPWL,2)
// SMT2CPWU<SMT2CPW20>
extern volatile __bit                   SMT2CPW20           __at(0x6D34);	// @ (0xDA6 * 8 + 4)
#define                                 SMT2CPW20_bit       _BIT_ACCESS(SMT2CPWU,4)
// SMT2CPWU<SMT2CPW21>
extern volatile __bit                   SMT2CPW21           __at(0x6D35);	// @ (0xDA6 * 8 + 5)
#define                                 SMT2CPW21_bit       _BIT_ACCESS(SMT2CPWU,5)
// SMT2CPWU<SMT2CPW22>
extern volatile __bit                   SMT2CPW22           __at(0x6D36);	// @ (0xDA6 * 8 + 6)
#define                                 SMT2CPW22_bit       _BIT_ACCESS(SMT2CPWU,6)
// SMT2CPWU<SMT2CPW23>
extern volatile __bit                   SMT2CPW23           __at(0x6D37);	// @ (0xDA6 * 8 + 7)
#define                                 SMT2CPW23_bit       _BIT_ACCESS(SMT2CPWU,7)
// SMT2CPWL<SMT2CPW3>
extern volatile __bit                   SMT2CPW3            __at(0x6D23);	// @ (0xDA4 * 8 + 3)
#define                                 SMT2CPW3_bit        _BIT_ACCESS(SMT2CPWL,3)
// SMT2CPWL<SMT2CPW4>
extern volatile __bit                   SMT2CPW4            __at(0x6D24);	// @ (0xDA4 * 8 + 4)
#define                                 SMT2CPW4_bit        _BIT_ACCESS(SMT2CPWL,4)
// SMT2CPWL<SMT2CPW5>
extern volatile __bit                   SMT2CPW5            __at(0x6D25);	// @ (0xDA4 * 8 + 5)
#define                                 SMT2CPW5_bit        _BIT_ACCESS(SMT2CPWL,5)
// SMT2CPWL<SMT2CPW6>
extern volatile __bit                   SMT2CPW6            __at(0x6D26);	// @ (0xDA4 * 8 + 6)
#define                                 SMT2CPW6_bit        _BIT_ACCESS(SMT2CPWL,6)
// SMT2CPWL<SMT2CPW7>
extern volatile __bit                   SMT2CPW7            __at(0x6D27);	// @ (0xDA4 * 8 + 7)
#define                                 SMT2CPW7_bit        _BIT_ACCESS(SMT2CPWL,7)
// SMT2CPWH<SMT2CPW8>
extern volatile __bit                   SMT2CPW8            __at(0x6D28);	// @ (0xDA5 * 8 + 0)
#define                                 SMT2CPW8_bit        _BIT_ACCESS(SMT2CPWH,0)
// SMT2CPWH<SMT2CPW9>
extern volatile __bit                   SMT2CPW9            __at(0x6D29);	// @ (0xDA5 * 8 + 1)
#define                                 SMT2CPW9_bit        _BIT_ACCESS(SMT2CPWH,1)
// SMT2STAT<SMT2CPWUP>
extern volatile __bit                   SMT2CPWUP           __at(0x6D66);	// @ (0xDAC * 8 + 6)
#define                                 SMT2CPWUP_bit       _BIT_ACCESS(SMT2STAT,6)
// SMT2CLK<SMT2CSEL0>
extern volatile __bit                   SMT2CSEL0           __at(0x6D68);	// @ (0xDAD * 8 + 0)
#define                                 SMT2CSEL0_bit       _BIT_ACCESS(SMT2CLK,0)
// SMT2CLK<SMT2CSEL1>
extern volatile __bit                   SMT2CSEL1           __at(0x6D69);	// @ (0xDAD * 8 + 1)
#define                                 SMT2CSEL1_bit       _BIT_ACCESS(SMT2CLK,1)
// SMT2CLK<SMT2CSEL2>
extern volatile __bit                   SMT2CSEL2           __at(0x6D6A);	// @ (0xDAD * 8 + 2)
#define                                 SMT2CSEL2_bit       _BIT_ACCESS(SMT2CLK,2)
// SMT2CON1<SMT2GO>
extern volatile __bit                   SMT2GO              __at(0x6D5F);	// @ (0xDAB * 8 + 7)
#define                                 SMT2GO_bit          _BIT_ACCESS(SMT2CON1,7)
// PIE4<SMT2IE>
extern volatile __bit                   SMT2IE              __at(0x49B);	// @ (0x93 * 8 + 3)
#define                                 SMT2IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<SMT2IF>
extern volatile __bit                   SMT2IF              __at(0x9B);	// @ (0x13 * 8 + 3)
#define                                 SMT2IF_bit          _BIT_ACCESS(PIR4,3)
// SMT2CON1<SMT2MODE0>
extern volatile __bit                   SMT2MODE0           __at(0x6D58);	// @ (0xDAB * 8 + 0)
#define                                 SMT2MODE0_bit       _BIT_ACCESS(SMT2CON1,0)
// SMT2CON1<SMT2MODE1>
extern volatile __bit                   SMT2MODE1           __at(0x6D59);	// @ (0xDAB * 8 + 1)
#define                                 SMT2MODE1_bit       _BIT_ACCESS(SMT2CON1,1)
// SMT2CON1<SMT2MODE2>
extern volatile __bit                   SMT2MODE2           __at(0x6D5A);	// @ (0xDAB * 8 + 2)
#define                                 SMT2MODE2_bit       _BIT_ACCESS(SMT2CON1,2)
// SMT2CON1<SMT2MODE3>
extern volatile __bit                   SMT2MODE3           __at(0x6D5B);	// @ (0xDAB * 8 + 3)
#define                                 SMT2MODE3_bit       _BIT_ACCESS(SMT2CON1,3)
// SMT2PRL<SMT2PR0>
extern volatile __bit                   SMT2PR0             __at(0x6D38);	// @ (0xDA7 * 8 + 0)
#define                                 SMT2PR0_bit         _BIT_ACCESS(SMT2PRL,0)
// SMT2PRL<SMT2PR1>
extern volatile __bit                   SMT2PR1             __at(0x6D39);	// @ (0xDA7 * 8 + 1)
#define                                 SMT2PR1_bit         _BIT_ACCESS(SMT2PRL,1)
// SMT2PRH<SMT2PR10>
extern volatile __bit                   SMT2PR10            __at(0x6D42);	// @ (0xDA8 * 8 + 2)
#define                                 SMT2PR10_bit        _BIT_ACCESS(SMT2PRH,2)
// SMT2PRH<SMT2PR11>
extern volatile __bit                   SMT2PR11            __at(0x6D43);	// @ (0xDA8 * 8 + 3)
#define                                 SMT2PR11_bit        _BIT_ACCESS(SMT2PRH,3)
// SMT2PRH<SMT2PR12>
extern volatile __bit                   SMT2PR12            __at(0x6D44);	// @ (0xDA8 * 8 + 4)
#define                                 SMT2PR12_bit        _BIT_ACCESS(SMT2PRH,4)
// SMT2PRH<SMT2PR13>
extern volatile __bit                   SMT2PR13            __at(0x6D45);	// @ (0xDA8 * 8 + 5)
#define                                 SMT2PR13_bit        _BIT_ACCESS(SMT2PRH,5)
// SMT2PRH<SMT2PR14>
extern volatile __bit                   SMT2PR14            __at(0x6D46);	// @ (0xDA8 * 8 + 6)
#define                                 SMT2PR14_bit        _BIT_ACCESS(SMT2PRH,6)
// SMT2PRH<SMT2PR15>
extern volatile __bit                   SMT2PR15            __at(0x6D47);	// @ (0xDA8 * 8 + 7)
#define                                 SMT2PR15_bit        _BIT_ACCESS(SMT2PRH,7)
// SMT2PRU<SMT2PR16>
extern volatile __bit                   SMT2PR16            __at(0x6D48);	// @ (0xDA9 * 8 + 0)
#define                                 SMT2PR16_bit        _BIT_ACCESS(SMT2PRU,0)
// SMT2PRU<SMT2PR17>
extern volatile __bit                   SMT2PR17            __at(0x6D49);	// @ (0xDA9 * 8 + 1)
#define                                 SMT2PR17_bit        _BIT_ACCESS(SMT2PRU,1)
// SMT2PRU<SMT2PR18>
extern volatile __bit                   SMT2PR18            __at(0x6D4A);	// @ (0xDA9 * 8 + 2)
#define                                 SMT2PR18_bit        _BIT_ACCESS(SMT2PRU,2)
// SMT2PRU<SMT2PR19>
extern volatile __bit                   SMT2PR19            __at(0x6D4B);	// @ (0xDA9 * 8 + 3)
#define                                 SMT2PR19_bit        _BIT_ACCESS(SMT2PRU,3)
// SMT2PRL<SMT2PR2>
extern volatile __bit                   SMT2PR2             __at(0x6D3A);	// @ (0xDA7 * 8 + 2)
#define                                 SMT2PR2_bit         _BIT_ACCESS(SMT2PRL,2)
// SMT2PRU<SMT2PR20>
extern volatile __bit                   SMT2PR20            __at(0x6D4C);	// @ (0xDA9 * 8 + 4)
#define                                 SMT2PR20_bit        _BIT_ACCESS(SMT2PRU,4)
// SMT2PRU<SMT2PR21>
extern volatile __bit                   SMT2PR21            __at(0x6D4D);	// @ (0xDA9 * 8 + 5)
#define                                 SMT2PR21_bit        _BIT_ACCESS(SMT2PRU,5)
// SMT2PRU<SMT2PR22>
extern volatile __bit                   SMT2PR22            __at(0x6D4E);	// @ (0xDA9 * 8 + 6)
#define                                 SMT2PR22_bit        _BIT_ACCESS(SMT2PRU,6)
// SMT2PRU<SMT2PR23>
extern volatile __bit                   SMT2PR23            __at(0x6D4F);	// @ (0xDA9 * 8 + 7)
#define                                 SMT2PR23_bit        _BIT_ACCESS(SMT2PRU,7)
// SMT2PRL<SMT2PR3>
extern volatile __bit                   SMT2PR3             __at(0x6D3B);	// @ (0xDA7 * 8 + 3)
#define                                 SMT2PR3_bit         _BIT_ACCESS(SMT2PRL,3)
// SMT2PRL<SMT2PR4>
extern volatile __bit                   SMT2PR4             __at(0x6D3C);	// @ (0xDA7 * 8 + 4)
#define                                 SMT2PR4_bit         _BIT_ACCESS(SMT2PRL,4)
// SMT2PRL<SMT2PR5>
extern volatile __bit                   SMT2PR5             __at(0x6D3D);	// @ (0xDA7 * 8 + 5)
#define                                 SMT2PR5_bit         _BIT_ACCESS(SMT2PRL,5)
// SMT2PRL<SMT2PR6>
extern volatile __bit                   SMT2PR6             __at(0x6D3E);	// @ (0xDA7 * 8 + 6)
#define                                 SMT2PR6_bit         _BIT_ACCESS(SMT2PRL,6)
// SMT2PRL<SMT2PR7>
extern volatile __bit                   SMT2PR7             __at(0x6D3F);	// @ (0xDA7 * 8 + 7)
#define                                 SMT2PR7_bit         _BIT_ACCESS(SMT2PRL,7)
// SMT2PRH<SMT2PR8>
extern volatile __bit                   SMT2PR8             __at(0x6D40);	// @ (0xDA8 * 8 + 0)
#define                                 SMT2PR8_bit         _BIT_ACCESS(SMT2PRH,0)
// SMT2PRH<SMT2PR9>
extern volatile __bit                   SMT2PR9             __at(0x6D41);	// @ (0xDA8 * 8 + 1)
#define                                 SMT2PR9_bit         _BIT_ACCESS(SMT2PRH,1)
// PIE4<SMT2PRAIE>
extern volatile __bit                   SMT2PRAIE           __at(0x49C);	// @ (0x93 * 8 + 4)
#define                                 SMT2PRAIE_bit       _BIT_ACCESS(PIE4,4)
// PIR4<SMT2PRAIF>
extern volatile __bit                   SMT2PRAIF           __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 SMT2PRAIF_bit       _BIT_ACCESS(PIR4,4)
// SMT2CON0<SMT2PS0>
extern volatile __bit                   SMT2PS0             __at(0x6D50);	// @ (0xDAA * 8 + 0)
#define                                 SMT2PS0_bit         _BIT_ACCESS(SMT2CON0,0)
// SMT2CON0<SMT2PS1>
extern volatile __bit                   SMT2PS1             __at(0x6D51);	// @ (0xDAA * 8 + 1)
#define                                 SMT2PS1_bit         _BIT_ACCESS(SMT2CON0,1)
// PIE4<SMT2PWAIE>
extern volatile __bit                   SMT2PWAIE           __at(0x49D);	// @ (0x93 * 8 + 5)
#define                                 SMT2PWAIE_bit       _BIT_ACCESS(PIE4,5)
// PIR4<SMT2PWAIF>
extern volatile __bit                   SMT2PWAIF           __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 SMT2PWAIF_bit       _BIT_ACCESS(PIR4,5)
// SMT2CON1<SMT2REPEAT>
extern volatile __bit                   SMT2REPEAT          __at(0x6D5E);	// @ (0xDAB * 8 + 6)
#define                                 SMT2REPEAT_bit      _BIT_ACCESS(SMT2CON1,6)
// SMT2STAT<SMT2RESET>
extern volatile __bit                   SMT2RESET           __at(0x6D65);	// @ (0xDAC * 8 + 5)
#define                                 SMT2RESET_bit       _BIT_ACCESS(SMT2STAT,5)
// SMT2SIGPPS<SMT2SIGPPS0>
extern volatile __bit                   SMT2SIGPPS0         __at(0x7160);	// @ (0xE2C * 8 + 0)
#define                                 SMT2SIGPPS0_bit     _BIT_ACCESS(SMT2SIGPPS,0)
// SMT2SIGPPS<SMT2SIGPPS1>
extern volatile __bit                   SMT2SIGPPS1         __at(0x7161);	// @ (0xE2C * 8 + 1)
#define                                 SMT2SIGPPS1_bit     _BIT_ACCESS(SMT2SIGPPS,1)
// SMT2SIGPPS<SMT2SIGPPS2>
extern volatile __bit                   SMT2SIGPPS2         __at(0x7162);	// @ (0xE2C * 8 + 2)
#define                                 SMT2SIGPPS2_bit     _BIT_ACCESS(SMT2SIGPPS,2)
// SMT2SIGPPS<SMT2SIGPPS3>
extern volatile __bit                   SMT2SIGPPS3         __at(0x7163);	// @ (0xE2C * 8 + 3)
#define                                 SMT2SIGPPS3_bit     _BIT_ACCESS(SMT2SIGPPS,3)
// SMT2SIGPPS<SMT2SIGPPS4>
extern volatile __bit                   SMT2SIGPPS4         __at(0x7164);	// @ (0xE2C * 8 + 4)
#define                                 SMT2SIGPPS4_bit     _BIT_ACCESS(SMT2SIGPPS,4)
// SMT2SIG<SMT2SSEL0>
extern volatile __bit                   SMT2SSEL0           __at(0x6D70);	// @ (0xDAE * 8 + 0)
#define                                 SMT2SSEL0_bit       _BIT_ACCESS(SMT2SIG,0)
// SMT2SIG<SMT2SSEL1>
extern volatile __bit                   SMT2SSEL1           __at(0x6D71);	// @ (0xDAE * 8 + 1)
#define                                 SMT2SSEL1_bit       _BIT_ACCESS(SMT2SIG,1)
// SMT2SIG<SMT2SSEL2>
extern volatile __bit                   SMT2SSEL2           __at(0x6D72);	// @ (0xDAE * 8 + 2)
#define                                 SMT2SSEL2_bit       _BIT_ACCESS(SMT2SIG,2)
// SMT2SIG<SMT2SSEL3>
extern volatile __bit                   SMT2SSEL3           __at(0x6D73);	// @ (0xDAE * 8 + 3)
#define                                 SMT2SSEL3_bit       _BIT_ACCESS(SMT2SIG,3)
// SMT2SIG<SMT2SSEL4>
extern volatile __bit                   SMT2SSEL4           __at(0x6D74);	// @ (0xDAE * 8 + 4)
#define                                 SMT2SSEL4_bit       _BIT_ACCESS(SMT2SIG,4)
// SMT2TMRL<SMT2TMR0>
extern volatile __bit                   SMT2TMR0            __at(0x6CF0);	// @ (0xD9E * 8 + 0)
#define                                 SMT2TMR0_bit        _BIT_ACCESS(SMT2TMRL,0)
// SMT2TMRL<SMT2TMR1>
extern volatile __bit                   SMT2TMR1            __at(0x6CF1);	// @ (0xD9E * 8 + 1)
#define                                 SMT2TMR1_bit        _BIT_ACCESS(SMT2TMRL,1)
// SMT2TMRH<SMT2TMR10>
extern volatile __bit                   SMT2TMR10           __at(0x6CFA);	// @ (0xD9F * 8 + 2)
#define                                 SMT2TMR10_bit       _BIT_ACCESS(SMT2TMRH,2)
// SMT2TMRH<SMT2TMR11>
extern volatile __bit                   SMT2TMR11           __at(0x6CFB);	// @ (0xD9F * 8 + 3)
#define                                 SMT2TMR11_bit       _BIT_ACCESS(SMT2TMRH,3)
// SMT2TMRH<SMT2TMR12>
extern volatile __bit                   SMT2TMR12           __at(0x6CFC);	// @ (0xD9F * 8 + 4)
#define                                 SMT2TMR12_bit       _BIT_ACCESS(SMT2TMRH,4)
// SMT2TMRH<SMT2TMR13>
extern volatile __bit                   SMT2TMR13           __at(0x6CFD);	// @ (0xD9F * 8 + 5)
#define                                 SMT2TMR13_bit       _BIT_ACCESS(SMT2TMRH,5)
// SMT2TMRH<SMT2TMR14>
extern volatile __bit                   SMT2TMR14           __at(0x6CFE);	// @ (0xD9F * 8 + 6)
#define                                 SMT2TMR14_bit       _BIT_ACCESS(SMT2TMRH,6)
// SMT2TMRH<SMT2TMR15>
extern volatile __bit                   SMT2TMR15           __at(0x6CFF);	// @ (0xD9F * 8 + 7)
#define                                 SMT2TMR15_bit       _BIT_ACCESS(SMT2TMRH,7)
// SMT2TMRU<SMT2TMR16>
extern volatile __bit                   SMT2TMR16           __at(0x6D00);	// @ (0xDA0 * 8 + 0)
#define                                 SMT2TMR16_bit       _BIT_ACCESS(SMT2TMRU,0)
// SMT2TMRU<SMT2TMR17>
extern volatile __bit                   SMT2TMR17           __at(0x6D01);	// @ (0xDA0 * 8 + 1)
#define                                 SMT2TMR17_bit       _BIT_ACCESS(SMT2TMRU,1)
// SMT2TMRU<SMT2TMR18>
extern volatile __bit                   SMT2TMR18           __at(0x6D02);	// @ (0xDA0 * 8 + 2)
#define                                 SMT2TMR18_bit       _BIT_ACCESS(SMT2TMRU,2)
// SMT2TMRU<SMT2TMR19>
extern volatile __bit                   SMT2TMR19           __at(0x6D03);	// @ (0xDA0 * 8 + 3)
#define                                 SMT2TMR19_bit       _BIT_ACCESS(SMT2TMRU,3)
// SMT2TMRL<SMT2TMR2>
extern volatile __bit                   SMT2TMR2            __at(0x6CF2);	// @ (0xD9E * 8 + 2)
#define                                 SMT2TMR2_bit        _BIT_ACCESS(SMT2TMRL,2)
// SMT2TMRU<SMT2TMR20>
extern volatile __bit                   SMT2TMR20           __at(0x6D04);	// @ (0xDA0 * 8 + 4)
#define                                 SMT2TMR20_bit       _BIT_ACCESS(SMT2TMRU,4)
// SMT2TMRU<SMT2TMR21>
extern volatile __bit                   SMT2TMR21           __at(0x6D05);	// @ (0xDA0 * 8 + 5)
#define                                 SMT2TMR21_bit       _BIT_ACCESS(SMT2TMRU,5)
// SMT2TMRU<SMT2TMR22>
extern volatile __bit                   SMT2TMR22           __at(0x6D06);	// @ (0xDA0 * 8 + 6)
#define                                 SMT2TMR22_bit       _BIT_ACCESS(SMT2TMRU,6)
// SMT2TMRU<SMT2TMR23>
extern volatile __bit                   SMT2TMR23           __at(0x6D07);	// @ (0xDA0 * 8 + 7)
#define                                 SMT2TMR23_bit       _BIT_ACCESS(SMT2TMRU,7)
// SMT2TMRL<SMT2TMR3>
extern volatile __bit                   SMT2TMR3            __at(0x6CF3);	// @ (0xD9E * 8 + 3)
#define                                 SMT2TMR3_bit        _BIT_ACCESS(SMT2TMRL,3)
// SMT2TMRL<SMT2TMR4>
extern volatile __bit                   SMT2TMR4            __at(0x6CF4);	// @ (0xD9E * 8 + 4)
#define                                 SMT2TMR4_bit        _BIT_ACCESS(SMT2TMRL,4)
// SMT2TMRL<SMT2TMR5>
extern volatile __bit                   SMT2TMR5            __at(0x6CF5);	// @ (0xD9E * 8 + 5)
#define                                 SMT2TMR5_bit        _BIT_ACCESS(SMT2TMRL,5)
// SMT2TMRL<SMT2TMR6>
extern volatile __bit                   SMT2TMR6            __at(0x6CF6);	// @ (0xD9E * 8 + 6)
#define                                 SMT2TMR6_bit        _BIT_ACCESS(SMT2TMRL,6)
// SMT2TMRL<SMT2TMR7>
extern volatile __bit                   SMT2TMR7            __at(0x6CF7);	// @ (0xD9E * 8 + 7)
#define                                 SMT2TMR7_bit        _BIT_ACCESS(SMT2TMRL,7)
// SMT2TMRH<SMT2TMR8>
extern volatile __bit                   SMT2TMR8            __at(0x6CF8);	// @ (0xD9F * 8 + 0)
#define                                 SMT2TMR8_bit        _BIT_ACCESS(SMT2TMRH,0)
// SMT2TMRH<SMT2TMR9>
extern volatile __bit                   SMT2TMR9            __at(0x6CF9);	// @ (0xD9F * 8 + 1)
#define                                 SMT2TMR9_bit        _BIT_ACCESS(SMT2TMRH,1)
// SMT2STAT<SMT2TS>
extern volatile __bit                   SMT2TS              __at(0x6D62);	// @ (0xDAC * 8 + 2)
#define                                 SMT2TS_bit          _BIT_ACCESS(SMT2STAT,2)
// SMT2WINPPS<SMT2WINPPS0>
extern volatile __bit                   SMT2WINPPS0         __at(0x7168);	// @ (0xE2D * 8 + 0)
#define                                 SMT2WINPPS0_bit     _BIT_ACCESS(SMT2WINPPS,0)
// SMT2WINPPS<SMT2WINPPS1>
extern volatile __bit                   SMT2WINPPS1         __at(0x7169);	// @ (0xE2D * 8 + 1)
#define                                 SMT2WINPPS1_bit     _BIT_ACCESS(SMT2WINPPS,1)
// SMT2WINPPS<SMT2WINPPS2>
extern volatile __bit                   SMT2WINPPS2         __at(0x716A);	// @ (0xE2D * 8 + 2)
#define                                 SMT2WINPPS2_bit     _BIT_ACCESS(SMT2WINPPS,2)
// SMT2WINPPS<SMT2WINPPS3>
extern volatile __bit                   SMT2WINPPS3         __at(0x716B);	// @ (0xE2D * 8 + 3)
#define                                 SMT2WINPPS3_bit     _BIT_ACCESS(SMT2WINPPS,3)
// SMT2WINPPS<SMT2WINPPS4>
extern volatile __bit                   SMT2WINPPS4         __at(0x716C);	// @ (0xE2D * 8 + 4)
#define                                 SMT2WINPPS4_bit     _BIT_ACCESS(SMT2WINPPS,4)
// SMT2STAT<SMT2WS>
extern volatile __bit                   SMT2WS              __at(0x6D61);	// @ (0xDAC * 8 + 1)
#define                                 SMT2WS_bit          _BIT_ACCESS(SMT2STAT,1)
// SMT2WIN<SMT2WSEL0>
extern volatile __bit                   SMT2WSEL0           __at(0x6D78);	// @ (0xDAF * 8 + 0)
#define                                 SMT2WSEL0_bit       _BIT_ACCESS(SMT2WIN,0)
// SMT2WIN<SMT2WSEL1>
extern volatile __bit                   SMT2WSEL1           __at(0x6D79);	// @ (0xDAF * 8 + 1)
#define                                 SMT2WSEL1_bit       _BIT_ACCESS(SMT2WIN,1)
// SMT2WIN<SMT2WSEL2>
extern volatile __bit                   SMT2WSEL2           __at(0x6D7A);	// @ (0xDAF * 8 + 2)
#define                                 SMT2WSEL2_bit       _BIT_ACCESS(SMT2WIN,2)
// SMT2WIN<SMT2WSEL3>
extern volatile __bit                   SMT2WSEL3           __at(0x6D7B);	// @ (0xDAF * 8 + 3)
#define                                 SMT2WSEL3_bit       _BIT_ACCESS(SMT2WIN,3)
// SMT2WIN<SMT2WSEL4>
extern volatile __bit                   SMT2WSEL4           __at(0x6D7C);	// @ (0xDAF * 8 + 4)
#define                                 SMT2WSEL4_bit       _BIT_ACCESS(SMT2WIN,4)
// SMT1WINPPS<SMTWINPPS0>
extern volatile __bit                   SMTWINPPS0          __at(0x7138);	// @ (0xE27 * 8 + 0)
#define                                 SMTWINPPS0_bit      _BIT_ACCESS(SMT1WINPPS,0)
// SMT1WINPPS<SMTWINPPS1>
extern volatile __bit                   SMTWINPPS1          __at(0x7139);	// @ (0xE27 * 8 + 1)
#define                                 SMTWINPPS1_bit      _BIT_ACCESS(SMT1WINPPS,1)
// SMT1WINPPS<SMTWINPPS2>
extern volatile __bit                   SMTWINPPS2          __at(0x713A);	// @ (0xE27 * 8 + 2)
#define                                 SMTWINPPS2_bit      _BIT_ACCESS(SMT1WINPPS,2)
// SMT1WINPPS<SMTWINPPS3>
extern volatile __bit                   SMTWINPPS3          __at(0x713B);	// @ (0xE27 * 8 + 3)
#define                                 SMTWINPPS3_bit      _BIT_ACCESS(SMT1WINPPS,3)
// SMT1WINPPS<SMTWINPPS4>
extern volatile __bit                   SMTWINPPS4          __at(0x713C);	// @ (0xE27 * 8 + 4)
#define                                 SMTWINPPS4_bit      _BIT_ACCESS(SMT1WINPPS,4)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// OSCCON<SPLLEN>
extern volatile __bit                   SPLLEN              __at(0x4CF);	// @ (0x99 * 8 + 7)
#define                                 SPLLEN_bit          _BIT_ACCESS(OSCCON,7)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0xCED);	// @ (0x19D * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// SSP1ADD<SSP1ADD0>
extern volatile __bit                   SSP1ADD0            __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 SSP1ADD0_bit        _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<SSP1ADD1>
extern volatile __bit                   SSP1ADD1            __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 SSP1ADD1_bit        _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<SSP1ADD2>
extern volatile __bit                   SSP1ADD2            __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 SSP1ADD2_bit        _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<SSP1ADD3>
extern volatile __bit                   SSP1ADD3            __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 SSP1ADD3_bit        _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<SSP1ADD4>
extern volatile __bit                   SSP1ADD4            __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 SSP1ADD4_bit        _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<SSP1ADD5>
extern volatile __bit                   SSP1ADD5            __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 SSP1ADD5_bit        _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<SSP1ADD6>
extern volatile __bit                   SSP1ADD6            __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 SSP1ADD6_bit        _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<SSP1ADD7>
extern volatile __bit                   SSP1ADD7            __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 SSP1ADD7_bit        _BIT_ACCESS(SSP1ADD,7)
// SSP1BUF<SSP1BUF0>
extern volatile __bit                   SSP1BUF0            __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 SSP1BUF0_bit        _BIT_ACCESS(SSP1BUF,0)
// SSP1BUF<SSP1BUF1>
extern volatile __bit                   SSP1BUF1            __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 SSP1BUF1_bit        _BIT_ACCESS(SSP1BUF,1)
// SSP1BUF<SSP1BUF2>
extern volatile __bit                   SSP1BUF2            __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 SSP1BUF2_bit        _BIT_ACCESS(SSP1BUF,2)
// SSP1BUF<SSP1BUF3>
extern volatile __bit                   SSP1BUF3            __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 SSP1BUF3_bit        _BIT_ACCESS(SSP1BUF,3)
// SSP1BUF<SSP1BUF4>
extern volatile __bit                   SSP1BUF4            __at(0x108C);	// @ (0x211 * 8 + 4)
#define                                 SSP1BUF4_bit        _BIT_ACCESS(SSP1BUF,4)
// SSP1BUF<SSP1BUF5>
extern volatile __bit                   SSP1BUF5            __at(0x108D);	// @ (0x211 * 8 + 5)
#define                                 SSP1BUF5_bit        _BIT_ACCESS(SSP1BUF,5)
// SSP1BUF<SSP1BUF6>
extern volatile __bit                   SSP1BUF6            __at(0x108E);	// @ (0x211 * 8 + 6)
#define                                 SSP1BUF6_bit        _BIT_ACCESS(SSP1BUF,6)
// SSP1BUF<SSP1BUF7>
extern volatile __bit                   SSP1BUF7            __at(0x108F);	// @ (0x211 * 8 + 7)
#define                                 SSP1BUF7_bit        _BIT_ACCESS(SSP1BUF,7)
// PIE1<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE1,3)
// PIR1<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x83);	// @ (0x10 * 8 + 3)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR1,3)
// SSP1MSK<SSP1MSK0>
extern volatile __bit                   SSP1MSK0            __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 SSP1MSK0_bit        _BIT_ACCESS(SSP1MSK,0)
// SSP1MSK<SSP1MSK1>
extern volatile __bit                   SSP1MSK1            __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 SSP1MSK1_bit        _BIT_ACCESS(SSP1MSK,1)
// SSP1MSK<SSP1MSK2>
extern volatile __bit                   SSP1MSK2            __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 SSP1MSK2_bit        _BIT_ACCESS(SSP1MSK,2)
// SSP1MSK<SSP1MSK3>
extern volatile __bit                   SSP1MSK3            __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 SSP1MSK3_bit        _BIT_ACCESS(SSP1MSK,3)
// SSP1MSK<SSP1MSK4>
extern volatile __bit                   SSP1MSK4            __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 SSP1MSK4_bit        _BIT_ACCESS(SSP1MSK,4)
// SSP1MSK<SSP1MSK5>
extern volatile __bit                   SSP1MSK5            __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 SSP1MSK5_bit        _BIT_ACCESS(SSP1MSK,5)
// SSP1MSK<SSP1MSK6>
extern volatile __bit                   SSP1MSK6            __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 SSP1MSK6_bit        _BIT_ACCESS(SSP1MSK,6)
// SSP1MSK<SSP1MSK7>
extern volatile __bit                   SSP1MSK7            __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 SSP1MSK7_bit        _BIT_ACCESS(SSP1MSK,7)
// SSPCLKPPS<SSPCLKPPS0>
extern volatile __bit                   SSPCLKPPS0          __at(0x7100);	// @ (0xE20 * 8 + 0)
#define                                 SSPCLKPPS0_bit      _BIT_ACCESS(SSPCLKPPS,0)
// SSPCLKPPS<SSPCLKPPS1>
extern volatile __bit                   SSPCLKPPS1          __at(0x7101);	// @ (0xE20 * 8 + 1)
#define                                 SSPCLKPPS1_bit      _BIT_ACCESS(SSPCLKPPS,1)
// SSPCLKPPS<SSPCLKPPS2>
extern volatile __bit                   SSPCLKPPS2          __at(0x7102);	// @ (0xE20 * 8 + 2)
#define                                 SSPCLKPPS2_bit      _BIT_ACCESS(SSPCLKPPS,2)
// SSPCLKPPS<SSPCLKPPS3>
extern volatile __bit                   SSPCLKPPS3          __at(0x7103);	// @ (0xE20 * 8 + 3)
#define                                 SSPCLKPPS3_bit      _BIT_ACCESS(SSPCLKPPS,3)
// SSPCLKPPS<SSPCLKPPS4>
extern volatile __bit                   SSPCLKPPS4          __at(0x7104);	// @ (0xE20 * 8 + 4)
#define                                 SSPCLKPPS4_bit      _BIT_ACCESS(SSPCLKPPS,4)
// SSPDATPPS<SSPDATPPS0>
extern volatile __bit                   SSPDATPPS0          __at(0x7108);	// @ (0xE21 * 8 + 0)
#define                                 SSPDATPPS0_bit      _BIT_ACCESS(SSPDATPPS,0)
// SSPDATPPS<SSPDATPPS1>
extern volatile __bit                   SSPDATPPS1          __at(0x7109);	// @ (0xE21 * 8 + 1)
#define                                 SSPDATPPS1_bit      _BIT_ACCESS(SSPDATPPS,1)
// SSPDATPPS<SSPDATPPS2>
extern volatile __bit                   SSPDATPPS2          __at(0x710A);	// @ (0xE21 * 8 + 2)
#define                                 SSPDATPPS2_bit      _BIT_ACCESS(SSPDATPPS,2)
// SSPDATPPS<SSPDATPPS3>
extern volatile __bit                   SSPDATPPS3          __at(0x710B);	// @ (0xE21 * 8 + 3)
#define                                 SSPDATPPS3_bit      _BIT_ACCESS(SSPDATPPS,3)
// SSPDATPPS<SSPDATPPS4>
extern volatile __bit                   SSPDATPPS4          __at(0x710C);	// @ (0xE21 * 8 + 4)
#define                                 SSPDATPPS4_bit      _BIT_ACCESS(SSPDATPPS,4)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0x10A8);	// @ (0x215 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0x10A9);	// @ (0x215 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// SSPSSPPS<SSPSSPPS0>
extern volatile __bit                   SSPSSPPS0           __at(0x7110);	// @ (0xE22 * 8 + 0)
#define                                 SSPSSPPS0_bit       _BIT_ACCESS(SSPSSPPS,0)
// SSPSSPPS<SSPSSPPS1>
extern volatile __bit                   SSPSSPPS1           __at(0x7111);	// @ (0xE22 * 8 + 1)
#define                                 SSPSSPPS1_bit       _BIT_ACCESS(SSPSSPPS,1)
// SSPSSPPS<SSPSSPPS2>
extern volatile __bit                   SSPSSPPS2           __at(0x7112);	// @ (0xE22 * 8 + 2)
#define                                 SSPSSPPS2_bit       _BIT_ACCESS(SSPSSPPS,2)
// SSPSSPPS<SSPSSPPS3>
extern volatile __bit                   SSPSSPPS3           __at(0x7113);	// @ (0xE22 * 8 + 3)
#define                                 SSPSSPPS3_bit       _BIT_ACCESS(SSPSSPPS,3)
// SSPSSPPS<SSPSSPPS4>
extern volatile __bit                   SSPSSPPS4           __at(0x7114);	// @ (0xE22 * 8 + 4)
#define                                 SSPSSPPS4_bit       _BIT_ACCESS(SSPSSPPS,4)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x38AA);	// @ (0x715 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON<STKOVF>
extern volatile __bit                   STKOVF              __at(0x4B7);	// @ (0x96 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON,7)
// PCON<STKUNF>
extern volatile __bit                   STKUNF              __at(0x4B6);	// @ (0x96 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON,6)
// AT1STPTL<STPT0>
extern volatile __bit                   STPT0               __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(AT1STPTL,0)
// AT1STPTL<STPT1>
extern volatile __bit                   STPT1               __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(AT1STPTL,1)
// AT1STPTH<STPT10>
extern volatile __bit                   STPT10              __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(AT1STPTH,2)
// AT1STPTH<STPT11>
extern volatile __bit                   STPT11              __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(AT1STPTH,3)
// AT1STPTH<STPT12>
extern volatile __bit                   STPT12              __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(AT1STPTH,4)
// AT1STPTH<STPT13>
extern volatile __bit                   STPT13              __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(AT1STPTH,5)
// AT1STPTH<STPT14>
extern volatile __bit                   STPT14              __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 STPT14_bit          _BIT_ACCESS(AT1STPTH,6)
// AT1STPTL<STPT2>
extern volatile __bit                   STPT2               __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(AT1STPTL,2)
// AT1STPTL<STPT3>
extern volatile __bit                   STPT3               __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(AT1STPTL,3)
// AT1STPTL<STPT4>
extern volatile __bit                   STPT4               __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(AT1STPTL,4)
// AT1STPTL<STPT5>
extern volatile __bit                   STPT5               __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(AT1STPTL,5)
// AT1STPTL<STPT6>
extern volatile __bit                   STPT6               __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(AT1STPTL,6)
// AT1STPTL<STPT7>
extern volatile __bit                   STPT7               __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(AT1STPTL,7)
// AT1STPTH<STPT8>
extern volatile __bit                   STPT8               __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(AT1STPTH,0)
// AT1STPTH<STPT9>
extern volatile __bit                   STPT9               __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(AT1STPTH,1)
// CWG1OCON0<STRA>
extern volatile __bit                   STRA                __at(0x34A8);	// @ (0x695 * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(CWG1OCON0,0)
// CWG1OCON0<STRB>
extern volatile __bit                   STRB                __at(0x34A9);	// @ (0x695 * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(CWG1OCON0,1)
// CWG1OCON0<STRC>
extern volatile __bit                   STRC                __at(0x34AA);	// @ (0x695 * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(CWG1OCON0,2)
// CWG1OCON0<STRD>
extern volatile __bit                   STRD                __at(0x34AB);	// @ (0x695 * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(CWG1OCON0,3)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// TX1STA<SYNC>
extern volatile __bit                   SYNC                __at(0xCF4);	// @ (0x19E * 8 + 4)
#define                                 SYNC_bit            _BIT_ACCESS(TX1STA,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0x7088);	// @ (0xE11 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0x7089);	// @ (0xE11 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0x708A);	// @ (0xE11 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0x708B);	// @ (0xE11 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0x708C);	// @ (0xE11 * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// OPTION_REG<T0CS>
extern volatile __bit                   T0CS                __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 T0CS_bit            _BIT_ACCESS(OPTION_REG,5)
// INTCON<T0IE>
extern volatile __bit                   T0IE                __at(0x5D);	// @ (0xB * 8 + 5)
#define                                 T0IE_bit            _BIT_ACCESS(INTCON,5)
// INTCON<T0IF>
extern volatile __bit                   T0IF                __at(0x5A);	// @ (0xB * 8 + 2)
#define                                 T0IF_bit            _BIT_ACCESS(INTCON,2)
// OPTION_REG<T0SE>
extern volatile __bit                   T0SE                __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 T0SE_bit            _BIT_ACCESS(OPTION_REG,4)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0x7090);	// @ (0xE12 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0x7091);	// @ (0xE12 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0x7092);	// @ (0xE12 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0x7093);	// @ (0xE12 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0x7094);	// @ (0xE12 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0xCB);	// @ (0x19 * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0xCE);	// @ (0x19 * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0x7098);	// @ (0xE13 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0x7099);	// @ (0xE13 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0x709A);	// @ (0xE13 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0x709B);	// @ (0xE13 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0x709C);	// @ (0xE13 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0xCC);	// @ (0x19 * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GCON<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0xC8);	// @ (0x19 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GCON,0)
// T1GCON<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0xC9);	// @ (0x19 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GCON,1)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0xCD);	// @ (0x19 * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0xCA);	// @ (0x19 * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0xEE);	// @ (0x1D * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0xE4);	// @ (0x1C * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0xE5);	// @ (0x1C * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0xE6);	// @ (0x1C * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0xED);	// @ (0x1D * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0xF0);	// @ (0x1E * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0xF1);	// @ (0x1E * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0xF2);	// @ (0x1E * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0xF3);	// @ (0x1E * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0xE8);	// @ (0x1D * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0xE9);	// @ (0x1D * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0xEA);	// @ (0x1D * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0xEB);	// @ (0x1D * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0xEC);	// @ (0x1D * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0xE0);	// @ (0x1C * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0xE1);	// @ (0x1C * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0xE2);	// @ (0x1C * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0xE3);	// @ (0x1C * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2PPS<T2PPS0>
extern volatile __bit                   T2PPS0              __at(0x70C0);	// @ (0xE18 * 8 + 0)
#define                                 T2PPS0_bit          _BIT_ACCESS(T2PPS,0)
// T2PPS<T2PPS1>
extern volatile __bit                   T2PPS1              __at(0x70C1);	// @ (0xE18 * 8 + 1)
#define                                 T2PPS1_bit          _BIT_ACCESS(T2PPS,1)
// T2PPS<T2PPS2>
extern volatile __bit                   T2PPS2              __at(0x70C2);	// @ (0xE18 * 8 + 2)
#define                                 T2PPS2_bit          _BIT_ACCESS(T2PPS,2)
// T2PPS<T2PPS3>
extern volatile __bit                   T2PPS3              __at(0x70C3);	// @ (0xE18 * 8 + 3)
#define                                 T2PPS3_bit          _BIT_ACCESS(T2PPS,3)
// T2PPS<T2PPS4>
extern volatile __bit                   T2PPS4              __at(0x70C4);	// @ (0xE18 * 8 + 4)
#define                                 T2PPS4_bit          _BIT_ACCESS(T2PPS,4)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0xEF);	// @ (0x1D * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0xF9);	// @ (0x1F * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0xFA);	// @ (0x1F * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0xFB);	// @ (0x1F * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T3CKIPPS<T3CKIPPS0>
extern volatile __bit                   T3CKIPPS0           __at(0x70C8);	// @ (0xE19 * 8 + 0)
#define                                 T3CKIPPS0_bit       _BIT_ACCESS(T3CKIPPS,0)
// T3CKIPPS<T3CKIPPS1>
extern volatile __bit                   T3CKIPPS1           __at(0x70C9);	// @ (0xE19 * 8 + 1)
#define                                 T3CKIPPS1_bit       _BIT_ACCESS(T3CKIPPS,1)
// T3CKIPPS<T3CKIPPS2>
extern volatile __bit                   T3CKIPPS2           __at(0x70CA);	// @ (0xE19 * 8 + 2)
#define                                 T3CKIPPS2_bit       _BIT_ACCESS(T3CKIPPS,2)
// T3CKIPPS<T3CKIPPS3>
extern volatile __bit                   T3CKIPPS3           __at(0x70CB);	// @ (0xE19 * 8 + 3)
#define                                 T3CKIPPS3_bit       _BIT_ACCESS(T3CKIPPS,3)
// T3CKIPPS<T3CKIPPS4>
extern volatile __bit                   T3CKIPPS4           __at(0x70CC);	// @ (0xE19 * 8 + 4)
#define                                 T3CKIPPS4_bit       _BIT_ACCESS(T3CKIPPS,4)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x24AC);	// @ (0x495 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x24AD);	// @ (0x495 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3GCON<T3GGO_nDONE>
extern volatile __bit                   T3GGO_nDONE         __at(0x24B3);	// @ (0x496 * 8 + 3)
#define                                 T3GGO_nDONE_bit     _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x24B6);	// @ (0x496 * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GPPS<T3GPPS0>
extern volatile __bit                   T3GPPS0             __at(0x70D0);	// @ (0xE1A * 8 + 0)
#define                                 T3GPPS0_bit         _BIT_ACCESS(T3GPPS,0)
// T3GPPS<T3GPPS1>
extern volatile __bit                   T3GPPS1             __at(0x70D1);	// @ (0xE1A * 8 + 1)
#define                                 T3GPPS1_bit         _BIT_ACCESS(T3GPPS,1)
// T3GPPS<T3GPPS2>
extern volatile __bit                   T3GPPS2             __at(0x70D2);	// @ (0xE1A * 8 + 2)
#define                                 T3GPPS2_bit         _BIT_ACCESS(T3GPPS,2)
// T3GPPS<T3GPPS3>
extern volatile __bit                   T3GPPS3             __at(0x70D3);	// @ (0xE1A * 8 + 3)
#define                                 T3GPPS3_bit         _BIT_ACCESS(T3GPPS,3)
// T3GPPS<T3GPPS4>
extern volatile __bit                   T3GPPS4             __at(0x70D4);	// @ (0xE1A * 8 + 4)
#define                                 T3GPPS4_bit         _BIT_ACCESS(T3GPPS,4)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x24B4);	// @ (0x496 * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GCON<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x24B0);	// @ (0x496 * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GCON,0)
// T3GCON<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x24B1);	// @ (0x496 * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GCON,1)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x24B5);	// @ (0x496 * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x24B2);	// @ (0x496 * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3SYNC>
extern volatile __bit                   T3SYNC              __at(0x24AA);	// @ (0x495 * 8 + 2)
#define                                 T3SYNC_bit          _BIT_ACCESS(T3CON,2)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x20B6);	// @ (0x416 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x20AC);	// @ (0x415 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x20AD);	// @ (0x415 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x20AE);	// @ (0x415 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x20B3);	// @ (0x416 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x20AF);	// @ (0x415 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x20A8);	// @ (0x415 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x20A9);	// @ (0x415 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x20AA);	// @ (0x415 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x20AB);	// @ (0x415 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4PPS<T4PPS0>
extern volatile __bit                   T4PPS0              __at(0x70D8);	// @ (0xE1B * 8 + 0)
#define                                 T4PPS0_bit          _BIT_ACCESS(T4PPS,0)
// T4PPS<T4PPS1>
extern volatile __bit                   T4PPS1              __at(0x70D9);	// @ (0xE1B * 8 + 1)
#define                                 T4PPS1_bit          _BIT_ACCESS(T4PPS,1)
// T4PPS<T4PPS2>
extern volatile __bit                   T4PPS2              __at(0x70DA);	// @ (0xE1B * 8 + 2)
#define                                 T4PPS2_bit          _BIT_ACCESS(T4PPS,2)
// T4PPS<T4PPS3>
extern volatile __bit                   T4PPS3              __at(0x70DB);	// @ (0xE1B * 8 + 3)
#define                                 T4PPS3_bit          _BIT_ACCESS(T4PPS,3)
// T4PPS<T4PPS4>
extern volatile __bit                   T4PPS4              __at(0x70DC);	// @ (0xE1B * 8 + 4)
#define                                 T4PPS4_bit          _BIT_ACCESS(T4PPS,4)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x20B7);	// @ (0x416 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x20C0);	// @ (0x418 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x20C1);	// @ (0x418 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x20C2);	// @ (0x418 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x20C3);	// @ (0x418 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T5CKIPPS<T5CKIPPS0>
extern volatile __bit                   T5CKIPPS0           __at(0x70E0);	// @ (0xE1C * 8 + 0)
#define                                 T5CKIPPS0_bit       _BIT_ACCESS(T5CKIPPS,0)
// T5CKIPPS<T5CKIPPS1>
extern volatile __bit                   T5CKIPPS1           __at(0x70E1);	// @ (0xE1C * 8 + 1)
#define                                 T5CKIPPS1_bit       _BIT_ACCESS(T5CKIPPS,1)
// T5CKIPPS<T5CKIPPS2>
extern volatile __bit                   T5CKIPPS2           __at(0x70E2);	// @ (0xE1C * 8 + 2)
#define                                 T5CKIPPS2_bit       _BIT_ACCESS(T5CKIPPS,2)
// T5CKIPPS<T5CKIPPS3>
extern volatile __bit                   T5CKIPPS3           __at(0x70E3);	// @ (0xE1C * 8 + 3)
#define                                 T5CKIPPS3_bit       _BIT_ACCESS(T5CKIPPS,3)
// T5CKIPPS<T5CKIPPS4>
extern volatile __bit                   T5CKIPPS4           __at(0x70E4);	// @ (0xE1C * 8 + 4)
#define                                 T5CKIPPS4_bit       _BIT_ACCESS(T5CKIPPS,4)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x24E4);	// @ (0x49C * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x24E5);	// @ (0x49C * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5GCON<T5GGO_nDONE>
extern volatile __bit                   T5GGO_nDONE         __at(0x24EB);	// @ (0x49D * 8 + 3)
#define                                 T5GGO_nDONE_bit     _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x24EE);	// @ (0x49D * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GPPS<T5GPPS0>
extern volatile __bit                   T5GPPS0             __at(0x70E8);	// @ (0xE1D * 8 + 0)
#define                                 T5GPPS0_bit         _BIT_ACCESS(T5GPPS,0)
// T5GPPS<T5GPPS1>
extern volatile __bit                   T5GPPS1             __at(0x70E9);	// @ (0xE1D * 8 + 1)
#define                                 T5GPPS1_bit         _BIT_ACCESS(T5GPPS,1)
// T5GPPS<T5GPPS2>
extern volatile __bit                   T5GPPS2             __at(0x70EA);	// @ (0xE1D * 8 + 2)
#define                                 T5GPPS2_bit         _BIT_ACCESS(T5GPPS,2)
// T5GPPS<T5GPPS3>
extern volatile __bit                   T5GPPS3             __at(0x70EB);	// @ (0xE1D * 8 + 3)
#define                                 T5GPPS3_bit         _BIT_ACCESS(T5GPPS,3)
// T5GPPS<T5GPPS4>
extern volatile __bit                   T5GPPS4             __at(0x70EC);	// @ (0xE1D * 8 + 4)
#define                                 T5GPPS4_bit         _BIT_ACCESS(T5GPPS,4)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x24EC);	// @ (0x49D * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GCON<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GCON,0)
// T5GCON<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GCON,1)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x24ED);	// @ (0x49D * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5SYNC>
extern volatile __bit                   T5SYNC              __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 T5SYNC_bit          _BIT_ACCESS(T5CON,2)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x20EE);	// @ (0x41D * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x20E4);	// @ (0x41C * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x20E5);	// @ (0x41C * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x20E6);	// @ (0x41C * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x20ED);	// @ (0x41D * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x20F0);	// @ (0x41E * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x20F1);	// @ (0x41E * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x20F2);	// @ (0x41E * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x20F3);	// @ (0x41E * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x20E8);	// @ (0x41D * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x20E9);	// @ (0x41D * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x20EA);	// @ (0x41D * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x20EB);	// @ (0x41D * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x20EC);	// @ (0x41D * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x20E0);	// @ (0x41C * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x20E1);	// @ (0x41C * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x20E2);	// @ (0x41C * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x20E3);	// @ (0x41C * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6PPS<T6PPS0>
extern volatile __bit                   T6PPS0              __at(0x70F0);	// @ (0xE1E * 8 + 0)
#define                                 T6PPS0_bit          _BIT_ACCESS(T6PPS,0)
// T6PPS<T6PPS1>
extern volatile __bit                   T6PPS1              __at(0x70F1);	// @ (0xE1E * 8 + 1)
#define                                 T6PPS1_bit          _BIT_ACCESS(T6PPS,1)
// T6PPS<T6PPS2>
extern volatile __bit                   T6PPS2              __at(0x70F2);	// @ (0xE1E * 8 + 2)
#define                                 T6PPS2_bit          _BIT_ACCESS(T6PPS,2)
// T6PPS<T6PPS3>
extern volatile __bit                   T6PPS3              __at(0x70F3);	// @ (0xE1E * 8 + 3)
#define                                 T6PPS3_bit          _BIT_ACCESS(T6PPS,3)
// T6PPS<T6PPS4>
extern volatile __bit                   T6PPS4              __at(0x70F4);	// @ (0xE1E * 8 + 4)
#define                                 T6PPS4_bit          _BIT_ACCESS(T6PPS,4)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x20EF);	// @ (0x41D * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x20F8);	// @ (0x41F * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x20F9);	// @ (0x41F * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x20FA);	// @ (0x41F * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x20FB);	// @ (0x41F * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// OPTION_REG<TMR0CS>
extern volatile __bit                   TMR0CS              __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 TMR0CS_bit          _BIT_ACCESS(OPTION_REG,5)
// INTCON<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x5D);	// @ (0xB * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(INTCON,5)
// INTCON<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x5A);	// @ (0xB * 8 + 2)
#define                                 TMR0IF_bit          _BIT_ACCESS(INTCON,2)
// OPTION_REG<TMR0SE>
extern volatile __bit                   TMR0SE              __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 TMR0SE_bit          _BIT_ACCESS(OPTION_REG,4)
// T1CON<TMR1CS0>
extern volatile __bit                   TMR1CS0             __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 TMR1CS0_bit         _BIT_ACCESS(T1CON,6)
// T1CON<TMR1CS1>
extern volatile __bit                   TMR1CS1             __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 TMR1CS1_bit         _BIT_ACCESS(T1CON,7)
// T1GCON<TMR1GE>
extern volatile __bit                   TMR1GE              __at(0xCF);	// @ (0x19 * 8 + 7)
#define                                 TMR1GE_bit          _BIT_ACCESS(T1GCON,7)
// PIE1<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE1,7)
// PIR1<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x87);	// @ (0x10 * 8 + 7)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR1,7)
// PIE1<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE1,0)
// PIR1<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x80);	// @ (0x10 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR1,0)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// CWG1AS1<TMR2AS>
extern volatile __bit                   TMR2AS              __at(0x34A4);	// @ (0x694 * 8 + 4)
#define                                 TMR2AS_bit          _BIT_ACCESS(CWG1AS1,4)
// PIE1<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x481);	// @ (0x90 * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE1,1)
// PIR1<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x81);	// @ (0x10 * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR1,1)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// T3CON<TMR3CS0>
extern volatile __bit                   TMR3CS0             __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 TMR3CS0_bit         _BIT_ACCESS(T3CON,6)
// T3CON<TMR3CS1>
extern volatile __bit                   TMR3CS1             __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 TMR3CS1_bit         _BIT_ACCESS(T3CON,7)
// T3GCON<TMR3GE>
extern volatile __bit                   TMR3GE              __at(0x24B7);	// @ (0x496 * 8 + 7)
#define                                 TMR3GE_bit          _BIT_ACCESS(T3GCON,7)
// PIE5<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x4A7);	// @ (0x94 * 8 + 7)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE5,7)
// PIR5<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0xA7);	// @ (0x14 * 8 + 7)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR5,7)
// PIE5<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x4A6);	// @ (0x94 * 8 + 6)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE5,6)
// PIR5<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0xA6);	// @ (0x14 * 8 + 6)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR5,6)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// CWG1AS1<TMR4AS>
extern volatile __bit                   TMR4AS              __at(0x34A5);	// @ (0x694 * 8 + 5)
#define                                 TMR4AS_bit          _BIT_ACCESS(CWG1AS1,5)
// PIE2<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE2,1)
// PIR2<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x89);	// @ (0x11 * 8 + 1)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR2,1)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x20AF);	// @ (0x415 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// T5CON<TMR5CS0>
extern volatile __bit                   TMR5CS0             __at(0x24E6);	// @ (0x49C * 8 + 6)
#define                                 TMR5CS0_bit         _BIT_ACCESS(T5CON,6)
// T5CON<TMR5CS1>
extern volatile __bit                   TMR5CS1             __at(0x24E7);	// @ (0x49C * 8 + 7)
#define                                 TMR5CS1_bit         _BIT_ACCESS(T5CON,7)
// T5GCON<TMR5GE>
extern volatile __bit                   TMR5GE              __at(0x24EF);	// @ (0x49D * 8 + 7)
#define                                 TMR5GE_bit          _BIT_ACCESS(T5GCON,7)
// PIE5<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE5,5)
// PIR5<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0xA5);	// @ (0x14 * 8 + 5)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR5,5)
// PIE5<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x4A4);	// @ (0x94 * 8 + 4)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0xA4);	// @ (0x14 * 8 + 4)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR5,4)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// CWG1AS1<TMR6AS>
extern volatile __bit                   TMR6AS              __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 TMR6AS_bit          _BIT_ACCESS(CWG1AS1,6)
// PIE2<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE2,2)
// PIR2<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR2,2)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// ADCON2<TRIGSEL0>
extern volatile __bit                   TRIGSEL0            __at(0x4FB);	// @ (0x9F * 8 + 3)
#define                                 TRIGSEL0_bit        _BIT_ACCESS(ADCON2,3)
// ADCON2<TRIGSEL1>
extern volatile __bit                   TRIGSEL1            __at(0x4FC);	// @ (0x9F * 8 + 4)
#define                                 TRIGSEL1_bit        _BIT_ACCESS(ADCON2,4)
// ADCON2<TRIGSEL2>
extern volatile __bit                   TRIGSEL2            __at(0x4FD);	// @ (0x9F * 8 + 5)
#define                                 TRIGSEL2_bit        _BIT_ACCESS(ADCON2,5)
// ADCON2<TRIGSEL3>
extern volatile __bit                   TRIGSEL3            __at(0x4FE);	// @ (0x9F * 8 + 6)
#define                                 TRIGSEL3_bit        _BIT_ACCESS(ADCON2,6)
// ADCON2<TRIGSEL4>
extern volatile __bit                   TRIGSEL4            __at(0x4FF);	// @ (0x9F * 8 + 7)
#define                                 TRIGSEL4_bit        _BIT_ACCESS(ADCON2,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x461);	// @ (0x8C * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x463);	// @ (0x8C * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x465);	// @ (0x8C * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0xCF1);	// @ (0x19E * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// SCANTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x38E9);	// @ (0x71D * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x38EA);	// @ (0x71D * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<TSEL3>
extern volatile __bit                   TSEL3               __at(0x38EB);	// @ (0x71D * 8 + 3)
#define                                 TSEL3_bit           _BIT_ACCESS(SCANTRIG,3)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x8BD);	// @ (0x117 * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x8BC);	// @ (0x117 * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x4C0);	// @ (0x98 * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x4C2);	// @ (0x98 * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x4C3);	// @ (0x98 * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x4C4);	// @ (0x98 * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x4C5);	// @ (0x98 * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0xCF6);	// @ (0x19E * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0xCF0);	// @ (0x19E * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0xCF5);	// @ (0x19E * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// PIE1<TXIE>
extern volatile __bit                   TXIE                __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE1,4)
// PIR1<TXIF>
extern volatile __bit                   TXIF                __at(0x84);	// @ (0x10 * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR1,4)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0x10A1);	// @ (0x214 * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// AT1CON1<VALID>
extern volatile __bit                   VALID               __at(0x40A8);	// @ (0x815 * 8 + 0)
#define                                 VALID_bit           _BIT_ACCESS(AT1CON1,0)
// VREGCON<VREGPM0>
extern volatile __bit                   VREGPM0             __at(0xCB8);	// @ (0x197 * 8 + 0)
#define                                 VREGPM0_bit         _BIT_ACCESS(VREGCON,0)
// VREGCON<VREGPM1>
extern volatile __bit                   VREGPM1             __at(0xCB9);	// @ (0x197 * 8 + 1)
#define                                 VREGPM1_bit         _BIT_ACCESS(VREGCON,1)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0x10AF);	// @ (0x215 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x3894);	// @ (0x712 * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x3895);	// @ (0x712 * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x3896);	// @ (0x712 * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x3889);	// @ (0x711 * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x388A);	// @ (0x711 * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x388B);	// @ (0x711 * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x388C);	// @ (0x711 * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x3899);	// @ (0x713 * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x38A2);	// @ (0x714 * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x38A3);	// @ (0x714 * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x38A4);	// @ (0x714 * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x38A5);	// @ (0x714 * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x38A6);	// @ (0x714 * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x38A7);	// @ (0x714 * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x38A8);	// @ (0x715 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x38A9);	// @ (0x715 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x389A);	// @ (0x713 * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x389B);	// @ (0x713 * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x389D);	// @ (0x713 * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x389E);	// @ (0x713 * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x389F);	// @ (0x713 * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x38A0);	// @ (0x714 * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x38A1);	// @ (0x714 * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x38AA);	// @ (0x715 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x38AB);	// @ (0x715 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x38AC);	// @ (0x715 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x38AD);	// @ (0x715 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x38AE);	// @ (0x715 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0x38AF);	// @ (0x715 * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x3892);	// @ (0x712 * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x3892);	// @ (0x712 * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x1073);	// @ (0x20E * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// PMCON1<WR>
extern volatile __bit                   WR                  __at(0xCA9);	// @ (0x195 * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(PMCON1,1)
// PMCON1<WREN>
extern volatile __bit                   WREN                __at(0xCAA);	// @ (0x195 * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(PMCON1,2)
// PMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0xCAB);	// @ (0x195 * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(PMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0xCF9);	// @ (0x19F * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// CRCXORL<XOR1>
extern volatile __bit                   XOR1                __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 XOR1_bit            _BIT_ACCESS(CRCXORL,1)
// CRCXORH<XOR10>
extern volatile __bit                   XOR10               __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 XOR10_bit           _BIT_ACCESS(CRCXORH,2)
// CRCXORH<XOR11>
extern volatile __bit                   XOR11               __at(0x3CC3);	// @ (0x798 * 8 + 3)
#define                                 XOR11_bit           _BIT_ACCESS(CRCXORH,3)
// CRCXORH<XOR12>
extern volatile __bit                   XOR12               __at(0x3CC4);	// @ (0x798 * 8 + 4)
#define                                 XOR12_bit           _BIT_ACCESS(CRCXORH,4)
// CRCXORH<XOR13>
extern volatile __bit                   XOR13               __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 XOR13_bit           _BIT_ACCESS(CRCXORH,5)
// CRCXORH<XOR14>
extern volatile __bit                   XOR14               __at(0x3CC6);	// @ (0x798 * 8 + 6)
#define                                 XOR14_bit           _BIT_ACCESS(CRCXORH,6)
// CRCXORH<XOR15>
extern volatile __bit                   XOR15               __at(0x3CC7);	// @ (0x798 * 8 + 7)
#define                                 XOR15_bit           _BIT_ACCESS(CRCXORH,7)
// CRCXORL<XOR2>
extern volatile __bit                   XOR2                __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 XOR2_bit            _BIT_ACCESS(CRCXORL,2)
// CRCXORL<XOR3>
extern volatile __bit                   XOR3                __at(0x3CBB);	// @ (0x797 * 8 + 3)
#define                                 XOR3_bit            _BIT_ACCESS(CRCXORL,3)
// CRCXORL<XOR4>
extern volatile __bit                   XOR4                __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 XOR4_bit            _BIT_ACCESS(CRCXORL,4)
// CRCXORL<XOR5>
extern volatile __bit                   XOR5                __at(0x3CBD);	// @ (0x797 * 8 + 5)
#define                                 XOR5_bit            _BIT_ACCESS(CRCXORL,5)
// CRCXORL<XOR6>
extern volatile __bit                   XOR6                __at(0x3CBE);	// @ (0x797 * 8 + 6)
#define                                 XOR6_bit            _BIT_ACCESS(CRCXORL,6)
// CRCXORL<XOR7>
extern volatile __bit                   XOR7                __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 XOR7_bit            _BIT_ACCESS(CRCXORL,7)
// CRCXORH<XOR8>
extern volatile __bit                   XOR8                __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 XOR8_bit            _BIT_ACCESS(CRCXORH,0)
// CRCXORH<XOR9>
extern volatile __bit                   XOR9                __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 XOR9_bit            _BIT_ACCESS(CRCXORH,1)
// PID1Z1L<Z10>
extern volatile __bit                   Z10                 __at(0x2CD8);	// @ (0x59B * 8 + 0)
#define                                 Z10_bit             _BIT_ACCESS(PID1Z1L,0)
// PID1Z1L<Z11>
extern volatile __bit                   Z11                 __at(0x2CD9);	// @ (0x59B * 8 + 1)
#define                                 Z11_bit             _BIT_ACCESS(PID1Z1L,1)
// PID1Z1H<Z110>
extern volatile __bit                   Z110                __at(0x2CE2);	// @ (0x59C * 8 + 2)
#define                                 Z110_bit            _BIT_ACCESS(PID1Z1H,2)
// PID1Z1H<Z111>
extern volatile __bit                   Z111                __at(0x2CE3);	// @ (0x59C * 8 + 3)
#define                                 Z111_bit            _BIT_ACCESS(PID1Z1H,3)
// PID1Z1H<Z112>
extern volatile __bit                   Z112                __at(0x2CE4);	// @ (0x59C * 8 + 4)
#define                                 Z112_bit            _BIT_ACCESS(PID1Z1H,4)
// PID1Z1H<Z113>
extern volatile __bit                   Z113                __at(0x2CE5);	// @ (0x59C * 8 + 5)
#define                                 Z113_bit            _BIT_ACCESS(PID1Z1H,5)
// PID1Z1H<Z114>
extern volatile __bit                   Z114                __at(0x2CE6);	// @ (0x59C * 8 + 6)
#define                                 Z114_bit            _BIT_ACCESS(PID1Z1H,6)
// PID1Z1H<Z115>
extern volatile __bit                   Z115                __at(0x2CE7);	// @ (0x59C * 8 + 7)
#define                                 Z115_bit            _BIT_ACCESS(PID1Z1H,7)
// PID1Z1U<Z116>
extern volatile __bit                   Z116                __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 Z116_bit            _BIT_ACCESS(PID1Z1U,0)
// PID1Z1L<Z12>
extern volatile __bit                   Z12                 __at(0x2CDA);	// @ (0x59B * 8 + 2)
#define                                 Z12_bit             _BIT_ACCESS(PID1Z1L,2)
// PID1Z1L<Z13>
extern volatile __bit                   Z13                 __at(0x2CDB);	// @ (0x59B * 8 + 3)
#define                                 Z13_bit             _BIT_ACCESS(PID1Z1L,3)
// PID1Z1L<Z14>
extern volatile __bit                   Z14                 __at(0x2CDC);	// @ (0x59B * 8 + 4)
#define                                 Z14_bit             _BIT_ACCESS(PID1Z1L,4)
// PID1Z1L<Z15>
extern volatile __bit                   Z15                 __at(0x2CDD);	// @ (0x59B * 8 + 5)
#define                                 Z15_bit             _BIT_ACCESS(PID1Z1L,5)
// PID1Z1L<Z16>
extern volatile __bit                   Z16                 __at(0x2CDE);	// @ (0x59B * 8 + 6)
#define                                 Z16_bit             _BIT_ACCESS(PID1Z1L,6)
// PID1Z1L<Z17>
extern volatile __bit                   Z17                 __at(0x2CDF);	// @ (0x59B * 8 + 7)
#define                                 Z17_bit             _BIT_ACCESS(PID1Z1L,7)
// PID1Z1H<Z18>
extern volatile __bit                   Z18                 __at(0x2CE0);	// @ (0x59C * 8 + 0)
#define                                 Z18_bit             _BIT_ACCESS(PID1Z1H,0)
// PID1Z1H<Z19>
extern volatile __bit                   Z19                 __at(0x2CE1);	// @ (0x59C * 8 + 1)
#define                                 Z19_bit             _BIT_ACCESS(PID1Z1H,1)
// PID1Z2L<Z20>
extern volatile __bit                   Z20                 __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 Z20_bit             _BIT_ACCESS(PID1Z2L,0)
// PID1Z2L<Z21>
extern volatile __bit                   Z21                 __at(0x3061);	// @ (0x60C * 8 + 1)
#define                                 Z21_bit             _BIT_ACCESS(PID1Z2L,1)
// PID1Z2H<Z210>
extern volatile __bit                   Z210                __at(0x306A);	// @ (0x60D * 8 + 2)
#define                                 Z210_bit            _BIT_ACCESS(PID1Z2H,2)
// PID1Z2H<Z211>
extern volatile __bit                   Z211                __at(0x306B);	// @ (0x60D * 8 + 3)
#define                                 Z211_bit            _BIT_ACCESS(PID1Z2H,3)
// PID1Z2H<Z212>
extern volatile __bit                   Z212                __at(0x306C);	// @ (0x60D * 8 + 4)
#define                                 Z212_bit            _BIT_ACCESS(PID1Z2H,4)
// PID1Z2H<Z213>
extern volatile __bit                   Z213                __at(0x306D);	// @ (0x60D * 8 + 5)
#define                                 Z213_bit            _BIT_ACCESS(PID1Z2H,5)
// PID1Z2H<Z214>
extern volatile __bit                   Z214                __at(0x306E);	// @ (0x60D * 8 + 6)
#define                                 Z214_bit            _BIT_ACCESS(PID1Z2H,6)
// PID1Z2H<Z215>
extern volatile __bit                   Z215                __at(0x306F);	// @ (0x60D * 8 + 7)
#define                                 Z215_bit            _BIT_ACCESS(PID1Z2H,7)
// PID1Z2U<Z216>
extern volatile __bit                   Z216                __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 Z216_bit            _BIT_ACCESS(PID1Z2U,0)
// PID1Z2L<Z22>
extern volatile __bit                   Z22                 __at(0x3062);	// @ (0x60C * 8 + 2)
#define                                 Z22_bit             _BIT_ACCESS(PID1Z2L,2)
// PID1Z2L<Z23>
extern volatile __bit                   Z23                 __at(0x3063);	// @ (0x60C * 8 + 3)
#define                                 Z23_bit             _BIT_ACCESS(PID1Z2L,3)
// PID1Z2L<Z24>
extern volatile __bit                   Z24                 __at(0x3064);	// @ (0x60C * 8 + 4)
#define                                 Z24_bit             _BIT_ACCESS(PID1Z2L,4)
// PID1Z2L<Z25>
extern volatile __bit                   Z25                 __at(0x3065);	// @ (0x60C * 8 + 5)
#define                                 Z25_bit             _BIT_ACCESS(PID1Z2L,5)
// PID1Z2L<Z26>
extern volatile __bit                   Z26                 __at(0x3066);	// @ (0x60C * 8 + 6)
#define                                 Z26_bit             _BIT_ACCESS(PID1Z2L,6)
// PID1Z2L<Z27>
extern volatile __bit                   Z27                 __at(0x3067);	// @ (0x60C * 8 + 7)
#define                                 Z27_bit             _BIT_ACCESS(PID1Z2L,7)
// PID1Z2H<Z28>
extern volatile __bit                   Z28                 __at(0x3068);	// @ (0x60D * 8 + 0)
#define                                 Z28_bit             _BIT_ACCESS(PID1Z2H,0)
// PID1Z2H<Z29>
extern volatile __bit                   Z29                 __at(0x3069);	// @ (0x60D * 8 + 1)
#define                                 Z29_bit             _BIT_ACCESS(PID1Z2H,1)
// ZCD1CON<ZCD1EN>
extern volatile __bit                   ZCD1EN              __at(0x8E7);	// @ (0x11C * 8 + 7)
#define                                 ZCD1EN_bit          _BIT_ACCESS(ZCD1CON,7)
// ZCD1CON<ZCD1INTN>
extern volatile __bit                   ZCD1INTN            __at(0x8E0);	// @ (0x11C * 8 + 0)
#define                                 ZCD1INTN_bit        _BIT_ACCESS(ZCD1CON,0)
// ZCD1CON<ZCD1INTP>
extern volatile __bit                   ZCD1INTP            __at(0x8E1);	// @ (0x11C * 8 + 1)
#define                                 ZCD1INTP_bit        _BIT_ACCESS(ZCD1CON,1)
// ZCD1CON<ZCD1OUT>
extern volatile __bit                   ZCD1OUT             __at(0x8E5);	// @ (0x11C * 8 + 5)
#define                                 ZCD1OUT_bit         _BIT_ACCESS(ZCD1CON,5)
// ZCD1CON<ZCD1POL>
extern volatile __bit                   ZCD1POL             __at(0x8E4);	// @ (0x11C * 8 + 4)
#define                                 ZCD1POL_bit         _BIT_ACCESS(ZCD1CON,4)
// PIE3<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x494);	// @ (0x92 * 8 + 4)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR3,4)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// STATUS_SHAD<Z_SHAD>
extern volatile __bit                   Z_SHAD              __at(0x7F22);	// @ (0xFE4 * 8 + 2)
#define                                 Z_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,2)
// PCON<nBOR>
extern volatile __bit                   nBOR                __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON<nPOR>
extern volatile __bit                   nPOR                __at(0x4B1);	// @ (0x96 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON,1)
// PCON<nRI>
extern volatile __bit                   nRI                 __at(0x4B2);	// @ (0x96 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON,2)
// PCON<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x4B3);	// @ (0x96 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON,3)
// PCON<nRWDT>
extern volatile __bit                   nRWDT               __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON,4)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// PCON<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x4B5);	// @ (0x96 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON,5)
// OPTION_REG<nWPUEN>
extern volatile __bit                   nWPUEN              __at(0x4AF);	// @ (0x95 * 8 + 7)
#define                                 nWPUEN_bit          _BIT_ACCESS(OPTION_REG,7)

#endif // _PIC16F1615_H_
