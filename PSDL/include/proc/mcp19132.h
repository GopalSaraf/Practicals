// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MCP19132_H_
#define _MCP19132_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * MCP19132
 */
#ifndef _XC_H_
#warning Header file mcp19132.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :5;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x5
#define _BSR_BSR_LENGTH                                     0x5
#define _BSR_BSR_MASK                                       0x1F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTEDG                 :1;
        unsigned                        :5;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_INTEDG_POSN                                 0x0
#define _INTCON_INTEDG_POSITION                             0x0
#define _INTCON_INTEDG_SIZE                                 0x1
#define _INTCON_INTEDG_LENGTH                               0x1
#define _INTCON_INTEDG_MASK                                 0x1
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x00D);
#ifndef _LIB_BUILD
asm("PORTB equ 0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x00D);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x011);
#ifndef _LIB_BUILD
asm("TRISA equ 011h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x011);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x012);
#ifndef _LIB_BUILD
asm("TRISB equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x012);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x013);
#ifndef _LIB_BUILD
asm("TRISC equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x013);
// bitfield macros
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x016);
#ifndef _LIB_BUILD
asm("LATA equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x016);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x017);
#ifndef _LIB_BUILD
asm("LATB equ 017h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x017);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x018);
#ifndef _LIB_BUILD
asm("LATC equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x018);
// bitfield macros
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x01C);
#ifndef _LIB_BUILD
asm("TMR0L equ 01Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x01C);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x01D);
#ifndef _LIB_BUILD
asm("TMR0H equ 01Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x01D);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x01E);
#ifndef _LIB_BUILD
asm("T0CON0 equ 01Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0OUTPS                :4;
        unsigned T016BIT                :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x01E);
// bitfield macros
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x01F);
#ifndef _LIB_BUILD
asm("T0CON1 equ 01Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKPS                 :4;
        unsigned T0ASYNC                :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x01F);
// bitfield macros
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x08C);
#ifndef _LIB_BUILD
asm("ADRES equ 08Ch");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x08C);
#ifndef _LIB_BUILD
asm("ADRESL equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x08C);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x08D);
#ifndef _LIB_BUILD
asm("ADRESH equ 08Dh");
#endif

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x08E);
#ifndef _LIB_BUILD
asm("ADCON0 equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADON                   :1;
        unsigned GO_nDONE               :1;
        unsigned CHS                    :5;
    };
    struct {
        unsigned                        :2;
        unsigned CHS0                   :1;
        unsigned CHS1                   :1;
        unsigned CHS2                   :1;
        unsigned CHS3                   :1;
        unsigned CHS4                   :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x08E);
// bitfield macros
#define _ADCON0_ADON_POSN                                   0x0
#define _ADCON0_ADON_POSITION                               0x0
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x1
#define _ADCON0_GO_nDONE_POSN                               0x1
#define _ADCON0_GO_nDONE_POSITION                           0x1
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x2
#define _ADCON0_CHS_POSN                                    0x2
#define _ADCON0_CHS_POSITION                                0x2
#define _ADCON0_CHS_SIZE                                    0x5
#define _ADCON0_CHS_LENGTH                                  0x5
#define _ADCON0_CHS_MASK                                    0x7C
#define _ADCON0_CHS0_POSN                                   0x2
#define _ADCON0_CHS0_POSITION                               0x2
#define _ADCON0_CHS0_SIZE                                   0x1
#define _ADCON0_CHS0_LENGTH                                 0x1
#define _ADCON0_CHS0_MASK                                   0x4
#define _ADCON0_CHS1_POSN                                   0x3
#define _ADCON0_CHS1_POSITION                               0x3
#define _ADCON0_CHS1_SIZE                                   0x1
#define _ADCON0_CHS1_LENGTH                                 0x1
#define _ADCON0_CHS1_MASK                                   0x8
#define _ADCON0_CHS2_POSN                                   0x4
#define _ADCON0_CHS2_POSITION                               0x4
#define _ADCON0_CHS2_SIZE                                   0x1
#define _ADCON0_CHS2_LENGTH                                 0x1
#define _ADCON0_CHS2_MASK                                   0x10
#define _ADCON0_CHS3_POSN                                   0x5
#define _ADCON0_CHS3_POSITION                               0x5
#define _ADCON0_CHS3_SIZE                                   0x1
#define _ADCON0_CHS3_LENGTH                                 0x1
#define _ADCON0_CHS3_MASK                                   0x20
#define _ADCON0_CHS4_POSN                                   0x6
#define _ADCON0_CHS4_POSITION                               0x6
#define _ADCON0_CHS4_SIZE                                   0x1
#define _ADCON0_CHS4_LENGTH                                 0x1
#define _ADCON0_CHS4_MASK                                   0x40

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x08F);
#ifndef _LIB_BUILD
asm("ADCON1 equ 08Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF                 :1;
        unsigned                        :3;
        unsigned ADCS                   :3;
        unsigned ADFM                   :1;
    };
    struct {
        unsigned                        :4;
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x08F);
// bitfield macros
#define _ADCON1_ADPREF_POSN                                 0x0
#define _ADCON1_ADPREF_POSITION                             0x0
#define _ADCON1_ADPREF_SIZE                                 0x1
#define _ADCON1_ADPREF_LENGTH                               0x1
#define _ADCON1_ADPREF_MASK                                 0x1
#define _ADCON1_ADCS_POSN                                   0x4
#define _ADCON1_ADCS_POSITION                               0x4
#define _ADCON1_ADCS_SIZE                                   0x3
#define _ADCON1_ADCS_LENGTH                                 0x3
#define _ADCON1_ADCS_MASK                                   0x70
#define _ADCON1_ADFM_POSN                                   0x7
#define _ADCON1_ADFM_POSITION                               0x7
#define _ADCON1_ADFM_SIZE                                   0x1
#define _ADCON1_ADFM_LENGTH                                 0x1
#define _ADCON1_ADFM_MASK                                   0x80
#define _ADCON1_ADCS0_POSN                                  0x4
#define _ADCON1_ADCS0_POSITION                              0x4
#define _ADCON1_ADCS0_SIZE                                  0x1
#define _ADCON1_ADCS0_LENGTH                                0x1
#define _ADCON1_ADCS0_MASK                                  0x10
#define _ADCON1_ADCS1_POSN                                  0x5
#define _ADCON1_ADCS1_POSITION                              0x5
#define _ADCON1_ADCS1_SIZE                                  0x1
#define _ADCON1_ADCS1_LENGTH                                0x1
#define _ADCON1_ADCS1_MASK                                  0x20
#define _ADCON1_ADCS2_POSN                                  0x6
#define _ADCON1_ADCS2_POSITION                              0x6
#define _ADCON1_ADCS2_SIZE                                  0x1
#define _ADCON1_ADCS2_LENGTH                                0x1
#define _ADCON1_ADCS2_MASK                                  0x40

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x090);
#ifndef _LIB_BUILD
asm("ADACT equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACT                  :4;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x090);
// bitfield macros
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x4
#define _ADACT_ADACT_LENGTH                                 0x4
#define _ADACT_ADACT_MASK                                   0xF
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x119);
#ifndef _LIB_BUILD
asm("RC1REG equ 0119h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG equ 0119h");
#endif
extern volatile unsigned char           RCREG1              __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x119);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x119);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x119);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x11A);
#ifndef _LIB_BUILD
asm("TX1REG equ 011Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 011Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG equ 011Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x11A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x11A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x11A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 011Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 011Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG equ 011Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 011Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 011Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x11B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x11B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x11B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x11B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x11C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 011Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 011Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x11C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x11C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x11C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x11D);
#ifndef _LIB_BUILD
asm("RC1STA equ 011Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 011Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA equ 011Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x11D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x11D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x11D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x11E);
#ifndef _LIB_BUILD
asm("TX1STA equ 011Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 011Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA equ 011Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x11E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x11E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x11E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 011Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 011Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x11F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x11F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x11F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x11F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x11F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x18C);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x18C);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x18D);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 018Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x18D);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x18E);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x18E);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x18F);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 018Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x18F);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x190);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0190h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x190);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x191);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x191);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x192);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x192);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: SSP1ADD2
#define SSP1ADD2 SSP1ADD2
extern volatile unsigned char           SSP1ADD2            __at(0x193);
#ifndef _LIB_BUILD
asm("SSP1ADD2 equ 0193h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned SSPADD0                :1;
        unsigned SSPADD1                :1;
        unsigned SSPADD2                :1;
        unsigned SSPADD3                :1;
        unsigned SSPADD4                :1;
        unsigned SSPADD5                :1;
        unsigned SSPADD6                :1;
        unsigned SSPADD7                :1;
    };
} SSP1ADD2bits_t;
extern volatile SSP1ADD2bits_t SSP1ADD2bits __at(0x193);
// bitfield macros
#define _SSP1ADD2_SSPADD_POSN                               0x0
#define _SSP1ADD2_SSPADD_POSITION                           0x0
#define _SSP1ADD2_SSPADD_SIZE                               0x8
#define _SSP1ADD2_SSPADD_LENGTH                             0x8
#define _SSP1ADD2_SSPADD_MASK                               0xFF
#define _SSP1ADD2_SSPADD0_POSN                              0x0
#define _SSP1ADD2_SSPADD0_POSITION                          0x0
#define _SSP1ADD2_SSPADD0_SIZE                              0x1
#define _SSP1ADD2_SSPADD0_LENGTH                            0x1
#define _SSP1ADD2_SSPADD0_MASK                              0x1
#define _SSP1ADD2_SSPADD1_POSN                              0x1
#define _SSP1ADD2_SSPADD1_POSITION                          0x1
#define _SSP1ADD2_SSPADD1_SIZE                              0x1
#define _SSP1ADD2_SSPADD1_LENGTH                            0x1
#define _SSP1ADD2_SSPADD1_MASK                              0x2
#define _SSP1ADD2_SSPADD2_POSN                              0x2
#define _SSP1ADD2_SSPADD2_POSITION                          0x2
#define _SSP1ADD2_SSPADD2_SIZE                              0x1
#define _SSP1ADD2_SSPADD2_LENGTH                            0x1
#define _SSP1ADD2_SSPADD2_MASK                              0x4
#define _SSP1ADD2_SSPADD3_POSN                              0x3
#define _SSP1ADD2_SSPADD3_POSITION                          0x3
#define _SSP1ADD2_SSPADD3_SIZE                              0x1
#define _SSP1ADD2_SSPADD3_LENGTH                            0x1
#define _SSP1ADD2_SSPADD3_MASK                              0x8
#define _SSP1ADD2_SSPADD4_POSN                              0x4
#define _SSP1ADD2_SSPADD4_POSITION                          0x4
#define _SSP1ADD2_SSPADD4_SIZE                              0x1
#define _SSP1ADD2_SSPADD4_LENGTH                            0x1
#define _SSP1ADD2_SSPADD4_MASK                              0x10
#define _SSP1ADD2_SSPADD5_POSN                              0x5
#define _SSP1ADD2_SSPADD5_POSITION                          0x5
#define _SSP1ADD2_SSPADD5_SIZE                              0x1
#define _SSP1ADD2_SSPADD5_LENGTH                            0x1
#define _SSP1ADD2_SSPADD5_MASK                              0x20
#define _SSP1ADD2_SSPADD6_POSN                              0x6
#define _SSP1ADD2_SSPADD6_POSITION                          0x6
#define _SSP1ADD2_SSPADD6_SIZE                              0x1
#define _SSP1ADD2_SSPADD6_LENGTH                            0x1
#define _SSP1ADD2_SSPADD6_MASK                              0x40
#define _SSP1ADD2_SSPADD7_POSN                              0x7
#define _SSP1ADD2_SSPADD7_POSITION                          0x7
#define _SSP1ADD2_SSPADD7_SIZE                              0x1
#define _SSP1ADD2_SSPADD7_LENGTH                            0x1
#define _SSP1ADD2_SSPADD7_MASK                              0x80

// Register: SSP1MSK2
#define SSP1MSK2 SSP1MSK2
extern volatile unsigned char           SSP1MSK2            __at(0x194);
#ifndef _LIB_BUILD
asm("SSP1MSK2 equ 0194h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned SSPMSK0                :1;
        unsigned SSPMSK1                :1;
        unsigned SSPMSK2                :1;
        unsigned SSPMSK3                :1;
        unsigned SSPMSK4                :1;
        unsigned SSPMSK5                :1;
        unsigned SSPMSK6                :1;
        unsigned SSPMSK7                :1;
    };
} SSP1MSK2bits_t;
extern volatile SSP1MSK2bits_t SSP1MSK2bits __at(0x194);
// bitfield macros
#define _SSP1MSK2_SSPMSK_POSN                               0x0
#define _SSP1MSK2_SSPMSK_POSITION                           0x0
#define _SSP1MSK2_SSPMSK_SIZE                               0x8
#define _SSP1MSK2_SSPMSK_LENGTH                             0x8
#define _SSP1MSK2_SSPMSK_MASK                               0xFF
#define _SSP1MSK2_SSPMSK0_POSN                              0x0
#define _SSP1MSK2_SSPMSK0_POSITION                          0x0
#define _SSP1MSK2_SSPMSK0_SIZE                              0x1
#define _SSP1MSK2_SSPMSK0_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK0_MASK                              0x1
#define _SSP1MSK2_SSPMSK1_POSN                              0x1
#define _SSP1MSK2_SSPMSK1_POSITION                          0x1
#define _SSP1MSK2_SSPMSK1_SIZE                              0x1
#define _SSP1MSK2_SSPMSK1_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK1_MASK                              0x2
#define _SSP1MSK2_SSPMSK2_POSN                              0x2
#define _SSP1MSK2_SSPMSK2_POSITION                          0x2
#define _SSP1MSK2_SSPMSK2_SIZE                              0x1
#define _SSP1MSK2_SSPMSK2_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK2_MASK                              0x4
#define _SSP1MSK2_SSPMSK3_POSN                              0x3
#define _SSP1MSK2_SSPMSK3_POSITION                          0x3
#define _SSP1MSK2_SSPMSK3_SIZE                              0x1
#define _SSP1MSK2_SSPMSK3_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK3_MASK                              0x8
#define _SSP1MSK2_SSPMSK4_POSN                              0x4
#define _SSP1MSK2_SSPMSK4_POSITION                          0x4
#define _SSP1MSK2_SSPMSK4_SIZE                              0x1
#define _SSP1MSK2_SSPMSK4_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK4_MASK                              0x10
#define _SSP1MSK2_SSPMSK5_POSN                              0x5
#define _SSP1MSK2_SSPMSK5_POSITION                          0x5
#define _SSP1MSK2_SSPMSK5_SIZE                              0x1
#define _SSP1MSK2_SSPMSK5_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK5_MASK                              0x20
#define _SSP1MSK2_SSPMSK6_POSN                              0x6
#define _SSP1MSK2_SSPMSK6_POSITION                          0x6
#define _SSP1MSK2_SSPMSK6_SIZE                              0x1
#define _SSP1MSK2_SSPMSK6_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK6_MASK                              0x40
#define _SSP1MSK2_SSPMSK7_POSN                              0x7
#define _SSP1MSK2_SSPMSK7_POSITION                          0x7
#define _SSP1MSK2_SSPMSK7_SIZE                              0x1
#define _SSP1MSK2_SSPMSK7_LENGTH                            0x1
#define _SSP1MSK2_SSPMSK7_MASK                              0x80

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1L equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x20C);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x20D);
#ifndef _LIB_BUILD
asm("TMR1H equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x20D);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x20E);
#ifndef _LIB_BUILD
asm("T1CON equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned                        :4;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x20E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x20F);
#ifndef _LIB_BUILD
asm("T1GCON equ 020Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x20F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x210);
#ifndef _LIB_BUILD
asm("T1GATE equ 0210h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :4;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x210);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x4
#define _T1GATE_GSS_LENGTH                                  0x4
#define _T1GATE_GSS_MASK                                    0xF
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x211);
#ifndef _LIB_BUILD
asm("T1CLK equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x211);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x4
#define _T1CLK_CS_LENGTH                                    0x4
#define _T1CLK_CS_MASK                                      0xF
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x212);
#ifndef _LIB_BUILD
asm("TMR3L equ 0212h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L                  :8;
    };
    struct {
        unsigned TMR3L0                 :1;
        unsigned TMR3L1                 :1;
        unsigned TMR3L2                 :1;
        unsigned TMR3L3                 :1;
        unsigned TMR3L4                 :1;
        unsigned TMR3L5                 :1;
        unsigned TMR3L6                 :1;
        unsigned TMR3L7                 :1;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x212);
// bitfield macros
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF
#define _TMR3L_TMR3L0_POSN                                  0x0
#define _TMR3L_TMR3L0_POSITION                              0x0
#define _TMR3L_TMR3L0_SIZE                                  0x1
#define _TMR3L_TMR3L0_LENGTH                                0x1
#define _TMR3L_TMR3L0_MASK                                  0x1
#define _TMR3L_TMR3L1_POSN                                  0x1
#define _TMR3L_TMR3L1_POSITION                              0x1
#define _TMR3L_TMR3L1_SIZE                                  0x1
#define _TMR3L_TMR3L1_LENGTH                                0x1
#define _TMR3L_TMR3L1_MASK                                  0x2
#define _TMR3L_TMR3L2_POSN                                  0x2
#define _TMR3L_TMR3L2_POSITION                              0x2
#define _TMR3L_TMR3L2_SIZE                                  0x1
#define _TMR3L_TMR3L2_LENGTH                                0x1
#define _TMR3L_TMR3L2_MASK                                  0x4
#define _TMR3L_TMR3L3_POSN                                  0x3
#define _TMR3L_TMR3L3_POSITION                              0x3
#define _TMR3L_TMR3L3_SIZE                                  0x1
#define _TMR3L_TMR3L3_LENGTH                                0x1
#define _TMR3L_TMR3L3_MASK                                  0x8
#define _TMR3L_TMR3L4_POSN                                  0x4
#define _TMR3L_TMR3L4_POSITION                              0x4
#define _TMR3L_TMR3L4_SIZE                                  0x1
#define _TMR3L_TMR3L4_LENGTH                                0x1
#define _TMR3L_TMR3L4_MASK                                  0x10
#define _TMR3L_TMR3L5_POSN                                  0x5
#define _TMR3L_TMR3L5_POSITION                              0x5
#define _TMR3L_TMR3L5_SIZE                                  0x1
#define _TMR3L_TMR3L5_LENGTH                                0x1
#define _TMR3L_TMR3L5_MASK                                  0x20
#define _TMR3L_TMR3L6_POSN                                  0x6
#define _TMR3L_TMR3L6_POSITION                              0x6
#define _TMR3L_TMR3L6_SIZE                                  0x1
#define _TMR3L_TMR3L6_LENGTH                                0x1
#define _TMR3L_TMR3L6_MASK                                  0x40
#define _TMR3L_TMR3L7_POSN                                  0x7
#define _TMR3L_TMR3L7_POSITION                              0x7
#define _TMR3L_TMR3L7_SIZE                                  0x1
#define _TMR3L_TMR3L7_LENGTH                                0x1
#define _TMR3L_TMR3L7_MASK                                  0x80

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x213);
#ifndef _LIB_BUILD
asm("TMR3H equ 0213h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H                  :8;
    };
    struct {
        unsigned TMR3H0                 :1;
        unsigned TMR3H1                 :1;
        unsigned TMR3H2                 :1;
        unsigned TMR3H3                 :1;
        unsigned TMR3H4                 :1;
        unsigned TMR3H5                 :1;
        unsigned TMR3H6                 :1;
        unsigned TMR3H7                 :1;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x213);
// bitfield macros
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF
#define _TMR3H_TMR3H0_POSN                                  0x0
#define _TMR3H_TMR3H0_POSITION                              0x0
#define _TMR3H_TMR3H0_SIZE                                  0x1
#define _TMR3H_TMR3H0_LENGTH                                0x1
#define _TMR3H_TMR3H0_MASK                                  0x1
#define _TMR3H_TMR3H1_POSN                                  0x1
#define _TMR3H_TMR3H1_POSITION                              0x1
#define _TMR3H_TMR3H1_SIZE                                  0x1
#define _TMR3H_TMR3H1_LENGTH                                0x1
#define _TMR3H_TMR3H1_MASK                                  0x2
#define _TMR3H_TMR3H2_POSN                                  0x2
#define _TMR3H_TMR3H2_POSITION                              0x2
#define _TMR3H_TMR3H2_SIZE                                  0x1
#define _TMR3H_TMR3H2_LENGTH                                0x1
#define _TMR3H_TMR3H2_MASK                                  0x4
#define _TMR3H_TMR3H3_POSN                                  0x3
#define _TMR3H_TMR3H3_POSITION                              0x3
#define _TMR3H_TMR3H3_SIZE                                  0x1
#define _TMR3H_TMR3H3_LENGTH                                0x1
#define _TMR3H_TMR3H3_MASK                                  0x8
#define _TMR3H_TMR3H4_POSN                                  0x4
#define _TMR3H_TMR3H4_POSITION                              0x4
#define _TMR3H_TMR3H4_SIZE                                  0x1
#define _TMR3H_TMR3H4_LENGTH                                0x1
#define _TMR3H_TMR3H4_MASK                                  0x10
#define _TMR3H_TMR3H5_POSN                                  0x5
#define _TMR3H_TMR3H5_POSITION                              0x5
#define _TMR3H_TMR3H5_SIZE                                  0x1
#define _TMR3H_TMR3H5_LENGTH                                0x1
#define _TMR3H_TMR3H5_MASK                                  0x20
#define _TMR3H_TMR3H6_POSN                                  0x6
#define _TMR3H_TMR3H6_POSITION                              0x6
#define _TMR3H_TMR3H6_SIZE                                  0x1
#define _TMR3H_TMR3H6_LENGTH                                0x1
#define _TMR3H_TMR3H6_MASK                                  0x40
#define _TMR3H_TMR3H7_POSN                                  0x7
#define _TMR3H_TMR3H7_POSITION                              0x7
#define _TMR3H_TMR3H7_SIZE                                  0x1
#define _TMR3H_TMR3H7_LENGTH                                0x1
#define _TMR3H_TMR3H7_MASK                                  0x80

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x214);
#ifndef _LIB_BUILD
asm("T3CON equ 0214h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned                        :4;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x214);
// bitfield macros
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_nSYNC_POSN                                   0x2
#define _T3CON_nSYNC_POSITION                               0x2
#define _T3CON_nSYNC_SIZE                                   0x1
#define _T3CON_nSYNC_LENGTH                                 0x1
#define _T3CON_nSYNC_MASK                                   0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x215);
#ifndef _LIB_BUILD
asm("T3GCON equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x215);
// bitfield macros
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_nDONE_POSN                              0x3
#define _T3GCON_GGO_nDONE_POSITION                          0x3
#define _T3GCON_GGO_nDONE_SIZE                              0x1
#define _T3GCON_GGO_nDONE_LENGTH                            0x1
#define _T3GCON_GGO_nDONE_MASK                              0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80

// Register: T3GATE
#define T3GATE T3GATE
extern volatile unsigned char           T3GATE              __at(0x216);
#ifndef _LIB_BUILD
asm("T3GATE equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :4;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
} T3GATEbits_t;
extern volatile T3GATEbits_t T3GATEbits __at(0x216);
// bitfield macros
#define _T3GATE_GSS_POSN                                    0x0
#define _T3GATE_GSS_POSITION                                0x0
#define _T3GATE_GSS_SIZE                                    0x4
#define _T3GATE_GSS_LENGTH                                  0x4
#define _T3GATE_GSS_MASK                                    0xF
#define _T3GATE_GSS0_POSN                                   0x0
#define _T3GATE_GSS0_POSITION                               0x0
#define _T3GATE_GSS0_SIZE                                   0x1
#define _T3GATE_GSS0_LENGTH                                 0x1
#define _T3GATE_GSS0_MASK                                   0x1
#define _T3GATE_GSS1_POSN                                   0x1
#define _T3GATE_GSS1_POSITION                               0x1
#define _T3GATE_GSS1_SIZE                                   0x1
#define _T3GATE_GSS1_LENGTH                                 0x1
#define _T3GATE_GSS1_MASK                                   0x2
#define _T3GATE_GSS2_POSN                                   0x2
#define _T3GATE_GSS2_POSITION                               0x2
#define _T3GATE_GSS2_SIZE                                   0x1
#define _T3GATE_GSS2_LENGTH                                 0x1
#define _T3GATE_GSS2_MASK                                   0x4
#define _T3GATE_GSS3_POSN                                   0x3
#define _T3GATE_GSS3_POSITION                               0x3
#define _T3GATE_GSS3_SIZE                                   0x1
#define _T3GATE_GSS3_LENGTH                                 0x1
#define _T3GATE_GSS3_MASK                                   0x8

// Register: T3CLK
#define T3CLK T3CLK
extern volatile unsigned char           T3CLK               __at(0x217);
#ifndef _LIB_BUILD
asm("T3CLK equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T3CLKbits_t;
extern volatile T3CLKbits_t T3CLKbits __at(0x217);
// bitfield macros
#define _T3CLK_CS_POSN                                      0x0
#define _T3CLK_CS_POSITION                                  0x0
#define _T3CLK_CS_SIZE                                      0x4
#define _T3CLK_CS_LENGTH                                    0x4
#define _T3CLK_CS_MASK                                      0xF
#define _T3CLK_CS0_POSN                                     0x0
#define _T3CLK_CS0_POSITION                                 0x0
#define _T3CLK_CS0_SIZE                                     0x1
#define _T3CLK_CS0_LENGTH                                   0x1
#define _T3CLK_CS0_MASK                                     0x1
#define _T3CLK_CS1_POSN                                     0x1
#define _T3CLK_CS1_POSITION                                 0x1
#define _T3CLK_CS1_SIZE                                     0x1
#define _T3CLK_CS1_LENGTH                                   0x1
#define _T3CLK_CS1_MASK                                     0x2
#define _T3CLK_CS2_POSN                                     0x2
#define _T3CLK_CS2_POSITION                                 0x2
#define _T3CLK_CS2_SIZE                                     0x1
#define _T3CLK_CS2_LENGTH                                   0x1
#define _T3CLK_CS2_MASK                                     0x4
#define _T3CLK_CS3_POSN                                     0x3
#define _T3CLK_CS3_POSITION                                 0x3
#define _T3CLK_CS3_SIZE                                     0x1
#define _T3CLK_CS3_LENGTH                                   0x1
#define _T3CLK_CS3_MASK                                     0x8

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x21E);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 021Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :1;
        unsigned C2TSEL                 :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x21E);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x1
#define _CCPTMRS0_C1TSEL_LENGTH                             0x1
#define _CCPTMRS0_C1TSEL_MASK                               0x1
#define _CCPTMRS0_C2TSEL_POSN                               0x1
#define _CCPTMRS0_C2TSEL_POSITION                           0x1
#define _CCPTMRS0_C2TSEL_SIZE                               0x1
#define _CCPTMRS0_C2TSEL_LENGTH                             0x1
#define _CCPTMRS0_C2TSEL_MASK                               0x2

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x28C);
#ifndef _LIB_BUILD
asm("T2TMR equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2TMR                  :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x28C);
// bitfield macros
#define _T2TMR_T2TMR_POSN                                   0x0
#define _T2TMR_T2TMR_POSITION                               0x0
#define _T2TMR_T2TMR_SIZE                                   0x8
#define _T2TMR_T2TMR_LENGTH                                 0x8
#define _T2TMR_T2TMR_MASK                                   0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x28D);
#ifndef _LIB_BUILD
asm("T2PR equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2PR                   :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x28D);
// bitfield macros
#define _T2PR_T2PR_POSN                                     0x0
#define _T2PR_T2PR_POSITION                                 0x0
#define _T2PR_T2PR_SIZE                                     0x8
#define _T2PR_T2PR_LENGTH                                   0x8
#define _T2PR_T2PR_MASK                                     0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x28E);
#ifndef _LIB_BUILD
asm("T2CON equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x28E);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x28F);
#ifndef _LIB_BUILD
asm("T2HLT equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2MODE                 :4;
        unsigned                        :1;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x28F);
// bitfield macros
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x4
#define _T2HLT_T2MODE_LENGTH                                0x4
#define _T2HLT_T2MODE_MASK                                  0xF
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2CLK                  :3;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x290);
// bitfield macros
#define _T2CLKCON_T2CLK_POSN                                0x0
#define _T2CLKCON_T2CLK_POSITION                            0x0
#define _T2CLKCON_T2CLK_SIZE                                0x3
#define _T2CLKCON_T2CLK_LENGTH                              0x3
#define _T2CLKCON_T2CLK_MASK                                0x7
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x291);
#ifndef _LIB_BUILD
asm("T2RST equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2RST                  :3;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x291);
// bitfield macros
#define _T2RST_T2RST_POSN                                   0x0
#define _T2RST_T2RST_POSITION                               0x0
#define _T2RST_T2RST_SIZE                                   0x3
#define _T2RST_T2RST_LENGTH                                 0x3
#define _T2RST_T2RST_MASK                                   0x7
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x292);
#ifndef _LIB_BUILD
asm("T4TMR equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4TMR                  :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x292);
// bitfield macros
#define _T4TMR_T4TMR_POSN                                   0x0
#define _T4TMR_T4TMR_POSITION                               0x0
#define _T4TMR_T4TMR_SIZE                                   0x8
#define _T4TMR_T4TMR_LENGTH                                 0x8
#define _T4TMR_T4TMR_MASK                                   0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x293);
#ifndef _LIB_BUILD
asm("T4PR equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4PR                   :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x293);
// bitfield macros
#define _T4PR_T4PR_POSN                                     0x0
#define _T4PR_T4PR_POSITION                                 0x0
#define _T4PR_T4PR_SIZE                                     0x8
#define _T4PR_T4PR_LENGTH                                   0x8
#define _T4PR_T4PR_MASK                                     0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x294);
#ifndef _LIB_BUILD
asm("T4CON equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x294);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x295);
#ifndef _LIB_BUILD
asm("T4HLT equ 0295h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4MODE                 :4;
        unsigned                        :1;
        unsigned T4CSYNC                :1;
        unsigned T4CPOL                 :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x295);
// bitfield macros
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x4
#define _T4HLT_T4MODE_LENGTH                                0x4
#define _T4HLT_T4MODE_MASK                                  0xF
#define _T4HLT_T4CSYNC_POSN                                 0x5
#define _T4HLT_T4CSYNC_POSITION                             0x5
#define _T4HLT_T4CSYNC_SIZE                                 0x1
#define _T4HLT_T4CSYNC_LENGTH                               0x1
#define _T4HLT_T4CSYNC_MASK                                 0x20
#define _T4HLT_T4CPOL_POSN                                  0x6
#define _T4HLT_T4CPOL_POSITION                              0x6
#define _T4HLT_T4CPOL_SIZE                                  0x1
#define _T4HLT_T4CPOL_LENGTH                                0x1
#define _T4HLT_T4CPOL_MASK                                  0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x296);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0296h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4CLK                  :3;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x296);
// bitfield macros
#define _T4CLKCON_T4CLK_POSN                                0x0
#define _T4CLKCON_T4CLK_POSITION                            0x0
#define _T4CLKCON_T4CLK_SIZE                                0x3
#define _T4CLKCON_T4CLK_LENGTH                              0x3
#define _T4CLKCON_T4CLK_MASK                                0x7
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x297);
#ifndef _LIB_BUILD
asm("T4RST equ 0297h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4RST                  :3;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x297);
// bitfield macros
#define _T4RST_T4RST_POSN                                   0x0
#define _T4RST_T4RST_POSITION                               0x0
#define _T4RST_T4RST_SIZE                                   0x3
#define _T4RST_T4RST_LENGTH                                 0x3
#define _T4RST_T4RST_MASK                                   0x7
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4

// Register: CCP1RL
#define CCP1RL CCP1RL
extern volatile unsigned char           CCP1RL              __at(0x30C);
#ifndef _LIB_BUILD
asm("CCP1RL equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PR0                :1;
        unsigned CCP1PR1                :1;
        unsigned CCP1PR2                :1;
        unsigned CCP1PR3                :1;
        unsigned CCP1PR4                :1;
        unsigned CCP1PR5                :1;
        unsigned CCP1PR6                :1;
        unsigned CCP1PR7                :1;
    };
} CCP1RLbits_t;
extern volatile CCP1RLbits_t CCP1RLbits __at(0x30C);
// bitfield macros
#define _CCP1RL_CCP1PR0_POSN                                0x0
#define _CCP1RL_CCP1PR0_POSITION                            0x0
#define _CCP1RL_CCP1PR0_SIZE                                0x1
#define _CCP1RL_CCP1PR0_LENGTH                              0x1
#define _CCP1RL_CCP1PR0_MASK                                0x1
#define _CCP1RL_CCP1PR1_POSN                                0x1
#define _CCP1RL_CCP1PR1_POSITION                            0x1
#define _CCP1RL_CCP1PR1_SIZE                                0x1
#define _CCP1RL_CCP1PR1_LENGTH                              0x1
#define _CCP1RL_CCP1PR1_MASK                                0x2
#define _CCP1RL_CCP1PR2_POSN                                0x2
#define _CCP1RL_CCP1PR2_POSITION                            0x2
#define _CCP1RL_CCP1PR2_SIZE                                0x1
#define _CCP1RL_CCP1PR2_LENGTH                              0x1
#define _CCP1RL_CCP1PR2_MASK                                0x4
#define _CCP1RL_CCP1PR3_POSN                                0x3
#define _CCP1RL_CCP1PR3_POSITION                            0x3
#define _CCP1RL_CCP1PR3_SIZE                                0x1
#define _CCP1RL_CCP1PR3_LENGTH                              0x1
#define _CCP1RL_CCP1PR3_MASK                                0x8
#define _CCP1RL_CCP1PR4_POSN                                0x4
#define _CCP1RL_CCP1PR4_POSITION                            0x4
#define _CCP1RL_CCP1PR4_SIZE                                0x1
#define _CCP1RL_CCP1PR4_LENGTH                              0x1
#define _CCP1RL_CCP1PR4_MASK                                0x10
#define _CCP1RL_CCP1PR5_POSN                                0x5
#define _CCP1RL_CCP1PR5_POSITION                            0x5
#define _CCP1RL_CCP1PR5_SIZE                                0x1
#define _CCP1RL_CCP1PR5_LENGTH                              0x1
#define _CCP1RL_CCP1PR5_MASK                                0x20
#define _CCP1RL_CCP1PR6_POSN                                0x6
#define _CCP1RL_CCP1PR6_POSITION                            0x6
#define _CCP1RL_CCP1PR6_SIZE                                0x1
#define _CCP1RL_CCP1PR6_LENGTH                              0x1
#define _CCP1RL_CCP1PR6_MASK                                0x40
#define _CCP1RL_CCP1PR7_POSN                                0x7
#define _CCP1RL_CCP1PR7_POSITION                            0x7
#define _CCP1RL_CCP1PR7_SIZE                                0x1
#define _CCP1RL_CCP1PR7_LENGTH                              0x1
#define _CCP1RL_CCP1PR7_MASK                                0x80

// Register: CCP1RH
#define CCP1RH CCP1RH
extern volatile unsigned char           CCP1RH              __at(0x30D);
#ifndef _LIB_BUILD
asm("CCP1RH equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PR8                :1;
        unsigned CCP1PR9                :1;
        unsigned CCP1PR10               :1;
        unsigned CCP1PR11               :1;
        unsigned CCP1PR12               :1;
        unsigned CCP1PR13               :1;
        unsigned CCP1PR14               :1;
        unsigned CCP1PR15               :1;
    };
} CCP1RHbits_t;
extern volatile CCP1RHbits_t CCP1RHbits __at(0x30D);
// bitfield macros
#define _CCP1RH_CCP1PR8_POSN                                0x0
#define _CCP1RH_CCP1PR8_POSITION                            0x0
#define _CCP1RH_CCP1PR8_SIZE                                0x1
#define _CCP1RH_CCP1PR8_LENGTH                              0x1
#define _CCP1RH_CCP1PR8_MASK                                0x1
#define _CCP1RH_CCP1PR9_POSN                                0x1
#define _CCP1RH_CCP1PR9_POSITION                            0x1
#define _CCP1RH_CCP1PR9_SIZE                                0x1
#define _CCP1RH_CCP1PR9_LENGTH                              0x1
#define _CCP1RH_CCP1PR9_MASK                                0x2
#define _CCP1RH_CCP1PR10_POSN                               0x2
#define _CCP1RH_CCP1PR10_POSITION                           0x2
#define _CCP1RH_CCP1PR10_SIZE                               0x1
#define _CCP1RH_CCP1PR10_LENGTH                             0x1
#define _CCP1RH_CCP1PR10_MASK                               0x4
#define _CCP1RH_CCP1PR11_POSN                               0x3
#define _CCP1RH_CCP1PR11_POSITION                           0x3
#define _CCP1RH_CCP1PR11_SIZE                               0x1
#define _CCP1RH_CCP1PR11_LENGTH                             0x1
#define _CCP1RH_CCP1PR11_MASK                               0x8
#define _CCP1RH_CCP1PR12_POSN                               0x4
#define _CCP1RH_CCP1PR12_POSITION                           0x4
#define _CCP1RH_CCP1PR12_SIZE                               0x1
#define _CCP1RH_CCP1PR12_LENGTH                             0x1
#define _CCP1RH_CCP1PR12_MASK                               0x10
#define _CCP1RH_CCP1PR13_POSN                               0x5
#define _CCP1RH_CCP1PR13_POSITION                           0x5
#define _CCP1RH_CCP1PR13_SIZE                               0x1
#define _CCP1RH_CCP1PR13_LENGTH                             0x1
#define _CCP1RH_CCP1PR13_MASK                               0x20
#define _CCP1RH_CCP1PR14_POSN                               0x6
#define _CCP1RH_CCP1PR14_POSITION                           0x6
#define _CCP1RH_CCP1PR14_SIZE                               0x1
#define _CCP1RH_CCP1PR14_LENGTH                             0x1
#define _CCP1RH_CCP1PR14_MASK                               0x40
#define _CCP1RH_CCP1PR15_POSN                               0x7
#define _CCP1RH_CCP1PR15_POSITION                           0x7
#define _CCP1RH_CCP1PR15_SIZE                               0x1
#define _CCP1RH_CCP1PR15_LENGTH                             0x1
#define _CCP1RH_CCP1PR15_MASK                               0x80

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x30E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x30E);
// bitfield macros
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x30F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1CAP0               :1;
        unsigned CCP1CAP1               :1;
        unsigned CCP1CAP2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x30F);
// bitfield macros
#define _CCP1CAP_CCP1CAP0_POSN                              0x0
#define _CCP1CAP_CCP1CAP0_POSITION                          0x0
#define _CCP1CAP_CCP1CAP0_SIZE                              0x1
#define _CCP1CAP_CCP1CAP0_LENGTH                            0x1
#define _CCP1CAP_CCP1CAP0_MASK                              0x1
#define _CCP1CAP_CCP1CAP1_POSN                              0x1
#define _CCP1CAP_CCP1CAP1_POSITION                          0x1
#define _CCP1CAP_CCP1CAP1_SIZE                              0x1
#define _CCP1CAP_CCP1CAP1_LENGTH                            0x1
#define _CCP1CAP_CCP1CAP1_MASK                              0x2
#define _CCP1CAP_CCP1CAP2_POSN                              0x2
#define _CCP1CAP_CCP1CAP2_POSITION                          0x2
#define _CCP1CAP_CCP1CAP2_SIZE                              0x1
#define _CCP1CAP_CCP1CAP2_LENGTH                            0x1
#define _CCP1CAP_CCP1CAP2_MASK                              0x4

// Register: CCP2RL
#define CCP2RL CCP2RL
extern volatile unsigned char           CCP2RL              __at(0x310);
#ifndef _LIB_BUILD
asm("CCP2RL equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PR0                :1;
        unsigned CCP2PR1                :1;
        unsigned CCP2PR2                :1;
        unsigned CCP2PR3                :1;
        unsigned CCP2PR4                :1;
        unsigned CCP2PR5                :1;
        unsigned CCP2PR6                :1;
        unsigned CCP2PR7                :1;
    };
} CCP2RLbits_t;
extern volatile CCP2RLbits_t CCP2RLbits __at(0x310);
// bitfield macros
#define _CCP2RL_CCP2PR0_POSN                                0x0
#define _CCP2RL_CCP2PR0_POSITION                            0x0
#define _CCP2RL_CCP2PR0_SIZE                                0x1
#define _CCP2RL_CCP2PR0_LENGTH                              0x1
#define _CCP2RL_CCP2PR0_MASK                                0x1
#define _CCP2RL_CCP2PR1_POSN                                0x1
#define _CCP2RL_CCP2PR1_POSITION                            0x1
#define _CCP2RL_CCP2PR1_SIZE                                0x1
#define _CCP2RL_CCP2PR1_LENGTH                              0x1
#define _CCP2RL_CCP2PR1_MASK                                0x2
#define _CCP2RL_CCP2PR2_POSN                                0x2
#define _CCP2RL_CCP2PR2_POSITION                            0x2
#define _CCP2RL_CCP2PR2_SIZE                                0x1
#define _CCP2RL_CCP2PR2_LENGTH                              0x1
#define _CCP2RL_CCP2PR2_MASK                                0x4
#define _CCP2RL_CCP2PR3_POSN                                0x3
#define _CCP2RL_CCP2PR3_POSITION                            0x3
#define _CCP2RL_CCP2PR3_SIZE                                0x1
#define _CCP2RL_CCP2PR3_LENGTH                              0x1
#define _CCP2RL_CCP2PR3_MASK                                0x8
#define _CCP2RL_CCP2PR4_POSN                                0x4
#define _CCP2RL_CCP2PR4_POSITION                            0x4
#define _CCP2RL_CCP2PR4_SIZE                                0x1
#define _CCP2RL_CCP2PR4_LENGTH                              0x1
#define _CCP2RL_CCP2PR4_MASK                                0x10
#define _CCP2RL_CCP2PR5_POSN                                0x5
#define _CCP2RL_CCP2PR5_POSITION                            0x5
#define _CCP2RL_CCP2PR5_SIZE                                0x1
#define _CCP2RL_CCP2PR5_LENGTH                              0x1
#define _CCP2RL_CCP2PR5_MASK                                0x20
#define _CCP2RL_CCP2PR6_POSN                                0x6
#define _CCP2RL_CCP2PR6_POSITION                            0x6
#define _CCP2RL_CCP2PR6_SIZE                                0x1
#define _CCP2RL_CCP2PR6_LENGTH                              0x1
#define _CCP2RL_CCP2PR6_MASK                                0x40
#define _CCP2RL_CCP2PR7_POSN                                0x7
#define _CCP2RL_CCP2PR7_POSITION                            0x7
#define _CCP2RL_CCP2PR7_SIZE                                0x1
#define _CCP2RL_CCP2PR7_LENGTH                              0x1
#define _CCP2RL_CCP2PR7_MASK                                0x80

// Register: CCP2RH
#define CCP2RH CCP2RH
extern volatile unsigned char           CCP2RH              __at(0x311);
#ifndef _LIB_BUILD
asm("CCP2RH equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PR8                :1;
        unsigned CCP2PR9                :1;
        unsigned CCP2PR10               :1;
        unsigned CCP2PR11               :1;
        unsigned CCP2PR12               :1;
        unsigned CCP2PR13               :1;
        unsigned CCP2PR14               :1;
        unsigned CCP2PR15               :1;
    };
} CCP2RHbits_t;
extern volatile CCP2RHbits_t CCP2RHbits __at(0x311);
// bitfield macros
#define _CCP2RH_CCP2PR8_POSN                                0x0
#define _CCP2RH_CCP2PR8_POSITION                            0x0
#define _CCP2RH_CCP2PR8_SIZE                                0x1
#define _CCP2RH_CCP2PR8_LENGTH                              0x1
#define _CCP2RH_CCP2PR8_MASK                                0x1
#define _CCP2RH_CCP2PR9_POSN                                0x1
#define _CCP2RH_CCP2PR9_POSITION                            0x1
#define _CCP2RH_CCP2PR9_SIZE                                0x1
#define _CCP2RH_CCP2PR9_LENGTH                              0x1
#define _CCP2RH_CCP2PR9_MASK                                0x2
#define _CCP2RH_CCP2PR10_POSN                               0x2
#define _CCP2RH_CCP2PR10_POSITION                           0x2
#define _CCP2RH_CCP2PR10_SIZE                               0x1
#define _CCP2RH_CCP2PR10_LENGTH                             0x1
#define _CCP2RH_CCP2PR10_MASK                               0x4
#define _CCP2RH_CCP2PR11_POSN                               0x3
#define _CCP2RH_CCP2PR11_POSITION                           0x3
#define _CCP2RH_CCP2PR11_SIZE                               0x1
#define _CCP2RH_CCP2PR11_LENGTH                             0x1
#define _CCP2RH_CCP2PR11_MASK                               0x8
#define _CCP2RH_CCP2PR12_POSN                               0x4
#define _CCP2RH_CCP2PR12_POSITION                           0x4
#define _CCP2RH_CCP2PR12_SIZE                               0x1
#define _CCP2RH_CCP2PR12_LENGTH                             0x1
#define _CCP2RH_CCP2PR12_MASK                               0x10
#define _CCP2RH_CCP2PR13_POSN                               0x5
#define _CCP2RH_CCP2PR13_POSITION                           0x5
#define _CCP2RH_CCP2PR13_SIZE                               0x1
#define _CCP2RH_CCP2PR13_LENGTH                             0x1
#define _CCP2RH_CCP2PR13_MASK                               0x20
#define _CCP2RH_CCP2PR14_POSN                               0x6
#define _CCP2RH_CCP2PR14_POSITION                           0x6
#define _CCP2RH_CCP2PR14_SIZE                               0x1
#define _CCP2RH_CCP2PR14_LENGTH                             0x1
#define _CCP2RH_CCP2PR14_MASK                               0x40
#define _CCP2RH_CCP2PR15_POSN                               0x7
#define _CCP2RH_CCP2PR15_POSITION                           0x7
#define _CCP2RH_CCP2PR15_SIZE                               0x1
#define _CCP2RH_CCP2PR15_LENGTH                             0x1
#define _CCP2RH_CCP2PR15_MASK                               0x80

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x312);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0312h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x312);
// bitfield macros
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x313);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0313h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2CAP0               :1;
        unsigned CCP2CAP1               :1;
        unsigned CCP2CAP2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x313);
// bitfield macros
#define _CCP2CAP_CCP2CAP0_POSN                              0x0
#define _CCP2CAP_CCP2CAP0_POSITION                          0x0
#define _CCP2CAP_CCP2CAP0_SIZE                              0x1
#define _CCP2CAP_CCP2CAP0_LENGTH                            0x1
#define _CCP2CAP_CCP2CAP0_MASK                              0x1
#define _CCP2CAP_CCP2CAP1_POSN                              0x1
#define _CCP2CAP_CCP2CAP1_POSITION                          0x1
#define _CCP2CAP_CCP2CAP1_SIZE                              0x1
#define _CCP2CAP_CCP2CAP1_LENGTH                            0x1
#define _CCP2CAP_CCP2CAP1_MASK                              0x2
#define _CCP2CAP_CCP2CAP2_POSN                              0x2
#define _CCP2CAP_CCP2CAP2_POSITION                          0x2
#define _CCP2CAP_CCP2CAP2_SIZE                              0x1
#define _CCP2CAP_CCP2CAP2_LENGTH                            0x1
#define _CCP2CAP_CCP2CAP2_MASK                              0x4

// Register: SWFRQCON
#define SWFRQCON SWFRQCON
extern volatile unsigned char           SWFRQCON            __at(0x38C);
#ifndef _LIB_BUILD
asm("SWFRQCON equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWFRQPS0               :1;
        unsigned SWFRQPS1               :1;
        unsigned SWFRQPS2               :1;
        unsigned PWOUT                  :1;
        unsigned MANUAL                 :1;
        unsigned DLLDIS                 :1;
        unsigned DITHER                 :1;
        unsigned SWFRQON                :1;
    };
} SWFRQCONbits_t;
extern volatile SWFRQCONbits_t SWFRQCONbits __at(0x38C);
// bitfield macros
#define _SWFRQCON_SWFRQPS0_POSN                             0x0
#define _SWFRQCON_SWFRQPS0_POSITION                         0x0
#define _SWFRQCON_SWFRQPS0_SIZE                             0x1
#define _SWFRQCON_SWFRQPS0_LENGTH                           0x1
#define _SWFRQCON_SWFRQPS0_MASK                             0x1
#define _SWFRQCON_SWFRQPS1_POSN                             0x1
#define _SWFRQCON_SWFRQPS1_POSITION                         0x1
#define _SWFRQCON_SWFRQPS1_SIZE                             0x1
#define _SWFRQCON_SWFRQPS1_LENGTH                           0x1
#define _SWFRQCON_SWFRQPS1_MASK                             0x2
#define _SWFRQCON_SWFRQPS2_POSN                             0x2
#define _SWFRQCON_SWFRQPS2_POSITION                         0x2
#define _SWFRQCON_SWFRQPS2_SIZE                             0x1
#define _SWFRQCON_SWFRQPS2_LENGTH                           0x1
#define _SWFRQCON_SWFRQPS2_MASK                             0x4
#define _SWFRQCON_PWOUT_POSN                                0x3
#define _SWFRQCON_PWOUT_POSITION                            0x3
#define _SWFRQCON_PWOUT_SIZE                                0x1
#define _SWFRQCON_PWOUT_LENGTH                              0x1
#define _SWFRQCON_PWOUT_MASK                                0x8
#define _SWFRQCON_MANUAL_POSN                               0x4
#define _SWFRQCON_MANUAL_POSITION                           0x4
#define _SWFRQCON_MANUAL_SIZE                               0x1
#define _SWFRQCON_MANUAL_LENGTH                             0x1
#define _SWFRQCON_MANUAL_MASK                               0x10
#define _SWFRQCON_DLLDIS_POSN                               0x5
#define _SWFRQCON_DLLDIS_POSITION                           0x5
#define _SWFRQCON_DLLDIS_SIZE                               0x1
#define _SWFRQCON_DLLDIS_LENGTH                             0x1
#define _SWFRQCON_DLLDIS_MASK                               0x20
#define _SWFRQCON_DITHER_POSN                               0x6
#define _SWFRQCON_DITHER_POSITION                           0x6
#define _SWFRQCON_DITHER_SIZE                               0x1
#define _SWFRQCON_DITHER_LENGTH                             0x1
#define _SWFRQCON_DITHER_MASK                               0x40
#define _SWFRQCON_SWFRQON_POSN                              0x7
#define _SWFRQCON_SWFRQON_POSITION                          0x7
#define _SWFRQCON_SWFRQON_SIZE                              0x1
#define _SWFRQCON_SWFRQON_LENGTH                            0x1
#define _SWFRQCON_SWFRQON_MASK                              0x80

// Register: SWFRQPR
#define SWFRQPR SWFRQPR
extern volatile unsigned char           SWFRQPR             __at(0x38D);
#ifndef _LIB_BUILD
asm("SWFRQPR equ 038Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWFRQPR                :8;
    };
} SWFRQPRbits_t;
extern volatile SWFRQPRbits_t SWFRQPRbits __at(0x38D);
// bitfield macros
#define _SWFRQPR_SWFRQPR_POSN                               0x0
#define _SWFRQPR_SWFRQPR_POSITION                           0x0
#define _SWFRQPR_SWFRQPR_SIZE                               0x8
#define _SWFRQPR_SWFRQPR_LENGTH                             0x8
#define _SWFRQPR_SWFRQPR_MASK                               0xFF

// Register: SWFRQ
#define SWFRQ SWFRQ
extern volatile unsigned char           SWFRQ               __at(0x38E);
#ifndef _LIB_BUILD
asm("SWFRQ equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWFRQ                  :8;
    };
} SWFRQbits_t;
extern volatile SWFRQbits_t SWFRQbits __at(0x38E);
// bitfield macros
#define _SWFRQ_SWFRQ_POSN                                   0x0
#define _SWFRQ_SWFRQ_POSITION                               0x0
#define _SWFRQ_SWFRQ_SIZE                                   0x8
#define _SWFRQ_SWFRQ_LENGTH                                 0x8
#define _SWFRQ_SWFRQ_MASK                                   0xFF

// Register: SWFRQDITHER
#define SWFRQDITHER SWFRQDITHER
extern volatile unsigned char           SWFRQDITHER         __at(0x38F);
#ifndef _LIB_BUILD
asm("SWFRQDITHER equ 038Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DITHER                 :6;
    };
} SWFRQDITHERbits_t;
extern volatile SWFRQDITHERbits_t SWFRQDITHERbits __at(0x38F);
// bitfield macros
#define _SWFRQDITHER_DITHER_POSN                            0x0
#define _SWFRQDITHER_DITHER_POSITION                        0x0
#define _SWFRQDITHER_DITHER_SIZE                            0x6
#define _SWFRQDITHER_DITHER_LENGTH                          0x6
#define _SWFRQDITHER_DITHER_MASK                            0x3F

// Register: SWFRQPWH
#define SWFRQPWH SWFRQPWH
extern volatile unsigned char           SWFRQPWH            __at(0x390);
#ifndef _LIB_BUILD
asm("SWFRQPWH equ 0390h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWFRQPW6               :1;
        unsigned SWFRQPW7               :1;
        unsigned SWFRQPW8               :1;
        unsigned SWFRQPW9               :1;
        unsigned SWFRQPW10              :1;
        unsigned SWFRQPW11              :1;
        unsigned SWFRQPW12              :1;
        unsigned SWFRQPW13              :1;
    };
} SWFRQPWHbits_t;
extern volatile SWFRQPWHbits_t SWFRQPWHbits __at(0x390);
// bitfield macros
#define _SWFRQPWH_SWFRQPW6_POSN                             0x0
#define _SWFRQPWH_SWFRQPW6_POSITION                         0x0
#define _SWFRQPWH_SWFRQPW6_SIZE                             0x1
#define _SWFRQPWH_SWFRQPW6_LENGTH                           0x1
#define _SWFRQPWH_SWFRQPW6_MASK                             0x1
#define _SWFRQPWH_SWFRQPW7_POSN                             0x1
#define _SWFRQPWH_SWFRQPW7_POSITION                         0x1
#define _SWFRQPWH_SWFRQPW7_SIZE                             0x1
#define _SWFRQPWH_SWFRQPW7_LENGTH                           0x1
#define _SWFRQPWH_SWFRQPW7_MASK                             0x2
#define _SWFRQPWH_SWFRQPW8_POSN                             0x2
#define _SWFRQPWH_SWFRQPW8_POSITION                         0x2
#define _SWFRQPWH_SWFRQPW8_SIZE                             0x1
#define _SWFRQPWH_SWFRQPW8_LENGTH                           0x1
#define _SWFRQPWH_SWFRQPW8_MASK                             0x4
#define _SWFRQPWH_SWFRQPW9_POSN                             0x3
#define _SWFRQPWH_SWFRQPW9_POSITION                         0x3
#define _SWFRQPWH_SWFRQPW9_SIZE                             0x1
#define _SWFRQPWH_SWFRQPW9_LENGTH                           0x1
#define _SWFRQPWH_SWFRQPW9_MASK                             0x8
#define _SWFRQPWH_SWFRQPW10_POSN                            0x4
#define _SWFRQPWH_SWFRQPW10_POSITION                        0x4
#define _SWFRQPWH_SWFRQPW10_SIZE                            0x1
#define _SWFRQPWH_SWFRQPW10_LENGTH                          0x1
#define _SWFRQPWH_SWFRQPW10_MASK                            0x10
#define _SWFRQPWH_SWFRQPW11_POSN                            0x5
#define _SWFRQPWH_SWFRQPW11_POSITION                        0x5
#define _SWFRQPWH_SWFRQPW11_SIZE                            0x1
#define _SWFRQPWH_SWFRQPW11_LENGTH                          0x1
#define _SWFRQPWH_SWFRQPW11_MASK                            0x20
#define _SWFRQPWH_SWFRQPW12_POSN                            0x6
#define _SWFRQPWH_SWFRQPW12_POSITION                        0x6
#define _SWFRQPWH_SWFRQPW12_SIZE                            0x1
#define _SWFRQPWH_SWFRQPW12_LENGTH                          0x1
#define _SWFRQPWH_SWFRQPW12_MASK                            0x40
#define _SWFRQPWH_SWFRQPW13_POSN                            0x7
#define _SWFRQPWH_SWFRQPW13_POSITION                        0x7
#define _SWFRQPWH_SWFRQPW13_SIZE                            0x1
#define _SWFRQPWH_SWFRQPW13_LENGTH                          0x1
#define _SWFRQPWH_SWFRQPW13_MASK                            0x80

// Register: SWFRQPWL
#define SWFRQPWL SWFRQPWL
extern volatile unsigned char           SWFRQPWL            __at(0x391);
#ifndef _LIB_BUILD
asm("SWFRQPWL equ 0391h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned SWFRQPW0               :1;
        unsigned SWFRQPW1               :1;
        unsigned SWFRQPW2               :1;
        unsigned SWFRQPW3               :1;
        unsigned SWFRQPW4               :1;
        unsigned SWFRQPW5               :1;
    };
} SWFRQPWLbits_t;
extern volatile SWFRQPWLbits_t SWFRQPWLbits __at(0x391);
// bitfield macros
#define _SWFRQPWL_SWFRQPW0_POSN                             0x2
#define _SWFRQPWL_SWFRQPW0_POSITION                         0x2
#define _SWFRQPWL_SWFRQPW0_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW0_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW0_MASK                             0x4
#define _SWFRQPWL_SWFRQPW1_POSN                             0x3
#define _SWFRQPWL_SWFRQPW1_POSITION                         0x3
#define _SWFRQPWL_SWFRQPW1_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW1_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW1_MASK                             0x8
#define _SWFRQPWL_SWFRQPW2_POSN                             0x4
#define _SWFRQPWL_SWFRQPW2_POSITION                         0x4
#define _SWFRQPWL_SWFRQPW2_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW2_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW2_MASK                             0x10
#define _SWFRQPWL_SWFRQPW3_POSN                             0x5
#define _SWFRQPWL_SWFRQPW3_POSITION                         0x5
#define _SWFRQPWL_SWFRQPW3_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW3_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW3_MASK                             0x20
#define _SWFRQPWL_SWFRQPW4_POSN                             0x6
#define _SWFRQPWL_SWFRQPW4_POSITION                         0x6
#define _SWFRQPWL_SWFRQPW4_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW4_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW4_MASK                             0x40
#define _SWFRQPWL_SWFRQPW5_POSN                             0x7
#define _SWFRQPWL_SWFRQPW5_POSITION                         0x7
#define _SWFRQPWL_SWFRQPW5_SIZE                             0x1
#define _SWFRQPWL_SWFRQPW5_LENGTH                           0x1
#define _SWFRQPWL_SWFRQPW5_MASK                             0x80

// Register: SWFRQDPS
#define SWFRQDPS SWFRQDPS
extern volatile unsigned char           SWFRQDPS            __at(0x392);
#ifndef _LIB_BUILD
asm("SWFRQDPS equ 0392h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned DPS0                   :1;
        unsigned DPS1                   :1;
        unsigned DPS2                   :1;
        unsigned DRANGE                 :1;
    };
} SWFRQDPSbits_t;
extern volatile SWFRQDPSbits_t SWFRQDPSbits __at(0x392);
// bitfield macros
#define _SWFRQDPS_DPS0_POSN                                 0x4
#define _SWFRQDPS_DPS0_POSITION                             0x4
#define _SWFRQDPS_DPS0_SIZE                                 0x1
#define _SWFRQDPS_DPS0_LENGTH                               0x1
#define _SWFRQDPS_DPS0_MASK                                 0x10
#define _SWFRQDPS_DPS1_POSN                                 0x5
#define _SWFRQDPS_DPS1_POSITION                             0x5
#define _SWFRQDPS_DPS1_SIZE                                 0x1
#define _SWFRQDPS_DPS1_LENGTH                               0x1
#define _SWFRQDPS_DPS1_MASK                                 0x20
#define _SWFRQDPS_DPS2_POSN                                 0x6
#define _SWFRQDPS_DPS2_POSITION                             0x6
#define _SWFRQDPS_DPS2_SIZE                                 0x1
#define _SWFRQDPS_DPS2_LENGTH                               0x1
#define _SWFRQDPS_DPS2_MASK                                 0x40
#define _SWFRQDPS_DRANGE_POSN                               0x7
#define _SWFRQDPS_DRANGE_POSITION                           0x7
#define _SWFRQDPS_DRANGE_SIZE                               0x1
#define _SWFRQDPS_DRANGE_LENGTH                             0x1
#define _SWFRQDPS_DRANGE_MASK                               0x80

// Register: DRVCON0
#define DRVCON0 DRVCON0
extern volatile unsigned char           DRVCON0             __at(0x397);
#ifndef _LIB_BUILD
asm("DRVCON0 equ 0397h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DRVMODE0               :1;
        unsigned DRVMODE1               :1;
        unsigned DRVMODE2               :1;
        unsigned DRVCTL                 :1;
        unsigned DTSEL0                 :1;
        unsigned DTSEL1                 :1;
        unsigned LODIS                  :1;
        unsigned HODIS                  :1;
    };
} DRVCON0bits_t;
extern volatile DRVCON0bits_t DRVCON0bits __at(0x397);
// bitfield macros
#define _DRVCON0_DRVMODE0_POSN                              0x0
#define _DRVCON0_DRVMODE0_POSITION                          0x0
#define _DRVCON0_DRVMODE0_SIZE                              0x1
#define _DRVCON0_DRVMODE0_LENGTH                            0x1
#define _DRVCON0_DRVMODE0_MASK                              0x1
#define _DRVCON0_DRVMODE1_POSN                              0x1
#define _DRVCON0_DRVMODE1_POSITION                          0x1
#define _DRVCON0_DRVMODE1_SIZE                              0x1
#define _DRVCON0_DRVMODE1_LENGTH                            0x1
#define _DRVCON0_DRVMODE1_MASK                              0x2
#define _DRVCON0_DRVMODE2_POSN                              0x2
#define _DRVCON0_DRVMODE2_POSITION                          0x2
#define _DRVCON0_DRVMODE2_SIZE                              0x1
#define _DRVCON0_DRVMODE2_LENGTH                            0x1
#define _DRVCON0_DRVMODE2_MASK                              0x4
#define _DRVCON0_DRVCTL_POSN                                0x3
#define _DRVCON0_DRVCTL_POSITION                            0x3
#define _DRVCON0_DRVCTL_SIZE                                0x1
#define _DRVCON0_DRVCTL_LENGTH                              0x1
#define _DRVCON0_DRVCTL_MASK                                0x8
#define _DRVCON0_DTSEL0_POSN                                0x4
#define _DRVCON0_DTSEL0_POSITION                            0x4
#define _DRVCON0_DTSEL0_SIZE                                0x1
#define _DRVCON0_DTSEL0_LENGTH                              0x1
#define _DRVCON0_DTSEL0_MASK                                0x10
#define _DRVCON0_DTSEL1_POSN                                0x5
#define _DRVCON0_DTSEL1_POSITION                            0x5
#define _DRVCON0_DTSEL1_SIZE                                0x1
#define _DRVCON0_DTSEL1_LENGTH                              0x1
#define _DRVCON0_DTSEL1_MASK                                0x20
#define _DRVCON0_LODIS_POSN                                 0x6
#define _DRVCON0_LODIS_POSITION                             0x6
#define _DRVCON0_LODIS_SIZE                                 0x1
#define _DRVCON0_LODIS_LENGTH                               0x1
#define _DRVCON0_LODIS_MASK                                 0x40
#define _DRVCON0_HODIS_POSN                                 0x7
#define _DRVCON0_HODIS_POSITION                             0x7
#define _DRVCON0_HODIS_SIZE                                 0x1
#define _DRVCON0_HODIS_LENGTH                               0x1
#define _DRVCON0_HODIS_MASK                                 0x80

// Register: DRVCON1
#define DRVCON1 DRVCON1
extern volatile unsigned char           DRVCON1             __at(0x398);
#ifndef _LIB_BUILD
asm("DRVCON1 equ 0398h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVFEL               :1;
        unsigned IVMOVFEH               :1;
        unsigned ICMOCFEL               :1;
        unsigned OVMUVFEL               :1;
        unsigned OVMOVFEL               :1;
        unsigned OCMUCFEL               :1;
        unsigned OCMOCFEL               :1;
        unsigned HOLDEL                 :1;
    };
} DRVCON1bits_t;
extern volatile DRVCON1bits_t DRVCON1bits __at(0x398);
// bitfield macros
#define _DRVCON1_IVMUVFEL_POSN                              0x0
#define _DRVCON1_IVMUVFEL_POSITION                          0x0
#define _DRVCON1_IVMUVFEL_SIZE                              0x1
#define _DRVCON1_IVMUVFEL_LENGTH                            0x1
#define _DRVCON1_IVMUVFEL_MASK                              0x1
#define _DRVCON1_IVMOVFEH_POSN                              0x1
#define _DRVCON1_IVMOVFEH_POSITION                          0x1
#define _DRVCON1_IVMOVFEH_SIZE                              0x1
#define _DRVCON1_IVMOVFEH_LENGTH                            0x1
#define _DRVCON1_IVMOVFEH_MASK                              0x2
#define _DRVCON1_ICMOCFEL_POSN                              0x2
#define _DRVCON1_ICMOCFEL_POSITION                          0x2
#define _DRVCON1_ICMOCFEL_SIZE                              0x1
#define _DRVCON1_ICMOCFEL_LENGTH                            0x1
#define _DRVCON1_ICMOCFEL_MASK                              0x4
#define _DRVCON1_OVMUVFEL_POSN                              0x3
#define _DRVCON1_OVMUVFEL_POSITION                          0x3
#define _DRVCON1_OVMUVFEL_SIZE                              0x1
#define _DRVCON1_OVMUVFEL_LENGTH                            0x1
#define _DRVCON1_OVMUVFEL_MASK                              0x8
#define _DRVCON1_OVMOVFEL_POSN                              0x4
#define _DRVCON1_OVMOVFEL_POSITION                          0x4
#define _DRVCON1_OVMOVFEL_SIZE                              0x1
#define _DRVCON1_OVMOVFEL_LENGTH                            0x1
#define _DRVCON1_OVMOVFEL_MASK                              0x10
#define _DRVCON1_OCMUCFEL_POSN                              0x5
#define _DRVCON1_OCMUCFEL_POSITION                          0x5
#define _DRVCON1_OCMUCFEL_SIZE                              0x1
#define _DRVCON1_OCMUCFEL_LENGTH                            0x1
#define _DRVCON1_OCMUCFEL_MASK                              0x20
#define _DRVCON1_OCMOCFEL_POSN                              0x6
#define _DRVCON1_OCMOCFEL_POSITION                          0x6
#define _DRVCON1_OCMOCFEL_SIZE                              0x1
#define _DRVCON1_OCMOCFEL_LENGTH                            0x1
#define _DRVCON1_OCMOCFEL_MASK                              0x40
#define _DRVCON1_HOLDEL_POSN                                0x7
#define _DRVCON1_HOLDEL_POSITION                            0x7
#define _DRVCON1_HOLDEL_SIZE                                0x1
#define _DRVCON1_HOLDEL_LENGTH                              0x1
#define _DRVCON1_HOLDEL_MASK                                0x80

// Register: DRVCON2
#define DRVCON2 DRVCON2
extern volatile unsigned char           DRVCON2             __at(0x399);
#ifndef _LIB_BUILD
asm("DRVCON2 equ 0399h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVFEH               :1;
        unsigned IVMOFEH                :1;
        unsigned ICMOCFEH               :1;
        unsigned OVMUVFEH               :1;
        unsigned OVMOFEH                :1;
        unsigned OCMUCFEH               :1;
        unsigned OCMOCEH                :1;
        unsigned HOLDEH                 :1;
    };
} DRVCON2bits_t;
extern volatile DRVCON2bits_t DRVCON2bits __at(0x399);
// bitfield macros
#define _DRVCON2_IVMUVFEH_POSN                              0x0
#define _DRVCON2_IVMUVFEH_POSITION                          0x0
#define _DRVCON2_IVMUVFEH_SIZE                              0x1
#define _DRVCON2_IVMUVFEH_LENGTH                            0x1
#define _DRVCON2_IVMUVFEH_MASK                              0x1
#define _DRVCON2_IVMOFEH_POSN                               0x1
#define _DRVCON2_IVMOFEH_POSITION                           0x1
#define _DRVCON2_IVMOFEH_SIZE                               0x1
#define _DRVCON2_IVMOFEH_LENGTH                             0x1
#define _DRVCON2_IVMOFEH_MASK                               0x2
#define _DRVCON2_ICMOCFEH_POSN                              0x2
#define _DRVCON2_ICMOCFEH_POSITION                          0x2
#define _DRVCON2_ICMOCFEH_SIZE                              0x1
#define _DRVCON2_ICMOCFEH_LENGTH                            0x1
#define _DRVCON2_ICMOCFEH_MASK                              0x4
#define _DRVCON2_OVMUVFEH_POSN                              0x3
#define _DRVCON2_OVMUVFEH_POSITION                          0x3
#define _DRVCON2_OVMUVFEH_SIZE                              0x1
#define _DRVCON2_OVMUVFEH_LENGTH                            0x1
#define _DRVCON2_OVMUVFEH_MASK                              0x8
#define _DRVCON2_OVMOFEH_POSN                               0x4
#define _DRVCON2_OVMOFEH_POSITION                           0x4
#define _DRVCON2_OVMOFEH_SIZE                               0x1
#define _DRVCON2_OVMOFEH_LENGTH                             0x1
#define _DRVCON2_OVMOFEH_MASK                               0x10
#define _DRVCON2_OCMUCFEH_POSN                              0x5
#define _DRVCON2_OCMUCFEH_POSITION                          0x5
#define _DRVCON2_OCMUCFEH_SIZE                              0x1
#define _DRVCON2_OCMUCFEH_LENGTH                            0x1
#define _DRVCON2_OCMUCFEH_MASK                              0x20
#define _DRVCON2_OCMOCEH_POSN                               0x6
#define _DRVCON2_OCMOCEH_POSITION                           0x6
#define _DRVCON2_OCMOCEH_SIZE                               0x1
#define _DRVCON2_OCMOCEH_LENGTH                             0x1
#define _DRVCON2_OCMOCEH_MASK                               0x40
#define _DRVCON2_HOLDEH_POSN                                0x7
#define _DRVCON2_HOLDEH_POSITION                            0x7
#define _DRVCON2_HOLDEH_SIZE                                0x1
#define _DRVCON2_HOLDEH_LENGTH                              0x1
#define _DRVCON2_HOLDEH_MASK                                0x80

// Register: DEADCON
#define DEADCON DEADCON
extern volatile unsigned char           DEADCON             __at(0x39A);
#ifndef _LIB_BUILD
asm("DEADCON equ 039Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DTL                    :4;
        unsigned DTH                    :4;
    };
} DEADCONbits_t;
extern volatile DEADCONbits_t DEADCONbits __at(0x39A);
// bitfield macros
#define _DEADCON_DTL_POSN                                   0x0
#define _DEADCON_DTL_POSITION                               0x0
#define _DEADCON_DTL_SIZE                                   0x4
#define _DEADCON_DTL_LENGTH                                 0x4
#define _DEADCON_DTL_MASK                                   0xF
#define _DEADCON_DTH_POSN                                   0x4
#define _DEADCON_DTH_POSITION                               0x4
#define _DEADCON_DTH_SIZE                                   0x4
#define _DEADCON_DTH_LENGTH                                 0x4
#define _DEADCON_DTH_MASK                                   0xF0

// Register: DEMCON
#define DEMCON DEMCON
extern volatile unsigned char           DEMCON              __at(0x39B);
#ifndef _LIB_BUILD
asm("DEMCON equ 039Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned DEMPOL                 :1;
        unsigned DEMOUT                 :1;
        unsigned                        :1;
        unsigned DEMEN                  :1;
    };
} DEMCONbits_t;
extern volatile DEMCONbits_t DEMCONbits __at(0x39B);
// bitfield macros
#define _DEMCON_DEMPOL_POSN                                 0x4
#define _DEMCON_DEMPOL_POSITION                             0x4
#define _DEMCON_DEMPOL_SIZE                                 0x1
#define _DEMCON_DEMPOL_LENGTH                               0x1
#define _DEMCON_DEMPOL_MASK                                 0x10
#define _DEMCON_DEMOUT_POSN                                 0x5
#define _DEMCON_DEMOUT_POSITION                             0x5
#define _DEMCON_DEMOUT_SIZE                                 0x1
#define _DEMCON_DEMOUT_LENGTH                               0x1
#define _DEMCON_DEMOUT_MASK                                 0x20
#define _DEMCON_DEMEN_POSN                                  0x7
#define _DEMCON_DEMEN_POSITION                              0x7
#define _DEMCON_DEMEN_SIZE                                  0x1
#define _DEMCON_DEMEN_LENGTH                                0x1
#define _DEMCON_DEMEN_MASK                                  0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x39C);
#ifndef _LIB_BUILD
asm("FVRCON equ 039Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FVRINTN                :1;
        unsigned FVRINTP                :1;
        unsigned FVR2OK                 :1;
        unsigned FVR1OK                 :1;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x39C);
// bitfield macros
#define _FVRCON_FVRINTN_POSN                                0x0
#define _FVRCON_FVRINTN_POSITION                            0x0
#define _FVRCON_FVRINTN_SIZE                                0x1
#define _FVRCON_FVRINTN_LENGTH                              0x1
#define _FVRCON_FVRINTN_MASK                                0x1
#define _FVRCON_FVRINTP_POSN                                0x1
#define _FVRCON_FVRINTP_POSITION                            0x1
#define _FVRCON_FVRINTP_SIZE                                0x1
#define _FVRCON_FVRINTP_LENGTH                              0x1
#define _FVRCON_FVRINTP_MASK                                0x2
#define _FVRCON_FVR2OK_POSN                                 0x2
#define _FVRCON_FVR2OK_POSITION                             0x2
#define _FVRCON_FVR2OK_SIZE                                 0x1
#define _FVRCON_FVR2OK_LENGTH                               0x1
#define _FVRCON_FVR2OK_MASK                                 0x4
#define _FVRCON_FVR1OK_POSN                                 0x3
#define _FVRCON_FVR1OK_POSITION                             0x3
#define _FVRCON_FVR1OK_SIZE                                 0x1
#define _FVRCON_FVR1OK_LENGTH                               0x1
#define _FVRCON_FVR1OK_MASK                                 0x8
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: TTASLOPE
#define TTASLOPE TTASLOPE
extern volatile unsigned char           TTASLOPE            __at(0x39D);
#ifndef _LIB_BUILD
asm("TTASLOPE equ 039Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MTTAMC                 :8;
    };
} TTASLOPEbits_t;
extern volatile TTASLOPEbits_t TTASLOPEbits __at(0x39D);
// bitfield macros
#define _TTASLOPE_MTTAMC_POSN                               0x0
#define _TTASLOPE_MTTAMC_POSITION                           0x0
#define _TTASLOPE_MTTAMC_SIZE                               0x8
#define _TTASLOPE_MTTAMC_LENGTH                             0x8
#define _TTASLOPE_MTTAMC_MASK                               0xFF

// Register: TTAOFFSET
#define TTAOFFSET TTAOFFSET
extern volatile unsigned char           TTAOFFSET           __at(0x39E);
#ifndef _LIB_BUILD
asm("TTAOFFSET equ 039Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MTTABC                 :8;
    };
} TTAOFFSETbits_t;
extern volatile TTAOFFSETbits_t TTAOFFSETbits __at(0x39E);
// bitfield macros
#define _TTAOFFSET_MTTABC_POSN                              0x0
#define _TTAOFFSET_MTTABC_POSITION                          0x0
#define _TTAOFFSET_MTTABC_SIZE                              0x8
#define _TTAOFFSET_MTTABC_LENGTH                            0x8
#define _TTAOFFSET_MTTABC_MASK                              0xFF

// Register: TSTBUFCON
#define TSTBUFCON TSTBUFCON
extern volatile unsigned char           TSTBUFCON           __at(0x39F);
#ifndef _LIB_BUILD
asm("TSTBUFCON equ 039Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSTPT0                 :1;
        unsigned TSTPT1                 :1;
        unsigned SLOT0                  :1;
        unsigned SLOT1                  :1;
        unsigned SLOT2                  :1;
        unsigned SLOT3                  :1;
        unsigned TSTMODE0               :1;
        unsigned TSTMODE1               :1;
    };
} TSTBUFCONbits_t;
extern volatile TSTBUFCONbits_t TSTBUFCONbits __at(0x39F);
// bitfield macros
#define _TSTBUFCON_TSTPT0_POSN                              0x0
#define _TSTBUFCON_TSTPT0_POSITION                          0x0
#define _TSTBUFCON_TSTPT0_SIZE                              0x1
#define _TSTBUFCON_TSTPT0_LENGTH                            0x1
#define _TSTBUFCON_TSTPT0_MASK                              0x1
#define _TSTBUFCON_TSTPT1_POSN                              0x1
#define _TSTBUFCON_TSTPT1_POSITION                          0x1
#define _TSTBUFCON_TSTPT1_SIZE                              0x1
#define _TSTBUFCON_TSTPT1_LENGTH                            0x1
#define _TSTBUFCON_TSTPT1_MASK                              0x2
#define _TSTBUFCON_SLOT0_POSN                               0x2
#define _TSTBUFCON_SLOT0_POSITION                           0x2
#define _TSTBUFCON_SLOT0_SIZE                               0x1
#define _TSTBUFCON_SLOT0_LENGTH                             0x1
#define _TSTBUFCON_SLOT0_MASK                               0x4
#define _TSTBUFCON_SLOT1_POSN                               0x3
#define _TSTBUFCON_SLOT1_POSITION                           0x3
#define _TSTBUFCON_SLOT1_SIZE                               0x1
#define _TSTBUFCON_SLOT1_LENGTH                             0x1
#define _TSTBUFCON_SLOT1_MASK                               0x8
#define _TSTBUFCON_SLOT2_POSN                               0x4
#define _TSTBUFCON_SLOT2_POSITION                           0x4
#define _TSTBUFCON_SLOT2_SIZE                               0x1
#define _TSTBUFCON_SLOT2_LENGTH                             0x1
#define _TSTBUFCON_SLOT2_MASK                               0x10
#define _TSTBUFCON_SLOT3_POSN                               0x5
#define _TSTBUFCON_SLOT3_POSITION                           0x5
#define _TSTBUFCON_SLOT3_SIZE                               0x1
#define _TSTBUFCON_SLOT3_LENGTH                             0x1
#define _TSTBUFCON_SLOT3_MASK                               0x20
#define _TSTBUFCON_TSTMODE0_POSN                            0x6
#define _TSTBUFCON_TSTMODE0_POSITION                        0x6
#define _TSTBUFCON_TSTMODE0_SIZE                            0x1
#define _TSTBUFCON_TSTMODE0_LENGTH                          0x1
#define _TSTBUFCON_TSTMODE0_MASK                            0x40
#define _TSTBUFCON_TSTMODE1_POSN                            0x7
#define _TSTBUFCON_TSTMODE1_POSITION                        0x7
#define _TSTBUFCON_TSTMODE1_SIZE                            0x1
#define _TSTBUFCON_TSTMODE1_LENGTH                          0x1
#define _TSTBUFCON_TSTMODE1_MASK                            0x80

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x40C);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 040Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADRL                  :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x40C);
// bitfield macros
#define _SCANLADRL_LADRL_POSN                               0x0
#define _SCANLADRL_LADRL_POSITION                           0x0
#define _SCANLADRL_LADRL_SIZE                               0x8
#define _SCANLADRL_LADRL_LENGTH                             0x8
#define _SCANLADRL_LADRL_MASK                               0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x40D);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 040Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADRH                  :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x40D);
// bitfield macros
#define _SCANLADRH_LADRH_POSN                               0x0
#define _SCANLADRH_LADRH_POSITION                           0x0
#define _SCANLADRH_LADRH_SIZE                               0x8
#define _SCANLADRH_LADRH_LENGTH                             0x8
#define _SCANLADRH_LADRH_MASK                               0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x40E);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADRL                  :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x40E);
// bitfield macros
#define _SCANHADRL_HADRL_POSN                               0x0
#define _SCANHADRL_HADRL_POSITION                           0x0
#define _SCANHADRL_HADRL_SIZE                               0x8
#define _SCANHADRL_HADRL_LENGTH                             0x8
#define _SCANHADRL_HADRL_MASK                               0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x40F);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 040Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADRH                  :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x40F);
// bitfield macros
#define _SCANHADRH_HADRH_POSN                               0x0
#define _SCANHADRH_HADRH_POSITION                           0x0
#define _SCANHADRH_HADRH_SIZE                               0x8
#define _SCANHADRH_HADRH_LENGTH                             0x8
#define _SCANHADRH_HADRH_MASK                               0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x410);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 0410h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned                        :1;
        unsigned INTM                   :1;
        unsigned INVALID                :1;
        unsigned BUSY                   :1;
        unsigned SCANGO                 :1;
        unsigned EN                     :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x410);
// bitfield macros
#define _SCANCON0_MODE0_POSN                                0x0
#define _SCANCON0_MODE0_POSITION                            0x0
#define _SCANCON0_MODE0_SIZE                                0x1
#define _SCANCON0_MODE0_LENGTH                              0x1
#define _SCANCON0_MODE0_MASK                                0x1
#define _SCANCON0_MODE1_POSN                                0x1
#define _SCANCON0_MODE1_POSITION                            0x1
#define _SCANCON0_MODE1_SIZE                                0x1
#define _SCANCON0_MODE1_LENGTH                              0x1
#define _SCANCON0_MODE1_MASK                                0x2
#define _SCANCON0_INTM_POSN                                 0x3
#define _SCANCON0_INTM_POSITION                             0x3
#define _SCANCON0_INTM_SIZE                                 0x1
#define _SCANCON0_INTM_LENGTH                               0x1
#define _SCANCON0_INTM_MASK                                 0x8
#define _SCANCON0_INVALID_POSN                              0x4
#define _SCANCON0_INVALID_POSITION                          0x4
#define _SCANCON0_INVALID_SIZE                              0x1
#define _SCANCON0_INVALID_LENGTH                            0x1
#define _SCANCON0_INVALID_MASK                              0x10
#define _SCANCON0_BUSY_POSN                                 0x5
#define _SCANCON0_BUSY_POSITION                             0x5
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x20
#define _SCANCON0_SCANGO_POSN                               0x6
#define _SCANCON0_SCANGO_POSITION                           0x6
#define _SCANCON0_SCANGO_SIZE                               0x1
#define _SCANCON0_SCANGO_LENGTH                             0x1
#define _SCANCON0_SCANGO_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80

// Register: SCANDTRIG
#define SCANDTRIG SCANDTRIG
extern volatile unsigned char           SCANDTRIG           __at(0x411);
#ifndef _LIB_BUILD
asm("SCANDTRIG equ 0411h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
    };
} SCANDTRIGbits_t;
extern volatile SCANDTRIGbits_t SCANDTRIGbits __at(0x411);
// bitfield macros
#define _SCANDTRIG_TSEL0_POSN                               0x0
#define _SCANDTRIG_TSEL0_POSITION                           0x0
#define _SCANDTRIG_TSEL0_SIZE                               0x1
#define _SCANDTRIG_TSEL0_LENGTH                             0x1
#define _SCANDTRIG_TSEL0_MASK                               0x1
#define _SCANDTRIG_TSEL1_POSN                               0x1
#define _SCANDTRIG_TSEL1_POSITION                           0x1
#define _SCANDTRIG_TSEL1_SIZE                               0x1
#define _SCANDTRIG_TSEL1_LENGTH                             0x1
#define _SCANDTRIG_TSEL1_MASK                               0x2
#define _SCANDTRIG_TSEL2_POSN                               0x2
#define _SCANDTRIG_TSEL2_POSITION                           0x2
#define _SCANDTRIG_TSEL2_SIZE                               0x1
#define _SCANDTRIG_TSEL2_LENGTH                             0x1
#define _SCANDTRIG_TSEL2_MASK                               0x4

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned short          CRCDATA             __at(0x416);
#ifndef _LIB_BUILD
asm("CRCDATA equ 0416h");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0x416);
#ifndef _LIB_BUILD
asm("CRCDATL equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0x416);
// bitfield macros
#define _CRCDATL_DATA0_POSN                                 0x0
#define _CRCDATL_DATA0_POSITION                             0x0
#define _CRCDATL_DATA0_SIZE                                 0x1
#define _CRCDATL_DATA0_LENGTH                               0x1
#define _CRCDATL_DATA0_MASK                                 0x1
#define _CRCDATL_DATA1_POSN                                 0x1
#define _CRCDATL_DATA1_POSITION                             0x1
#define _CRCDATL_DATA1_SIZE                                 0x1
#define _CRCDATL_DATA1_LENGTH                               0x1
#define _CRCDATL_DATA1_MASK                                 0x2
#define _CRCDATL_DATA2_POSN                                 0x2
#define _CRCDATL_DATA2_POSITION                             0x2
#define _CRCDATL_DATA2_SIZE                                 0x1
#define _CRCDATL_DATA2_LENGTH                               0x1
#define _CRCDATL_DATA2_MASK                                 0x4
#define _CRCDATL_DATA3_POSN                                 0x3
#define _CRCDATL_DATA3_POSITION                             0x3
#define _CRCDATL_DATA3_SIZE                                 0x1
#define _CRCDATL_DATA3_LENGTH                               0x1
#define _CRCDATL_DATA3_MASK                                 0x8
#define _CRCDATL_DATA4_POSN                                 0x4
#define _CRCDATL_DATA4_POSITION                             0x4
#define _CRCDATL_DATA4_SIZE                                 0x1
#define _CRCDATL_DATA4_LENGTH                               0x1
#define _CRCDATL_DATA4_MASK                                 0x10
#define _CRCDATL_DATA5_POSN                                 0x5
#define _CRCDATL_DATA5_POSITION                             0x5
#define _CRCDATL_DATA5_SIZE                                 0x1
#define _CRCDATL_DATA5_LENGTH                               0x1
#define _CRCDATL_DATA5_MASK                                 0x20
#define _CRCDATL_DATA6_POSN                                 0x6
#define _CRCDATL_DATA6_POSITION                             0x6
#define _CRCDATL_DATA6_SIZE                                 0x1
#define _CRCDATL_DATA6_LENGTH                               0x1
#define _CRCDATL_DATA6_MASK                                 0x40
#define _CRCDATL_DATA7_POSN                                 0x7
#define _CRCDATL_DATA7_POSITION                             0x7
#define _CRCDATL_DATA7_SIZE                                 0x1
#define _CRCDATL_DATA7_LENGTH                               0x1
#define _CRCDATL_DATA7_MASK                                 0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0x417);
#ifndef _LIB_BUILD
asm("CRCDATH equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0x417);
// bitfield macros
#define _CRCDATH_DATA8_POSN                                 0x0
#define _CRCDATH_DATA8_POSITION                             0x0
#define _CRCDATH_DATA8_SIZE                                 0x1
#define _CRCDATH_DATA8_LENGTH                               0x1
#define _CRCDATH_DATA8_MASK                                 0x1
#define _CRCDATH_DATA9_POSN                                 0x1
#define _CRCDATH_DATA9_POSITION                             0x1
#define _CRCDATH_DATA9_SIZE                                 0x1
#define _CRCDATH_DATA9_LENGTH                               0x1
#define _CRCDATH_DATA9_MASK                                 0x2
#define _CRCDATH_DATA10_POSN                                0x2
#define _CRCDATH_DATA10_POSITION                            0x2
#define _CRCDATH_DATA10_SIZE                                0x1
#define _CRCDATH_DATA10_LENGTH                              0x1
#define _CRCDATH_DATA10_MASK                                0x4
#define _CRCDATH_DATA11_POSN                                0x3
#define _CRCDATH_DATA11_POSITION                            0x3
#define _CRCDATH_DATA11_SIZE                                0x1
#define _CRCDATH_DATA11_LENGTH                              0x1
#define _CRCDATH_DATA11_MASK                                0x8
#define _CRCDATH_DATA12_POSN                                0x4
#define _CRCDATH_DATA12_POSITION                            0x4
#define _CRCDATH_DATA12_SIZE                                0x1
#define _CRCDATH_DATA12_LENGTH                              0x1
#define _CRCDATH_DATA12_MASK                                0x10
#define _CRCDATH_DATA13_POSN                                0x5
#define _CRCDATH_DATA13_POSITION                            0x5
#define _CRCDATH_DATA13_SIZE                                0x1
#define _CRCDATH_DATA13_LENGTH                              0x1
#define _CRCDATH_DATA13_MASK                                0x20
#define _CRCDATH_DATA14_POSN                                0x6
#define _CRCDATH_DATA14_POSITION                            0x6
#define _CRCDATH_DATA14_SIZE                                0x1
#define _CRCDATH_DATA14_LENGTH                              0x1
#define _CRCDATH_DATA14_MASK                                0x40
#define _CRCDATH_DATA15_POSN                                0x7
#define _CRCDATH_DATA15_POSITION                            0x7
#define _CRCDATH_DATA15_SIZE                                0x1
#define _CRCDATH_DATA15_LENGTH                              0x1
#define _CRCDATH_DATA15_MASK                                0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0x418);
#ifndef _LIB_BUILD
asm("CRCACC equ 0418h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0x418);
#ifndef _LIB_BUILD
asm("CRCACCL equ 0418h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0x418);
// bitfield macros
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0x419);
#ifndef _LIB_BUILD
asm("CRCACCH equ 0419h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0x419);
// bitfield macros
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80

// Register: CRCSHFT
#define CRCSHFT CRCSHFT
extern volatile unsigned short          CRCSHFT             __at(0x41A);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 041Ah");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0x41A);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 041Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT0                  :1;
        unsigned SHFT1                  :1;
        unsigned SHFT2                  :1;
        unsigned SHFT3                  :1;
        unsigned SHFT4                  :1;
        unsigned SHFT5                  :1;
        unsigned SHFT6                  :1;
        unsigned SHFT7                  :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x41A);
// bitfield macros
#define _CRCSHIFTL_SHFT0_POSN                               0x0
#define _CRCSHIFTL_SHFT0_POSITION                           0x0
#define _CRCSHIFTL_SHFT0_SIZE                               0x1
#define _CRCSHIFTL_SHFT0_LENGTH                             0x1
#define _CRCSHIFTL_SHFT0_MASK                               0x1
#define _CRCSHIFTL_SHFT1_POSN                               0x1
#define _CRCSHIFTL_SHFT1_POSITION                           0x1
#define _CRCSHIFTL_SHFT1_SIZE                               0x1
#define _CRCSHIFTL_SHFT1_LENGTH                             0x1
#define _CRCSHIFTL_SHFT1_MASK                               0x2
#define _CRCSHIFTL_SHFT2_POSN                               0x2
#define _CRCSHIFTL_SHFT2_POSITION                           0x2
#define _CRCSHIFTL_SHFT2_SIZE                               0x1
#define _CRCSHIFTL_SHFT2_LENGTH                             0x1
#define _CRCSHIFTL_SHFT2_MASK                               0x4
#define _CRCSHIFTL_SHFT3_POSN                               0x3
#define _CRCSHIFTL_SHFT3_POSITION                           0x3
#define _CRCSHIFTL_SHFT3_SIZE                               0x1
#define _CRCSHIFTL_SHFT3_LENGTH                             0x1
#define _CRCSHIFTL_SHFT3_MASK                               0x8
#define _CRCSHIFTL_SHFT4_POSN                               0x4
#define _CRCSHIFTL_SHFT4_POSITION                           0x4
#define _CRCSHIFTL_SHFT4_SIZE                               0x1
#define _CRCSHIFTL_SHFT4_LENGTH                             0x1
#define _CRCSHIFTL_SHFT4_MASK                               0x10
#define _CRCSHIFTL_SHFT5_POSN                               0x5
#define _CRCSHIFTL_SHFT5_POSITION                           0x5
#define _CRCSHIFTL_SHFT5_SIZE                               0x1
#define _CRCSHIFTL_SHFT5_LENGTH                             0x1
#define _CRCSHIFTL_SHFT5_MASK                               0x20
#define _CRCSHIFTL_SHFT6_POSN                               0x6
#define _CRCSHIFTL_SHFT6_POSITION                           0x6
#define _CRCSHIFTL_SHFT6_SIZE                               0x1
#define _CRCSHIFTL_SHFT6_LENGTH                             0x1
#define _CRCSHIFTL_SHFT6_MASK                               0x40
#define _CRCSHIFTL_SHFT7_POSN                               0x7
#define _CRCSHIFTL_SHFT7_POSITION                           0x7
#define _CRCSHIFTL_SHFT7_SIZE                               0x1
#define _CRCSHIFTL_SHFT7_LENGTH                             0x1
#define _CRCSHIFTL_SHFT7_MASK                               0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0x41B);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 041Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT8                  :1;
        unsigned SHFT9                  :1;
        unsigned SHFT10                 :1;
        unsigned SHFT11                 :1;
        unsigned SHFT12                 :1;
        unsigned SHFT13                 :1;
        unsigned SHFT14                 :1;
        unsigned SHFT15                 :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x41B);
// bitfield macros
#define _CRCSHIFTH_SHFT8_POSN                               0x0
#define _CRCSHIFTH_SHFT8_POSITION                           0x0
#define _CRCSHIFTH_SHFT8_SIZE                               0x1
#define _CRCSHIFTH_SHFT8_LENGTH                             0x1
#define _CRCSHIFTH_SHFT8_MASK                               0x1
#define _CRCSHIFTH_SHFT9_POSN                               0x1
#define _CRCSHIFTH_SHFT9_POSITION                           0x1
#define _CRCSHIFTH_SHFT9_SIZE                               0x1
#define _CRCSHIFTH_SHFT9_LENGTH                             0x1
#define _CRCSHIFTH_SHFT9_MASK                               0x2
#define _CRCSHIFTH_SHFT10_POSN                              0x2
#define _CRCSHIFTH_SHFT10_POSITION                          0x2
#define _CRCSHIFTH_SHFT10_SIZE                              0x1
#define _CRCSHIFTH_SHFT10_LENGTH                            0x1
#define _CRCSHIFTH_SHFT10_MASK                              0x4
#define _CRCSHIFTH_SHFT11_POSN                              0x3
#define _CRCSHIFTH_SHFT11_POSITION                          0x3
#define _CRCSHIFTH_SHFT11_SIZE                              0x1
#define _CRCSHIFTH_SHFT11_LENGTH                            0x1
#define _CRCSHIFTH_SHFT11_MASK                              0x8
#define _CRCSHIFTH_SHFT12_POSN                              0x4
#define _CRCSHIFTH_SHFT12_POSITION                          0x4
#define _CRCSHIFTH_SHFT12_SIZE                              0x1
#define _CRCSHIFTH_SHFT12_LENGTH                            0x1
#define _CRCSHIFTH_SHFT12_MASK                              0x10
#define _CRCSHIFTH_SHFT13_POSN                              0x5
#define _CRCSHIFTH_SHFT13_POSITION                          0x5
#define _CRCSHIFTH_SHFT13_SIZE                              0x1
#define _CRCSHIFTH_SHFT13_LENGTH                            0x1
#define _CRCSHIFTH_SHFT13_MASK                              0x20
#define _CRCSHIFTH_SHFT14_POSN                              0x6
#define _CRCSHIFTH_SHFT14_POSITION                          0x6
#define _CRCSHIFTH_SHFT14_SIZE                              0x1
#define _CRCSHIFTH_SHFT14_LENGTH                            0x1
#define _CRCSHIFTH_SHFT14_MASK                              0x40
#define _CRCSHIFTH_SHFT15_POSN                              0x7
#define _CRCSHIFTH_SHFT15_POSITION                          0x7
#define _CRCSHIFTH_SHFT15_SIZE                              0x1
#define _CRCSHIFTH_SHFT15_LENGTH                            0x1
#define _CRCSHIFTH_SHFT15_MASK                              0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0x41C);
#ifndef _LIB_BUILD
asm("CRCXOR equ 041Ch");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x41C);
#ifndef _LIB_BUILD
asm("CRCXORL equ 041Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned X1                     :1;
        unsigned X2                     :1;
        unsigned X3                     :1;
        unsigned X4                     :1;
        unsigned X5                     :1;
        unsigned X6                     :1;
        unsigned X7                     :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x41C);
// bitfield macros
#define _CRCXORL_X1_POSN                                    0x1
#define _CRCXORL_X1_POSITION                                0x1
#define _CRCXORL_X1_SIZE                                    0x1
#define _CRCXORL_X1_LENGTH                                  0x1
#define _CRCXORL_X1_MASK                                    0x2
#define _CRCXORL_X2_POSN                                    0x2
#define _CRCXORL_X2_POSITION                                0x2
#define _CRCXORL_X2_SIZE                                    0x1
#define _CRCXORL_X2_LENGTH                                  0x1
#define _CRCXORL_X2_MASK                                    0x4
#define _CRCXORL_X3_POSN                                    0x3
#define _CRCXORL_X3_POSITION                                0x3
#define _CRCXORL_X3_SIZE                                    0x1
#define _CRCXORL_X3_LENGTH                                  0x1
#define _CRCXORL_X3_MASK                                    0x8
#define _CRCXORL_X4_POSN                                    0x4
#define _CRCXORL_X4_POSITION                                0x4
#define _CRCXORL_X4_SIZE                                    0x1
#define _CRCXORL_X4_LENGTH                                  0x1
#define _CRCXORL_X4_MASK                                    0x10
#define _CRCXORL_X5_POSN                                    0x5
#define _CRCXORL_X5_POSITION                                0x5
#define _CRCXORL_X5_SIZE                                    0x1
#define _CRCXORL_X5_LENGTH                                  0x1
#define _CRCXORL_X5_MASK                                    0x20
#define _CRCXORL_X6_POSN                                    0x6
#define _CRCXORL_X6_POSITION                                0x6
#define _CRCXORL_X6_SIZE                                    0x1
#define _CRCXORL_X6_LENGTH                                  0x1
#define _CRCXORL_X6_MASK                                    0x40
#define _CRCXORL_X7_POSN                                    0x7
#define _CRCXORL_X7_POSITION                                0x7
#define _CRCXORL_X7_SIZE                                    0x1
#define _CRCXORL_X7_LENGTH                                  0x1
#define _CRCXORL_X7_MASK                                    0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x41D);
#ifndef _LIB_BUILD
asm("CRCXORH equ 041Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned X8                     :1;
        unsigned X9                     :1;
        unsigned X10                    :1;
        unsigned X11                    :1;
        unsigned X12                    :1;
        unsigned X13                    :1;
        unsigned X14                    :1;
        unsigned X15                    :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x41D);
// bitfield macros
#define _CRCXORH_X8_POSN                                    0x0
#define _CRCXORH_X8_POSITION                                0x0
#define _CRCXORH_X8_SIZE                                    0x1
#define _CRCXORH_X8_LENGTH                                  0x1
#define _CRCXORH_X8_MASK                                    0x1
#define _CRCXORH_X9_POSN                                    0x1
#define _CRCXORH_X9_POSITION                                0x1
#define _CRCXORH_X9_SIZE                                    0x1
#define _CRCXORH_X9_LENGTH                                  0x1
#define _CRCXORH_X9_MASK                                    0x2
#define _CRCXORH_X10_POSN                                   0x2
#define _CRCXORH_X10_POSITION                               0x2
#define _CRCXORH_X10_SIZE                                   0x1
#define _CRCXORH_X10_LENGTH                                 0x1
#define _CRCXORH_X10_MASK                                   0x4
#define _CRCXORH_X11_POSN                                   0x3
#define _CRCXORH_X11_POSITION                               0x3
#define _CRCXORH_X11_SIZE                                   0x1
#define _CRCXORH_X11_LENGTH                                 0x1
#define _CRCXORH_X11_MASK                                   0x8
#define _CRCXORH_X12_POSN                                   0x4
#define _CRCXORH_X12_POSITION                               0x4
#define _CRCXORH_X12_SIZE                                   0x1
#define _CRCXORH_X12_LENGTH                                 0x1
#define _CRCXORH_X12_MASK                                   0x10
#define _CRCXORH_X13_POSN                                   0x5
#define _CRCXORH_X13_POSITION                               0x5
#define _CRCXORH_X13_SIZE                                   0x1
#define _CRCXORH_X13_LENGTH                                 0x1
#define _CRCXORH_X13_MASK                                   0x20
#define _CRCXORH_X14_POSN                                   0x6
#define _CRCXORH_X14_POSITION                               0x6
#define _CRCXORH_X14_SIZE                                   0x1
#define _CRCXORH_X14_LENGTH                                 0x1
#define _CRCXORH_X14_MASK                                   0x40
#define _CRCXORH_X15_POSN                                   0x7
#define _CRCXORH_X15_POSITION                               0x7
#define _CRCXORH_X15_SIZE                                   0x1
#define _CRCXORH_X15_LENGTH                                 0x1
#define _CRCXORH_X15_MASK                                   0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x41E);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 041Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x41E);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x41F);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 041Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x41F);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80

// Register: IVMRAWRESL
#define IVMRAWRESL IVMRAWRESL
extern volatile unsigned char           IVMRAWRESL          __at(0x50D);
#ifndef _LIB_BUILD
asm("IVMRAWRESL equ 050Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD0                    :1;
        unsigned AD1                    :1;
        unsigned AD2                    :1;
        unsigned AD3                    :1;
        unsigned AD4                    :1;
        unsigned AD5                    :1;
        unsigned AD6                    :1;
        unsigned AD7                    :1;
    };
} IVMRAWRESLbits_t;
extern volatile IVMRAWRESLbits_t IVMRAWRESLbits __at(0x50D);
// bitfield macros
#define _IVMRAWRESL_AD0_POSN                                0x0
#define _IVMRAWRESL_AD0_POSITION                            0x0
#define _IVMRAWRESL_AD0_SIZE                                0x1
#define _IVMRAWRESL_AD0_LENGTH                              0x1
#define _IVMRAWRESL_AD0_MASK                                0x1
#define _IVMRAWRESL_AD1_POSN                                0x1
#define _IVMRAWRESL_AD1_POSITION                            0x1
#define _IVMRAWRESL_AD1_SIZE                                0x1
#define _IVMRAWRESL_AD1_LENGTH                              0x1
#define _IVMRAWRESL_AD1_MASK                                0x2
#define _IVMRAWRESL_AD2_POSN                                0x2
#define _IVMRAWRESL_AD2_POSITION                            0x2
#define _IVMRAWRESL_AD2_SIZE                                0x1
#define _IVMRAWRESL_AD2_LENGTH                              0x1
#define _IVMRAWRESL_AD2_MASK                                0x4
#define _IVMRAWRESL_AD3_POSN                                0x3
#define _IVMRAWRESL_AD3_POSITION                            0x3
#define _IVMRAWRESL_AD3_SIZE                                0x1
#define _IVMRAWRESL_AD3_LENGTH                              0x1
#define _IVMRAWRESL_AD3_MASK                                0x8
#define _IVMRAWRESL_AD4_POSN                                0x4
#define _IVMRAWRESL_AD4_POSITION                            0x4
#define _IVMRAWRESL_AD4_SIZE                                0x1
#define _IVMRAWRESL_AD4_LENGTH                              0x1
#define _IVMRAWRESL_AD4_MASK                                0x10
#define _IVMRAWRESL_AD5_POSN                                0x5
#define _IVMRAWRESL_AD5_POSITION                            0x5
#define _IVMRAWRESL_AD5_SIZE                                0x1
#define _IVMRAWRESL_AD5_LENGTH                              0x1
#define _IVMRAWRESL_AD5_MASK                                0x20
#define _IVMRAWRESL_AD6_POSN                                0x6
#define _IVMRAWRESL_AD6_POSITION                            0x6
#define _IVMRAWRESL_AD6_SIZE                                0x1
#define _IVMRAWRESL_AD6_LENGTH                              0x1
#define _IVMRAWRESL_AD6_MASK                                0x40
#define _IVMRAWRESL_AD7_POSN                                0x7
#define _IVMRAWRESL_AD7_POSITION                            0x7
#define _IVMRAWRESL_AD7_SIZE                                0x1
#define _IVMRAWRESL_AD7_LENGTH                              0x1
#define _IVMRAWRESL_AD7_MASK                                0x80

// Register: IVMRAWRESH
#define IVMRAWRESH IVMRAWRESH
extern volatile unsigned char           IVMRAWRESH          __at(0x50E);
#ifndef _LIB_BUILD
asm("IVMRAWRESH equ 050Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD8                    :1;
        unsigned AD9                    :1;
    };
} IVMRAWRESHbits_t;
extern volatile IVMRAWRESHbits_t IVMRAWRESHbits __at(0x50E);
// bitfield macros
#define _IVMRAWRESH_AD8_POSN                                0x0
#define _IVMRAWRESH_AD8_POSITION                            0x0
#define _IVMRAWRESH_AD8_SIZE                                0x1
#define _IVMRAWRESH_AD8_LENGTH                              0x1
#define _IVMRAWRESH_AD8_MASK                                0x1
#define _IVMRAWRESH_AD9_POSN                                0x1
#define _IVMRAWRESH_AD9_POSITION                            0x1
#define _IVMRAWRESH_AD9_SIZE                                0x1
#define _IVMRAWRESH_AD9_LENGTH                              0x1
#define _IVMRAWRESH_AD9_MASK                                0x2

// Register: IVMCON0
#define IVMCON0 IVMCON0
extern volatile unsigned char           IVMCON0             __at(0x50F);
#ifndef _LIB_BUILD
asm("IVMCON0 equ 050Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMON                  :1;
        unsigned GOnDONE                :1;
        unsigned                        :1;
        unsigned IVMCTS                 :1;
        unsigned                        :1;
        unsigned IVMLT0                 :1;
        unsigned IVMLT1                 :1;
        unsigned IVMLT2                 :1;
    };
} IVMCON0bits_t;
extern volatile IVMCON0bits_t IVMCON0bits __at(0x50F);
// bitfield macros
#define _IVMCON0_IVMON_POSN                                 0x0
#define _IVMCON0_IVMON_POSITION                             0x0
#define _IVMCON0_IVMON_SIZE                                 0x1
#define _IVMCON0_IVMON_LENGTH                               0x1
#define _IVMCON0_IVMON_MASK                                 0x1
#define _IVMCON0_GOnDONE_POSN                               0x1
#define _IVMCON0_GOnDONE_POSITION                           0x1
#define _IVMCON0_GOnDONE_SIZE                               0x1
#define _IVMCON0_GOnDONE_LENGTH                             0x1
#define _IVMCON0_GOnDONE_MASK                               0x2
#define _IVMCON0_IVMCTS_POSN                                0x3
#define _IVMCON0_IVMCTS_POSITION                            0x3
#define _IVMCON0_IVMCTS_SIZE                                0x1
#define _IVMCON0_IVMCTS_LENGTH                              0x1
#define _IVMCON0_IVMCTS_MASK                                0x8
#define _IVMCON0_IVMLT0_POSN                                0x5
#define _IVMCON0_IVMLT0_POSITION                            0x5
#define _IVMCON0_IVMLT0_SIZE                                0x1
#define _IVMCON0_IVMLT0_LENGTH                              0x1
#define _IVMCON0_IVMLT0_MASK                                0x20
#define _IVMCON0_IVMLT1_POSN                                0x6
#define _IVMCON0_IVMLT1_POSITION                            0x6
#define _IVMCON0_IVMLT1_SIZE                                0x1
#define _IVMCON0_IVMLT1_LENGTH                              0x1
#define _IVMCON0_IVMLT1_MASK                                0x40
#define _IVMCON0_IVMLT2_POSN                                0x7
#define _IVMCON0_IVMLT2_POSITION                            0x7
#define _IVMCON0_IVMLT2_SIZE                                0x1
#define _IVMCON0_IVMLT2_LENGTH                              0x1
#define _IVMCON0_IVMLT2_MASK                                0x80

// Register: IVMCON1
#define IVMCON1 IVMCON1
extern volatile unsigned char           IVMCON1             __at(0x510);
#ifndef _LIB_BUILD
asm("IVMCON1 equ 0510h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned IVMOVFINT              :1;
        unsigned IVMOVRINT              :1;
        unsigned IVMOVLAT               :1;
        unsigned IVMOVCNT0              :1;
        unsigned IVMOVCNT1              :1;
        unsigned IVMOVCNT2              :1;
    };
} IVMCON1bits_t;
extern volatile IVMCON1bits_t IVMCON1bits __at(0x510);
// bitfield macros
#define _IVMCON1_IVMOVFINT_POSN                             0x2
#define _IVMCON1_IVMOVFINT_POSITION                         0x2
#define _IVMCON1_IVMOVFINT_SIZE                             0x1
#define _IVMCON1_IVMOVFINT_LENGTH                           0x1
#define _IVMCON1_IVMOVFINT_MASK                             0x4
#define _IVMCON1_IVMOVRINT_POSN                             0x3
#define _IVMCON1_IVMOVRINT_POSITION                         0x3
#define _IVMCON1_IVMOVRINT_SIZE                             0x1
#define _IVMCON1_IVMOVRINT_LENGTH                           0x1
#define _IVMCON1_IVMOVRINT_MASK                             0x8
#define _IVMCON1_IVMOVLAT_POSN                              0x4
#define _IVMCON1_IVMOVLAT_POSITION                          0x4
#define _IVMCON1_IVMOVLAT_SIZE                              0x1
#define _IVMCON1_IVMOVLAT_LENGTH                            0x1
#define _IVMCON1_IVMOVLAT_MASK                              0x10
#define _IVMCON1_IVMOVCNT0_POSN                             0x5
#define _IVMCON1_IVMOVCNT0_POSITION                         0x5
#define _IVMCON1_IVMOVCNT0_SIZE                             0x1
#define _IVMCON1_IVMOVCNT0_LENGTH                           0x1
#define _IVMCON1_IVMOVCNT0_MASK                             0x20
#define _IVMCON1_IVMOVCNT1_POSN                             0x6
#define _IVMCON1_IVMOVCNT1_POSITION                         0x6
#define _IVMCON1_IVMOVCNT1_SIZE                             0x1
#define _IVMCON1_IVMOVCNT1_LENGTH                           0x1
#define _IVMCON1_IVMOVCNT1_MASK                             0x40
#define _IVMCON1_IVMOVCNT2_POSN                             0x7
#define _IVMCON1_IVMOVCNT2_POSITION                         0x7
#define _IVMCON1_IVMOVCNT2_SIZE                             0x1
#define _IVMCON1_IVMOVCNT2_LENGTH                           0x1
#define _IVMCON1_IVMOVCNT2_MASK                             0x80

// Register: IVMCON2
#define IVMCON2 IVMCON2
extern volatile unsigned char           IVMCON2             __at(0x511);
#ifndef _LIB_BUILD
asm("IVMCON2 equ 0511h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVFINT              :1;
        unsigned IVMUVRINT              :1;
        unsigned                        :2;
        unsigned IVMUVLAT               :1;
        unsigned IVMUVCNT0              :1;
        unsigned IVMUVCNT1              :1;
        unsigned IVMUVCNT2              :1;
    };
} IVMCON2bits_t;
extern volatile IVMCON2bits_t IVMCON2bits __at(0x511);
// bitfield macros
#define _IVMCON2_IVMUVFINT_POSN                             0x0
#define _IVMCON2_IVMUVFINT_POSITION                         0x0
#define _IVMCON2_IVMUVFINT_SIZE                             0x1
#define _IVMCON2_IVMUVFINT_LENGTH                           0x1
#define _IVMCON2_IVMUVFINT_MASK                             0x1
#define _IVMCON2_IVMUVRINT_POSN                             0x1
#define _IVMCON2_IVMUVRINT_POSITION                         0x1
#define _IVMCON2_IVMUVRINT_SIZE                             0x1
#define _IVMCON2_IVMUVRINT_LENGTH                           0x1
#define _IVMCON2_IVMUVRINT_MASK                             0x2
#define _IVMCON2_IVMUVLAT_POSN                              0x4
#define _IVMCON2_IVMUVLAT_POSITION                          0x4
#define _IVMCON2_IVMUVLAT_SIZE                              0x1
#define _IVMCON2_IVMUVLAT_LENGTH                            0x1
#define _IVMCON2_IVMUVLAT_MASK                              0x10
#define _IVMCON2_IVMUVCNT0_POSN                             0x5
#define _IVMCON2_IVMUVCNT0_POSITION                         0x5
#define _IVMCON2_IVMUVCNT0_SIZE                             0x1
#define _IVMCON2_IVMUVCNT0_LENGTH                           0x1
#define _IVMCON2_IVMUVCNT0_MASK                             0x20
#define _IVMCON2_IVMUVCNT1_POSN                             0x6
#define _IVMCON2_IVMUVCNT1_POSITION                         0x6
#define _IVMCON2_IVMUVCNT1_SIZE                             0x1
#define _IVMCON2_IVMUVCNT1_LENGTH                           0x1
#define _IVMCON2_IVMUVCNT1_MASK                             0x40
#define _IVMCON2_IVMUVCNT2_POSN                             0x7
#define _IVMCON2_IVMUVCNT2_POSITION                         0x7
#define _IVMCON2_IVMUVCNT2_SIZE                             0x1
#define _IVMCON2_IVMUVCNT2_LENGTH                           0x1
#define _IVMCON2_IVMUVCNT2_MASK                             0x80

// Register: ICMCON1
#define ICMCON1 ICMCON1
extern volatile unsigned char           ICMCON1             __at(0x512);
#ifndef _LIB_BUILD
asm("ICMCON1 equ 0512h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned ICMOCRINT              :1;
        unsigned ICMOCLAT               :1;
        unsigned ICMOCCNT0              :1;
        unsigned ICMOCCNT1              :1;
        unsigned ICMOCCNT2              :1;
    };
} ICMCON1bits_t;
extern volatile ICMCON1bits_t ICMCON1bits __at(0x512);
// bitfield macros
#define _ICMCON1_ICMOCRINT_POSN                             0x3
#define _ICMCON1_ICMOCRINT_POSITION                         0x3
#define _ICMCON1_ICMOCRINT_SIZE                             0x1
#define _ICMCON1_ICMOCRINT_LENGTH                           0x1
#define _ICMCON1_ICMOCRINT_MASK                             0x8
#define _ICMCON1_ICMOCLAT_POSN                              0x4
#define _ICMCON1_ICMOCLAT_POSITION                          0x4
#define _ICMCON1_ICMOCLAT_SIZE                              0x1
#define _ICMCON1_ICMOCLAT_LENGTH                            0x1
#define _ICMCON1_ICMOCLAT_MASK                              0x10
#define _ICMCON1_ICMOCCNT0_POSN                             0x5
#define _ICMCON1_ICMOCCNT0_POSITION                         0x5
#define _ICMCON1_ICMOCCNT0_SIZE                             0x1
#define _ICMCON1_ICMOCCNT0_LENGTH                           0x1
#define _ICMCON1_ICMOCCNT0_MASK                             0x20
#define _ICMCON1_ICMOCCNT1_POSN                             0x6
#define _ICMCON1_ICMOCCNT1_POSITION                         0x6
#define _ICMCON1_ICMOCCNT1_SIZE                             0x1
#define _ICMCON1_ICMOCCNT1_LENGTH                           0x1
#define _ICMCON1_ICMOCCNT1_MASK                             0x40
#define _ICMCON1_ICMOCCNT2_POSN                             0x7
#define _ICMCON1_ICMOCCNT2_POSITION                         0x7
#define _ICMCON1_ICMOCCNT2_SIZE                             0x1
#define _ICMCON1_ICMOCCNT2_LENGTH                           0x1
#define _ICMCON1_ICMOCCNT2_MASK                             0x80

// Register: IVMUVR
#define IVMUVR IVMUVR
extern volatile unsigned char           IVMUVR              __at(0x513);
#ifndef _LIB_BUILD
asm("IVMUVR equ 0513h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVR                 :8;
    };
} IVMUVRbits_t;
extern volatile IVMUVRbits_t IVMUVRbits __at(0x513);
// bitfield macros
#define _IVMUVR_IVMUVR_POSN                                 0x0
#define _IVMUVR_IVMUVR_POSITION                             0x0
#define _IVMUVR_IVMUVR_SIZE                                 0x8
#define _IVMUVR_IVMUVR_LENGTH                               0x8
#define _IVMUVR_IVMUVR_MASK                                 0xFF

// Register: IVMUVF
#define IVMUVF IVMUVF
extern volatile unsigned char           IVMUVF              __at(0x514);
#ifndef _LIB_BUILD
asm("IVMUVF equ 0514h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVF                 :8;
    };
} IVMUVFbits_t;
extern volatile IVMUVFbits_t IVMUVFbits __at(0x514);
// bitfield macros
#define _IVMUVF_IVMUVF_POSN                                 0x0
#define _IVMUVF_IVMUVF_POSITION                             0x0
#define _IVMUVF_IVMUVF_SIZE                                 0x8
#define _IVMUVF_IVMUVF_LENGTH                               0x8
#define _IVMUVF_IVMUVF_MASK                                 0xFF

// Register: IVMOVR
#define IVMOVR IVMOVR
extern volatile unsigned char           IVMOVR              __at(0x515);
#ifndef _LIB_BUILD
asm("IVMOVR equ 0515h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMOVR                 :8;
    };
} IVMOVRbits_t;
extern volatile IVMOVRbits_t IVMOVRbits __at(0x515);
// bitfield macros
#define _IVMOVR_IVMOVR_POSN                                 0x0
#define _IVMOVR_IVMOVR_POSITION                             0x0
#define _IVMOVR_IVMOVR_SIZE                                 0x8
#define _IVMOVR_IVMOVR_LENGTH                               0x8
#define _IVMOVR_IVMOVR_MASK                                 0xFF

// Register: IVMOVF
#define IVMOVF IVMOVF
extern volatile unsigned char           IVMOVF              __at(0x516);
#ifndef _LIB_BUILD
asm("IVMOVF equ 0516h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMOVF                 :8;
    };
} IVMOVFbits_t;
extern volatile IVMOVFbits_t IVMOVFbits __at(0x516);
// bitfield macros
#define _IVMOVF_IVMOVF_POSN                                 0x0
#define _IVMOVF_IVMOVF_POSITION                             0x0
#define _IVMOVF_IVMOVF_SIZE                                 0x8
#define _IVMOVF_IVMOVF_LENGTH                               0x8
#define _IVMOVF_IVMOVF_MASK                                 0xFF

// Register: IVMOVUVOUT
#define IVMOVUVOUT IVMOVUVOUT
extern volatile unsigned char           IVMOVUVOUT          __at(0x517);
#ifndef _LIB_BUILD
asm("IVMOVUVOUT equ 0517h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MIVMUVF                :1;
        unsigned MIVMUVR                :1;
        unsigned MIVMOVF                :1;
        unsigned MIVMOVR                :1;
        unsigned IVMUV                  :1;
        unsigned IVMOV                  :1;
    };
} IVMOVUVOUTbits_t;
extern volatile IVMOVUVOUTbits_t IVMOVUVOUTbits __at(0x517);
// bitfield macros
#define _IVMOVUVOUT_MIVMUVF_POSN                            0x0
#define _IVMOVUVOUT_MIVMUVF_POSITION                        0x0
#define _IVMOVUVOUT_MIVMUVF_SIZE                            0x1
#define _IVMOVUVOUT_MIVMUVF_LENGTH                          0x1
#define _IVMOVUVOUT_MIVMUVF_MASK                            0x1
#define _IVMOVUVOUT_MIVMUVR_POSN                            0x1
#define _IVMOVUVOUT_MIVMUVR_POSITION                        0x1
#define _IVMOVUVOUT_MIVMUVR_SIZE                            0x1
#define _IVMOVUVOUT_MIVMUVR_LENGTH                          0x1
#define _IVMOVUVOUT_MIVMUVR_MASK                            0x2
#define _IVMOVUVOUT_MIVMOVF_POSN                            0x2
#define _IVMOVUVOUT_MIVMOVF_POSITION                        0x2
#define _IVMOVUVOUT_MIVMOVF_SIZE                            0x1
#define _IVMOVUVOUT_MIVMOVF_LENGTH                          0x1
#define _IVMOVUVOUT_MIVMOVF_MASK                            0x4
#define _IVMOVUVOUT_MIVMOVR_POSN                            0x3
#define _IVMOVUVOUT_MIVMOVR_POSITION                        0x3
#define _IVMOVUVOUT_MIVMOVR_SIZE                            0x1
#define _IVMOVUVOUT_MIVMOVR_LENGTH                          0x1
#define _IVMOVUVOUT_MIVMOVR_MASK                            0x8
#define _IVMOVUVOUT_IVMUV_POSN                              0x4
#define _IVMOVUVOUT_IVMUV_POSITION                          0x4
#define _IVMOVUVOUT_IVMUV_SIZE                              0x1
#define _IVMOVUVOUT_IVMUV_LENGTH                            0x1
#define _IVMOVUVOUT_IVMUV_MASK                              0x10
#define _IVMOVUVOUT_IVMOV_POSN                              0x5
#define _IVMOVUVOUT_IVMOV_POSITION                          0x5
#define _IVMOVUVOUT_IVMOV_SIZE                              0x1
#define _IVMOVUVOUT_IVMOV_LENGTH                            0x1
#define _IVMOVUVOUT_IVMOV_MASK                              0x20

// Register: IVMCORRESL
#define IVMCORRESL IVMCORRESL
extern volatile unsigned char           IVMCORRESL          __at(0x518);
#ifndef _LIB_BUILD
asm("IVMCORRESL equ 0518h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned IVM0                   :1;
        unsigned IVM1                   :1;
    };
} IVMCORRESLbits_t;
extern volatile IVMCORRESLbits_t IVMCORRESLbits __at(0x518);
// bitfield macros
#define _IVMCORRESL_IVM0_POSN                               0x6
#define _IVMCORRESL_IVM0_POSITION                           0x6
#define _IVMCORRESL_IVM0_SIZE                               0x1
#define _IVMCORRESL_IVM0_LENGTH                             0x1
#define _IVMCORRESL_IVM0_MASK                               0x40
#define _IVMCORRESL_IVM1_POSN                               0x7
#define _IVMCORRESL_IVM1_POSITION                           0x7
#define _IVMCORRESL_IVM1_SIZE                               0x1
#define _IVMCORRESL_IVM1_LENGTH                             0x1
#define _IVMCORRESL_IVM1_MASK                               0x80

// Register: IVMCORRESH
#define IVMCORRESH IVMCORRESH
extern volatile unsigned char           IVMCORRESH          __at(0x519);
#ifndef _LIB_BUILD
asm("IVMCORRESH equ 0519h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVM2                   :1;
        unsigned IVM3                   :1;
        unsigned IVM4                   :1;
        unsigned IVM5                   :1;
        unsigned IVM6                   :1;
        unsigned IVM7                   :1;
        unsigned IVM8                   :1;
        unsigned IVM9                   :1;
    };
} IVMCORRESHbits_t;
extern volatile IVMCORRESHbits_t IVMCORRESHbits __at(0x519);
// bitfield macros
#define _IVMCORRESH_IVM2_POSN                               0x0
#define _IVMCORRESH_IVM2_POSITION                           0x0
#define _IVMCORRESH_IVM2_SIZE                               0x1
#define _IVMCORRESH_IVM2_LENGTH                             0x1
#define _IVMCORRESH_IVM2_MASK                               0x1
#define _IVMCORRESH_IVM3_POSN                               0x1
#define _IVMCORRESH_IVM3_POSITION                           0x1
#define _IVMCORRESH_IVM3_SIZE                               0x1
#define _IVMCORRESH_IVM3_LENGTH                             0x1
#define _IVMCORRESH_IVM3_MASK                               0x2
#define _IVMCORRESH_IVM4_POSN                               0x2
#define _IVMCORRESH_IVM4_POSITION                           0x2
#define _IVMCORRESH_IVM4_SIZE                               0x1
#define _IVMCORRESH_IVM4_LENGTH                             0x1
#define _IVMCORRESH_IVM4_MASK                               0x4
#define _IVMCORRESH_IVM5_POSN                               0x3
#define _IVMCORRESH_IVM5_POSITION                           0x3
#define _IVMCORRESH_IVM5_SIZE                               0x1
#define _IVMCORRESH_IVM5_LENGTH                             0x1
#define _IVMCORRESH_IVM5_MASK                               0x8
#define _IVMCORRESH_IVM6_POSN                               0x4
#define _IVMCORRESH_IVM6_POSITION                           0x4
#define _IVMCORRESH_IVM6_SIZE                               0x1
#define _IVMCORRESH_IVM6_LENGTH                             0x1
#define _IVMCORRESH_IVM6_MASK                               0x10
#define _IVMCORRESH_IVM7_POSN                               0x5
#define _IVMCORRESH_IVM7_POSITION                           0x5
#define _IVMCORRESH_IVM7_SIZE                               0x1
#define _IVMCORRESH_IVM7_LENGTH                             0x1
#define _IVMCORRESH_IVM7_MASK                               0x20
#define _IVMCORRESH_IVM8_POSN                               0x6
#define _IVMCORRESH_IVM8_POSITION                           0x6
#define _IVMCORRESH_IVM8_SIZE                               0x1
#define _IVMCORRESH_IVM8_LENGTH                             0x1
#define _IVMCORRESH_IVM8_MASK                               0x40
#define _IVMCORRESH_IVM9_POSN                               0x7
#define _IVMCORRESH_IVM9_POSITION                           0x7
#define _IVMCORRESH_IVM9_SIZE                               0x1
#define _IVMCORRESH_IVM9_LENGTH                             0x1
#define _IVMCORRESH_IVM9_MASK                               0x80

// Register: ICMOCCON
#define ICMOCCON ICMOCCON
extern volatile unsigned char           ICMOCCON            __at(0x51A);
#ifndef _LIB_BUILD
asm("ICMOCCON equ 051Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ICMOCSEL0              :1;
        unsigned ICMOCSEL1              :1;
        unsigned ICMOCSEL2              :1;
        unsigned ICMOCSEL3              :1;
        unsigned ICMOCSEL4              :1;
        unsigned                        :1;
        unsigned ICMOC                  :1;
        unsigned ICMOCON                :1;
    };
} ICMOCCONbits_t;
extern volatile ICMOCCONbits_t ICMOCCONbits __at(0x51A);
// bitfield macros
#define _ICMOCCON_ICMOCSEL0_POSN                            0x0
#define _ICMOCCON_ICMOCSEL0_POSITION                        0x0
#define _ICMOCCON_ICMOCSEL0_SIZE                            0x1
#define _ICMOCCON_ICMOCSEL0_LENGTH                          0x1
#define _ICMOCCON_ICMOCSEL0_MASK                            0x1
#define _ICMOCCON_ICMOCSEL1_POSN                            0x1
#define _ICMOCCON_ICMOCSEL1_POSITION                        0x1
#define _ICMOCCON_ICMOCSEL1_SIZE                            0x1
#define _ICMOCCON_ICMOCSEL1_LENGTH                          0x1
#define _ICMOCCON_ICMOCSEL1_MASK                            0x2
#define _ICMOCCON_ICMOCSEL2_POSN                            0x2
#define _ICMOCCON_ICMOCSEL2_POSITION                        0x2
#define _ICMOCCON_ICMOCSEL2_SIZE                            0x1
#define _ICMOCCON_ICMOCSEL2_LENGTH                          0x1
#define _ICMOCCON_ICMOCSEL2_MASK                            0x4
#define _ICMOCCON_ICMOCSEL3_POSN                            0x3
#define _ICMOCCON_ICMOCSEL3_POSITION                        0x3
#define _ICMOCCON_ICMOCSEL3_SIZE                            0x1
#define _ICMOCCON_ICMOCSEL3_LENGTH                          0x1
#define _ICMOCCON_ICMOCSEL3_MASK                            0x8
#define _ICMOCCON_ICMOCSEL4_POSN                            0x4
#define _ICMOCCON_ICMOCSEL4_POSITION                        0x4
#define _ICMOCCON_ICMOCSEL4_SIZE                            0x1
#define _ICMOCCON_ICMOCSEL4_LENGTH                          0x1
#define _ICMOCCON_ICMOCSEL4_MASK                            0x10
#define _ICMOCCON_ICMOC_POSN                                0x6
#define _ICMOCCON_ICMOC_POSITION                            0x6
#define _ICMOCCON_ICMOC_SIZE                                0x1
#define _ICMOCCON_ICMOC_LENGTH                              0x1
#define _ICMOCCON_ICMOC_MASK                                0x40
#define _ICMOCCON_ICMOCON_POSN                              0x7
#define _ICMOCCON_ICMOCON_POSITION                          0x7
#define _ICMOCCON_ICMOCON_SIZE                              0x1
#define _ICMOCCON_ICMOCON_LENGTH                            0x1
#define _ICMOCCON_ICMOCON_MASK                              0x80

// Register: ICMOFF
#define ICMOFF ICMOFF
extern volatile unsigned char           ICMOFF              __at(0x51B);
#ifndef _LIB_BUILD
asm("ICMOFF equ 051Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MICMOC0                :1;
        unsigned MICMOC1                :1;
        unsigned MICMOC2                :1;
        unsigned MICMOC3                :1;
        unsigned MICMOC4                :1;
    };
} ICMOFFbits_t;
extern volatile ICMOFFbits_t ICMOFFbits __at(0x51B);
// bitfield macros
#define _ICMOFF_MICMOC0_POSN                                0x0
#define _ICMOFF_MICMOC0_POSITION                            0x0
#define _ICMOFF_MICMOC0_SIZE                                0x1
#define _ICMOFF_MICMOC0_LENGTH                              0x1
#define _ICMOFF_MICMOC0_MASK                                0x1
#define _ICMOFF_MICMOC1_POSN                                0x1
#define _ICMOFF_MICMOC1_POSITION                            0x1
#define _ICMOFF_MICMOC1_SIZE                                0x1
#define _ICMOFF_MICMOC1_LENGTH                              0x1
#define _ICMOFF_MICMOC1_MASK                                0x2
#define _ICMOFF_MICMOC2_POSN                                0x2
#define _ICMOFF_MICMOC2_POSITION                            0x2
#define _ICMOFF_MICMOC2_SIZE                                0x1
#define _ICMOFF_MICMOC2_LENGTH                              0x1
#define _ICMOFF_MICMOC2_MASK                                0x4
#define _ICMOFF_MICMOC3_POSN                                0x3
#define _ICMOFF_MICMOC3_POSITION                            0x3
#define _ICMOFF_MICMOC3_SIZE                                0x1
#define _ICMOFF_MICMOC3_LENGTH                              0x1
#define _ICMOFF_MICMOC3_MASK                                0x8
#define _ICMOFF_MICMOC4_POSN                                0x4
#define _ICMOFF_MICMOC4_POSITION                            0x4
#define _ICMOFF_MICMOC4_SIZE                                0x1
#define _ICMOFF_MICMOC4_LENGTH                              0x1
#define _ICMOFF_MICMOC4_MASK                                0x10

// Register: ICMGAIN
#define ICMGAIN ICMGAIN
extern volatile unsigned char           ICMGAIN             __at(0x51C);
#ifndef _LIB_BUILD
asm("ICMGAIN equ 051Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MICMGC0                :1;
        unsigned MICMGC1                :1;
        unsigned MICMGC2                :1;
        unsigned MICMGC3                :1;
        unsigned MICMGC4                :1;
        unsigned MICMGC5                :1;
        unsigned MICMGC6                :1;
    };
} ICMGAINbits_t;
extern volatile ICMGAINbits_t ICMGAINbits __at(0x51C);
// bitfield macros
#define _ICMGAIN_MICMGC0_POSN                               0x0
#define _ICMGAIN_MICMGC0_POSITION                           0x0
#define _ICMGAIN_MICMGC0_SIZE                               0x1
#define _ICMGAIN_MICMGC0_LENGTH                             0x1
#define _ICMGAIN_MICMGC0_MASK                               0x1
#define _ICMGAIN_MICMGC1_POSN                               0x1
#define _ICMGAIN_MICMGC1_POSITION                           0x1
#define _ICMGAIN_MICMGC1_SIZE                               0x1
#define _ICMGAIN_MICMGC1_LENGTH                             0x1
#define _ICMGAIN_MICMGC1_MASK                               0x2
#define _ICMGAIN_MICMGC2_POSN                               0x2
#define _ICMGAIN_MICMGC2_POSITION                           0x2
#define _ICMGAIN_MICMGC2_SIZE                               0x1
#define _ICMGAIN_MICMGC2_LENGTH                             0x1
#define _ICMGAIN_MICMGC2_MASK                               0x4
#define _ICMGAIN_MICMGC3_POSN                               0x3
#define _ICMGAIN_MICMGC3_POSITION                           0x3
#define _ICMGAIN_MICMGC3_SIZE                               0x1
#define _ICMGAIN_MICMGC3_LENGTH                             0x1
#define _ICMGAIN_MICMGC3_MASK                               0x8
#define _ICMGAIN_MICMGC4_POSN                               0x4
#define _ICMGAIN_MICMGC4_POSITION                           0x4
#define _ICMGAIN_MICMGC4_SIZE                               0x1
#define _ICMGAIN_MICMGC4_LENGTH                             0x1
#define _ICMGAIN_MICMGC4_MASK                               0x10
#define _ICMGAIN_MICMGC5_POSN                               0x5
#define _ICMGAIN_MICMGC5_POSITION                           0x5
#define _ICMGAIN_MICMGC5_SIZE                               0x1
#define _ICMGAIN_MICMGC5_LENGTH                             0x1
#define _ICMGAIN_MICMGC5_MASK                               0x20
#define _ICMGAIN_MICMGC6_POSN                               0x6
#define _ICMGAIN_MICMGC6_POSITION                           0x6
#define _ICMGAIN_MICMGC6_SIZE                               0x1
#define _ICMGAIN_MICMGC6_LENGTH                             0x1
#define _ICMGAIN_MICMGC6_MASK                               0x40

// Register: OCMRAWRESL
#define OCMRAWRESL OCMRAWRESL
extern volatile unsigned char           OCMRAWRESL          __at(0x58D);
#ifndef _LIB_BUILD
asm("OCMRAWRESL equ 058Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD0                    :1;
        unsigned AD1                    :1;
        unsigned AD2                    :1;
        unsigned AD3                    :1;
        unsigned AD4                    :1;
        unsigned AD5                    :1;
        unsigned AD6                    :1;
        unsigned AD7                    :1;
    };
} OCMRAWRESLbits_t;
extern volatile OCMRAWRESLbits_t OCMRAWRESLbits __at(0x58D);
// bitfield macros
#define _OCMRAWRESL_AD0_POSN                                0x0
#define _OCMRAWRESL_AD0_POSITION                            0x0
#define _OCMRAWRESL_AD0_SIZE                                0x1
#define _OCMRAWRESL_AD0_LENGTH                              0x1
#define _OCMRAWRESL_AD0_MASK                                0x1
#define _OCMRAWRESL_AD1_POSN                                0x1
#define _OCMRAWRESL_AD1_POSITION                            0x1
#define _OCMRAWRESL_AD1_SIZE                                0x1
#define _OCMRAWRESL_AD1_LENGTH                              0x1
#define _OCMRAWRESL_AD1_MASK                                0x2
#define _OCMRAWRESL_AD2_POSN                                0x2
#define _OCMRAWRESL_AD2_POSITION                            0x2
#define _OCMRAWRESL_AD2_SIZE                                0x1
#define _OCMRAWRESL_AD2_LENGTH                              0x1
#define _OCMRAWRESL_AD2_MASK                                0x4
#define _OCMRAWRESL_AD3_POSN                                0x3
#define _OCMRAWRESL_AD3_POSITION                            0x3
#define _OCMRAWRESL_AD3_SIZE                                0x1
#define _OCMRAWRESL_AD3_LENGTH                              0x1
#define _OCMRAWRESL_AD3_MASK                                0x8
#define _OCMRAWRESL_AD4_POSN                                0x4
#define _OCMRAWRESL_AD4_POSITION                            0x4
#define _OCMRAWRESL_AD4_SIZE                                0x1
#define _OCMRAWRESL_AD4_LENGTH                              0x1
#define _OCMRAWRESL_AD4_MASK                                0x10
#define _OCMRAWRESL_AD5_POSN                                0x5
#define _OCMRAWRESL_AD5_POSITION                            0x5
#define _OCMRAWRESL_AD5_SIZE                                0x1
#define _OCMRAWRESL_AD5_LENGTH                              0x1
#define _OCMRAWRESL_AD5_MASK                                0x20
#define _OCMRAWRESL_AD6_POSN                                0x6
#define _OCMRAWRESL_AD6_POSITION                            0x6
#define _OCMRAWRESL_AD6_SIZE                                0x1
#define _OCMRAWRESL_AD6_LENGTH                              0x1
#define _OCMRAWRESL_AD6_MASK                                0x40
#define _OCMRAWRESL_AD7_POSN                                0x7
#define _OCMRAWRESL_AD7_POSITION                            0x7
#define _OCMRAWRESL_AD7_SIZE                                0x1
#define _OCMRAWRESL_AD7_LENGTH                              0x1
#define _OCMRAWRESL_AD7_MASK                                0x80

// Register: OCMRAWRESH
#define OCMRAWRESH OCMRAWRESH
extern volatile unsigned char           OCMRAWRESH          __at(0x58E);
#ifndef _LIB_BUILD
asm("OCMRAWRESH equ 058Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD8                    :1;
        unsigned AD9                    :1;
    };
} OCMRAWRESHbits_t;
extern volatile OCMRAWRESHbits_t OCMRAWRESHbits __at(0x58E);
// bitfield macros
#define _OCMRAWRESH_AD8_POSN                                0x0
#define _OCMRAWRESH_AD8_POSITION                            0x0
#define _OCMRAWRESH_AD8_SIZE                                0x1
#define _OCMRAWRESH_AD8_LENGTH                              0x1
#define _OCMRAWRESH_AD8_MASK                                0x1
#define _OCMRAWRESH_AD9_POSN                                0x1
#define _OCMRAWRESH_AD9_POSITION                            0x1
#define _OCMRAWRESH_AD9_SIZE                                0x1
#define _OCMRAWRESH_AD9_LENGTH                              0x1
#define _OCMRAWRESH_AD9_MASK                                0x2

// Register: OCMCON0
#define OCMCON0 OCMCON0
extern volatile unsigned char           OCMCON0             __at(0x58F);
#ifndef _LIB_BUILD
asm("OCMCON0 equ 058Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMON                  :1;
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned OCMCTS                 :1;
        unsigned                        :1;
        unsigned OCMLT0                 :1;
        unsigned OCMLT1                 :1;
        unsigned OCMLT2                 :1;
    };
} OCMCON0bits_t;
extern volatile OCMCON0bits_t OCMCON0bits __at(0x58F);
// bitfield macros
#define _OCMCON0_OCMON_POSN                                 0x0
#define _OCMCON0_OCMON_POSITION                             0x0
#define _OCMCON0_OCMON_SIZE                                 0x1
#define _OCMCON0_OCMON_LENGTH                               0x1
#define _OCMCON0_OCMON_MASK                                 0x1
#define _OCMCON0_GO_nDONE_POSN                              0x1
#define _OCMCON0_GO_nDONE_POSITION                          0x1
#define _OCMCON0_GO_nDONE_SIZE                              0x1
#define _OCMCON0_GO_nDONE_LENGTH                            0x1
#define _OCMCON0_GO_nDONE_MASK                              0x2
#define _OCMCON0_OCMCTS_POSN                                0x3
#define _OCMCON0_OCMCTS_POSITION                            0x3
#define _OCMCON0_OCMCTS_SIZE                                0x1
#define _OCMCON0_OCMCTS_LENGTH                              0x1
#define _OCMCON0_OCMCTS_MASK                                0x8
#define _OCMCON0_OCMLT0_POSN                                0x5
#define _OCMCON0_OCMLT0_POSITION                            0x5
#define _OCMCON0_OCMLT0_SIZE                                0x1
#define _OCMCON0_OCMLT0_LENGTH                              0x1
#define _OCMCON0_OCMLT0_MASK                                0x20
#define _OCMCON0_OCMLT1_POSN                                0x6
#define _OCMCON0_OCMLT1_POSITION                            0x6
#define _OCMCON0_OCMLT1_SIZE                                0x1
#define _OCMCON0_OCMLT1_LENGTH                              0x1
#define _OCMCON0_OCMLT1_MASK                                0x40
#define _OCMCON0_OCMLT2_POSN                                0x7
#define _OCMCON0_OCMLT2_POSITION                            0x7
#define _OCMCON0_OCMLT2_SIZE                                0x1
#define _OCMCON0_OCMLT2_LENGTH                              0x1
#define _OCMCON0_OCMLT2_MASK                                0x80

// Register: OCMCON1
#define OCMCON1 OCMCON1
extern volatile unsigned char           OCMCON1             __at(0x590);
#ifndef _LIB_BUILD
asm("OCMCON1 equ 0590h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned OCMOCFINT              :1;
        unsigned OCMOCRINT              :1;
        unsigned OCMOCLAT               :1;
        unsigned OCMOCCNT0              :1;
        unsigned OCMOCCNT1              :1;
        unsigned OCMOCCNT2              :1;
    };
} OCMCON1bits_t;
extern volatile OCMCON1bits_t OCMCON1bits __at(0x590);
// bitfield macros
#define _OCMCON1_OCMOCFINT_POSN                             0x2
#define _OCMCON1_OCMOCFINT_POSITION                         0x2
#define _OCMCON1_OCMOCFINT_SIZE                             0x1
#define _OCMCON1_OCMOCFINT_LENGTH                           0x1
#define _OCMCON1_OCMOCFINT_MASK                             0x4
#define _OCMCON1_OCMOCRINT_POSN                             0x3
#define _OCMCON1_OCMOCRINT_POSITION                         0x3
#define _OCMCON1_OCMOCRINT_SIZE                             0x1
#define _OCMCON1_OCMOCRINT_LENGTH                           0x1
#define _OCMCON1_OCMOCRINT_MASK                             0x8
#define _OCMCON1_OCMOCLAT_POSN                              0x4
#define _OCMCON1_OCMOCLAT_POSITION                          0x4
#define _OCMCON1_OCMOCLAT_SIZE                              0x1
#define _OCMCON1_OCMOCLAT_LENGTH                            0x1
#define _OCMCON1_OCMOCLAT_MASK                              0x10
#define _OCMCON1_OCMOCCNT0_POSN                             0x5
#define _OCMCON1_OCMOCCNT0_POSITION                         0x5
#define _OCMCON1_OCMOCCNT0_SIZE                             0x1
#define _OCMCON1_OCMOCCNT0_LENGTH                           0x1
#define _OCMCON1_OCMOCCNT0_MASK                             0x20
#define _OCMCON1_OCMOCCNT1_POSN                             0x6
#define _OCMCON1_OCMOCCNT1_POSITION                         0x6
#define _OCMCON1_OCMOCCNT1_SIZE                             0x1
#define _OCMCON1_OCMOCCNT1_LENGTH                           0x1
#define _OCMCON1_OCMOCCNT1_MASK                             0x40
#define _OCMCON1_OCMOCCNT2_POSN                             0x7
#define _OCMCON1_OCMOCCNT2_POSITION                         0x7
#define _OCMCON1_OCMOCCNT2_SIZE                             0x1
#define _OCMCON1_OCMOCCNT2_LENGTH                           0x1
#define _OCMCON1_OCMOCCNT2_MASK                             0x80

// Register: OCMCON2
#define OCMCON2 OCMCON2
extern volatile unsigned char           OCMCON2             __at(0x591);
#ifndef _LIB_BUILD
asm("OCMCON2 equ 0591h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMUCFINT              :1;
        unsigned OCMUCRINT              :1;
        unsigned                        :2;
        unsigned OCMUCLAT               :1;
        unsigned OCMUCCNT0              :1;
        unsigned OCMUCCNT1              :1;
        unsigned OCMUCCNT2              :1;
    };
} OCMCON2bits_t;
extern volatile OCMCON2bits_t OCMCON2bits __at(0x591);
// bitfield macros
#define _OCMCON2_OCMUCFINT_POSN                             0x0
#define _OCMCON2_OCMUCFINT_POSITION                         0x0
#define _OCMCON2_OCMUCFINT_SIZE                             0x1
#define _OCMCON2_OCMUCFINT_LENGTH                           0x1
#define _OCMCON2_OCMUCFINT_MASK                             0x1
#define _OCMCON2_OCMUCRINT_POSN                             0x1
#define _OCMCON2_OCMUCRINT_POSITION                         0x1
#define _OCMCON2_OCMUCRINT_SIZE                             0x1
#define _OCMCON2_OCMUCRINT_LENGTH                           0x1
#define _OCMCON2_OCMUCRINT_MASK                             0x2
#define _OCMCON2_OCMUCLAT_POSN                              0x4
#define _OCMCON2_OCMUCLAT_POSITION                          0x4
#define _OCMCON2_OCMUCLAT_SIZE                              0x1
#define _OCMCON2_OCMUCLAT_LENGTH                            0x1
#define _OCMCON2_OCMUCLAT_MASK                              0x10
#define _OCMCON2_OCMUCCNT0_POSN                             0x5
#define _OCMCON2_OCMUCCNT0_POSITION                         0x5
#define _OCMCON2_OCMUCCNT0_SIZE                             0x1
#define _OCMCON2_OCMUCCNT0_LENGTH                           0x1
#define _OCMCON2_OCMUCCNT0_MASK                             0x20
#define _OCMCON2_OCMUCCNT1_POSN                             0x6
#define _OCMCON2_OCMUCCNT1_POSITION                         0x6
#define _OCMCON2_OCMUCCNT1_SIZE                             0x1
#define _OCMCON2_OCMUCCNT1_LENGTH                           0x1
#define _OCMCON2_OCMUCCNT1_MASK                             0x40
#define _OCMCON2_OCMUCCNT2_POSN                             0x7
#define _OCMCON2_OCMUCCNT2_POSITION                         0x7
#define _OCMCON2_OCMUCCNT2_SIZE                             0x1
#define _OCMCON2_OCMUCCNT2_LENGTH                           0x1
#define _OCMCON2_OCMUCCNT2_MASK                             0x80

// Register: OCMUCR
#define OCMUCR OCMUCR
extern volatile unsigned char           OCMUCR              __at(0x593);
#ifndef _LIB_BUILD
asm("OCMUCR equ 0593h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMUCR0                :1;
        unsigned OCMUCR1                :1;
        unsigned OCMUCR2                :1;
        unsigned OCMUCR3                :1;
        unsigned OCMUCR4                :1;
        unsigned OCMUCR5                :1;
        unsigned OCMUCR6                :1;
        unsigned OCMUCR7                :1;
    };
} OCMUCRbits_t;
extern volatile OCMUCRbits_t OCMUCRbits __at(0x593);
// bitfield macros
#define _OCMUCR_OCMUCR0_POSN                                0x0
#define _OCMUCR_OCMUCR0_POSITION                            0x0
#define _OCMUCR_OCMUCR0_SIZE                                0x1
#define _OCMUCR_OCMUCR0_LENGTH                              0x1
#define _OCMUCR_OCMUCR0_MASK                                0x1
#define _OCMUCR_OCMUCR1_POSN                                0x1
#define _OCMUCR_OCMUCR1_POSITION                            0x1
#define _OCMUCR_OCMUCR1_SIZE                                0x1
#define _OCMUCR_OCMUCR1_LENGTH                              0x1
#define _OCMUCR_OCMUCR1_MASK                                0x2
#define _OCMUCR_OCMUCR2_POSN                                0x2
#define _OCMUCR_OCMUCR2_POSITION                            0x2
#define _OCMUCR_OCMUCR2_SIZE                                0x1
#define _OCMUCR_OCMUCR2_LENGTH                              0x1
#define _OCMUCR_OCMUCR2_MASK                                0x4
#define _OCMUCR_OCMUCR3_POSN                                0x3
#define _OCMUCR_OCMUCR3_POSITION                            0x3
#define _OCMUCR_OCMUCR3_SIZE                                0x1
#define _OCMUCR_OCMUCR3_LENGTH                              0x1
#define _OCMUCR_OCMUCR3_MASK                                0x8
#define _OCMUCR_OCMUCR4_POSN                                0x4
#define _OCMUCR_OCMUCR4_POSITION                            0x4
#define _OCMUCR_OCMUCR4_SIZE                                0x1
#define _OCMUCR_OCMUCR4_LENGTH                              0x1
#define _OCMUCR_OCMUCR4_MASK                                0x10
#define _OCMUCR_OCMUCR5_POSN                                0x5
#define _OCMUCR_OCMUCR5_POSITION                            0x5
#define _OCMUCR_OCMUCR5_SIZE                                0x1
#define _OCMUCR_OCMUCR5_LENGTH                              0x1
#define _OCMUCR_OCMUCR5_MASK                                0x20
#define _OCMUCR_OCMUCR6_POSN                                0x6
#define _OCMUCR_OCMUCR6_POSITION                            0x6
#define _OCMUCR_OCMUCR6_SIZE                                0x1
#define _OCMUCR_OCMUCR6_LENGTH                              0x1
#define _OCMUCR_OCMUCR6_MASK                                0x40
#define _OCMUCR_OCMUCR7_POSN                                0x7
#define _OCMUCR_OCMUCR7_POSITION                            0x7
#define _OCMUCR_OCMUCR7_SIZE                                0x1
#define _OCMUCR_OCMUCR7_LENGTH                              0x1
#define _OCMUCR_OCMUCR7_MASK                                0x80

// Register: OCMUCF
#define OCMUCF OCMUCF
extern volatile unsigned char           OCMUCF              __at(0x594);
#ifndef _LIB_BUILD
asm("OCMUCF equ 0594h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMUCF0                :1;
        unsigned OCMUCF1                :1;
        unsigned OCMUCF2                :1;
        unsigned OCMUCF3                :1;
        unsigned OCMUCF4                :1;
        unsigned OCMUCF5                :1;
        unsigned OCMUCF6                :1;
        unsigned OCMUCF7                :1;
    };
} OCMUCFbits_t;
extern volatile OCMUCFbits_t OCMUCFbits __at(0x594);
// bitfield macros
#define _OCMUCF_OCMUCF0_POSN                                0x0
#define _OCMUCF_OCMUCF0_POSITION                            0x0
#define _OCMUCF_OCMUCF0_SIZE                                0x1
#define _OCMUCF_OCMUCF0_LENGTH                              0x1
#define _OCMUCF_OCMUCF0_MASK                                0x1
#define _OCMUCF_OCMUCF1_POSN                                0x1
#define _OCMUCF_OCMUCF1_POSITION                            0x1
#define _OCMUCF_OCMUCF1_SIZE                                0x1
#define _OCMUCF_OCMUCF1_LENGTH                              0x1
#define _OCMUCF_OCMUCF1_MASK                                0x2
#define _OCMUCF_OCMUCF2_POSN                                0x2
#define _OCMUCF_OCMUCF2_POSITION                            0x2
#define _OCMUCF_OCMUCF2_SIZE                                0x1
#define _OCMUCF_OCMUCF2_LENGTH                              0x1
#define _OCMUCF_OCMUCF2_MASK                                0x4
#define _OCMUCF_OCMUCF3_POSN                                0x3
#define _OCMUCF_OCMUCF3_POSITION                            0x3
#define _OCMUCF_OCMUCF3_SIZE                                0x1
#define _OCMUCF_OCMUCF3_LENGTH                              0x1
#define _OCMUCF_OCMUCF3_MASK                                0x8
#define _OCMUCF_OCMUCF4_POSN                                0x4
#define _OCMUCF_OCMUCF4_POSITION                            0x4
#define _OCMUCF_OCMUCF4_SIZE                                0x1
#define _OCMUCF_OCMUCF4_LENGTH                              0x1
#define _OCMUCF_OCMUCF4_MASK                                0x10
#define _OCMUCF_OCMUCF5_POSN                                0x5
#define _OCMUCF_OCMUCF5_POSITION                            0x5
#define _OCMUCF_OCMUCF5_SIZE                                0x1
#define _OCMUCF_OCMUCF5_LENGTH                              0x1
#define _OCMUCF_OCMUCF5_MASK                                0x20
#define _OCMUCF_OCMUCF6_POSN                                0x6
#define _OCMUCF_OCMUCF6_POSITION                            0x6
#define _OCMUCF_OCMUCF6_SIZE                                0x1
#define _OCMUCF_OCMUCF6_LENGTH                              0x1
#define _OCMUCF_OCMUCF6_MASK                                0x40
#define _OCMUCF_OCMUCF7_POSN                                0x7
#define _OCMUCF_OCMUCF7_POSITION                            0x7
#define _OCMUCF_OCMUCF7_SIZE                                0x1
#define _OCMUCF_OCMUCF7_LENGTH                              0x1
#define _OCMUCF_OCMUCF7_MASK                                0x80

// Register: OCMOCR
#define OCMOCR OCMOCR
extern volatile unsigned char           OCMOCR              __at(0x595);
#ifndef _LIB_BUILD
asm("OCMOCR equ 0595h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMOCR0                :1;
        unsigned OCMOCR1                :1;
        unsigned OCMOCR2                :1;
        unsigned OCMOCR3                :1;
        unsigned OCMOCR4                :1;
        unsigned OCMOCR5                :1;
        unsigned OCMOCR6                :1;
        unsigned OCMOCR7                :1;
    };
} OCMOCRbits_t;
extern volatile OCMOCRbits_t OCMOCRbits __at(0x595);
// bitfield macros
#define _OCMOCR_OCMOCR0_POSN                                0x0
#define _OCMOCR_OCMOCR0_POSITION                            0x0
#define _OCMOCR_OCMOCR0_SIZE                                0x1
#define _OCMOCR_OCMOCR0_LENGTH                              0x1
#define _OCMOCR_OCMOCR0_MASK                                0x1
#define _OCMOCR_OCMOCR1_POSN                                0x1
#define _OCMOCR_OCMOCR1_POSITION                            0x1
#define _OCMOCR_OCMOCR1_SIZE                                0x1
#define _OCMOCR_OCMOCR1_LENGTH                              0x1
#define _OCMOCR_OCMOCR1_MASK                                0x2
#define _OCMOCR_OCMOCR2_POSN                                0x2
#define _OCMOCR_OCMOCR2_POSITION                            0x2
#define _OCMOCR_OCMOCR2_SIZE                                0x1
#define _OCMOCR_OCMOCR2_LENGTH                              0x1
#define _OCMOCR_OCMOCR2_MASK                                0x4
#define _OCMOCR_OCMOCR3_POSN                                0x3
#define _OCMOCR_OCMOCR3_POSITION                            0x3
#define _OCMOCR_OCMOCR3_SIZE                                0x1
#define _OCMOCR_OCMOCR3_LENGTH                              0x1
#define _OCMOCR_OCMOCR3_MASK                                0x8
#define _OCMOCR_OCMOCR4_POSN                                0x4
#define _OCMOCR_OCMOCR4_POSITION                            0x4
#define _OCMOCR_OCMOCR4_SIZE                                0x1
#define _OCMOCR_OCMOCR4_LENGTH                              0x1
#define _OCMOCR_OCMOCR4_MASK                                0x10
#define _OCMOCR_OCMOCR5_POSN                                0x5
#define _OCMOCR_OCMOCR5_POSITION                            0x5
#define _OCMOCR_OCMOCR5_SIZE                                0x1
#define _OCMOCR_OCMOCR5_LENGTH                              0x1
#define _OCMOCR_OCMOCR5_MASK                                0x20
#define _OCMOCR_OCMOCR6_POSN                                0x6
#define _OCMOCR_OCMOCR6_POSITION                            0x6
#define _OCMOCR_OCMOCR6_SIZE                                0x1
#define _OCMOCR_OCMOCR6_LENGTH                              0x1
#define _OCMOCR_OCMOCR6_MASK                                0x40
#define _OCMOCR_OCMOCR7_POSN                                0x7
#define _OCMOCR_OCMOCR7_POSITION                            0x7
#define _OCMOCR_OCMOCR7_SIZE                                0x1
#define _OCMOCR_OCMOCR7_LENGTH                              0x1
#define _OCMOCR_OCMOCR7_MASK                                0x80

// Register: OCMOCF
#define OCMOCF OCMOCF
extern volatile unsigned char           OCMOCF              __at(0x596);
#ifndef _LIB_BUILD
asm("OCMOCF equ 0596h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMOCF0                :1;
        unsigned OCMOCF1                :1;
        unsigned OCMOCF2                :1;
        unsigned OCMOCF3                :1;
        unsigned OCMOCF4                :1;
        unsigned OCMOCF5                :1;
        unsigned OCMOCF6                :1;
        unsigned OCMOCF7                :1;
    };
} OCMOCFbits_t;
extern volatile OCMOCFbits_t OCMOCFbits __at(0x596);
// bitfield macros
#define _OCMOCF_OCMOCF0_POSN                                0x0
#define _OCMOCF_OCMOCF0_POSITION                            0x0
#define _OCMOCF_OCMOCF0_SIZE                                0x1
#define _OCMOCF_OCMOCF0_LENGTH                              0x1
#define _OCMOCF_OCMOCF0_MASK                                0x1
#define _OCMOCF_OCMOCF1_POSN                                0x1
#define _OCMOCF_OCMOCF1_POSITION                            0x1
#define _OCMOCF_OCMOCF1_SIZE                                0x1
#define _OCMOCF_OCMOCF1_LENGTH                              0x1
#define _OCMOCF_OCMOCF1_MASK                                0x2
#define _OCMOCF_OCMOCF2_POSN                                0x2
#define _OCMOCF_OCMOCF2_POSITION                            0x2
#define _OCMOCF_OCMOCF2_SIZE                                0x1
#define _OCMOCF_OCMOCF2_LENGTH                              0x1
#define _OCMOCF_OCMOCF2_MASK                                0x4
#define _OCMOCF_OCMOCF3_POSN                                0x3
#define _OCMOCF_OCMOCF3_POSITION                            0x3
#define _OCMOCF_OCMOCF3_SIZE                                0x1
#define _OCMOCF_OCMOCF3_LENGTH                              0x1
#define _OCMOCF_OCMOCF3_MASK                                0x8
#define _OCMOCF_OCMOCF4_POSN                                0x4
#define _OCMOCF_OCMOCF4_POSITION                            0x4
#define _OCMOCF_OCMOCF4_SIZE                                0x1
#define _OCMOCF_OCMOCF4_LENGTH                              0x1
#define _OCMOCF_OCMOCF4_MASK                                0x10
#define _OCMOCF_OCMOCF5_POSN                                0x5
#define _OCMOCF_OCMOCF5_POSITION                            0x5
#define _OCMOCF_OCMOCF5_SIZE                                0x1
#define _OCMOCF_OCMOCF5_LENGTH                              0x1
#define _OCMOCF_OCMOCF5_MASK                                0x20
#define _OCMOCF_OCMOCF6_POSN                                0x6
#define _OCMOCF_OCMOCF6_POSITION                            0x6
#define _OCMOCF_OCMOCF6_SIZE                                0x1
#define _OCMOCF_OCMOCF6_LENGTH                              0x1
#define _OCMOCF_OCMOCF6_MASK                                0x40
#define _OCMOCF_OCMOCF7_POSN                                0x7
#define _OCMOCF_OCMOCF7_POSITION                            0x7
#define _OCMOCF_OCMOCF7_SIZE                                0x1
#define _OCMOCF_OCMOCF7_LENGTH                              0x1
#define _OCMOCF_OCMOCF7_MASK                                0x80

// Register: OCMOCUCOUT
#define OCMOCUCOUT OCMOCUCOUT
extern volatile unsigned char           OCMOCUCOUT          __at(0x597);
#ifndef _LIB_BUILD
asm("OCMOCUCOUT equ 0597h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MOCMUCR                :1;
        unsigned MOCMUCF                :1;
        unsigned MOCMOCR                :1;
        unsigned MOCMOCF                :1;
        unsigned OCMUC                  :1;
        unsigned OCMOC                  :1;
    };
} OCMOCUCOUTbits_t;
extern volatile OCMOCUCOUTbits_t OCMOCUCOUTbits __at(0x597);
// bitfield macros
#define _OCMOCUCOUT_MOCMUCR_POSN                            0x0
#define _OCMOCUCOUT_MOCMUCR_POSITION                        0x0
#define _OCMOCUCOUT_MOCMUCR_SIZE                            0x1
#define _OCMOCUCOUT_MOCMUCR_LENGTH                          0x1
#define _OCMOCUCOUT_MOCMUCR_MASK                            0x1
#define _OCMOCUCOUT_MOCMUCF_POSN                            0x1
#define _OCMOCUCOUT_MOCMUCF_POSITION                        0x1
#define _OCMOCUCOUT_MOCMUCF_SIZE                            0x1
#define _OCMOCUCOUT_MOCMUCF_LENGTH                          0x1
#define _OCMOCUCOUT_MOCMUCF_MASK                            0x2
#define _OCMOCUCOUT_MOCMOCR_POSN                            0x2
#define _OCMOCUCOUT_MOCMOCR_POSITION                        0x2
#define _OCMOCUCOUT_MOCMOCR_SIZE                            0x1
#define _OCMOCUCOUT_MOCMOCR_LENGTH                          0x1
#define _OCMOCUCOUT_MOCMOCR_MASK                            0x4
#define _OCMOCUCOUT_MOCMOCF_POSN                            0x3
#define _OCMOCUCOUT_MOCMOCF_POSITION                        0x3
#define _OCMOCUCOUT_MOCMOCF_SIZE                            0x1
#define _OCMOCUCOUT_MOCMOCF_LENGTH                          0x1
#define _OCMOCUCOUT_MOCMOCF_MASK                            0x8
#define _OCMOCUCOUT_OCMUC_POSN                              0x4
#define _OCMOCUCOUT_OCMUC_POSITION                          0x4
#define _OCMOCUCOUT_OCMUC_SIZE                              0x1
#define _OCMOCUCOUT_OCMUC_LENGTH                            0x1
#define _OCMOCUCOUT_OCMUC_MASK                              0x10
#define _OCMOCUCOUT_OCMOC_POSN                              0x5
#define _OCMOCUCOUT_OCMOC_POSITION                          0x5
#define _OCMOCUCOUT_OCMOC_SIZE                              0x1
#define _OCMOCUCOUT_OCMOC_LENGTH                            0x1
#define _OCMOCUCOUT_OCMOC_MASK                              0x20

// Register: OCMCORRESL
#define OCMCORRESL OCMCORRESL
extern volatile unsigned char           OCMCORRESL          __at(0x598);
#ifndef _LIB_BUILD
asm("OCMCORRESL equ 0598h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned OCM0                   :1;
        unsigned OCM1                   :1;
    };
} OCMCORRESLbits_t;
extern volatile OCMCORRESLbits_t OCMCORRESLbits __at(0x598);
// bitfield macros
#define _OCMCORRESL_OCM0_POSN                               0x6
#define _OCMCORRESL_OCM0_POSITION                           0x6
#define _OCMCORRESL_OCM0_SIZE                               0x1
#define _OCMCORRESL_OCM0_LENGTH                             0x1
#define _OCMCORRESL_OCM0_MASK                               0x40
#define _OCMCORRESL_OCM1_POSN                               0x7
#define _OCMCORRESL_OCM1_POSITION                           0x7
#define _OCMCORRESL_OCM1_SIZE                               0x1
#define _OCMCORRESL_OCM1_LENGTH                             0x1
#define _OCMCORRESL_OCM1_MASK                               0x80

// Register: OCMCORRESH
#define OCMCORRESH OCMCORRESH
extern volatile unsigned char           OCMCORRESH          __at(0x599);
#ifndef _LIB_BUILD
asm("OCMCORRESH equ 0599h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCM2                   :1;
        unsigned OCM3                   :1;
        unsigned OCM4                   :1;
        unsigned OCM5                   :1;
        unsigned OCM6                   :1;
        unsigned OCM7                   :1;
        unsigned OCM8                   :1;
        unsigned OCM9                   :1;
    };
} OCMCORRESHbits_t;
extern volatile OCMCORRESHbits_t OCMCORRESHbits __at(0x599);
// bitfield macros
#define _OCMCORRESH_OCM2_POSN                               0x0
#define _OCMCORRESH_OCM2_POSITION                           0x0
#define _OCMCORRESH_OCM2_SIZE                               0x1
#define _OCMCORRESH_OCM2_LENGTH                             0x1
#define _OCMCORRESH_OCM2_MASK                               0x1
#define _OCMCORRESH_OCM3_POSN                               0x1
#define _OCMCORRESH_OCM3_POSITION                           0x1
#define _OCMCORRESH_OCM3_SIZE                               0x1
#define _OCMCORRESH_OCM3_LENGTH                             0x1
#define _OCMCORRESH_OCM3_MASK                               0x2
#define _OCMCORRESH_OCM4_POSN                               0x2
#define _OCMCORRESH_OCM4_POSITION                           0x2
#define _OCMCORRESH_OCM4_SIZE                               0x1
#define _OCMCORRESH_OCM4_LENGTH                             0x1
#define _OCMCORRESH_OCM4_MASK                               0x4
#define _OCMCORRESH_OCM5_POSN                               0x3
#define _OCMCORRESH_OCM5_POSITION                           0x3
#define _OCMCORRESH_OCM5_SIZE                               0x1
#define _OCMCORRESH_OCM5_LENGTH                             0x1
#define _OCMCORRESH_OCM5_MASK                               0x8
#define _OCMCORRESH_OCM6_POSN                               0x4
#define _OCMCORRESH_OCM6_POSITION                           0x4
#define _OCMCORRESH_OCM6_SIZE                               0x1
#define _OCMCORRESH_OCM6_LENGTH                             0x1
#define _OCMCORRESH_OCM6_MASK                               0x10
#define _OCMCORRESH_OCM7_POSN                               0x5
#define _OCMCORRESH_OCM7_POSITION                           0x5
#define _OCMCORRESH_OCM7_SIZE                               0x1
#define _OCMCORRESH_OCM7_LENGTH                             0x1
#define _OCMCORRESH_OCM7_MASK                               0x20
#define _OCMCORRESH_OCM8_POSN                               0x6
#define _OCMCORRESH_OCM8_POSITION                           0x6
#define _OCMCORRESH_OCM8_SIZE                               0x1
#define _OCMCORRESH_OCM8_LENGTH                             0x1
#define _OCMCORRESH_OCM8_MASK                               0x40
#define _OCMCORRESH_OCM9_POSN                               0x7
#define _OCMCORRESH_OCM9_POSITION                           0x7
#define _OCMCORRESH_OCM9_SIZE                               0x1
#define _OCMCORRESH_OCM9_LENGTH                             0x1
#define _OCMCORRESH_OCM9_MASK                               0x80

// Register: LPFCON0
#define LPFCON0 LPFCON0
extern volatile unsigned char           LPFCON0             __at(0x59A);
#ifndef _LIB_BUILD
asm("LPFCON0 equ 059Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LPFCHS0                :1;
        unsigned LPFCHS1                :1;
        unsigned                        :5;
        unsigned LPFEN                  :1;
    };
} LPFCON0bits_t;
extern volatile LPFCON0bits_t LPFCON0bits __at(0x59A);
// bitfield macros
#define _LPFCON0_LPFCHS0_POSN                               0x0
#define _LPFCON0_LPFCHS0_POSITION                           0x0
#define _LPFCON0_LPFCHS0_SIZE                               0x1
#define _LPFCON0_LPFCHS0_LENGTH                             0x1
#define _LPFCON0_LPFCHS0_MASK                               0x1
#define _LPFCON0_LPFCHS1_POSN                               0x1
#define _LPFCON0_LPFCHS1_POSITION                           0x1
#define _LPFCON0_LPFCHS1_SIZE                               0x1
#define _LPFCON0_LPFCHS1_LENGTH                             0x1
#define _LPFCON0_LPFCHS1_MASK                               0x2
#define _LPFCON0_LPFEN_POSN                                 0x7
#define _LPFCON0_LPFEN_POSITION                             0x7
#define _LPFCON0_LPFEN_SIZE                                 0x1
#define _LPFCON0_LPFEN_LENGTH                               0x1
#define _LPFCON0_LPFEN_MASK                                 0x80

// Register: OCROFF
#define OCROFF OCROFF
extern volatile unsigned char           OCROFF              __at(0x59B);
#ifndef _LIB_BUILD
asm("OCROFF equ 059Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MOCROC0                :1;
        unsigned MOCROC1                :1;
        unsigned MOCROC2                :1;
        unsigned MOCROC3                :1;
        unsigned MOCROC4                :1;
    };
} OCROFFbits_t;
extern volatile OCROFFbits_t OCROFFbits __at(0x59B);
// bitfield macros
#define _OCROFF_MOCROC0_POSN                                0x0
#define _OCROFF_MOCROC0_POSITION                            0x0
#define _OCROFF_MOCROC0_SIZE                                0x1
#define _OCROFF_MOCROC0_LENGTH                              0x1
#define _OCROFF_MOCROC0_MASK                                0x1
#define _OCROFF_MOCROC1_POSN                                0x1
#define _OCROFF_MOCROC1_POSITION                            0x1
#define _OCROFF_MOCROC1_SIZE                                0x1
#define _OCROFF_MOCROC1_LENGTH                              0x1
#define _OCROFF_MOCROC1_MASK                                0x2
#define _OCROFF_MOCROC2_POSN                                0x2
#define _OCROFF_MOCROC2_POSITION                            0x2
#define _OCROFF_MOCROC2_SIZE                                0x1
#define _OCROFF_MOCROC2_LENGTH                              0x1
#define _OCROFF_MOCROC2_MASK                                0x4
#define _OCROFF_MOCROC3_POSN                                0x3
#define _OCROFF_MOCROC3_POSITION                            0x3
#define _OCROFF_MOCROC3_SIZE                                0x1
#define _OCROFF_MOCROC3_LENGTH                              0x1
#define _OCROFF_MOCROC3_MASK                                0x8
#define _OCROFF_MOCROC4_POSN                                0x4
#define _OCROFF_MOCROC4_POSITION                            0x4
#define _OCROFF_MOCROC4_SIZE                                0x1
#define _OCROFF_MOCROC4_LENGTH                              0x1
#define _OCROFF_MOCROC4_MASK                                0x10

// Register: OCRGAIN
#define OCRGAIN OCRGAIN
extern volatile unsigned char           OCRGAIN             __at(0x59C);
#ifndef _LIB_BUILD
asm("OCRGAIN equ 059Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MOCRGC0                :1;
        unsigned MOCRGC1                :1;
        unsigned MOCRGC2                :1;
        unsigned MOCRGC3                :1;
        unsigned MOCRGC4                :1;
        unsigned MOCRGC5                :1;
        unsigned MOCRGC6                :1;
    };
} OCRGAINbits_t;
extern volatile OCRGAINbits_t OCRGAINbits __at(0x59C);
// bitfield macros
#define _OCRGAIN_MOCRGC0_POSN                               0x0
#define _OCRGAIN_MOCRGC0_POSITION                           0x0
#define _OCRGAIN_MOCRGC0_SIZE                               0x1
#define _OCRGAIN_MOCRGC0_LENGTH                             0x1
#define _OCRGAIN_MOCRGC0_MASK                               0x1
#define _OCRGAIN_MOCRGC1_POSN                               0x1
#define _OCRGAIN_MOCRGC1_POSITION                           0x1
#define _OCRGAIN_MOCRGC1_SIZE                               0x1
#define _OCRGAIN_MOCRGC1_LENGTH                             0x1
#define _OCRGAIN_MOCRGC1_MASK                               0x2
#define _OCRGAIN_MOCRGC2_POSN                               0x2
#define _OCRGAIN_MOCRGC2_POSITION                           0x2
#define _OCRGAIN_MOCRGC2_SIZE                               0x1
#define _OCRGAIN_MOCRGC2_LENGTH                             0x1
#define _OCRGAIN_MOCRGC2_MASK                               0x4
#define _OCRGAIN_MOCRGC3_POSN                               0x3
#define _OCRGAIN_MOCRGC3_POSITION                           0x3
#define _OCRGAIN_MOCRGC3_SIZE                               0x1
#define _OCRGAIN_MOCRGC3_LENGTH                             0x1
#define _OCRGAIN_MOCRGC3_MASK                               0x8
#define _OCRGAIN_MOCRGC4_POSN                               0x4
#define _OCRGAIN_MOCRGC4_POSITION                           0x4
#define _OCRGAIN_MOCRGC4_SIZE                               0x1
#define _OCRGAIN_MOCRGC4_LENGTH                             0x1
#define _OCRGAIN_MOCRGC4_MASK                               0x10
#define _OCRGAIN_MOCRGC5_POSN                               0x5
#define _OCRGAIN_MOCRGC5_POSITION                           0x5
#define _OCRGAIN_MOCRGC5_SIZE                               0x1
#define _OCRGAIN_MOCRGC5_LENGTH                             0x1
#define _OCRGAIN_MOCRGC5_MASK                               0x20
#define _OCRGAIN_MOCRGC6_POSN                               0x6
#define _OCRGAIN_MOCRGC6_POSITION                           0x6
#define _OCRGAIN_MOCRGC6_SIZE                               0x1
#define _OCRGAIN_MOCRGC6_LENGTH                             0x1
#define _OCRGAIN_MOCRGC6_MASK                               0x40

// Register: OVMRAWRESL
#define OVMRAWRESL OVMRAWRESL
extern volatile unsigned char           OVMRAWRESL          __at(0x60D);
#ifndef _LIB_BUILD
asm("OVMRAWRESL equ 060Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD0                    :1;
        unsigned AD1                    :1;
        unsigned AD2                    :1;
        unsigned AD3                    :1;
        unsigned AD4                    :1;
        unsigned AD5                    :1;
        unsigned AD6                    :1;
        unsigned AD7                    :1;
    };
} OVMRAWRESLbits_t;
extern volatile OVMRAWRESLbits_t OVMRAWRESLbits __at(0x60D);
// bitfield macros
#define _OVMRAWRESL_AD0_POSN                                0x0
#define _OVMRAWRESL_AD0_POSITION                            0x0
#define _OVMRAWRESL_AD0_SIZE                                0x1
#define _OVMRAWRESL_AD0_LENGTH                              0x1
#define _OVMRAWRESL_AD0_MASK                                0x1
#define _OVMRAWRESL_AD1_POSN                                0x1
#define _OVMRAWRESL_AD1_POSITION                            0x1
#define _OVMRAWRESL_AD1_SIZE                                0x1
#define _OVMRAWRESL_AD1_LENGTH                              0x1
#define _OVMRAWRESL_AD1_MASK                                0x2
#define _OVMRAWRESL_AD2_POSN                                0x2
#define _OVMRAWRESL_AD2_POSITION                            0x2
#define _OVMRAWRESL_AD2_SIZE                                0x1
#define _OVMRAWRESL_AD2_LENGTH                              0x1
#define _OVMRAWRESL_AD2_MASK                                0x4
#define _OVMRAWRESL_AD3_POSN                                0x3
#define _OVMRAWRESL_AD3_POSITION                            0x3
#define _OVMRAWRESL_AD3_SIZE                                0x1
#define _OVMRAWRESL_AD3_LENGTH                              0x1
#define _OVMRAWRESL_AD3_MASK                                0x8
#define _OVMRAWRESL_AD4_POSN                                0x4
#define _OVMRAWRESL_AD4_POSITION                            0x4
#define _OVMRAWRESL_AD4_SIZE                                0x1
#define _OVMRAWRESL_AD4_LENGTH                              0x1
#define _OVMRAWRESL_AD4_MASK                                0x10
#define _OVMRAWRESL_AD5_POSN                                0x5
#define _OVMRAWRESL_AD5_POSITION                            0x5
#define _OVMRAWRESL_AD5_SIZE                                0x1
#define _OVMRAWRESL_AD5_LENGTH                              0x1
#define _OVMRAWRESL_AD5_MASK                                0x20
#define _OVMRAWRESL_AD6_POSN                                0x6
#define _OVMRAWRESL_AD6_POSITION                            0x6
#define _OVMRAWRESL_AD6_SIZE                                0x1
#define _OVMRAWRESL_AD6_LENGTH                              0x1
#define _OVMRAWRESL_AD6_MASK                                0x40
#define _OVMRAWRESL_AD7_POSN                                0x7
#define _OVMRAWRESL_AD7_POSITION                            0x7
#define _OVMRAWRESL_AD7_SIZE                                0x1
#define _OVMRAWRESL_AD7_LENGTH                              0x1
#define _OVMRAWRESL_AD7_MASK                                0x80

// Register: OVMRAWRESH
#define OVMRAWRESH OVMRAWRESH
extern volatile unsigned char           OVMRAWRESH          __at(0x60E);
#ifndef _LIB_BUILD
asm("OVMRAWRESH equ 060Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD8                    :1;
        unsigned AD9                    :1;
    };
} OVMRAWRESHbits_t;
extern volatile OVMRAWRESHbits_t OVMRAWRESHbits __at(0x60E);
// bitfield macros
#define _OVMRAWRESH_AD8_POSN                                0x0
#define _OVMRAWRESH_AD8_POSITION                            0x0
#define _OVMRAWRESH_AD8_SIZE                                0x1
#define _OVMRAWRESH_AD8_LENGTH                              0x1
#define _OVMRAWRESH_AD8_MASK                                0x1
#define _OVMRAWRESH_AD9_POSN                                0x1
#define _OVMRAWRESH_AD9_POSITION                            0x1
#define _OVMRAWRESH_AD9_SIZE                                0x1
#define _OVMRAWRESH_AD9_LENGTH                              0x1
#define _OVMRAWRESH_AD9_MASK                                0x2

// Register: OVMCON0
#define OVMCON0 OVMCON0
extern volatile unsigned char           OVMCON0             __at(0x60F);
#ifndef _LIB_BUILD
asm("OVMCON0 equ 060Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMON                  :1;
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned OMCTS                  :1;
        unsigned                        :1;
        unsigned OMLT0                  :1;
        unsigned OMLT1                  :1;
        unsigned OMLT2                  :1;
    };
} OVMCON0bits_t;
extern volatile OVMCON0bits_t OVMCON0bits __at(0x60F);
// bitfield macros
#define _OVMCON0_OCMON_POSN                                 0x0
#define _OVMCON0_OCMON_POSITION                             0x0
#define _OVMCON0_OCMON_SIZE                                 0x1
#define _OVMCON0_OCMON_LENGTH                               0x1
#define _OVMCON0_OCMON_MASK                                 0x1
#define _OVMCON0_GO_nDONE_POSN                              0x1
#define _OVMCON0_GO_nDONE_POSITION                          0x1
#define _OVMCON0_GO_nDONE_SIZE                              0x1
#define _OVMCON0_GO_nDONE_LENGTH                            0x1
#define _OVMCON0_GO_nDONE_MASK                              0x2
#define _OVMCON0_OMCTS_POSN                                 0x3
#define _OVMCON0_OMCTS_POSITION                             0x3
#define _OVMCON0_OMCTS_SIZE                                 0x1
#define _OVMCON0_OMCTS_LENGTH                               0x1
#define _OVMCON0_OMCTS_MASK                                 0x8
#define _OVMCON0_OMLT0_POSN                                 0x5
#define _OVMCON0_OMLT0_POSITION                             0x5
#define _OVMCON0_OMLT0_SIZE                                 0x1
#define _OVMCON0_OMLT0_LENGTH                               0x1
#define _OVMCON0_OMLT0_MASK                                 0x20
#define _OVMCON0_OMLT1_POSN                                 0x6
#define _OVMCON0_OMLT1_POSITION                             0x6
#define _OVMCON0_OMLT1_SIZE                                 0x1
#define _OVMCON0_OMLT1_LENGTH                               0x1
#define _OVMCON0_OMLT1_MASK                                 0x40
#define _OVMCON0_OMLT2_POSN                                 0x7
#define _OVMCON0_OMLT2_POSITION                             0x7
#define _OVMCON0_OMLT2_SIZE                                 0x1
#define _OVMCON0_OMLT2_LENGTH                               0x1
#define _OVMCON0_OMLT2_MASK                                 0x80

// Register: OVMCON1
#define OVMCON1 OVMCON1
extern volatile unsigned char           OVMCON1             __at(0x610);
#ifndef _LIB_BUILD
asm("OVMCON1 equ 0610h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned OVMOVFINT              :1;
        unsigned OVMOVRINT              :1;
        unsigned OVMOVLAT               :1;
        unsigned OVMOVCNT0              :1;
        unsigned OVMOVCNT1              :1;
        unsigned OVMOVCNT2              :1;
    };
} OVMCON1bits_t;
extern volatile OVMCON1bits_t OVMCON1bits __at(0x610);
// bitfield macros
#define _OVMCON1_OVMOVFINT_POSN                             0x2
#define _OVMCON1_OVMOVFINT_POSITION                         0x2
#define _OVMCON1_OVMOVFINT_SIZE                             0x1
#define _OVMCON1_OVMOVFINT_LENGTH                           0x1
#define _OVMCON1_OVMOVFINT_MASK                             0x4
#define _OVMCON1_OVMOVRINT_POSN                             0x3
#define _OVMCON1_OVMOVRINT_POSITION                         0x3
#define _OVMCON1_OVMOVRINT_SIZE                             0x1
#define _OVMCON1_OVMOVRINT_LENGTH                           0x1
#define _OVMCON1_OVMOVRINT_MASK                             0x8
#define _OVMCON1_OVMOVLAT_POSN                              0x4
#define _OVMCON1_OVMOVLAT_POSITION                          0x4
#define _OVMCON1_OVMOVLAT_SIZE                              0x1
#define _OVMCON1_OVMOVLAT_LENGTH                            0x1
#define _OVMCON1_OVMOVLAT_MASK                              0x10
#define _OVMCON1_OVMOVCNT0_POSN                             0x5
#define _OVMCON1_OVMOVCNT0_POSITION                         0x5
#define _OVMCON1_OVMOVCNT0_SIZE                             0x1
#define _OVMCON1_OVMOVCNT0_LENGTH                           0x1
#define _OVMCON1_OVMOVCNT0_MASK                             0x20
#define _OVMCON1_OVMOVCNT1_POSN                             0x6
#define _OVMCON1_OVMOVCNT1_POSITION                         0x6
#define _OVMCON1_OVMOVCNT1_SIZE                             0x1
#define _OVMCON1_OVMOVCNT1_LENGTH                           0x1
#define _OVMCON1_OVMOVCNT1_MASK                             0x40
#define _OVMCON1_OVMOVCNT2_POSN                             0x7
#define _OVMCON1_OVMOVCNT2_POSITION                         0x7
#define _OVMCON1_OVMOVCNT2_SIZE                             0x1
#define _OVMCON1_OVMOVCNT2_LENGTH                           0x1
#define _OVMCON1_OVMOVCNT2_MASK                             0x80

// Register: OVMCON2
#define OVMCON2 OVMCON2
extern volatile unsigned char           OVMCON2             __at(0x611);
#ifndef _LIB_BUILD
asm("OVMCON2 equ 0611h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMUVFINT              :1;
        unsigned OVMUVRINT              :1;
        unsigned                        :2;
        unsigned OVMUVLAT               :1;
        unsigned OVMUVCNT0              :1;
        unsigned OVMUVCNT1              :1;
        unsigned OVMUVCNT2              :1;
    };
} OVMCON2bits_t;
extern volatile OVMCON2bits_t OVMCON2bits __at(0x611);
// bitfield macros
#define _OVMCON2_OVMUVFINT_POSN                             0x0
#define _OVMCON2_OVMUVFINT_POSITION                         0x0
#define _OVMCON2_OVMUVFINT_SIZE                             0x1
#define _OVMCON2_OVMUVFINT_LENGTH                           0x1
#define _OVMCON2_OVMUVFINT_MASK                             0x1
#define _OVMCON2_OVMUVRINT_POSN                             0x1
#define _OVMCON2_OVMUVRINT_POSITION                         0x1
#define _OVMCON2_OVMUVRINT_SIZE                             0x1
#define _OVMCON2_OVMUVRINT_LENGTH                           0x1
#define _OVMCON2_OVMUVRINT_MASK                             0x2
#define _OVMCON2_OVMUVLAT_POSN                              0x4
#define _OVMCON2_OVMUVLAT_POSITION                          0x4
#define _OVMCON2_OVMUVLAT_SIZE                              0x1
#define _OVMCON2_OVMUVLAT_LENGTH                            0x1
#define _OVMCON2_OVMUVLAT_MASK                              0x10
#define _OVMCON2_OVMUVCNT0_POSN                             0x5
#define _OVMCON2_OVMUVCNT0_POSITION                         0x5
#define _OVMCON2_OVMUVCNT0_SIZE                             0x1
#define _OVMCON2_OVMUVCNT0_LENGTH                           0x1
#define _OVMCON2_OVMUVCNT0_MASK                             0x20
#define _OVMCON2_OVMUVCNT1_POSN                             0x6
#define _OVMCON2_OVMUVCNT1_POSITION                         0x6
#define _OVMCON2_OVMUVCNT1_SIZE                             0x1
#define _OVMCON2_OVMUVCNT1_LENGTH                           0x1
#define _OVMCON2_OVMUVCNT1_MASK                             0x40
#define _OVMCON2_OVMUVCNT2_POSN                             0x7
#define _OVMCON2_OVMUVCNT2_POSITION                         0x7
#define _OVMCON2_OVMUVCNT2_SIZE                             0x1
#define _OVMCON2_OVMUVCNT2_LENGTH                           0x1
#define _OVMCON2_OVMUVCNT2_MASK                             0x80

// Register: OVMCON3
#define OVMCON3 OVMCON3
extern volatile unsigned char           OVMCON3             __at(0x612);
#ifndef _LIB_BUILD
asm("OVMCON3 equ 0612h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMGS0                 :1;
        unsigned OVMGS1                 :1;
        unsigned OVMGS2                 :1;
        unsigned                        :4;
        unsigned OVMSIGN                :1;
    };
} OVMCON3bits_t;
extern volatile OVMCON3bits_t OVMCON3bits __at(0x612);
// bitfield macros
#define _OVMCON3_OVMGS0_POSN                                0x0
#define _OVMCON3_OVMGS0_POSITION                            0x0
#define _OVMCON3_OVMGS0_SIZE                                0x1
#define _OVMCON3_OVMGS0_LENGTH                              0x1
#define _OVMCON3_OVMGS0_MASK                                0x1
#define _OVMCON3_OVMGS1_POSN                                0x1
#define _OVMCON3_OVMGS1_POSITION                            0x1
#define _OVMCON3_OVMGS1_SIZE                                0x1
#define _OVMCON3_OVMGS1_LENGTH                              0x1
#define _OVMCON3_OVMGS1_MASK                                0x2
#define _OVMCON3_OVMGS2_POSN                                0x2
#define _OVMCON3_OVMGS2_POSITION                            0x2
#define _OVMCON3_OVMGS2_SIZE                                0x1
#define _OVMCON3_OVMGS2_LENGTH                              0x1
#define _OVMCON3_OVMGS2_MASK                                0x4
#define _OVMCON3_OVMSIGN_POSN                               0x7
#define _OVMCON3_OVMSIGN_POSITION                           0x7
#define _OVMCON3_OVMSIGN_SIZE                               0x1
#define _OVMCON3_OVMSIGN_LENGTH                             0x1
#define _OVMCON3_OVMSIGN_MASK                               0x80

// Register: OVMUVR
#define OVMUVR OVMUVR
extern volatile unsigned char           OVMUVR              __at(0x613);
#ifndef _LIB_BUILD
asm("OVMUVR equ 0613h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMUVR                 :8;
    };
} OVMUVRbits_t;
extern volatile OVMUVRbits_t OVMUVRbits __at(0x613);
// bitfield macros
#define _OVMUVR_OVMUVR_POSN                                 0x0
#define _OVMUVR_OVMUVR_POSITION                             0x0
#define _OVMUVR_OVMUVR_SIZE                                 0x8
#define _OVMUVR_OVMUVR_LENGTH                               0x8
#define _OVMUVR_OVMUVR_MASK                                 0xFF

// Register: OVMUVF
#define OVMUVF OVMUVF
extern volatile unsigned char           OVMUVF              __at(0x614);
#ifndef _LIB_BUILD
asm("OVMUVF equ 0614h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMUVF                 :8;
    };
} OVMUVFbits_t;
extern volatile OVMUVFbits_t OVMUVFbits __at(0x614);
// bitfield macros
#define _OVMUVF_OVMUVF_POSN                                 0x0
#define _OVMUVF_OVMUVF_POSITION                             0x0
#define _OVMUVF_OVMUVF_SIZE                                 0x8
#define _OVMUVF_OVMUVF_LENGTH                               0x8
#define _OVMUVF_OVMUVF_MASK                                 0xFF

// Register: OVMOVR
#define OVMOVR OVMOVR
extern volatile unsigned char           OVMOVR              __at(0x615);
#ifndef _LIB_BUILD
asm("OVMOVR equ 0615h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMOVR                 :8;
    };
} OVMOVRbits_t;
extern volatile OVMOVRbits_t OVMOVRbits __at(0x615);
// bitfield macros
#define _OVMOVR_OVMOVR_POSN                                 0x0
#define _OVMOVR_OVMOVR_POSITION                             0x0
#define _OVMOVR_OVMOVR_SIZE                                 0x8
#define _OVMOVR_OVMOVR_LENGTH                               0x8
#define _OVMOVR_OVMOVR_MASK                                 0xFF

// Register: OVMOVF
#define OVMOVF OVMOVF
extern volatile unsigned char           OVMOVF              __at(0x616);
#ifndef _LIB_BUILD
asm("OVMOVF equ 0616h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMOVF                 :8;
    };
} OVMOVFbits_t;
extern volatile OVMOVFbits_t OVMOVFbits __at(0x616);
// bitfield macros
#define _OVMOVF_OVMOVF_POSN                                 0x0
#define _OVMOVF_OVMOVF_POSITION                             0x0
#define _OVMOVF_OVMOVF_SIZE                                 0x8
#define _OVMOVF_OVMOVF_LENGTH                               0x8
#define _OVMOVF_OVMOVF_MASK                                 0xFF

// Register: OVMOVUVOUT
#define OVMOVUVOUT OVMOVUVOUT
extern volatile unsigned char           OVMOVUVOUT          __at(0x617);
#ifndef _LIB_BUILD
asm("OVMOVUVOUT equ 0617h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MOVMUVF                :1;
        unsigned MOVMUVR                :1;
        unsigned MOVMOVF                :1;
        unsigned MOVMOVR                :1;
        unsigned OVMUV                  :1;
        unsigned OVMOV                  :1;
    };
} OVMOVUVOUTbits_t;
extern volatile OVMOVUVOUTbits_t OVMOVUVOUTbits __at(0x617);
// bitfield macros
#define _OVMOVUVOUT_MOVMUVF_POSN                            0x0
#define _OVMOVUVOUT_MOVMUVF_POSITION                        0x0
#define _OVMOVUVOUT_MOVMUVF_SIZE                            0x1
#define _OVMOVUVOUT_MOVMUVF_LENGTH                          0x1
#define _OVMOVUVOUT_MOVMUVF_MASK                            0x1
#define _OVMOVUVOUT_MOVMUVR_POSN                            0x1
#define _OVMOVUVOUT_MOVMUVR_POSITION                        0x1
#define _OVMOVUVOUT_MOVMUVR_SIZE                            0x1
#define _OVMOVUVOUT_MOVMUVR_LENGTH                          0x1
#define _OVMOVUVOUT_MOVMUVR_MASK                            0x2
#define _OVMOVUVOUT_MOVMOVF_POSN                            0x2
#define _OVMOVUVOUT_MOVMOVF_POSITION                        0x2
#define _OVMOVUVOUT_MOVMOVF_SIZE                            0x1
#define _OVMOVUVOUT_MOVMOVF_LENGTH                          0x1
#define _OVMOVUVOUT_MOVMOVF_MASK                            0x4
#define _OVMOVUVOUT_MOVMOVR_POSN                            0x3
#define _OVMOVUVOUT_MOVMOVR_POSITION                        0x3
#define _OVMOVUVOUT_MOVMOVR_SIZE                            0x1
#define _OVMOVUVOUT_MOVMOVR_LENGTH                          0x1
#define _OVMOVUVOUT_MOVMOVR_MASK                            0x8
#define _OVMOVUVOUT_OVMUV_POSN                              0x4
#define _OVMOVUVOUT_OVMUV_POSITION                          0x4
#define _OVMOVUVOUT_OVMUV_SIZE                              0x1
#define _OVMOVUVOUT_OVMUV_LENGTH                            0x1
#define _OVMOVUVOUT_OVMUV_MASK                              0x10
#define _OVMOVUVOUT_OVMOV_POSN                              0x5
#define _OVMOVUVOUT_OVMOV_POSITION                          0x5
#define _OVMOVUVOUT_OVMOV_SIZE                              0x1
#define _OVMOVUVOUT_OVMOV_LENGTH                            0x1
#define _OVMOVUVOUT_OVMOV_MASK                              0x20

// Register: OVMCORRESL
#define OVMCORRESL OVMCORRESL
extern volatile unsigned char           OVMCORRESL          __at(0x618);
#ifndef _LIB_BUILD
asm("OVMCORRESL equ 0618h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned OVM0                   :1;
        unsigned OVM1                   :1;
    };
} OVMCORRESLbits_t;
extern volatile OVMCORRESLbits_t OVMCORRESLbits __at(0x618);
// bitfield macros
#define _OVMCORRESL_OVM0_POSN                               0x6
#define _OVMCORRESL_OVM0_POSITION                           0x6
#define _OVMCORRESL_OVM0_SIZE                               0x1
#define _OVMCORRESL_OVM0_LENGTH                             0x1
#define _OVMCORRESL_OVM0_MASK                               0x40
#define _OVMCORRESL_OVM1_POSN                               0x7
#define _OVMCORRESL_OVM1_POSITION                           0x7
#define _OVMCORRESL_OVM1_SIZE                               0x1
#define _OVMCORRESL_OVM1_LENGTH                             0x1
#define _OVMCORRESL_OVM1_MASK                               0x80

// Register: OVMCORRESH
#define OVMCORRESH OVMCORRESH
extern volatile unsigned char           OVMCORRESH          __at(0x619);
#ifndef _LIB_BUILD
asm("OVMCORRESH equ 0619h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVM2                   :1;
        unsigned OVM3                   :1;
        unsigned OVM4                   :1;
        unsigned OVM5                   :1;
        unsigned OVM6                   :1;
        unsigned OVM7                   :1;
        unsigned OVM8                   :1;
        unsigned OVM9                   :1;
    };
} OVMCORRESHbits_t;
extern volatile OVMCORRESHbits_t OVMCORRESHbits __at(0x619);
// bitfield macros
#define _OVMCORRESH_OVM2_POSN                               0x0
#define _OVMCORRESH_OVM2_POSITION                           0x0
#define _OVMCORRESH_OVM2_SIZE                               0x1
#define _OVMCORRESH_OVM2_LENGTH                             0x1
#define _OVMCORRESH_OVM2_MASK                               0x1
#define _OVMCORRESH_OVM3_POSN                               0x1
#define _OVMCORRESH_OVM3_POSITION                           0x1
#define _OVMCORRESH_OVM3_SIZE                               0x1
#define _OVMCORRESH_OVM3_LENGTH                             0x1
#define _OVMCORRESH_OVM3_MASK                               0x2
#define _OVMCORRESH_OVM4_POSN                               0x2
#define _OVMCORRESH_OVM4_POSITION                           0x2
#define _OVMCORRESH_OVM4_SIZE                               0x1
#define _OVMCORRESH_OVM4_LENGTH                             0x1
#define _OVMCORRESH_OVM4_MASK                               0x4
#define _OVMCORRESH_OVM5_POSN                               0x3
#define _OVMCORRESH_OVM5_POSITION                           0x3
#define _OVMCORRESH_OVM5_SIZE                               0x1
#define _OVMCORRESH_OVM5_LENGTH                             0x1
#define _OVMCORRESH_OVM5_MASK                               0x8
#define _OVMCORRESH_OVM6_POSN                               0x4
#define _OVMCORRESH_OVM6_POSITION                           0x4
#define _OVMCORRESH_OVM6_SIZE                               0x1
#define _OVMCORRESH_OVM6_LENGTH                             0x1
#define _OVMCORRESH_OVM6_MASK                               0x10
#define _OVMCORRESH_OVM7_POSN                               0x5
#define _OVMCORRESH_OVM7_POSITION                           0x5
#define _OVMCORRESH_OVM7_SIZE                               0x1
#define _OVMCORRESH_OVM7_LENGTH                             0x1
#define _OVMCORRESH_OVM7_MASK                               0x20
#define _OVMCORRESH_OVM8_POSN                               0x6
#define _OVMCORRESH_OVM8_POSITION                           0x6
#define _OVMCORRESH_OVM8_SIZE                               0x1
#define _OVMCORRESH_OVM8_LENGTH                             0x1
#define _OVMCORRESH_OVM8_MASK                               0x40
#define _OVMCORRESH_OVM9_POSN                               0x7
#define _OVMCORRESH_OVM9_POSITION                           0x7
#define _OVMCORRESH_OVM9_SIZE                               0x1
#define _OVMCORRESH_OVM9_LENGTH                             0x1
#define _OVMCORRESH_OVM9_MASK                               0x80

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x70C);
#ifndef _LIB_BUILD
asm("PIR0 equ 070Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IF                 :1;
        unsigned                        :3;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
        unsigned FVRIF                  :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x70C);
// bitfield macros
#define _PIR0_INT0IF_POSN                                   0x0
#define _PIR0_INT0IF_POSITION                               0x0
#define _PIR0_INT0IF_SIZE                                   0x1
#define _PIR0_INT0IF_LENGTH                                 0x1
#define _PIR0_INT0IF_MASK                                   0x1
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20
#define _PIR0_FVRIF_POSN                                    0x6
#define _PIR0_FVRIF_POSITION                                0x6
#define _PIR0_FVRIF_SIZE                                    0x1
#define _PIR0_FVRIF_LENGTH                                  0x1
#define _PIR0_FVRIF_MASK                                    0x40

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x70D);
#ifndef _LIB_BUILD
asm("PIR1 equ 070Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned                        :2;
        unsigned CSWIF                  :1;
        unsigned                        :1;
        unsigned NVMIF                  :1;
        unsigned CRCIF                  :1;
        unsigned DMAIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x70D);
// bitfield macros
#define _PIR1_ADIF_POSN                                     0x0
#define _PIR1_ADIF_POSITION                                 0x0
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x1
#define _PIR1_CSWIF_POSN                                    0x3
#define _PIR1_CSWIF_POSITION                                0x3
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x8
#define _PIR1_NVMIF_POSN                                    0x5
#define _PIR1_NVMIF_POSITION                                0x5
#define _PIR1_NVMIF_SIZE                                    0x1
#define _PIR1_NVMIF_LENGTH                                  0x1
#define _PIR1_NVMIF_MASK                                    0x20
#define _PIR1_CRCIF_POSN                                    0x6
#define _PIR1_CRCIF_POSITION                                0x6
#define _PIR1_CRCIF_SIZE                                    0x1
#define _PIR1_CRCIF_LENGTH                                  0x1
#define _PIR1_CRCIF_MASK                                    0x40
#define _PIR1_DMAIF_POSN                                    0x7
#define _PIR1_DMAIF_POSITION                                0x7
#define _PIR1_DMAIF_SIZE                                    0x1
#define _PIR1_DMAIF_LENGTH                                  0x1
#define _PIR1_DMAIF_MASK                                    0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x70E);
#ifndef _LIB_BUILD
asm("PIR2 equ 070Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned TMR3IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned                        :2;
        unsigned TMR1GIF                :1;
        unsigned TMR3GIF                :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x70E);
// bitfield macros
#define _PIR2_TMR1IF_POSN                                   0x0
#define _PIR2_TMR1IF_POSITION                               0x0
#define _PIR2_TMR1IF_SIZE                                   0x1
#define _PIR2_TMR1IF_LENGTH                                 0x1
#define _PIR2_TMR1IF_MASK                                   0x1
#define _PIR2_TMR2IF_POSN                                   0x1
#define _PIR2_TMR2IF_POSITION                               0x1
#define _PIR2_TMR2IF_SIZE                                   0x1
#define _PIR2_TMR2IF_LENGTH                                 0x1
#define _PIR2_TMR2IF_MASK                                   0x2
#define _PIR2_TMR3IF_POSN                                   0x2
#define _PIR2_TMR3IF_POSITION                               0x2
#define _PIR2_TMR3IF_SIZE                                   0x1
#define _PIR2_TMR3IF_LENGTH                                 0x1
#define _PIR2_TMR3IF_MASK                                   0x4
#define _PIR2_TMR4IF_POSN                                   0x3
#define _PIR2_TMR4IF_POSITION                               0x3
#define _PIR2_TMR4IF_SIZE                                   0x1
#define _PIR2_TMR4IF_LENGTH                                 0x1
#define _PIR2_TMR4IF_MASK                                   0x8
#define _PIR2_TMR1GIF_POSN                                  0x6
#define _PIR2_TMR1GIF_POSITION                              0x6
#define _PIR2_TMR1GIF_SIZE                                  0x1
#define _PIR2_TMR1GIF_LENGTH                                0x1
#define _PIR2_TMR1GIF_MASK                                  0x40
#define _PIR2_TMR3GIF_POSN                                  0x7
#define _PIR2_TMR3GIF_POSITION                              0x7
#define _PIR2_TMR3GIF_SIZE                                  0x1
#define _PIR2_TMR3GIF_LENGTH                                0x1
#define _PIR2_TMR3GIF_MASK                                  0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x70F);
#ifndef _LIB_BUILD
asm("PIR3 equ 070Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned                        :2;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x70F);
// bitfield macros
#define _PIR3_CCP1IF_POSN                                   0x0
#define _PIR3_CCP1IF_POSITION                               0x0
#define _PIR3_CCP1IF_SIZE                                   0x1
#define _PIR3_CCP1IF_LENGTH                                 0x1
#define _PIR3_CCP1IF_MASK                                   0x1
#define _PIR3_CCP2IF_POSN                                   0x1
#define _PIR3_CCP2IF_POSITION                               0x1
#define _PIR3_CCP2IF_SIZE                                   0x1
#define _PIR3_CCP2IF_LENGTH                                 0x1
#define _PIR3_CCP2IF_MASK                                   0x2
#define _PIR3_CLC1IF_POSN                                   0x4
#define _PIR3_CLC1IF_POSITION                               0x4
#define _PIR3_CLC1IF_SIZE                                   0x1
#define _PIR3_CLC1IF_LENGTH                                 0x1
#define _PIR3_CLC1IF_MASK                                   0x10
#define _PIR3_CLC2IF_POSN                                   0x5
#define _PIR3_CLC2IF_POSITION                               0x5
#define _PIR3_CLC2IF_SIZE                                   0x1
#define _PIR3_CLC2IF_LENGTH                                 0x1
#define _PIR3_CLC2IF_MASK                                   0x20

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x710);
#ifndef _LIB_BUILD
asm("PIR4 equ 0710h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned                        :2;
        unsigned TXIF                   :1;
        unsigned RCIF                   :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x710);
// bitfield macros
#define _PIR4_SSP1IF_POSN                                   0x0
#define _PIR4_SSP1IF_POSITION                               0x0
#define _PIR4_SSP1IF_SIZE                                   0x1
#define _PIR4_SSP1IF_LENGTH                                 0x1
#define _PIR4_SSP1IF_MASK                                   0x1
#define _PIR4_BCL1IF_POSN                                   0x1
#define _PIR4_BCL1IF_POSITION                               0x1
#define _PIR4_BCL1IF_SIZE                                   0x1
#define _PIR4_BCL1IF_LENGTH                                 0x1
#define _PIR4_BCL1IF_MASK                                   0x2
#define _PIR4_TXIF_POSN                                     0x4
#define _PIR4_TXIF_POSITION                                 0x4
#define _PIR4_TXIF_SIZE                                     0x1
#define _PIR4_TXIF_LENGTH                                   0x1
#define _PIR4_TXIF_MASK                                     0x10
#define _PIR4_RCIF_POSN                                     0x5
#define _PIR4_RCIF_POSITION                                 0x5
#define _PIR4_RCIF_SIZE                                     0x1
#define _PIR4_RCIF_LENGTH                                   0x1
#define _PIR4_RCIF_MASK                                     0x20

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x711);
#ifndef _LIB_BUILD
asm("PIR5 equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMUCIF                :1;
        unsigned OCMOCIF                :1;
        unsigned OCMADCIF               :1;
        unsigned                        :1;
        unsigned OVMUVIF                :1;
        unsigned OVMOVIF                :1;
        unsigned OVMADCIF               :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x711);
// bitfield macros
#define _PIR5_OCMUCIF_POSN                                  0x0
#define _PIR5_OCMUCIF_POSITION                              0x0
#define _PIR5_OCMUCIF_SIZE                                  0x1
#define _PIR5_OCMUCIF_LENGTH                                0x1
#define _PIR5_OCMUCIF_MASK                                  0x1
#define _PIR5_OCMOCIF_POSN                                  0x1
#define _PIR5_OCMOCIF_POSITION                              0x1
#define _PIR5_OCMOCIF_SIZE                                  0x1
#define _PIR5_OCMOCIF_LENGTH                                0x1
#define _PIR5_OCMOCIF_MASK                                  0x2
#define _PIR5_OCMADCIF_POSN                                 0x2
#define _PIR5_OCMADCIF_POSITION                             0x2
#define _PIR5_OCMADCIF_SIZE                                 0x1
#define _PIR5_OCMADCIF_LENGTH                               0x1
#define _PIR5_OCMADCIF_MASK                                 0x4
#define _PIR5_OVMUVIF_POSN                                  0x4
#define _PIR5_OVMUVIF_POSITION                              0x4
#define _PIR5_OVMUVIF_SIZE                                  0x1
#define _PIR5_OVMUVIF_LENGTH                                0x1
#define _PIR5_OVMUVIF_MASK                                  0x10
#define _PIR5_OVMOVIF_POSN                                  0x5
#define _PIR5_OVMOVIF_POSITION                              0x5
#define _PIR5_OVMOVIF_SIZE                                  0x1
#define _PIR5_OVMOVIF_LENGTH                                0x1
#define _PIR5_OVMOVIF_MASK                                  0x20
#define _PIR5_OVMADCIF_POSN                                 0x6
#define _PIR5_OVMADCIF_POSITION                             0x6
#define _PIR5_OVMADCIF_SIZE                                 0x1
#define _PIR5_OVMADCIF_LENGTH                               0x1
#define _PIR5_OVMADCIF_MASK                                 0x40

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x712);
#ifndef _LIB_BUILD
asm("PIR6 equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ICMOCIF                :1;
        unsigned                        :2;
        unsigned IVMUVIF                :1;
        unsigned IVMOVIF                :1;
        unsigned IVMADCIF               :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x712);
// bitfield macros
#define _PIR6_ICMOCIF_POSN                                  0x1
#define _PIR6_ICMOCIF_POSITION                              0x1
#define _PIR6_ICMOCIF_SIZE                                  0x1
#define _PIR6_ICMOCIF_LENGTH                                0x1
#define _PIR6_ICMOCIF_MASK                                  0x2
#define _PIR6_IVMUVIF_POSN                                  0x4
#define _PIR6_IVMUVIF_POSITION                              0x4
#define _PIR6_IVMUVIF_SIZE                                  0x1
#define _PIR6_IVMUVIF_LENGTH                                0x1
#define _PIR6_IVMUVIF_MASK                                  0x10
#define _PIR6_IVMOVIF_POSN                                  0x5
#define _PIR6_IVMOVIF_POSITION                              0x5
#define _PIR6_IVMOVIF_SIZE                                  0x1
#define _PIR6_IVMOVIF_LENGTH                                0x1
#define _PIR6_IVMOVIF_MASK                                  0x20
#define _PIR6_IVMADCIF_POSN                                 0x6
#define _PIR6_IVMADCIF_POSITION                             0x6
#define _PIR6_IVMADCIF_SIZE                                 0x1
#define _PIR6_IVMADCIF_LENGTH                               0x1
#define _PIR6_IVMADCIF_MASK                                 0x40

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x713);
#ifndef _LIB_BUILD
asm("PIR7 equ 0713h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DEMIF                  :1;
        unsigned                        :1;
        unsigned TSWIF                  :1;
        unsigned                        :1;
        unsigned SWFRQIF                :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x713);
// bitfield macros
#define _PIR7_DEMIF_POSN                                    0x0
#define _PIR7_DEMIF_POSITION                                0x0
#define _PIR7_DEMIF_SIZE                                    0x1
#define _PIR7_DEMIF_LENGTH                                  0x1
#define _PIR7_DEMIF_MASK                                    0x1
#define _PIR7_TSWIF_POSN                                    0x2
#define _PIR7_TSWIF_POSITION                                0x2
#define _PIR7_TSWIF_SIZE                                    0x1
#define _PIR7_TSWIF_LENGTH                                  0x1
#define _PIR7_TSWIF_MASK                                    0x4
#define _PIR7_SWFRQIF_POSN                                  0x4
#define _PIR7_SWFRQIF_POSITION                              0x4
#define _PIR7_SWFRQIF_SIZE                                  0x1
#define _PIR7_SWFRQIF_LENGTH                                0x1
#define _PIR7_SWFRQIF_MASK                                  0x10

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x716);
#ifndef _LIB_BUILD
asm("PIE0 equ 0716h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IE                 :1;
        unsigned                        :3;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
        unsigned FVRIE                  :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x716);
// bitfield macros
#define _PIE0_INT0IE_POSN                                   0x0
#define _PIE0_INT0IE_POSITION                               0x0
#define _PIE0_INT0IE_SIZE                                   0x1
#define _PIE0_INT0IE_LENGTH                                 0x1
#define _PIE0_INT0IE_MASK                                   0x1
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20
#define _PIE0_FVRIE_POSN                                    0x6
#define _PIE0_FVRIE_POSITION                                0x6
#define _PIE0_FVRIE_SIZE                                    0x1
#define _PIE0_FVRIE_LENGTH                                  0x1
#define _PIE0_FVRIE_MASK                                    0x40

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x717);
#ifndef _LIB_BUILD
asm("PIE1 equ 0717h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned                        :2;
        unsigned CSWIE                  :1;
        unsigned                        :1;
        unsigned NVMIE                  :1;
        unsigned CRCIE                  :1;
        unsigned DMAIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x717);
// bitfield macros
#define _PIE1_ADIE_POSN                                     0x0
#define _PIE1_ADIE_POSITION                                 0x0
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x1
#define _PIE1_CSWIE_POSN                                    0x3
#define _PIE1_CSWIE_POSITION                                0x3
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x8
#define _PIE1_NVMIE_POSN                                    0x5
#define _PIE1_NVMIE_POSITION                                0x5
#define _PIE1_NVMIE_SIZE                                    0x1
#define _PIE1_NVMIE_LENGTH                                  0x1
#define _PIE1_NVMIE_MASK                                    0x20
#define _PIE1_CRCIE_POSN                                    0x6
#define _PIE1_CRCIE_POSITION                                0x6
#define _PIE1_CRCIE_SIZE                                    0x1
#define _PIE1_CRCIE_LENGTH                                  0x1
#define _PIE1_CRCIE_MASK                                    0x40
#define _PIE1_DMAIE_POSN                                    0x7
#define _PIE1_DMAIE_POSITION                                0x7
#define _PIE1_DMAIE_SIZE                                    0x1
#define _PIE1_DMAIE_LENGTH                                  0x1
#define _PIE1_DMAIE_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x718);
#ifndef _LIB_BUILD
asm("PIE2 equ 0718h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned TMR3IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned                        :2;
        unsigned TMR1GIE                :1;
        unsigned TMR3GIE                :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x718);
// bitfield macros
#define _PIE2_TMR1IE_POSN                                   0x0
#define _PIE2_TMR1IE_POSITION                               0x0
#define _PIE2_TMR1IE_SIZE                                   0x1
#define _PIE2_TMR1IE_LENGTH                                 0x1
#define _PIE2_TMR1IE_MASK                                   0x1
#define _PIE2_TMR2IE_POSN                                   0x1
#define _PIE2_TMR2IE_POSITION                               0x1
#define _PIE2_TMR2IE_SIZE                                   0x1
#define _PIE2_TMR2IE_LENGTH                                 0x1
#define _PIE2_TMR2IE_MASK                                   0x2
#define _PIE2_TMR3IE_POSN                                   0x2
#define _PIE2_TMR3IE_POSITION                               0x2
#define _PIE2_TMR3IE_SIZE                                   0x1
#define _PIE2_TMR3IE_LENGTH                                 0x1
#define _PIE2_TMR3IE_MASK                                   0x4
#define _PIE2_TMR4IE_POSN                                   0x3
#define _PIE2_TMR4IE_POSITION                               0x3
#define _PIE2_TMR4IE_SIZE                                   0x1
#define _PIE2_TMR4IE_LENGTH                                 0x1
#define _PIE2_TMR4IE_MASK                                   0x8
#define _PIE2_TMR1GIE_POSN                                  0x6
#define _PIE2_TMR1GIE_POSITION                              0x6
#define _PIE2_TMR1GIE_SIZE                                  0x1
#define _PIE2_TMR1GIE_LENGTH                                0x1
#define _PIE2_TMR1GIE_MASK                                  0x40
#define _PIE2_TMR3GIE_POSN                                  0x7
#define _PIE2_TMR3GIE_POSITION                              0x7
#define _PIE2_TMR3GIE_SIZE                                  0x1
#define _PIE2_TMR3GIE_LENGTH                                0x1
#define _PIE2_TMR3GIE_MASK                                  0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x719);
#ifndef _LIB_BUILD
asm("PIE3 equ 0719h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned                        :2;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x719);
// bitfield macros
#define _PIE3_CCP1IE_POSN                                   0x0
#define _PIE3_CCP1IE_POSITION                               0x0
#define _PIE3_CCP1IE_SIZE                                   0x1
#define _PIE3_CCP1IE_LENGTH                                 0x1
#define _PIE3_CCP1IE_MASK                                   0x1
#define _PIE3_CCP2IE_POSN                                   0x1
#define _PIE3_CCP2IE_POSITION                               0x1
#define _PIE3_CCP2IE_SIZE                                   0x1
#define _PIE3_CCP2IE_LENGTH                                 0x1
#define _PIE3_CCP2IE_MASK                                   0x2
#define _PIE3_CLC1IE_POSN                                   0x4
#define _PIE3_CLC1IE_POSITION                               0x4
#define _PIE3_CLC1IE_SIZE                                   0x1
#define _PIE3_CLC1IE_LENGTH                                 0x1
#define _PIE3_CLC1IE_MASK                                   0x10
#define _PIE3_CLC2IE_POSN                                   0x5
#define _PIE3_CLC2IE_POSITION                               0x5
#define _PIE3_CLC2IE_SIZE                                   0x1
#define _PIE3_CLC2IE_LENGTH                                 0x1
#define _PIE3_CLC2IE_MASK                                   0x20

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x71A);
#ifndef _LIB_BUILD
asm("PIE4 equ 071Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned                        :2;
        unsigned TXIE                   :1;
        unsigned RCIE                   :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x71A);
// bitfield macros
#define _PIE4_SSP1IE_POSN                                   0x0
#define _PIE4_SSP1IE_POSITION                               0x0
#define _PIE4_SSP1IE_SIZE                                   0x1
#define _PIE4_SSP1IE_LENGTH                                 0x1
#define _PIE4_SSP1IE_MASK                                   0x1
#define _PIE4_BCL1IE_POSN                                   0x1
#define _PIE4_BCL1IE_POSITION                               0x1
#define _PIE4_BCL1IE_SIZE                                   0x1
#define _PIE4_BCL1IE_LENGTH                                 0x1
#define _PIE4_BCL1IE_MASK                                   0x2
#define _PIE4_TXIE_POSN                                     0x4
#define _PIE4_TXIE_POSITION                                 0x4
#define _PIE4_TXIE_SIZE                                     0x1
#define _PIE4_TXIE_LENGTH                                   0x1
#define _PIE4_TXIE_MASK                                     0x10
#define _PIE4_RCIE_POSN                                     0x5
#define _PIE4_RCIE_POSITION                                 0x5
#define _PIE4_RCIE_SIZE                                     0x1
#define _PIE4_RCIE_LENGTH                                   0x1
#define _PIE4_RCIE_MASK                                     0x20

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x71B);
#ifndef _LIB_BUILD
asm("PIE5 equ 071Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCMUCIE                :1;
        unsigned OCMOCIE                :1;
        unsigned OCMADCIE               :1;
        unsigned                        :1;
        unsigned OVMUVIE                :1;
        unsigned OVMOVIE                :1;
        unsigned OVMADCIE               :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x71B);
// bitfield macros
#define _PIE5_OCMUCIE_POSN                                  0x0
#define _PIE5_OCMUCIE_POSITION                              0x0
#define _PIE5_OCMUCIE_SIZE                                  0x1
#define _PIE5_OCMUCIE_LENGTH                                0x1
#define _PIE5_OCMUCIE_MASK                                  0x1
#define _PIE5_OCMOCIE_POSN                                  0x1
#define _PIE5_OCMOCIE_POSITION                              0x1
#define _PIE5_OCMOCIE_SIZE                                  0x1
#define _PIE5_OCMOCIE_LENGTH                                0x1
#define _PIE5_OCMOCIE_MASK                                  0x2
#define _PIE5_OCMADCIE_POSN                                 0x2
#define _PIE5_OCMADCIE_POSITION                             0x2
#define _PIE5_OCMADCIE_SIZE                                 0x1
#define _PIE5_OCMADCIE_LENGTH                               0x1
#define _PIE5_OCMADCIE_MASK                                 0x4
#define _PIE5_OVMUVIE_POSN                                  0x4
#define _PIE5_OVMUVIE_POSITION                              0x4
#define _PIE5_OVMUVIE_SIZE                                  0x1
#define _PIE5_OVMUVIE_LENGTH                                0x1
#define _PIE5_OVMUVIE_MASK                                  0x10
#define _PIE5_OVMOVIE_POSN                                  0x5
#define _PIE5_OVMOVIE_POSITION                              0x5
#define _PIE5_OVMOVIE_SIZE                                  0x1
#define _PIE5_OVMOVIE_LENGTH                                0x1
#define _PIE5_OVMOVIE_MASK                                  0x20
#define _PIE5_OVMADCIE_POSN                                 0x6
#define _PIE5_OVMADCIE_POSITION                             0x6
#define _PIE5_OVMADCIE_SIZE                                 0x1
#define _PIE5_OVMADCIE_LENGTH                               0x1
#define _PIE5_OVMADCIE_MASK                                 0x40

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x71C);
#ifndef _LIB_BUILD
asm("PIE6 equ 071Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ICMOCIE                :1;
        unsigned                        :2;
        unsigned IVMUVIE                :1;
        unsigned IVMOVIE                :1;
        unsigned IVMADCIE               :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x71C);
// bitfield macros
#define _PIE6_ICMOCIE_POSN                                  0x1
#define _PIE6_ICMOCIE_POSITION                              0x1
#define _PIE6_ICMOCIE_SIZE                                  0x1
#define _PIE6_ICMOCIE_LENGTH                                0x1
#define _PIE6_ICMOCIE_MASK                                  0x2
#define _PIE6_IVMUVIE_POSN                                  0x4
#define _PIE6_IVMUVIE_POSITION                              0x4
#define _PIE6_IVMUVIE_SIZE                                  0x1
#define _PIE6_IVMUVIE_LENGTH                                0x1
#define _PIE6_IVMUVIE_MASK                                  0x10
#define _PIE6_IVMOVIE_POSN                                  0x5
#define _PIE6_IVMOVIE_POSITION                              0x5
#define _PIE6_IVMOVIE_SIZE                                  0x1
#define _PIE6_IVMOVIE_LENGTH                                0x1
#define _PIE6_IVMOVIE_MASK                                  0x20
#define _PIE6_IVMADCIE_POSN                                 0x6
#define _PIE6_IVMADCIE_POSITION                             0x6
#define _PIE6_IVMADCIE_SIZE                                 0x1
#define _PIE6_IVMADCIE_LENGTH                               0x1
#define _PIE6_IVMADCIE_MASK                                 0x40

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x71D);
#ifndef _LIB_BUILD
asm("PIE7 equ 071Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DEMIE                  :1;
        unsigned                        :1;
        unsigned TSWIE                  :1;
        unsigned                        :1;
        unsigned SWFRQIE                :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x71D);
// bitfield macros
#define _PIE7_DEMIE_POSN                                    0x0
#define _PIE7_DEMIE_POSITION                                0x0
#define _PIE7_DEMIE_SIZE                                    0x1
#define _PIE7_DEMIE_LENGTH                                  0x1
#define _PIE7_DEMIE_MASK                                    0x1
#define _PIE7_TSWIE_POSN                                    0x2
#define _PIE7_TSWIE_POSITION                                0x2
#define _PIE7_TSWIE_SIZE                                    0x1
#define _PIE7_TSWIE_LENGTH                                  0x1
#define _PIE7_TSWIE_MASK                                    0x4
#define _PIE7_SWFRQIE_POSN                                  0x4
#define _PIE7_SWFRQIE_POSITION                              0x4
#define _PIE7_SWFRQIE_SIZE                                  0x1
#define _PIE7_SWFRQIE_LENGTH                                0x1
#define _PIE7_SWFRQIE_MASK                                  0x10

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x796);
#ifndef _LIB_BUILD
asm("PMD0 equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned                        :1;
        unsigned NVMMD                  :1;
        unsigned SCANMD                 :1;
        unsigned CRCMD                  :1;
        unsigned                        :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x796);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_SCANMD_POSN                                   0x3
#define _PMD0_SCANMD_POSITION                               0x3
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x4
#define _PMD0_CRCMD_POSITION                                0x4
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x10
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x797);
#ifndef _LIB_BUILD
asm("PMD1 equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned                        :1;
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x797);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR3MD_POSN                                   0x3
#define _PMD1_TMR3MD_POSITION                               0x3
#define _PMD1_TMR3MD_SIZE                                   0x1
#define _PMD1_TMR3MD_LENGTH                                 0x1
#define _PMD1_TMR3MD_MASK                                   0x8
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10
#define _PMD1_CCP1MD_POSN                                   0x6
#define _PMD1_CCP1MD_POSITION                               0x6
#define _PMD1_CCP1MD_SIZE                                   0x1
#define _PMD1_CCP1MD_LENGTH                                 0x1
#define _PMD1_CCP1MD_MASK                                   0x40
#define _PMD1_CCP2MD_POSN                                   0x7
#define _PMD1_CCP2MD_POSITION                               0x7
#define _PMD1_CCP2MD_SIZE                                   0x1
#define _PMD1_CCP2MD_LENGTH                                 0x1
#define _PMD1_CCP2MD_MASK                                   0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x798);
#ifndef _LIB_BUILD
asm("PMD2 equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned                        :1;
        unsigned ADCMD                  :1;
        unsigned                        :1;
        unsigned MSSP1MD                :1;
        unsigned                        :1;
        unsigned UART1MD                :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x798);
// bitfield macros
#define _PMD2_CLC1MD_POSN                                   0x0
#define _PMD2_CLC1MD_POSITION                               0x0
#define _PMD2_CLC1MD_SIZE                                   0x1
#define _PMD2_CLC1MD_LENGTH                                 0x1
#define _PMD2_CLC1MD_MASK                                   0x1
#define _PMD2_CLC2MD_POSN                                   0x1
#define _PMD2_CLC2MD_POSITION                               0x1
#define _PMD2_CLC2MD_SIZE                                   0x1
#define _PMD2_CLC2MD_LENGTH                                 0x1
#define _PMD2_CLC2MD_MASK                                   0x2
#define _PMD2_ADCMD_POSN                                    0x3
#define _PMD2_ADCMD_POSITION                                0x3
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x8
#define _PMD2_MSSP1MD_POSN                                  0x5
#define _PMD2_MSSP1MD_POSITION                              0x5
#define _PMD2_MSSP1MD_SIZE                                  0x1
#define _PMD2_MSSP1MD_LENGTH                                0x1
#define _PMD2_MSSP1MD_MASK                                  0x20
#define _PMD2_UART1MD_POSN                                  0x7
#define _PMD2_UART1MD_POSITION                              0x7
#define _PMD2_UART1MD_SIZE                                  0x1
#define _PMD2_UART1MD_LENGTH                                0x1
#define _PMD2_UART1MD_MASK                                  0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x799);
#ifndef _LIB_BUILD
asm("PMD3 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ICMMD                  :1;
        unsigned                        :1;
        unsigned IVMMD                  :1;
        unsigned                        :1;
        unsigned OCMMD                  :1;
        unsigned                        :1;
        unsigned OVMMD                  :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x799);
// bitfield macros
#define _PMD3_ICMMD_POSN                                    0x0
#define _PMD3_ICMMD_POSITION                                0x0
#define _PMD3_ICMMD_SIZE                                    0x1
#define _PMD3_ICMMD_LENGTH                                  0x1
#define _PMD3_ICMMD_MASK                                    0x1
#define _PMD3_IVMMD_POSN                                    0x2
#define _PMD3_IVMMD_POSITION                                0x2
#define _PMD3_IVMMD_SIZE                                    0x1
#define _PMD3_IVMMD_LENGTH                                  0x1
#define _PMD3_IVMMD_MASK                                    0x4
#define _PMD3_OCMMD_POSN                                    0x4
#define _PMD3_OCMMD_POSITION                                0x4
#define _PMD3_OCMMD_SIZE                                    0x1
#define _PMD3_OCMMD_LENGTH                                  0x1
#define _PMD3_OCMMD_MASK                                    0x10
#define _PMD3_OVMMD_POSN                                    0x6
#define _PMD3_OVMMD_POSITION                                0x6
#define _PMD3_OVMMD_SIZE                                    0x1
#define _PMD3_OVMMD_LENGTH                                  0x1
#define _PMD3_OVMMD_MASK                                    0x40

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x79A);
#ifndef _LIB_BUILD
asm("PMD4 equ 079Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OCRMD                  :1;
        unsigned                        :1;
        unsigned DCOMPMD                :1;
        unsigned                        :1;
        unsigned SWFRQMD                :1;
        unsigned                        :1;
        unsigned DEMMD                  :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x79A);
// bitfield macros
#define _PMD4_OCRMD_POSN                                    0x0
#define _PMD4_OCRMD_POSITION                                0x0
#define _PMD4_OCRMD_SIZE                                    0x1
#define _PMD4_OCRMD_LENGTH                                  0x1
#define _PMD4_OCRMD_MASK                                    0x1
#define _PMD4_DCOMPMD_POSN                                  0x2
#define _PMD4_DCOMPMD_POSITION                              0x2
#define _PMD4_DCOMPMD_SIZE                                  0x1
#define _PMD4_DCOMPMD_LENGTH                                0x1
#define _PMD4_DCOMPMD_MASK                                  0x4
#define _PMD4_SWFRQMD_POSN                                  0x4
#define _PMD4_SWFRQMD_POSITION                              0x4
#define _PMD4_SWFRQMD_SIZE                                  0x1
#define _PMD4_SWFRQMD_LENGTH                                0x1
#define _PMD4_SWFRQMD_MASK                                  0x10
#define _PMD4_DEMMD_POSN                                    0x6
#define _PMD4_DEMMD_POSITION                                0x6
#define _PMD4_DEMMD_SIZE                                    0x1
#define _PMD4_DEMMD_LENGTH                                  0x1
#define _PMD4_DEMMD_MASK                                    0x40

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x80C);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWDTEN                 :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x80C);
// bitfield macros
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x80D);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x80D);
// bitfield macros
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x80E);
#ifndef _LIB_BUILD
asm("WDTPSL equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x80E);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x80F);
#ifndef _LIB_BUILD
asm("WDTPSH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x80F);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x810);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :2;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :4;
    };
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned                        :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x810);
// bitfield macros
#define _WDTTMR_PSCNT_POSN                                  0x0
#define _WDTTMR_PSCNT_POSITION                              0x0
#define _WDTTMR_PSCNT_SIZE                                  0x2
#define _WDTTMR_PSCNT_LENGTH                                0x2
#define _WDTTMR_PSCNT_MASK                                  0x3
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x4
#define _WDTTMR_WDTTMR_LENGTH                               0x4
#define _WDTTMR_WDTTMR_MASK                                 0x78
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x811);
#ifndef _LIB_BUILD
asm("BORCON equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x811);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x812);
#ifndef _LIB_BUILD
asm("VREGCON equ 0812h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned VREGPM1                :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x812);
// bitfield macros
#define _VREGCON_VREGPM1_POSN                               0x1
#define _VREGCON_VREGPM1_POSITION                           0x1
#define _VREGCON_VREGPM1_SIZE                               0x1
#define _VREGCON_VREGPM1_LENGTH                             0x1
#define _VREGCON_VREGPM1_MASK                               0x2

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x813);
#ifndef _LIB_BUILD
asm("PCON0 equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x813);
// bitfield macros
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80

// Register: CCDCON
#define CCDCON CCDCON
extern volatile unsigned char           CCDCON              __at(0x814);
#ifndef _LIB_BUILD
asm("CCDCON equ 0814h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCDS0                  :1;
        unsigned CCDS1                  :1;
        unsigned                        :5;
        unsigned CCDEN                  :1;
    };
} CCDCONbits_t;
extern volatile CCDCONbits_t CCDCONbits __at(0x814);
// bitfield macros
#define _CCDCON_CCDS0_POSN                                  0x0
#define _CCDCON_CCDS0_POSITION                              0x0
#define _CCDCON_CCDS0_SIZE                                  0x1
#define _CCDCON_CCDS0_LENGTH                                0x1
#define _CCDCON_CCDS0_MASK                                  0x1
#define _CCDCON_CCDS1_POSN                                  0x1
#define _CCDCON_CCDS1_POSITION                              0x1
#define _CCDCON_CCDS1_SIZE                                  0x1
#define _CCDCON_CCDS1_LENGTH                                0x1
#define _CCDCON_CCDS1_MASK                                  0x2
#define _CCDCON_CCDEN_POSN                                  0x7
#define _CCDCON_CCDEN_POSITION                              0x7
#define _CCDCON_CCDEN_SIZE                                  0x1
#define _CCDCON_CCDEN_LENGTH                                0x1
#define _CCDCON_CCDEN_MASK                                  0x80

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x81A);
#ifndef _LIB_BUILD
asm("NVMADRL equ 081Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x81A);
// bitfield macros
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x81B);
#ifndef _LIB_BUILD
asm("NVMADRH equ 081Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x81B);
// bitfield macros
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x81C);
#ifndef _LIB_BUILD
asm("NVMDATL equ 081Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x81C);
// bitfield macros
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x81D);
#ifndef _LIB_BUILD
asm("NVMDATH equ 081Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x81D);
// bitfield macros
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x81E);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 081Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned NVMREGS                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x81E);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_LWLO_POSN                                  0x5
#define _NVMCON1_LWLO_POSITION                              0x5
#define _NVMCON1_LWLO_SIZE                                  0x1
#define _NVMCON1_LWLO_LENGTH                                0x1
#define _NVMCON1_LWLO_MASK                                  0x20
#define _NVMCON1_NVMREGS_POSN                               0x6
#define _NVMCON1_NVMREGS_POSITION                           0x6
#define _NVMCON1_NVMREGS_SIZE                               0x1
#define _NVMCON1_NVMREGS_LENGTH                             0x1
#define _NVMCON1_NVMREGS_MASK                               0x40

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x81F);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 081Fh");
#endif

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x88C);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x88C);
// bitfield macros
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x88D);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :2;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x88D);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x2
#define _OSCCON1_NOSC_LENGTH                                0x2
#define _OSCCON1_NOSC_MASK                                  0x30
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x88E);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 088Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :2;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x88E);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x2
#define _OSCCON2_COSC_LENGTH                                0x2
#define _OSCCON2_COSC_MASK                                  0x30
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x88F);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 088Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :2;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x88F);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT1
#define OSCSTAT1 OSCSTAT1
extern volatile unsigned char           OSCSTAT1            __at(0x890);
#ifndef _LIB_BUILD
asm("OSCSTAT1 equ 0890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLL32OR                :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned                        :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
    };
} OSCSTAT1bits_t;
extern volatile OSCSTAT1bits_t OSCSTAT1bits __at(0x890);
// bitfield macros
#define _OSCSTAT1_PLL32OR_POSN                              0x0
#define _OSCSTAT1_PLL32OR_POSITION                          0x0
#define _OSCSTAT1_PLL32OR_SIZE                              0x1
#define _OSCSTAT1_PLL32OR_LENGTH                            0x1
#define _OSCSTAT1_PLL32OR_MASK                              0x1
#define _OSCSTAT1_ADOR_POSN                                 0x2
#define _OSCSTAT1_ADOR_POSITION                             0x2
#define _OSCSTAT1_ADOR_SIZE                                 0x1
#define _OSCSTAT1_ADOR_LENGTH                               0x1
#define _OSCSTAT1_ADOR_MASK                                 0x4
#define _OSCSTAT1_LFOR_POSN                                 0x4
#define _OSCSTAT1_LFOR_POSITION                             0x4
#define _OSCSTAT1_LFOR_SIZE                                 0x1
#define _OSCSTAT1_LFOR_LENGTH                               0x1
#define _OSCSTAT1_LFOR_MASK                                 0x10
#define _OSCSTAT1_MFOR_POSN                                 0x5
#define _OSCSTAT1_MFOR_POSITION                             0x5
#define _OSCSTAT1_MFOR_SIZE                                 0x1
#define _OSCSTAT1_MFOR_LENGTH                               0x1
#define _OSCSTAT1_MFOR_MASK                                 0x20
#define _OSCSTAT1_HFOR_POSN                                 0x6
#define _OSCSTAT1_HFOR_POSITION                             0x6
#define _OSCSTAT1_HFOR_SIZE                                 0x1
#define _OSCSTAT1_HFOR_LENGTH                               0x1
#define _OSCSTAT1_HFOR_MASK                                 0x40

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x891);
#ifndef _LIB_BUILD
asm("OSCEN equ 0891h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLL32EN                :1;
        unsigned                        :1;
        unsigned ADOEN                  :1;
        unsigned                        :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x891);
// bitfield macros
#define _OSCEN_PLL32EN_POSN                                 0x0
#define _OSCEN_PLL32EN_POSITION                             0x0
#define _OSCEN_PLL32EN_SIZE                                 0x1
#define _OSCEN_PLL32EN_LENGTH                               0x1
#define _OSCEN_PLL32EN_MASK                                 0x1
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x892);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0892h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFTUN                  :6;
    };
    struct {
        unsigned HFTUN0                 :1;
        unsigned HFTUN1                 :1;
        unsigned HFTUN2                 :1;
        unsigned HFTUN3                 :1;
        unsigned HFTUN4                 :1;
        unsigned HFTUN5                 :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x892);
// bitfield macros
#define _OSCTUNE_HFTUN_POSN                                 0x0
#define _OSCTUNE_HFTUN_POSITION                             0x0
#define _OSCTUNE_HFTUN_SIZE                                 0x6
#define _OSCTUNE_HFTUN_LENGTH                               0x6
#define _OSCTUNE_HFTUN_MASK                                 0x3F
#define _OSCTUNE_HFTUN0_POSN                                0x0
#define _OSCTUNE_HFTUN0_POSITION                            0x0
#define _OSCTUNE_HFTUN0_SIZE                                0x1
#define _OSCTUNE_HFTUN0_LENGTH                              0x1
#define _OSCTUNE_HFTUN0_MASK                                0x1
#define _OSCTUNE_HFTUN1_POSN                                0x1
#define _OSCTUNE_HFTUN1_POSITION                            0x1
#define _OSCTUNE_HFTUN1_SIZE                                0x1
#define _OSCTUNE_HFTUN1_LENGTH                              0x1
#define _OSCTUNE_HFTUN1_MASK                                0x2
#define _OSCTUNE_HFTUN2_POSN                                0x2
#define _OSCTUNE_HFTUN2_POSITION                            0x2
#define _OSCTUNE_HFTUN2_SIZE                                0x1
#define _OSCTUNE_HFTUN2_LENGTH                              0x1
#define _OSCTUNE_HFTUN2_MASK                                0x4
#define _OSCTUNE_HFTUN3_POSN                                0x3
#define _OSCTUNE_HFTUN3_POSITION                            0x3
#define _OSCTUNE_HFTUN3_SIZE                                0x1
#define _OSCTUNE_HFTUN3_LENGTH                              0x1
#define _OSCTUNE_HFTUN3_MASK                                0x8
#define _OSCTUNE_HFTUN4_POSN                                0x4
#define _OSCTUNE_HFTUN4_POSITION                            0x4
#define _OSCTUNE_HFTUN4_SIZE                                0x1
#define _OSCTUNE_HFTUN4_LENGTH                              0x1
#define _OSCTUNE_HFTUN4_MASK                                0x10
#define _OSCTUNE_HFTUN5_POSN                                0x5
#define _OSCTUNE_HFTUN5_POSITION                            0x5
#define _OSCTUNE_HFTUN5_SIZE                                0x1
#define _OSCTUNE_HFTUN5_LENGTH                              0x1
#define _OSCTUNE_HFTUN5_MASK                                0x20

// Register: OSCFREQ
#define OSCFREQ OSCFREQ
extern volatile unsigned char           OSCFREQ             __at(0x893);
#ifndef _LIB_BUILD
asm("OSCFREQ equ 0893h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :3;
    };
    struct {
        unsigned HFFRQ0                 :1;
        unsigned HFFRQ1                 :1;
        unsigned HFFRQ2                 :1;
    };
} OSCFREQbits_t;
extern volatile OSCFREQbits_t OSCFREQbits __at(0x893);
// bitfield macros
#define _OSCFREQ_HFFRQ_POSN                                 0x0
#define _OSCFREQ_HFFRQ_POSITION                             0x0
#define _OSCFREQ_HFFRQ_SIZE                                 0x3
#define _OSCFREQ_HFFRQ_LENGTH                               0x3
#define _OSCFREQ_HFFRQ_MASK                                 0x7
#define _OSCFREQ_HFFRQ0_POSN                                0x0
#define _OSCFREQ_HFFRQ0_POSITION                            0x0
#define _OSCFREQ_HFFRQ0_SIZE                                0x1
#define _OSCFREQ_HFFRQ0_LENGTH                              0x1
#define _OSCFREQ_HFFRQ0_MASK                                0x1
#define _OSCFREQ_HFFRQ1_POSN                                0x1
#define _OSCFREQ_HFFRQ1_POSITION                            0x1
#define _OSCFREQ_HFFRQ1_SIZE                                0x1
#define _OSCFREQ_HFFRQ1_LENGTH                              0x1
#define _OSCFREQ_HFFRQ1_MASK                                0x2
#define _OSCFREQ_HFFRQ2_POSN                                0x2
#define _OSCFREQ_HFFRQ2_POSITION                            0x2
#define _OSCFREQ_HFFRQ2_SIZE                                0x1
#define _OSCFREQ_HFFRQ2_LENGTH                              0x1
#define _OSCFREQ_HFFRQ2_MASK                                0x4

// Register: DCOMPCON0
#define DCOMPCON0 DCOMPCON0
extern volatile unsigned char           DCOMPCON0           __at(0x90F);
#ifndef _LIB_BUILD
asm("DCOMPCON0 equ 090Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TFS0                   :1;
        unsigned TFS1                   :1;
        unsigned                        :4;
        unsigned VCOMPEN                :1;
        unsigned ICOMPEN                :1;
    };
} DCOMPCON0bits_t;
extern volatile DCOMPCON0bits_t DCOMPCON0bits __at(0x90F);
// bitfield macros
#define _DCOMPCON0_TFS0_POSN                                0x0
#define _DCOMPCON0_TFS0_POSITION                            0x0
#define _DCOMPCON0_TFS0_SIZE                                0x1
#define _DCOMPCON0_TFS0_LENGTH                              0x1
#define _DCOMPCON0_TFS0_MASK                                0x1
#define _DCOMPCON0_TFS1_POSN                                0x1
#define _DCOMPCON0_TFS1_POSITION                            0x1
#define _DCOMPCON0_TFS1_SIZE                                0x1
#define _DCOMPCON0_TFS1_LENGTH                              0x1
#define _DCOMPCON0_TFS1_MASK                                0x2
#define _DCOMPCON0_VCOMPEN_POSN                             0x6
#define _DCOMPCON0_VCOMPEN_POSITION                         0x6
#define _DCOMPCON0_VCOMPEN_SIZE                             0x1
#define _DCOMPCON0_VCOMPEN_LENGTH                           0x1
#define _DCOMPCON0_VCOMPEN_MASK                             0x40
#define _DCOMPCON0_ICOMPEN_POSN                             0x7
#define _DCOMPCON0_ICOMPEN_POSITION                         0x7
#define _DCOMPCON0_ICOMPEN_SIZE                             0x1
#define _DCOMPCON0_ICOMPEN_LENGTH                           0x1
#define _DCOMPCON0_ICOMPEN_MASK                             0x80

// Register: DCOMPCON1
#define DCOMPCON1 DCOMPCON1
extern volatile unsigned char           DCOMPCON1           __at(0x910);
#ifndef _LIB_BUILD
asm("DCOMPCON1 equ 0910h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVMUVFE                :1;
        unsigned IVMOVFE                :1;
        unsigned ICMOCFE                :1;
        unsigned HOLDM0                 :1;
        unsigned HOLDM1                 :1;
        unsigned HOLDM2                 :1;
        unsigned HOLDOVR                :1;
        unsigned HOLD                   :1;
    };
} DCOMPCON1bits_t;
extern volatile DCOMPCON1bits_t DCOMPCON1bits __at(0x910);
// bitfield macros
#define _DCOMPCON1_IVMUVFE_POSN                             0x0
#define _DCOMPCON1_IVMUVFE_POSITION                         0x0
#define _DCOMPCON1_IVMUVFE_SIZE                             0x1
#define _DCOMPCON1_IVMUVFE_LENGTH                           0x1
#define _DCOMPCON1_IVMUVFE_MASK                             0x1
#define _DCOMPCON1_IVMOVFE_POSN                             0x1
#define _DCOMPCON1_IVMOVFE_POSITION                         0x1
#define _DCOMPCON1_IVMOVFE_SIZE                             0x1
#define _DCOMPCON1_IVMOVFE_LENGTH                           0x1
#define _DCOMPCON1_IVMOVFE_MASK                             0x2
#define _DCOMPCON1_ICMOCFE_POSN                             0x2
#define _DCOMPCON1_ICMOCFE_POSITION                         0x2
#define _DCOMPCON1_ICMOCFE_SIZE                             0x1
#define _DCOMPCON1_ICMOCFE_LENGTH                           0x1
#define _DCOMPCON1_ICMOCFE_MASK                             0x4
#define _DCOMPCON1_HOLDM0_POSN                              0x3
#define _DCOMPCON1_HOLDM0_POSITION                          0x3
#define _DCOMPCON1_HOLDM0_SIZE                              0x1
#define _DCOMPCON1_HOLDM0_LENGTH                            0x1
#define _DCOMPCON1_HOLDM0_MASK                              0x8
#define _DCOMPCON1_HOLDM1_POSN                              0x4
#define _DCOMPCON1_HOLDM1_POSITION                          0x4
#define _DCOMPCON1_HOLDM1_SIZE                              0x1
#define _DCOMPCON1_HOLDM1_LENGTH                            0x1
#define _DCOMPCON1_HOLDM1_MASK                              0x10
#define _DCOMPCON1_HOLDM2_POSN                              0x5
#define _DCOMPCON1_HOLDM2_POSITION                          0x5
#define _DCOMPCON1_HOLDM2_SIZE                              0x1
#define _DCOMPCON1_HOLDM2_LENGTH                            0x1
#define _DCOMPCON1_HOLDM2_MASK                              0x20
#define _DCOMPCON1_HOLDOVR_POSN                             0x6
#define _DCOMPCON1_HOLDOVR_POSITION                         0x6
#define _DCOMPCON1_HOLDOVR_SIZE                             0x1
#define _DCOMPCON1_HOLDOVR_LENGTH                           0x1
#define _DCOMPCON1_HOLDOVR_MASK                             0x40
#define _DCOMPCON1_HOLD_POSN                                0x7
#define _DCOMPCON1_HOLD_POSITION                            0x7
#define _DCOMPCON1_HOLD_SIZE                                0x1
#define _DCOMPCON1_HOLD_LENGTH                              0x1
#define _DCOMPCON1_HOLD_MASK                                0x80

// Register: DCOMPCON2
#define DCOMPCON2 DCOMPCON2
extern volatile unsigned char           DCOMPCON2           __at(0x911);
#ifndef _LIB_BUILD
asm("DCOMPCON2 equ 0911h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OVMUVFE0               :1;
        unsigned OVMUVFE1               :1;
        unsigned OVMOVFE0               :1;
        unsigned OVMOVFE1               :1;
        unsigned OCMUCFE0               :1;
        unsigned OCMUCFE1               :1;
        unsigned OCMOCFE0               :1;
        unsigned OCMOCFE1               :1;
    };
} DCOMPCON2bits_t;
extern volatile DCOMPCON2bits_t DCOMPCON2bits __at(0x911);
// bitfield macros
#define _DCOMPCON2_OVMUVFE0_POSN                            0x0
#define _DCOMPCON2_OVMUVFE0_POSITION                        0x0
#define _DCOMPCON2_OVMUVFE0_SIZE                            0x1
#define _DCOMPCON2_OVMUVFE0_LENGTH                          0x1
#define _DCOMPCON2_OVMUVFE0_MASK                            0x1
#define _DCOMPCON2_OVMUVFE1_POSN                            0x1
#define _DCOMPCON2_OVMUVFE1_POSITION                        0x1
#define _DCOMPCON2_OVMUVFE1_SIZE                            0x1
#define _DCOMPCON2_OVMUVFE1_LENGTH                          0x1
#define _DCOMPCON2_OVMUVFE1_MASK                            0x2
#define _DCOMPCON2_OVMOVFE0_POSN                            0x2
#define _DCOMPCON2_OVMOVFE0_POSITION                        0x2
#define _DCOMPCON2_OVMOVFE0_SIZE                            0x1
#define _DCOMPCON2_OVMOVFE0_LENGTH                          0x1
#define _DCOMPCON2_OVMOVFE0_MASK                            0x4
#define _DCOMPCON2_OVMOVFE1_POSN                            0x3
#define _DCOMPCON2_OVMOVFE1_POSITION                        0x3
#define _DCOMPCON2_OVMOVFE1_SIZE                            0x1
#define _DCOMPCON2_OVMOVFE1_LENGTH                          0x1
#define _DCOMPCON2_OVMOVFE1_MASK                            0x8
#define _DCOMPCON2_OCMUCFE0_POSN                            0x4
#define _DCOMPCON2_OCMUCFE0_POSITION                        0x4
#define _DCOMPCON2_OCMUCFE0_SIZE                            0x1
#define _DCOMPCON2_OCMUCFE0_LENGTH                          0x1
#define _DCOMPCON2_OCMUCFE0_MASK                            0x10
#define _DCOMPCON2_OCMUCFE1_POSN                            0x5
#define _DCOMPCON2_OCMUCFE1_POSITION                        0x5
#define _DCOMPCON2_OCMUCFE1_SIZE                            0x1
#define _DCOMPCON2_OCMUCFE1_LENGTH                          0x1
#define _DCOMPCON2_OCMUCFE1_MASK                            0x20
#define _DCOMPCON2_OCMOCFE0_POSN                            0x6
#define _DCOMPCON2_OCMOCFE0_POSITION                        0x6
#define _DCOMPCON2_OCMOCFE0_SIZE                            0x1
#define _DCOMPCON2_OCMOCFE0_LENGTH                          0x1
#define _DCOMPCON2_OCMOCFE0_MASK                            0x40
#define _DCOMPCON2_OCMOCFE1_POSN                            0x7
#define _DCOMPCON2_OCMOCFE1_POSITION                        0x7
#define _DCOMPCON2_OCMOCFE1_SIZE                            0x1
#define _DCOMPCON2_OCMOCFE1_LENGTH                          0x1
#define _DCOMPCON2_OCMOCFE1_MASK                            0x80

// Register: VREFH
#define VREFH VREFH
extern volatile unsigned char           VREFH               __at(0x913);
#ifndef _LIB_BUILD
asm("VREFH equ 0913h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREF8                  :1;
        unsigned VREF9                  :1;
    };
} VREFHbits_t;
extern volatile VREFHbits_t VREFHbits __at(0x913);
// bitfield macros
#define _VREFH_VREF8_POSN                                   0x0
#define _VREFH_VREF8_POSITION                               0x0
#define _VREFH_VREF8_SIZE                                   0x1
#define _VREFH_VREF8_LENGTH                                 0x1
#define _VREFH_VREF8_MASK                                   0x1
#define _VREFH_VREF9_POSN                                   0x1
#define _VREFH_VREF9_POSITION                               0x1
#define _VREFH_VREF9_SIZE                                   0x1
#define _VREFH_VREF9_LENGTH                                 0x1
#define _VREFH_VREF9_MASK                                   0x2

// Register: VREFL
#define VREFL VREFL
extern volatile unsigned char           VREFL               __at(0x914);
#ifndef _LIB_BUILD
asm("VREFL equ 0914h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREF0                  :1;
        unsigned VREF1                  :1;
        unsigned VREF2                  :1;
        unsigned VREF3                  :1;
        unsigned VREF4                  :1;
        unsigned VREF5                  :1;
        unsigned VREF6                  :1;
        unsigned VREF7                  :1;
    };
} VREFLbits_t;
extern volatile VREFLbits_t VREFLbits __at(0x914);
// bitfield macros
#define _VREFL_VREF0_POSN                                   0x0
#define _VREFL_VREF0_POSITION                               0x0
#define _VREFL_VREF0_SIZE                                   0x1
#define _VREFL_VREF0_LENGTH                                 0x1
#define _VREFL_VREF0_MASK                                   0x1
#define _VREFL_VREF1_POSN                                   0x1
#define _VREFL_VREF1_POSITION                               0x1
#define _VREFL_VREF1_SIZE                                   0x1
#define _VREFL_VREF1_LENGTH                                 0x1
#define _VREFL_VREF1_MASK                                   0x2
#define _VREFL_VREF2_POSN                                   0x2
#define _VREFL_VREF2_POSITION                               0x2
#define _VREFL_VREF2_SIZE                                   0x1
#define _VREFL_VREF2_LENGTH                                 0x1
#define _VREFL_VREF2_MASK                                   0x4
#define _VREFL_VREF3_POSN                                   0x3
#define _VREFL_VREF3_POSITION                               0x3
#define _VREFL_VREF3_SIZE                                   0x1
#define _VREFL_VREF3_LENGTH                                 0x1
#define _VREFL_VREF3_MASK                                   0x8
#define _VREFL_VREF4_POSN                                   0x4
#define _VREFL_VREF4_POSITION                               0x4
#define _VREFL_VREF4_SIZE                                   0x1
#define _VREFL_VREF4_LENGTH                                 0x1
#define _VREFL_VREF4_MASK                                   0x10
#define _VREFL_VREF5_POSN                                   0x5
#define _VREFL_VREF5_POSITION                               0x5
#define _VREFL_VREF5_SIZE                                   0x1
#define _VREFL_VREF5_LENGTH                                 0x1
#define _VREFL_VREF5_MASK                                   0x20
#define _VREFL_VREF6_POSN                                   0x6
#define _VREFL_VREF6_POSITION                               0x6
#define _VREFL_VREF6_SIZE                                   0x1
#define _VREFL_VREF6_LENGTH                                 0x1
#define _VREFL_VREF6_MASK                                   0x40
#define _VREFL_VREF7_POSN                                   0x7
#define _VREFL_VREF7_POSITION                               0x7
#define _VREFL_VREF7_SIZE                                   0x1
#define _VREFL_VREF7_LENGTH                                 0x1
#define _VREFL_VREF7_MASK                                   0x80

// Register: IREFH
#define IREFH IREFH
extern volatile unsigned char           IREFH               __at(0x916);
#ifndef _LIB_BUILD
asm("IREFH equ 0916h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IREF8                  :1;
        unsigned IREF9                  :1;
    };
} IREFHbits_t;
extern volatile IREFHbits_t IREFHbits __at(0x916);
// bitfield macros
#define _IREFH_IREF8_POSN                                   0x0
#define _IREFH_IREF8_POSITION                               0x0
#define _IREFH_IREF8_SIZE                                   0x1
#define _IREFH_IREF8_LENGTH                                 0x1
#define _IREFH_IREF8_MASK                                   0x1
#define _IREFH_IREF9_POSN                                   0x1
#define _IREFH_IREF9_POSITION                               0x1
#define _IREFH_IREF9_SIZE                                   0x1
#define _IREFH_IREF9_LENGTH                                 0x1
#define _IREFH_IREF9_MASK                                   0x2

// Register: IREFL
#define IREFL IREFL
extern volatile unsigned char           IREFL               __at(0x917);
#ifndef _LIB_BUILD
asm("IREFL equ 0917h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IREF0                  :1;
        unsigned IREF1                  :1;
        unsigned IREF2                  :1;
        unsigned IREF3                  :1;
        unsigned IREF4                  :1;
        unsigned IREF5                  :1;
        unsigned IREF6                  :1;
        unsigned IREF7                  :1;
    };
} IREFLbits_t;
extern volatile IREFLbits_t IREFLbits __at(0x917);
// bitfield macros
#define _IREFL_IREF0_POSN                                   0x0
#define _IREFL_IREF0_POSITION                               0x0
#define _IREFL_IREF0_SIZE                                   0x1
#define _IREFL_IREF0_LENGTH                                 0x1
#define _IREFL_IREF0_MASK                                   0x1
#define _IREFL_IREF1_POSN                                   0x1
#define _IREFL_IREF1_POSITION                               0x1
#define _IREFL_IREF1_SIZE                                   0x1
#define _IREFL_IREF1_LENGTH                                 0x1
#define _IREFL_IREF1_MASK                                   0x2
#define _IREFL_IREF2_POSN                                   0x2
#define _IREFL_IREF2_POSITION                               0x2
#define _IREFL_IREF2_SIZE                                   0x1
#define _IREFL_IREF2_LENGTH                                 0x1
#define _IREFL_IREF2_MASK                                   0x4
#define _IREFL_IREF3_POSN                                   0x3
#define _IREFL_IREF3_POSITION                               0x3
#define _IREFL_IREF3_SIZE                                   0x1
#define _IREFL_IREF3_LENGTH                                 0x1
#define _IREFL_IREF3_MASK                                   0x8
#define _IREFL_IREF4_POSN                                   0x4
#define _IREFL_IREF4_POSITION                               0x4
#define _IREFL_IREF4_SIZE                                   0x1
#define _IREFL_IREF4_LENGTH                                 0x1
#define _IREFL_IREF4_MASK                                   0x10
#define _IREFL_IREF5_POSN                                   0x5
#define _IREFL_IREF5_POSITION                               0x5
#define _IREFL_IREF5_SIZE                                   0x1
#define _IREFL_IREF5_LENGTH                                 0x1
#define _IREFL_IREF5_MASK                                   0x20
#define _IREFL_IREF6_POSN                                   0x6
#define _IREFL_IREF6_POSITION                               0x6
#define _IREFL_IREF6_SIZE                                   0x1
#define _IREFL_IREF6_LENGTH                                 0x1
#define _IREFL_IREF6_MASK                                   0x40
#define _IREFL_IREF7_POSN                                   0x7
#define _IREFL_IREF7_POSITION                               0x7
#define _IREFL_IREF7_SIZE                                   0x1
#define _IREFL_IREF7_LENGTH                                 0x1
#define _IREFL_IREF7_MASK                                   0x80

// Register: DOUTH
#define DOUTH DOUTH
extern volatile unsigned char           DOUTH               __at(0x919);
#ifndef _LIB_BUILD
asm("DOUTH equ 0919h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOUT6                  :1;
        unsigned DOUT7                  :1;
        unsigned DOUT8                  :1;
        unsigned DOUT9                  :1;
        unsigned DOUT10                 :1;
        unsigned DOUT11                 :1;
        unsigned DOUT12                 :1;
        unsigned DOUT13                 :1;
    };
} DOUTHbits_t;
extern volatile DOUTHbits_t DOUTHbits __at(0x919);
// bitfield macros
#define _DOUTH_DOUT6_POSN                                   0x0
#define _DOUTH_DOUT6_POSITION                               0x0
#define _DOUTH_DOUT6_SIZE                                   0x1
#define _DOUTH_DOUT6_LENGTH                                 0x1
#define _DOUTH_DOUT6_MASK                                   0x1
#define _DOUTH_DOUT7_POSN                                   0x1
#define _DOUTH_DOUT7_POSITION                               0x1
#define _DOUTH_DOUT7_SIZE                                   0x1
#define _DOUTH_DOUT7_LENGTH                                 0x1
#define _DOUTH_DOUT7_MASK                                   0x2
#define _DOUTH_DOUT8_POSN                                   0x2
#define _DOUTH_DOUT8_POSITION                               0x2
#define _DOUTH_DOUT8_SIZE                                   0x1
#define _DOUTH_DOUT8_LENGTH                                 0x1
#define _DOUTH_DOUT8_MASK                                   0x4
#define _DOUTH_DOUT9_POSN                                   0x3
#define _DOUTH_DOUT9_POSITION                               0x3
#define _DOUTH_DOUT9_SIZE                                   0x1
#define _DOUTH_DOUT9_LENGTH                                 0x1
#define _DOUTH_DOUT9_MASK                                   0x8
#define _DOUTH_DOUT10_POSN                                  0x4
#define _DOUTH_DOUT10_POSITION                              0x4
#define _DOUTH_DOUT10_SIZE                                  0x1
#define _DOUTH_DOUT10_LENGTH                                0x1
#define _DOUTH_DOUT10_MASK                                  0x10
#define _DOUTH_DOUT11_POSN                                  0x5
#define _DOUTH_DOUT11_POSITION                              0x5
#define _DOUTH_DOUT11_SIZE                                  0x1
#define _DOUTH_DOUT11_LENGTH                                0x1
#define _DOUTH_DOUT11_MASK                                  0x20
#define _DOUTH_DOUT12_POSN                                  0x6
#define _DOUTH_DOUT12_POSITION                              0x6
#define _DOUTH_DOUT12_SIZE                                  0x1
#define _DOUTH_DOUT12_LENGTH                                0x1
#define _DOUTH_DOUT12_MASK                                  0x40
#define _DOUTH_DOUT13_POSN                                  0x7
#define _DOUTH_DOUT13_POSITION                              0x7
#define _DOUTH_DOUT13_SIZE                                  0x1
#define _DOUTH_DOUT13_LENGTH                                0x1
#define _DOUTH_DOUT13_MASK                                  0x80

// Register: DOUTL
#define DOUTL DOUTL
extern volatile unsigned char           DOUTL               __at(0x91A);
#ifndef _LIB_BUILD
asm("DOUTL equ 091Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned DOUT0                  :1;
        unsigned DOUT1                  :1;
        unsigned DOUT2                  :1;
        unsigned DOUT3                  :1;
        unsigned DOUT4                  :1;
        unsigned DOUT5                  :1;
    };
} DOUTLbits_t;
extern volatile DOUTLbits_t DOUTLbits __at(0x91A);
// bitfield macros
#define _DOUTL_DOUT0_POSN                                   0x2
#define _DOUTL_DOUT0_POSITION                               0x2
#define _DOUTL_DOUT0_SIZE                                   0x1
#define _DOUTL_DOUT0_LENGTH                                 0x1
#define _DOUTL_DOUT0_MASK                                   0x4
#define _DOUTL_DOUT1_POSN                                   0x3
#define _DOUTL_DOUT1_POSITION                               0x3
#define _DOUTL_DOUT1_SIZE                                   0x1
#define _DOUTL_DOUT1_LENGTH                                 0x1
#define _DOUTL_DOUT1_MASK                                   0x8
#define _DOUTL_DOUT2_POSN                                   0x4
#define _DOUTL_DOUT2_POSITION                               0x4
#define _DOUTL_DOUT2_SIZE                                   0x1
#define _DOUTL_DOUT2_LENGTH                                 0x1
#define _DOUTL_DOUT2_MASK                                   0x10
#define _DOUTL_DOUT3_POSN                                   0x5
#define _DOUTL_DOUT3_POSITION                               0x5
#define _DOUTL_DOUT3_SIZE                                   0x1
#define _DOUTL_DOUT3_LENGTH                                 0x1
#define _DOUTL_DOUT3_MASK                                   0x20
#define _DOUTL_DOUT4_POSN                                   0x6
#define _DOUTL_DOUT4_POSITION                               0x6
#define _DOUTL_DOUT4_SIZE                                   0x1
#define _DOUTL_DOUT4_LENGTH                                 0x1
#define _DOUTL_DOUT4_MASK                                   0x40
#define _DOUTL_DOUT5_POSN                                   0x7
#define _DOUTL_DOUT5_POSITION                               0x7
#define _DOUTL_DOUT5_SIZE                                   0x1
#define _DOUTL_DOUT5_LENGTH                                 0x1
#define _DOUTL_DOUT5_MASK                                   0x80

// Register: KPI
#define KPI KPI
extern volatile unsigned char           KPI                 __at(0x98F);
#ifndef _LIB_BUILD
asm("KPI equ 098Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned KPI0                   :1;
        unsigned KPI1                   :1;
        unsigned KPI2                   :1;
        unsigned KPI3                   :1;
        unsigned KPI4                   :1;
    };
} KPIbits_t;
extern volatile KPIbits_t KPIbits __at(0x98F);
// bitfield macros
#define _KPI_KPI0_POSN                                      0x0
#define _KPI_KPI0_POSITION                                  0x0
#define _KPI_KPI0_SIZE                                      0x1
#define _KPI_KPI0_LENGTH                                    0x1
#define _KPI_KPI0_MASK                                      0x1
#define _KPI_KPI1_POSN                                      0x1
#define _KPI_KPI1_POSITION                                  0x1
#define _KPI_KPI1_SIZE                                      0x1
#define _KPI_KPI1_LENGTH                                    0x1
#define _KPI_KPI1_MASK                                      0x2
#define _KPI_KPI2_POSN                                      0x2
#define _KPI_KPI2_POSITION                                  0x2
#define _KPI_KPI2_SIZE                                      0x1
#define _KPI_KPI2_LENGTH                                    0x1
#define _KPI_KPI2_MASK                                      0x4
#define _KPI_KPI3_POSN                                      0x3
#define _KPI_KPI3_POSITION                                  0x3
#define _KPI_KPI3_SIZE                                      0x1
#define _KPI_KPI3_LENGTH                                    0x1
#define _KPI_KPI3_MASK                                      0x8
#define _KPI_KPI4_POSN                                      0x4
#define _KPI_KPI4_POSITION                                  0x4
#define _KPI_KPI4_SIZE                                      0x1
#define _KPI_KPI4_LENGTH                                    0x1
#define _KPI_KPI4_MASK                                      0x10

// Register: KVI
#define KVI KVI
extern volatile unsigned char           KVI                 __at(0x990);
#ifndef _LIB_BUILD
asm("KVI equ 0990h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned KVI0                   :1;
        unsigned KVI1                   :1;
        unsigned KVI2                   :1;
        unsigned KVI3                   :1;
        unsigned KVI4                   :1;
    };
} KVIbits_t;
extern volatile KVIbits_t KVIbits __at(0x990);
// bitfield macros
#define _KVI_KVI0_POSN                                      0x0
#define _KVI_KVI0_POSITION                                  0x0
#define _KVI_KVI0_SIZE                                      0x1
#define _KVI_KVI0_LENGTH                                    0x1
#define _KVI_KVI0_MASK                                      0x1
#define _KVI_KVI1_POSN                                      0x1
#define _KVI_KVI1_POSITION                                  0x1
#define _KVI_KVI1_SIZE                                      0x1
#define _KVI_KVI1_LENGTH                                    0x1
#define _KVI_KVI1_MASK                                      0x2
#define _KVI_KVI2_POSN                                      0x2
#define _KVI_KVI2_POSITION                                  0x2
#define _KVI_KVI2_SIZE                                      0x1
#define _KVI_KVI2_LENGTH                                    0x1
#define _KVI_KVI2_MASK                                      0x4
#define _KVI_KVI3_POSN                                      0x3
#define _KVI_KVI3_POSITION                                  0x3
#define _KVI_KVI3_SIZE                                      0x1
#define _KVI_KVI3_LENGTH                                    0x1
#define _KVI_KVI3_MASK                                      0x8
#define _KVI_KVI4_POSN                                      0x4
#define _KVI_KVI4_POSITION                                  0x4
#define _KVI_KVI4_SIZE                                      0x1
#define _KVI_KVI4_LENGTH                                    0x1
#define _KVI_KVI4_MASK                                      0x10

// Register: KPV
#define KPV KPV
extern volatile unsigned char           KPV                 __at(0x991);
#ifndef _LIB_BUILD
asm("KPV equ 0991h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned KPV0                   :1;
        unsigned KPV1                   :1;
        unsigned KPV2                   :1;
        unsigned KPV3                   :1;
        unsigned KPV4                   :1;
    };
} KPVbits_t;
extern volatile KPVbits_t KPVbits __at(0x991);
// bitfield macros
#define _KPV_KPV0_POSN                                      0x0
#define _KPV_KPV0_POSITION                                  0x0
#define _KPV_KPV0_SIZE                                      0x1
#define _KPV_KPV0_LENGTH                                    0x1
#define _KPV_KPV0_MASK                                      0x1
#define _KPV_KPV1_POSN                                      0x1
#define _KPV_KPV1_POSITION                                  0x1
#define _KPV_KPV1_SIZE                                      0x1
#define _KPV_KPV1_LENGTH                                    0x1
#define _KPV_KPV1_MASK                                      0x2
#define _KPV_KPV2_POSN                                      0x2
#define _KPV_KPV2_POSITION                                  0x2
#define _KPV_KPV2_SIZE                                      0x1
#define _KPV_KPV2_LENGTH                                    0x1
#define _KPV_KPV2_MASK                                      0x4
#define _KPV_KPV3_POSN                                      0x3
#define _KPV_KPV3_POSITION                                  0x3
#define _KPV_KPV3_SIZE                                      0x1
#define _KPV_KPV3_LENGTH                                    0x1
#define _KPV_KPV3_MASK                                      0x8
#define _KPV_KPV4_POSN                                      0x4
#define _KPV_KPV4_POSITION                                  0x4
#define _KPV_KPV4_SIZE                                      0x1
#define _KPV_KPV4_LENGTH                                    0x1
#define _KPV_KPV4_MASK                                      0x10

// Register: KVV
#define KVV KVV
extern volatile unsigned char           KVV                 __at(0x992);
#ifndef _LIB_BUILD
asm("KVV equ 0992h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned KVV0                   :1;
        unsigned KVV1                   :1;
        unsigned KVV2                   :1;
        unsigned KVV3                   :1;
        unsigned KVV4                   :1;
    };
} KVVbits_t;
extern volatile KVVbits_t KVVbits __at(0x992);
// bitfield macros
#define _KVV_KVV0_POSN                                      0x0
#define _KVV_KVV0_POSITION                                  0x0
#define _KVV_KVV0_SIZE                                      0x1
#define _KVV_KVV0_LENGTH                                    0x1
#define _KVV_KVV0_MASK                                      0x1
#define _KVV_KVV1_POSN                                      0x1
#define _KVV_KVV1_POSITION                                  0x1
#define _KVV_KVV1_SIZE                                      0x1
#define _KVV_KVV1_LENGTH                                    0x1
#define _KVV_KVV1_MASK                                      0x2
#define _KVV_KVV2_POSN                                      0x2
#define _KVV_KVV2_POSITION                                  0x2
#define _KVV_KVV2_SIZE                                      0x1
#define _KVV_KVV2_LENGTH                                    0x1
#define _KVV_KVV2_MASK                                      0x4
#define _KVV_KVV3_POSN                                      0x3
#define _KVV_KVV3_POSITION                                  0x3
#define _KVV_KVV3_SIZE                                      0x1
#define _KVV_KVV3_LENGTH                                    0x1
#define _KVV_KVV3_MASK                                      0x8
#define _KVV_KVV4_POSN                                      0x4
#define _KVV_KVV4_POSITION                                  0x4
#define _KVV_KVV4_SIZE                                      0x1
#define _KVV_KVV4_LENGTH                                    0x1
#define _KVV_KVV4_MASK                                      0x10

// Register: KIV
#define KIV KIV
extern volatile unsigned char           KIV                 __at(0x993);
#ifndef _LIB_BUILD
asm("KIV equ 0993h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned KIV0                   :1;
        unsigned KIV1                   :1;
        unsigned KIV2                   :1;
        unsigned KIV3                   :1;
        unsigned KIV4                   :1;
    };
} KIVbits_t;
extern volatile KIVbits_t KIVbits __at(0x993);
// bitfield macros
#define _KIV_KIV0_POSN                                      0x0
#define _KIV_KIV0_POSITION                                  0x0
#define _KIV_KIV0_SIZE                                      0x1
#define _KIV_KIV0_LENGTH                                    0x1
#define _KIV_KIV0_MASK                                      0x1
#define _KIV_KIV1_POSN                                      0x1
#define _KIV_KIV1_POSITION                                  0x1
#define _KIV_KIV1_SIZE                                      0x1
#define _KIV_KIV1_LENGTH                                    0x1
#define _KIV_KIV1_MASK                                      0x2
#define _KIV_KIV2_POSN                                      0x2
#define _KIV_KIV2_POSITION                                  0x2
#define _KIV_KIV2_SIZE                                      0x1
#define _KIV_KIV2_LENGTH                                    0x1
#define _KIV_KIV2_MASK                                      0x4
#define _KIV_KIV3_POSN                                      0x3
#define _KIV_KIV3_POSITION                                  0x3
#define _KIV_KIV3_SIZE                                      0x1
#define _KIV_KIV3_LENGTH                                    0x1
#define _KIV_KIV3_MASK                                      0x8
#define _KIV_KIV4_POSN                                      0x4
#define _KIV_KIV4_POSITION                                  0x4
#define _KIV_KIV4_SIZE                                      0x1
#define _KIV_KIV4_LENGTH                                    0x1
#define _KIV_KIV4_MASK                                      0x10

// Register: MAXDC
#define MAXDC MAXDC
extern volatile unsigned char           MAXDC               __at(0x995);
#ifndef _LIB_BUILD
asm("MAXDC equ 0995h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MAXDC0                 :1;
        unsigned MAXDC1                 :1;
        unsigned MAXDC2                 :1;
        unsigned MAXDC3                 :1;
        unsigned MAXDC4                 :1;
        unsigned MAXDC5                 :1;
        unsigned MAXDC6                 :1;
        unsigned MAXDC7                 :1;
    };
} MAXDCbits_t;
extern volatile MAXDCbits_t MAXDCbits __at(0x995);
// bitfield macros
#define _MAXDC_MAXDC0_POSN                                  0x0
#define _MAXDC_MAXDC0_POSITION                              0x0
#define _MAXDC_MAXDC0_SIZE                                  0x1
#define _MAXDC_MAXDC0_LENGTH                                0x1
#define _MAXDC_MAXDC0_MASK                                  0x1
#define _MAXDC_MAXDC1_POSN                                  0x1
#define _MAXDC_MAXDC1_POSITION                              0x1
#define _MAXDC_MAXDC1_SIZE                                  0x1
#define _MAXDC_MAXDC1_LENGTH                                0x1
#define _MAXDC_MAXDC1_MASK                                  0x2
#define _MAXDC_MAXDC2_POSN                                  0x2
#define _MAXDC_MAXDC2_POSITION                              0x2
#define _MAXDC_MAXDC2_SIZE                                  0x1
#define _MAXDC_MAXDC2_LENGTH                                0x1
#define _MAXDC_MAXDC2_MASK                                  0x4
#define _MAXDC_MAXDC3_POSN                                  0x3
#define _MAXDC_MAXDC3_POSITION                              0x3
#define _MAXDC_MAXDC3_SIZE                                  0x1
#define _MAXDC_MAXDC3_LENGTH                                0x1
#define _MAXDC_MAXDC3_MASK                                  0x8
#define _MAXDC_MAXDC4_POSN                                  0x4
#define _MAXDC_MAXDC4_POSITION                              0x4
#define _MAXDC_MAXDC4_SIZE                                  0x1
#define _MAXDC_MAXDC4_LENGTH                                0x1
#define _MAXDC_MAXDC4_MASK                                  0x10
#define _MAXDC_MAXDC5_POSN                                  0x5
#define _MAXDC_MAXDC5_POSITION                              0x5
#define _MAXDC_MAXDC5_SIZE                                  0x1
#define _MAXDC_MAXDC5_LENGTH                                0x1
#define _MAXDC_MAXDC5_MASK                                  0x20
#define _MAXDC_MAXDC6_POSN                                  0x6
#define _MAXDC_MAXDC6_POSITION                              0x6
#define _MAXDC_MAXDC6_SIZE                                  0x1
#define _MAXDC_MAXDC6_LENGTH                                0x1
#define _MAXDC_MAXDC6_MASK                                  0x40
#define _MAXDC_MAXDC7_POSN                                  0x7
#define _MAXDC_MAXDC7_POSITION                              0x7
#define _MAXDC_MAXDC7_SIZE                                  0x1
#define _MAXDC_MAXDC7_LENGTH                                0x1
#define _MAXDC_MAXDC7_MASK                                  0x80

// Register: XI
#define XI XI
extern volatile unsigned char           XI                  __at(0x996);
#ifndef _LIB_BUILD
asm("XI equ 0996h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XI0                    :1;
        unsigned XI1                    :1;
        unsigned XI2                    :1;
        unsigned XI3                    :1;
        unsigned XI4                    :1;
    };
} XIbits_t;
extern volatile XIbits_t XIbits __at(0x996);
// bitfield macros
#define _XI_XI0_POSN                                        0x0
#define _XI_XI0_POSITION                                    0x0
#define _XI_XI0_SIZE                                        0x1
#define _XI_XI0_LENGTH                                      0x1
#define _XI_XI0_MASK                                        0x1
#define _XI_XI1_POSN                                        0x1
#define _XI_XI1_POSITION                                    0x1
#define _XI_XI1_SIZE                                        0x1
#define _XI_XI1_LENGTH                                      0x1
#define _XI_XI1_MASK                                        0x2
#define _XI_XI2_POSN                                        0x2
#define _XI_XI2_POSITION                                    0x2
#define _XI_XI2_SIZE                                        0x1
#define _XI_XI2_LENGTH                                      0x1
#define _XI_XI2_MASK                                        0x4
#define _XI_XI3_POSN                                        0x3
#define _XI_XI3_POSITION                                    0x3
#define _XI_XI3_SIZE                                        0x1
#define _XI_XI3_LENGTH                                      0x1
#define _XI_XI3_MASK                                        0x8
#define _XI_XI4_POSN                                        0x4
#define _XI_XI4_POSITION                                    0x4
#define _XI_XI4_SIZE                                        0x1
#define _XI_XI4_LENGTH                                      0x1
#define _XI_XI4_MASK                                        0x10

// Register: YI
#define YI YI
extern volatile unsigned char           YI                  __at(0x997);
#ifndef _LIB_BUILD
asm("YI equ 0997h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned YI0                    :1;
        unsigned YI1                    :1;
        unsigned YI2                    :1;
        unsigned YI3                    :1;
        unsigned YI4                    :1;
    };
} YIbits_t;
extern volatile YIbits_t YIbits __at(0x997);
// bitfield macros
#define _YI_YI0_POSN                                        0x0
#define _YI_YI0_POSITION                                    0x0
#define _YI_YI0_SIZE                                        0x1
#define _YI_YI0_LENGTH                                      0x1
#define _YI_YI0_MASK                                        0x1
#define _YI_YI1_POSN                                        0x1
#define _YI_YI1_POSITION                                    0x1
#define _YI_YI1_SIZE                                        0x1
#define _YI_YI1_LENGTH                                      0x1
#define _YI_YI1_MASK                                        0x2
#define _YI_YI2_POSN                                        0x2
#define _YI_YI2_POSITION                                    0x2
#define _YI_YI2_SIZE                                        0x1
#define _YI_YI2_LENGTH                                      0x1
#define _YI_YI2_MASK                                        0x4
#define _YI_YI3_POSN                                        0x3
#define _YI_YI3_POSITION                                    0x3
#define _YI_YI3_SIZE                                        0x1
#define _YI_YI3_LENGTH                                      0x1
#define _YI_YI3_MASK                                        0x8
#define _YI_YI4_POSN                                        0x4
#define _YI_YI4_POSITION                                    0x4
#define _YI_YI4_SIZE                                        0x1
#define _YI_YI4_LENGTH                                      0x1
#define _YI_YI4_MASK                                        0x10

// Register: XV
#define XV XV
extern volatile unsigned char           XV                  __at(0x998);
#ifndef _LIB_BUILD
asm("XV equ 0998h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XV0                    :1;
        unsigned XV1                    :1;
        unsigned XV2                    :1;
        unsigned XV3                    :1;
        unsigned XV4                    :1;
    };
} XVbits_t;
extern volatile XVbits_t XVbits __at(0x998);
// bitfield macros
#define _XV_XV0_POSN                                        0x0
#define _XV_XV0_POSITION                                    0x0
#define _XV_XV0_SIZE                                        0x1
#define _XV_XV0_LENGTH                                      0x1
#define _XV_XV0_MASK                                        0x1
#define _XV_XV1_POSN                                        0x1
#define _XV_XV1_POSITION                                    0x1
#define _XV_XV1_SIZE                                        0x1
#define _XV_XV1_LENGTH                                      0x1
#define _XV_XV1_MASK                                        0x2
#define _XV_XV2_POSN                                        0x2
#define _XV_XV2_POSITION                                    0x2
#define _XV_XV2_SIZE                                        0x1
#define _XV_XV2_LENGTH                                      0x1
#define _XV_XV2_MASK                                        0x4
#define _XV_XV3_POSN                                        0x3
#define _XV_XV3_POSITION                                    0x3
#define _XV_XV3_SIZE                                        0x1
#define _XV_XV3_LENGTH                                      0x1
#define _XV_XV3_MASK                                        0x8
#define _XV_XV4_POSN                                        0x4
#define _XV_XV4_POSITION                                    0x4
#define _XV_XV4_SIZE                                        0x1
#define _XV_XV4_LENGTH                                      0x1
#define _XV_XV4_MASK                                        0x10

// Register: YV
#define YV YV
extern volatile unsigned char           YV                  __at(0x999);
#ifndef _LIB_BUILD
asm("YV equ 0999h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned YV0                    :1;
        unsigned YV1                    :1;
        unsigned YV2                    :1;
        unsigned YV3                    :1;
        unsigned YV4                    :1;
    };
} YVbits_t;
extern volatile YVbits_t YVbits __at(0x999);
// bitfield macros
#define _YV_YV0_POSN                                        0x0
#define _YV_YV0_POSITION                                    0x0
#define _YV_YV0_SIZE                                        0x1
#define _YV_YV0_LENGTH                                      0x1
#define _YV_YV0_MASK                                        0x1
#define _YV_YV1_POSN                                        0x1
#define _YV_YV1_POSITION                                    0x1
#define _YV_YV1_SIZE                                        0x1
#define _YV_YV1_LENGTH                                      0x1
#define _YV_YV1_MASK                                        0x2
#define _YV_YV2_POSN                                        0x2
#define _YV_YV2_POSITION                                    0x2
#define _YV_YV2_SIZE                                        0x1
#define _YV_YV2_LENGTH                                      0x1
#define _YV_YV2_MASK                                        0x4
#define _YV_YV3_POSN                                        0x3
#define _YV_YV3_POSITION                                    0x3
#define _YV_YV3_SIZE                                        0x1
#define _YV_YV3_LENGTH                                      0x1
#define _YV_YV3_MASK                                        0x8
#define _YV_YV4_POSN                                        0x4
#define _YV_YV4_POSITION                                    0x4
#define _YV_YV4_SIZE                                        0x1
#define _YV_YV4_LENGTH                                      0x1
#define _YV_YV4_MASK                                        0x10

// Register: NS
#define NS NS
extern volatile unsigned char           NS                  __at(0x99A);
#ifndef _LIB_BUILD
asm("NS equ 099Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NS0                    :1;
        unsigned NS1                    :1;
        unsigned NS2                    :1;
        unsigned NS3                    :1;
        unsigned NS4                    :1;
    };
} NSbits_t;
extern volatile NSbits_t NSbits __at(0x99A);
// bitfield macros
#define _NS_NS0_POSN                                        0x0
#define _NS_NS0_POSITION                                    0x0
#define _NS_NS0_SIZE                                        0x1
#define _NS_NS0_LENGTH                                      0x1
#define _NS_NS0_MASK                                        0x1
#define _NS_NS1_POSN                                        0x1
#define _NS_NS1_POSITION                                    0x1
#define _NS_NS1_SIZE                                        0x1
#define _NS_NS1_LENGTH                                      0x1
#define _NS_NS1_MASK                                        0x2
#define _NS_NS2_POSN                                        0x2
#define _NS_NS2_POSITION                                    0x2
#define _NS_NS2_SIZE                                        0x1
#define _NS_NS2_LENGTH                                      0x1
#define _NS_NS2_MASK                                        0x4
#define _NS_NS3_POSN                                        0x3
#define _NS_NS3_POSITION                                    0x3
#define _NS_NS3_SIZE                                        0x1
#define _NS_NS3_LENGTH                                      0x1
#define _NS_NS3_MASK                                        0x8
#define _NS_NS4_POSN                                        0x4
#define _NS_NS4_POSITION                                    0x4
#define _NS_NS4_SIZE                                        0x1
#define _NS_NS4_LENGTH                                      0x1
#define _NS_NS4_MASK                                        0x10

// Register: NP
#define NP NP
extern volatile unsigned char           NP                  __at(0x99B);
#ifndef _LIB_BUILD
asm("NP equ 099Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NP0                    :1;
        unsigned NP1                    :1;
        unsigned NP2                    :1;
        unsigned NP3                    :1;
        unsigned NP4                    :1;
    };
} NPbits_t;
extern volatile NPbits_t NPbits __at(0x99B);
// bitfield macros
#define _NP_NP0_POSN                                        0x0
#define _NP_NP0_POSITION                                    0x0
#define _NP_NP0_SIZE                                        0x1
#define _NP_NP0_LENGTH                                      0x1
#define _NP_NP0_MASK                                        0x1
#define _NP_NP1_POSN                                        0x1
#define _NP_NP1_POSITION                                    0x1
#define _NP_NP1_SIZE                                        0x1
#define _NP_NP1_LENGTH                                      0x1
#define _NP_NP1_MASK                                        0x2
#define _NP_NP2_POSN                                        0x2
#define _NP_NP2_POSITION                                    0x2
#define _NP_NP2_SIZE                                        0x1
#define _NP_NP2_LENGTH                                      0x1
#define _NP_NP2_MASK                                        0x4
#define _NP_NP3_POSN                                        0x3
#define _NP_NP3_POSITION                                    0x3
#define _NP_NP3_SIZE                                        0x1
#define _NP_NP3_LENGTH                                      0x1
#define _NP_NP3_MASK                                        0x8
#define _NP_NP4_POSN                                        0x4
#define _NP_NP4_POSITION                                    0x4
#define _NP_NP4_SIZE                                        0x1
#define _NP_NP4_LENGTH                                      0x1
#define _NP_NP4_MASK                                        0x10

// Register: RLOAD
#define RLOAD RLOAD
extern volatile unsigned char           RLOAD               __at(0x99C);
#ifndef _LIB_BUILD
asm("RLOAD equ 099Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RLOAD0                 :1;
        unsigned RLOAD1                 :1;
        unsigned RLOAD2                 :1;
        unsigned RLOAD3                 :1;
        unsigned RLOAD4                 :1;
        unsigned RLOAD5                 :1;
        unsigned RLOAD6                 :1;
        unsigned RLOAD7                 :1;
    };
} RLOADbits_t;
extern volatile RLOADbits_t RLOADbits __at(0x99C);
// bitfield macros
#define _RLOAD_RLOAD0_POSN                                  0x0
#define _RLOAD_RLOAD0_POSITION                              0x0
#define _RLOAD_RLOAD0_SIZE                                  0x1
#define _RLOAD_RLOAD0_LENGTH                                0x1
#define _RLOAD_RLOAD0_MASK                                  0x1
#define _RLOAD_RLOAD1_POSN                                  0x1
#define _RLOAD_RLOAD1_POSITION                              0x1
#define _RLOAD_RLOAD1_SIZE                                  0x1
#define _RLOAD_RLOAD1_LENGTH                                0x1
#define _RLOAD_RLOAD1_MASK                                  0x2
#define _RLOAD_RLOAD2_POSN                                  0x2
#define _RLOAD_RLOAD2_POSITION                              0x2
#define _RLOAD_RLOAD2_SIZE                                  0x1
#define _RLOAD_RLOAD2_LENGTH                                0x1
#define _RLOAD_RLOAD2_MASK                                  0x4
#define _RLOAD_RLOAD3_POSN                                  0x3
#define _RLOAD_RLOAD3_POSITION                              0x3
#define _RLOAD_RLOAD3_SIZE                                  0x1
#define _RLOAD_RLOAD3_LENGTH                                0x1
#define _RLOAD_RLOAD3_MASK                                  0x8
#define _RLOAD_RLOAD4_POSN                                  0x4
#define _RLOAD_RLOAD4_POSITION                              0x4
#define _RLOAD_RLOAD4_SIZE                                  0x1
#define _RLOAD_RLOAD4_LENGTH                                0x1
#define _RLOAD_RLOAD4_MASK                                  0x10
#define _RLOAD_RLOAD5_POSN                                  0x5
#define _RLOAD_RLOAD5_POSITION                              0x5
#define _RLOAD_RLOAD5_SIZE                                  0x1
#define _RLOAD_RLOAD5_LENGTH                                0x1
#define _RLOAD_RLOAD5_MASK                                  0x20
#define _RLOAD_RLOAD6_POSN                                  0x6
#define _RLOAD_RLOAD6_POSITION                              0x6
#define _RLOAD_RLOAD6_SIZE                                  0x1
#define _RLOAD_RLOAD6_LENGTH                                0x1
#define _RLOAD_RLOAD6_MASK                                  0x40
#define _RLOAD_RLOAD7_POSN                                  0x7
#define _RLOAD_RLOAD7_POSITION                              0x7
#define _RLOAD_RLOAD7_SIZE                                  0x1
#define _RLOAD_RLOAD7_LENGTH                                0x1
#define _RLOAD_RLOAD7_MASK                                  0x80

// Register: RLOSS
#define RLOSS RLOSS
extern volatile unsigned char           RLOSS               __at(0x99D);
#ifndef _LIB_BUILD
asm("RLOSS equ 099Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RLOSS0                 :1;
        unsigned RLOSS1                 :1;
        unsigned RLOSS2                 :1;
        unsigned RLOSS3                 :1;
        unsigned RLOSS4                 :1;
        unsigned RLOSS5                 :1;
        unsigned RLOSS6                 :1;
        unsigned RLOSS7                 :1;
    };
} RLOSSbits_t;
extern volatile RLOSSbits_t RLOSSbits __at(0x99D);
// bitfield macros
#define _RLOSS_RLOSS0_POSN                                  0x0
#define _RLOSS_RLOSS0_POSITION                              0x0
#define _RLOSS_RLOSS0_SIZE                                  0x1
#define _RLOSS_RLOSS0_LENGTH                                0x1
#define _RLOSS_RLOSS0_MASK                                  0x1
#define _RLOSS_RLOSS1_POSN                                  0x1
#define _RLOSS_RLOSS1_POSITION                              0x1
#define _RLOSS_RLOSS1_SIZE                                  0x1
#define _RLOSS_RLOSS1_LENGTH                                0x1
#define _RLOSS_RLOSS1_MASK                                  0x2
#define _RLOSS_RLOSS2_POSN                                  0x2
#define _RLOSS_RLOSS2_POSITION                              0x2
#define _RLOSS_RLOSS2_SIZE                                  0x1
#define _RLOSS_RLOSS2_LENGTH                                0x1
#define _RLOSS_RLOSS2_MASK                                  0x4
#define _RLOSS_RLOSS3_POSN                                  0x3
#define _RLOSS_RLOSS3_POSITION                              0x3
#define _RLOSS_RLOSS3_SIZE                                  0x1
#define _RLOSS_RLOSS3_LENGTH                                0x1
#define _RLOSS_RLOSS3_MASK                                  0x8
#define _RLOSS_RLOSS4_POSN                                  0x4
#define _RLOSS_RLOSS4_POSITION                              0x4
#define _RLOSS_RLOSS4_SIZE                                  0x1
#define _RLOSS_RLOSS4_LENGTH                                0x1
#define _RLOSS_RLOSS4_MASK                                  0x10
#define _RLOSS_RLOSS5_POSN                                  0x5
#define _RLOSS_RLOSS5_POSITION                              0x5
#define _RLOSS_RLOSS5_SIZE                                  0x1
#define _RLOSS_RLOSS5_LENGTH                                0x1
#define _RLOSS_RLOSS5_MASK                                  0x20
#define _RLOSS_RLOSS6_POSN                                  0x6
#define _RLOSS_RLOSS6_POSITION                              0x6
#define _RLOSS_RLOSS6_SIZE                                  0x1
#define _RLOSS_RLOSS6_LENGTH                                0x1
#define _RLOSS_RLOSS6_MASK                                  0x40
#define _RLOSS_RLOSS7_POSN                                  0x7
#define _RLOSS_RLOSS7_POSITION                              0x7
#define _RLOSS_RLOSS7_SIZE                                  0x1
#define _RLOSS_RLOSS7_LENGTH                                0x1
#define _RLOSS_RLOSS7_MASK                                  0x80

// Register: TST_DMAH
#define TST_DMAH TST_DMAH
extern volatile unsigned char           TST_DMAH            __at(0xD8C);
#ifndef _LIB_BUILD
asm("TST_DMAH equ 0D8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA_DATA8              :1;
        unsigned DMA_DATA9              :1;
        unsigned DMA_DATA10             :1;
        unsigned DMA_DATA11             :1;
        unsigned DMA_DATA12             :1;
        unsigned DMA_DATA13             :1;
        unsigned DMA_DATA14             :1;
        unsigned DMA_DATA15             :1;
    };
} TST_DMAHbits_t;
extern volatile TST_DMAHbits_t TST_DMAHbits __at(0xD8C);
// bitfield macros
#define _TST_DMAH_DMA_DATA8_POSN                            0x0
#define _TST_DMAH_DMA_DATA8_POSITION                        0x0
#define _TST_DMAH_DMA_DATA8_SIZE                            0x1
#define _TST_DMAH_DMA_DATA8_LENGTH                          0x1
#define _TST_DMAH_DMA_DATA8_MASK                            0x1
#define _TST_DMAH_DMA_DATA9_POSN                            0x1
#define _TST_DMAH_DMA_DATA9_POSITION                        0x1
#define _TST_DMAH_DMA_DATA9_SIZE                            0x1
#define _TST_DMAH_DMA_DATA9_LENGTH                          0x1
#define _TST_DMAH_DMA_DATA9_MASK                            0x2
#define _TST_DMAH_DMA_DATA10_POSN                           0x2
#define _TST_DMAH_DMA_DATA10_POSITION                       0x2
#define _TST_DMAH_DMA_DATA10_SIZE                           0x1
#define _TST_DMAH_DMA_DATA10_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA10_MASK                           0x4
#define _TST_DMAH_DMA_DATA11_POSN                           0x3
#define _TST_DMAH_DMA_DATA11_POSITION                       0x3
#define _TST_DMAH_DMA_DATA11_SIZE                           0x1
#define _TST_DMAH_DMA_DATA11_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA11_MASK                           0x8
#define _TST_DMAH_DMA_DATA12_POSN                           0x4
#define _TST_DMAH_DMA_DATA12_POSITION                       0x4
#define _TST_DMAH_DMA_DATA12_SIZE                           0x1
#define _TST_DMAH_DMA_DATA12_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA12_MASK                           0x10
#define _TST_DMAH_DMA_DATA13_POSN                           0x5
#define _TST_DMAH_DMA_DATA13_POSITION                       0x5
#define _TST_DMAH_DMA_DATA13_SIZE                           0x1
#define _TST_DMAH_DMA_DATA13_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA13_MASK                           0x20
#define _TST_DMAH_DMA_DATA14_POSN                           0x6
#define _TST_DMAH_DMA_DATA14_POSITION                       0x6
#define _TST_DMAH_DMA_DATA14_SIZE                           0x1
#define _TST_DMAH_DMA_DATA14_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA14_MASK                           0x40
#define _TST_DMAH_DMA_DATA15_POSN                           0x7
#define _TST_DMAH_DMA_DATA15_POSITION                       0x7
#define _TST_DMAH_DMA_DATA15_SIZE                           0x1
#define _TST_DMAH_DMA_DATA15_LENGTH                         0x1
#define _TST_DMAH_DMA_DATA15_MASK                           0x80

// Register: TST_DMAL
#define TST_DMAL TST_DMAL
extern volatile unsigned char           TST_DMAL            __at(0xD8D);
#ifndef _LIB_BUILD
asm("TST_DMAL equ 0D8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA_DATA0              :1;
        unsigned DMA_DATA1              :1;
        unsigned DMA_DATA2              :1;
        unsigned DMA_DATA3              :1;
        unsigned DMA_DATA4              :1;
        unsigned DMA_DATA5              :1;
        unsigned DMA_DATA6              :1;
        unsigned DMA_DATA7              :1;
    };
} TST_DMALbits_t;
extern volatile TST_DMALbits_t TST_DMALbits __at(0xD8D);
// bitfield macros
#define _TST_DMAL_DMA_DATA0_POSN                            0x0
#define _TST_DMAL_DMA_DATA0_POSITION                        0x0
#define _TST_DMAL_DMA_DATA0_SIZE                            0x1
#define _TST_DMAL_DMA_DATA0_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA0_MASK                            0x1
#define _TST_DMAL_DMA_DATA1_POSN                            0x1
#define _TST_DMAL_DMA_DATA1_POSITION                        0x1
#define _TST_DMAL_DMA_DATA1_SIZE                            0x1
#define _TST_DMAL_DMA_DATA1_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA1_MASK                            0x2
#define _TST_DMAL_DMA_DATA2_POSN                            0x2
#define _TST_DMAL_DMA_DATA2_POSITION                        0x2
#define _TST_DMAL_DMA_DATA2_SIZE                            0x1
#define _TST_DMAL_DMA_DATA2_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA2_MASK                            0x4
#define _TST_DMAL_DMA_DATA3_POSN                            0x3
#define _TST_DMAL_DMA_DATA3_POSITION                        0x3
#define _TST_DMAL_DMA_DATA3_SIZE                            0x1
#define _TST_DMAL_DMA_DATA3_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA3_MASK                            0x8
#define _TST_DMAL_DMA_DATA4_POSN                            0x4
#define _TST_DMAL_DMA_DATA4_POSITION                        0x4
#define _TST_DMAL_DMA_DATA4_SIZE                            0x1
#define _TST_DMAL_DMA_DATA4_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA4_MASK                            0x10
#define _TST_DMAL_DMA_DATA5_POSN                            0x5
#define _TST_DMAL_DMA_DATA5_POSITION                        0x5
#define _TST_DMAL_DMA_DATA5_SIZE                            0x1
#define _TST_DMAL_DMA_DATA5_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA5_MASK                            0x20
#define _TST_DMAL_DMA_DATA6_POSN                            0x6
#define _TST_DMAL_DMA_DATA6_POSITION                        0x6
#define _TST_DMAL_DMA_DATA6_SIZE                            0x1
#define _TST_DMAL_DMA_DATA6_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA6_MASK                            0x40
#define _TST_DMAL_DMA_DATA7_POSN                            0x7
#define _TST_DMAL_DMA_DATA7_POSITION                        0x7
#define _TST_DMAL_DMA_DATA7_SIZE                            0x1
#define _TST_DMAL_DMA_DATA7_LENGTH                          0x1
#define _TST_DMAL_DMA_DATA7_MASK                            0x80

// Register: TST_ISMSTAT
#define TST_ISMSTAT TST_ISMSTAT
extern volatile unsigned char           TST_ISMSTAT         __at(0xD90);
#ifndef _LIB_BUILD
asm("TST_ISMSTAT equ 0D90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIBSTAT                :1;
        unsigned                        :3;
        unsigned ISMSTAT                :1;
    };
} TST_ISMSTATbits_t;
extern volatile TST_ISMSTATbits_t TST_ISMSTATbits __at(0xD90);
// bitfield macros
#define _TST_ISMSTAT_PIBSTAT_POSN                           0x0
#define _TST_ISMSTAT_PIBSTAT_POSITION                       0x0
#define _TST_ISMSTAT_PIBSTAT_SIZE                           0x1
#define _TST_ISMSTAT_PIBSTAT_LENGTH                         0x1
#define _TST_ISMSTAT_PIBSTAT_MASK                           0x1
#define _TST_ISMSTAT_ISMSTAT_POSN                           0x4
#define _TST_ISMSTAT_ISMSTAT_POSITION                       0x4
#define _TST_ISMSTAT_ISMSTAT_SIZE                           0x1
#define _TST_ISMSTAT_ISMSTAT_LENGTH                         0x1
#define _TST_ISMSTAT_ISMSTAT_MASK                           0x10

// Register: TST_ISMREAD
#define TST_ISMREAD TST_ISMREAD
extern volatile unsigned char           TST_ISMREAD         __at(0xD91);
#ifndef _LIB_BUILD
asm("TST_ISMREAD equ 0D91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISMREAD0               :1;
        unsigned ISMREAD1               :1;
        unsigned ISMREAD2               :1;
        unsigned ISMREAD3               :1;
        unsigned ISMREAD4               :1;
        unsigned ISMREAD5               :1;
    };
} TST_ISMREADbits_t;
extern volatile TST_ISMREADbits_t TST_ISMREADbits __at(0xD91);
// bitfield macros
#define _TST_ISMREAD_ISMREAD0_POSN                          0x0
#define _TST_ISMREAD_ISMREAD0_POSITION                      0x0
#define _TST_ISMREAD_ISMREAD0_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD0_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD0_MASK                          0x1
#define _TST_ISMREAD_ISMREAD1_POSN                          0x1
#define _TST_ISMREAD_ISMREAD1_POSITION                      0x1
#define _TST_ISMREAD_ISMREAD1_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD1_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD1_MASK                          0x2
#define _TST_ISMREAD_ISMREAD2_POSN                          0x2
#define _TST_ISMREAD_ISMREAD2_POSITION                      0x2
#define _TST_ISMREAD_ISMREAD2_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD2_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD2_MASK                          0x4
#define _TST_ISMREAD_ISMREAD3_POSN                          0x3
#define _TST_ISMREAD_ISMREAD3_POSITION                      0x3
#define _TST_ISMREAD_ISMREAD3_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD3_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD3_MASK                          0x8
#define _TST_ISMREAD_ISMREAD4_POSN                          0x4
#define _TST_ISMREAD_ISMREAD4_POSITION                      0x4
#define _TST_ISMREAD_ISMREAD4_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD4_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD4_MASK                          0x10
#define _TST_ISMREAD_ISMREAD5_POSN                          0x5
#define _TST_ISMREAD_ISMREAD5_POSITION                      0x5
#define _TST_ISMREAD_ISMREAD5_SIZE                          0x1
#define _TST_ISMREAD_ISMREAD5_LENGTH                        0x1
#define _TST_ISMREAD_ISMREAD5_MASK                          0x20

// Register: TST_PERDOVR
#define TST_PERDOVR TST_PERDOVR
extern volatile unsigned char           TST_PERDOVR         __at(0xD92);
#ifndef _LIB_BUILD
asm("TST_PERDOVR equ 0D92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PEROVR0                :1;
        unsigned PEROVR1                :1;
        unsigned PEROVR2                :1;
        unsigned PEROVR3                :1;
        unsigned PEROVR4                :1;
        unsigned PEROVR5                :1;
    };
} TST_PERDOVRbits_t;
extern volatile TST_PERDOVRbits_t TST_PERDOVRbits __at(0xD92);
// bitfield macros
#define _TST_PERDOVR_PEROVR0_POSN                           0x0
#define _TST_PERDOVR_PEROVR0_POSITION                       0x0
#define _TST_PERDOVR_PEROVR0_SIZE                           0x1
#define _TST_PERDOVR_PEROVR0_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR0_MASK                           0x1
#define _TST_PERDOVR_PEROVR1_POSN                           0x1
#define _TST_PERDOVR_PEROVR1_POSITION                       0x1
#define _TST_PERDOVR_PEROVR1_SIZE                           0x1
#define _TST_PERDOVR_PEROVR1_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR1_MASK                           0x2
#define _TST_PERDOVR_PEROVR2_POSN                           0x2
#define _TST_PERDOVR_PEROVR2_POSITION                       0x2
#define _TST_PERDOVR_PEROVR2_SIZE                           0x1
#define _TST_PERDOVR_PEROVR2_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR2_MASK                           0x4
#define _TST_PERDOVR_PEROVR3_POSN                           0x3
#define _TST_PERDOVR_PEROVR3_POSITION                       0x3
#define _TST_PERDOVR_PEROVR3_SIZE                           0x1
#define _TST_PERDOVR_PEROVR3_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR3_MASK                           0x8
#define _TST_PERDOVR_PEROVR4_POSN                           0x4
#define _TST_PERDOVR_PEROVR4_POSITION                       0x4
#define _TST_PERDOVR_PEROVR4_SIZE                           0x1
#define _TST_PERDOVR_PEROVR4_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR4_MASK                           0x10
#define _TST_PERDOVR_PEROVR5_POSN                           0x5
#define _TST_PERDOVR_PEROVR5_POSITION                       0x5
#define _TST_PERDOVR_PEROVR5_SIZE                           0x1
#define _TST_PERDOVR_PEROVR5_LENGTH                         0x1
#define _TST_PERDOVR_PEROVR5_MASK                           0x20

// Register: TST_PIBREAD
#define TST_PIBREAD TST_PIBREAD
extern volatile unsigned char           TST_PIBREAD         __at(0xD96);
#ifndef _LIB_BUILD
asm("TST_PIBREAD equ 0D96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIBREAD0               :1;
        unsigned PIBREAD1               :1;
        unsigned PIBREAD2               :1;
        unsigned PIBREAD3               :1;
        unsigned PIBREAD4               :1;
        unsigned PIBREAD5               :1;
    };
} TST_PIBREADbits_t;
extern volatile TST_PIBREADbits_t TST_PIBREADbits __at(0xD96);
// bitfield macros
#define _TST_PIBREAD_PIBREAD0_POSN                          0x0
#define _TST_PIBREAD_PIBREAD0_POSITION                      0x0
#define _TST_PIBREAD_PIBREAD0_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD0_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD0_MASK                          0x1
#define _TST_PIBREAD_PIBREAD1_POSN                          0x1
#define _TST_PIBREAD_PIBREAD1_POSITION                      0x1
#define _TST_PIBREAD_PIBREAD1_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD1_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD1_MASK                          0x2
#define _TST_PIBREAD_PIBREAD2_POSN                          0x2
#define _TST_PIBREAD_PIBREAD2_POSITION                      0x2
#define _TST_PIBREAD_PIBREAD2_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD2_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD2_MASK                          0x4
#define _TST_PIBREAD_PIBREAD3_POSN                          0x3
#define _TST_PIBREAD_PIBREAD3_POSITION                      0x3
#define _TST_PIBREAD_PIBREAD3_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD3_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD3_MASK                          0x8
#define _TST_PIBREAD_PIBREAD4_POSN                          0x4
#define _TST_PIBREAD_PIBREAD4_POSITION                      0x4
#define _TST_PIBREAD_PIBREAD4_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD4_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD4_MASK                          0x10
#define _TST_PIBREAD_PIBREAD5_POSN                          0x5
#define _TST_PIBREAD_PIBREAD5_POSITION                      0x5
#define _TST_PIBREAD_PIBREAD5_SIZE                          0x1
#define _TST_PIBREAD_PIBREAD5_LENGTH                        0x1
#define _TST_PIBREAD_PIBREAD5_MASK                          0x20

// Register: UMTOAP
#define UMTOAP UMTOAP
extern volatile unsigned char           UMTOAP              __at(0xE0C);
#ifndef _LIB_BUILD
asm("UMTOAP equ 0E0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOAP0                :1;
        unsigned UMTOAP1                :1;
        unsigned UMTOAP2                :1;
        unsigned UMTOAP3                :1;
        unsigned UMTOAP4                :1;
        unsigned UMTOAP5                :1;
    };
} UMTOAPbits_t;
extern volatile UMTOAPbits_t UMTOAPbits __at(0xE0C);
// bitfield macros
#define _UMTOAP_UMTOAP0_POSN                                0x0
#define _UMTOAP_UMTOAP0_POSITION                            0x0
#define _UMTOAP_UMTOAP0_SIZE                                0x1
#define _UMTOAP_UMTOAP0_LENGTH                              0x1
#define _UMTOAP_UMTOAP0_MASK                                0x1
#define _UMTOAP_UMTOAP1_POSN                                0x1
#define _UMTOAP_UMTOAP1_POSITION                            0x1
#define _UMTOAP_UMTOAP1_SIZE                                0x1
#define _UMTOAP_UMTOAP1_LENGTH                              0x1
#define _UMTOAP_UMTOAP1_MASK                                0x2
#define _UMTOAP_UMTOAP2_POSN                                0x2
#define _UMTOAP_UMTOAP2_POSITION                            0x2
#define _UMTOAP_UMTOAP2_SIZE                                0x1
#define _UMTOAP_UMTOAP2_LENGTH                              0x1
#define _UMTOAP_UMTOAP2_MASK                                0x4
#define _UMTOAP_UMTOAP3_POSN                                0x3
#define _UMTOAP_UMTOAP3_POSITION                            0x3
#define _UMTOAP_UMTOAP3_SIZE                                0x1
#define _UMTOAP_UMTOAP3_LENGTH                              0x1
#define _UMTOAP_UMTOAP3_MASK                                0x8
#define _UMTOAP_UMTOAP4_POSN                                0x4
#define _UMTOAP_UMTOAP4_POSITION                            0x4
#define _UMTOAP_UMTOAP4_SIZE                                0x1
#define _UMTOAP_UMTOAP4_LENGTH                              0x1
#define _UMTOAP_UMTOAP4_MASK                                0x10
#define _UMTOAP_UMTOAP5_POSN                                0x5
#define _UMTOAP_UMTOAP5_POSITION                            0x5
#define _UMTOAP_UMTOAP5_SIZE                                0x1
#define _UMTOAP_UMTOAP5_LENGTH                              0x1
#define _UMTOAP_UMTOAP5_MASK                                0x20

// Register: UMTOAL
#define UMTOAL UMTOAL
extern volatile unsigned char           UMTOAL              __at(0xE0D);
#ifndef _LIB_BUILD
asm("UMTOAL equ 0E0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOA0                 :1;
        unsigned UMTOA1                 :1;
        unsigned UMTOA2                 :1;
        unsigned UMTOA3                 :1;
        unsigned UMTOA4                 :1;
        unsigned UMTOA5                 :1;
        unsigned UMTOA6                 :1;
        unsigned UMTOA7                 :1;
    };
} UMTOALbits_t;
extern volatile UMTOALbits_t UMTOALbits __at(0xE0D);
// bitfield macros
#define _UMTOAL_UMTOA0_POSN                                 0x0
#define _UMTOAL_UMTOA0_POSITION                             0x0
#define _UMTOAL_UMTOA0_SIZE                                 0x1
#define _UMTOAL_UMTOA0_LENGTH                               0x1
#define _UMTOAL_UMTOA0_MASK                                 0x1
#define _UMTOAL_UMTOA1_POSN                                 0x1
#define _UMTOAL_UMTOA1_POSITION                             0x1
#define _UMTOAL_UMTOA1_SIZE                                 0x1
#define _UMTOAL_UMTOA1_LENGTH                               0x1
#define _UMTOAL_UMTOA1_MASK                                 0x2
#define _UMTOAL_UMTOA2_POSN                                 0x2
#define _UMTOAL_UMTOA2_POSITION                             0x2
#define _UMTOAL_UMTOA2_SIZE                                 0x1
#define _UMTOAL_UMTOA2_LENGTH                               0x1
#define _UMTOAL_UMTOA2_MASK                                 0x4
#define _UMTOAL_UMTOA3_POSN                                 0x3
#define _UMTOAL_UMTOA3_POSITION                             0x3
#define _UMTOAL_UMTOA3_SIZE                                 0x1
#define _UMTOAL_UMTOA3_LENGTH                               0x1
#define _UMTOAL_UMTOA3_MASK                                 0x8
#define _UMTOAL_UMTOA4_POSN                                 0x4
#define _UMTOAL_UMTOA4_POSITION                             0x4
#define _UMTOAL_UMTOA4_SIZE                                 0x1
#define _UMTOAL_UMTOA4_LENGTH                               0x1
#define _UMTOAL_UMTOA4_MASK                                 0x10
#define _UMTOAL_UMTOA5_POSN                                 0x5
#define _UMTOAL_UMTOA5_POSITION                             0x5
#define _UMTOAL_UMTOA5_SIZE                                 0x1
#define _UMTOAL_UMTOA5_LENGTH                               0x1
#define _UMTOAL_UMTOA5_MASK                                 0x20
#define _UMTOAL_UMTOA6_POSN                                 0x6
#define _UMTOAL_UMTOA6_POSITION                             0x6
#define _UMTOAL_UMTOA6_SIZE                                 0x1
#define _UMTOAL_UMTOA6_LENGTH                               0x1
#define _UMTOAL_UMTOA6_MASK                                 0x40
#define _UMTOAL_UMTOA7_POSN                                 0x7
#define _UMTOAL_UMTOA7_POSITION                             0x7
#define _UMTOAL_UMTOA7_SIZE                                 0x1
#define _UMTOAL_UMTOA7_LENGTH                               0x1
#define _UMTOAL_UMTOA7_MASK                                 0x80

// Register: UMTOAH
#define UMTOAH UMTOAH
extern volatile unsigned char           UMTOAH              __at(0xE0E);
#ifndef _LIB_BUILD
asm("UMTOAH equ 0E0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOA8                 :1;
        unsigned UMTOA9                 :1;
        unsigned UMTOA10                :1;
        unsigned UMTOA11                :1;
        unsigned UMTOA12                :1;
        unsigned UMTOA13                :1;
    };
} UMTOAHbits_t;
extern volatile UMTOAHbits_t UMTOAHbits __at(0xE0E);
// bitfield macros
#define _UMTOAH_UMTOA8_POSN                                 0x0
#define _UMTOAH_UMTOA8_POSITION                             0x0
#define _UMTOAH_UMTOA8_SIZE                                 0x1
#define _UMTOAH_UMTOA8_LENGTH                               0x1
#define _UMTOAH_UMTOA8_MASK                                 0x1
#define _UMTOAH_UMTOA9_POSN                                 0x1
#define _UMTOAH_UMTOA9_POSITION                             0x1
#define _UMTOAH_UMTOA9_SIZE                                 0x1
#define _UMTOAH_UMTOA9_LENGTH                               0x1
#define _UMTOAH_UMTOA9_MASK                                 0x2
#define _UMTOAH_UMTOA10_POSN                                0x2
#define _UMTOAH_UMTOA10_POSITION                            0x2
#define _UMTOAH_UMTOA10_SIZE                                0x1
#define _UMTOAH_UMTOA10_LENGTH                              0x1
#define _UMTOAH_UMTOA10_MASK                                0x4
#define _UMTOAH_UMTOA11_POSN                                0x3
#define _UMTOAH_UMTOA11_POSITION                            0x3
#define _UMTOAH_UMTOA11_SIZE                                0x1
#define _UMTOAH_UMTOA11_LENGTH                              0x1
#define _UMTOAH_UMTOA11_MASK                                0x8
#define _UMTOAH_UMTOA12_POSN                                0x4
#define _UMTOAH_UMTOA12_POSITION                            0x4
#define _UMTOAH_UMTOA12_SIZE                                0x1
#define _UMTOAH_UMTOA12_LENGTH                              0x1
#define _UMTOAH_UMTOA12_MASK                                0x10
#define _UMTOAH_UMTOA13_POSN                                0x5
#define _UMTOAH_UMTOA13_POSITION                            0x5
#define _UMTOAH_UMTOA13_SIZE                                0x1
#define _UMTOAH_UMTOA13_LENGTH                              0x1
#define _UMTOAH_UMTOA13_MASK                                0x20

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0xE0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 0E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1OUT                 :1;
        unsigned LC2OUT                 :1;
        unsigned LC3OUT                 :1;
        unsigned LC4OUT                 :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0xE0F);
// bitfield macros
#define _CLCDATA_LC1OUT_POSN                                0x0
#define _CLCDATA_LC1OUT_POSITION                            0x0
#define _CLCDATA_LC1OUT_SIZE                                0x1
#define _CLCDATA_LC1OUT_LENGTH                              0x1
#define _CLCDATA_LC1OUT_MASK                                0x1
#define _CLCDATA_LC2OUT_POSN                                0x1
#define _CLCDATA_LC2OUT_POSITION                            0x1
#define _CLCDATA_LC2OUT_SIZE                                0x1
#define _CLCDATA_LC2OUT_LENGTH                              0x1
#define _CLCDATA_LC2OUT_MASK                                0x2
#define _CLCDATA_LC3OUT_POSN                                0x2
#define _CLCDATA_LC3OUT_POSITION                            0x2
#define _CLCDATA_LC3OUT_SIZE                                0x1
#define _CLCDATA_LC3OUT_LENGTH                              0x1
#define _CLCDATA_LC3OUT_MASK                                0x4
#define _CLCDATA_LC4OUT_POSN                                0x3
#define _CLCDATA_LC4OUT_POSITION                            0x3
#define _CLCDATA_LC4OUT_SIZE                                0x1
#define _CLCDATA_LC4OUT_LENGTH                              0x1
#define _CLCDATA_LC4OUT_MASK                                0x8

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0xE10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 0E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0xE10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0xE11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 0E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0xE11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0xE12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 0E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0xE12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0xE13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 0E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0xE13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0xE14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 0E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0xE14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0xE15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 0E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0xE15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0xE16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 0E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0xE16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0xE17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 0E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0xE17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0xE18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 0E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0xE18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0xE19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 0E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0xE19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0xE1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 0E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0xE1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0xE1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 0E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0xE1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0xE1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 0E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0xE1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0xE1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 0E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0xE1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0xE1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 0E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0xE1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0xE1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 0E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0xE1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0xE20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 0E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0xE20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0xE21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 0E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0xE21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0xE22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 0E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0xE22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0xE23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 0E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0xE23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0xE8F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0xE8F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0xE90);
#ifndef _LIB_BUILD
asm("INTPPS equ 0E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :4;
    };
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0xE90);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x4
#define _INTPPS_INTPPS_LENGTH                               0x4
#define _INTPPS_INTPPS_MASK                                 0xF
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0xE91);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :4;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0xE91);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x4
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x4
#define _T0CKIPPS_T0CKIPPS_MASK                             0xF
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0xE92);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0xE92);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0xE93);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0xE93);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0xE94);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 0E94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3CKIPPS               :5;
    };
    struct {
        unsigned T3CKIPPS0              :1;
        unsigned T3CKIPPS1              :1;
        unsigned T3CKIPPS2              :1;
        unsigned T3CKIPPS3              :1;
        unsigned T3CKIPPS4              :1;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0xE94);
// bitfield macros
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x5
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x5
#define _T3CKIPPS_T3CKIPPS_MASK                             0x1F
#define _T3CKIPPS_T3CKIPPS0_POSN                            0x0
#define _T3CKIPPS_T3CKIPPS0_POSITION                        0x0
#define _T3CKIPPS_T3CKIPPS0_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS0_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS0_MASK                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSN                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSITION                        0x1
#define _T3CKIPPS_T3CKIPPS1_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS1_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS1_MASK                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSN                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSITION                        0x2
#define _T3CKIPPS_T3CKIPPS2_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS2_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS2_MASK                            0x4
#define _T3CKIPPS_T3CKIPPS3_POSN                            0x3
#define _T3CKIPPS_T3CKIPPS3_POSITION                        0x3
#define _T3CKIPPS_T3CKIPPS3_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS3_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS3_MASK                            0x8
#define _T3CKIPPS_T3CKIPPS4_POSN                            0x4
#define _T3CKIPPS_T3CKIPPS4_POSITION                        0x4
#define _T3CKIPPS_T3CKIPPS4_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS4_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS4_MASK                            0x10

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0xE95);
#ifndef _LIB_BUILD
asm("T3GPPS equ 0E95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GPPS                 :5;
    };
    struct {
        unsigned T3GPPS0                :1;
        unsigned T3GPPS1                :1;
        unsigned T3GPPS2                :1;
        unsigned T3GPPS3                :1;
        unsigned T3GPPS4                :1;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0xE95);
// bitfield macros
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F
#define _T3GPPS_T3GPPS0_POSN                                0x0
#define _T3GPPS_T3GPPS0_POSITION                            0x0
#define _T3GPPS_T3GPPS0_SIZE                                0x1
#define _T3GPPS_T3GPPS0_LENGTH                              0x1
#define _T3GPPS_T3GPPS0_MASK                                0x1
#define _T3GPPS_T3GPPS1_POSN                                0x1
#define _T3GPPS_T3GPPS1_POSITION                            0x1
#define _T3GPPS_T3GPPS1_SIZE                                0x1
#define _T3GPPS_T3GPPS1_LENGTH                              0x1
#define _T3GPPS_T3GPPS1_MASK                                0x2
#define _T3GPPS_T3GPPS2_POSN                                0x2
#define _T3GPPS_T3GPPS2_POSITION                            0x2
#define _T3GPPS_T3GPPS2_SIZE                                0x1
#define _T3GPPS_T3GPPS2_LENGTH                              0x1
#define _T3GPPS_T3GPPS2_MASK                                0x4
#define _T3GPPS_T3GPPS3_POSN                                0x3
#define _T3GPPS_T3GPPS3_POSITION                            0x3
#define _T3GPPS_T3GPPS3_SIZE                                0x1
#define _T3GPPS_T3GPPS3_LENGTH                              0x1
#define _T3GPPS_T3GPPS3_MASK                                0x8
#define _T3GPPS_T3GPPS4_POSN                                0x4
#define _T3GPPS_T3GPPS4_POSITION                            0x4
#define _T3GPPS_T3GPPS4_SIZE                                0x1
#define _T3GPPS_T3GPPS4_LENGTH                              0x1
#define _T3GPPS_T3GPPS4_MASK                                0x10

// Register: T2AINPPS
#define T2AINPPS T2AINPPS
extern volatile unsigned char           T2AINPPS            __at(0xE9C);
#ifndef _LIB_BUILD
asm("T2AINPPS equ 0E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2AINPPS               :5;
    };
    struct {
        unsigned T2AINPPS0              :1;
        unsigned T2AINPPS1              :1;
        unsigned T2AINPPS2              :1;
        unsigned T2AINPPS3              :1;
        unsigned T2AINPPS4              :1;
    };
} T2AINPPSbits_t;
extern volatile T2AINPPSbits_t T2AINPPSbits __at(0xE9C);
// bitfield macros
#define _T2AINPPS_T2AINPPS_POSN                             0x0
#define _T2AINPPS_T2AINPPS_POSITION                         0x0
#define _T2AINPPS_T2AINPPS_SIZE                             0x5
#define _T2AINPPS_T2AINPPS_LENGTH                           0x5
#define _T2AINPPS_T2AINPPS_MASK                             0x1F
#define _T2AINPPS_T2AINPPS0_POSN                            0x0
#define _T2AINPPS_T2AINPPS0_POSITION                        0x0
#define _T2AINPPS_T2AINPPS0_SIZE                            0x1
#define _T2AINPPS_T2AINPPS0_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS0_MASK                            0x1
#define _T2AINPPS_T2AINPPS1_POSN                            0x1
#define _T2AINPPS_T2AINPPS1_POSITION                        0x1
#define _T2AINPPS_T2AINPPS1_SIZE                            0x1
#define _T2AINPPS_T2AINPPS1_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS1_MASK                            0x2
#define _T2AINPPS_T2AINPPS2_POSN                            0x2
#define _T2AINPPS_T2AINPPS2_POSITION                        0x2
#define _T2AINPPS_T2AINPPS2_SIZE                            0x1
#define _T2AINPPS_T2AINPPS2_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS2_MASK                            0x4
#define _T2AINPPS_T2AINPPS3_POSN                            0x3
#define _T2AINPPS_T2AINPPS3_POSITION                        0x3
#define _T2AINPPS_T2AINPPS3_SIZE                            0x1
#define _T2AINPPS_T2AINPPS3_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS3_MASK                            0x8
#define _T2AINPPS_T2AINPPS4_POSN                            0x4
#define _T2AINPPS_T2AINPPS4_POSITION                        0x4
#define _T2AINPPS_T2AINPPS4_SIZE                            0x1
#define _T2AINPPS_T2AINPPS4_LENGTH                          0x1
#define _T2AINPPS_T2AINPPS4_MASK                            0x10

// Register: T4AINPPS
#define T4AINPPS T4AINPPS
extern volatile unsigned char           T4AINPPS            __at(0xE9D);
#ifndef _LIB_BUILD
asm("T4AINPPS equ 0E9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4AINPPS               :5;
    };
    struct {
        unsigned T4AINPPS0              :1;
        unsigned T4AINPPS1              :1;
        unsigned T4AINPPS2              :1;
        unsigned T4AINPPS3              :1;
        unsigned T4AINPPS4              :1;
    };
} T4AINPPSbits_t;
extern volatile T4AINPPSbits_t T4AINPPSbits __at(0xE9D);
// bitfield macros
#define _T4AINPPS_T4AINPPS_POSN                             0x0
#define _T4AINPPS_T4AINPPS_POSITION                         0x0
#define _T4AINPPS_T4AINPPS_SIZE                             0x5
#define _T4AINPPS_T4AINPPS_LENGTH                           0x5
#define _T4AINPPS_T4AINPPS_MASK                             0x1F
#define _T4AINPPS_T4AINPPS0_POSN                            0x0
#define _T4AINPPS_T4AINPPS0_POSITION                        0x0
#define _T4AINPPS_T4AINPPS0_SIZE                            0x1
#define _T4AINPPS_T4AINPPS0_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS0_MASK                            0x1
#define _T4AINPPS_T4AINPPS1_POSN                            0x1
#define _T4AINPPS_T4AINPPS1_POSITION                        0x1
#define _T4AINPPS_T4AINPPS1_SIZE                            0x1
#define _T4AINPPS_T4AINPPS1_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS1_MASK                            0x2
#define _T4AINPPS_T4AINPPS2_POSN                            0x2
#define _T4AINPPS_T4AINPPS2_POSITION                        0x2
#define _T4AINPPS_T4AINPPS2_SIZE                            0x1
#define _T4AINPPS_T4AINPPS2_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS2_MASK                            0x4
#define _T4AINPPS_T4AINPPS3_POSN                            0x3
#define _T4AINPPS_T4AINPPS3_POSITION                        0x3
#define _T4AINPPS_T4AINPPS3_SIZE                            0x1
#define _T4AINPPS_T4AINPPS3_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS3_MASK                            0x8
#define _T4AINPPS_T4AINPPS4_POSN                            0x4
#define _T4AINPPS_T4AINPPS4_POSITION                        0x4
#define _T4AINPPS_T4AINPPS4_SIZE                            0x1
#define _T4AINPPS_T4AINPPS4_LENGTH                          0x1
#define _T4AINPPS_T4AINPPS4_MASK                            0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0xEA1);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 0EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0xEA1);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0xEA2);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 0EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :5;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0xEA2);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0xEBB);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 0EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :5;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0xEBB);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0xEBC);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 0EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :5;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0xEBC);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0xEBD);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 0EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :5;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0xEBD);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0xEBE);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 0EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :5;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0xEBE);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10

// Register: ADCACTPPS
#define ADCACTPPS ADCACTPPS
extern volatile unsigned char           ADCACTPPS           __at(0xEC3);
#ifndef _LIB_BUILD
asm("ADCACTPPS equ 0EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCACTPPS              :5;
    };
} ADCACTPPSbits_t;
extern volatile ADCACTPPSbits_t ADCACTPPSbits __at(0xEC3);
// bitfield macros
#define _ADCACTPPS_ADCACTPPS_POSN                           0x0
#define _ADCACTPPS_ADCACTPPS_POSITION                       0x0
#define _ADCACTPPS_ADCACTPPS_SIZE                           0x5
#define _ADCACTPPS_ADCACTPPS_LENGTH                         0x5
#define _ADCACTPPS_ADCACTPPS_MASK                           0x1F

// Register: DCPHLDPPS
#define DCPHLDPPS DCPHLDPPS
extern volatile unsigned char           DCPHLDPPS           __at(0xEC4);
#ifndef _LIB_BUILD
asm("DCPHLDPPS equ 0EC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCPHLDPPS              :5;
    };
} DCPHLDPPSbits_t;
extern volatile DCPHLDPPSbits_t DCPHLDPPSbits __at(0xEC4);
// bitfield macros
#define _DCPHLDPPS_DCPHLDPPS_POSN                           0x0
#define _DCPHLDPPS_DCPHLDPPS_POSITION                       0x0
#define _DCPHLDPPS_DCPHLDPPS_SIZE                           0x5
#define _DCPHLDPPS_DCPHLDPPS_LENGTH                         0x5
#define _DCPHLDPPS_DCPHLDPPS_MASK                           0x1F

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0xEC5);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 0EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1CLKPPS             :5;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0xEC5);
// bitfield macros
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x5
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x5
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x1F

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0xEC6);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 0EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1DATPPS             :5;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0xEC6);
// bitfield macros
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x5
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x5
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x1F

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0xEC7);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 0EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1SSPPS              :5;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0xEC7);
// bitfield macros
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x5
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x5
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x1F

// Register: RXDTPPS
#define RXDTPPS RXDTPPS
extern volatile unsigned char           RXDTPPS             __at(0xECB);
#ifndef _LIB_BUILD
asm("RXDTPPS equ 0ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXDTPPS                :5;
    };
} RXDTPPSbits_t;
extern volatile RXDTPPSbits_t RXDTPPSbits __at(0xECB);
// bitfield macros
#define _RXDTPPS_RXDTPPS_POSN                               0x0
#define _RXDTPPS_RXDTPPS_POSITION                           0x0
#define _RXDTPPS_RXDTPPS_SIZE                               0x5
#define _RXDTPPS_RXDTPPS_LENGTH                             0x5
#define _RXDTPPS_RXDTPPS_MASK                               0x1F

// Register: CKTXPPS
#define CKTXPPS CKTXPPS
extern volatile unsigned char           CKTXPPS             __at(0xECC);
#ifndef _LIB_BUILD
asm("CKTXPPS equ 0ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKTXPPS                :5;
    };
} CKTXPPSbits_t;
extern volatile CKTXPPSbits_t CKTXPPSbits __at(0xECC);
// bitfield macros
#define _CKTXPPS_CKTXPPS_POSN                               0x0
#define _CKTXPPS_CKTXPPS_POSITION                           0x0
#define _CKTXPPS_CKTXPPS_SIZE                               0x5
#define _CKTXPPS_CKTXPPS_LENGTH                             0x5
#define _CKTXPPS_CKTXPPS_MASK                               0x1F

// Register: TST_PPSIN1
#define TST_PPSIN1 TST_PPSIN1
extern volatile unsigned char           TST_PPSIN1          __at(0xED0);
#ifndef _LIB_BUILD
asm("TST_PPSIN1 equ 0ED0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT                    :1;
        unsigned T0CKI                  :1;
        unsigned T1CKI                  :1;
        unsigned T1G                    :1;
        unsigned T3CKI                  :1;
        unsigned T3G                    :1;
    };
} TST_PPSIN1bits_t;
extern volatile TST_PPSIN1bits_t TST_PPSIN1bits __at(0xED0);
// bitfield macros
#define _TST_PPSIN1_INT_POSN                                0x0
#define _TST_PPSIN1_INT_POSITION                            0x0
#define _TST_PPSIN1_INT_SIZE                                0x1
#define _TST_PPSIN1_INT_LENGTH                              0x1
#define _TST_PPSIN1_INT_MASK                                0x1
#define _TST_PPSIN1_T0CKI_POSN                              0x1
#define _TST_PPSIN1_T0CKI_POSITION                          0x1
#define _TST_PPSIN1_T0CKI_SIZE                              0x1
#define _TST_PPSIN1_T0CKI_LENGTH                            0x1
#define _TST_PPSIN1_T0CKI_MASK                              0x2
#define _TST_PPSIN1_T1CKI_POSN                              0x2
#define _TST_PPSIN1_T1CKI_POSITION                          0x2
#define _TST_PPSIN1_T1CKI_SIZE                              0x1
#define _TST_PPSIN1_T1CKI_LENGTH                            0x1
#define _TST_PPSIN1_T1CKI_MASK                              0x4
#define _TST_PPSIN1_T1G_POSN                                0x3
#define _TST_PPSIN1_T1G_POSITION                            0x3
#define _TST_PPSIN1_T1G_SIZE                                0x1
#define _TST_PPSIN1_T1G_LENGTH                              0x1
#define _TST_PPSIN1_T1G_MASK                                0x8
#define _TST_PPSIN1_T3CKI_POSN                              0x4
#define _TST_PPSIN1_T3CKI_POSITION                          0x4
#define _TST_PPSIN1_T3CKI_SIZE                              0x1
#define _TST_PPSIN1_T3CKI_LENGTH                            0x1
#define _TST_PPSIN1_T3CKI_MASK                              0x10
#define _TST_PPSIN1_T3G_POSN                                0x5
#define _TST_PPSIN1_T3G_POSITION                            0x5
#define _TST_PPSIN1_T3G_SIZE                                0x1
#define _TST_PPSIN1_T3G_LENGTH                              0x1
#define _TST_PPSIN1_T3G_MASK                                0x20

// Register: TST_PPSIN2
#define TST_PPSIN2 TST_PPSIN2
extern volatile unsigned char           TST_PPSIN2          __at(0xED1);
#ifndef _LIB_BUILD
asm("TST_PPSIN2 equ 0ED1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2IN                   :1;
        unsigned T4IN                   :1;
        unsigned                        :2;
        unsigned CCP1                   :1;
        unsigned CCP2                   :1;
    };
} TST_PPSIN2bits_t;
extern volatile TST_PPSIN2bits_t TST_PPSIN2bits __at(0xED1);
// bitfield macros
#define _TST_PPSIN2_T2IN_POSN                               0x0
#define _TST_PPSIN2_T2IN_POSITION                           0x0
#define _TST_PPSIN2_T2IN_SIZE                               0x1
#define _TST_PPSIN2_T2IN_LENGTH                             0x1
#define _TST_PPSIN2_T2IN_MASK                               0x1
#define _TST_PPSIN2_T4IN_POSN                               0x1
#define _TST_PPSIN2_T4IN_POSITION                           0x1
#define _TST_PPSIN2_T4IN_SIZE                               0x1
#define _TST_PPSIN2_T4IN_LENGTH                             0x1
#define _TST_PPSIN2_T4IN_MASK                               0x2
#define _TST_PPSIN2_CCP1_POSN                               0x4
#define _TST_PPSIN2_CCP1_POSITION                           0x4
#define _TST_PPSIN2_CCP1_SIZE                               0x1
#define _TST_PPSIN2_CCP1_LENGTH                             0x1
#define _TST_PPSIN2_CCP1_MASK                               0x10
#define _TST_PPSIN2_CCP2_POSN                               0x5
#define _TST_PPSIN2_CCP2_POSITION                           0x5
#define _TST_PPSIN2_CCP2_SIZE                               0x1
#define _TST_PPSIN2_CCP2_LENGTH                             0x1
#define _TST_PPSIN2_CCP2_MASK                               0x20

// Register: TST_PPSIN3
#define TST_PPSIN3 TST_PPSIN3
extern volatile unsigned char           TST_PPSIN3          __at(0xED2);
#ifndef _LIB_BUILD
asm("TST_PPSIN3 equ 0ED2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0                 :1;
        unsigned CLCIN1                 :1;
        unsigned CLCIN2                 :1;
        unsigned CLCIN3                 :1;
        unsigned                        :2;
        unsigned ADCACT                 :1;
        unsigned DCPHLD                 :1;
    };
} TST_PPSIN3bits_t;
extern volatile TST_PPSIN3bits_t TST_PPSIN3bits __at(0xED2);
// bitfield macros
#define _TST_PPSIN3_CLCIN0_POSN                             0x0
#define _TST_PPSIN3_CLCIN0_POSITION                         0x0
#define _TST_PPSIN3_CLCIN0_SIZE                             0x1
#define _TST_PPSIN3_CLCIN0_LENGTH                           0x1
#define _TST_PPSIN3_CLCIN0_MASK                             0x1
#define _TST_PPSIN3_CLCIN1_POSN                             0x1
#define _TST_PPSIN3_CLCIN1_POSITION                         0x1
#define _TST_PPSIN3_CLCIN1_SIZE                             0x1
#define _TST_PPSIN3_CLCIN1_LENGTH                           0x1
#define _TST_PPSIN3_CLCIN1_MASK                             0x2
#define _TST_PPSIN3_CLCIN2_POSN                             0x2
#define _TST_PPSIN3_CLCIN2_POSITION                         0x2
#define _TST_PPSIN3_CLCIN2_SIZE                             0x1
#define _TST_PPSIN3_CLCIN2_LENGTH                           0x1
#define _TST_PPSIN3_CLCIN2_MASK                             0x4
#define _TST_PPSIN3_CLCIN3_POSN                             0x3
#define _TST_PPSIN3_CLCIN3_POSITION                         0x3
#define _TST_PPSIN3_CLCIN3_SIZE                             0x1
#define _TST_PPSIN3_CLCIN3_LENGTH                           0x1
#define _TST_PPSIN3_CLCIN3_MASK                             0x8
#define _TST_PPSIN3_ADCACT_POSN                             0x6
#define _TST_PPSIN3_ADCACT_POSITION                         0x6
#define _TST_PPSIN3_ADCACT_SIZE                             0x1
#define _TST_PPSIN3_ADCACT_LENGTH                           0x1
#define _TST_PPSIN3_ADCACT_MASK                             0x40
#define _TST_PPSIN3_DCPHLD_POSN                             0x7
#define _TST_PPSIN3_DCPHLD_POSITION                         0x7
#define _TST_PPSIN3_DCPHLD_SIZE                             0x1
#define _TST_PPSIN3_DCPHLD_LENGTH                           0x1
#define _TST_PPSIN3_DCPHLD_MASK                             0x80

// Register: TST_PPSIN4
#define TST_PPSIN4 TST_PPSIN4
extern volatile unsigned char           TST_PPSIN4          __at(0xED3);
#ifndef _LIB_BUILD
asm("TST_PPSIN4 equ 0ED3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXDT                   :1;
        unsigned TXCK                   :1;
        unsigned                        :3;
        unsigned SSP1CLK                :1;
        unsigned SSP1DAT                :1;
        unsigned SSP1SS                 :1;
    };
} TST_PPSIN4bits_t;
extern volatile TST_PPSIN4bits_t TST_PPSIN4bits __at(0xED3);
// bitfield macros
#define _TST_PPSIN4_RXDT_POSN                               0x0
#define _TST_PPSIN4_RXDT_POSITION                           0x0
#define _TST_PPSIN4_RXDT_SIZE                               0x1
#define _TST_PPSIN4_RXDT_LENGTH                             0x1
#define _TST_PPSIN4_RXDT_MASK                               0x1
#define _TST_PPSIN4_TXCK_POSN                               0x1
#define _TST_PPSIN4_TXCK_POSITION                           0x1
#define _TST_PPSIN4_TXCK_SIZE                               0x1
#define _TST_PPSIN4_TXCK_LENGTH                             0x1
#define _TST_PPSIN4_TXCK_MASK                               0x2
#define _TST_PPSIN4_SSP1CLK_POSN                            0x5
#define _TST_PPSIN4_SSP1CLK_POSITION                        0x5
#define _TST_PPSIN4_SSP1CLK_SIZE                            0x1
#define _TST_PPSIN4_SSP1CLK_LENGTH                          0x1
#define _TST_PPSIN4_SSP1CLK_MASK                            0x20
#define _TST_PPSIN4_SSP1DAT_POSN                            0x6
#define _TST_PPSIN4_SSP1DAT_POSITION                        0x6
#define _TST_PPSIN4_SSP1DAT_SIZE                            0x1
#define _TST_PPSIN4_SSP1DAT_LENGTH                          0x1
#define _TST_PPSIN4_SSP1DAT_MASK                            0x40
#define _TST_PPSIN4_SSP1SS_POSN                             0x7
#define _TST_PPSIN4_SSP1SS_POSITION                         0x7
#define _TST_PPSIN4_SSP1SS_SIZE                             0x1
#define _TST_PPSIN4_SSP1SS_LENGTH                           0x1
#define _TST_PPSIN4_SSP1SS_MASK                             0x80

// Register: TST_PPSDOV
#define TST_PPSDOV TST_PPSDOV
extern volatile unsigned char           TST_PPSDOV          __at(0xED8);
#ifndef _LIB_BUILD
asm("TST_PPSDOV equ 0ED8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSDOV0                :1;
        unsigned PPSDOV1                :1;
        unsigned PPSDOV2                :1;
        unsigned PPSDOV3                :1;
    };
} TST_PPSDOVbits_t;
extern volatile TST_PPSDOVbits_t TST_PPSDOVbits __at(0xED8);
// bitfield macros
#define _TST_PPSDOV_PPSDOV0_POSN                            0x0
#define _TST_PPSDOV_PPSDOV0_POSITION                        0x0
#define _TST_PPSDOV_PPSDOV0_SIZE                            0x1
#define _TST_PPSDOV_PPSDOV0_LENGTH                          0x1
#define _TST_PPSDOV_PPSDOV0_MASK                            0x1
#define _TST_PPSDOV_PPSDOV1_POSN                            0x1
#define _TST_PPSDOV_PPSDOV1_POSITION                        0x1
#define _TST_PPSDOV_PPSDOV1_SIZE                            0x1
#define _TST_PPSDOV_PPSDOV1_LENGTH                          0x1
#define _TST_PPSDOV_PPSDOV1_MASK                            0x2
#define _TST_PPSDOV_PPSDOV2_POSN                            0x2
#define _TST_PPSDOV_PPSDOV2_POSITION                        0x2
#define _TST_PPSDOV_PPSDOV2_SIZE                            0x1
#define _TST_PPSDOV_PPSDOV2_LENGTH                          0x1
#define _TST_PPSDOV_PPSDOV2_MASK                            0x4
#define _TST_PPSDOV_PPSDOV3_POSN                            0x3
#define _TST_PPSDOV_PPSDOV3_POSITION                        0x3
#define _TST_PPSDOV_PPSDOV3_SIZE                            0x1
#define _TST_PPSDOV_PPSDOV3_LENGTH                          0x1
#define _TST_PPSDOV_PPSDOV3_MASK                            0x8

// Register: TST_PPSEOV
#define TST_PPSEOV TST_PPSEOV
extern volatile unsigned char           TST_PPSEOV          __at(0xED9);
#ifndef _LIB_BUILD
asm("TST_PPSEOV equ 0ED9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSEOV0                :1;
        unsigned PPSEOV1                :1;
        unsigned PPSEOV2                :1;
        unsigned PPSEOV3                :1;
    };
} TST_PPSEOVbits_t;
extern volatile TST_PPSEOVbits_t TST_PPSEOVbits __at(0xED9);
// bitfield macros
#define _TST_PPSEOV_PPSEOV0_POSN                            0x0
#define _TST_PPSEOV_PPSEOV0_POSITION                        0x0
#define _TST_PPSEOV_PPSEOV0_SIZE                            0x1
#define _TST_PPSEOV_PPSEOV0_LENGTH                          0x1
#define _TST_PPSEOV_PPSEOV0_MASK                            0x1
#define _TST_PPSEOV_PPSEOV1_POSN                            0x1
#define _TST_PPSEOV_PPSEOV1_POSITION                        0x1
#define _TST_PPSEOV_PPSEOV1_SIZE                            0x1
#define _TST_PPSEOV_PPSEOV1_LENGTH                          0x1
#define _TST_PPSEOV_PPSEOV1_MASK                            0x2
#define _TST_PPSEOV_PPSEOV2_POSN                            0x2
#define _TST_PPSEOV_PPSEOV2_POSITION                        0x2
#define _TST_PPSEOV_PPSEOV2_SIZE                            0x1
#define _TST_PPSEOV_PPSEOV2_LENGTH                          0x1
#define _TST_PPSEOV_PPSEOV2_MASK                            0x4
#define _TST_PPSEOV_PPSEOV3_POSN                            0x3
#define _TST_PPSEOV_PPSEOV3_POSITION                        0x3
#define _TST_PPSEOV_PPSEOV3_SIZE                            0x1
#define _TST_PPSEOV_PPSEOV3_LENGTH                          0x1
#define _TST_PPSEOV_PPSEOV3_MASK                            0x8

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0xF10);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
        unsigned RA0PPS5                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0xF10);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10
#define _RA0PPS_RA0PPS5_POSN                                0x5
#define _RA0PPS_RA0PPS5_POSITION                            0x5
#define _RA0PPS_RA0PPS5_SIZE                                0x1
#define _RA0PPS_RA0PPS5_LENGTH                              0x1
#define _RA0PPS_RA0PPS5_MASK                                0x20

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0xF11);
#ifndef _LIB_BUILD
asm("RA1PPS equ 0F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
        unsigned RA1PPS5                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0xF11);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10
#define _RA1PPS_RA1PPS5_POSN                                0x5
#define _RA1PPS_RA1PPS5_POSITION                            0x5
#define _RA1PPS_RA1PPS5_SIZE                                0x1
#define _RA1PPS_RA1PPS5_LENGTH                              0x1
#define _RA1PPS_RA1PPS5_MASK                                0x20

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0xF12);
#ifndef _LIB_BUILD
asm("RA2PPS equ 0F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
        unsigned RA2PPS5                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0xF12);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10
#define _RA2PPS_RA2PPS5_POSN                                0x5
#define _RA2PPS_RA2PPS5_POSITION                            0x5
#define _RA2PPS_RA2PPS5_SIZE                                0x1
#define _RA2PPS_RA2PPS5_LENGTH                              0x1
#define _RA2PPS_RA2PPS5_MASK                                0x20

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0xF13);
#ifndef _LIB_BUILD
asm("RA3PPS equ 0F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
        unsigned RA3PPS5                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0xF13);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10
#define _RA3PPS_RA3PPS5_POSN                                0x5
#define _RA3PPS_RA3PPS5_POSITION                            0x5
#define _RA3PPS_RA3PPS5_SIZE                                0x1
#define _RA3PPS_RA3PPS5_LENGTH                              0x1
#define _RA3PPS_RA3PPS5_MASK                                0x20

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0xF18);
#ifndef _LIB_BUILD
asm("RB0PPS equ 0F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
        unsigned RB0PPS5                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0xF18);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10
#define _RB0PPS_RB0PPS5_POSN                                0x5
#define _RB0PPS_RB0PPS5_POSITION                            0x5
#define _RB0PPS_RB0PPS5_SIZE                                0x1
#define _RB0PPS_RB0PPS5_LENGTH                              0x1
#define _RB0PPS_RB0PPS5_MASK                                0x20

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0xF19);
#ifndef _LIB_BUILD
asm("RB1PPS equ 0F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
        unsigned RB1PPS5                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0xF19);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10
#define _RB1PPS_RB1PPS5_POSN                                0x5
#define _RB1PPS_RB1PPS5_POSITION                            0x5
#define _RB1PPS_RB1PPS5_SIZE                                0x1
#define _RB1PPS_RB1PPS5_LENGTH                              0x1
#define _RB1PPS_RB1PPS5_MASK                                0x20

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0xF1A);
#ifndef _LIB_BUILD
asm("RB2PPS equ 0F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
        unsigned RB2PPS5                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0xF1A);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10
#define _RB2PPS_RB2PPS5_POSN                                0x5
#define _RB2PPS_RB2PPS5_POSITION                            0x5
#define _RB2PPS_RB2PPS5_SIZE                                0x1
#define _RB2PPS_RB2PPS5_LENGTH                              0x1
#define _RB2PPS_RB2PPS5_MASK                                0x20

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0xF1B);
#ifndef _LIB_BUILD
asm("RB3PPS equ 0F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
        unsigned RB3PPS5                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0xF1B);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10
#define _RB3PPS_RB3PPS5_POSN                                0x5
#define _RB3PPS_RB3PPS5_POSITION                            0x5
#define _RB3PPS_RB3PPS5_SIZE                                0x1
#define _RB3PPS_RB3PPS5_LENGTH                              0x1
#define _RB3PPS_RB3PPS5_MASK                                0x20

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0xF1C);
#ifndef _LIB_BUILD
asm("RB4PPS equ 0F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
        unsigned RB4PPS5                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0xF1C);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10
#define _RB4PPS_RB4PPS5_POSN                                0x5
#define _RB4PPS_RB4PPS5_POSITION                            0x5
#define _RB4PPS_RB4PPS5_SIZE                                0x1
#define _RB4PPS_RB4PPS5_LENGTH                              0x1
#define _RB4PPS_RB4PPS5_MASK                                0x20

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0xF1D);
#ifndef _LIB_BUILD
asm("RB5PPS equ 0F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
        unsigned RB5PPS5                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0xF1D);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10
#define _RB5PPS_RB5PPS5_POSN                                0x5
#define _RB5PPS_RB5PPS5_POSITION                            0x5
#define _RB5PPS_RB5PPS5_SIZE                                0x1
#define _RB5PPS_RB5PPS5_LENGTH                              0x1
#define _RB5PPS_RB5PPS5_MASK                                0x20

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0xF1E);
#ifndef _LIB_BUILD
asm("RB6PPS equ 0F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
        unsigned RB6PPS5                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0xF1E);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10
#define _RB6PPS_RB6PPS5_POSN                                0x5
#define _RB6PPS_RB6PPS5_POSITION                            0x5
#define _RB6PPS_RB6PPS5_SIZE                                0x1
#define _RB6PPS_RB6PPS5_LENGTH                              0x1
#define _RB6PPS_RB6PPS5_MASK                                0x20

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0xF1F);
#ifndef _LIB_BUILD
asm("RB7PPS equ 0F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
        unsigned RB7PPS5                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0xF1F);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10
#define _RB7PPS_RB7PPS5_POSN                                0x5
#define _RB7PPS_RB7PPS5_POSITION                            0x5
#define _RB7PPS_RB7PPS5_SIZE                                0x1
#define _RB7PPS_RB7PPS5_LENGTH                              0x1
#define _RB7PPS_RB7PPS5_MASK                                0x20

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0xF24);
#ifndef _LIB_BUILD
asm("RC4PPS equ 0F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
        unsigned RC4PPS5                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0xF24);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10
#define _RC4PPS_RC4PPS5_POSN                                0x5
#define _RC4PPS_RC4PPS5_POSITION                            0x5
#define _RC4PPS_RC4PPS5_SIZE                                0x1
#define _RC4PPS_RC4PPS5_LENGTH                              0x1
#define _RC4PPS_RC4PPS5_MASK                                0x20

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0xF25);
#ifndef _LIB_BUILD
asm("RC5PPS equ 0F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
        unsigned RC5PPS5                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0xF25);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10
#define _RC5PPS_RC5PPS5_POSN                                0x5
#define _RC5PPS_RC5PPS5_POSITION                            0x5
#define _RC5PPS_RC5PPS5_SIZE                                0x1
#define _RC5PPS_RC5PPS5_LENGTH                              0x1
#define _RC5PPS_RC5PPS5_MASK                                0x20

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0xF26);
#ifndef _LIB_BUILD
asm("RC6PPS equ 0F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
        unsigned RC6PPS5                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0xF26);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10
#define _RC6PPS_RC6PPS5_POSN                                0x5
#define _RC6PPS_RC6PPS5_POSITION                            0x5
#define _RC6PPS_RC6PPS5_SIZE                                0x1
#define _RC6PPS_RC6PPS5_LENGTH                              0x1
#define _RC6PPS_RC6PPS5_MASK                                0x20

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0xF38);
#ifndef _LIB_BUILD
asm("ANSELA equ 0F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned ANSA3                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0xF38);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA3_POSN                                  0x3
#define _ANSELA_ANSA3_POSITION                              0x3
#define _ANSELA_ANSA3_SIZE                                  0x1
#define _ANSELA_ANSA3_LENGTH                                0x1
#define _ANSELA_ANSA3_MASK                                  0x8

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0xF39);
#ifndef _LIB_BUILD
asm("WPUA equ 0F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0xF39);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0xF3A);
#ifndef _LIB_BUILD
asm("ODCONA equ 0F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0xF3A);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0xF3B);
#ifndef _LIB_BUILD
asm("SLRCONA equ 0F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0xF3B);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0xF3C);
#ifndef _LIB_BUILD
asm("INLVLA equ 0F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0xF3C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0xF3D);
#ifndef _LIB_BUILD
asm("IOCAP equ 0F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0xF3D);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0xF3E);
#ifndef _LIB_BUILD
asm("IOCAN equ 0F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0xF3E);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0xF3F);
#ifndef _LIB_BUILD
asm("IOCAF equ 0F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0xF3F);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8

// Register: CCDNA
#define CCDNA CCDNA
extern volatile unsigned char           CCDNA               __at(0xF40);
#ifndef _LIB_BUILD
asm("CCDNA equ 0F40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CCDNA1                 :1;
        unsigned CCDNA2                 :1;
        unsigned CCDNA3                 :1;
    };
} CCDNAbits_t;
extern volatile CCDNAbits_t CCDNAbits __at(0xF40);
// bitfield macros
#define _CCDNA_CCDNA1_POSN                                  0x1
#define _CCDNA_CCDNA1_POSITION                              0x1
#define _CCDNA_CCDNA1_SIZE                                  0x1
#define _CCDNA_CCDNA1_LENGTH                                0x1
#define _CCDNA_CCDNA1_MASK                                  0x2
#define _CCDNA_CCDNA2_POSN                                  0x2
#define _CCDNA_CCDNA2_POSITION                              0x2
#define _CCDNA_CCDNA2_SIZE                                  0x1
#define _CCDNA_CCDNA2_LENGTH                                0x1
#define _CCDNA_CCDNA2_MASK                                  0x4
#define _CCDNA_CCDNA3_POSN                                  0x3
#define _CCDNA_CCDNA3_POSITION                              0x3
#define _CCDNA_CCDNA3_SIZE                                  0x1
#define _CCDNA_CCDNA3_LENGTH                                0x1
#define _CCDNA_CCDNA3_MASK                                  0x8

// Register: CCDPA
#define CCDPA CCDPA
extern volatile unsigned char           CCDPA               __at(0xF41);
#ifndef _LIB_BUILD
asm("CCDPA equ 0F41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CCDPA1                 :1;
        unsigned CCDPA2                 :1;
        unsigned CCDPA3                 :1;
    };
} CCDPAbits_t;
extern volatile CCDPAbits_t CCDPAbits __at(0xF41);
// bitfield macros
#define _CCDPA_CCDPA1_POSN                                  0x1
#define _CCDPA_CCDPA1_POSITION                              0x1
#define _CCDPA_CCDPA1_SIZE                                  0x1
#define _CCDPA_CCDPA1_LENGTH                                0x1
#define _CCDPA_CCDPA1_MASK                                  0x2
#define _CCDPA_CCDPA2_POSN                                  0x2
#define _CCDPA_CCDPA2_POSITION                              0x2
#define _CCDPA_CCDPA2_SIZE                                  0x1
#define _CCDPA_CCDPA2_LENGTH                                0x1
#define _CCDPA_CCDPA2_MASK                                  0x4
#define _CCDPA_CCDPA3_POSN                                  0x3
#define _CCDPA_CCDPA3_POSITION                              0x3
#define _CCDPA_CCDPA3_SIZE                                  0x1
#define _CCDPA_CCDPA3_LENGTH                                0x1
#define _CCDPA_CCDPA3_MASK                                  0x8

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0xF43);
#ifndef _LIB_BUILD
asm("ANSELB equ 0F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSB0                  :1;
        unsigned ANSB1                  :1;
        unsigned ANSB2                  :1;
        unsigned ANSB3                  :1;
        unsigned ANSB4                  :1;
        unsigned ANSB5                  :1;
        unsigned ANSB6                  :1;
        unsigned ANSB7                  :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0xF43);
// bitfield macros
#define _ANSELB_ANSB0_POSN                                  0x0
#define _ANSELB_ANSB0_POSITION                              0x0
#define _ANSELB_ANSB0_SIZE                                  0x1
#define _ANSELB_ANSB0_LENGTH                                0x1
#define _ANSELB_ANSB0_MASK                                  0x1
#define _ANSELB_ANSB1_POSN                                  0x1
#define _ANSELB_ANSB1_POSITION                              0x1
#define _ANSELB_ANSB1_SIZE                                  0x1
#define _ANSELB_ANSB1_LENGTH                                0x1
#define _ANSELB_ANSB1_MASK                                  0x2
#define _ANSELB_ANSB2_POSN                                  0x2
#define _ANSELB_ANSB2_POSITION                              0x2
#define _ANSELB_ANSB2_SIZE                                  0x1
#define _ANSELB_ANSB2_LENGTH                                0x1
#define _ANSELB_ANSB2_MASK                                  0x4
#define _ANSELB_ANSB3_POSN                                  0x3
#define _ANSELB_ANSB3_POSITION                              0x3
#define _ANSELB_ANSB3_SIZE                                  0x1
#define _ANSELB_ANSB3_LENGTH                                0x1
#define _ANSELB_ANSB3_MASK                                  0x8
#define _ANSELB_ANSB4_POSN                                  0x4
#define _ANSELB_ANSB4_POSITION                              0x4
#define _ANSELB_ANSB4_SIZE                                  0x1
#define _ANSELB_ANSB4_LENGTH                                0x1
#define _ANSELB_ANSB4_MASK                                  0x10
#define _ANSELB_ANSB5_POSN                                  0x5
#define _ANSELB_ANSB5_POSITION                              0x5
#define _ANSELB_ANSB5_SIZE                                  0x1
#define _ANSELB_ANSB5_LENGTH                                0x1
#define _ANSELB_ANSB5_MASK                                  0x20
#define _ANSELB_ANSB6_POSN                                  0x6
#define _ANSELB_ANSB6_POSITION                              0x6
#define _ANSELB_ANSB6_SIZE                                  0x1
#define _ANSELB_ANSB6_LENGTH                                0x1
#define _ANSELB_ANSB6_MASK                                  0x40
#define _ANSELB_ANSB7_POSN                                  0x7
#define _ANSELB_ANSB7_POSITION                              0x7
#define _ANSELB_ANSB7_SIZE                                  0x1
#define _ANSELB_ANSB7_LENGTH                                0x1
#define _ANSELB_ANSB7_MASK                                  0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0xF44);
#ifndef _LIB_BUILD
asm("WPUB equ 0F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0xF44);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0xF45);
#ifndef _LIB_BUILD
asm("ODCONB equ 0F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0xF45);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0xF46);
#ifndef _LIB_BUILD
asm("SLRCONB equ 0F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0xF46);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0xF47);
#ifndef _LIB_BUILD
asm("INLVLB equ 0F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0xF47);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0xF48);
#ifndef _LIB_BUILD
asm("IOCBP equ 0F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0xF48);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0xF49);
#ifndef _LIB_BUILD
asm("IOCBN equ 0F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0xF49);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0xF4A);
#ifndef _LIB_BUILD
asm("IOCBF equ 0F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0xF4A);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0xF4F);
#ifndef _LIB_BUILD
asm("WPUC equ 0F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :7;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0xF4F);
// bitfield macros
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0xF52);
#ifndef _LIB_BUILD
asm("INLVLC equ 0F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0xF52);
// bitfield macros
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0xF53);
#ifndef _LIB_BUILD
asm("IOCCP equ 0F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0xF53);
// bitfield macros
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0xF54);
#ifndef _LIB_BUILD
asm("IOCCN equ 0F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0xF54);
// bitfield macros
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0xF55);
#ifndef _LIB_BUILD
asm("IOCCF equ 0F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0xF55);
// bitfield macros
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: ICDIO
#define ICDIO ICDIO
extern volatile unsigned char           ICDIO               __at(0xF8C);
#ifndef _LIB_BUILD
asm("ICDIO equ 0F8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ICD_SLRC               :1;
        unsigned                        :1;
        unsigned TRIS_ICDCLK            :1;
        unsigned TRIS_ICDDAT            :1;
        unsigned LAT_ICDCLK             :1;
        unsigned LAT_ICDDAT             :1;
        unsigned PORT_ICDCLK            :1;
        unsigned PORT_ICDDAT            :1;
    };
} ICDIObits_t;
extern volatile ICDIObits_t ICDIObits __at(0xF8C);
// bitfield macros
#define _ICDIO_ICD_SLRC_POSN                                0x0
#define _ICDIO_ICD_SLRC_POSITION                            0x0
#define _ICDIO_ICD_SLRC_SIZE                                0x1
#define _ICDIO_ICD_SLRC_LENGTH                              0x1
#define _ICDIO_ICD_SLRC_MASK                                0x1
#define _ICDIO_TRIS_ICDCLK_POSN                             0x2
#define _ICDIO_TRIS_ICDCLK_POSITION                         0x2
#define _ICDIO_TRIS_ICDCLK_SIZE                             0x1
#define _ICDIO_TRIS_ICDCLK_LENGTH                           0x1
#define _ICDIO_TRIS_ICDCLK_MASK                             0x4
#define _ICDIO_TRIS_ICDDAT_POSN                             0x3
#define _ICDIO_TRIS_ICDDAT_POSITION                         0x3
#define _ICDIO_TRIS_ICDDAT_SIZE                             0x1
#define _ICDIO_TRIS_ICDDAT_LENGTH                           0x1
#define _ICDIO_TRIS_ICDDAT_MASK                             0x8
#define _ICDIO_LAT_ICDCLK_POSN                              0x4
#define _ICDIO_LAT_ICDCLK_POSITION                          0x4
#define _ICDIO_LAT_ICDCLK_SIZE                              0x1
#define _ICDIO_LAT_ICDCLK_LENGTH                            0x1
#define _ICDIO_LAT_ICDCLK_MASK                              0x10
#define _ICDIO_LAT_ICDDAT_POSN                              0x5
#define _ICDIO_LAT_ICDDAT_POSITION                          0x5
#define _ICDIO_LAT_ICDDAT_SIZE                              0x1
#define _ICDIO_LAT_ICDDAT_LENGTH                            0x1
#define _ICDIO_LAT_ICDDAT_MASK                              0x20
#define _ICDIO_PORT_ICDCLK_POSN                             0x6
#define _ICDIO_PORT_ICDCLK_POSITION                         0x6
#define _ICDIO_PORT_ICDCLK_SIZE                             0x1
#define _ICDIO_PORT_ICDCLK_LENGTH                           0x1
#define _ICDIO_PORT_ICDCLK_MASK                             0x40
#define _ICDIO_PORT_ICDDAT_POSN                             0x7
#define _ICDIO_PORT_ICDDAT_POSITION                         0x7
#define _ICDIO_PORT_ICDDAT_SIZE                             0x1
#define _ICDIO_PORT_ICDDAT_LENGTH                           0x1
#define _ICDIO_PORT_ICDDAT_MASK                             0x80

// Register: ICDCON0
#define ICDCON0 ICDCON0
extern volatile unsigned char           ICDCON0             __at(0xF8D);
#ifndef _LIB_BUILD
asm("ICDCON0 equ 0F8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSTVEC                 :1;
        unsigned                        :2;
        unsigned DBGINEX                :1;
        unsigned                        :1;
        unsigned SSTEP                  :1;
        unsigned FREEZE                 :1;
        unsigned INBUG                  :1;
    };
} ICDCON0bits_t;
extern volatile ICDCON0bits_t ICDCON0bits __at(0xF8D);
// bitfield macros
#define _ICDCON0_RSTVEC_POSN                                0x0
#define _ICDCON0_RSTVEC_POSITION                            0x0
#define _ICDCON0_RSTVEC_SIZE                                0x1
#define _ICDCON0_RSTVEC_LENGTH                              0x1
#define _ICDCON0_RSTVEC_MASK                                0x1
#define _ICDCON0_DBGINEX_POSN                               0x3
#define _ICDCON0_DBGINEX_POSITION                           0x3
#define _ICDCON0_DBGINEX_SIZE                               0x1
#define _ICDCON0_DBGINEX_LENGTH                             0x1
#define _ICDCON0_DBGINEX_MASK                               0x8
#define _ICDCON0_SSTEP_POSN                                 0x5
#define _ICDCON0_SSTEP_POSITION                             0x5
#define _ICDCON0_SSTEP_SIZE                                 0x1
#define _ICDCON0_SSTEP_LENGTH                               0x1
#define _ICDCON0_SSTEP_MASK                                 0x20
#define _ICDCON0_FREEZE_POSN                                0x6
#define _ICDCON0_FREEZE_POSITION                            0x6
#define _ICDCON0_FREEZE_SIZE                                0x1
#define _ICDCON0_FREEZE_LENGTH                              0x1
#define _ICDCON0_FREEZE_MASK                                0x40
#define _ICDCON0_INBUG_POSN                                 0x7
#define _ICDCON0_INBUG_POSITION                             0x7
#define _ICDCON0_INBUG_SIZE                                 0x1
#define _ICDCON0_INBUG_LENGTH                               0x1
#define _ICDCON0_INBUG_MASK                                 0x80

// Register: ICDDC
#define ICDDC ICDDC
extern volatile unsigned char           ICDDC               __at(0xF8E);
#ifndef _LIB_BUILD
asm("ICDDC equ 0F8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BP1STAT                :1;
        unsigned                        :2;
        unsigned HLTSTAT                :1;
        unsigned XTHI                   :1;
        unsigned DTSTAT                 :1;
        unsigned XTEN                   :1;
        unsigned DCEN                   :1;
    };
} ICDDCbits_t;
extern volatile ICDDCbits_t ICDDCbits __at(0xF8E);
// bitfield macros
#define _ICDDC_BP1STAT_POSN                                 0x0
#define _ICDDC_BP1STAT_POSITION                             0x0
#define _ICDDC_BP1STAT_SIZE                                 0x1
#define _ICDDC_BP1STAT_LENGTH                               0x1
#define _ICDDC_BP1STAT_MASK                                 0x1
#define _ICDDC_HLTSTAT_POSN                                 0x3
#define _ICDDC_HLTSTAT_POSITION                             0x3
#define _ICDDC_HLTSTAT_SIZE                                 0x1
#define _ICDDC_HLTSTAT_LENGTH                               0x1
#define _ICDDC_HLTSTAT_MASK                                 0x8
#define _ICDDC_XTHI_POSN                                    0x4
#define _ICDDC_XTHI_POSITION                                0x4
#define _ICDDC_XTHI_SIZE                                    0x1
#define _ICDDC_XTHI_LENGTH                                  0x1
#define _ICDDC_XTHI_MASK                                    0x10
#define _ICDDC_DTSTAT_POSN                                  0x5
#define _ICDDC_DTSTAT_POSITION                              0x5
#define _ICDDC_DTSTAT_SIZE                                  0x1
#define _ICDDC_DTSTAT_LENGTH                                0x1
#define _ICDDC_DTSTAT_MASK                                  0x20
#define _ICDDC_XTEN_POSN                                    0x6
#define _ICDDC_XTEN_POSITION                                0x6
#define _ICDDC_XTEN_SIZE                                    0x1
#define _ICDDC_XTEN_LENGTH                                  0x1
#define _ICDDC_XTEN_MASK                                    0x40
#define _ICDDC_DCEN_POSN                                    0x7
#define _ICDDC_DCEN_POSITION                                0x7
#define _ICDDC_DCEN_SIZE                                    0x1
#define _ICDDC_DCEN_LENGTH                                  0x1
#define _ICDDC_DCEN_MASK                                    0x80

// Register: ICDSTAT
#define ICDSTAT ICDSTAT
extern volatile unsigned char           ICDSTAT             __at(0xF91);
#ifndef _LIB_BUILD
asm("ICDSTAT equ 0F91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned USRHLTF                :1;
        unsigned                        :4;
        unsigned TRP0HLTF               :1;
        unsigned TRP1HLTF               :1;
    };
} ICDSTATbits_t;
extern volatile ICDSTATbits_t ICDSTATbits __at(0xF91);
// bitfield macros
#define _ICDSTAT_USRHLTF_POSN                               0x1
#define _ICDSTAT_USRHLTF_POSITION                           0x1
#define _ICDSTAT_USRHLTF_SIZE                               0x1
#define _ICDSTAT_USRHLTF_LENGTH                             0x1
#define _ICDSTAT_USRHLTF_MASK                               0x2
#define _ICDSTAT_TRP0HLTF_POSN                              0x6
#define _ICDSTAT_TRP0HLTF_POSITION                          0x6
#define _ICDSTAT_TRP0HLTF_SIZE                              0x1
#define _ICDSTAT_TRP0HLTF_LENGTH                            0x1
#define _ICDSTAT_TRP0HLTF_MASK                              0x40
#define _ICDSTAT_TRP1HLTF_POSN                              0x7
#define _ICDSTAT_TRP1HLTF_POSITION                          0x7
#define _ICDSTAT_TRP1HLTF_SIZE                              0x1
#define _ICDSTAT_TRP1HLTF_LENGTH                            0x1
#define _ICDSTAT_TRP1HLTF_MASK                              0x80

// Register: CLKRFRZ
#define CLKRFRZ CLKRFRZ
extern volatile unsigned char           CLKRFRZ             __at(0xF92);
#ifndef _LIB_BUILD
asm("CLKRFRZ equ 0F92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKRFRZEN              :1;
    };
} CLKRFRZbits_t;
extern volatile CLKRFRZbits_t CLKRFRZbits __at(0xF92);
// bitfield macros
#define _CLKRFRZ_CLKRFRZEN_POSN                             0x0
#define _CLKRFRZ_CLKRFRZEN_POSITION                         0x0
#define _CLKRFRZ_CLKRFRZEN_SIZE                             0x1
#define _CLKRFRZ_CLKRFRZEN_LENGTH                           0x1
#define _CLKRFRZ_CLKRFRZEN_MASK                             0x1

// Register: ICDINSTL
#define ICDINSTL ICDINSTL
extern volatile unsigned char           ICDINSTL            __at(0xF96);
#ifndef _LIB_BUILD
asm("ICDINSTL equ 0F96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBGIN0                 :1;
        unsigned DBGIN1                 :1;
        unsigned DBGIN2                 :1;
        unsigned DBGIN3                 :1;
        unsigned DBGIN4                 :1;
        unsigned DBGIN5                 :1;
        unsigned DBGIN6                 :1;
        unsigned DBGIN7                 :1;
    };
} ICDINSTLbits_t;
extern volatile ICDINSTLbits_t ICDINSTLbits __at(0xF96);
// bitfield macros
#define _ICDINSTL_DBGIN0_POSN                               0x0
#define _ICDINSTL_DBGIN0_POSITION                           0x0
#define _ICDINSTL_DBGIN0_SIZE                               0x1
#define _ICDINSTL_DBGIN0_LENGTH                             0x1
#define _ICDINSTL_DBGIN0_MASK                               0x1
#define _ICDINSTL_DBGIN1_POSN                               0x1
#define _ICDINSTL_DBGIN1_POSITION                           0x1
#define _ICDINSTL_DBGIN1_SIZE                               0x1
#define _ICDINSTL_DBGIN1_LENGTH                             0x1
#define _ICDINSTL_DBGIN1_MASK                               0x2
#define _ICDINSTL_DBGIN2_POSN                               0x2
#define _ICDINSTL_DBGIN2_POSITION                           0x2
#define _ICDINSTL_DBGIN2_SIZE                               0x1
#define _ICDINSTL_DBGIN2_LENGTH                             0x1
#define _ICDINSTL_DBGIN2_MASK                               0x4
#define _ICDINSTL_DBGIN3_POSN                               0x3
#define _ICDINSTL_DBGIN3_POSITION                           0x3
#define _ICDINSTL_DBGIN3_SIZE                               0x1
#define _ICDINSTL_DBGIN3_LENGTH                             0x1
#define _ICDINSTL_DBGIN3_MASK                               0x8
#define _ICDINSTL_DBGIN4_POSN                               0x4
#define _ICDINSTL_DBGIN4_POSITION                           0x4
#define _ICDINSTL_DBGIN4_SIZE                               0x1
#define _ICDINSTL_DBGIN4_LENGTH                             0x1
#define _ICDINSTL_DBGIN4_MASK                               0x10
#define _ICDINSTL_DBGIN5_POSN                               0x5
#define _ICDINSTL_DBGIN5_POSITION                           0x5
#define _ICDINSTL_DBGIN5_SIZE                               0x1
#define _ICDINSTL_DBGIN5_LENGTH                             0x1
#define _ICDINSTL_DBGIN5_MASK                               0x20
#define _ICDINSTL_DBGIN6_POSN                               0x6
#define _ICDINSTL_DBGIN6_POSITION                           0x6
#define _ICDINSTL_DBGIN6_SIZE                               0x1
#define _ICDINSTL_DBGIN6_LENGTH                             0x1
#define _ICDINSTL_DBGIN6_MASK                               0x40
#define _ICDINSTL_DBGIN7_POSN                               0x7
#define _ICDINSTL_DBGIN7_POSITION                           0x7
#define _ICDINSTL_DBGIN7_SIZE                               0x1
#define _ICDINSTL_DBGIN7_LENGTH                             0x1
#define _ICDINSTL_DBGIN7_MASK                               0x80

// Register: ICDINSTH
#define ICDINSTH ICDINSTH
extern volatile unsigned char           ICDINSTH            __at(0xF97);
#ifndef _LIB_BUILD
asm("ICDINSTH equ 0F97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBGIN8                 :1;
        unsigned DBGIN9                 :1;
        unsigned DBGIN10                :1;
        unsigned DBGIN11                :1;
        unsigned DBGIN12                :1;
        unsigned DBGIN13                :1;
    };
} ICDINSTHbits_t;
extern volatile ICDINSTHbits_t ICDINSTHbits __at(0xF97);
// bitfield macros
#define _ICDINSTH_DBGIN8_POSN                               0x0
#define _ICDINSTH_DBGIN8_POSITION                           0x0
#define _ICDINSTH_DBGIN8_SIZE                               0x1
#define _ICDINSTH_DBGIN8_LENGTH                             0x1
#define _ICDINSTH_DBGIN8_MASK                               0x1
#define _ICDINSTH_DBGIN9_POSN                               0x1
#define _ICDINSTH_DBGIN9_POSITION                           0x1
#define _ICDINSTH_DBGIN9_SIZE                               0x1
#define _ICDINSTH_DBGIN9_LENGTH                             0x1
#define _ICDINSTH_DBGIN9_MASK                               0x2
#define _ICDINSTH_DBGIN10_POSN                              0x2
#define _ICDINSTH_DBGIN10_POSITION                          0x2
#define _ICDINSTH_DBGIN10_SIZE                              0x1
#define _ICDINSTH_DBGIN10_LENGTH                            0x1
#define _ICDINSTH_DBGIN10_MASK                              0x4
#define _ICDINSTH_DBGIN11_POSN                              0x3
#define _ICDINSTH_DBGIN11_POSITION                          0x3
#define _ICDINSTH_DBGIN11_SIZE                              0x1
#define _ICDINSTH_DBGIN11_LENGTH                            0x1
#define _ICDINSTH_DBGIN11_MASK                              0x8
#define _ICDINSTH_DBGIN12_POSN                              0x4
#define _ICDINSTH_DBGIN12_POSITION                          0x4
#define _ICDINSTH_DBGIN12_SIZE                              0x1
#define _ICDINSTH_DBGIN12_LENGTH                            0x1
#define _ICDINSTH_DBGIN12_MASK                              0x10
#define _ICDINSTH_DBGIN13_POSN                              0x5
#define _ICDINSTH_DBGIN13_POSITION                          0x5
#define _ICDINSTH_DBGIN13_SIZE                              0x1
#define _ICDINSTH_DBGIN13_LENGTH                            0x1
#define _ICDINSTH_DBGIN13_MASK                              0x20

// Register: ICDBP0AL
#define ICDBP0AL ICDBP0AL
extern volatile unsigned char           ICDBP0AL            __at(0xF98);
#ifndef _LIB_BUILD
asm("ICDBP0AL equ 0F98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BPA0                   :1;
        unsigned BPA1                   :1;
        unsigned BPA2                   :1;
        unsigned BPA3                   :1;
        unsigned BPA4                   :1;
        unsigned BPA5                   :1;
        unsigned BPA6                   :1;
        unsigned BPA7                   :1;
    };
} ICDBP0ALbits_t;
extern volatile ICDBP0ALbits_t ICDBP0ALbits __at(0xF98);
// bitfield macros
#define _ICDBP0AL_BPA0_POSN                                 0x0
#define _ICDBP0AL_BPA0_POSITION                             0x0
#define _ICDBP0AL_BPA0_SIZE                                 0x1
#define _ICDBP0AL_BPA0_LENGTH                               0x1
#define _ICDBP0AL_BPA0_MASK                                 0x1
#define _ICDBP0AL_BPA1_POSN                                 0x1
#define _ICDBP0AL_BPA1_POSITION                             0x1
#define _ICDBP0AL_BPA1_SIZE                                 0x1
#define _ICDBP0AL_BPA1_LENGTH                               0x1
#define _ICDBP0AL_BPA1_MASK                                 0x2
#define _ICDBP0AL_BPA2_POSN                                 0x2
#define _ICDBP0AL_BPA2_POSITION                             0x2
#define _ICDBP0AL_BPA2_SIZE                                 0x1
#define _ICDBP0AL_BPA2_LENGTH                               0x1
#define _ICDBP0AL_BPA2_MASK                                 0x4
#define _ICDBP0AL_BPA3_POSN                                 0x3
#define _ICDBP0AL_BPA3_POSITION                             0x3
#define _ICDBP0AL_BPA3_SIZE                                 0x1
#define _ICDBP0AL_BPA3_LENGTH                               0x1
#define _ICDBP0AL_BPA3_MASK                                 0x8
#define _ICDBP0AL_BPA4_POSN                                 0x4
#define _ICDBP0AL_BPA4_POSITION                             0x4
#define _ICDBP0AL_BPA4_SIZE                                 0x1
#define _ICDBP0AL_BPA4_LENGTH                               0x1
#define _ICDBP0AL_BPA4_MASK                                 0x10
#define _ICDBP0AL_BPA5_POSN                                 0x5
#define _ICDBP0AL_BPA5_POSITION                             0x5
#define _ICDBP0AL_BPA5_SIZE                                 0x1
#define _ICDBP0AL_BPA5_LENGTH                               0x1
#define _ICDBP0AL_BPA5_MASK                                 0x20
#define _ICDBP0AL_BPA6_POSN                                 0x6
#define _ICDBP0AL_BPA6_POSITION                             0x6
#define _ICDBP0AL_BPA6_SIZE                                 0x1
#define _ICDBP0AL_BPA6_LENGTH                               0x1
#define _ICDBP0AL_BPA6_MASK                                 0x40
#define _ICDBP0AL_BPA7_POSN                                 0x7
#define _ICDBP0AL_BPA7_POSITION                             0x7
#define _ICDBP0AL_BPA7_SIZE                                 0x1
#define _ICDBP0AL_BPA7_LENGTH                               0x1
#define _ICDBP0AL_BPA7_MASK                                 0x80

// Register: ICDBP0AH
#define ICDBP0AH ICDBP0AH
extern volatile unsigned char           ICDBP0AH            __at(0xF99);
#ifndef _LIB_BUILD
asm("ICDBP0AH equ 0F99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BPA8                   :1;
        unsigned BPA9                   :1;
        unsigned BPA10                  :1;
        unsigned BPA11                  :1;
        unsigned BPA12                  :1;
        unsigned BPA13                  :1;
        unsigned BPA14                  :1;
    };
} ICDBP0AHbits_t;
extern volatile ICDBP0AHbits_t ICDBP0AHbits __at(0xF99);
// bitfield macros
#define _ICDBP0AH_BPA8_POSN                                 0x0
#define _ICDBP0AH_BPA8_POSITION                             0x0
#define _ICDBP0AH_BPA8_SIZE                                 0x1
#define _ICDBP0AH_BPA8_LENGTH                               0x1
#define _ICDBP0AH_BPA8_MASK                                 0x1
#define _ICDBP0AH_BPA9_POSN                                 0x1
#define _ICDBP0AH_BPA9_POSITION                             0x1
#define _ICDBP0AH_BPA9_SIZE                                 0x1
#define _ICDBP0AH_BPA9_LENGTH                               0x1
#define _ICDBP0AH_BPA9_MASK                                 0x2
#define _ICDBP0AH_BPA10_POSN                                0x2
#define _ICDBP0AH_BPA10_POSITION                            0x2
#define _ICDBP0AH_BPA10_SIZE                                0x1
#define _ICDBP0AH_BPA10_LENGTH                              0x1
#define _ICDBP0AH_BPA10_MASK                                0x4
#define _ICDBP0AH_BPA11_POSN                                0x3
#define _ICDBP0AH_BPA11_POSITION                            0x3
#define _ICDBP0AH_BPA11_SIZE                                0x1
#define _ICDBP0AH_BPA11_LENGTH                              0x1
#define _ICDBP0AH_BPA11_MASK                                0x8
#define _ICDBP0AH_BPA12_POSN                                0x4
#define _ICDBP0AH_BPA12_POSITION                            0x4
#define _ICDBP0AH_BPA12_SIZE                                0x1
#define _ICDBP0AH_BPA12_LENGTH                              0x1
#define _ICDBP0AH_BPA12_MASK                                0x10
#define _ICDBP0AH_BPA13_POSN                                0x5
#define _ICDBP0AH_BPA13_POSITION                            0x5
#define _ICDBP0AH_BPA13_SIZE                                0x1
#define _ICDBP0AH_BPA13_LENGTH                              0x1
#define _ICDBP0AH_BPA13_MASK                                0x20
#define _ICDBP0AH_BPA14_POSN                                0x6
#define _ICDBP0AH_BPA14_POSITION                            0x6
#define _ICDBP0AH_BPA14_SIZE                                0x1
#define _ICDBP0AH_BPA14_LENGTH                              0x1
#define _ICDBP0AH_BPA14_MASK                                0x40

// Register: ICDBP0D
#define ICDBP0D ICDBP0D
extern volatile unsigned char           ICDBP0D             __at(0xF9B);
#ifndef _LIB_BUILD
asm("ICDBP0D equ 0F9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BPD0                   :1;
        unsigned BPD1                   :1;
        unsigned BPD2                   :1;
        unsigned BPD3                   :1;
        unsigned BPD4                   :1;
        unsigned BPD5                   :1;
        unsigned BPD6                   :1;
        unsigned BPD7                   :1;
    };
} ICDBP0Dbits_t;
extern volatile ICDBP0Dbits_t ICDBP0Dbits __at(0xF9B);
// bitfield macros
#define _ICDBP0D_BPD0_POSN                                  0x0
#define _ICDBP0D_BPD0_POSITION                              0x0
#define _ICDBP0D_BPD0_SIZE                                  0x1
#define _ICDBP0D_BPD0_LENGTH                                0x1
#define _ICDBP0D_BPD0_MASK                                  0x1
#define _ICDBP0D_BPD1_POSN                                  0x1
#define _ICDBP0D_BPD1_POSITION                              0x1
#define _ICDBP0D_BPD1_SIZE                                  0x1
#define _ICDBP0D_BPD1_LENGTH                                0x1
#define _ICDBP0D_BPD1_MASK                                  0x2
#define _ICDBP0D_BPD2_POSN                                  0x2
#define _ICDBP0D_BPD2_POSITION                              0x2
#define _ICDBP0D_BPD2_SIZE                                  0x1
#define _ICDBP0D_BPD2_LENGTH                                0x1
#define _ICDBP0D_BPD2_MASK                                  0x4
#define _ICDBP0D_BPD3_POSN                                  0x3
#define _ICDBP0D_BPD3_POSITION                              0x3
#define _ICDBP0D_BPD3_SIZE                                  0x1
#define _ICDBP0D_BPD3_LENGTH                                0x1
#define _ICDBP0D_BPD3_MASK                                  0x8
#define _ICDBP0D_BPD4_POSN                                  0x4
#define _ICDBP0D_BPD4_POSITION                              0x4
#define _ICDBP0D_BPD4_SIZE                                  0x1
#define _ICDBP0D_BPD4_LENGTH                                0x1
#define _ICDBP0D_BPD4_MASK                                  0x10
#define _ICDBP0D_BPD5_POSN                                  0x5
#define _ICDBP0D_BPD5_POSITION                              0x5
#define _ICDBP0D_BPD5_SIZE                                  0x1
#define _ICDBP0D_BPD5_LENGTH                                0x1
#define _ICDBP0D_BPD5_MASK                                  0x20
#define _ICDBP0D_BPD6_POSN                                  0x6
#define _ICDBP0D_BPD6_POSITION                              0x6
#define _ICDBP0D_BPD6_SIZE                                  0x1
#define _ICDBP0D_BPD6_LENGTH                                0x1
#define _ICDBP0D_BPD6_MASK                                  0x40
#define _ICDBP0D_BPD7_POSN                                  0x7
#define _ICDBP0D_BPD7_POSITION                              0x7
#define _ICDBP0D_BPD7_SIZE                                  0x1
#define _ICDBP0D_BPD7_LENGTH                                0x1
#define _ICDBP0D_BPD7_MASK                                  0x80

// Register: ICDBP0CON
#define ICDBP0CON ICDBP0CON
extern volatile unsigned char           ICDBP0CON           __at(0xF9C);
#ifndef _LIB_BUILD
asm("ICDBP0CON equ 0F9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned CAPEN                  :1;
        unsigned DCMP                   :1;
        unsigned MSSEL0                 :1;
        unsigned MSSEL1                 :1;
        unsigned BPEN                   :1;
    };
} ICDBP0CONbits_t;
extern volatile ICDBP0CONbits_t ICDBP0CONbits __at(0xF9C);
// bitfield macros
#define _ICDBP0CON_CAPEN_POSN                               0x3
#define _ICDBP0CON_CAPEN_POSITION                           0x3
#define _ICDBP0CON_CAPEN_SIZE                               0x1
#define _ICDBP0CON_CAPEN_LENGTH                             0x1
#define _ICDBP0CON_CAPEN_MASK                               0x8
#define _ICDBP0CON_DCMP_POSN                                0x4
#define _ICDBP0CON_DCMP_POSITION                            0x4
#define _ICDBP0CON_DCMP_SIZE                                0x1
#define _ICDBP0CON_DCMP_LENGTH                              0x1
#define _ICDBP0CON_DCMP_MASK                                0x10
#define _ICDBP0CON_MSSEL0_POSN                              0x5
#define _ICDBP0CON_MSSEL0_POSITION                          0x5
#define _ICDBP0CON_MSSEL0_SIZE                              0x1
#define _ICDBP0CON_MSSEL0_LENGTH                            0x1
#define _ICDBP0CON_MSSEL0_MASK                              0x20
#define _ICDBP0CON_MSSEL1_POSN                              0x6
#define _ICDBP0CON_MSSEL1_POSITION                          0x6
#define _ICDBP0CON_MSSEL1_SIZE                              0x1
#define _ICDBP0CON_MSSEL1_LENGTH                            0x1
#define _ICDBP0CON_MSSEL1_MASK                              0x40
#define _ICDBP0CON_BPEN_POSN                                0x7
#define _ICDBP0CON_BPEN_POSITION                            0x7
#define _ICDBP0CON_BPEN_SIZE                                0x1
#define _ICDBP0CON_BPEN_LENGTH                              0x1
#define _ICDBP0CON_BPEN_MASK                                0x80

// Register: ICDBP0CNT
#define ICDBP0CNT ICDBP0CNT
extern volatile unsigned char           ICDBP0CNT           __at(0xF9D);
#ifndef _LIB_BUILD
asm("ICDBP0CNT equ 0F9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BPC0                   :1;
        unsigned BPC1                   :1;
        unsigned BPC2                   :1;
        unsigned BPC3                   :1;
        unsigned BPC4                   :1;
        unsigned BPC5                   :1;
        unsigned BPC6                   :1;
        unsigned BPC7                   :1;
    };
} ICDBP0CNTbits_t;
extern volatile ICDBP0CNTbits_t ICDBP0CNTbits __at(0xF9D);
// bitfield macros
#define _ICDBP0CNT_BPC0_POSN                                0x0
#define _ICDBP0CNT_BPC0_POSITION                            0x0
#define _ICDBP0CNT_BPC0_SIZE                                0x1
#define _ICDBP0CNT_BPC0_LENGTH                              0x1
#define _ICDBP0CNT_BPC0_MASK                                0x1
#define _ICDBP0CNT_BPC1_POSN                                0x1
#define _ICDBP0CNT_BPC1_POSITION                            0x1
#define _ICDBP0CNT_BPC1_SIZE                                0x1
#define _ICDBP0CNT_BPC1_LENGTH                              0x1
#define _ICDBP0CNT_BPC1_MASK                                0x2
#define _ICDBP0CNT_BPC2_POSN                                0x2
#define _ICDBP0CNT_BPC2_POSITION                            0x2
#define _ICDBP0CNT_BPC2_SIZE                                0x1
#define _ICDBP0CNT_BPC2_LENGTH                              0x1
#define _ICDBP0CNT_BPC2_MASK                                0x4
#define _ICDBP0CNT_BPC3_POSN                                0x3
#define _ICDBP0CNT_BPC3_POSITION                            0x3
#define _ICDBP0CNT_BPC3_SIZE                                0x1
#define _ICDBP0CNT_BPC3_LENGTH                              0x1
#define _ICDBP0CNT_BPC3_MASK                                0x8
#define _ICDBP0CNT_BPC4_POSN                                0x4
#define _ICDBP0CNT_BPC4_POSITION                            0x4
#define _ICDBP0CNT_BPC4_SIZE                                0x1
#define _ICDBP0CNT_BPC4_LENGTH                              0x1
#define _ICDBP0CNT_BPC4_MASK                                0x10
#define _ICDBP0CNT_BPC5_POSN                                0x5
#define _ICDBP0CNT_BPC5_POSITION                            0x5
#define _ICDBP0CNT_BPC5_SIZE                                0x1
#define _ICDBP0CNT_BPC5_LENGTH                              0x1
#define _ICDBP0CNT_BPC5_MASK                                0x20
#define _ICDBP0CNT_BPC6_POSN                                0x6
#define _ICDBP0CNT_BPC6_POSITION                            0x6
#define _ICDBP0CNT_BPC6_SIZE                                0x1
#define _ICDBP0CNT_BPC6_LENGTH                              0x1
#define _ICDBP0CNT_BPC6_MASK                                0x40
#define _ICDBP0CNT_BPC7_POSN                                0x7
#define _ICDBP0CNT_BPC7_POSITION                            0x7
#define _ICDBP0CNT_BPC7_SIZE                                0x1
#define _ICDBP0CNT_BPC7_LENGTH                              0x1
#define _ICDBP0CNT_BPC7_MASK                                0x80

// Register: BSR_ICDSHAD
#define BSR_ICDSHAD BSR_ICDSHAD
extern volatile unsigned char           BSR_ICDSHAD         __at(0xFE3);
#ifndef _LIB_BUILD
asm("BSR_ICDSHAD equ 0FE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BANKSELECTICDMODESHADOW :5;
    };
} BSR_ICDSHADbits_t;
extern volatile BSR_ICDSHADbits_t BSR_ICDSHADbits __at(0xFE3);
// bitfield macros
#define _BSR_ICDSHAD_BANKSELECTICDMODESHADOW_POSN           0x0
#define _BSR_ICDSHAD_BANKSELECTICDMODESHADOW_POSITION       0x0
#define _BSR_ICDSHAD_BANKSELECTICDMODESHADOW_SIZE           0x5
#define _BSR_ICDSHAD_BANKSELECTICDMODESHADOW_LENGTH         0x5
#define _BSR_ICDSHAD_BANKSELECTICDMODESHADOW_MASK           0x1F

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0xFE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 0FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C_SHAD                 :1;
        unsigned DC_SHAD                :1;
        unsigned Z_SHAD                 :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0xFE4);
// bitfield macros
#define _STATUS_SHAD_C_SHAD_POSN                            0x0
#define _STATUS_SHAD_C_SHAD_POSITION                        0x0
#define _STATUS_SHAD_C_SHAD_SIZE                            0x1
#define _STATUS_SHAD_C_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_C_SHAD_MASK                            0x1
#define _STATUS_SHAD_DC_SHAD_POSN                           0x1
#define _STATUS_SHAD_DC_SHAD_POSITION                       0x1
#define _STATUS_SHAD_DC_SHAD_SIZE                           0x1
#define _STATUS_SHAD_DC_SHAD_LENGTH                         0x1
#define _STATUS_SHAD_DC_SHAD_MASK                           0x2
#define _STATUS_SHAD_Z_SHAD_POSN                            0x2
#define _STATUS_SHAD_Z_SHAD_POSITION                        0x2
#define _STATUS_SHAD_Z_SHAD_SIZE                            0x1
#define _STATUS_SHAD_Z_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_Z_SHAD_MASK                            0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0xFE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 0FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0xFE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0xFE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 0FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :5;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0xFE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x5
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x5
#define _BSR_SHAD_BSR_SHAD_MASK                             0x1F

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0xFE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 0FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :7;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0xFE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x7
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x7
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0x7F

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0xFE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 0FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0xFE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 0FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0xFE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0xFEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 0FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0xFEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0xFEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 0FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0xFEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0xFED);
#ifndef _LIB_BUILD
asm("STKPTR equ 0FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0xFED);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0xFEE);
#ifndef _LIB_BUILD
asm("TOSL equ 0FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0xFEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0xFEF);
#ifndef _LIB_BUILD
asm("TOSH equ 0FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :7;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0xFEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x7
#define _TOSH_TOSH_LENGTH                                   0x7
#define _TOSH_TOSH_MASK                                     0x7F

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0x8F8);	// @ (0x11F * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0x8FF);	// @ (0x11F * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// CRCACCL<ACC0>
extern volatile __bit                   ACC0                __at(0x20C0);	// @ (0x418 * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(CRCACCL,0)
// CRCACCL<ACC1>
extern volatile __bit                   ACC1                __at(0x20C1);	// @ (0x418 * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(CRCACCL,1)
// CRCACCH<ACC10>
extern volatile __bit                   ACC10               __at(0x20CA);	// @ (0x419 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(CRCACCH,2)
// CRCACCH<ACC11>
extern volatile __bit                   ACC11               __at(0x20CB);	// @ (0x419 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(CRCACCH,3)
// CRCACCH<ACC12>
extern volatile __bit                   ACC12               __at(0x20CC);	// @ (0x419 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(CRCACCH,4)
// CRCACCH<ACC13>
extern volatile __bit                   ACC13               __at(0x20CD);	// @ (0x419 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(CRCACCH,5)
// CRCACCH<ACC14>
extern volatile __bit                   ACC14               __at(0x20CE);	// @ (0x419 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(CRCACCH,6)
// CRCACCH<ACC15>
extern volatile __bit                   ACC15               __at(0x20CF);	// @ (0x419 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(CRCACCH,7)
// CRCACCL<ACC2>
extern volatile __bit                   ACC2                __at(0x20C2);	// @ (0x418 * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(CRCACCL,2)
// CRCACCL<ACC3>
extern volatile __bit                   ACC3                __at(0x20C3);	// @ (0x418 * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(CRCACCL,3)
// CRCACCL<ACC4>
extern volatile __bit                   ACC4                __at(0x20C4);	// @ (0x418 * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(CRCACCL,4)
// CRCACCL<ACC5>
extern volatile __bit                   ACC5                __at(0x20C5);	// @ (0x418 * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(CRCACCL,5)
// CRCACCL<ACC6>
extern volatile __bit                   ACC6                __at(0x20C6);	// @ (0x418 * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(CRCACCL,6)
// CRCACCL<ACC7>
extern volatile __bit                   ACC7                __at(0x20C7);	// @ (0x418 * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(CRCACCL,7)
// CRCACCH<ACC8>
extern volatile __bit                   ACC8                __at(0x20C8);	// @ (0x419 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(CRCACCH,0)
// CRCACCH<ACC9>
extern volatile __bit                   ACC9                __at(0x20C9);	// @ (0x419 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(CRCACCH,1)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x20F4);	// @ (0x41E * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0xC97);	// @ (0x192 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x481);	// @ (0x90 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// TST_PPSIN3<ADCACT>
extern volatile __bit                   ADCACT              __at(0x7696);	// @ (0xED2 * 8 + 6)
#define                                 ADCACT_bit          _BIT_ACCESS(TST_PPSIN3,6)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x3CC3);	// @ (0x798 * 8 + 3)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,3)
// ADCON1<ADCS0>
extern volatile __bit                   ADCS0               __at(0x47C);	// @ (0x8F * 8 + 4)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCON1,4)
// ADCON1<ADCS1>
extern volatile __bit                   ADCS1               __at(0x47D);	// @ (0x8F * 8 + 5)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCON1,5)
// ADCON1<ADCS2>
extern volatile __bit                   ADCS2               __at(0x47E);	// @ (0x8F * 8 + 6)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCON1,6)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0x8EB);	// @ (0x11D * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADFM>
extern volatile __bit                   ADFM                __at(0x47F);	// @ (0x8F * 8 + 7)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON1,7)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x38B8);	// @ (0x717 * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,0)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x3868);	// @ (0x70D * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,0)
// SSP1CON2<ADMSK1>
extern volatile __bit                   ADMSK1              __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK1_bit          _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK2>
extern volatile __bit                   ADMSK2              __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK2_bit          _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK3>
extern volatile __bit                   ADMSK3              __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK3_bit          _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK4>
extern volatile __bit                   ADMSK4              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK4_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK5>
extern volatile __bit                   ADMSK5              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK5_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x448A);	// @ (0x891 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,0)
// OSCSTAT1<ADOR>
extern volatile __bit                   ADOR                __at(0x4482);	// @ (0x890 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT1,2)
// ADCON1<ADPREF>
extern volatile __bit                   ADPREF              __at(0x478);	// @ (0x8F * 8 + 0)
#define                                 ADPREF_bit          _BIT_ACCESS(ADCON1,0)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0xC91);	// @ (0x192 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0x79C0);	// @ (0xF38 * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0x79C1);	// @ (0xF38 * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0x79C2);	// @ (0xF38 * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA3>
extern volatile __bit                   ANSA3               __at(0x79C3);	// @ (0xF38 * 8 + 3)
#define                                 ANSA3_bit           _BIT_ACCESS(ANSELA,3)
// ANSELB<ANSB0>
extern volatile __bit                   ANSB0               __at(0x7A18);	// @ (0xF43 * 8 + 0)
#define                                 ANSB0_bit           _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSB1>
extern volatile __bit                   ANSB1               __at(0x7A19);	// @ (0xF43 * 8 + 1)
#define                                 ANSB1_bit           _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSB2>
extern volatile __bit                   ANSB2               __at(0x7A1A);	// @ (0xF43 * 8 + 2)
#define                                 ANSB2_bit           _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSB3>
extern volatile __bit                   ANSB3               __at(0x7A1B);	// @ (0xF43 * 8 + 3)
#define                                 ANSB3_bit           _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSB4>
extern volatile __bit                   ANSB4               __at(0x7A1C);	// @ (0xF43 * 8 + 4)
#define                                 ANSB4_bit           _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSB5>
extern volatile __bit                   ANSB5               __at(0x7A1D);	// @ (0xF43 * 8 + 5)
#define                                 ANSB5_bit           _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSB6>
extern volatile __bit                   ANSB6               __at(0x7A1E);	// @ (0xF43 * 8 + 6)
#define                                 ANSB6_bit           _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSB7>
extern volatile __bit                   ANSB7               __at(0x7A1F);	// @ (0xF43 * 8 + 7)
#define                                 ANSB7_bit           _BIT_ACCESS(ANSELB,7)
// PIE4<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x3881);	// @ (0x710 * 8 + 1)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR4,1)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0xC94);	// @ (0x192 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// ICDDC<BP1STAT>
extern volatile __bit                   BP1STAT             __at(0x7C70);	// @ (0xF8E * 8 + 0)
#define                                 BP1STAT_bit         _BIT_ACCESS(ICDDC,0)
// ICDBP0AL<BPA0>
extern volatile __bit                   BPA0                __at(0x7CC0);	// @ (0xF98 * 8 + 0)
#define                                 BPA0_bit            _BIT_ACCESS(ICDBP0AL,0)
// ICDBP0AL<BPA1>
extern volatile __bit                   BPA1                __at(0x7CC1);	// @ (0xF98 * 8 + 1)
#define                                 BPA1_bit            _BIT_ACCESS(ICDBP0AL,1)
// ICDBP0AH<BPA10>
extern volatile __bit                   BPA10               __at(0x7CCA);	// @ (0xF99 * 8 + 2)
#define                                 BPA10_bit           _BIT_ACCESS(ICDBP0AH,2)
// ICDBP0AH<BPA11>
extern volatile __bit                   BPA11               __at(0x7CCB);	// @ (0xF99 * 8 + 3)
#define                                 BPA11_bit           _BIT_ACCESS(ICDBP0AH,3)
// ICDBP0AH<BPA12>
extern volatile __bit                   BPA12               __at(0x7CCC);	// @ (0xF99 * 8 + 4)
#define                                 BPA12_bit           _BIT_ACCESS(ICDBP0AH,4)
// ICDBP0AH<BPA13>
extern volatile __bit                   BPA13               __at(0x7CCD);	// @ (0xF99 * 8 + 5)
#define                                 BPA13_bit           _BIT_ACCESS(ICDBP0AH,5)
// ICDBP0AH<BPA14>
extern volatile __bit                   BPA14               __at(0x7CCE);	// @ (0xF99 * 8 + 6)
#define                                 BPA14_bit           _BIT_ACCESS(ICDBP0AH,6)
// ICDBP0AL<BPA2>
extern volatile __bit                   BPA2                __at(0x7CC2);	// @ (0xF98 * 8 + 2)
#define                                 BPA2_bit            _BIT_ACCESS(ICDBP0AL,2)
// ICDBP0AL<BPA3>
extern volatile __bit                   BPA3                __at(0x7CC3);	// @ (0xF98 * 8 + 3)
#define                                 BPA3_bit            _BIT_ACCESS(ICDBP0AL,3)
// ICDBP0AL<BPA4>
extern volatile __bit                   BPA4                __at(0x7CC4);	// @ (0xF98 * 8 + 4)
#define                                 BPA4_bit            _BIT_ACCESS(ICDBP0AL,4)
// ICDBP0AL<BPA5>
extern volatile __bit                   BPA5                __at(0x7CC5);	// @ (0xF98 * 8 + 5)
#define                                 BPA5_bit            _BIT_ACCESS(ICDBP0AL,5)
// ICDBP0AL<BPA6>
extern volatile __bit                   BPA6                __at(0x7CC6);	// @ (0xF98 * 8 + 6)
#define                                 BPA6_bit            _BIT_ACCESS(ICDBP0AL,6)
// ICDBP0AL<BPA7>
extern volatile __bit                   BPA7                __at(0x7CC7);	// @ (0xF98 * 8 + 7)
#define                                 BPA7_bit            _BIT_ACCESS(ICDBP0AL,7)
// ICDBP0AH<BPA8>
extern volatile __bit                   BPA8                __at(0x7CC8);	// @ (0xF99 * 8 + 0)
#define                                 BPA8_bit            _BIT_ACCESS(ICDBP0AH,0)
// ICDBP0AH<BPA9>
extern volatile __bit                   BPA9                __at(0x7CC9);	// @ (0xF99 * 8 + 1)
#define                                 BPA9_bit            _BIT_ACCESS(ICDBP0AH,1)
// ICDBP0CNT<BPC0>
extern volatile __bit                   BPC0                __at(0x7CE8);	// @ (0xF9D * 8 + 0)
#define                                 BPC0_bit            _BIT_ACCESS(ICDBP0CNT,0)
// ICDBP0CNT<BPC1>
extern volatile __bit                   BPC1                __at(0x7CE9);	// @ (0xF9D * 8 + 1)
#define                                 BPC1_bit            _BIT_ACCESS(ICDBP0CNT,1)
// ICDBP0CNT<BPC2>
extern volatile __bit                   BPC2                __at(0x7CEA);	// @ (0xF9D * 8 + 2)
#define                                 BPC2_bit            _BIT_ACCESS(ICDBP0CNT,2)
// ICDBP0CNT<BPC3>
extern volatile __bit                   BPC3                __at(0x7CEB);	// @ (0xF9D * 8 + 3)
#define                                 BPC3_bit            _BIT_ACCESS(ICDBP0CNT,3)
// ICDBP0CNT<BPC4>
extern volatile __bit                   BPC4                __at(0x7CEC);	// @ (0xF9D * 8 + 4)
#define                                 BPC4_bit            _BIT_ACCESS(ICDBP0CNT,4)
// ICDBP0CNT<BPC5>
extern volatile __bit                   BPC5                __at(0x7CED);	// @ (0xF9D * 8 + 5)
#define                                 BPC5_bit            _BIT_ACCESS(ICDBP0CNT,5)
// ICDBP0CNT<BPC6>
extern volatile __bit                   BPC6                __at(0x7CEE);	// @ (0xF9D * 8 + 6)
#define                                 BPC6_bit            _BIT_ACCESS(ICDBP0CNT,6)
// ICDBP0CNT<BPC7>
extern volatile __bit                   BPC7                __at(0x7CEF);	// @ (0xF9D * 8 + 7)
#define                                 BPC7_bit            _BIT_ACCESS(ICDBP0CNT,7)
// ICDBP0D<BPD0>
extern volatile __bit                   BPD0                __at(0x7CD8);	// @ (0xF9B * 8 + 0)
#define                                 BPD0_bit            _BIT_ACCESS(ICDBP0D,0)
// ICDBP0D<BPD1>
extern volatile __bit                   BPD1                __at(0x7CD9);	// @ (0xF9B * 8 + 1)
#define                                 BPD1_bit            _BIT_ACCESS(ICDBP0D,1)
// ICDBP0D<BPD2>
extern volatile __bit                   BPD2                __at(0x7CDA);	// @ (0xF9B * 8 + 2)
#define                                 BPD2_bit            _BIT_ACCESS(ICDBP0D,2)
// ICDBP0D<BPD3>
extern volatile __bit                   BPD3                __at(0x7CDB);	// @ (0xF9B * 8 + 3)
#define                                 BPD3_bit            _BIT_ACCESS(ICDBP0D,3)
// ICDBP0D<BPD4>
extern volatile __bit                   BPD4                __at(0x7CDC);	// @ (0xF9B * 8 + 4)
#define                                 BPD4_bit            _BIT_ACCESS(ICDBP0D,4)
// ICDBP0D<BPD5>
extern volatile __bit                   BPD5                __at(0x7CDD);	// @ (0xF9B * 8 + 5)
#define                                 BPD5_bit            _BIT_ACCESS(ICDBP0D,5)
// ICDBP0D<BPD6>
extern volatile __bit                   BPD6                __at(0x7CDE);	// @ (0xF9B * 8 + 6)
#define                                 BPD6_bit            _BIT_ACCESS(ICDBP0D,6)
// ICDBP0D<BPD7>
extern volatile __bit                   BPD7                __at(0x7CDF);	// @ (0xF9B * 8 + 7)
#define                                 BPD7_bit            _BIT_ACCESS(ICDBP0D,7)
// ICDBP0CON<BPEN>
extern volatile __bit                   BPEN                __at(0x7CE7);	// @ (0xF9C * 8 + 7)
#define                                 BPEN_bit            _BIT_ACCESS(ICDBP0CON,7)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0x8FB);	// @ (0x11F * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0x8F2);	// @ (0x11E * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// CCPTMRS0<C1TSEL>
extern volatile __bit                   C1TSEL              __at(0x10F0);	// @ (0x21E * 8 + 0)
#define                                 C1TSEL_bit          _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C2TSEL>
extern volatile __bit                   C2TSEL              __at(0x10F1);	// @ (0x21E * 8 + 1)
#define                                 C2TSEL_bit          _BIT_ACCESS(CCPTMRS0,1)
// ICDBP0CON<CAPEN>
extern volatile __bit                   CAPEN               __at(0x7CE3);	// @ (0xF9C * 8 + 3)
#define                                 CAPEN_bit           _BIT_ACCESS(ICDBP0CON,3)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCDCON<CCDEN>
extern volatile __bit                   CCDEN               __at(0x40A7);	// @ (0x814 * 8 + 7)
#define                                 CCDEN_bit           _BIT_ACCESS(CCDCON,7)
// CCDNA<CCDNA1>
extern volatile __bit                   CCDNA1              __at(0x7A01);	// @ (0xF40 * 8 + 1)
#define                                 CCDNA1_bit          _BIT_ACCESS(CCDNA,1)
// CCDNA<CCDNA2>
extern volatile __bit                   CCDNA2              __at(0x7A02);	// @ (0xF40 * 8 + 2)
#define                                 CCDNA2_bit          _BIT_ACCESS(CCDNA,2)
// CCDNA<CCDNA3>
extern volatile __bit                   CCDNA3              __at(0x7A03);	// @ (0xF40 * 8 + 3)
#define                                 CCDNA3_bit          _BIT_ACCESS(CCDNA,3)
// CCDPA<CCDPA1>
extern volatile __bit                   CCDPA1              __at(0x7A09);	// @ (0xF41 * 8 + 1)
#define                                 CCDPA1_bit          _BIT_ACCESS(CCDPA,1)
// CCDPA<CCDPA2>
extern volatile __bit                   CCDPA2              __at(0x7A0A);	// @ (0xF41 * 8 + 2)
#define                                 CCDPA2_bit          _BIT_ACCESS(CCDPA,2)
// CCDPA<CCDPA3>
extern volatile __bit                   CCDPA3              __at(0x7A0B);	// @ (0xF41 * 8 + 3)
#define                                 CCDPA3_bit          _BIT_ACCESS(CCDPA,3)
// CCDCON<CCDS0>
extern volatile __bit                   CCDS0               __at(0x40A0);	// @ (0x814 * 8 + 0)
#define                                 CCDS0_bit           _BIT_ACCESS(CCDCON,0)
// CCDCON<CCDS1>
extern volatile __bit                   CCDS1               __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 CCDS1_bit           _BIT_ACCESS(CCDCON,1)
// TST_PPSIN2<CCP1>
extern volatile __bit                   CCP1                __at(0x768C);	// @ (0xED1 * 8 + 4)
#define                                 CCP1_bit            _BIT_ACCESS(TST_PPSIN2,4)
// CCP1CAP<CCP1CAP0>
extern volatile __bit                   CCP1CAP0            __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 CCP1CAP0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CAP1>
extern volatile __bit                   CCP1CAP1            __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 CCP1CAP1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CAP2>
extern volatile __bit                   CCP1CAP2            __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 CCP1CAP2_bit        _BIT_ACCESS(CCP1CAP,2)
// PIE3<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x3878);	// @ (0x70F * 8 + 0)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR3,0)
// PMD1<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x3CBE);	// @ (0x797 * 8 + 6)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD1,6)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0x7508);	// @ (0xEA1 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0x7509);	// @ (0xEA1 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0x750A);	// @ (0xEA1 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0x750B);	// @ (0xEA1 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0x750C);	// @ (0xEA1 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP1RL<CCP1PR0>
extern volatile __bit                   CCP1PR0             __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 CCP1PR0_bit         _BIT_ACCESS(CCP1RL,0)
// CCP1RL<CCP1PR1>
extern volatile __bit                   CCP1PR1             __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 CCP1PR1_bit         _BIT_ACCESS(CCP1RL,1)
// CCP1RH<CCP1PR10>
extern volatile __bit                   CCP1PR10            __at(0x186A);	// @ (0x30D * 8 + 2)
#define                                 CCP1PR10_bit        _BIT_ACCESS(CCP1RH,2)
// CCP1RH<CCP1PR11>
extern volatile __bit                   CCP1PR11            __at(0x186B);	// @ (0x30D * 8 + 3)
#define                                 CCP1PR11_bit        _BIT_ACCESS(CCP1RH,3)
// CCP1RH<CCP1PR12>
extern volatile __bit                   CCP1PR12            __at(0x186C);	// @ (0x30D * 8 + 4)
#define                                 CCP1PR12_bit        _BIT_ACCESS(CCP1RH,4)
// CCP1RH<CCP1PR13>
extern volatile __bit                   CCP1PR13            __at(0x186D);	// @ (0x30D * 8 + 5)
#define                                 CCP1PR13_bit        _BIT_ACCESS(CCP1RH,5)
// CCP1RH<CCP1PR14>
extern volatile __bit                   CCP1PR14            __at(0x186E);	// @ (0x30D * 8 + 6)
#define                                 CCP1PR14_bit        _BIT_ACCESS(CCP1RH,6)
// CCP1RH<CCP1PR15>
extern volatile __bit                   CCP1PR15            __at(0x186F);	// @ (0x30D * 8 + 7)
#define                                 CCP1PR15_bit        _BIT_ACCESS(CCP1RH,7)
// CCP1RL<CCP1PR2>
extern volatile __bit                   CCP1PR2             __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 CCP1PR2_bit         _BIT_ACCESS(CCP1RL,2)
// CCP1RL<CCP1PR3>
extern volatile __bit                   CCP1PR3             __at(0x1863);	// @ (0x30C * 8 + 3)
#define                                 CCP1PR3_bit         _BIT_ACCESS(CCP1RL,3)
// CCP1RL<CCP1PR4>
extern volatile __bit                   CCP1PR4             __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 CCP1PR4_bit         _BIT_ACCESS(CCP1RL,4)
// CCP1RL<CCP1PR5>
extern volatile __bit                   CCP1PR5             __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 CCP1PR5_bit         _BIT_ACCESS(CCP1RL,5)
// CCP1RL<CCP1PR6>
extern volatile __bit                   CCP1PR6             __at(0x1866);	// @ (0x30C * 8 + 6)
#define                                 CCP1PR6_bit         _BIT_ACCESS(CCP1RL,6)
// CCP1RL<CCP1PR7>
extern volatile __bit                   CCP1PR7             __at(0x1867);	// @ (0x30C * 8 + 7)
#define                                 CCP1PR7_bit         _BIT_ACCESS(CCP1RL,7)
// CCP1RH<CCP1PR8>
extern volatile __bit                   CCP1PR8             __at(0x1868);	// @ (0x30D * 8 + 0)
#define                                 CCP1PR8_bit         _BIT_ACCESS(CCP1RH,0)
// CCP1RH<CCP1PR9>
extern volatile __bit                   CCP1PR9             __at(0x1869);	// @ (0x30D * 8 + 1)
#define                                 CCP1PR9_bit         _BIT_ACCESS(CCP1RH,1)
// TST_PPSIN2<CCP2>
extern volatile __bit                   CCP2                __at(0x768D);	// @ (0xED1 * 8 + 5)
#define                                 CCP2_bit            _BIT_ACCESS(TST_PPSIN2,5)
// CCP2CAP<CCP2CAP0>
extern volatile __bit                   CCP2CAP0            __at(0x1898);	// @ (0x313 * 8 + 0)
#define                                 CCP2CAP0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CAP1>
extern volatile __bit                   CCP2CAP1            __at(0x1899);	// @ (0x313 * 8 + 1)
#define                                 CCP2CAP1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CAP2>
extern volatile __bit                   CCP2CAP2            __at(0x189A);	// @ (0x313 * 8 + 2)
#define                                 CCP2CAP2_bit        _BIT_ACCESS(CCP2CAP,2)
// PIE3<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x3879);	// @ (0x70F * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR3,1)
// PMD1<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x3CBF);	// @ (0x797 * 8 + 7)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD1,7)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0x7510);	// @ (0xEA2 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0x7511);	// @ (0xEA2 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0x7512);	// @ (0xEA2 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0x7513);	// @ (0xEA2 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0x7514);	// @ (0xEA2 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// CCP2RL<CCP2PR0>
extern volatile __bit                   CCP2PR0             __at(0x1880);	// @ (0x310 * 8 + 0)
#define                                 CCP2PR0_bit         _BIT_ACCESS(CCP2RL,0)
// CCP2RL<CCP2PR1>
extern volatile __bit                   CCP2PR1             __at(0x1881);	// @ (0x310 * 8 + 1)
#define                                 CCP2PR1_bit         _BIT_ACCESS(CCP2RL,1)
// CCP2RH<CCP2PR10>
extern volatile __bit                   CCP2PR10            __at(0x188A);	// @ (0x311 * 8 + 2)
#define                                 CCP2PR10_bit        _BIT_ACCESS(CCP2RH,2)
// CCP2RH<CCP2PR11>
extern volatile __bit                   CCP2PR11            __at(0x188B);	// @ (0x311 * 8 + 3)
#define                                 CCP2PR11_bit        _BIT_ACCESS(CCP2RH,3)
// CCP2RH<CCP2PR12>
extern volatile __bit                   CCP2PR12            __at(0x188C);	// @ (0x311 * 8 + 4)
#define                                 CCP2PR12_bit        _BIT_ACCESS(CCP2RH,4)
// CCP2RH<CCP2PR13>
extern volatile __bit                   CCP2PR13            __at(0x188D);	// @ (0x311 * 8 + 5)
#define                                 CCP2PR13_bit        _BIT_ACCESS(CCP2RH,5)
// CCP2RH<CCP2PR14>
extern volatile __bit                   CCP2PR14            __at(0x188E);	// @ (0x311 * 8 + 6)
#define                                 CCP2PR14_bit        _BIT_ACCESS(CCP2RH,6)
// CCP2RH<CCP2PR15>
extern volatile __bit                   CCP2PR15            __at(0x188F);	// @ (0x311 * 8 + 7)
#define                                 CCP2PR15_bit        _BIT_ACCESS(CCP2RH,7)
// CCP2RL<CCP2PR2>
extern volatile __bit                   CCP2PR2             __at(0x1882);	// @ (0x310 * 8 + 2)
#define                                 CCP2PR2_bit         _BIT_ACCESS(CCP2RL,2)
// CCP2RL<CCP2PR3>
extern volatile __bit                   CCP2PR3             __at(0x1883);	// @ (0x310 * 8 + 3)
#define                                 CCP2PR3_bit         _BIT_ACCESS(CCP2RL,3)
// CCP2RL<CCP2PR4>
extern volatile __bit                   CCP2PR4             __at(0x1884);	// @ (0x310 * 8 + 4)
#define                                 CCP2PR4_bit         _BIT_ACCESS(CCP2RL,4)
// CCP2RL<CCP2PR5>
extern volatile __bit                   CCP2PR5             __at(0x1885);	// @ (0x310 * 8 + 5)
#define                                 CCP2PR5_bit         _BIT_ACCESS(CCP2RL,5)
// CCP2RL<CCP2PR6>
extern volatile __bit                   CCP2PR6             __at(0x1886);	// @ (0x310 * 8 + 6)
#define                                 CCP2PR6_bit         _BIT_ACCESS(CCP2RL,6)
// CCP2RL<CCP2PR7>
extern volatile __bit                   CCP2PR7             __at(0x1887);	// @ (0x310 * 8 + 7)
#define                                 CCP2PR7_bit         _BIT_ACCESS(CCP2RL,7)
// CCP2RH<CCP2PR8>
extern volatile __bit                   CCP2PR8             __at(0x1888);	// @ (0x311 * 8 + 0)
#define                                 CCP2PR8_bit         _BIT_ACCESS(CCP2RH,0)
// CCP2RH<CCP2PR9>
extern volatile __bit                   CCP2PR9             __at(0x1889);	// @ (0x311 * 8 + 1)
#define                                 CCP2PR9_bit         _BIT_ACCESS(CCP2RH,1)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x4473);	// @ (0x88E * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// ADCON0<CHS0>
extern volatile __bit                   CHS0                __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 CHS0_bit            _BIT_ACCESS(ADCON0,2)
// ADCON0<CHS1>
extern volatile __bit                   CHS1                __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 CHS1_bit            _BIT_ACCESS(ADCON0,3)
// ADCON0<CHS2>
extern volatile __bit                   CHS2                __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 CHS2_bit            _BIT_ACCESS(ADCON0,4)
// ADCON0<CHS3>
extern volatile __bit                   CHS3                __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 CHS3_bit            _BIT_ACCESS(ADCON0,5)
// ADCON0<CHS4>
extern volatile __bit                   CHS4                __at(0x476);	// @ (0x8E * 8 + 6)
#define                                 CHS4_bit            _BIT_ACCESS(ADCON0,6)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// T2HLT<CKPOL>
extern volatile __bit                   CKPOL               __at(0x147E);	// @ (0x28F * 8 + 6)
#define                                 CKPOL_bit           _BIT_ACCESS(T2HLT,6)
// T2HLT<CKSYNC>
extern volatile __bit                   CKSYNC              __at(0x147D);	// @ (0x28F * 8 + 5)
#define                                 CKSYNC_bit          _BIT_ACCESS(T2HLT,5)
// PIE3<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE3,4)
// PIR3<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x387C);	// @ (0x70F * 8 + 4)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR3,4)
// PMD2<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD2,0)
// PIE3<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE3,5)
// PIR3<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x387D);	// @ (0x70F * 8 + 5)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR3,5)
// PMD2<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD2,1)
// TST_PPSIN3<CLCIN0>
extern volatile __bit                   CLCIN0              __at(0x7690);	// @ (0xED2 * 8 + 0)
#define                                 CLCIN0_bit          _BIT_ACCESS(TST_PPSIN3,0)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0x75D8);	// @ (0xEBB * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0x75D9);	// @ (0xEBB * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0x75DA);	// @ (0xEBB * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0x75DB);	// @ (0xEBB * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0x75DC);	// @ (0xEBB * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// TST_PPSIN3<CLCIN1>
extern volatile __bit                   CLCIN1              __at(0x7691);	// @ (0xED2 * 8 + 1)
#define                                 CLCIN1_bit          _BIT_ACCESS(TST_PPSIN3,1)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0x75E0);	// @ (0xEBC * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0x75E1);	// @ (0xEBC * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0x75E2);	// @ (0xEBC * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0x75E3);	// @ (0xEBC * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0x75E4);	// @ (0xEBC * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// TST_PPSIN3<CLCIN2>
extern volatile __bit                   CLCIN2              __at(0x7692);	// @ (0xED2 * 8 + 2)
#define                                 CLCIN2_bit          _BIT_ACCESS(TST_PPSIN3,2)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0x75E8);	// @ (0xEBD * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0x75E9);	// @ (0xEBD * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0x75EA);	// @ (0xEBD * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0x75EB);	// @ (0xEBD * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0x75EC);	// @ (0xEBD * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// TST_PPSIN3<CLCIN3>
extern volatile __bit                   CLCIN3              __at(0x7693);	// @ (0xED2 * 8 + 3)
#define                                 CLCIN3_bit          _BIT_ACCESS(TST_PPSIN3,3)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0x75F0);	// @ (0xEBE * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0x75F1);	// @ (0xEBE * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0x75F2);	// @ (0xEBE * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0x75F3);	// @ (0xEBE * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0x75F4);	// @ (0xEBE * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// CLKRFRZ<CLKRFRZEN>
extern volatile __bit                   CLKRFRZEN           __at(0x7C90);	// @ (0xF92 * 8 + 0)
#define                                 CLKRFRZEN_bit       _BIT_ACCESS(CLKRFRZ,0)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x4474);	// @ (0x88E * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x4475);	// @ (0x88E * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x20F7);	// @ (0x41E * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x20F6);	// @ (0x41E * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE1<CRCIE>
extern volatile __bit                   CRCIE               __at(0x38BE);	// @ (0x717 * 8 + 6)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE1,6)
// PIR1<CRCIF>
extern volatile __bit                   CRCIF               __at(0x386E);	// @ (0x70D * 8 + 6)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR1,6)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x3CB4);	// @ (0x796 * 8 + 4)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,4)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0x8EC);	// @ (0x11D * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0x8F7);	// @ (0x11E * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x38BB);	// @ (0x717 * 8 + 3)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,3)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x386B);	// @ (0x70D * 8 + 3)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,3)
// STATUS_SHAD<C_SHAD>
extern volatile __bit                   C_SHAD              __at(0x7F20);	// @ (0xFE4 * 8 + 0)
#define                                 C_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,0)
// SSP1STAT<DA>
extern volatile __bit                   DA                  __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// CRCDATL<DATA0>
extern volatile __bit                   DATA0               __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DATA1>
extern volatile __bit                   DATA1               __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DATA10>
extern volatile __bit                   DATA10              __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DATA11>
extern volatile __bit                   DATA11              __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DATA12>
extern volatile __bit                   DATA12              __at(0x20BC);	// @ (0x417 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DATA13>
extern volatile __bit                   DATA13              __at(0x20BD);	// @ (0x417 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DATA14>
extern volatile __bit                   DATA14              __at(0x20BE);	// @ (0x417 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DATA15>
extern volatile __bit                   DATA15              __at(0x20BF);	// @ (0x417 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DATA2>
extern volatile __bit                   DATA2               __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DATA3>
extern volatile __bit                   DATA3               __at(0x20B3);	// @ (0x416 * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DATA4>
extern volatile __bit                   DATA4               __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DATA5>
extern volatile __bit                   DATA5               __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DATA6>
extern volatile __bit                   DATA6               __at(0x20B6);	// @ (0x416 * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DATA7>
extern volatile __bit                   DATA7               __at(0x20B7);	// @ (0x416 * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DATA8>
extern volatile __bit                   DATA8               __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DATA9>
extern volatile __bit                   DATA9               __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATH,1)
// SSP1STAT<DATA_ADDRESS>
extern volatile __bit                   DATA_ADDRESS        __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS_bit    _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// ICDINSTL<DBGIN0>
extern volatile __bit                   DBGIN0              __at(0x7CB0);	// @ (0xF96 * 8 + 0)
#define                                 DBGIN0_bit          _BIT_ACCESS(ICDINSTL,0)
// ICDINSTL<DBGIN1>
extern volatile __bit                   DBGIN1              __at(0x7CB1);	// @ (0xF96 * 8 + 1)
#define                                 DBGIN1_bit          _BIT_ACCESS(ICDINSTL,1)
// ICDINSTH<DBGIN10>
extern volatile __bit                   DBGIN10             __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 DBGIN10_bit         _BIT_ACCESS(ICDINSTH,2)
// ICDINSTH<DBGIN11>
extern volatile __bit                   DBGIN11             __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 DBGIN11_bit         _BIT_ACCESS(ICDINSTH,3)
// ICDINSTH<DBGIN12>
extern volatile __bit                   DBGIN12             __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 DBGIN12_bit         _BIT_ACCESS(ICDINSTH,4)
// ICDINSTH<DBGIN13>
extern volatile __bit                   DBGIN13             __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 DBGIN13_bit         _BIT_ACCESS(ICDINSTH,5)
// ICDINSTL<DBGIN2>
extern volatile __bit                   DBGIN2              __at(0x7CB2);	// @ (0xF96 * 8 + 2)
#define                                 DBGIN2_bit          _BIT_ACCESS(ICDINSTL,2)
// ICDINSTL<DBGIN3>
extern volatile __bit                   DBGIN3              __at(0x7CB3);	// @ (0xF96 * 8 + 3)
#define                                 DBGIN3_bit          _BIT_ACCESS(ICDINSTL,3)
// ICDINSTL<DBGIN4>
extern volatile __bit                   DBGIN4              __at(0x7CB4);	// @ (0xF96 * 8 + 4)
#define                                 DBGIN4_bit          _BIT_ACCESS(ICDINSTL,4)
// ICDINSTL<DBGIN5>
extern volatile __bit                   DBGIN5              __at(0x7CB5);	// @ (0xF96 * 8 + 5)
#define                                 DBGIN5_bit          _BIT_ACCESS(ICDINSTL,5)
// ICDINSTL<DBGIN6>
extern volatile __bit                   DBGIN6              __at(0x7CB6);	// @ (0xF96 * 8 + 6)
#define                                 DBGIN6_bit          _BIT_ACCESS(ICDINSTL,6)
// ICDINSTL<DBGIN7>
extern volatile __bit                   DBGIN7              __at(0x7CB7);	// @ (0xF96 * 8 + 7)
#define                                 DBGIN7_bit          _BIT_ACCESS(ICDINSTL,7)
// ICDINSTH<DBGIN8>
extern volatile __bit                   DBGIN8              __at(0x7CB8);	// @ (0xF97 * 8 + 0)
#define                                 DBGIN8_bit          _BIT_ACCESS(ICDINSTH,0)
// ICDINSTH<DBGIN9>
extern volatile __bit                   DBGIN9              __at(0x7CB9);	// @ (0xF97 * 8 + 1)
#define                                 DBGIN9_bit          _BIT_ACCESS(ICDINSTH,1)
// ICDCON0<DBGINEX>
extern volatile __bit                   DBGINEX             __at(0x7C6B);	// @ (0xF8D * 8 + 3)
#define                                 DBGINEX_bit         _BIT_ACCESS(ICDCON0,3)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// ICDDC<DCEN>
extern volatile __bit                   DCEN                __at(0x7C77);	// @ (0xF8E * 8 + 7)
#define                                 DCEN_bit            _BIT_ACCESS(ICDDC,7)
// ICDBP0CON<DCMP>
extern volatile __bit                   DCMP                __at(0x7CE4);	// @ (0xF9C * 8 + 4)
#define                                 DCMP_bit            _BIT_ACCESS(ICDBP0CON,4)
// PMD4<DCOMPMD>
extern volatile __bit                   DCOMPMD             __at(0x3CD2);	// @ (0x79A * 8 + 2)
#define                                 DCOMPMD_bit         _BIT_ACCESS(PMD4,2)
// TST_PPSIN3<DCPHLD>
extern volatile __bit                   DCPHLD              __at(0x7697);	// @ (0xED2 * 8 + 7)
#define                                 DCPHLD_bit          _BIT_ACCESS(TST_PPSIN3,7)
// STATUS_SHAD<DC_SHAD>
extern volatile __bit                   DC_SHAD             __at(0x7F21);	// @ (0xFE4 * 8 + 1)
#define                                 DC_SHAD_bit         _BIT_ACCESS(STATUS_SHAD,1)
// DEMCON<DEMEN>
extern volatile __bit                   DEMEN               __at(0x1CDF);	// @ (0x39B * 8 + 7)
#define                                 DEMEN_bit           _BIT_ACCESS(DEMCON,7)
// PIE7<DEMIE>
extern volatile __bit                   DEMIE               __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 DEMIE_bit           _BIT_ACCESS(PIE7,0)
// PIR7<DEMIF>
extern volatile __bit                   DEMIF               __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 DEMIF_bit           _BIT_ACCESS(PIR7,0)
// PMD4<DEMMD>
extern volatile __bit                   DEMMD               __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 DEMMD_bit           _BIT_ACCESS(PMD4,6)
// DEMCON<DEMOUT>
extern volatile __bit                   DEMOUT              __at(0x1CDD);	// @ (0x39B * 8 + 5)
#define                                 DEMOUT_bit          _BIT_ACCESS(DEMCON,5)
// DEMCON<DEMPOL>
extern volatile __bit                   DEMPOL              __at(0x1CDC);	// @ (0x39B * 8 + 4)
#define                                 DEMPOL_bit          _BIT_ACCESS(DEMCON,4)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0xC90);	// @ (0x192 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// SWFRQCON<DITHER>
extern volatile __bit                   DITHER              __at(0x1C66);	// @ (0x38C * 8 + 6)
#define                                 DITHER_bit          _BIT_ACCESS(SWFRQCON,6)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x20FC);	// @ (0x41F * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x20FD);	// @ (0x41F * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x20FE);	// @ (0x41F * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x20FF);	// @ (0x41F * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// SWFRQCON<DLLDIS>
extern volatile __bit                   DLLDIS              __at(0x1C65);	// @ (0x38C * 8 + 5)
#define                                 DLLDIS_bit          _BIT_ACCESS(SWFRQCON,5)
// PIE1<DMAIE>
extern volatile __bit                   DMAIE               __at(0x38BF);	// @ (0x717 * 8 + 7)
#define                                 DMAIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<DMAIF>
extern volatile __bit                   DMAIF               __at(0x386F);	// @ (0x70D * 8 + 7)
#define                                 DMAIF_bit           _BIT_ACCESS(PIR1,7)
// TST_DMAL<DMA_DATA0>
extern volatile __bit                   DMA_DATA0           __at(0x6C68);	// @ (0xD8D * 8 + 0)
#define                                 DMA_DATA0_bit       _BIT_ACCESS(TST_DMAL,0)
// TST_DMAL<DMA_DATA1>
extern volatile __bit                   DMA_DATA1           __at(0x6C69);	// @ (0xD8D * 8 + 1)
#define                                 DMA_DATA1_bit       _BIT_ACCESS(TST_DMAL,1)
// TST_DMAH<DMA_DATA10>
extern volatile __bit                   DMA_DATA10          __at(0x6C62);	// @ (0xD8C * 8 + 2)
#define                                 DMA_DATA10_bit      _BIT_ACCESS(TST_DMAH,2)
// TST_DMAH<DMA_DATA11>
extern volatile __bit                   DMA_DATA11          __at(0x6C63);	// @ (0xD8C * 8 + 3)
#define                                 DMA_DATA11_bit      _BIT_ACCESS(TST_DMAH,3)
// TST_DMAH<DMA_DATA12>
extern volatile __bit                   DMA_DATA12          __at(0x6C64);	// @ (0xD8C * 8 + 4)
#define                                 DMA_DATA12_bit      _BIT_ACCESS(TST_DMAH,4)
// TST_DMAH<DMA_DATA13>
extern volatile __bit                   DMA_DATA13          __at(0x6C65);	// @ (0xD8C * 8 + 5)
#define                                 DMA_DATA13_bit      _BIT_ACCESS(TST_DMAH,5)
// TST_DMAH<DMA_DATA14>
extern volatile __bit                   DMA_DATA14          __at(0x6C66);	// @ (0xD8C * 8 + 6)
#define                                 DMA_DATA14_bit      _BIT_ACCESS(TST_DMAH,6)
// TST_DMAH<DMA_DATA15>
extern volatile __bit                   DMA_DATA15          __at(0x6C67);	// @ (0xD8C * 8 + 7)
#define                                 DMA_DATA15_bit      _BIT_ACCESS(TST_DMAH,7)
// TST_DMAL<DMA_DATA2>
extern volatile __bit                   DMA_DATA2           __at(0x6C6A);	// @ (0xD8D * 8 + 2)
#define                                 DMA_DATA2_bit       _BIT_ACCESS(TST_DMAL,2)
// TST_DMAL<DMA_DATA3>
extern volatile __bit                   DMA_DATA3           __at(0x6C6B);	// @ (0xD8D * 8 + 3)
#define                                 DMA_DATA3_bit       _BIT_ACCESS(TST_DMAL,3)
// TST_DMAL<DMA_DATA4>
extern volatile __bit                   DMA_DATA4           __at(0x6C6C);	// @ (0xD8D * 8 + 4)
#define                                 DMA_DATA4_bit       _BIT_ACCESS(TST_DMAL,4)
// TST_DMAL<DMA_DATA5>
extern volatile __bit                   DMA_DATA5           __at(0x6C6D);	// @ (0xD8D * 8 + 5)
#define                                 DMA_DATA5_bit       _BIT_ACCESS(TST_DMAL,5)
// TST_DMAL<DMA_DATA6>
extern volatile __bit                   DMA_DATA6           __at(0x6C6E);	// @ (0xD8D * 8 + 6)
#define                                 DMA_DATA6_bit       _BIT_ACCESS(TST_DMAL,6)
// TST_DMAL<DMA_DATA7>
extern volatile __bit                   DMA_DATA7           __at(0x6C6F);	// @ (0xD8D * 8 + 7)
#define                                 DMA_DATA7_bit       _BIT_ACCESS(TST_DMAL,7)
// TST_DMAH<DMA_DATA8>
extern volatile __bit                   DMA_DATA8           __at(0x6C60);	// @ (0xD8C * 8 + 0)
#define                                 DMA_DATA8_bit       _BIT_ACCESS(TST_DMAH,0)
// TST_DMAH<DMA_DATA9>
extern volatile __bit                   DMA_DATA9           __at(0x6C61);	// @ (0xD8C * 8 + 1)
#define                                 DMA_DATA9_bit       _BIT_ACCESS(TST_DMAH,1)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x4464);	// @ (0x88C * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// DOUTL<DOUT0>
extern volatile __bit                   DOUT0               __at(0x48D2);	// @ (0x91A * 8 + 2)
#define                                 DOUT0_bit           _BIT_ACCESS(DOUTL,2)
// DOUTL<DOUT1>
extern volatile __bit                   DOUT1               __at(0x48D3);	// @ (0x91A * 8 + 3)
#define                                 DOUT1_bit           _BIT_ACCESS(DOUTL,3)
// DOUTH<DOUT10>
extern volatile __bit                   DOUT10              __at(0x48CC);	// @ (0x919 * 8 + 4)
#define                                 DOUT10_bit          _BIT_ACCESS(DOUTH,4)
// DOUTH<DOUT11>
extern volatile __bit                   DOUT11              __at(0x48CD);	// @ (0x919 * 8 + 5)
#define                                 DOUT11_bit          _BIT_ACCESS(DOUTH,5)
// DOUTH<DOUT12>
extern volatile __bit                   DOUT12              __at(0x48CE);	// @ (0x919 * 8 + 6)
#define                                 DOUT12_bit          _BIT_ACCESS(DOUTH,6)
// DOUTH<DOUT13>
extern volatile __bit                   DOUT13              __at(0x48CF);	// @ (0x919 * 8 + 7)
#define                                 DOUT13_bit          _BIT_ACCESS(DOUTH,7)
// DOUTL<DOUT2>
extern volatile __bit                   DOUT2               __at(0x48D4);	// @ (0x91A * 8 + 4)
#define                                 DOUT2_bit           _BIT_ACCESS(DOUTL,4)
// DOUTL<DOUT3>
extern volatile __bit                   DOUT3               __at(0x48D5);	// @ (0x91A * 8 + 5)
#define                                 DOUT3_bit           _BIT_ACCESS(DOUTL,5)
// DOUTL<DOUT4>
extern volatile __bit                   DOUT4               __at(0x48D6);	// @ (0x91A * 8 + 6)
#define                                 DOUT4_bit           _BIT_ACCESS(DOUTL,6)
// DOUTL<DOUT5>
extern volatile __bit                   DOUT5               __at(0x48D7);	// @ (0x91A * 8 + 7)
#define                                 DOUT5_bit           _BIT_ACCESS(DOUTL,7)
// DOUTH<DOUT6>
extern volatile __bit                   DOUT6               __at(0x48C8);	// @ (0x919 * 8 + 0)
#define                                 DOUT6_bit           _BIT_ACCESS(DOUTH,0)
// DOUTH<DOUT7>
extern volatile __bit                   DOUT7               __at(0x48C9);	// @ (0x919 * 8 + 1)
#define                                 DOUT7_bit           _BIT_ACCESS(DOUTH,1)
// DOUTH<DOUT8>
extern volatile __bit                   DOUT8               __at(0x48CA);	// @ (0x919 * 8 + 2)
#define                                 DOUT8_bit           _BIT_ACCESS(DOUTH,2)
// DOUTH<DOUT9>
extern volatile __bit                   DOUT9               __at(0x48CB);	// @ (0x919 * 8 + 3)
#define                                 DOUT9_bit           _BIT_ACCESS(DOUTH,3)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x4461);	// @ (0x88C * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x4462);	// @ (0x88C * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x4466);	// @ (0x88C * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// SWFRQDPS<DPS0>
extern volatile __bit                   DPS0                __at(0x1C94);	// @ (0x392 * 8 + 4)
#define                                 DPS0_bit            _BIT_ACCESS(SWFRQDPS,4)
// SWFRQDPS<DPS1>
extern volatile __bit                   DPS1                __at(0x1C95);	// @ (0x392 * 8 + 5)
#define                                 DPS1_bit            _BIT_ACCESS(SWFRQDPS,5)
// SWFRQDPS<DPS2>
extern volatile __bit                   DPS2                __at(0x1C96);	// @ (0x392 * 8 + 6)
#define                                 DPS2_bit            _BIT_ACCESS(SWFRQDPS,6)
// SWFRQDPS<DRANGE>
extern volatile __bit                   DRANGE              __at(0x1C97);	// @ (0x392 * 8 + 7)
#define                                 DRANGE_bit          _BIT_ACCESS(SWFRQDPS,7)
// DRVCON0<DRVCTL>
extern volatile __bit                   DRVCTL              __at(0x1CBB);	// @ (0x397 * 8 + 3)
#define                                 DRVCTL_bit          _BIT_ACCESS(DRVCON0,3)
// DRVCON0<DRVMODE0>
extern volatile __bit                   DRVMODE0            __at(0x1CB8);	// @ (0x397 * 8 + 0)
#define                                 DRVMODE0_bit        _BIT_ACCESS(DRVCON0,0)
// DRVCON0<DRVMODE1>
extern volatile __bit                   DRVMODE1            __at(0x1CB9);	// @ (0x397 * 8 + 1)
#define                                 DRVMODE1_bit        _BIT_ACCESS(DRVCON0,1)
// DRVCON0<DRVMODE2>
extern volatile __bit                   DRVMODE2            __at(0x1CBA);	// @ (0x397 * 8 + 2)
#define                                 DRVMODE2_bit        _BIT_ACCESS(DRVCON0,2)
// DRVCON0<DTSEL0>
extern volatile __bit                   DTSEL0              __at(0x1CBC);	// @ (0x397 * 8 + 4)
#define                                 DTSEL0_bit          _BIT_ACCESS(DRVCON0,4)
// DRVCON0<DTSEL1>
extern volatile __bit                   DTSEL1              __at(0x1CBD);	// @ (0x397 * 8 + 5)
#define                                 DTSEL1_bit          _BIT_ACCESS(DRVCON0,5)
// ICDDC<DTSTAT>
extern volatile __bit                   DTSTAT              __at(0x7C75);	// @ (0xF8E * 8 + 5)
#define                                 DTSTAT_bit          _BIT_ACCESS(ICDDC,5)
// SSP1STAT<D_A>
extern volatile __bit                   D_A                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0x8EA);	// @ (0x11D * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x40F4);	// @ (0x81E * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// ICDCON0<FREEZE>
extern volatile __bit                   FREEZE              __at(0x7C6E);	// @ (0xF8D * 8 + 6)
#define                                 FREEZE_bit          _BIT_ACCESS(ICDCON0,6)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x20F0);	// @ (0x41E * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVR1OK>
extern volatile __bit                   FVR1OK              __at(0x1CE3);	// @ (0x39C * 8 + 3)
#define                                 FVR1OK_bit          _BIT_ACCESS(FVRCON,3)
// FVRCON<FVR2OK>
extern volatile __bit                   FVR2OK              __at(0x1CE2);	// @ (0x39C * 8 + 2)
#define                                 FVR2OK_bit          _BIT_ACCESS(FVRCON,2)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x1CE7);	// @ (0x39C * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PIE0<FVRIE>
extern volatile __bit                   FVRIE               __at(0x38B6);	// @ (0x716 * 8 + 6)
#define                                 FVRIE_bit           _BIT_ACCESS(PIE0,6)
// PIR0<FVRIF>
extern volatile __bit                   FVRIF               __at(0x3866);	// @ (0x70C * 8 + 6)
#define                                 FVRIF_bit           _BIT_ACCESS(PIR0,6)
// FVRCON<FVRINTN>
extern volatile __bit                   FVRINTN             __at(0x1CE0);	// @ (0x39C * 8 + 0)
#define                                 FVRINTN_bit         _BIT_ACCESS(FVRCON,0)
// FVRCON<FVRINTP>
extern volatile __bit                   FVRINTP             __at(0x1CE1);	// @ (0x39C * 8 + 1)
#define                                 FVRINTP_bit         _BIT_ACCESS(FVRCON,1)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x1CE6);	// @ (0x39C * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// IVMCON0<GOnDONE>
extern volatile __bit                   GOnDONE             __at(0x2879);	// @ (0x50F * 8 + 1)
#define                                 GOnDONE_bit         _BIT_ACCESS(IVMCON0,1)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x2070);	// @ (0x40E * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x2071);	// @ (0x40E * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x207A);	// @ (0x40F * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x207B);	// @ (0x40F * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x207C);	// @ (0x40F * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x207D);	// @ (0x40F * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x207E);	// @ (0x40F * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x207F);	// @ (0x40F * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x2072);	// @ (0x40E * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x2073);	// @ (0x40E * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x2076);	// @ (0x40E * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x2078);	// @ (0x40F * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x2079);	// @ (0x40F * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// OSCFREQ<HFFRQ0>
extern volatile __bit                   HFFRQ0              __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 HFFRQ0_bit          _BIT_ACCESS(OSCFREQ,0)
// OSCFREQ<HFFRQ1>
extern volatile __bit                   HFFRQ1              __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 HFFRQ1_bit          _BIT_ACCESS(OSCFREQ,1)
// OSCFREQ<HFFRQ2>
extern volatile __bit                   HFFRQ2              __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 HFFRQ2_bit          _BIT_ACCESS(OSCFREQ,2)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x448E);	// @ (0x891 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT1<HFOR>
extern volatile __bit                   HFOR                __at(0x4486);	// @ (0x890 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT1,6)
// OSCTUNE<HFTUN0>
extern volatile __bit                   HFTUN0              __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 HFTUN0_bit          _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<HFTUN1>
extern volatile __bit                   HFTUN1              __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 HFTUN1_bit          _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<HFTUN2>
extern volatile __bit                   HFTUN2              __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 HFTUN2_bit          _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<HFTUN3>
extern volatile __bit                   HFTUN3              __at(0x4493);	// @ (0x892 * 8 + 3)
#define                                 HFTUN3_bit          _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<HFTUN4>
extern volatile __bit                   HFTUN4              __at(0x4494);	// @ (0x892 * 8 + 4)
#define                                 HFTUN4_bit          _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<HFTUN5>
extern volatile __bit                   HFTUN5              __at(0x4495);	// @ (0x892 * 8 + 5)
#define                                 HFTUN5_bit          _BIT_ACCESS(OSCTUNE,5)
// ICDDC<HLTSTAT>
extern volatile __bit                   HLTSTAT             __at(0x7C73);	// @ (0xF8E * 8 + 3)
#define                                 HLTSTAT_bit         _BIT_ACCESS(ICDDC,3)
// DRVCON0<HODIS>
extern volatile __bit                   HODIS               __at(0x1CBF);	// @ (0x397 * 8 + 7)
#define                                 HODIS_bit           _BIT_ACCESS(DRVCON0,7)
// DCOMPCON1<HOLD>
extern volatile __bit                   HOLD                __at(0x4887);	// @ (0x910 * 8 + 7)
#define                                 HOLD_bit            _BIT_ACCESS(DCOMPCON1,7)
// DRVCON2<HOLDEH>
extern volatile __bit                   HOLDEH              __at(0x1CCF);	// @ (0x399 * 8 + 7)
#define                                 HOLDEH_bit          _BIT_ACCESS(DRVCON2,7)
// DRVCON1<HOLDEL>
extern volatile __bit                   HOLDEL              __at(0x1CC7);	// @ (0x398 * 8 + 7)
#define                                 HOLDEL_bit          _BIT_ACCESS(DRVCON1,7)
// DCOMPCON1<HOLDM0>
extern volatile __bit                   HOLDM0              __at(0x4883);	// @ (0x910 * 8 + 3)
#define                                 HOLDM0_bit          _BIT_ACCESS(DCOMPCON1,3)
// DCOMPCON1<HOLDM1>
extern volatile __bit                   HOLDM1              __at(0x4884);	// @ (0x910 * 8 + 4)
#define                                 HOLDM1_bit          _BIT_ACCESS(DCOMPCON1,4)
// DCOMPCON1<HOLDM2>
extern volatile __bit                   HOLDM2              __at(0x4885);	// @ (0x910 * 8 + 5)
#define                                 HOLDM2_bit          _BIT_ACCESS(DCOMPCON1,5)
// DCOMPCON1<HOLDOVR>
extern volatile __bit                   HOLDOVR             __at(0x4886);	// @ (0x910 * 8 + 6)
#define                                 HOLDOVR_bit         _BIT_ACCESS(DCOMPCON1,6)
// SSP1STAT<I2C_DAT>
extern volatile __bit                   I2C_DAT             __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT_bit         _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_READ>
extern volatile __bit                   I2C_READ            __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_START>
extern volatile __bit                   I2C_START           __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START_bit       _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_STOP>
extern volatile __bit                   I2C_STOP            __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 I2C_STOP_bit        _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<I2C_STOP2>
extern volatile __bit                   I2C_STOP2           __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 I2C_STOP2_bit       _BIT_ACCESS(SSP1STAT,4)
// ICDIO<ICD_SLRC>
extern volatile __bit                   ICD_SLRC            __at(0x7C60);	// @ (0xF8C * 8 + 0)
#define                                 ICD_SLRC_bit        _BIT_ACCESS(ICDIO,0)
// PMD3<ICMMD>
extern volatile __bit                   ICMMD               __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 ICMMD_bit           _BIT_ACCESS(PMD3,0)
// ICMOCCON<ICMOC>
extern volatile __bit                   ICMOC               __at(0x28D6);	// @ (0x51A * 8 + 6)
#define                                 ICMOC_bit           _BIT_ACCESS(ICMOCCON,6)
// ICMCON1<ICMOCCNT0>
extern volatile __bit                   ICMOCCNT0           __at(0x2895);	// @ (0x512 * 8 + 5)
#define                                 ICMOCCNT0_bit       _BIT_ACCESS(ICMCON1,5)
// ICMCON1<ICMOCCNT1>
extern volatile __bit                   ICMOCCNT1           __at(0x2896);	// @ (0x512 * 8 + 6)
#define                                 ICMOCCNT1_bit       _BIT_ACCESS(ICMCON1,6)
// ICMCON1<ICMOCCNT2>
extern volatile __bit                   ICMOCCNT2           __at(0x2897);	// @ (0x512 * 8 + 7)
#define                                 ICMOCCNT2_bit       _BIT_ACCESS(ICMCON1,7)
// DCOMPCON1<ICMOCFE>
extern volatile __bit                   ICMOCFE             __at(0x4882);	// @ (0x910 * 8 + 2)
#define                                 ICMOCFE_bit         _BIT_ACCESS(DCOMPCON1,2)
// DRVCON2<ICMOCFEH>
extern volatile __bit                   ICMOCFEH            __at(0x1CCA);	// @ (0x399 * 8 + 2)
#define                                 ICMOCFEH_bit        _BIT_ACCESS(DRVCON2,2)
// DRVCON1<ICMOCFEL>
extern volatile __bit                   ICMOCFEL            __at(0x1CC2);	// @ (0x398 * 8 + 2)
#define                                 ICMOCFEL_bit        _BIT_ACCESS(DRVCON1,2)
// PIE6<ICMOCIE>
extern volatile __bit                   ICMOCIE             __at(0x38E1);	// @ (0x71C * 8 + 1)
#define                                 ICMOCIE_bit         _BIT_ACCESS(PIE6,1)
// PIR6<ICMOCIF>
extern volatile __bit                   ICMOCIF             __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 ICMOCIF_bit         _BIT_ACCESS(PIR6,1)
// ICMCON1<ICMOCLAT>
extern volatile __bit                   ICMOCLAT            __at(0x2894);	// @ (0x512 * 8 + 4)
#define                                 ICMOCLAT_bit        _BIT_ACCESS(ICMCON1,4)
// ICMOCCON<ICMOCON>
extern volatile __bit                   ICMOCON             __at(0x28D7);	// @ (0x51A * 8 + 7)
#define                                 ICMOCON_bit         _BIT_ACCESS(ICMOCCON,7)
// ICMCON1<ICMOCRINT>
extern volatile __bit                   ICMOCRINT           __at(0x2893);	// @ (0x512 * 8 + 3)
#define                                 ICMOCRINT_bit       _BIT_ACCESS(ICMCON1,3)
// ICMOCCON<ICMOCSEL0>
extern volatile __bit                   ICMOCSEL0           __at(0x28D0);	// @ (0x51A * 8 + 0)
#define                                 ICMOCSEL0_bit       _BIT_ACCESS(ICMOCCON,0)
// ICMOCCON<ICMOCSEL1>
extern volatile __bit                   ICMOCSEL1           __at(0x28D1);	// @ (0x51A * 8 + 1)
#define                                 ICMOCSEL1_bit       _BIT_ACCESS(ICMOCCON,1)
// ICMOCCON<ICMOCSEL2>
extern volatile __bit                   ICMOCSEL2           __at(0x28D2);	// @ (0x51A * 8 + 2)
#define                                 ICMOCSEL2_bit       _BIT_ACCESS(ICMOCCON,2)
// ICMOCCON<ICMOCSEL3>
extern volatile __bit                   ICMOCSEL3           __at(0x28D3);	// @ (0x51A * 8 + 3)
#define                                 ICMOCSEL3_bit       _BIT_ACCESS(ICMOCCON,3)
// ICMOCCON<ICMOCSEL4>
extern volatile __bit                   ICMOCSEL4           __at(0x28D4);	// @ (0x51A * 8 + 4)
#define                                 ICMOCSEL4_bit       _BIT_ACCESS(ICMOCCON,4)
// DCOMPCON0<ICOMPEN>
extern volatile __bit                   ICOMPEN             __at(0x487F);	// @ (0x90F * 8 + 7)
#define                                 ICOMPEN_bit         _BIT_ACCESS(DCOMPCON0,7)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x4467);	// @ (0x88C * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// ICDCON0<INBUG>
extern volatile __bit                   INBUG               __at(0x7C6F);	// @ (0xF8D * 8 + 7)
#define                                 INBUG_bit           _BIT_ACCESS(ICDCON0,7)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x79E0);	// @ (0xF3C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x79E1);	// @ (0xF3C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x79E2);	// @ (0xF3C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x79E3);	// @ (0xF3C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0x7A38);	// @ (0xF47 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0x7A39);	// @ (0xF47 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0x7A3A);	// @ (0xF47 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0x7A3B);	// @ (0xF47 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0x7A3C);	// @ (0xF47 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0x7A3D);	// @ (0xF47 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0x7A3E);	// @ (0xF47 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0x7A3F);	// @ (0xF47 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x7A92);	// @ (0xF52 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x7A93);	// @ (0xF52 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x7A94);	// @ (0xF52 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x7A95);	// @ (0xF52 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0x7A96);	// @ (0xF52 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0x7A97);	// @ (0xF52 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// TST_PPSIN1<INT>
extern volatile __bit                   INT                 __at(0x7680);	// @ (0xED0 * 8 + 0)
#define                                 INT_bit             _BIT_ACCESS(TST_PPSIN1,0)
// PIE0<INT0IE>
extern volatile __bit                   INT0IE              __at(0x38B0);	// @ (0x716 * 8 + 0)
#define                                 INT0IE_bit          _BIT_ACCESS(PIE0,0)
// PIR0<INT0IF>
extern volatile __bit                   INT0IF              __at(0x3860);	// @ (0x70C * 8 + 0)
#define                                 INT0IF_bit          _BIT_ACCESS(PIR0,0)
// INTCON<INTEDG>
extern volatile __bit                   INTEDG              __at(0x58);	// @ (0xB * 8 + 0)
#define                                 INTEDG_bit          _BIT_ACCESS(INTCON,0)
// SCANCON0<INTM>
extern volatile __bit                   INTM                __at(0x2083);	// @ (0x410 * 8 + 3)
#define                                 INTM_bit            _BIT_ACCESS(SCANCON0,3)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0x7480);	// @ (0xE90 * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0x7481);	// @ (0xE90 * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0x7482);	// @ (0xE90 * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0x7483);	// @ (0xE90 * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// SCANCON0<INVALID>
extern volatile __bit                   INVALID             __at(0x2084);	// @ (0x410 * 8 + 4)
#define                                 INVALID_bit         _BIT_ACCESS(SCANCON0,4)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x79F8);	// @ (0xF3F * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x79F9);	// @ (0xF3F * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x79FA);	// @ (0xF3F * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x79FB);	// @ (0xF3F * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x79F0);	// @ (0xF3E * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x79F1);	// @ (0xF3E * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x79F2);	// @ (0xF3E * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x79F3);	// @ (0xF3E * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x79E8);	// @ (0xF3D * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x79E9);	// @ (0xF3D * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x79EA);	// @ (0xF3D * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x79EB);	// @ (0xF3D * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0x7A50);	// @ (0xF4A * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0x7A51);	// @ (0xF4A * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0x7A52);	// @ (0xF4A * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0x7A53);	// @ (0xF4A * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0x7A54);	// @ (0xF4A * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0x7A55);	// @ (0xF4A * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0x7A56);	// @ (0xF4A * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0x7A57);	// @ (0xF4A * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0x7A48);	// @ (0xF49 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0x7A49);	// @ (0xF49 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0x7A4A);	// @ (0xF49 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0x7A4B);	// @ (0xF49 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0x7A4C);	// @ (0xF49 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0x7A4D);	// @ (0xF49 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0x7A4E);	// @ (0xF49 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0x7A4F);	// @ (0xF49 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0x7A40);	// @ (0xF48 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0x7A41);	// @ (0xF48 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0x7A42);	// @ (0xF48 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0x7A43);	// @ (0xF48 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0x7A44);	// @ (0xF48 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0x7A45);	// @ (0xF48 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0x7A46);	// @ (0xF48 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0x7A47);	// @ (0xF48 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x7AAC);	// @ (0xF55 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x7AAD);	// @ (0xF55 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x7AAE);	// @ (0xF55 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x7AAF);	// @ (0xF55 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x7AA4);	// @ (0xF54 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x7AA5);	// @ (0xF54 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x7AA6);	// @ (0xF54 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x7AA7);	// @ (0xF54 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x7A9C);	// @ (0xF53 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x7A9D);	// @ (0xF53 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x7A9E);	// @ (0xF53 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x7A9F);	// @ (0xF53 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x38B4);	// @ (0x716 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x3864);	// @ (0x70C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// IREFL<IREF0>
extern volatile __bit                   IREF0               __at(0x48B8);	// @ (0x917 * 8 + 0)
#define                                 IREF0_bit           _BIT_ACCESS(IREFL,0)
// IREFL<IREF1>
extern volatile __bit                   IREF1               __at(0x48B9);	// @ (0x917 * 8 + 1)
#define                                 IREF1_bit           _BIT_ACCESS(IREFL,1)
// IREFL<IREF2>
extern volatile __bit                   IREF2               __at(0x48BA);	// @ (0x917 * 8 + 2)
#define                                 IREF2_bit           _BIT_ACCESS(IREFL,2)
// IREFL<IREF3>
extern volatile __bit                   IREF3               __at(0x48BB);	// @ (0x917 * 8 + 3)
#define                                 IREF3_bit           _BIT_ACCESS(IREFL,3)
// IREFL<IREF4>
extern volatile __bit                   IREF4               __at(0x48BC);	// @ (0x917 * 8 + 4)
#define                                 IREF4_bit           _BIT_ACCESS(IREFL,4)
// IREFL<IREF5>
extern volatile __bit                   IREF5               __at(0x48BD);	// @ (0x917 * 8 + 5)
#define                                 IREF5_bit           _BIT_ACCESS(IREFL,5)
// IREFL<IREF6>
extern volatile __bit                   IREF6               __at(0x48BE);	// @ (0x917 * 8 + 6)
#define                                 IREF6_bit           _BIT_ACCESS(IREFL,6)
// IREFL<IREF7>
extern volatile __bit                   IREF7               __at(0x48BF);	// @ (0x917 * 8 + 7)
#define                                 IREF7_bit           _BIT_ACCESS(IREFL,7)
// IREFH<IREF8>
extern volatile __bit                   IREF8               __at(0x48B0);	// @ (0x916 * 8 + 0)
#define                                 IREF8_bit           _BIT_ACCESS(IREFH,0)
// IREFH<IREF9>
extern volatile __bit                   IREF9               __at(0x48B1);	// @ (0x916 * 8 + 1)
#define                                 IREF9_bit           _BIT_ACCESS(IREFH,1)
// TST_ISMREAD<ISMREAD0>
extern volatile __bit                   ISMREAD0            __at(0x6C88);	// @ (0xD91 * 8 + 0)
#define                                 ISMREAD0_bit        _BIT_ACCESS(TST_ISMREAD,0)
// TST_ISMREAD<ISMREAD1>
extern volatile __bit                   ISMREAD1            __at(0x6C89);	// @ (0xD91 * 8 + 1)
#define                                 ISMREAD1_bit        _BIT_ACCESS(TST_ISMREAD,1)
// TST_ISMREAD<ISMREAD2>
extern volatile __bit                   ISMREAD2            __at(0x6C8A);	// @ (0xD91 * 8 + 2)
#define                                 ISMREAD2_bit        _BIT_ACCESS(TST_ISMREAD,2)
// TST_ISMREAD<ISMREAD3>
extern volatile __bit                   ISMREAD3            __at(0x6C8B);	// @ (0xD91 * 8 + 3)
#define                                 ISMREAD3_bit        _BIT_ACCESS(TST_ISMREAD,3)
// TST_ISMREAD<ISMREAD4>
extern volatile __bit                   ISMREAD4            __at(0x6C8C);	// @ (0xD91 * 8 + 4)
#define                                 ISMREAD4_bit        _BIT_ACCESS(TST_ISMREAD,4)
// TST_ISMREAD<ISMREAD5>
extern volatile __bit                   ISMREAD5            __at(0x6C8D);	// @ (0xD91 * 8 + 5)
#define                                 ISMREAD5_bit        _BIT_ACCESS(TST_ISMREAD,5)
// TST_ISMSTAT<ISMSTAT>
extern volatile __bit                   ISMSTAT             __at(0x6C84);	// @ (0xD90 * 8 + 4)
#define                                 ISMSTAT_bit         _BIT_ACCESS(TST_ISMSTAT,4)
// IVMCORRESL<IVM0>
extern volatile __bit                   IVM0                __at(0x28C6);	// @ (0x518 * 8 + 6)
#define                                 IVM0_bit            _BIT_ACCESS(IVMCORRESL,6)
// IVMCORRESL<IVM1>
extern volatile __bit                   IVM1                __at(0x28C7);	// @ (0x518 * 8 + 7)
#define                                 IVM1_bit            _BIT_ACCESS(IVMCORRESL,7)
// IVMCORRESH<IVM2>
extern volatile __bit                   IVM2                __at(0x28C8);	// @ (0x519 * 8 + 0)
#define                                 IVM2_bit            _BIT_ACCESS(IVMCORRESH,0)
// IVMCORRESH<IVM3>
extern volatile __bit                   IVM3                __at(0x28C9);	// @ (0x519 * 8 + 1)
#define                                 IVM3_bit            _BIT_ACCESS(IVMCORRESH,1)
// IVMCORRESH<IVM4>
extern volatile __bit                   IVM4                __at(0x28CA);	// @ (0x519 * 8 + 2)
#define                                 IVM4_bit            _BIT_ACCESS(IVMCORRESH,2)
// IVMCORRESH<IVM5>
extern volatile __bit                   IVM5                __at(0x28CB);	// @ (0x519 * 8 + 3)
#define                                 IVM5_bit            _BIT_ACCESS(IVMCORRESH,3)
// IVMCORRESH<IVM6>
extern volatile __bit                   IVM6                __at(0x28CC);	// @ (0x519 * 8 + 4)
#define                                 IVM6_bit            _BIT_ACCESS(IVMCORRESH,4)
// IVMCORRESH<IVM7>
extern volatile __bit                   IVM7                __at(0x28CD);	// @ (0x519 * 8 + 5)
#define                                 IVM7_bit            _BIT_ACCESS(IVMCORRESH,5)
// IVMCORRESH<IVM8>
extern volatile __bit                   IVM8                __at(0x28CE);	// @ (0x519 * 8 + 6)
#define                                 IVM8_bit            _BIT_ACCESS(IVMCORRESH,6)
// IVMCORRESH<IVM9>
extern volatile __bit                   IVM9                __at(0x28CF);	// @ (0x519 * 8 + 7)
#define                                 IVM9_bit            _BIT_ACCESS(IVMCORRESH,7)
// PIE6<IVMADCIE>
extern volatile __bit                   IVMADCIE            __at(0x38E6);	// @ (0x71C * 8 + 6)
#define                                 IVMADCIE_bit        _BIT_ACCESS(PIE6,6)
// PIR6<IVMADCIF>
extern volatile __bit                   IVMADCIF            __at(0x3896);	// @ (0x712 * 8 + 6)
#define                                 IVMADCIF_bit        _BIT_ACCESS(PIR6,6)
// IVMCON0<IVMCTS>
extern volatile __bit                   IVMCTS              __at(0x287B);	// @ (0x50F * 8 + 3)
#define                                 IVMCTS_bit          _BIT_ACCESS(IVMCON0,3)
// IVMCON0<IVMLT0>
extern volatile __bit                   IVMLT0              __at(0x287D);	// @ (0x50F * 8 + 5)
#define                                 IVMLT0_bit          _BIT_ACCESS(IVMCON0,5)
// IVMCON0<IVMLT1>
extern volatile __bit                   IVMLT1              __at(0x287E);	// @ (0x50F * 8 + 6)
#define                                 IVMLT1_bit          _BIT_ACCESS(IVMCON0,6)
// IVMCON0<IVMLT2>
extern volatile __bit                   IVMLT2              __at(0x287F);	// @ (0x50F * 8 + 7)
#define                                 IVMLT2_bit          _BIT_ACCESS(IVMCON0,7)
// PMD3<IVMMD>
extern volatile __bit                   IVMMD               __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 IVMMD_bit           _BIT_ACCESS(PMD3,2)
// DRVCON2<IVMOFEH>
extern volatile __bit                   IVMOFEH             __at(0x1CC9);	// @ (0x399 * 8 + 1)
#define                                 IVMOFEH_bit         _BIT_ACCESS(DRVCON2,1)
// IVMCON0<IVMON>
extern volatile __bit                   IVMON               __at(0x2878);	// @ (0x50F * 8 + 0)
#define                                 IVMON_bit           _BIT_ACCESS(IVMCON0,0)
// IVMOVUVOUT<IVMOV>
extern volatile __bit                   IVMOV               __at(0x28BD);	// @ (0x517 * 8 + 5)
#define                                 IVMOV_bit           _BIT_ACCESS(IVMOVUVOUT,5)
// IVMCON1<IVMOVCNT0>
extern volatile __bit                   IVMOVCNT0           __at(0x2885);	// @ (0x510 * 8 + 5)
#define                                 IVMOVCNT0_bit       _BIT_ACCESS(IVMCON1,5)
// IVMCON1<IVMOVCNT1>
extern volatile __bit                   IVMOVCNT1           __at(0x2886);	// @ (0x510 * 8 + 6)
#define                                 IVMOVCNT1_bit       _BIT_ACCESS(IVMCON1,6)
// IVMCON1<IVMOVCNT2>
extern volatile __bit                   IVMOVCNT2           __at(0x2887);	// @ (0x510 * 8 + 7)
#define                                 IVMOVCNT2_bit       _BIT_ACCESS(IVMCON1,7)
// DCOMPCON1<IVMOVFE>
extern volatile __bit                   IVMOVFE             __at(0x4881);	// @ (0x910 * 8 + 1)
#define                                 IVMOVFE_bit         _BIT_ACCESS(DCOMPCON1,1)
// DRVCON1<IVMOVFEH>
extern volatile __bit                   IVMOVFEH            __at(0x1CC1);	// @ (0x398 * 8 + 1)
#define                                 IVMOVFEH_bit        _BIT_ACCESS(DRVCON1,1)
// IVMCON1<IVMOVFINT>
extern volatile __bit                   IVMOVFINT           __at(0x2882);	// @ (0x510 * 8 + 2)
#define                                 IVMOVFINT_bit       _BIT_ACCESS(IVMCON1,2)
// PIE6<IVMOVIE>
extern volatile __bit                   IVMOVIE             __at(0x38E5);	// @ (0x71C * 8 + 5)
#define                                 IVMOVIE_bit         _BIT_ACCESS(PIE6,5)
// PIR6<IVMOVIF>
extern volatile __bit                   IVMOVIF             __at(0x3895);	// @ (0x712 * 8 + 5)
#define                                 IVMOVIF_bit         _BIT_ACCESS(PIR6,5)
// IVMCON1<IVMOVLAT>
extern volatile __bit                   IVMOVLAT            __at(0x2884);	// @ (0x510 * 8 + 4)
#define                                 IVMOVLAT_bit        _BIT_ACCESS(IVMCON1,4)
// IVMCON1<IVMOVRINT>
extern volatile __bit                   IVMOVRINT           __at(0x2883);	// @ (0x510 * 8 + 3)
#define                                 IVMOVRINT_bit       _BIT_ACCESS(IVMCON1,3)
// IVMOVUVOUT<IVMUV>
extern volatile __bit                   IVMUV               __at(0x28BC);	// @ (0x517 * 8 + 4)
#define                                 IVMUV_bit           _BIT_ACCESS(IVMOVUVOUT,4)
// IVMCON2<IVMUVCNT0>
extern volatile __bit                   IVMUVCNT0           __at(0x288D);	// @ (0x511 * 8 + 5)
#define                                 IVMUVCNT0_bit       _BIT_ACCESS(IVMCON2,5)
// IVMCON2<IVMUVCNT1>
extern volatile __bit                   IVMUVCNT1           __at(0x288E);	// @ (0x511 * 8 + 6)
#define                                 IVMUVCNT1_bit       _BIT_ACCESS(IVMCON2,6)
// IVMCON2<IVMUVCNT2>
extern volatile __bit                   IVMUVCNT2           __at(0x288F);	// @ (0x511 * 8 + 7)
#define                                 IVMUVCNT2_bit       _BIT_ACCESS(IVMCON2,7)
// DCOMPCON1<IVMUVFE>
extern volatile __bit                   IVMUVFE             __at(0x4880);	// @ (0x910 * 8 + 0)
#define                                 IVMUVFE_bit         _BIT_ACCESS(DCOMPCON1,0)
// DRVCON2<IVMUVFEH>
extern volatile __bit                   IVMUVFEH            __at(0x1CC8);	// @ (0x399 * 8 + 0)
#define                                 IVMUVFEH_bit        _BIT_ACCESS(DRVCON2,0)
// DRVCON1<IVMUVFEL>
extern volatile __bit                   IVMUVFEL            __at(0x1CC0);	// @ (0x398 * 8 + 0)
#define                                 IVMUVFEL_bit        _BIT_ACCESS(DRVCON1,0)
// IVMCON2<IVMUVFINT>
extern volatile __bit                   IVMUVFINT           __at(0x2888);	// @ (0x511 * 8 + 0)
#define                                 IVMUVFINT_bit       _BIT_ACCESS(IVMCON2,0)
// PIE6<IVMUVIE>
extern volatile __bit                   IVMUVIE             __at(0x38E4);	// @ (0x71C * 8 + 4)
#define                                 IVMUVIE_bit         _BIT_ACCESS(PIE6,4)
// PIR6<IVMUVIF>
extern volatile __bit                   IVMUVIF             __at(0x3894);	// @ (0x712 * 8 + 4)
#define                                 IVMUVIF_bit         _BIT_ACCESS(PIR6,4)
// IVMCON2<IVMUVLAT>
extern volatile __bit                   IVMUVLAT            __at(0x288C);	// @ (0x511 * 8 + 4)
#define                                 IVMUVLAT_bit        _BIT_ACCESS(IVMCON2,4)
// IVMCON2<IVMUVRINT>
extern volatile __bit                   IVMUVRINT           __at(0x2889);	// @ (0x511 * 8 + 1)
#define                                 IVMUVRINT_bit       _BIT_ACCESS(IVMCON2,1)
// KIV<KIV0>
extern volatile __bit                   KIV0                __at(0x4C98);	// @ (0x993 * 8 + 0)
#define                                 KIV0_bit            _BIT_ACCESS(KIV,0)
// KIV<KIV1>
extern volatile __bit                   KIV1                __at(0x4C99);	// @ (0x993 * 8 + 1)
#define                                 KIV1_bit            _BIT_ACCESS(KIV,1)
// KIV<KIV2>
extern volatile __bit                   KIV2                __at(0x4C9A);	// @ (0x993 * 8 + 2)
#define                                 KIV2_bit            _BIT_ACCESS(KIV,2)
// KIV<KIV3>
extern volatile __bit                   KIV3                __at(0x4C9B);	// @ (0x993 * 8 + 3)
#define                                 KIV3_bit            _BIT_ACCESS(KIV,3)
// KIV<KIV4>
extern volatile __bit                   KIV4                __at(0x4C9C);	// @ (0x993 * 8 + 4)
#define                                 KIV4_bit            _BIT_ACCESS(KIV,4)
// KPI<KPI0>
extern volatile __bit                   KPI0                __at(0x4C78);	// @ (0x98F * 8 + 0)
#define                                 KPI0_bit            _BIT_ACCESS(KPI,0)
// KPI<KPI1>
extern volatile __bit                   KPI1                __at(0x4C79);	// @ (0x98F * 8 + 1)
#define                                 KPI1_bit            _BIT_ACCESS(KPI,1)
// KPI<KPI2>
extern volatile __bit                   KPI2                __at(0x4C7A);	// @ (0x98F * 8 + 2)
#define                                 KPI2_bit            _BIT_ACCESS(KPI,2)
// KPI<KPI3>
extern volatile __bit                   KPI3                __at(0x4C7B);	// @ (0x98F * 8 + 3)
#define                                 KPI3_bit            _BIT_ACCESS(KPI,3)
// KPI<KPI4>
extern volatile __bit                   KPI4                __at(0x4C7C);	// @ (0x98F * 8 + 4)
#define                                 KPI4_bit            _BIT_ACCESS(KPI,4)
// KPV<KPV0>
extern volatile __bit                   KPV0                __at(0x4C88);	// @ (0x991 * 8 + 0)
#define                                 KPV0_bit            _BIT_ACCESS(KPV,0)
// KPV<KPV1>
extern volatile __bit                   KPV1                __at(0x4C89);	// @ (0x991 * 8 + 1)
#define                                 KPV1_bit            _BIT_ACCESS(KPV,1)
// KPV<KPV2>
extern volatile __bit                   KPV2                __at(0x4C8A);	// @ (0x991 * 8 + 2)
#define                                 KPV2_bit            _BIT_ACCESS(KPV,2)
// KPV<KPV3>
extern volatile __bit                   KPV3                __at(0x4C8B);	// @ (0x991 * 8 + 3)
#define                                 KPV3_bit            _BIT_ACCESS(KPV,3)
// KPV<KPV4>
extern volatile __bit                   KPV4                __at(0x4C8C);	// @ (0x991 * 8 + 4)
#define                                 KPV4_bit            _BIT_ACCESS(KPV,4)
// KVI<KVI0>
extern volatile __bit                   KVI0                __at(0x4C80);	// @ (0x990 * 8 + 0)
#define                                 KVI0_bit            _BIT_ACCESS(KVI,0)
// KVI<KVI1>
extern volatile __bit                   KVI1                __at(0x4C81);	// @ (0x990 * 8 + 1)
#define                                 KVI1_bit            _BIT_ACCESS(KVI,1)
// KVI<KVI2>
extern volatile __bit                   KVI2                __at(0x4C82);	// @ (0x990 * 8 + 2)
#define                                 KVI2_bit            _BIT_ACCESS(KVI,2)
// KVI<KVI3>
extern volatile __bit                   KVI3                __at(0x4C83);	// @ (0x990 * 8 + 3)
#define                                 KVI3_bit            _BIT_ACCESS(KVI,3)
// KVI<KVI4>
extern volatile __bit                   KVI4                __at(0x4C84);	// @ (0x990 * 8 + 4)
#define                                 KVI4_bit            _BIT_ACCESS(KVI,4)
// KVV<KVV0>
extern volatile __bit                   KVV0                __at(0x4C90);	// @ (0x992 * 8 + 0)
#define                                 KVV0_bit            _BIT_ACCESS(KVV,0)
// KVV<KVV1>
extern volatile __bit                   KVV1                __at(0x4C91);	// @ (0x992 * 8 + 1)
#define                                 KVV1_bit            _BIT_ACCESS(KVV,1)
// KVV<KVV2>
extern volatile __bit                   KVV2                __at(0x4C92);	// @ (0x992 * 8 + 2)
#define                                 KVV2_bit            _BIT_ACCESS(KVV,2)
// KVV<KVV3>
extern volatile __bit                   KVV3                __at(0x4C93);	// @ (0x992 * 8 + 3)
#define                                 KVV3_bit            _BIT_ACCESS(KVV,3)
// KVV<KVV4>
extern volatile __bit                   KVV4                __at(0x4C94);	// @ (0x992 * 8 + 4)
#define                                 KVV4_bit            _BIT_ACCESS(KVV,4)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x2060);	// @ (0x40C * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x2061);	// @ (0x40C * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x206A);	// @ (0x40D * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x206B);	// @ (0x40D * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x206C);	// @ (0x40D * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x206D);	// @ (0x40D * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x206E);	// @ (0x40D * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x206F);	// @ (0x40D * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x2062);	// @ (0x40C * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x2063);	// @ (0x40C * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x2064);	// @ (0x40C * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x2065);	// @ (0x40C * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x2066);	// @ (0x40C * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x2067);	// @ (0x40C * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x2068);	// @ (0x40D * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x2069);	// @ (0x40D * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0xB0);	// @ (0x16 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0xB1);	// @ (0x16 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0xB2);	// @ (0x16 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0xB3);	// @ (0x16 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0xB8);	// @ (0x17 * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0xB9);	// @ (0x17 * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0xBA);	// @ (0x17 * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0xBB);	// @ (0x17 * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0xBC);	// @ (0x17 * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0xBD);	// @ (0x17 * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0xBE);	// @ (0x17 * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0xBF);	// @ (0x17 * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// ICDIO<LAT_ICDCLK>
extern volatile __bit                   LAT_ICDCLK          __at(0x7C64);	// @ (0xF8C * 8 + 4)
#define                                 LAT_ICDCLK_bit      _BIT_ACCESS(ICDIO,4)
// ICDIO<LAT_ICDDAT>
extern volatile __bit                   LAT_ICDDAT          __at(0x7C65);	// @ (0xF8C * 8 + 5)
#define                                 LAT_ICDDAT_bit      _BIT_ACCESS(ICDIO,5)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0x7090);	// @ (0xE12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0x7091);	// @ (0xE12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0x7092);	// @ (0xE12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0x7093);	// @ (0xE12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0x7094);	// @ (0xE12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0x7095);	// @ (0xE12 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0x7098);	// @ (0xE13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0x7099);	// @ (0xE13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0x709A);	// @ (0xE13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0x709B);	// @ (0xE13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0x709C);	// @ (0xE13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0x709D);	// @ (0xE13 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0x70A0);	// @ (0xE14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0x70A1);	// @ (0xE14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0x70A2);	// @ (0xE14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0x70A3);	// @ (0xE14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0x70A4);	// @ (0xE14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0x70A5);	// @ (0xE14 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0x70A8);	// @ (0xE15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0x70A9);	// @ (0xE15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0x70AA);	// @ (0xE15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0x70AB);	// @ (0xE15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0x70AC);	// @ (0xE15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0x70AD);	// @ (0xE15 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0x7087);	// @ (0xE10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0x70B0);	// @ (0xE16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0x70B1);	// @ (0xE16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0x70B2);	// @ (0xE16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0x70B3);	// @ (0xE16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0x70B4);	// @ (0xE16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0x70B5);	// @ (0xE16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0x70B6);	// @ (0xE16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0x70B7);	// @ (0xE16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0x7088);	// @ (0xE11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0x70B8);	// @ (0xE17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0x70B9);	// @ (0xE17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0x70BA);	// @ (0xE17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0x70BB);	// @ (0xE17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0x70BC);	// @ (0xE17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0x70BD);	// @ (0xE17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0x70BE);	// @ (0xE17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0x70BF);	// @ (0xE17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0x7089);	// @ (0xE11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0x70C0);	// @ (0xE18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0x70C1);	// @ (0xE18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0x70C2);	// @ (0xE18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0x70C3);	// @ (0xE18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0x70C4);	// @ (0xE18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0x70C5);	// @ (0xE18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0x70C6);	// @ (0xE18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0x70C7);	// @ (0xE18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0x708A);	// @ (0xE11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0x70C8);	// @ (0xE19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0x70C9);	// @ (0xE19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0x70CA);	// @ (0xE19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0x70CB);	// @ (0xE19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0x70CC);	// @ (0xE19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0x70CD);	// @ (0xE19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0x70CE);	// @ (0xE19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0x70CF);	// @ (0xE19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0x708B);	// @ (0xE11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0x7083);	// @ (0xE10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0x7084);	// @ (0xE10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0x7080);	// @ (0xE10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0x7081);	// @ (0xE10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0x7082);	// @ (0xE10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0x708F);	// @ (0xE11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0x70E0);	// @ (0xE1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0x70E1);	// @ (0xE1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0x70E2);	// @ (0xE1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0x70E3);	// @ (0xE1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0x70E4);	// @ (0xE1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0x70E5);	// @ (0xE1C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0x70E8);	// @ (0xE1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0x70E9);	// @ (0xE1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0x70EA);	// @ (0xE1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0x70EB);	// @ (0xE1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0x70EC);	// @ (0xE1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0x70ED);	// @ (0xE1D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0x70F0);	// @ (0xE1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0x70F1);	// @ (0xE1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0x70F2);	// @ (0xE1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0x70F3);	// @ (0xE1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0x70F4);	// @ (0xE1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0x70F5);	// @ (0xE1E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0x70F8);	// @ (0xE1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0x70F9);	// @ (0xE1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0x70FA);	// @ (0xE1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0x70FB);	// @ (0xE1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0x70FC);	// @ (0xE1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0x70FD);	// @ (0xE1F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0x70D7);	// @ (0xE1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0x7100);	// @ (0xE20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0x7101);	// @ (0xE20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0x7102);	// @ (0xE20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0x7103);	// @ (0xE20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0x7104);	// @ (0xE20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0x7105);	// @ (0xE20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0x7106);	// @ (0xE20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0x7107);	// @ (0xE20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0x70D8);	// @ (0xE1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0x7108);	// @ (0xE21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0x7109);	// @ (0xE21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0x710A);	// @ (0xE21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0x710B);	// @ (0xE21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0x710C);	// @ (0xE21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0x710D);	// @ (0xE21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0x710E);	// @ (0xE21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0x710F);	// @ (0xE21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0x70D9);	// @ (0xE1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0x7110);	// @ (0xE22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0x7111);	// @ (0xE22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0x7112);	// @ (0xE22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0x7113);	// @ (0xE22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0x7114);	// @ (0xE22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0x7115);	// @ (0xE22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0x7116);	// @ (0xE22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0x7117);	// @ (0xE22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0x70DA);	// @ (0xE1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0x7118);	// @ (0xE23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0x7119);	// @ (0xE23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0x711A);	// @ (0xE23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0x711B);	// @ (0xE23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0x711C);	// @ (0xE23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0x711D);	// @ (0xE23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0x711E);	// @ (0xE23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0x711F);	// @ (0xE23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0x70DB);	// @ (0xE1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0x70D3);	// @ (0xE1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0x70D4);	// @ (0xE1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0x70D0);	// @ (0xE1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0x70D1);	// @ (0xE1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0x70D2);	// @ (0xE1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0x70DF);	// @ (0xE1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLCDATA<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0x707A);	// @ (0xE0F * 8 + 2)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLCDATA,2)
// CLCDATA<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0x707B);	// @ (0xE0F * 8 + 3)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLCDATA,3)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT1<LFOR>
extern volatile __bit                   LFOR                __at(0x4484);	// @ (0x890 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT1,4)
// DRVCON0<LODIS>
extern volatile __bit                   LODIS               __at(0x1CBE);	// @ (0x397 * 8 + 6)
#define                                 LODIS_bit           _BIT_ACCESS(DRVCON0,6)
// LPFCON0<LPFCHS0>
extern volatile __bit                   LPFCHS0             __at(0x2CD0);	// @ (0x59A * 8 + 0)
#define                                 LPFCHS0_bit         _BIT_ACCESS(LPFCON0,0)
// LPFCON0<LPFCHS1>
extern volatile __bit                   LPFCHS1             __at(0x2CD1);	// @ (0x59A * 8 + 1)
#define                                 LPFCHS1_bit         _BIT_ACCESS(LPFCON0,1)
// LPFCON0<LPFEN>
extern volatile __bit                   LPFEN               __at(0x2CD7);	// @ (0x59A * 8 + 7)
#define                                 LPFEN_bit           _BIT_ACCESS(LPFCON0,7)
// NVMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0x40F5);	// @ (0x81E * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(NVMCON1,5)
// SWFRQCON<MANUAL>
extern volatile __bit                   MANUAL              __at(0x1C64);	// @ (0x38C * 8 + 4)
#define                                 MANUAL_bit          _BIT_ACCESS(SWFRQCON,4)
// MAXDC<MAXDC0>
extern volatile __bit                   MAXDC0              __at(0x4CA8);	// @ (0x995 * 8 + 0)
#define                                 MAXDC0_bit          _BIT_ACCESS(MAXDC,0)
// MAXDC<MAXDC1>
extern volatile __bit                   MAXDC1              __at(0x4CA9);	// @ (0x995 * 8 + 1)
#define                                 MAXDC1_bit          _BIT_ACCESS(MAXDC,1)
// MAXDC<MAXDC2>
extern volatile __bit                   MAXDC2              __at(0x4CAA);	// @ (0x995 * 8 + 2)
#define                                 MAXDC2_bit          _BIT_ACCESS(MAXDC,2)
// MAXDC<MAXDC3>
extern volatile __bit                   MAXDC3              __at(0x4CAB);	// @ (0x995 * 8 + 3)
#define                                 MAXDC3_bit          _BIT_ACCESS(MAXDC,3)
// MAXDC<MAXDC4>
extern volatile __bit                   MAXDC4              __at(0x4CAC);	// @ (0x995 * 8 + 4)
#define                                 MAXDC4_bit          _BIT_ACCESS(MAXDC,4)
// MAXDC<MAXDC5>
extern volatile __bit                   MAXDC5              __at(0x4CAD);	// @ (0x995 * 8 + 5)
#define                                 MAXDC5_bit          _BIT_ACCESS(MAXDC,5)
// MAXDC<MAXDC6>
extern volatile __bit                   MAXDC6              __at(0x4CAE);	// @ (0x995 * 8 + 6)
#define                                 MAXDC6_bit          _BIT_ACCESS(MAXDC,6)
// MAXDC<MAXDC7>
extern volatile __bit                   MAXDC7              __at(0x4CAF);	// @ (0x995 * 8 + 7)
#define                                 MAXDC7_bit          _BIT_ACCESS(MAXDC,7)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x448D);	// @ (0x891 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT1<MFOR>
extern volatile __bit                   MFOR                __at(0x4485);	// @ (0x890 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT1,5)
// ICMGAIN<MICMGC0>
extern volatile __bit                   MICMGC0             __at(0x28E0);	// @ (0x51C * 8 + 0)
#define                                 MICMGC0_bit         _BIT_ACCESS(ICMGAIN,0)
// ICMGAIN<MICMGC1>
extern volatile __bit                   MICMGC1             __at(0x28E1);	// @ (0x51C * 8 + 1)
#define                                 MICMGC1_bit         _BIT_ACCESS(ICMGAIN,1)
// ICMGAIN<MICMGC2>
extern volatile __bit                   MICMGC2             __at(0x28E2);	// @ (0x51C * 8 + 2)
#define                                 MICMGC2_bit         _BIT_ACCESS(ICMGAIN,2)
// ICMGAIN<MICMGC3>
extern volatile __bit                   MICMGC3             __at(0x28E3);	// @ (0x51C * 8 + 3)
#define                                 MICMGC3_bit         _BIT_ACCESS(ICMGAIN,3)
// ICMGAIN<MICMGC4>
extern volatile __bit                   MICMGC4             __at(0x28E4);	// @ (0x51C * 8 + 4)
#define                                 MICMGC4_bit         _BIT_ACCESS(ICMGAIN,4)
// ICMGAIN<MICMGC5>
extern volatile __bit                   MICMGC5             __at(0x28E5);	// @ (0x51C * 8 + 5)
#define                                 MICMGC5_bit         _BIT_ACCESS(ICMGAIN,5)
// ICMGAIN<MICMGC6>
extern volatile __bit                   MICMGC6             __at(0x28E6);	// @ (0x51C * 8 + 6)
#define                                 MICMGC6_bit         _BIT_ACCESS(ICMGAIN,6)
// ICMOFF<MICMOC0>
extern volatile __bit                   MICMOC0             __at(0x28D8);	// @ (0x51B * 8 + 0)
#define                                 MICMOC0_bit         _BIT_ACCESS(ICMOFF,0)
// ICMOFF<MICMOC1>
extern volatile __bit                   MICMOC1             __at(0x28D9);	// @ (0x51B * 8 + 1)
#define                                 MICMOC1_bit         _BIT_ACCESS(ICMOFF,1)
// ICMOFF<MICMOC2>
extern volatile __bit                   MICMOC2             __at(0x28DA);	// @ (0x51B * 8 + 2)
#define                                 MICMOC2_bit         _BIT_ACCESS(ICMOFF,2)
// ICMOFF<MICMOC3>
extern volatile __bit                   MICMOC3             __at(0x28DB);	// @ (0x51B * 8 + 3)
#define                                 MICMOC3_bit         _BIT_ACCESS(ICMOFF,3)
// ICMOFF<MICMOC4>
extern volatile __bit                   MICMOC4             __at(0x28DC);	// @ (0x51B * 8 + 4)
#define                                 MICMOC4_bit         _BIT_ACCESS(ICMOFF,4)
// IVMOVUVOUT<MIVMOVF>
extern volatile __bit                   MIVMOVF             __at(0x28BA);	// @ (0x517 * 8 + 2)
#define                                 MIVMOVF_bit         _BIT_ACCESS(IVMOVUVOUT,2)
// IVMOVUVOUT<MIVMOVR>
extern volatile __bit                   MIVMOVR             __at(0x28BB);	// @ (0x517 * 8 + 3)
#define                                 MIVMOVR_bit         _BIT_ACCESS(IVMOVUVOUT,3)
// IVMOVUVOUT<MIVMUVF>
extern volatile __bit                   MIVMUVF             __at(0x28B8);	// @ (0x517 * 8 + 0)
#define                                 MIVMUVF_bit         _BIT_ACCESS(IVMOVUVOUT,0)
// IVMOVUVOUT<MIVMUVR>
extern volatile __bit                   MIVMUVR             __at(0x28B9);	// @ (0x517 * 8 + 1)
#define                                 MIVMUVR_bit         _BIT_ACCESS(IVMOVUVOUT,1)
// OCMOCUCOUT<MOCMOCF>
extern volatile __bit                   MOCMOCF             __at(0x2CBB);	// @ (0x597 * 8 + 3)
#define                                 MOCMOCF_bit         _BIT_ACCESS(OCMOCUCOUT,3)
// OCMOCUCOUT<MOCMOCR>
extern volatile __bit                   MOCMOCR             __at(0x2CBA);	// @ (0x597 * 8 + 2)
#define                                 MOCMOCR_bit         _BIT_ACCESS(OCMOCUCOUT,2)
// OCMOCUCOUT<MOCMUCF>
extern volatile __bit                   MOCMUCF             __at(0x2CB9);	// @ (0x597 * 8 + 1)
#define                                 MOCMUCF_bit         _BIT_ACCESS(OCMOCUCOUT,1)
// OCMOCUCOUT<MOCMUCR>
extern volatile __bit                   MOCMUCR             __at(0x2CB8);	// @ (0x597 * 8 + 0)
#define                                 MOCMUCR_bit         _BIT_ACCESS(OCMOCUCOUT,0)
// OCRGAIN<MOCRGC0>
extern volatile __bit                   MOCRGC0             __at(0x2CE0);	// @ (0x59C * 8 + 0)
#define                                 MOCRGC0_bit         _BIT_ACCESS(OCRGAIN,0)
// OCRGAIN<MOCRGC1>
extern volatile __bit                   MOCRGC1             __at(0x2CE1);	// @ (0x59C * 8 + 1)
#define                                 MOCRGC1_bit         _BIT_ACCESS(OCRGAIN,1)
// OCRGAIN<MOCRGC2>
extern volatile __bit                   MOCRGC2             __at(0x2CE2);	// @ (0x59C * 8 + 2)
#define                                 MOCRGC2_bit         _BIT_ACCESS(OCRGAIN,2)
// OCRGAIN<MOCRGC3>
extern volatile __bit                   MOCRGC3             __at(0x2CE3);	// @ (0x59C * 8 + 3)
#define                                 MOCRGC3_bit         _BIT_ACCESS(OCRGAIN,3)
// OCRGAIN<MOCRGC4>
extern volatile __bit                   MOCRGC4             __at(0x2CE4);	// @ (0x59C * 8 + 4)
#define                                 MOCRGC4_bit         _BIT_ACCESS(OCRGAIN,4)
// OCRGAIN<MOCRGC5>
extern volatile __bit                   MOCRGC5             __at(0x2CE5);	// @ (0x59C * 8 + 5)
#define                                 MOCRGC5_bit         _BIT_ACCESS(OCRGAIN,5)
// OCRGAIN<MOCRGC6>
extern volatile __bit                   MOCRGC6             __at(0x2CE6);	// @ (0x59C * 8 + 6)
#define                                 MOCRGC6_bit         _BIT_ACCESS(OCRGAIN,6)
// OCROFF<MOCROC0>
extern volatile __bit                   MOCROC0             __at(0x2CD8);	// @ (0x59B * 8 + 0)
#define                                 MOCROC0_bit         _BIT_ACCESS(OCROFF,0)
// OCROFF<MOCROC1>
extern volatile __bit                   MOCROC1             __at(0x2CD9);	// @ (0x59B * 8 + 1)
#define                                 MOCROC1_bit         _BIT_ACCESS(OCROFF,1)
// OCROFF<MOCROC2>
extern volatile __bit                   MOCROC2             __at(0x2CDA);	// @ (0x59B * 8 + 2)
#define                                 MOCROC2_bit         _BIT_ACCESS(OCROFF,2)
// OCROFF<MOCROC3>
extern volatile __bit                   MOCROC3             __at(0x2CDB);	// @ (0x59B * 8 + 3)
#define                                 MOCROC3_bit         _BIT_ACCESS(OCROFF,3)
// OCROFF<MOCROC4>
extern volatile __bit                   MOCROC4             __at(0x2CDC);	// @ (0x59B * 8 + 4)
#define                                 MOCROC4_bit         _BIT_ACCESS(OCROFF,4)
// OVMOVUVOUT<MOVMOVF>
extern volatile __bit                   MOVMOVF             __at(0x30BA);	// @ (0x617 * 8 + 2)
#define                                 MOVMOVF_bit         _BIT_ACCESS(OVMOVUVOUT,2)
// OVMOVUVOUT<MOVMOVR>
extern volatile __bit                   MOVMOVR             __at(0x30BB);	// @ (0x617 * 8 + 3)
#define                                 MOVMOVR_bit         _BIT_ACCESS(OVMOVUVOUT,3)
// OVMOVUVOUT<MOVMUVF>
extern volatile __bit                   MOVMUVF             __at(0x30B8);	// @ (0x617 * 8 + 0)
#define                                 MOVMUVF_bit         _BIT_ACCESS(OVMOVUVOUT,0)
// OVMOVUVOUT<MOVMUVR>
extern volatile __bit                   MOVMUVR             __at(0x30B9);	// @ (0x617 * 8 + 1)
#define                                 MOVMUVR_bit         _BIT_ACCESS(OVMOVUVOUT,1)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0xC6B);	// @ (0x18D * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0xC6C);	// @ (0x18D * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0xC6D);	// @ (0x18D * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0xC6E);	// @ (0x18D * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0xC6F);	// @ (0x18D * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// ICDBP0CON<MSSEL0>
extern volatile __bit                   MSSEL0              __at(0x7CE5);	// @ (0xF9C * 8 + 5)
#define                                 MSSEL0_bit          _BIT_ACCESS(ICDBP0CON,5)
// ICDBP0CON<MSSEL1>
extern volatile __bit                   MSSEL1              __at(0x7CE6);	// @ (0xF9C * 8 + 6)
#define                                 MSSEL1_bit          _BIT_ACCESS(ICDBP0CON,6)
// PMD2<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD2,5)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x4468);	// @ (0x88D * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x4469);	// @ (0x88D * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x446A);	// @ (0x88D * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x446B);	// @ (0x88D * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x446C);	// @ (0x88D * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x446D);	// @ (0x88D * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x447B);	// @ (0x88F * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// NP<NP0>
extern volatile __bit                   NP0                 __at(0x4CD8);	// @ (0x99B * 8 + 0)
#define                                 NP0_bit             _BIT_ACCESS(NP,0)
// NP<NP1>
extern volatile __bit                   NP1                 __at(0x4CD9);	// @ (0x99B * 8 + 1)
#define                                 NP1_bit             _BIT_ACCESS(NP,1)
// NP<NP2>
extern volatile __bit                   NP2                 __at(0x4CDA);	// @ (0x99B * 8 + 2)
#define                                 NP2_bit             _BIT_ACCESS(NP,2)
// NP<NP3>
extern volatile __bit                   NP3                 __at(0x4CDB);	// @ (0x99B * 8 + 3)
#define                                 NP3_bit             _BIT_ACCESS(NP,3)
// NP<NP4>
extern volatile __bit                   NP4                 __at(0x4CDC);	// @ (0x99B * 8 + 4)
#define                                 NP4_bit             _BIT_ACCESS(NP,4)
// NS<NS0>
extern volatile __bit                   NS0                 __at(0x4CD0);	// @ (0x99A * 8 + 0)
#define                                 NS0_bit             _BIT_ACCESS(NS,0)
// NS<NS1>
extern volatile __bit                   NS1                 __at(0x4CD1);	// @ (0x99A * 8 + 1)
#define                                 NS1_bit             _BIT_ACCESS(NS,1)
// NS<NS2>
extern volatile __bit                   NS2                 __at(0x4CD2);	// @ (0x99A * 8 + 2)
#define                                 NS2_bit             _BIT_ACCESS(NS,2)
// NS<NS3>
extern volatile __bit                   NS3                 __at(0x4CD3);	// @ (0x99A * 8 + 3)
#define                                 NS3_bit             _BIT_ACCESS(NS,3)
// NS<NS4>
extern volatile __bit                   NS4                 __at(0x4CD4);	// @ (0x99A * 8 + 4)
#define                                 NS4_bit             _BIT_ACCESS(NS,4)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// PIE1<NVMIE>
extern volatile __bit                   NVMIE               __at(0x38BD);	// @ (0x717 * 8 + 5)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE1,5)
// PIR1<NVMIF>
extern volatile __bit                   NVMIF               __at(0x386D);	// @ (0x70D * 8 + 5)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR1,5)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREGS>
extern volatile __bit                   NVMREGS             __at(0x40F6);	// @ (0x81E * 8 + 6)
#define                                 NVMREGS_bit         _BIT_ACCESS(NVMCON1,6)
// OCMCORRESL<OCM0>
extern volatile __bit                   OCM0                __at(0x2CC6);	// @ (0x598 * 8 + 6)
#define                                 OCM0_bit            _BIT_ACCESS(OCMCORRESL,6)
// OCMCORRESL<OCM1>
extern volatile __bit                   OCM1                __at(0x2CC7);	// @ (0x598 * 8 + 7)
#define                                 OCM1_bit            _BIT_ACCESS(OCMCORRESL,7)
// OCMCORRESH<OCM2>
extern volatile __bit                   OCM2                __at(0x2CC8);	// @ (0x599 * 8 + 0)
#define                                 OCM2_bit            _BIT_ACCESS(OCMCORRESH,0)
// OCMCORRESH<OCM3>
extern volatile __bit                   OCM3                __at(0x2CC9);	// @ (0x599 * 8 + 1)
#define                                 OCM3_bit            _BIT_ACCESS(OCMCORRESH,1)
// OCMCORRESH<OCM4>
extern volatile __bit                   OCM4                __at(0x2CCA);	// @ (0x599 * 8 + 2)
#define                                 OCM4_bit            _BIT_ACCESS(OCMCORRESH,2)
// OCMCORRESH<OCM5>
extern volatile __bit                   OCM5                __at(0x2CCB);	// @ (0x599 * 8 + 3)
#define                                 OCM5_bit            _BIT_ACCESS(OCMCORRESH,3)
// OCMCORRESH<OCM6>
extern volatile __bit                   OCM6                __at(0x2CCC);	// @ (0x599 * 8 + 4)
#define                                 OCM6_bit            _BIT_ACCESS(OCMCORRESH,4)
// OCMCORRESH<OCM7>
extern volatile __bit                   OCM7                __at(0x2CCD);	// @ (0x599 * 8 + 5)
#define                                 OCM7_bit            _BIT_ACCESS(OCMCORRESH,5)
// OCMCORRESH<OCM8>
extern volatile __bit                   OCM8                __at(0x2CCE);	// @ (0x599 * 8 + 6)
#define                                 OCM8_bit            _BIT_ACCESS(OCMCORRESH,6)
// OCMCORRESH<OCM9>
extern volatile __bit                   OCM9                __at(0x2CCF);	// @ (0x599 * 8 + 7)
#define                                 OCM9_bit            _BIT_ACCESS(OCMCORRESH,7)
// PIE5<OCMADCIE>
extern volatile __bit                   OCMADCIE            __at(0x38DA);	// @ (0x71B * 8 + 2)
#define                                 OCMADCIE_bit        _BIT_ACCESS(PIE5,2)
// PIR5<OCMADCIF>
extern volatile __bit                   OCMADCIF            __at(0x388A);	// @ (0x711 * 8 + 2)
#define                                 OCMADCIF_bit        _BIT_ACCESS(PIR5,2)
// OCMCON0<OCMCTS>
extern volatile __bit                   OCMCTS              __at(0x2C7B);	// @ (0x58F * 8 + 3)
#define                                 OCMCTS_bit          _BIT_ACCESS(OCMCON0,3)
// OCMCON0<OCMLT0>
extern volatile __bit                   OCMLT0              __at(0x2C7D);	// @ (0x58F * 8 + 5)
#define                                 OCMLT0_bit          _BIT_ACCESS(OCMCON0,5)
// OCMCON0<OCMLT1>
extern volatile __bit                   OCMLT1              __at(0x2C7E);	// @ (0x58F * 8 + 6)
#define                                 OCMLT1_bit          _BIT_ACCESS(OCMCON0,6)
// OCMCON0<OCMLT2>
extern volatile __bit                   OCMLT2              __at(0x2C7F);	// @ (0x58F * 8 + 7)
#define                                 OCMLT2_bit          _BIT_ACCESS(OCMCON0,7)
// PMD3<OCMMD>
extern volatile __bit                   OCMMD               __at(0x3CCC);	// @ (0x799 * 8 + 4)
#define                                 OCMMD_bit           _BIT_ACCESS(PMD3,4)
// OCMOCUCOUT<OCMOC>
extern volatile __bit                   OCMOC               __at(0x2CBD);	// @ (0x597 * 8 + 5)
#define                                 OCMOC_bit           _BIT_ACCESS(OCMOCUCOUT,5)
// OCMCON1<OCMOCCNT0>
extern volatile __bit                   OCMOCCNT0           __at(0x2C85);	// @ (0x590 * 8 + 5)
#define                                 OCMOCCNT0_bit       _BIT_ACCESS(OCMCON1,5)
// OCMCON1<OCMOCCNT1>
extern volatile __bit                   OCMOCCNT1           __at(0x2C86);	// @ (0x590 * 8 + 6)
#define                                 OCMOCCNT1_bit       _BIT_ACCESS(OCMCON1,6)
// OCMCON1<OCMOCCNT2>
extern volatile __bit                   OCMOCCNT2           __at(0x2C87);	// @ (0x590 * 8 + 7)
#define                                 OCMOCCNT2_bit       _BIT_ACCESS(OCMCON1,7)
// DRVCON2<OCMOCEH>
extern volatile __bit                   OCMOCEH             __at(0x1CCE);	// @ (0x399 * 8 + 6)
#define                                 OCMOCEH_bit         _BIT_ACCESS(DRVCON2,6)
// OCMOCF<OCMOCF0>
extern volatile __bit                   OCMOCF0             __at(0x2CB0);	// @ (0x596 * 8 + 0)
#define                                 OCMOCF0_bit         _BIT_ACCESS(OCMOCF,0)
// OCMOCF<OCMOCF1>
extern volatile __bit                   OCMOCF1             __at(0x2CB1);	// @ (0x596 * 8 + 1)
#define                                 OCMOCF1_bit         _BIT_ACCESS(OCMOCF,1)
// OCMOCF<OCMOCF2>
extern volatile __bit                   OCMOCF2             __at(0x2CB2);	// @ (0x596 * 8 + 2)
#define                                 OCMOCF2_bit         _BIT_ACCESS(OCMOCF,2)
// OCMOCF<OCMOCF3>
extern volatile __bit                   OCMOCF3             __at(0x2CB3);	// @ (0x596 * 8 + 3)
#define                                 OCMOCF3_bit         _BIT_ACCESS(OCMOCF,3)
// OCMOCF<OCMOCF4>
extern volatile __bit                   OCMOCF4             __at(0x2CB4);	// @ (0x596 * 8 + 4)
#define                                 OCMOCF4_bit         _BIT_ACCESS(OCMOCF,4)
// OCMOCF<OCMOCF5>
extern volatile __bit                   OCMOCF5             __at(0x2CB5);	// @ (0x596 * 8 + 5)
#define                                 OCMOCF5_bit         _BIT_ACCESS(OCMOCF,5)
// OCMOCF<OCMOCF6>
extern volatile __bit                   OCMOCF6             __at(0x2CB6);	// @ (0x596 * 8 + 6)
#define                                 OCMOCF6_bit         _BIT_ACCESS(OCMOCF,6)
// OCMOCF<OCMOCF7>
extern volatile __bit                   OCMOCF7             __at(0x2CB7);	// @ (0x596 * 8 + 7)
#define                                 OCMOCF7_bit         _BIT_ACCESS(OCMOCF,7)
// DCOMPCON2<OCMOCFE0>
extern volatile __bit                   OCMOCFE0            __at(0x488E);	// @ (0x911 * 8 + 6)
#define                                 OCMOCFE0_bit        _BIT_ACCESS(DCOMPCON2,6)
// DCOMPCON2<OCMOCFE1>
extern volatile __bit                   OCMOCFE1            __at(0x488F);	// @ (0x911 * 8 + 7)
#define                                 OCMOCFE1_bit        _BIT_ACCESS(DCOMPCON2,7)
// DRVCON1<OCMOCFEL>
extern volatile __bit                   OCMOCFEL            __at(0x1CC6);	// @ (0x398 * 8 + 6)
#define                                 OCMOCFEL_bit        _BIT_ACCESS(DRVCON1,6)
// OCMCON1<OCMOCFINT>
extern volatile __bit                   OCMOCFINT           __at(0x2C82);	// @ (0x590 * 8 + 2)
#define                                 OCMOCFINT_bit       _BIT_ACCESS(OCMCON1,2)
// PIE5<OCMOCIE>
extern volatile __bit                   OCMOCIE             __at(0x38D9);	// @ (0x71B * 8 + 1)
#define                                 OCMOCIE_bit         _BIT_ACCESS(PIE5,1)
// PIR5<OCMOCIF>
extern volatile __bit                   OCMOCIF             __at(0x3889);	// @ (0x711 * 8 + 1)
#define                                 OCMOCIF_bit         _BIT_ACCESS(PIR5,1)
// OCMCON1<OCMOCLAT>
extern volatile __bit                   OCMOCLAT            __at(0x2C84);	// @ (0x590 * 8 + 4)
#define                                 OCMOCLAT_bit        _BIT_ACCESS(OCMCON1,4)
// OCMOCR<OCMOCR0>
extern volatile __bit                   OCMOCR0             __at(0x2CA8);	// @ (0x595 * 8 + 0)
#define                                 OCMOCR0_bit         _BIT_ACCESS(OCMOCR,0)
// OCMOCR<OCMOCR1>
extern volatile __bit                   OCMOCR1             __at(0x2CA9);	// @ (0x595 * 8 + 1)
#define                                 OCMOCR1_bit         _BIT_ACCESS(OCMOCR,1)
// OCMOCR<OCMOCR2>
extern volatile __bit                   OCMOCR2             __at(0x2CAA);	// @ (0x595 * 8 + 2)
#define                                 OCMOCR2_bit         _BIT_ACCESS(OCMOCR,2)
// OCMOCR<OCMOCR3>
extern volatile __bit                   OCMOCR3             __at(0x2CAB);	// @ (0x595 * 8 + 3)
#define                                 OCMOCR3_bit         _BIT_ACCESS(OCMOCR,3)
// OCMOCR<OCMOCR4>
extern volatile __bit                   OCMOCR4             __at(0x2CAC);	// @ (0x595 * 8 + 4)
#define                                 OCMOCR4_bit         _BIT_ACCESS(OCMOCR,4)
// OCMOCR<OCMOCR5>
extern volatile __bit                   OCMOCR5             __at(0x2CAD);	// @ (0x595 * 8 + 5)
#define                                 OCMOCR5_bit         _BIT_ACCESS(OCMOCR,5)
// OCMOCR<OCMOCR6>
extern volatile __bit                   OCMOCR6             __at(0x2CAE);	// @ (0x595 * 8 + 6)
#define                                 OCMOCR6_bit         _BIT_ACCESS(OCMOCR,6)
// OCMOCR<OCMOCR7>
extern volatile __bit                   OCMOCR7             __at(0x2CAF);	// @ (0x595 * 8 + 7)
#define                                 OCMOCR7_bit         _BIT_ACCESS(OCMOCR,7)
// OCMCON1<OCMOCRINT>
extern volatile __bit                   OCMOCRINT           __at(0x2C83);	// @ (0x590 * 8 + 3)
#define                                 OCMOCRINT_bit       _BIT_ACCESS(OCMCON1,3)
// OCMOCUCOUT<OCMUC>
extern volatile __bit                   OCMUC               __at(0x2CBC);	// @ (0x597 * 8 + 4)
#define                                 OCMUC_bit           _BIT_ACCESS(OCMOCUCOUT,4)
// OCMCON2<OCMUCCNT0>
extern volatile __bit                   OCMUCCNT0           __at(0x2C8D);	// @ (0x591 * 8 + 5)
#define                                 OCMUCCNT0_bit       _BIT_ACCESS(OCMCON2,5)
// OCMCON2<OCMUCCNT1>
extern volatile __bit                   OCMUCCNT1           __at(0x2C8E);	// @ (0x591 * 8 + 6)
#define                                 OCMUCCNT1_bit       _BIT_ACCESS(OCMCON2,6)
// OCMCON2<OCMUCCNT2>
extern volatile __bit                   OCMUCCNT2           __at(0x2C8F);	// @ (0x591 * 8 + 7)
#define                                 OCMUCCNT2_bit       _BIT_ACCESS(OCMCON2,7)
// OCMUCF<OCMUCF0>
extern volatile __bit                   OCMUCF0             __at(0x2CA0);	// @ (0x594 * 8 + 0)
#define                                 OCMUCF0_bit         _BIT_ACCESS(OCMUCF,0)
// OCMUCF<OCMUCF1>
extern volatile __bit                   OCMUCF1             __at(0x2CA1);	// @ (0x594 * 8 + 1)
#define                                 OCMUCF1_bit         _BIT_ACCESS(OCMUCF,1)
// OCMUCF<OCMUCF2>
extern volatile __bit                   OCMUCF2             __at(0x2CA2);	// @ (0x594 * 8 + 2)
#define                                 OCMUCF2_bit         _BIT_ACCESS(OCMUCF,2)
// OCMUCF<OCMUCF3>
extern volatile __bit                   OCMUCF3             __at(0x2CA3);	// @ (0x594 * 8 + 3)
#define                                 OCMUCF3_bit         _BIT_ACCESS(OCMUCF,3)
// OCMUCF<OCMUCF4>
extern volatile __bit                   OCMUCF4             __at(0x2CA4);	// @ (0x594 * 8 + 4)
#define                                 OCMUCF4_bit         _BIT_ACCESS(OCMUCF,4)
// OCMUCF<OCMUCF5>
extern volatile __bit                   OCMUCF5             __at(0x2CA5);	// @ (0x594 * 8 + 5)
#define                                 OCMUCF5_bit         _BIT_ACCESS(OCMUCF,5)
// OCMUCF<OCMUCF6>
extern volatile __bit                   OCMUCF6             __at(0x2CA6);	// @ (0x594 * 8 + 6)
#define                                 OCMUCF6_bit         _BIT_ACCESS(OCMUCF,6)
// OCMUCF<OCMUCF7>
extern volatile __bit                   OCMUCF7             __at(0x2CA7);	// @ (0x594 * 8 + 7)
#define                                 OCMUCF7_bit         _BIT_ACCESS(OCMUCF,7)
// DCOMPCON2<OCMUCFE0>
extern volatile __bit                   OCMUCFE0            __at(0x488C);	// @ (0x911 * 8 + 4)
#define                                 OCMUCFE0_bit        _BIT_ACCESS(DCOMPCON2,4)
// DCOMPCON2<OCMUCFE1>
extern volatile __bit                   OCMUCFE1            __at(0x488D);	// @ (0x911 * 8 + 5)
#define                                 OCMUCFE1_bit        _BIT_ACCESS(DCOMPCON2,5)
// DRVCON2<OCMUCFEH>
extern volatile __bit                   OCMUCFEH            __at(0x1CCD);	// @ (0x399 * 8 + 5)
#define                                 OCMUCFEH_bit        _BIT_ACCESS(DRVCON2,5)
// DRVCON1<OCMUCFEL>
extern volatile __bit                   OCMUCFEL            __at(0x1CC5);	// @ (0x398 * 8 + 5)
#define                                 OCMUCFEL_bit        _BIT_ACCESS(DRVCON1,5)
// OCMCON2<OCMUCFINT>
extern volatile __bit                   OCMUCFINT           __at(0x2C88);	// @ (0x591 * 8 + 0)
#define                                 OCMUCFINT_bit       _BIT_ACCESS(OCMCON2,0)
// PIE5<OCMUCIE>
extern volatile __bit                   OCMUCIE             __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 OCMUCIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<OCMUCIF>
extern volatile __bit                   OCMUCIF             __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 OCMUCIF_bit         _BIT_ACCESS(PIR5,0)
// OCMCON2<OCMUCLAT>
extern volatile __bit                   OCMUCLAT            __at(0x2C8C);	// @ (0x591 * 8 + 4)
#define                                 OCMUCLAT_bit        _BIT_ACCESS(OCMCON2,4)
// OCMUCR<OCMUCR0>
extern volatile __bit                   OCMUCR0             __at(0x2C98);	// @ (0x593 * 8 + 0)
#define                                 OCMUCR0_bit         _BIT_ACCESS(OCMUCR,0)
// OCMUCR<OCMUCR1>
extern volatile __bit                   OCMUCR1             __at(0x2C99);	// @ (0x593 * 8 + 1)
#define                                 OCMUCR1_bit         _BIT_ACCESS(OCMUCR,1)
// OCMUCR<OCMUCR2>
extern volatile __bit                   OCMUCR2             __at(0x2C9A);	// @ (0x593 * 8 + 2)
#define                                 OCMUCR2_bit         _BIT_ACCESS(OCMUCR,2)
// OCMUCR<OCMUCR3>
extern volatile __bit                   OCMUCR3             __at(0x2C9B);	// @ (0x593 * 8 + 3)
#define                                 OCMUCR3_bit         _BIT_ACCESS(OCMUCR,3)
// OCMUCR<OCMUCR4>
extern volatile __bit                   OCMUCR4             __at(0x2C9C);	// @ (0x593 * 8 + 4)
#define                                 OCMUCR4_bit         _BIT_ACCESS(OCMUCR,4)
// OCMUCR<OCMUCR5>
extern volatile __bit                   OCMUCR5             __at(0x2C9D);	// @ (0x593 * 8 + 5)
#define                                 OCMUCR5_bit         _BIT_ACCESS(OCMUCR,5)
// OCMUCR<OCMUCR6>
extern volatile __bit                   OCMUCR6             __at(0x2C9E);	// @ (0x593 * 8 + 6)
#define                                 OCMUCR6_bit         _BIT_ACCESS(OCMUCR,6)
// OCMUCR<OCMUCR7>
extern volatile __bit                   OCMUCR7             __at(0x2C9F);	// @ (0x593 * 8 + 7)
#define                                 OCMUCR7_bit         _BIT_ACCESS(OCMUCR,7)
// OCMCON2<OCMUCRINT>
extern volatile __bit                   OCMUCRINT           __at(0x2C89);	// @ (0x591 * 8 + 1)
#define                                 OCMUCRINT_bit       _BIT_ACCESS(OCMCON2,1)
// PMD4<OCRMD>
extern volatile __bit                   OCRMD               __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 OCRMD_bit           _BIT_ACCESS(PMD4,0)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0x79D0);	// @ (0xF3A * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0x79D1);	// @ (0xF3A * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0x79D2);	// @ (0xF3A * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0x79D3);	// @ (0xF3A * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0x7A28);	// @ (0xF45 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0x7A29);	// @ (0xF45 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0x7A2A);	// @ (0xF45 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0x7A2B);	// @ (0xF45 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0x7A2C);	// @ (0xF45 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0x7A2D);	// @ (0xF45 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0x7A2E);	// @ (0xF45 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0x7A2F);	// @ (0xF45 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0x8E9);	// @ (0x11D * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// OVMCON0<OMCTS>
extern volatile __bit                   OMCTS               __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 OMCTS_bit           _BIT_ACCESS(OVMCON0,3)
// OVMCON0<OMLT0>
extern volatile __bit                   OMLT0               __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 OMLT0_bit           _BIT_ACCESS(OVMCON0,5)
// OVMCON0<OMLT1>
extern volatile __bit                   OMLT1               __at(0x307E);	// @ (0x60F * 8 + 6)
#define                                 OMLT1_bit           _BIT_ACCESS(OVMCON0,6)
// OVMCON0<OMLT2>
extern volatile __bit                   OMLT2               __at(0x307F);	// @ (0x60F * 8 + 7)
#define                                 OMLT2_bit           _BIT_ACCESS(OVMCON0,7)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// OVMCORRESL<OVM0>
extern volatile __bit                   OVM0                __at(0x30C6);	// @ (0x618 * 8 + 6)
#define                                 OVM0_bit            _BIT_ACCESS(OVMCORRESL,6)
// OVMCORRESL<OVM1>
extern volatile __bit                   OVM1                __at(0x30C7);	// @ (0x618 * 8 + 7)
#define                                 OVM1_bit            _BIT_ACCESS(OVMCORRESL,7)
// OVMCORRESH<OVM2>
extern volatile __bit                   OVM2                __at(0x30C8);	// @ (0x619 * 8 + 0)
#define                                 OVM2_bit            _BIT_ACCESS(OVMCORRESH,0)
// OVMCORRESH<OVM3>
extern volatile __bit                   OVM3                __at(0x30C9);	// @ (0x619 * 8 + 1)
#define                                 OVM3_bit            _BIT_ACCESS(OVMCORRESH,1)
// OVMCORRESH<OVM4>
extern volatile __bit                   OVM4                __at(0x30CA);	// @ (0x619 * 8 + 2)
#define                                 OVM4_bit            _BIT_ACCESS(OVMCORRESH,2)
// OVMCORRESH<OVM5>
extern volatile __bit                   OVM5                __at(0x30CB);	// @ (0x619 * 8 + 3)
#define                                 OVM5_bit            _BIT_ACCESS(OVMCORRESH,3)
// OVMCORRESH<OVM6>
extern volatile __bit                   OVM6                __at(0x30CC);	// @ (0x619 * 8 + 4)
#define                                 OVM6_bit            _BIT_ACCESS(OVMCORRESH,4)
// OVMCORRESH<OVM7>
extern volatile __bit                   OVM7                __at(0x30CD);	// @ (0x619 * 8 + 5)
#define                                 OVM7_bit            _BIT_ACCESS(OVMCORRESH,5)
// OVMCORRESH<OVM8>
extern volatile __bit                   OVM8                __at(0x30CE);	// @ (0x619 * 8 + 6)
#define                                 OVM8_bit            _BIT_ACCESS(OVMCORRESH,6)
// OVMCORRESH<OVM9>
extern volatile __bit                   OVM9                __at(0x30CF);	// @ (0x619 * 8 + 7)
#define                                 OVM9_bit            _BIT_ACCESS(OVMCORRESH,7)
// PIE5<OVMADCIE>
extern volatile __bit                   OVMADCIE            __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 OVMADCIE_bit        _BIT_ACCESS(PIE5,6)
// PIR5<OVMADCIF>
extern volatile __bit                   OVMADCIF            __at(0x388E);	// @ (0x711 * 8 + 6)
#define                                 OVMADCIF_bit        _BIT_ACCESS(PIR5,6)
// OVMCON3<OVMGS0>
extern volatile __bit                   OVMGS0              __at(0x3090);	// @ (0x612 * 8 + 0)
#define                                 OVMGS0_bit          _BIT_ACCESS(OVMCON3,0)
// OVMCON3<OVMGS1>
extern volatile __bit                   OVMGS1              __at(0x3091);	// @ (0x612 * 8 + 1)
#define                                 OVMGS1_bit          _BIT_ACCESS(OVMCON3,1)
// OVMCON3<OVMGS2>
extern volatile __bit                   OVMGS2              __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 OVMGS2_bit          _BIT_ACCESS(OVMCON3,2)
// PMD3<OVMMD>
extern volatile __bit                   OVMMD               __at(0x3CCE);	// @ (0x799 * 8 + 6)
#define                                 OVMMD_bit           _BIT_ACCESS(PMD3,6)
// DRVCON2<OVMOFEH>
extern volatile __bit                   OVMOFEH             __at(0x1CCC);	// @ (0x399 * 8 + 4)
#define                                 OVMOFEH_bit         _BIT_ACCESS(DRVCON2,4)
// OVMOVUVOUT<OVMOV>
extern volatile __bit                   OVMOV               __at(0x30BD);	// @ (0x617 * 8 + 5)
#define                                 OVMOV_bit           _BIT_ACCESS(OVMOVUVOUT,5)
// OVMCON1<OVMOVCNT0>
extern volatile __bit                   OVMOVCNT0           __at(0x3085);	// @ (0x610 * 8 + 5)
#define                                 OVMOVCNT0_bit       _BIT_ACCESS(OVMCON1,5)
// OVMCON1<OVMOVCNT1>
extern volatile __bit                   OVMOVCNT1           __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 OVMOVCNT1_bit       _BIT_ACCESS(OVMCON1,6)
// OVMCON1<OVMOVCNT2>
extern volatile __bit                   OVMOVCNT2           __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 OVMOVCNT2_bit       _BIT_ACCESS(OVMCON1,7)
// DCOMPCON2<OVMOVFE0>
extern volatile __bit                   OVMOVFE0            __at(0x488A);	// @ (0x911 * 8 + 2)
#define                                 OVMOVFE0_bit        _BIT_ACCESS(DCOMPCON2,2)
// DCOMPCON2<OVMOVFE1>
extern volatile __bit                   OVMOVFE1            __at(0x488B);	// @ (0x911 * 8 + 3)
#define                                 OVMOVFE1_bit        _BIT_ACCESS(DCOMPCON2,3)
// DRVCON1<OVMOVFEL>
extern volatile __bit                   OVMOVFEL            __at(0x1CC4);	// @ (0x398 * 8 + 4)
#define                                 OVMOVFEL_bit        _BIT_ACCESS(DRVCON1,4)
// OVMCON1<OVMOVFINT>
extern volatile __bit                   OVMOVFINT           __at(0x3082);	// @ (0x610 * 8 + 2)
#define                                 OVMOVFINT_bit       _BIT_ACCESS(OVMCON1,2)
// PIE5<OVMOVIE>
extern volatile __bit                   OVMOVIE             __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 OVMOVIE_bit         _BIT_ACCESS(PIE5,5)
// PIR5<OVMOVIF>
extern volatile __bit                   OVMOVIF             __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 OVMOVIF_bit         _BIT_ACCESS(PIR5,5)
// OVMCON1<OVMOVLAT>
extern volatile __bit                   OVMOVLAT            __at(0x3084);	// @ (0x610 * 8 + 4)
#define                                 OVMOVLAT_bit        _BIT_ACCESS(OVMCON1,4)
// OVMCON1<OVMOVRINT>
extern volatile __bit                   OVMOVRINT           __at(0x3083);	// @ (0x610 * 8 + 3)
#define                                 OVMOVRINT_bit       _BIT_ACCESS(OVMCON1,3)
// OVMCON3<OVMSIGN>
extern volatile __bit                   OVMSIGN             __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 OVMSIGN_bit         _BIT_ACCESS(OVMCON3,7)
// OVMOVUVOUT<OVMUV>
extern volatile __bit                   OVMUV               __at(0x30BC);	// @ (0x617 * 8 + 4)
#define                                 OVMUV_bit           _BIT_ACCESS(OVMOVUVOUT,4)
// OVMCON2<OVMUVCNT0>
extern volatile __bit                   OVMUVCNT0           __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 OVMUVCNT0_bit       _BIT_ACCESS(OVMCON2,5)
// OVMCON2<OVMUVCNT1>
extern volatile __bit                   OVMUVCNT1           __at(0x308E);	// @ (0x611 * 8 + 6)
#define                                 OVMUVCNT1_bit       _BIT_ACCESS(OVMCON2,6)
// OVMCON2<OVMUVCNT2>
extern volatile __bit                   OVMUVCNT2           __at(0x308F);	// @ (0x611 * 8 + 7)
#define                                 OVMUVCNT2_bit       _BIT_ACCESS(OVMCON2,7)
// DCOMPCON2<OVMUVFE0>
extern volatile __bit                   OVMUVFE0            __at(0x4888);	// @ (0x911 * 8 + 0)
#define                                 OVMUVFE0_bit        _BIT_ACCESS(DCOMPCON2,0)
// DCOMPCON2<OVMUVFE1>
extern volatile __bit                   OVMUVFE1            __at(0x4889);	// @ (0x911 * 8 + 1)
#define                                 OVMUVFE1_bit        _BIT_ACCESS(DCOMPCON2,1)
// DRVCON2<OVMUVFEH>
extern volatile __bit                   OVMUVFEH            __at(0x1CCB);	// @ (0x399 * 8 + 3)
#define                                 OVMUVFEH_bit        _BIT_ACCESS(DRVCON2,3)
// DRVCON1<OVMUVFEL>
extern volatile __bit                   OVMUVFEL            __at(0x1CC3);	// @ (0x398 * 8 + 3)
#define                                 OVMUVFEL_bit        _BIT_ACCESS(DRVCON1,3)
// OVMCON2<OVMUVFINT>
extern volatile __bit                   OVMUVFINT           __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 OVMUVFINT_bit       _BIT_ACCESS(OVMCON2,0)
// PIE5<OVMUVIE>
extern volatile __bit                   OVMUVIE             __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 OVMUVIE_bit         _BIT_ACCESS(PIE5,4)
// PIR5<OVMUVIF>
extern volatile __bit                   OVMUVIF             __at(0x388C);	// @ (0x711 * 8 + 4)
#define                                 OVMUVIF_bit         _BIT_ACCESS(PIR5,4)
// OVMCON2<OVMUVLAT>
extern volatile __bit                   OVMUVLAT            __at(0x308C);	// @ (0x611 * 8 + 4)
#define                                 OVMUVLAT_bit        _BIT_ACCESS(OVMCON2,4)
// OVMCON2<OVMUVRINT>
extern volatile __bit                   OVMUVRINT           __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 OVMUVRINT_bit       _BIT_ACCESS(OVMCON2,1)
// SSP1STAT<P2>
extern volatile __bit                   P2                  __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 P2_bit              _BIT_ACCESS(SSP1STAT,4)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0xC96);	// @ (0x192 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// TST_PERDOVR<PEROVR0>
extern volatile __bit                   PEROVR0             __at(0x6C90);	// @ (0xD92 * 8 + 0)
#define                                 PEROVR0_bit         _BIT_ACCESS(TST_PERDOVR,0)
// TST_PERDOVR<PEROVR1>
extern volatile __bit                   PEROVR1             __at(0x6C91);	// @ (0xD92 * 8 + 1)
#define                                 PEROVR1_bit         _BIT_ACCESS(TST_PERDOVR,1)
// TST_PERDOVR<PEROVR2>
extern volatile __bit                   PEROVR2             __at(0x6C92);	// @ (0xD92 * 8 + 2)
#define                                 PEROVR2_bit         _BIT_ACCESS(TST_PERDOVR,2)
// TST_PERDOVR<PEROVR3>
extern volatile __bit                   PEROVR3             __at(0x6C93);	// @ (0xD92 * 8 + 3)
#define                                 PEROVR3_bit         _BIT_ACCESS(TST_PERDOVR,3)
// TST_PERDOVR<PEROVR4>
extern volatile __bit                   PEROVR4             __at(0x6C94);	// @ (0xD92 * 8 + 4)
#define                                 PEROVR4_bit         _BIT_ACCESS(TST_PERDOVR,4)
// TST_PERDOVR<PEROVR5>
extern volatile __bit                   PEROVR5             __at(0x6C95);	// @ (0xD92 * 8 + 5)
#define                                 PEROVR5_bit         _BIT_ACCESS(TST_PERDOVR,5)
// TST_PIBREAD<PIBREAD0>
extern volatile __bit                   PIBREAD0            __at(0x6CB0);	// @ (0xD96 * 8 + 0)
#define                                 PIBREAD0_bit        _BIT_ACCESS(TST_PIBREAD,0)
// TST_PIBREAD<PIBREAD1>
extern volatile __bit                   PIBREAD1            __at(0x6CB1);	// @ (0xD96 * 8 + 1)
#define                                 PIBREAD1_bit        _BIT_ACCESS(TST_PIBREAD,1)
// TST_PIBREAD<PIBREAD2>
extern volatile __bit                   PIBREAD2            __at(0x6CB2);	// @ (0xD96 * 8 + 2)
#define                                 PIBREAD2_bit        _BIT_ACCESS(TST_PIBREAD,2)
// TST_PIBREAD<PIBREAD3>
extern volatile __bit                   PIBREAD3            __at(0x6CB3);	// @ (0xD96 * 8 + 3)
#define                                 PIBREAD3_bit        _BIT_ACCESS(TST_PIBREAD,3)
// TST_PIBREAD<PIBREAD4>
extern volatile __bit                   PIBREAD4            __at(0x6CB4);	// @ (0xD96 * 8 + 4)
#define                                 PIBREAD4_bit        _BIT_ACCESS(TST_PIBREAD,4)
// TST_PIBREAD<PIBREAD5>
extern volatile __bit                   PIBREAD5            __at(0x6CB5);	// @ (0xD96 * 8 + 5)
#define                                 PIBREAD5_bit        _BIT_ACCESS(TST_PIBREAD,5)
// TST_ISMSTAT<PIBSTAT>
extern volatile __bit                   PIBSTAT             __at(0x6C80);	// @ (0xD90 * 8 + 0)
#define                                 PIBSTAT_bit         _BIT_ACCESS(TST_ISMSTAT,0)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x20F8);	// @ (0x41F * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x20F9);	// @ (0x41F * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x20FA);	// @ (0x41F * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x20FB);	// @ (0x41F * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCEN<PLL32EN>
extern volatile __bit                   PLL32EN             __at(0x4488);	// @ (0x891 * 8 + 0)
#define                                 PLL32EN_bit         _BIT_ACCESS(OSCEN,0)
// OSCSTAT1<PLL32OR>
extern volatile __bit                   PLL32OR             __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 PLL32OR_bit         _BIT_ACCESS(OSCSTAT1,0)
// ICDIO<PORT_ICDCLK>
extern volatile __bit                   PORT_ICDCLK         __at(0x7C66);	// @ (0xF8C * 8 + 6)
#define                                 PORT_ICDCLK_bit     _BIT_ACCESS(ICDIO,6)
// ICDIO<PORT_ICDDAT>
extern volatile __bit                   PORT_ICDDAT         __at(0x7C67);	// @ (0xF8C * 8 + 7)
#define                                 PORT_ICDDAT_bit     _BIT_ACCESS(ICDIO,7)
// TST_PPSDOV<PPSDOV0>
extern volatile __bit                   PPSDOV0             __at(0x76C0);	// @ (0xED8 * 8 + 0)
#define                                 PPSDOV0_bit         _BIT_ACCESS(TST_PPSDOV,0)
// TST_PPSDOV<PPSDOV1>
extern volatile __bit                   PPSDOV1             __at(0x76C1);	// @ (0xED8 * 8 + 1)
#define                                 PPSDOV1_bit         _BIT_ACCESS(TST_PPSDOV,1)
// TST_PPSDOV<PPSDOV2>
extern volatile __bit                   PPSDOV2             __at(0x76C2);	// @ (0xED8 * 8 + 2)
#define                                 PPSDOV2_bit         _BIT_ACCESS(TST_PPSDOV,2)
// TST_PPSDOV<PPSDOV3>
extern volatile __bit                   PPSDOV3             __at(0x76C3);	// @ (0xED8 * 8 + 3)
#define                                 PPSDOV3_bit         _BIT_ACCESS(TST_PPSDOV,3)
// TST_PPSEOV<PPSEOV0>
extern volatile __bit                   PPSEOV0             __at(0x76C8);	// @ (0xED9 * 8 + 0)
#define                                 PPSEOV0_bit         _BIT_ACCESS(TST_PPSEOV,0)
// TST_PPSEOV<PPSEOV1>
extern volatile __bit                   PPSEOV1             __at(0x76C9);	// @ (0xED9 * 8 + 1)
#define                                 PPSEOV1_bit         _BIT_ACCESS(TST_PPSEOV,1)
// TST_PPSEOV<PPSEOV2>
extern volatile __bit                   PPSEOV2             __at(0x76CA);	// @ (0xED9 * 8 + 2)
#define                                 PPSEOV2_bit         _BIT_ACCESS(TST_PPSEOV,2)
// TST_PPSEOV<PPSEOV3>
extern volatile __bit                   PPSEOV3             __at(0x76CB);	// @ (0xED9 * 8 + 3)
#define                                 PPSEOV3_bit         _BIT_ACCESS(TST_PPSEOV,3)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x7478);	// @ (0xE8F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// T2HLT<PSYNC>
extern volatile __bit                   PSYNC               __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 PSYNC_bit           _BIT_ACCESS(T2HLT,7)
// SWFRQCON<PWOUT>
extern volatile __bit                   PWOUT               __at(0x1C63);	// @ (0x38C * 8 + 3)
#define                                 PWOUT_bit           _BIT_ACCESS(SWFRQCON,3)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x7880);	// @ (0xF10 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x7881);	// @ (0xF10 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x7882);	// @ (0xF10 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x7883);	// @ (0xF10 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// RA0PPS<RA0PPS5>
extern volatile __bit                   RA0PPS5             __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 RA0PPS5_bit         _BIT_ACCESS(RA0PPS,5)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x7888);	// @ (0xF11 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x7889);	// @ (0xF11 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x788A);	// @ (0xF11 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x788B);	// @ (0xF11 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x788C);	// @ (0xF11 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// RA1PPS<RA1PPS5>
extern volatile __bit                   RA1PPS5             __at(0x788D);	// @ (0xF11 * 8 + 5)
#define                                 RA1PPS5_bit         _BIT_ACCESS(RA1PPS,5)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x7890);	// @ (0xF12 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x7891);	// @ (0xF12 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x7892);	// @ (0xF12 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x7893);	// @ (0xF12 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x7894);	// @ (0xF12 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// RA2PPS<RA2PPS5>
extern volatile __bit                   RA2PPS5             __at(0x7895);	// @ (0xF12 * 8 + 5)
#define                                 RA2PPS5_bit         _BIT_ACCESS(RA2PPS,5)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0x7898);	// @ (0xF13 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0x7899);	// @ (0xF13 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0x789A);	// @ (0xF13 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0x789C);	// @ (0xF13 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// RA3PPS<RA3PPS5>
extern volatile __bit                   RA3PPS5             __at(0x789D);	// @ (0xF13 * 8 + 5)
#define                                 RA3PPS5_bit         _BIT_ACCESS(RA3PPS,5)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x68);	// @ (0xD * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0x78C0);	// @ (0xF18 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// RB0PPS<RB0PPS5>
extern volatile __bit                   RB0PPS5             __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 RB0PPS5_bit         _BIT_ACCESS(RB0PPS,5)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x69);	// @ (0xD * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0x78C8);	// @ (0xF19 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0x78C9);	// @ (0xF19 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0x78CA);	// @ (0xF19 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0x78CB);	// @ (0xF19 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0x78CC);	// @ (0xF19 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// RB1PPS<RB1PPS5>
extern volatile __bit                   RB1PPS5             __at(0x78CD);	// @ (0xF19 * 8 + 5)
#define                                 RB1PPS5_bit         _BIT_ACCESS(RB1PPS,5)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x6A);	// @ (0xD * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0x78D0);	// @ (0xF1A * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0x78D1);	// @ (0xF1A * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0x78D4);	// @ (0xF1A * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// RB2PPS<RB2PPS5>
extern volatile __bit                   RB2PPS5             __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 RB2PPS5_bit         _BIT_ACCESS(RB2PPS,5)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x6B);	// @ (0xD * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0x78DC);	// @ (0xF1B * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// RB3PPS<RB3PPS5>
extern volatile __bit                   RB3PPS5             __at(0x78DD);	// @ (0xF1B * 8 + 5)
#define                                 RB3PPS5_bit         _BIT_ACCESS(RB3PPS,5)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x6C);	// @ (0xD * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// RB4PPS<RB4PPS5>
extern volatile __bit                   RB4PPS5             __at(0x78E5);	// @ (0xF1C * 8 + 5)
#define                                 RB4PPS5_bit         _BIT_ACCESS(RB4PPS,5)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x6D);	// @ (0xD * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0x78E8);	// @ (0xF1D * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0x78E9);	// @ (0xF1D * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0x78EA);	// @ (0xF1D * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0x78EB);	// @ (0xF1D * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0x78EC);	// @ (0xF1D * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// RB5PPS<RB5PPS5>
extern volatile __bit                   RB5PPS5             __at(0x78ED);	// @ (0xF1D * 8 + 5)
#define                                 RB5PPS5_bit         _BIT_ACCESS(RB5PPS,5)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x6E);	// @ (0xD * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0x78F0);	// @ (0xF1E * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0x78F1);	// @ (0xF1E * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0x78F2);	// @ (0xF1E * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0x78F3);	// @ (0xF1E * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0x78F4);	// @ (0xF1E * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// RB6PPS<RB6PPS5>
extern volatile __bit                   RB6PPS5             __at(0x78F5);	// @ (0xF1E * 8 + 5)
#define                                 RB6PPS5_bit         _BIT_ACCESS(RB6PPS,5)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x6F);	// @ (0xD * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0x78F8);	// @ (0xF1F * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0x78F9);	// @ (0xF1F * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0x78FA);	// @ (0xF1F * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0x78FB);	// @ (0xF1F * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0x78FC);	// @ (0xF1F * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// RB7PPS<RB7PPS5>
extern volatile __bit                   RB7PPS5             __at(0x78FD);	// @ (0xF1F * 8 + 5)
#define                                 RB7PPS5_bit         _BIT_ACCESS(RB7PPS,5)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x7920);	// @ (0xF24 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x7921);	// @ (0xF24 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x7922);	// @ (0xF24 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x7923);	// @ (0xF24 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x7924);	// @ (0xF24 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// RC4PPS<RC4PPS5>
extern volatile __bit                   RC4PPS5             __at(0x7925);	// @ (0xF24 * 8 + 5)
#define                                 RC4PPS5_bit         _BIT_ACCESS(RC4PPS,5)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x7928);	// @ (0xF25 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x7929);	// @ (0xF25 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x792A);	// @ (0xF25 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x792B);	// @ (0xF25 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x792C);	// @ (0xF25 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// RC5PPS<RC5PPS5>
extern volatile __bit                   RC5PPS5             __at(0x792D);	// @ (0xF25 * 8 + 5)
#define                                 RC5PPS5_bit         _BIT_ACCESS(RC5PPS,5)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x76);	// @ (0xE * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0x7930);	// @ (0xF26 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0x7931);	// @ (0xF26 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0x7932);	// @ (0xF26 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0x7933);	// @ (0xF26 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0x7934);	// @ (0xF26 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// RC6PPS<RC6PPS5>
extern volatile __bit                   RC6PPS5             __at(0x7935);	// @ (0xF26 * 8 + 5)
#define                                 RC6PPS5_bit         _BIT_ACCESS(RC6PPS,5)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x77);	// @ (0xE * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0x8FE);	// @ (0x11F * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// PIE4<RCIE>
extern volatile __bit                   RCIE                __at(0x38D5);	// @ (0x71A * 8 + 5)
#define                                 RCIE_bit            _BIT_ACCESS(PIE4,5)
// PIR4<RCIF>
extern volatile __bit                   RCIF                __at(0x3885);	// @ (0x710 * 8 + 5)
#define                                 RCIF_bit            _BIT_ACCESS(PIR4,5)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x40F0);	// @ (0x81E * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// SSP1STAT<READ_WRITE>
extern volatile __bit                   READ_WRITE          __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE_bit      _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// RLOAD<RLOAD0>
extern volatile __bit                   RLOAD0              __at(0x4CE0);	// @ (0x99C * 8 + 0)
#define                                 RLOAD0_bit          _BIT_ACCESS(RLOAD,0)
// RLOAD<RLOAD1>
extern volatile __bit                   RLOAD1              __at(0x4CE1);	// @ (0x99C * 8 + 1)
#define                                 RLOAD1_bit          _BIT_ACCESS(RLOAD,1)
// RLOAD<RLOAD2>
extern volatile __bit                   RLOAD2              __at(0x4CE2);	// @ (0x99C * 8 + 2)
#define                                 RLOAD2_bit          _BIT_ACCESS(RLOAD,2)
// RLOAD<RLOAD3>
extern volatile __bit                   RLOAD3              __at(0x4CE3);	// @ (0x99C * 8 + 3)
#define                                 RLOAD3_bit          _BIT_ACCESS(RLOAD,3)
// RLOAD<RLOAD4>
extern volatile __bit                   RLOAD4              __at(0x4CE4);	// @ (0x99C * 8 + 4)
#define                                 RLOAD4_bit          _BIT_ACCESS(RLOAD,4)
// RLOAD<RLOAD5>
extern volatile __bit                   RLOAD5              __at(0x4CE5);	// @ (0x99C * 8 + 5)
#define                                 RLOAD5_bit          _BIT_ACCESS(RLOAD,5)
// RLOAD<RLOAD6>
extern volatile __bit                   RLOAD6              __at(0x4CE6);	// @ (0x99C * 8 + 6)
#define                                 RLOAD6_bit          _BIT_ACCESS(RLOAD,6)
// RLOAD<RLOAD7>
extern volatile __bit                   RLOAD7              __at(0x4CE7);	// @ (0x99C * 8 + 7)
#define                                 RLOAD7_bit          _BIT_ACCESS(RLOAD,7)
// RLOSS<RLOSS0>
extern volatile __bit                   RLOSS0              __at(0x4CE8);	// @ (0x99D * 8 + 0)
#define                                 RLOSS0_bit          _BIT_ACCESS(RLOSS,0)
// RLOSS<RLOSS1>
extern volatile __bit                   RLOSS1              __at(0x4CE9);	// @ (0x99D * 8 + 1)
#define                                 RLOSS1_bit          _BIT_ACCESS(RLOSS,1)
// RLOSS<RLOSS2>
extern volatile __bit                   RLOSS2              __at(0x4CEA);	// @ (0x99D * 8 + 2)
#define                                 RLOSS2_bit          _BIT_ACCESS(RLOSS,2)
// RLOSS<RLOSS3>
extern volatile __bit                   RLOSS3              __at(0x4CEB);	// @ (0x99D * 8 + 3)
#define                                 RLOSS3_bit          _BIT_ACCESS(RLOSS,3)
// RLOSS<RLOSS4>
extern volatile __bit                   RLOSS4              __at(0x4CEC);	// @ (0x99D * 8 + 4)
#define                                 RLOSS4_bit          _BIT_ACCESS(RLOSS,4)
// RLOSS<RLOSS5>
extern volatile __bit                   RLOSS5              __at(0x4CED);	// @ (0x99D * 8 + 5)
#define                                 RLOSS5_bit          _BIT_ACCESS(RLOSS,5)
// RLOSS<RLOSS6>
extern volatile __bit                   RLOSS6              __at(0x4CEE);	// @ (0x99D * 8 + 6)
#define                                 RLOSS6_bit          _BIT_ACCESS(RLOSS,6)
// RLOSS<RLOSS7>
extern volatile __bit                   RLOSS7              __at(0x4CEF);	// @ (0x99D * 8 + 7)
#define                                 RLOSS7_bit          _BIT_ACCESS(RLOSS,7)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x4465);	// @ (0x88C * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// ICDCON0<RSTVEC>
extern volatile __bit                   RSTVEC              __at(0x7C68);	// @ (0xF8D * 8 + 0)
#define                                 RSTVEC_bit          _BIT_ACCESS(ICDCON0,0)
// SSP1STAT<RW>
extern volatile __bit                   RW                  __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0x8EE);	// @ (0x11D * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0x8E8);	// @ (0x11D * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// TST_PPSIN4<RXDT>
extern volatile __bit                   RXDT                __at(0x7698);	// @ (0xED3 * 8 + 0)
#define                                 RXDT_bit            _BIT_ACCESS(TST_PPSIN4,0)
// SSP1STAT<R_W>
extern volatile __bit                   R_W                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<S2>
extern volatile __bit                   S2                  __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 S2_bit              _BIT_ACCESS(SSP1STAT,3)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0xC92);	// @ (0x192 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SCANCON0<SCANGO>
extern volatile __bit                   SCANGO              __at(0x2086);	// @ (0x410 * 8 + 6)
#define                                 SCANGO_bit          _BIT_ACCESS(SCANCON0,6)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x3CB3);	// @ (0x796 * 8 + 3)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,3)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0xC95);	// @ (0x192 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0x8FC);	// @ (0x11F * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0xC93);	// @ (0x192 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// SSP1CON2<SEN>
extern volatile __bit                   SEN                 __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 SEN_bit             _BIT_ACCESS(SSP1CON2,0)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0x8F3);	// @ (0x11E * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// CRCSHIFTL<SHFT0>
extern volatile __bit                   SHFT0               __at(0x20D0);	// @ (0x41A * 8 + 0)
#define                                 SHFT0_bit           _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHFT1>
extern volatile __bit                   SHFT1               __at(0x20D1);	// @ (0x41A * 8 + 1)
#define                                 SHFT1_bit           _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHFT10>
extern volatile __bit                   SHFT10              __at(0x20DA);	// @ (0x41B * 8 + 2)
#define                                 SHFT10_bit          _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHFT11>
extern volatile __bit                   SHFT11              __at(0x20DB);	// @ (0x41B * 8 + 3)
#define                                 SHFT11_bit          _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHFT12>
extern volatile __bit                   SHFT12              __at(0x20DC);	// @ (0x41B * 8 + 4)
#define                                 SHFT12_bit          _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHFT13>
extern volatile __bit                   SHFT13              __at(0x20DD);	// @ (0x41B * 8 + 5)
#define                                 SHFT13_bit          _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHFT14>
extern volatile __bit                   SHFT14              __at(0x20DE);	// @ (0x41B * 8 + 6)
#define                                 SHFT14_bit          _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHFT15>
extern volatile __bit                   SHFT15              __at(0x20DF);	// @ (0x41B * 8 + 7)
#define                                 SHFT15_bit          _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHFT2>
extern volatile __bit                   SHFT2               __at(0x20D2);	// @ (0x41A * 8 + 2)
#define                                 SHFT2_bit           _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHFT3>
extern volatile __bit                   SHFT3               __at(0x20D3);	// @ (0x41A * 8 + 3)
#define                                 SHFT3_bit           _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHFT4>
extern volatile __bit                   SHFT4               __at(0x20D4);	// @ (0x41A * 8 + 4)
#define                                 SHFT4_bit           _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHFT5>
extern volatile __bit                   SHFT5               __at(0x20D5);	// @ (0x41A * 8 + 5)
#define                                 SHFT5_bit           _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHFT6>
extern volatile __bit                   SHFT6               __at(0x20D6);	// @ (0x41A * 8 + 6)
#define                                 SHFT6_bit           _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHFT7>
extern volatile __bit                   SHFT7               __at(0x20D7);	// @ (0x41A * 8 + 7)
#define                                 SHFT7_bit           _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHFT8>
extern volatile __bit                   SHFT8               __at(0x20D8);	// @ (0x41B * 8 + 0)
#define                                 SHFT8_bit           _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHFT9>
extern volatile __bit                   SHFT9               __at(0x20D9);	// @ (0x41B * 8 + 1)
#define                                 SHFT9_bit           _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x20F1);	// @ (0x41E * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// TSTBUFCON<SLOT0>
extern volatile __bit                   SLOT0               __at(0x1CFA);	// @ (0x39F * 8 + 2)
#define                                 SLOT0_bit           _BIT_ACCESS(TSTBUFCON,2)
// TSTBUFCON<SLOT1>
extern volatile __bit                   SLOT1               __at(0x1CFB);	// @ (0x39F * 8 + 3)
#define                                 SLOT1_bit           _BIT_ACCESS(TSTBUFCON,3)
// TSTBUFCON<SLOT2>
extern volatile __bit                   SLOT2               __at(0x1CFC);	// @ (0x39F * 8 + 4)
#define                                 SLOT2_bit           _BIT_ACCESS(TSTBUFCON,4)
// TSTBUFCON<SLOT3>
extern volatile __bit                   SLOT3               __at(0x1CFD);	// @ (0x39F * 8 + 5)
#define                                 SLOT3_bit           _BIT_ACCESS(TSTBUFCON,5)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x79D8);	// @ (0xF3B * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x79D9);	// @ (0xF3B * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x79DA);	// @ (0xF3B * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0x79DB);	// @ (0xF3B * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0x7A30);	// @ (0xF46 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0x7A31);	// @ (0xF46 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0x7A32);	// @ (0xF46 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0x7A33);	// @ (0xF46 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0x7A34);	// @ (0xF46 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0x7A35);	// @ (0xF46 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0x7A36);	// @ (0xF46 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0x7A37);	// @ (0xF46 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0x8EF);	// @ (0x11D * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0x8ED);	// @ (0x11D * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// TST_PPSIN4<SSP1CLK>
extern volatile __bit                   SSP1CLK             __at(0x769D);	// @ (0xED3 * 8 + 5)
#define                                 SSP1CLK_bit         _BIT_ACCESS(TST_PPSIN4,5)
// TST_PPSIN4<SSP1DAT>
extern volatile __bit                   SSP1DAT             __at(0x769E);	// @ (0xED3 * 8 + 6)
#define                                 SSP1DAT_bit         _BIT_ACCESS(TST_PPSIN4,6)
// PIE4<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x3880);	// @ (0x710 * 8 + 0)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR4,0)
// TST_PPSIN4<SSP1SS>
extern volatile __bit                   SSP1SS              __at(0x769F);	// @ (0xED3 * 8 + 7)
#define                                 SSP1SS_bit          _BIT_ACCESS(TST_PPSIN4,7)
// SSP1ADD2<SSPADD0>
extern volatile __bit                   SSPADD0             __at(0xC98);	// @ (0x193 * 8 + 0)
#define                                 SSPADD0_bit         _BIT_ACCESS(SSP1ADD2,0)
// SSP1ADD2<SSPADD1>
extern volatile __bit                   SSPADD1             __at(0xC99);	// @ (0x193 * 8 + 1)
#define                                 SSPADD1_bit         _BIT_ACCESS(SSP1ADD2,1)
// SSP1ADD2<SSPADD2>
extern volatile __bit                   SSPADD2             __at(0xC9A);	// @ (0x193 * 8 + 2)
#define                                 SSPADD2_bit         _BIT_ACCESS(SSP1ADD2,2)
// SSP1ADD2<SSPADD3>
extern volatile __bit                   SSPADD3             __at(0xC9B);	// @ (0x193 * 8 + 3)
#define                                 SSPADD3_bit         _BIT_ACCESS(SSP1ADD2,3)
// SSP1ADD2<SSPADD4>
extern volatile __bit                   SSPADD4             __at(0xC9C);	// @ (0x193 * 8 + 4)
#define                                 SSPADD4_bit         _BIT_ACCESS(SSP1ADD2,4)
// SSP1ADD2<SSPADD5>
extern volatile __bit                   SSPADD5             __at(0xC9D);	// @ (0x193 * 8 + 5)
#define                                 SSPADD5_bit         _BIT_ACCESS(SSP1ADD2,5)
// SSP1ADD2<SSPADD6>
extern volatile __bit                   SSPADD6             __at(0xC9E);	// @ (0x193 * 8 + 6)
#define                                 SSPADD6_bit         _BIT_ACCESS(SSP1ADD2,6)
// SSP1ADD2<SSPADD7>
extern volatile __bit                   SSPADD7             __at(0xC9F);	// @ (0x193 * 8 + 7)
#define                                 SSPADD7_bit         _BIT_ACCESS(SSP1ADD2,7)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP1MSK2<SSPMSK0>
extern volatile __bit                   SSPMSK0             __at(0xCA0);	// @ (0x194 * 8 + 0)
#define                                 SSPMSK0_bit         _BIT_ACCESS(SSP1MSK2,0)
// SSP1MSK2<SSPMSK1>
extern volatile __bit                   SSPMSK1             __at(0xCA1);	// @ (0x194 * 8 + 1)
#define                                 SSPMSK1_bit         _BIT_ACCESS(SSP1MSK2,1)
// SSP1MSK2<SSPMSK2>
extern volatile __bit                   SSPMSK2             __at(0xCA2);	// @ (0x194 * 8 + 2)
#define                                 SSPMSK2_bit         _BIT_ACCESS(SSP1MSK2,2)
// SSP1MSK2<SSPMSK3>
extern volatile __bit                   SSPMSK3             __at(0xCA3);	// @ (0x194 * 8 + 3)
#define                                 SSPMSK3_bit         _BIT_ACCESS(SSP1MSK2,3)
// SSP1MSK2<SSPMSK4>
extern volatile __bit                   SSPMSK4             __at(0xCA4);	// @ (0x194 * 8 + 4)
#define                                 SSPMSK4_bit         _BIT_ACCESS(SSP1MSK2,4)
// SSP1MSK2<SSPMSK5>
extern volatile __bit                   SSPMSK5             __at(0xCA5);	// @ (0x194 * 8 + 5)
#define                                 SSPMSK5_bit         _BIT_ACCESS(SSP1MSK2,5)
// SSP1MSK2<SSPMSK6>
extern volatile __bit                   SSPMSK6             __at(0xCA6);	// @ (0x194 * 8 + 6)
#define                                 SSPMSK6_bit         _BIT_ACCESS(SSP1MSK2,6)
// SSP1MSK2<SSPMSK7>
extern volatile __bit                   SSPMSK7             __at(0xCA7);	// @ (0x194 * 8 + 7)
#define                                 SSPMSK7_bit         _BIT_ACCESS(SSP1MSK2,7)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// ICDCON0<SSTEP>
extern volatile __bit                   SSTEP               __at(0x7C6D);	// @ (0xF8D * 8 + 5)
#define                                 SSTEP_bit           _BIT_ACCESS(ICDCON0,5)
// SSP1STAT<START>
extern volatile __bit                   START               __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START_bit           _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x409F);	// @ (0x813 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x409E);	// @ (0x813 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP>
extern volatile __bit                   STOP                __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP_bit            _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PIE7<SWFRQIE>
extern volatile __bit                   SWFRQIE             __at(0x38EC);	// @ (0x71D * 8 + 4)
#define                                 SWFRQIE_bit         _BIT_ACCESS(PIE7,4)
// PIR7<SWFRQIF>
extern volatile __bit                   SWFRQIF             __at(0x389C);	// @ (0x713 * 8 + 4)
#define                                 SWFRQIF_bit         _BIT_ACCESS(PIR7,4)
// PMD4<SWFRQMD>
extern volatile __bit                   SWFRQMD             __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 SWFRQMD_bit         _BIT_ACCESS(PMD4,4)
// SWFRQCON<SWFRQON>
extern volatile __bit                   SWFRQON             __at(0x1C67);	// @ (0x38C * 8 + 7)
#define                                 SWFRQON_bit         _BIT_ACCESS(SWFRQCON,7)
// SWFRQCON<SWFRQPS0>
extern volatile __bit                   SWFRQPS0            __at(0x1C60);	// @ (0x38C * 8 + 0)
#define                                 SWFRQPS0_bit        _BIT_ACCESS(SWFRQCON,0)
// SWFRQCON<SWFRQPS1>
extern volatile __bit                   SWFRQPS1            __at(0x1C61);	// @ (0x38C * 8 + 1)
#define                                 SWFRQPS1_bit        _BIT_ACCESS(SWFRQCON,1)
// SWFRQCON<SWFRQPS2>
extern volatile __bit                   SWFRQPS2            __at(0x1C62);	// @ (0x38C * 8 + 2)
#define                                 SWFRQPS2_bit        _BIT_ACCESS(SWFRQCON,2)
// SWFRQPWL<SWFRQPW0>
extern volatile __bit                   SWFRQPW0            __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 SWFRQPW0_bit        _BIT_ACCESS(SWFRQPWL,2)
// SWFRQPWL<SWFRQPW1>
extern volatile __bit                   SWFRQPW1            __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 SWFRQPW1_bit        _BIT_ACCESS(SWFRQPWL,3)
// SWFRQPWH<SWFRQPW10>
extern volatile __bit                   SWFRQPW10           __at(0x1C84);	// @ (0x390 * 8 + 4)
#define                                 SWFRQPW10_bit       _BIT_ACCESS(SWFRQPWH,4)
// SWFRQPWH<SWFRQPW11>
extern volatile __bit                   SWFRQPW11           __at(0x1C85);	// @ (0x390 * 8 + 5)
#define                                 SWFRQPW11_bit       _BIT_ACCESS(SWFRQPWH,5)
// SWFRQPWH<SWFRQPW12>
extern volatile __bit                   SWFRQPW12           __at(0x1C86);	// @ (0x390 * 8 + 6)
#define                                 SWFRQPW12_bit       _BIT_ACCESS(SWFRQPWH,6)
// SWFRQPWH<SWFRQPW13>
extern volatile __bit                   SWFRQPW13           __at(0x1C87);	// @ (0x390 * 8 + 7)
#define                                 SWFRQPW13_bit       _BIT_ACCESS(SWFRQPWH,7)
// SWFRQPWL<SWFRQPW2>
extern volatile __bit                   SWFRQPW2            __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 SWFRQPW2_bit        _BIT_ACCESS(SWFRQPWL,4)
// SWFRQPWL<SWFRQPW3>
extern volatile __bit                   SWFRQPW3            __at(0x1C8D);	// @ (0x391 * 8 + 5)
#define                                 SWFRQPW3_bit        _BIT_ACCESS(SWFRQPWL,5)
// SWFRQPWL<SWFRQPW4>
extern volatile __bit                   SWFRQPW4            __at(0x1C8E);	// @ (0x391 * 8 + 6)
#define                                 SWFRQPW4_bit        _BIT_ACCESS(SWFRQPWL,6)
// SWFRQPWL<SWFRQPW5>
extern volatile __bit                   SWFRQPW5            __at(0x1C8F);	// @ (0x391 * 8 + 7)
#define                                 SWFRQPW5_bit        _BIT_ACCESS(SWFRQPWL,7)
// SWFRQPWH<SWFRQPW6>
extern volatile __bit                   SWFRQPW6            __at(0x1C80);	// @ (0x390 * 8 + 0)
#define                                 SWFRQPW6_bit        _BIT_ACCESS(SWFRQPWH,0)
// SWFRQPWH<SWFRQPW7>
extern volatile __bit                   SWFRQPW7            __at(0x1C81);	// @ (0x390 * 8 + 1)
#define                                 SWFRQPW7_bit        _BIT_ACCESS(SWFRQPWH,1)
// SWFRQPWH<SWFRQPW8>
extern volatile __bit                   SWFRQPW8            __at(0x1C82);	// @ (0x390 * 8 + 2)
#define                                 SWFRQPW8_bit        _BIT_ACCESS(SWFRQPWH,2)
// SWFRQPWH<SWFRQPW9>
extern volatile __bit                   SWFRQPW9            __at(0x1C83);	// @ (0x390 * 8 + 3)
#define                                 SWFRQPW9_bit        _BIT_ACCESS(SWFRQPWH,3)
// TX1STA<SYNC>
extern volatile __bit                   SYNC                __at(0x8F4);	// @ (0x11E * 8 + 4)
#define                                 SYNC_bit            _BIT_ACCESS(TX1STA,4)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0xF4);	// @ (0x1E * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0xFC);	// @ (0x1F * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// TST_PPSIN1<T0CKI>
extern volatile __bit                   T0CKI               __at(0x7681);	// @ (0xED0 * 8 + 1)
#define                                 T0CKI_bit           _BIT_ACCESS(TST_PPSIN1,1)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0x7488);	// @ (0xE91 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0x7489);	// @ (0xE91 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0x748A);	// @ (0xE91 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0x748B);	// @ (0xE91 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0xF9);	// @ (0x1F * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0xFA);	// @ (0x1F * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0xFB);	// @ (0x1F * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0xFD);	// @ (0x1F * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0xFE);	// @ (0x1F * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0xFF);	// @ (0x1F * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0xF7);	// @ (0x1E * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0xF5);	// @ (0x1E * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0xF0);	// @ (0x1E * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0xF1);	// @ (0x1E * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0xF2);	// @ (0x1E * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0xF3);	// @ (0x1E * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TST_PPSIN1<T1CKI>
extern volatile __bit                   T1CKI               __at(0x7682);	// @ (0xED0 * 8 + 2)
#define                                 T1CKI_bit           _BIT_ACCESS(TST_PPSIN1,2)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0x7490);	// @ (0xE92 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0x7491);	// @ (0xE92 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0x7492);	// @ (0xE92 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0x7493);	// @ (0xE92 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0x7494);	// @ (0xE92 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// TST_PPSIN1<T1G>
extern volatile __bit                   T1G                 __at(0x7683);	// @ (0xED0 * 8 + 3)
#define                                 T1G_bit             _BIT_ACCESS(TST_PPSIN1,3)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0x7498);	// @ (0xE93 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0x7499);	// @ (0xE93 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0x749A);	// @ (0xE93 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0x749B);	// @ (0xE93 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0x749C);	// @ (0xE93 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T2AINPPS<T2AINPPS0>
extern volatile __bit                   T2AINPPS0           __at(0x74E0);	// @ (0xE9C * 8 + 0)
#define                                 T2AINPPS0_bit       _BIT_ACCESS(T2AINPPS,0)
// T2AINPPS<T2AINPPS1>
extern volatile __bit                   T2AINPPS1           __at(0x74E1);	// @ (0xE9C * 8 + 1)
#define                                 T2AINPPS1_bit       _BIT_ACCESS(T2AINPPS,1)
// T2AINPPS<T2AINPPS2>
extern volatile __bit                   T2AINPPS2           __at(0x74E2);	// @ (0xE9C * 8 + 2)
#define                                 T2AINPPS2_bit       _BIT_ACCESS(T2AINPPS,2)
// T2AINPPS<T2AINPPS3>
extern volatile __bit                   T2AINPPS3           __at(0x74E3);	// @ (0xE9C * 8 + 3)
#define                                 T2AINPPS3_bit       _BIT_ACCESS(T2AINPPS,3)
// T2AINPPS<T2AINPPS4>
extern volatile __bit                   T2AINPPS4           __at(0x74E4);	// @ (0xE9C * 8 + 4)
#define                                 T2AINPPS4_bit       _BIT_ACCESS(T2AINPPS,4)
// TST_PPSIN2<T2IN>
extern volatile __bit                   T2IN                __at(0x7688);	// @ (0xED1 * 8 + 0)
#define                                 T2IN_bit            _BIT_ACCESS(TST_PPSIN2,0)
// TST_PPSIN1<T3CKI>
extern volatile __bit                   T3CKI               __at(0x7684);	// @ (0xED0 * 8 + 4)
#define                                 T3CKI_bit           _BIT_ACCESS(TST_PPSIN1,4)
// T3CKIPPS<T3CKIPPS0>
extern volatile __bit                   T3CKIPPS0           __at(0x74A0);	// @ (0xE94 * 8 + 0)
#define                                 T3CKIPPS0_bit       _BIT_ACCESS(T3CKIPPS,0)
// T3CKIPPS<T3CKIPPS1>
extern volatile __bit                   T3CKIPPS1           __at(0x74A1);	// @ (0xE94 * 8 + 1)
#define                                 T3CKIPPS1_bit       _BIT_ACCESS(T3CKIPPS,1)
// T3CKIPPS<T3CKIPPS2>
extern volatile __bit                   T3CKIPPS2           __at(0x74A2);	// @ (0xE94 * 8 + 2)
#define                                 T3CKIPPS2_bit       _BIT_ACCESS(T3CKIPPS,2)
// T3CKIPPS<T3CKIPPS3>
extern volatile __bit                   T3CKIPPS3           __at(0x74A3);	// @ (0xE94 * 8 + 3)
#define                                 T3CKIPPS3_bit       _BIT_ACCESS(T3CKIPPS,3)
// T3CKIPPS<T3CKIPPS4>
extern volatile __bit                   T3CKIPPS4           __at(0x74A4);	// @ (0xE94 * 8 + 4)
#define                                 T3CKIPPS4_bit       _BIT_ACCESS(T3CKIPPS,4)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x10A4);	// @ (0x214 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x10A5);	// @ (0x214 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// TST_PPSIN1<T3G>
extern volatile __bit                   T3G                 __at(0x7685);	// @ (0xED0 * 8 + 5)
#define                                 T3G_bit             _BIT_ACCESS(TST_PPSIN1,5)
// T3GPPS<T3GPPS0>
extern volatile __bit                   T3GPPS0             __at(0x74A8);	// @ (0xE95 * 8 + 0)
#define                                 T3GPPS0_bit         _BIT_ACCESS(T3GPPS,0)
// T3GPPS<T3GPPS1>
extern volatile __bit                   T3GPPS1             __at(0x74A9);	// @ (0xE95 * 8 + 1)
#define                                 T3GPPS1_bit         _BIT_ACCESS(T3GPPS,1)
// T3GPPS<T3GPPS2>
extern volatile __bit                   T3GPPS2             __at(0x74AA);	// @ (0xE95 * 8 + 2)
#define                                 T3GPPS2_bit         _BIT_ACCESS(T3GPPS,2)
// T3GPPS<T3GPPS3>
extern volatile __bit                   T3GPPS3             __at(0x74AB);	// @ (0xE95 * 8 + 3)
#define                                 T3GPPS3_bit         _BIT_ACCESS(T3GPPS,3)
// T3GPPS<T3GPPS4>
extern volatile __bit                   T3GPPS4             __at(0x74AC);	// @ (0xE95 * 8 + 4)
#define                                 T3GPPS4_bit         _BIT_ACCESS(T3GPPS,4)
// T4AINPPS<T4AINPPS0>
extern volatile __bit                   T4AINPPS0           __at(0x74E8);	// @ (0xE9D * 8 + 0)
#define                                 T4AINPPS0_bit       _BIT_ACCESS(T4AINPPS,0)
// T4AINPPS<T4AINPPS1>
extern volatile __bit                   T4AINPPS1           __at(0x74E9);	// @ (0xE9D * 8 + 1)
#define                                 T4AINPPS1_bit       _BIT_ACCESS(T4AINPPS,1)
// T4AINPPS<T4AINPPS2>
extern volatile __bit                   T4AINPPS2           __at(0x74EA);	// @ (0xE9D * 8 + 2)
#define                                 T4AINPPS2_bit       _BIT_ACCESS(T4AINPPS,2)
// T4AINPPS<T4AINPPS3>
extern volatile __bit                   T4AINPPS3           __at(0x74EB);	// @ (0xE9D * 8 + 3)
#define                                 T4AINPPS3_bit       _BIT_ACCESS(T4AINPPS,3)
// T4AINPPS<T4AINPPS4>
extern volatile __bit                   T4AINPPS4           __at(0x74EC);	// @ (0xE9D * 8 + 4)
#define                                 T4AINPPS4_bit       _BIT_ACCESS(T4AINPPS,4)
// T4HLT<T4CPOL>
extern volatile __bit                   T4CPOL              __at(0x14AE);	// @ (0x295 * 8 + 6)
#define                                 T4CPOL_bit          _BIT_ACCESS(T4HLT,6)
// T4HLT<T4CSYNC>
extern volatile __bit                   T4CSYNC             __at(0x14AD);	// @ (0x295 * 8 + 5)
#define                                 T4CSYNC_bit         _BIT_ACCESS(T4HLT,5)
// TST_PPSIN2<T4IN>
extern volatile __bit                   T4IN                __at(0x7689);	// @ (0xED1 * 8 + 1)
#define                                 T4IN_bit            _BIT_ACCESS(TST_PPSIN2,1)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x14AF);	// @ (0x295 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// DCOMPCON0<TFS0>
extern volatile __bit                   TFS0                __at(0x4878);	// @ (0x90F * 8 + 0)
#define                                 TFS0_bit            _BIT_ACCESS(DCOMPCON0,0)
// DCOMPCON0<TFS1>
extern volatile __bit                   TFS1                __at(0x4879);	// @ (0x90F * 8 + 1)
#define                                 TFS1_bit            _BIT_ACCESS(DCOMPCON0,1)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x38B5);	// @ (0x716 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x3865);	// @ (0x70C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x3CB8);	// @ (0x797 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// PIE2<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE2,6)
// PIR2<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x3876);	// @ (0x70E * 8 + 6)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR2,6)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE2<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE2,0)
// PIR2<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x3870);	// @ (0x70E * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR2,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// PIE2<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE2,1)
// PIR2<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x3871);	// @ (0x70E * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR2,1)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// PIE2<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x38C7);	// @ (0x718 * 8 + 7)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE2,7)
// PIR2<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x3877);	// @ (0x70E * 8 + 7)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR2,7)
// TMR3H<TMR3H0>
extern volatile __bit                   TMR3H0              __at(0x1098);	// @ (0x213 * 8 + 0)
#define                                 TMR3H0_bit          _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR3H1>
extern volatile __bit                   TMR3H1              __at(0x1099);	// @ (0x213 * 8 + 1)
#define                                 TMR3H1_bit          _BIT_ACCESS(TMR3H,1)
// TMR3H<TMR3H2>
extern volatile __bit                   TMR3H2              __at(0x109A);	// @ (0x213 * 8 + 2)
#define                                 TMR3H2_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR3H3>
extern volatile __bit                   TMR3H3              __at(0x109B);	// @ (0x213 * 8 + 3)
#define                                 TMR3H3_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR3H4>
extern volatile __bit                   TMR3H4              __at(0x109C);	// @ (0x213 * 8 + 4)
#define                                 TMR3H4_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR3H5>
extern volatile __bit                   TMR3H5              __at(0x109D);	// @ (0x213 * 8 + 5)
#define                                 TMR3H5_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR3H6>
extern volatile __bit                   TMR3H6              __at(0x109E);	// @ (0x213 * 8 + 6)
#define                                 TMR3H6_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR3H7>
extern volatile __bit                   TMR3H7              __at(0x109F);	// @ (0x213 * 8 + 7)
#define                                 TMR3H7_bit          _BIT_ACCESS(TMR3H,7)
// PIE2<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x38C2);	// @ (0x718 * 8 + 2)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE2,2)
// PIR2<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x3872);	// @ (0x70E * 8 + 2)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR2,2)
// TMR3L<TMR3L0>
extern volatile __bit                   TMR3L0              __at(0x1090);	// @ (0x212 * 8 + 0)
#define                                 TMR3L0_bit          _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR3L1>
extern volatile __bit                   TMR3L1              __at(0x1091);	// @ (0x212 * 8 + 1)
#define                                 TMR3L1_bit          _BIT_ACCESS(TMR3L,1)
// TMR3L<TMR3L2>
extern volatile __bit                   TMR3L2              __at(0x1092);	// @ (0x212 * 8 + 2)
#define                                 TMR3L2_bit          _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR3L3>
extern volatile __bit                   TMR3L3              __at(0x1093);	// @ (0x212 * 8 + 3)
#define                                 TMR3L3_bit          _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR3L4>
extern volatile __bit                   TMR3L4              __at(0x1094);	// @ (0x212 * 8 + 4)
#define                                 TMR3L4_bit          _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR3L5>
extern volatile __bit                   TMR3L5              __at(0x1095);	// @ (0x212 * 8 + 5)
#define                                 TMR3L5_bit          _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR3L6>
extern volatile __bit                   TMR3L6              __at(0x1096);	// @ (0x212 * 8 + 6)
#define                                 TMR3L6_bit          _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR3L7>
extern volatile __bit                   TMR3L7              __at(0x1097);	// @ (0x212 * 8 + 7)
#define                                 TMR3L7_bit          _BIT_ACCESS(TMR3L,7)
// PMD1<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x3CBB);	// @ (0x797 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD1,3)
// PIE2<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x38C3);	// @ (0x718 * 8 + 3)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE2,3)
// PIR2<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x3873);	// @ (0x70E * 8 + 3)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR2,3)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x88);	// @ (0x11 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x89);	// @ (0x11 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x8B);	// @ (0x11 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x96);	// @ (0x12 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x97);	// @ (0x12 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x9F);	// @ (0x13 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// ICDIO<TRIS_ICDCLK>
extern volatile __bit                   TRIS_ICDCLK         __at(0x7C62);	// @ (0xF8C * 8 + 2)
#define                                 TRIS_ICDCLK_bit     _BIT_ACCESS(ICDIO,2)
// ICDIO<TRIS_ICDDAT>
extern volatile __bit                   TRIS_ICDDAT         __at(0x7C63);	// @ (0xF8C * 8 + 3)
#define                                 TRIS_ICDDAT_bit     _BIT_ACCESS(ICDIO,3)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0x8F1);	// @ (0x11E * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// ICDSTAT<TRP0HLTF>
extern volatile __bit                   TRP0HLTF            __at(0x7C8E);	// @ (0xF91 * 8 + 6)
#define                                 TRP0HLTF_bit        _BIT_ACCESS(ICDSTAT,6)
// ICDSTAT<TRP1HLTF>
extern volatile __bit                   TRP1HLTF            __at(0x7C8F);	// @ (0xF91 * 8 + 7)
#define                                 TRP1HLTF_bit        _BIT_ACCESS(ICDSTAT,7)
// SCANDTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x2088);	// @ (0x411 * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANDTRIG,0)
// SCANDTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x2089);	// @ (0x411 * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANDTRIG,1)
// SCANDTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x208A);	// @ (0x411 * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANDTRIG,2)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x1CE5);	// @ (0x39C * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x1CE4);	// @ (0x39C * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// TSTBUFCON<TSTMODE0>
extern volatile __bit                   TSTMODE0            __at(0x1CFE);	// @ (0x39F * 8 + 6)
#define                                 TSTMODE0_bit        _BIT_ACCESS(TSTBUFCON,6)
// TSTBUFCON<TSTMODE1>
extern volatile __bit                   TSTMODE1            __at(0x1CFF);	// @ (0x39F * 8 + 7)
#define                                 TSTMODE1_bit        _BIT_ACCESS(TSTBUFCON,7)
// TSTBUFCON<TSTPT0>
extern volatile __bit                   TSTPT0              __at(0x1CF8);	// @ (0x39F * 8 + 0)
#define                                 TSTPT0_bit          _BIT_ACCESS(TSTBUFCON,0)
// TSTBUFCON<TSTPT1>
extern volatile __bit                   TSTPT1              __at(0x1CF9);	// @ (0x39F * 8 + 1)
#define                                 TSTPT1_bit          _BIT_ACCESS(TSTBUFCON,1)
// PIE7<TSWIE>
extern volatile __bit                   TSWIE               __at(0x38EA);	// @ (0x71D * 8 + 2)
#define                                 TSWIE_bit           _BIT_ACCESS(PIE7,2)
// PIR7<TSWIF>
extern volatile __bit                   TSWIF               __at(0x389A);	// @ (0x713 * 8 + 2)
#define                                 TSWIF_bit           _BIT_ACCESS(PIR7,2)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0x8F6);	// @ (0x11E * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0x8F0);	// @ (0x11E * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TST_PPSIN4<TXCK>
extern volatile __bit                   TXCK                __at(0x7699);	// @ (0xED3 * 8 + 1)
#define                                 TXCK_bit            _BIT_ACCESS(TST_PPSIN4,1)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0x8F5);	// @ (0x11E * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// PIE4<TXIE>
extern volatile __bit                   TXIE                __at(0x38D4);	// @ (0x71A * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE4,4)
// PIR4<TXIF>
extern volatile __bit                   TXIF                __at(0x3884);	// @ (0x710 * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR4,4)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// PMD2<UART1MD>
extern volatile __bit                   UART1MD             __at(0x3CC7);	// @ (0x798 * 8 + 7)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD2,7)
// UMTOAL<UMTOA0>
extern volatile __bit                   UMTOA0              __at(0x7068);	// @ (0xE0D * 8 + 0)
#define                                 UMTOA0_bit          _BIT_ACCESS(UMTOAL,0)
// UMTOAL<UMTOA1>
extern volatile __bit                   UMTOA1              __at(0x7069);	// @ (0xE0D * 8 + 1)
#define                                 UMTOA1_bit          _BIT_ACCESS(UMTOAL,1)
// UMTOAH<UMTOA10>
extern volatile __bit                   UMTOA10             __at(0x7072);	// @ (0xE0E * 8 + 2)
#define                                 UMTOA10_bit         _BIT_ACCESS(UMTOAH,2)
// UMTOAH<UMTOA11>
extern volatile __bit                   UMTOA11             __at(0x7073);	// @ (0xE0E * 8 + 3)
#define                                 UMTOA11_bit         _BIT_ACCESS(UMTOAH,3)
// UMTOAH<UMTOA12>
extern volatile __bit                   UMTOA12             __at(0x7074);	// @ (0xE0E * 8 + 4)
#define                                 UMTOA12_bit         _BIT_ACCESS(UMTOAH,4)
// UMTOAH<UMTOA13>
extern volatile __bit                   UMTOA13             __at(0x7075);	// @ (0xE0E * 8 + 5)
#define                                 UMTOA13_bit         _BIT_ACCESS(UMTOAH,5)
// UMTOAL<UMTOA2>
extern volatile __bit                   UMTOA2              __at(0x706A);	// @ (0xE0D * 8 + 2)
#define                                 UMTOA2_bit          _BIT_ACCESS(UMTOAL,2)
// UMTOAL<UMTOA3>
extern volatile __bit                   UMTOA3              __at(0x706B);	// @ (0xE0D * 8 + 3)
#define                                 UMTOA3_bit          _BIT_ACCESS(UMTOAL,3)
// UMTOAL<UMTOA4>
extern volatile __bit                   UMTOA4              __at(0x706C);	// @ (0xE0D * 8 + 4)
#define                                 UMTOA4_bit          _BIT_ACCESS(UMTOAL,4)
// UMTOAL<UMTOA5>
extern volatile __bit                   UMTOA5              __at(0x706D);	// @ (0xE0D * 8 + 5)
#define                                 UMTOA5_bit          _BIT_ACCESS(UMTOAL,5)
// UMTOAL<UMTOA6>
extern volatile __bit                   UMTOA6              __at(0x706E);	// @ (0xE0D * 8 + 6)
#define                                 UMTOA6_bit          _BIT_ACCESS(UMTOAL,6)
// UMTOAL<UMTOA7>
extern volatile __bit                   UMTOA7              __at(0x706F);	// @ (0xE0D * 8 + 7)
#define                                 UMTOA7_bit          _BIT_ACCESS(UMTOAL,7)
// UMTOAH<UMTOA8>
extern volatile __bit                   UMTOA8              __at(0x7070);	// @ (0xE0E * 8 + 0)
#define                                 UMTOA8_bit          _BIT_ACCESS(UMTOAH,0)
// UMTOAH<UMTOA9>
extern volatile __bit                   UMTOA9              __at(0x7071);	// @ (0xE0E * 8 + 1)
#define                                 UMTOA9_bit          _BIT_ACCESS(UMTOAH,1)
// UMTOAP<UMTOAP0>
extern volatile __bit                   UMTOAP0             __at(0x7060);	// @ (0xE0C * 8 + 0)
#define                                 UMTOAP0_bit         _BIT_ACCESS(UMTOAP,0)
// UMTOAP<UMTOAP1>
extern volatile __bit                   UMTOAP1             __at(0x7061);	// @ (0xE0C * 8 + 1)
#define                                 UMTOAP1_bit         _BIT_ACCESS(UMTOAP,1)
// UMTOAP<UMTOAP2>
extern volatile __bit                   UMTOAP2             __at(0x7062);	// @ (0xE0C * 8 + 2)
#define                                 UMTOAP2_bit         _BIT_ACCESS(UMTOAP,2)
// UMTOAP<UMTOAP3>
extern volatile __bit                   UMTOAP3             __at(0x7063);	// @ (0xE0C * 8 + 3)
#define                                 UMTOAP3_bit         _BIT_ACCESS(UMTOAP,3)
// UMTOAP<UMTOAP4>
extern volatile __bit                   UMTOAP4             __at(0x7064);	// @ (0xE0C * 8 + 4)
#define                                 UMTOAP4_bit         _BIT_ACCESS(UMTOAP,4)
// UMTOAP<UMTOAP5>
extern volatile __bit                   UMTOAP5             __at(0x7065);	// @ (0xE0C * 8 + 5)
#define                                 UMTOAP5_bit         _BIT_ACCESS(UMTOAP,5)
// ICDSTAT<USRHLTF>
extern volatile __bit                   USRHLTF             __at(0x7C89);	// @ (0xF91 * 8 + 1)
#define                                 USRHLTF_bit         _BIT_ACCESS(ICDSTAT,1)
// DCOMPCON0<VCOMPEN>
extern volatile __bit                   VCOMPEN             __at(0x487E);	// @ (0x90F * 8 + 6)
#define                                 VCOMPEN_bit         _BIT_ACCESS(DCOMPCON0,6)
// VREFL<VREF0>
extern volatile __bit                   VREF0               __at(0x48A0);	// @ (0x914 * 8 + 0)
#define                                 VREF0_bit           _BIT_ACCESS(VREFL,0)
// VREFL<VREF1>
extern volatile __bit                   VREF1               __at(0x48A1);	// @ (0x914 * 8 + 1)
#define                                 VREF1_bit           _BIT_ACCESS(VREFL,1)
// VREFL<VREF2>
extern volatile __bit                   VREF2               __at(0x48A2);	// @ (0x914 * 8 + 2)
#define                                 VREF2_bit           _BIT_ACCESS(VREFL,2)
// VREFL<VREF3>
extern volatile __bit                   VREF3               __at(0x48A3);	// @ (0x914 * 8 + 3)
#define                                 VREF3_bit           _BIT_ACCESS(VREFL,3)
// VREFL<VREF4>
extern volatile __bit                   VREF4               __at(0x48A4);	// @ (0x914 * 8 + 4)
#define                                 VREF4_bit           _BIT_ACCESS(VREFL,4)
// VREFL<VREF5>
extern volatile __bit                   VREF5               __at(0x48A5);	// @ (0x914 * 8 + 5)
#define                                 VREF5_bit           _BIT_ACCESS(VREFL,5)
// VREFL<VREF6>
extern volatile __bit                   VREF6               __at(0x48A6);	// @ (0x914 * 8 + 6)
#define                                 VREF6_bit           _BIT_ACCESS(VREFL,6)
// VREFL<VREF7>
extern volatile __bit                   VREF7               __at(0x48A7);	// @ (0x914 * 8 + 7)
#define                                 VREF7_bit           _BIT_ACCESS(VREFL,7)
// VREFH<VREF8>
extern volatile __bit                   VREF8               __at(0x4898);	// @ (0x913 * 8 + 0)
#define                                 VREF8_bit           _BIT_ACCESS(VREFH,0)
// VREFH<VREF9>
extern volatile __bit                   VREF9               __at(0x4899);	// @ (0x913 * 8 + 1)
#define                                 VREF9_bit           _BIT_ACCESS(VREFH,1)
// VREGCON<VREGPM1>
extern volatile __bit                   VREGPM1             __at(0x4091);	// @ (0x812 * 8 + 1)
#define                                 VREGPM1_bit         _BIT_ACCESS(VREGCON,1)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x406C);	// @ (0x80D * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x406D);	// @ (0x80D * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x406E);	// @ (0x80D * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x79C8);	// @ (0xF39 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x79C9);	// @ (0xF39 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x79CA);	// @ (0xF39 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x79CB);	// @ (0xF39 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0x7A20);	// @ (0xF44 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0x7A21);	// @ (0xF44 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0x7A22);	// @ (0xF44 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0x7A23);	// @ (0xF44 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0x7A24);	// @ (0xF44 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0x7A25);	// @ (0xF44 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0x7A26);	// @ (0xF44 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0x7A27);	// @ (0xF44 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0x7A7F);	// @ (0xF4F * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x40F1);	// @ (0x81E * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x40F2);	// @ (0x81E * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x40F3);	// @ (0x81E * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0x8F9);	// @ (0x11F * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// CRCXORL<X1>
extern volatile __bit                   X1                  __at(0x20E1);	// @ (0x41C * 8 + 1)
#define                                 X1_bit              _BIT_ACCESS(CRCXORL,1)
// CRCXORH<X10>
extern volatile __bit                   X10                 __at(0x20EA);	// @ (0x41D * 8 + 2)
#define                                 X10_bit             _BIT_ACCESS(CRCXORH,2)
// CRCXORH<X11>
extern volatile __bit                   X11                 __at(0x20EB);	// @ (0x41D * 8 + 3)
#define                                 X11_bit             _BIT_ACCESS(CRCXORH,3)
// CRCXORH<X12>
extern volatile __bit                   X12                 __at(0x20EC);	// @ (0x41D * 8 + 4)
#define                                 X12_bit             _BIT_ACCESS(CRCXORH,4)
// CRCXORH<X13>
extern volatile __bit                   X13                 __at(0x20ED);	// @ (0x41D * 8 + 5)
#define                                 X13_bit             _BIT_ACCESS(CRCXORH,5)
// CRCXORH<X14>
extern volatile __bit                   X14                 __at(0x20EE);	// @ (0x41D * 8 + 6)
#define                                 X14_bit             _BIT_ACCESS(CRCXORH,6)
// CRCXORH<X15>
extern volatile __bit                   X15                 __at(0x20EF);	// @ (0x41D * 8 + 7)
#define                                 X15_bit             _BIT_ACCESS(CRCXORH,7)
// CRCXORL<X2>
extern volatile __bit                   X2                  __at(0x20E2);	// @ (0x41C * 8 + 2)
#define                                 X2_bit              _BIT_ACCESS(CRCXORL,2)
// CRCXORL<X3>
extern volatile __bit                   X3                  __at(0x20E3);	// @ (0x41C * 8 + 3)
#define                                 X3_bit              _BIT_ACCESS(CRCXORL,3)
// CRCXORL<X4>
extern volatile __bit                   X4                  __at(0x20E4);	// @ (0x41C * 8 + 4)
#define                                 X4_bit              _BIT_ACCESS(CRCXORL,4)
// CRCXORL<X5>
extern volatile __bit                   X5                  __at(0x20E5);	// @ (0x41C * 8 + 5)
#define                                 X5_bit              _BIT_ACCESS(CRCXORL,5)
// CRCXORL<X6>
extern volatile __bit                   X6                  __at(0x20E6);	// @ (0x41C * 8 + 6)
#define                                 X6_bit              _BIT_ACCESS(CRCXORL,6)
// CRCXORL<X7>
extern volatile __bit                   X7                  __at(0x20E7);	// @ (0x41C * 8 + 7)
#define                                 X7_bit              _BIT_ACCESS(CRCXORL,7)
// CRCXORH<X8>
extern volatile __bit                   X8                  __at(0x20E8);	// @ (0x41D * 8 + 0)
#define                                 X8_bit              _BIT_ACCESS(CRCXORH,0)
// CRCXORH<X9>
extern volatile __bit                   X9                  __at(0x20E9);	// @ (0x41D * 8 + 1)
#define                                 X9_bit              _BIT_ACCESS(CRCXORH,1)
// XI<XI0>
extern volatile __bit                   XI0                 __at(0x4CB0);	// @ (0x996 * 8 + 0)
#define                                 XI0_bit             _BIT_ACCESS(XI,0)
// XI<XI1>
extern volatile __bit                   XI1                 __at(0x4CB1);	// @ (0x996 * 8 + 1)
#define                                 XI1_bit             _BIT_ACCESS(XI,1)
// XI<XI2>
extern volatile __bit                   XI2                 __at(0x4CB2);	// @ (0x996 * 8 + 2)
#define                                 XI2_bit             _BIT_ACCESS(XI,2)
// XI<XI3>
extern volatile __bit                   XI3                 __at(0x4CB3);	// @ (0x996 * 8 + 3)
#define                                 XI3_bit             _BIT_ACCESS(XI,3)
// XI<XI4>
extern volatile __bit                   XI4                 __at(0x4CB4);	// @ (0x996 * 8 + 4)
#define                                 XI4_bit             _BIT_ACCESS(XI,4)
// ICDDC<XTEN>
extern volatile __bit                   XTEN                __at(0x7C76);	// @ (0xF8E * 8 + 6)
#define                                 XTEN_bit            _BIT_ACCESS(ICDDC,6)
// ICDDC<XTHI>
extern volatile __bit                   XTHI                __at(0x7C74);	// @ (0xF8E * 8 + 4)
#define                                 XTHI_bit            _BIT_ACCESS(ICDDC,4)
// XV<XV0>
extern volatile __bit                   XV0                 __at(0x4CC0);	// @ (0x998 * 8 + 0)
#define                                 XV0_bit             _BIT_ACCESS(XV,0)
// XV<XV1>
extern volatile __bit                   XV1                 __at(0x4CC1);	// @ (0x998 * 8 + 1)
#define                                 XV1_bit             _BIT_ACCESS(XV,1)
// XV<XV2>
extern volatile __bit                   XV2                 __at(0x4CC2);	// @ (0x998 * 8 + 2)
#define                                 XV2_bit             _BIT_ACCESS(XV,2)
// XV<XV3>
extern volatile __bit                   XV3                 __at(0x4CC3);	// @ (0x998 * 8 + 3)
#define                                 XV3_bit             _BIT_ACCESS(XV,3)
// XV<XV4>
extern volatile __bit                   XV4                 __at(0x4CC4);	// @ (0x998 * 8 + 4)
#define                                 XV4_bit             _BIT_ACCESS(XV,4)
// YI<YI0>
extern volatile __bit                   YI0                 __at(0x4CB8);	// @ (0x997 * 8 + 0)
#define                                 YI0_bit             _BIT_ACCESS(YI,0)
// YI<YI1>
extern volatile __bit                   YI1                 __at(0x4CB9);	// @ (0x997 * 8 + 1)
#define                                 YI1_bit             _BIT_ACCESS(YI,1)
// YI<YI2>
extern volatile __bit                   YI2                 __at(0x4CBA);	// @ (0x997 * 8 + 2)
#define                                 YI2_bit             _BIT_ACCESS(YI,2)
// YI<YI3>
extern volatile __bit                   YI3                 __at(0x4CBB);	// @ (0x997 * 8 + 3)
#define                                 YI3_bit             _BIT_ACCESS(YI,3)
// YI<YI4>
extern volatile __bit                   YI4                 __at(0x4CBC);	// @ (0x997 * 8 + 4)
#define                                 YI4_bit             _BIT_ACCESS(YI,4)
// YV<YV0>
extern volatile __bit                   YV0                 __at(0x4CC8);	// @ (0x999 * 8 + 0)
#define                                 YV0_bit             _BIT_ACCESS(YV,0)
// YV<YV1>
extern volatile __bit                   YV1                 __at(0x4CC9);	// @ (0x999 * 8 + 1)
#define                                 YV1_bit             _BIT_ACCESS(YV,1)
// YV<YV2>
extern volatile __bit                   YV2                 __at(0x4CCA);	// @ (0x999 * 8 + 2)
#define                                 YV2_bit             _BIT_ACCESS(YV,2)
// YV<YV3>
extern volatile __bit                   YV3                 __at(0x4CCB);	// @ (0x999 * 8 + 3)
#define                                 YV3_bit             _BIT_ACCESS(YV,3)
// YV<YV4>
extern volatile __bit                   YV4                 __at(0x4CCC);	// @ (0x999 * 8 + 4)
#define                                 YV4_bit             _BIT_ACCESS(YV,4)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// STATUS_SHAD<Z_SHAD>
extern volatile __bit                   Z_SHAD              __at(0x7F22);	// @ (0xFE4 * 8 + 2)
#define                                 Z_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,2)
// SSP1STAT<nA>
extern volatile __bit                   nA                  __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nA2>
extern volatile __bit                   nA2                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nA2_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS>
extern volatile __bit                   nADDRESS            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x409A);	// @ (0x813 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x409B);	// @ (0x813 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x409C);	// @ (0x813 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// SSP1STAT<nW>
extern volatile __bit                   nW                  __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nW2>
extern volatile __bit                   nW2                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nW2_bit             _BIT_ACCESS(SSP1STAT,2)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x409D);	// @ (0x813 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE>
extern volatile __bit                   nWRITE              __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE_bit          _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)

#endif // _MCP19132_H_
