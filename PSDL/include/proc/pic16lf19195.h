// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16LF19195_H_
#define _PIC16LF19195_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16LF19195
 */
#ifndef _XC_H_
#warning Header file pic16lf19195.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Device Information Area (DIA) Table
 */

#define DIA_MUI                                             0x8100
#define DIA_MUI0                                            0x8100
#define DIA_MUI1                                            0x8101
#define DIA_MUI2                                            0x8102
#define DIA_MUI3                                            0x8103
#define DIA_MUI4                                            0x8104
#define DIA_MUI5                                            0x8105
#define DIA_MUI6                                            0x8106
#define DIA_MUI7                                            0x8107
#define DIA_MUI8                                            0x8108
#define DIA_MUI9                                            0x8109

#define DIA_EUI                                             0x810A
#define DIA_EUI0                                            0x810A
#define DIA_EUI1                                            0x810B
#define DIA_EUI2                                            0x810C
#define DIA_EUI3                                            0x810D
#define DIA_EUI4                                            0x810E
#define DIA_EUI5                                            0x810F
#define DIA_EUI6                                            0x8110
#define DIA_EUI7                                            0x8111

#define DIA_TSLR                                            0x8112
#define DIA_TSLR1                                           0x8112
#define DIA_TSLR2                                           0x8113
#define DIA_TSLR3                                           0x8114

#define DIA_TSHR                                            0x8115
#define DIA_TSHR1                                           0x8115
#define DIA_TSHR2                                           0x8116
#define DIA_TSHR3                                           0x8117

#define DIA_FVRA                                            0x8118
#define DIA_FVRA1X                                          0x8118
#define DIA_FVRA2X                                          0x8119
#define DIA_FVRA4X                                          0x811A

#define DIA_FVRC                                            0x811B
#define DIA_FVRC1X                                          0x811B
#define DIA_FVRC2X                                          0x811C
#define DIA_FVRC4X                                          0x811D

/*
 * Device Configuration Information (DCI) Table
 */

#define DCI_ERSIZ                                           0x8200
#define DCI_WLSIZ                                           0x8201
#define DCI_URSIZ                                           0x8202
#define DCI_EESIZ                                           0x8203
#define DCI_PCNT                                            0x8204

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :6;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
        unsigned BSR5                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x6
#define _BSR_BSR_LENGTH                                     0x6
#define _BSR_BSR_MASK                                       0x3F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10
#define _BSR_BSR5_POSN                                      0x5
#define _BSR_BSR5_POSITION                                  0x5
#define _BSR_BSR5_SIZE                                      0x1
#define _BSR_BSR5_LENGTH                                    0x1
#define _BSR_BSR5_MASK                                      0x20

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTEDG                 :1;
        unsigned                        :5;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_INTEDG_POSN                                 0x0
#define _INTCON_INTEDG_POSITION                             0x0
#define _INTCON_INTEDG_SIZE                                 0x1
#define _INTCON_INTEDG_LENGTH                               0x1
#define _INTCON_INTEDG_MASK                                 0x1
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x00D);
#ifndef _LIB_BUILD
asm("PORTB equ 0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x00D);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: PORTD
#define PORTD PORTD
extern volatile unsigned char           PORTD               __at(0x00F);
#ifndef _LIB_BUILD
asm("PORTD equ 0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD0                    :1;
        unsigned RD1                    :1;
        unsigned RD2                    :1;
        unsigned RD3                    :1;
        unsigned RD4                    :1;
        unsigned RD5                    :1;
        unsigned RD6                    :1;
        unsigned RD7                    :1;
    };
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits __at(0x00F);
// bitfield macros
#define _PORTD_RD0_POSN                                     0x0
#define _PORTD_RD0_POSITION                                 0x0
#define _PORTD_RD0_SIZE                                     0x1
#define _PORTD_RD0_LENGTH                                   0x1
#define _PORTD_RD0_MASK                                     0x1
#define _PORTD_RD1_POSN                                     0x1
#define _PORTD_RD1_POSITION                                 0x1
#define _PORTD_RD1_SIZE                                     0x1
#define _PORTD_RD1_LENGTH                                   0x1
#define _PORTD_RD1_MASK                                     0x2
#define _PORTD_RD2_POSN                                     0x2
#define _PORTD_RD2_POSITION                                 0x2
#define _PORTD_RD2_SIZE                                     0x1
#define _PORTD_RD2_LENGTH                                   0x1
#define _PORTD_RD2_MASK                                     0x4
#define _PORTD_RD3_POSN                                     0x3
#define _PORTD_RD3_POSITION                                 0x3
#define _PORTD_RD3_SIZE                                     0x1
#define _PORTD_RD3_LENGTH                                   0x1
#define _PORTD_RD3_MASK                                     0x8
#define _PORTD_RD4_POSN                                     0x4
#define _PORTD_RD4_POSITION                                 0x4
#define _PORTD_RD4_SIZE                                     0x1
#define _PORTD_RD4_LENGTH                                   0x1
#define _PORTD_RD4_MASK                                     0x10
#define _PORTD_RD5_POSN                                     0x5
#define _PORTD_RD5_POSITION                                 0x5
#define _PORTD_RD5_SIZE                                     0x1
#define _PORTD_RD5_LENGTH                                   0x1
#define _PORTD_RD5_MASK                                     0x20
#define _PORTD_RD6_POSN                                     0x6
#define _PORTD_RD6_POSITION                                 0x6
#define _PORTD_RD6_SIZE                                     0x1
#define _PORTD_RD6_LENGTH                                   0x1
#define _PORTD_RD6_MASK                                     0x40
#define _PORTD_RD7_POSN                                     0x7
#define _PORTD_RD7_POSITION                                 0x7
#define _PORTD_RD7_SIZE                                     0x1
#define _PORTD_RD7_LENGTH                                   0x1
#define _PORTD_RD7_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0x010);
#ifndef _LIB_BUILD
asm("PORTE equ 010h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE0                    :1;
        unsigned RE1                    :1;
        unsigned                        :1;
        unsigned RE3                    :1;
        unsigned RE4                    :1;
        unsigned RE5                    :1;
        unsigned RE6                    :1;
        unsigned RE7                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0x010);
// bitfield macros
#define _PORTE_RE0_POSN                                     0x0
#define _PORTE_RE0_POSITION                                 0x0
#define _PORTE_RE0_SIZE                                     0x1
#define _PORTE_RE0_LENGTH                                   0x1
#define _PORTE_RE0_MASK                                     0x1
#define _PORTE_RE1_POSN                                     0x1
#define _PORTE_RE1_POSITION                                 0x1
#define _PORTE_RE1_SIZE                                     0x1
#define _PORTE_RE1_LENGTH                                   0x1
#define _PORTE_RE1_MASK                                     0x2
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8
#define _PORTE_RE4_POSN                                     0x4
#define _PORTE_RE4_POSITION                                 0x4
#define _PORTE_RE4_SIZE                                     0x1
#define _PORTE_RE4_LENGTH                                   0x1
#define _PORTE_RE4_MASK                                     0x10
#define _PORTE_RE5_POSN                                     0x5
#define _PORTE_RE5_POSITION                                 0x5
#define _PORTE_RE5_SIZE                                     0x1
#define _PORTE_RE5_LENGTH                                   0x1
#define _PORTE_RE5_MASK                                     0x20
#define _PORTE_RE6_POSN                                     0x6
#define _PORTE_RE6_POSITION                                 0x6
#define _PORTE_RE6_SIZE                                     0x1
#define _PORTE_RE6_LENGTH                                   0x1
#define _PORTE_RE6_MASK                                     0x40
#define _PORTE_RE7_POSN                                     0x7
#define _PORTE_RE7_POSITION                                 0x7
#define _PORTE_RE7_SIZE                                     0x1
#define _PORTE_RE7_LENGTH                                   0x1
#define _PORTE_RE7_MASK                                     0x80

// Register: PORTF
#define PORTF PORTF
extern volatile unsigned char           PORTF               __at(0x011);
#ifndef _LIB_BUILD
asm("PORTF equ 011h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF0                    :1;
        unsigned RF1                    :1;
        unsigned RF2                    :1;
        unsigned RF3                    :1;
        unsigned RF4                    :1;
        unsigned RF5                    :1;
        unsigned RF6                    :1;
        unsigned RF7                    :1;
    };
} PORTFbits_t;
extern volatile PORTFbits_t PORTFbits __at(0x011);
// bitfield macros
#define _PORTF_RF0_POSN                                     0x0
#define _PORTF_RF0_POSITION                                 0x0
#define _PORTF_RF0_SIZE                                     0x1
#define _PORTF_RF0_LENGTH                                   0x1
#define _PORTF_RF0_MASK                                     0x1
#define _PORTF_RF1_POSN                                     0x1
#define _PORTF_RF1_POSITION                                 0x1
#define _PORTF_RF1_SIZE                                     0x1
#define _PORTF_RF1_LENGTH                                   0x1
#define _PORTF_RF1_MASK                                     0x2
#define _PORTF_RF2_POSN                                     0x2
#define _PORTF_RF2_POSITION                                 0x2
#define _PORTF_RF2_SIZE                                     0x1
#define _PORTF_RF2_LENGTH                                   0x1
#define _PORTF_RF2_MASK                                     0x4
#define _PORTF_RF3_POSN                                     0x3
#define _PORTF_RF3_POSITION                                 0x3
#define _PORTF_RF3_SIZE                                     0x1
#define _PORTF_RF3_LENGTH                                   0x1
#define _PORTF_RF3_MASK                                     0x8
#define _PORTF_RF4_POSN                                     0x4
#define _PORTF_RF4_POSITION                                 0x4
#define _PORTF_RF4_SIZE                                     0x1
#define _PORTF_RF4_LENGTH                                   0x1
#define _PORTF_RF4_MASK                                     0x10
#define _PORTF_RF5_POSN                                     0x5
#define _PORTF_RF5_POSITION                                 0x5
#define _PORTF_RF5_SIZE                                     0x1
#define _PORTF_RF5_LENGTH                                   0x1
#define _PORTF_RF5_MASK                                     0x20
#define _PORTF_RF6_POSN                                     0x6
#define _PORTF_RF6_POSITION                                 0x6
#define _PORTF_RF6_SIZE                                     0x1
#define _PORTF_RF6_LENGTH                                   0x1
#define _PORTF_RF6_MASK                                     0x40
#define _PORTF_RF7_POSN                                     0x7
#define _PORTF_RF7_POSITION                                 0x7
#define _PORTF_RF7_SIZE                                     0x1
#define _PORTF_RF7_LENGTH                                   0x1
#define _PORTF_RF7_MASK                                     0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x012);
#ifndef _LIB_BUILD
asm("TRISA equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x012);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x013);
#ifndef _LIB_BUILD
asm("TRISB equ 013h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x013);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x014);
#ifndef _LIB_BUILD
asm("TRISC equ 014h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x014);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: TRISD
#define TRISD TRISD
extern volatile unsigned char           TRISD               __at(0x015);
#ifndef _LIB_BUILD
asm("TRISD equ 015h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISD0                 :1;
        unsigned TRISD1                 :1;
        unsigned TRISD2                 :1;
        unsigned TRISD3                 :1;
        unsigned TRISD4                 :1;
        unsigned TRISD5                 :1;
        unsigned TRISD6                 :1;
        unsigned TRISD7                 :1;
    };
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits __at(0x015);
// bitfield macros
#define _TRISD_TRISD0_POSN                                  0x0
#define _TRISD_TRISD0_POSITION                              0x0
#define _TRISD_TRISD0_SIZE                                  0x1
#define _TRISD_TRISD0_LENGTH                                0x1
#define _TRISD_TRISD0_MASK                                  0x1
#define _TRISD_TRISD1_POSN                                  0x1
#define _TRISD_TRISD1_POSITION                              0x1
#define _TRISD_TRISD1_SIZE                                  0x1
#define _TRISD_TRISD1_LENGTH                                0x1
#define _TRISD_TRISD1_MASK                                  0x2
#define _TRISD_TRISD2_POSN                                  0x2
#define _TRISD_TRISD2_POSITION                              0x2
#define _TRISD_TRISD2_SIZE                                  0x1
#define _TRISD_TRISD2_LENGTH                                0x1
#define _TRISD_TRISD2_MASK                                  0x4
#define _TRISD_TRISD3_POSN                                  0x3
#define _TRISD_TRISD3_POSITION                              0x3
#define _TRISD_TRISD3_SIZE                                  0x1
#define _TRISD_TRISD3_LENGTH                                0x1
#define _TRISD_TRISD3_MASK                                  0x8
#define _TRISD_TRISD4_POSN                                  0x4
#define _TRISD_TRISD4_POSITION                              0x4
#define _TRISD_TRISD4_SIZE                                  0x1
#define _TRISD_TRISD4_LENGTH                                0x1
#define _TRISD_TRISD4_MASK                                  0x10
#define _TRISD_TRISD5_POSN                                  0x5
#define _TRISD_TRISD5_POSITION                              0x5
#define _TRISD_TRISD5_SIZE                                  0x1
#define _TRISD_TRISD5_LENGTH                                0x1
#define _TRISD_TRISD5_MASK                                  0x20
#define _TRISD_TRISD6_POSN                                  0x6
#define _TRISD_TRISD6_POSITION                              0x6
#define _TRISD_TRISD6_SIZE                                  0x1
#define _TRISD_TRISD6_LENGTH                                0x1
#define _TRISD_TRISD6_MASK                                  0x40
#define _TRISD_TRISD7_POSN                                  0x7
#define _TRISD_TRISD7_POSITION                              0x7
#define _TRISD_TRISD7_SIZE                                  0x1
#define _TRISD_TRISD7_LENGTH                                0x1
#define _TRISD_TRISD7_MASK                                  0x80

// Register: TRISE
#define TRISE TRISE
extern volatile unsigned char           TRISE               __at(0x016);
#ifndef _LIB_BUILD
asm("TRISE equ 016h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISE0                 :1;
        unsigned TRISE1                 :1;
        unsigned                        :1;
        unsigned TRISE3                 :1;
        unsigned TRISE4                 :1;
        unsigned TRISE5                 :1;
        unsigned TRISE6                 :1;
        unsigned TRISE7                 :1;
    };
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits __at(0x016);
// bitfield macros
#define _TRISE_TRISE0_POSN                                  0x0
#define _TRISE_TRISE0_POSITION                              0x0
#define _TRISE_TRISE0_SIZE                                  0x1
#define _TRISE_TRISE0_LENGTH                                0x1
#define _TRISE_TRISE0_MASK                                  0x1
#define _TRISE_TRISE1_POSN                                  0x1
#define _TRISE_TRISE1_POSITION                              0x1
#define _TRISE_TRISE1_SIZE                                  0x1
#define _TRISE_TRISE1_LENGTH                                0x1
#define _TRISE_TRISE1_MASK                                  0x2
#define _TRISE_TRISE3_POSN                                  0x3
#define _TRISE_TRISE3_POSITION                              0x3
#define _TRISE_TRISE3_SIZE                                  0x1
#define _TRISE_TRISE3_LENGTH                                0x1
#define _TRISE_TRISE3_MASK                                  0x8
#define _TRISE_TRISE4_POSN                                  0x4
#define _TRISE_TRISE4_POSITION                              0x4
#define _TRISE_TRISE4_SIZE                                  0x1
#define _TRISE_TRISE4_LENGTH                                0x1
#define _TRISE_TRISE4_MASK                                  0x10
#define _TRISE_TRISE5_POSN                                  0x5
#define _TRISE_TRISE5_POSITION                              0x5
#define _TRISE_TRISE5_SIZE                                  0x1
#define _TRISE_TRISE5_LENGTH                                0x1
#define _TRISE_TRISE5_MASK                                  0x20
#define _TRISE_TRISE6_POSN                                  0x6
#define _TRISE_TRISE6_POSITION                              0x6
#define _TRISE_TRISE6_SIZE                                  0x1
#define _TRISE_TRISE6_LENGTH                                0x1
#define _TRISE_TRISE6_MASK                                  0x40
#define _TRISE_TRISE7_POSN                                  0x7
#define _TRISE_TRISE7_POSITION                              0x7
#define _TRISE_TRISE7_SIZE                                  0x1
#define _TRISE_TRISE7_LENGTH                                0x1
#define _TRISE_TRISE7_MASK                                  0x80

// Register: TRISF
#define TRISF TRISF
extern volatile unsigned char           TRISF               __at(0x017);
#ifndef _LIB_BUILD
asm("TRISF equ 017h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISF0                 :1;
        unsigned TRISF1                 :1;
        unsigned TRISF2                 :1;
        unsigned TRISF3                 :1;
        unsigned TRISF4                 :1;
        unsigned TRISF5                 :1;
        unsigned TRISF6                 :1;
        unsigned TRISF7                 :1;
    };
} TRISFbits_t;
extern volatile TRISFbits_t TRISFbits __at(0x017);
// bitfield macros
#define _TRISF_TRISF0_POSN                                  0x0
#define _TRISF_TRISF0_POSITION                              0x0
#define _TRISF_TRISF0_SIZE                                  0x1
#define _TRISF_TRISF0_LENGTH                                0x1
#define _TRISF_TRISF0_MASK                                  0x1
#define _TRISF_TRISF1_POSN                                  0x1
#define _TRISF_TRISF1_POSITION                              0x1
#define _TRISF_TRISF1_SIZE                                  0x1
#define _TRISF_TRISF1_LENGTH                                0x1
#define _TRISF_TRISF1_MASK                                  0x2
#define _TRISF_TRISF2_POSN                                  0x2
#define _TRISF_TRISF2_POSITION                              0x2
#define _TRISF_TRISF2_SIZE                                  0x1
#define _TRISF_TRISF2_LENGTH                                0x1
#define _TRISF_TRISF2_MASK                                  0x4
#define _TRISF_TRISF3_POSN                                  0x3
#define _TRISF_TRISF3_POSITION                              0x3
#define _TRISF_TRISF3_SIZE                                  0x1
#define _TRISF_TRISF3_LENGTH                                0x1
#define _TRISF_TRISF3_MASK                                  0x8
#define _TRISF_TRISF4_POSN                                  0x4
#define _TRISF_TRISF4_POSITION                              0x4
#define _TRISF_TRISF4_SIZE                                  0x1
#define _TRISF_TRISF4_LENGTH                                0x1
#define _TRISF_TRISF4_MASK                                  0x10
#define _TRISF_TRISF5_POSN                                  0x5
#define _TRISF_TRISF5_POSITION                              0x5
#define _TRISF_TRISF5_SIZE                                  0x1
#define _TRISF_TRISF5_LENGTH                                0x1
#define _TRISF_TRISF5_MASK                                  0x20
#define _TRISF_TRISF6_POSN                                  0x6
#define _TRISF_TRISF6_POSITION                              0x6
#define _TRISF_TRISF6_SIZE                                  0x1
#define _TRISF_TRISF6_LENGTH                                0x1
#define _TRISF_TRISF6_MASK                                  0x40
#define _TRISF_TRISF7_POSN                                  0x7
#define _TRISF_TRISF7_POSITION                              0x7
#define _TRISF_TRISF7_SIZE                                  0x1
#define _TRISF_TRISF7_LENGTH                                0x1
#define _TRISF_TRISF7_MASK                                  0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x018);
#ifndef _LIB_BUILD
asm("LATA equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned                        :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x018);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x019);
#ifndef _LIB_BUILD
asm("LATB equ 019h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x019);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x01A);
#ifndef _LIB_BUILD
asm("LATC equ 01Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x01A);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80

// Register: LATD
#define LATD LATD
extern volatile unsigned char           LATD                __at(0x01B);
#ifndef _LIB_BUILD
asm("LATD equ 01Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATD0                  :1;
        unsigned LATD1                  :1;
        unsigned LATD2                  :1;
        unsigned LATD3                  :1;
        unsigned LATD4                  :1;
        unsigned LATD5                  :1;
        unsigned LATD6                  :1;
        unsigned LATD7                  :1;
    };
} LATDbits_t;
extern volatile LATDbits_t LATDbits __at(0x01B);
// bitfield macros
#define _LATD_LATD0_POSN                                    0x0
#define _LATD_LATD0_POSITION                                0x0
#define _LATD_LATD0_SIZE                                    0x1
#define _LATD_LATD0_LENGTH                                  0x1
#define _LATD_LATD0_MASK                                    0x1
#define _LATD_LATD1_POSN                                    0x1
#define _LATD_LATD1_POSITION                                0x1
#define _LATD_LATD1_SIZE                                    0x1
#define _LATD_LATD1_LENGTH                                  0x1
#define _LATD_LATD1_MASK                                    0x2
#define _LATD_LATD2_POSN                                    0x2
#define _LATD_LATD2_POSITION                                0x2
#define _LATD_LATD2_SIZE                                    0x1
#define _LATD_LATD2_LENGTH                                  0x1
#define _LATD_LATD2_MASK                                    0x4
#define _LATD_LATD3_POSN                                    0x3
#define _LATD_LATD3_POSITION                                0x3
#define _LATD_LATD3_SIZE                                    0x1
#define _LATD_LATD3_LENGTH                                  0x1
#define _LATD_LATD3_MASK                                    0x8
#define _LATD_LATD4_POSN                                    0x4
#define _LATD_LATD4_POSITION                                0x4
#define _LATD_LATD4_SIZE                                    0x1
#define _LATD_LATD4_LENGTH                                  0x1
#define _LATD_LATD4_MASK                                    0x10
#define _LATD_LATD5_POSN                                    0x5
#define _LATD_LATD5_POSITION                                0x5
#define _LATD_LATD5_SIZE                                    0x1
#define _LATD_LATD5_LENGTH                                  0x1
#define _LATD_LATD5_MASK                                    0x20
#define _LATD_LATD6_POSN                                    0x6
#define _LATD_LATD6_POSITION                                0x6
#define _LATD_LATD6_SIZE                                    0x1
#define _LATD_LATD6_LENGTH                                  0x1
#define _LATD_LATD6_MASK                                    0x40
#define _LATD_LATD7_POSN                                    0x7
#define _LATD_LATD7_POSITION                                0x7
#define _LATD_LATD7_SIZE                                    0x1
#define _LATD_LATD7_LENGTH                                  0x1
#define _LATD_LATD7_MASK                                    0x80

// Register: LATE
#define LATE LATE
extern volatile unsigned char           LATE                __at(0x01C);
#ifndef _LIB_BUILD
asm("LATE equ 01Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATE0                  :1;
        unsigned LATE1                  :1;
        unsigned                        :1;
        unsigned LATE3                  :1;
        unsigned LATE4                  :1;
        unsigned LATE5                  :1;
        unsigned LATE6                  :1;
        unsigned LATE7                  :1;
    };
} LATEbits_t;
extern volatile LATEbits_t LATEbits __at(0x01C);
// bitfield macros
#define _LATE_LATE0_POSN                                    0x0
#define _LATE_LATE0_POSITION                                0x0
#define _LATE_LATE0_SIZE                                    0x1
#define _LATE_LATE0_LENGTH                                  0x1
#define _LATE_LATE0_MASK                                    0x1
#define _LATE_LATE1_POSN                                    0x1
#define _LATE_LATE1_POSITION                                0x1
#define _LATE_LATE1_SIZE                                    0x1
#define _LATE_LATE1_LENGTH                                  0x1
#define _LATE_LATE1_MASK                                    0x2
#define _LATE_LATE3_POSN                                    0x3
#define _LATE_LATE3_POSITION                                0x3
#define _LATE_LATE3_SIZE                                    0x1
#define _LATE_LATE3_LENGTH                                  0x1
#define _LATE_LATE3_MASK                                    0x8
#define _LATE_LATE4_POSN                                    0x4
#define _LATE_LATE4_POSITION                                0x4
#define _LATE_LATE4_SIZE                                    0x1
#define _LATE_LATE4_LENGTH                                  0x1
#define _LATE_LATE4_MASK                                    0x10
#define _LATE_LATE5_POSN                                    0x5
#define _LATE_LATE5_POSITION                                0x5
#define _LATE_LATE5_SIZE                                    0x1
#define _LATE_LATE5_LENGTH                                  0x1
#define _LATE_LATE5_MASK                                    0x20
#define _LATE_LATE6_POSN                                    0x6
#define _LATE_LATE6_POSITION                                0x6
#define _LATE_LATE6_SIZE                                    0x1
#define _LATE_LATE6_LENGTH                                  0x1
#define _LATE_LATE6_MASK                                    0x40
#define _LATE_LATE7_POSN                                    0x7
#define _LATE_LATE7_POSITION                                0x7
#define _LATE_LATE7_SIZE                                    0x1
#define _LATE_LATE7_LENGTH                                  0x1
#define _LATE_LATE7_MASK                                    0x80

// Register: LATF
#define LATF LATF
extern volatile unsigned char           LATF                __at(0x01D);
#ifndef _LIB_BUILD
asm("LATF equ 01Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATF0                  :1;
        unsigned LATF1                  :1;
        unsigned LATF2                  :1;
        unsigned LATF3                  :1;
        unsigned LATF4                  :1;
        unsigned LATF5                  :1;
        unsigned LATF6                  :1;
        unsigned LATF7                  :1;
    };
} LATFbits_t;
extern volatile LATFbits_t LATFbits __at(0x01D);
// bitfield macros
#define _LATF_LATF0_POSN                                    0x0
#define _LATF_LATF0_POSITION                                0x0
#define _LATF_LATF0_SIZE                                    0x1
#define _LATF_LATF0_LENGTH                                  0x1
#define _LATF_LATF0_MASK                                    0x1
#define _LATF_LATF1_POSN                                    0x1
#define _LATF_LATF1_POSITION                                0x1
#define _LATF_LATF1_SIZE                                    0x1
#define _LATF_LATF1_LENGTH                                  0x1
#define _LATF_LATF1_MASK                                    0x2
#define _LATF_LATF2_POSN                                    0x2
#define _LATF_LATF2_POSITION                                0x2
#define _LATF_LATF2_SIZE                                    0x1
#define _LATF_LATF2_LENGTH                                  0x1
#define _LATF_LATF2_MASK                                    0x4
#define _LATF_LATF3_POSN                                    0x3
#define _LATF_LATF3_POSITION                                0x3
#define _LATF_LATF3_SIZE                                    0x1
#define _LATF_LATF3_LENGTH                                  0x1
#define _LATF_LATF3_MASK                                    0x8
#define _LATF_LATF4_POSN                                    0x4
#define _LATF_LATF4_POSITION                                0x4
#define _LATF_LATF4_SIZE                                    0x1
#define _LATF_LATF4_LENGTH                                  0x1
#define _LATF_LATF4_MASK                                    0x10
#define _LATF_LATF5_POSN                                    0x5
#define _LATF_LATF5_POSITION                                0x5
#define _LATF_LATF5_SIZE                                    0x1
#define _LATF_LATF5_LENGTH                                  0x1
#define _LATF_LATF5_MASK                                    0x20
#define _LATF_LATF6_POSN                                    0x6
#define _LATF_LATF6_POSITION                                0x6
#define _LATF_LATF6_SIZE                                    0x1
#define _LATF_LATF6_LENGTH                                  0x1
#define _LATF_LATF6_MASK                                    0x40
#define _LATF_LATF7_POSN                                    0x7
#define _LATF_LATF7_POSITION                                0x7
#define _LATF_LATF7_SIZE                                    0x1
#define _LATF_LATF7_LENGTH                                  0x1
#define _LATF_LATF7_MASK                                    0x80

// Register: ADCPCON0
#define ADCPCON0 ADCPCON0
extern volatile unsigned char           ADCPCON0            __at(0x01F);
#ifndef _LIB_BUILD
asm("ADCPCON0 equ 01Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCPRDY                :1;
        unsigned                        :6;
        unsigned ADCPON                 :1;
    };
} ADCPCON0bits_t;
extern volatile ADCPCON0bits_t ADCPCON0bits __at(0x01F);
// bitfield macros
#define _ADCPCON0_ADCPRDY_POSN                              0x0
#define _ADCPCON0_ADCPRDY_POSITION                          0x0
#define _ADCPCON0_ADCPRDY_SIZE                              0x1
#define _ADCPCON0_ADCPRDY_LENGTH                            0x1
#define _ADCPCON0_ADCPRDY_MASK                              0x1
#define _ADCPCON0_ADCPON_POSN                               0x7
#define _ADCPCON0_ADCPON_POSITION                           0x7
#define _ADCPCON0_ADCPON_SIZE                               0x1
#define _ADCPCON0_ADCPON_LENGTH                             0x1
#define _ADCPCON0_ADCPON_MASK                               0x80

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x08C);
#ifndef _LIB_BUILD
asm("ADLTH equ 08Ch");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x08C);
#ifndef _LIB_BUILD
asm("ADLTHL equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH0                   :1;
        unsigned LTH1                   :1;
        unsigned LTH2                   :1;
        unsigned LTH3                   :1;
        unsigned LTH4                   :1;
        unsigned LTH5                   :1;
        unsigned LTH6                   :1;
        unsigned LTH7                   :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x08C);
// bitfield macros
#define _ADLTHL_LTH_POSN                                    0x0
#define _ADLTHL_LTH_POSITION                                0x0
#define _ADLTHL_LTH_SIZE                                    0x8
#define _ADLTHL_LTH_LENGTH                                  0x8
#define _ADLTHL_LTH_MASK                                    0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80
#define _ADLTHL_ADLTH_POSN                                  0x0
#define _ADLTHL_ADLTH_POSITION                              0x0
#define _ADLTHL_ADLTH_SIZE                                  0x8
#define _ADLTHL_ADLTH_LENGTH                                0x8
#define _ADLTHL_ADLTH_MASK                                  0xFF
#define _ADLTHL_LTH0_POSN                                   0x0
#define _ADLTHL_LTH0_POSITION                               0x0
#define _ADLTHL_LTH0_SIZE                                   0x1
#define _ADLTHL_LTH0_LENGTH                                 0x1
#define _ADLTHL_LTH0_MASK                                   0x1
#define _ADLTHL_LTH1_POSN                                   0x1
#define _ADLTHL_LTH1_POSITION                               0x1
#define _ADLTHL_LTH1_SIZE                                   0x1
#define _ADLTHL_LTH1_LENGTH                                 0x1
#define _ADLTHL_LTH1_MASK                                   0x2
#define _ADLTHL_LTH2_POSN                                   0x2
#define _ADLTHL_LTH2_POSITION                               0x2
#define _ADLTHL_LTH2_SIZE                                   0x1
#define _ADLTHL_LTH2_LENGTH                                 0x1
#define _ADLTHL_LTH2_MASK                                   0x4
#define _ADLTHL_LTH3_POSN                                   0x3
#define _ADLTHL_LTH3_POSITION                               0x3
#define _ADLTHL_LTH3_SIZE                                   0x1
#define _ADLTHL_LTH3_LENGTH                                 0x1
#define _ADLTHL_LTH3_MASK                                   0x8
#define _ADLTHL_LTH4_POSN                                   0x4
#define _ADLTHL_LTH4_POSITION                               0x4
#define _ADLTHL_LTH4_SIZE                                   0x1
#define _ADLTHL_LTH4_LENGTH                                 0x1
#define _ADLTHL_LTH4_MASK                                   0x10
#define _ADLTHL_LTH5_POSN                                   0x5
#define _ADLTHL_LTH5_POSITION                               0x5
#define _ADLTHL_LTH5_SIZE                                   0x1
#define _ADLTHL_LTH5_LENGTH                                 0x1
#define _ADLTHL_LTH5_MASK                                   0x20
#define _ADLTHL_LTH6_POSN                                   0x6
#define _ADLTHL_LTH6_POSITION                               0x6
#define _ADLTHL_LTH6_SIZE                                   0x1
#define _ADLTHL_LTH6_LENGTH                                 0x1
#define _ADLTHL_LTH6_MASK                                   0x40
#define _ADLTHL_LTH7_POSN                                   0x7
#define _ADLTHL_LTH7_POSITION                               0x7
#define _ADLTHL_LTH7_SIZE                                   0x1
#define _ADLTHL_LTH7_LENGTH                                 0x1
#define _ADLTHL_LTH7_MASK                                   0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x08D);
#ifndef _LIB_BUILD
asm("ADLTHH equ 08Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH8                   :1;
        unsigned LTH9                   :1;
        unsigned LTH10                  :1;
        unsigned LTH11                  :1;
        unsigned LTH12                  :1;
        unsigned LTH13                  :1;
        unsigned LTH14                  :1;
        unsigned LTH15                  :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x08D);
// bitfield macros
#define _ADLTHH_LTH_POSN                                    0x0
#define _ADLTHH_LTH_POSITION                                0x0
#define _ADLTHH_LTH_SIZE                                    0x8
#define _ADLTHH_LTH_LENGTH                                  0x8
#define _ADLTHH_LTH_MASK                                    0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80
#define _ADLTHH_ADLTH_POSN                                  0x0
#define _ADLTHH_ADLTH_POSITION                              0x0
#define _ADLTHH_ADLTH_SIZE                                  0x8
#define _ADLTHH_ADLTH_LENGTH                                0x8
#define _ADLTHH_ADLTH_MASK                                  0xFF
#define _ADLTHH_LTH8_POSN                                   0x0
#define _ADLTHH_LTH8_POSITION                               0x0
#define _ADLTHH_LTH8_SIZE                                   0x1
#define _ADLTHH_LTH8_LENGTH                                 0x1
#define _ADLTHH_LTH8_MASK                                   0x1
#define _ADLTHH_LTH9_POSN                                   0x1
#define _ADLTHH_LTH9_POSITION                               0x1
#define _ADLTHH_LTH9_SIZE                                   0x1
#define _ADLTHH_LTH9_LENGTH                                 0x1
#define _ADLTHH_LTH9_MASK                                   0x2
#define _ADLTHH_LTH10_POSN                                  0x2
#define _ADLTHH_LTH10_POSITION                              0x2
#define _ADLTHH_LTH10_SIZE                                  0x1
#define _ADLTHH_LTH10_LENGTH                                0x1
#define _ADLTHH_LTH10_MASK                                  0x4
#define _ADLTHH_LTH11_POSN                                  0x3
#define _ADLTHH_LTH11_POSITION                              0x3
#define _ADLTHH_LTH11_SIZE                                  0x1
#define _ADLTHH_LTH11_LENGTH                                0x1
#define _ADLTHH_LTH11_MASK                                  0x8
#define _ADLTHH_LTH12_POSN                                  0x4
#define _ADLTHH_LTH12_POSITION                              0x4
#define _ADLTHH_LTH12_SIZE                                  0x1
#define _ADLTHH_LTH12_LENGTH                                0x1
#define _ADLTHH_LTH12_MASK                                  0x10
#define _ADLTHH_LTH13_POSN                                  0x5
#define _ADLTHH_LTH13_POSITION                              0x5
#define _ADLTHH_LTH13_SIZE                                  0x1
#define _ADLTHH_LTH13_LENGTH                                0x1
#define _ADLTHH_LTH13_MASK                                  0x20
#define _ADLTHH_LTH14_POSN                                  0x6
#define _ADLTHH_LTH14_POSITION                              0x6
#define _ADLTHH_LTH14_SIZE                                  0x1
#define _ADLTHH_LTH14_LENGTH                                0x1
#define _ADLTHH_LTH14_MASK                                  0x40
#define _ADLTHH_LTH15_POSN                                  0x7
#define _ADLTHH_LTH15_POSITION                              0x7
#define _ADLTHH_LTH15_SIZE                                  0x1
#define _ADLTHH_LTH15_LENGTH                                0x1
#define _ADLTHH_LTH15_MASK                                  0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x08E);
#ifndef _LIB_BUILD
asm("ADUTH equ 08Eh");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x08E);
#ifndef _LIB_BUILD
asm("ADUTHL equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH0                   :1;
        unsigned UTH1                   :1;
        unsigned UTH2                   :1;
        unsigned UTH3                   :1;
        unsigned UTH4                   :1;
        unsigned UTH5                   :1;
        unsigned UTH6                   :1;
        unsigned UTH7                   :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x08E);
// bitfield macros
#define _ADUTHL_UTH_POSN                                    0x0
#define _ADUTHL_UTH_POSITION                                0x0
#define _ADUTHL_UTH_SIZE                                    0x8
#define _ADUTHL_UTH_LENGTH                                  0x8
#define _ADUTHL_UTH_MASK                                    0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80
#define _ADUTHL_ADUTH_POSN                                  0x0
#define _ADUTHL_ADUTH_POSITION                              0x0
#define _ADUTHL_ADUTH_SIZE                                  0x8
#define _ADUTHL_ADUTH_LENGTH                                0x8
#define _ADUTHL_ADUTH_MASK                                  0xFF
#define _ADUTHL_UTH0_POSN                                   0x0
#define _ADUTHL_UTH0_POSITION                               0x0
#define _ADUTHL_UTH0_SIZE                                   0x1
#define _ADUTHL_UTH0_LENGTH                                 0x1
#define _ADUTHL_UTH0_MASK                                   0x1
#define _ADUTHL_UTH1_POSN                                   0x1
#define _ADUTHL_UTH1_POSITION                               0x1
#define _ADUTHL_UTH1_SIZE                                   0x1
#define _ADUTHL_UTH1_LENGTH                                 0x1
#define _ADUTHL_UTH1_MASK                                   0x2
#define _ADUTHL_UTH2_POSN                                   0x2
#define _ADUTHL_UTH2_POSITION                               0x2
#define _ADUTHL_UTH2_SIZE                                   0x1
#define _ADUTHL_UTH2_LENGTH                                 0x1
#define _ADUTHL_UTH2_MASK                                   0x4
#define _ADUTHL_UTH3_POSN                                   0x3
#define _ADUTHL_UTH3_POSITION                               0x3
#define _ADUTHL_UTH3_SIZE                                   0x1
#define _ADUTHL_UTH3_LENGTH                                 0x1
#define _ADUTHL_UTH3_MASK                                   0x8
#define _ADUTHL_UTH4_POSN                                   0x4
#define _ADUTHL_UTH4_POSITION                               0x4
#define _ADUTHL_UTH4_SIZE                                   0x1
#define _ADUTHL_UTH4_LENGTH                                 0x1
#define _ADUTHL_UTH4_MASK                                   0x10
#define _ADUTHL_UTH5_POSN                                   0x5
#define _ADUTHL_UTH5_POSITION                               0x5
#define _ADUTHL_UTH5_SIZE                                   0x1
#define _ADUTHL_UTH5_LENGTH                                 0x1
#define _ADUTHL_UTH5_MASK                                   0x20
#define _ADUTHL_UTH6_POSN                                   0x6
#define _ADUTHL_UTH6_POSITION                               0x6
#define _ADUTHL_UTH6_SIZE                                   0x1
#define _ADUTHL_UTH6_LENGTH                                 0x1
#define _ADUTHL_UTH6_MASK                                   0x40
#define _ADUTHL_UTH7_POSN                                   0x7
#define _ADUTHL_UTH7_POSITION                               0x7
#define _ADUTHL_UTH7_SIZE                                   0x1
#define _ADUTHL_UTH7_LENGTH                                 0x1
#define _ADUTHL_UTH7_MASK                                   0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x08F);
#ifndef _LIB_BUILD
asm("ADUTHH equ 08Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH8                   :1;
        unsigned UTH9                   :1;
        unsigned UTH10                  :1;
        unsigned UTH11                  :1;
        unsigned UTH12                  :1;
        unsigned UTH13                  :1;
        unsigned UTH14                  :1;
        unsigned UTH15                  :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x08F);
// bitfield macros
#define _ADUTHH_UTH_POSN                                    0x0
#define _ADUTHH_UTH_POSITION                                0x0
#define _ADUTHH_UTH_SIZE                                    0x8
#define _ADUTHH_UTH_LENGTH                                  0x8
#define _ADUTHH_UTH_MASK                                    0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80
#define _ADUTHH_ADUTH_POSN                                  0x0
#define _ADUTHH_ADUTH_POSITION                              0x0
#define _ADUTHH_ADUTH_SIZE                                  0x8
#define _ADUTHH_ADUTH_LENGTH                                0x8
#define _ADUTHH_ADUTH_MASK                                  0xFF
#define _ADUTHH_UTH8_POSN                                   0x0
#define _ADUTHH_UTH8_POSITION                               0x0
#define _ADUTHH_UTH8_SIZE                                   0x1
#define _ADUTHH_UTH8_LENGTH                                 0x1
#define _ADUTHH_UTH8_MASK                                   0x1
#define _ADUTHH_UTH9_POSN                                   0x1
#define _ADUTHH_UTH9_POSITION                               0x1
#define _ADUTHH_UTH9_SIZE                                   0x1
#define _ADUTHH_UTH9_LENGTH                                 0x1
#define _ADUTHH_UTH9_MASK                                   0x2
#define _ADUTHH_UTH10_POSN                                  0x2
#define _ADUTHH_UTH10_POSITION                              0x2
#define _ADUTHH_UTH10_SIZE                                  0x1
#define _ADUTHH_UTH10_LENGTH                                0x1
#define _ADUTHH_UTH10_MASK                                  0x4
#define _ADUTHH_UTH11_POSN                                  0x3
#define _ADUTHH_UTH11_POSITION                              0x3
#define _ADUTHH_UTH11_SIZE                                  0x1
#define _ADUTHH_UTH11_LENGTH                                0x1
#define _ADUTHH_UTH11_MASK                                  0x8
#define _ADUTHH_UTH12_POSN                                  0x4
#define _ADUTHH_UTH12_POSITION                              0x4
#define _ADUTHH_UTH12_SIZE                                  0x1
#define _ADUTHH_UTH12_LENGTH                                0x1
#define _ADUTHH_UTH12_MASK                                  0x10
#define _ADUTHH_UTH13_POSN                                  0x5
#define _ADUTHH_UTH13_POSITION                              0x5
#define _ADUTHH_UTH13_SIZE                                  0x1
#define _ADUTHH_UTH13_LENGTH                                0x1
#define _ADUTHH_UTH13_MASK                                  0x20
#define _ADUTHH_UTH14_POSN                                  0x6
#define _ADUTHH_UTH14_POSITION                              0x6
#define _ADUTHH_UTH14_SIZE                                  0x1
#define _ADUTHH_UTH14_LENGTH                                0x1
#define _ADUTHH_UTH14_MASK                                  0x40
#define _ADUTHH_UTH15_POSN                                  0x7
#define _ADUTHH_UTH15_POSITION                              0x7
#define _ADUTHH_UTH15_SIZE                                  0x1
#define _ADUTHH_UTH15_LENGTH                                0x1
#define _ADUTHH_UTH15_MASK                                  0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x090);
#ifndef _LIB_BUILD
asm("ADERR equ 090h");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x090);
#ifndef _LIB_BUILD
asm("ADERRL equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x090);
// bitfield macros
#define _ADERRL_ERR_POSN                                    0x0
#define _ADERRL_ERR_POSITION                                0x0
#define _ADERRL_ERR_SIZE                                    0x8
#define _ADERRL_ERR_LENGTH                                  0x8
#define _ADERRL_ERR_MASK                                    0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80
#define _ADERRL_ADERR_POSN                                  0x0
#define _ADERRL_ADERR_POSITION                              0x0
#define _ADERRL_ADERR_SIZE                                  0x8
#define _ADERRL_ADERR_LENGTH                                0x8
#define _ADERRL_ADERR_MASK                                  0xFF
#define _ADERRL_ERR0_POSN                                   0x0
#define _ADERRL_ERR0_POSITION                               0x0
#define _ADERRL_ERR0_SIZE                                   0x1
#define _ADERRL_ERR0_LENGTH                                 0x1
#define _ADERRL_ERR0_MASK                                   0x1
#define _ADERRL_ERR1_POSN                                   0x1
#define _ADERRL_ERR1_POSITION                               0x1
#define _ADERRL_ERR1_SIZE                                   0x1
#define _ADERRL_ERR1_LENGTH                                 0x1
#define _ADERRL_ERR1_MASK                                   0x2
#define _ADERRL_ERR2_POSN                                   0x2
#define _ADERRL_ERR2_POSITION                               0x2
#define _ADERRL_ERR2_SIZE                                   0x1
#define _ADERRL_ERR2_LENGTH                                 0x1
#define _ADERRL_ERR2_MASK                                   0x4
#define _ADERRL_ERR3_POSN                                   0x3
#define _ADERRL_ERR3_POSITION                               0x3
#define _ADERRL_ERR3_SIZE                                   0x1
#define _ADERRL_ERR3_LENGTH                                 0x1
#define _ADERRL_ERR3_MASK                                   0x8
#define _ADERRL_ERR4_POSN                                   0x4
#define _ADERRL_ERR4_POSITION                               0x4
#define _ADERRL_ERR4_SIZE                                   0x1
#define _ADERRL_ERR4_LENGTH                                 0x1
#define _ADERRL_ERR4_MASK                                   0x10
#define _ADERRL_ERR5_POSN                                   0x5
#define _ADERRL_ERR5_POSITION                               0x5
#define _ADERRL_ERR5_SIZE                                   0x1
#define _ADERRL_ERR5_LENGTH                                 0x1
#define _ADERRL_ERR5_MASK                                   0x20
#define _ADERRL_ERR6_POSN                                   0x6
#define _ADERRL_ERR6_POSITION                               0x6
#define _ADERRL_ERR6_SIZE                                   0x1
#define _ADERRL_ERR6_LENGTH                                 0x1
#define _ADERRL_ERR6_MASK                                   0x40
#define _ADERRL_ERR7_POSN                                   0x7
#define _ADERRL_ERR7_POSITION                               0x7
#define _ADERRL_ERR7_SIZE                                   0x1
#define _ADERRL_ERR7_LENGTH                                 0x1
#define _ADERRL_ERR7_MASK                                   0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x091);
#ifndef _LIB_BUILD
asm("ADERRH equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x091);
// bitfield macros
#define _ADERRH_ERR_POSN                                    0x0
#define _ADERRH_ERR_POSITION                                0x0
#define _ADERRH_ERR_SIZE                                    0x8
#define _ADERRH_ERR_LENGTH                                  0x8
#define _ADERRH_ERR_MASK                                    0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80
#define _ADERRH_ADERR_POSN                                  0x0
#define _ADERRH_ADERR_POSITION                              0x0
#define _ADERRH_ADERR_SIZE                                  0x8
#define _ADERRH_ADERR_LENGTH                                0x8
#define _ADERRH_ADERR_MASK                                  0xFF
#define _ADERRH_ERR8_POSN                                   0x0
#define _ADERRH_ERR8_POSITION                               0x0
#define _ADERRH_ERR8_SIZE                                   0x1
#define _ADERRH_ERR8_LENGTH                                 0x1
#define _ADERRH_ERR8_MASK                                   0x1
#define _ADERRH_ERR9_POSN                                   0x1
#define _ADERRH_ERR9_POSITION                               0x1
#define _ADERRH_ERR9_SIZE                                   0x1
#define _ADERRH_ERR9_LENGTH                                 0x1
#define _ADERRH_ERR9_MASK                                   0x2
#define _ADERRH_ERR10_POSN                                  0x2
#define _ADERRH_ERR10_POSITION                              0x2
#define _ADERRH_ERR10_SIZE                                  0x1
#define _ADERRH_ERR10_LENGTH                                0x1
#define _ADERRH_ERR10_MASK                                  0x4
#define _ADERRH_ERR11_POSN                                  0x3
#define _ADERRH_ERR11_POSITION                              0x3
#define _ADERRH_ERR11_SIZE                                  0x1
#define _ADERRH_ERR11_LENGTH                                0x1
#define _ADERRH_ERR11_MASK                                  0x8
#define _ADERRH_ERR12_POSN                                  0x4
#define _ADERRH_ERR12_POSITION                              0x4
#define _ADERRH_ERR12_SIZE                                  0x1
#define _ADERRH_ERR12_LENGTH                                0x1
#define _ADERRH_ERR12_MASK                                  0x10
#define _ADERRH_ERR13_POSN                                  0x5
#define _ADERRH_ERR13_POSITION                              0x5
#define _ADERRH_ERR13_SIZE                                  0x1
#define _ADERRH_ERR13_LENGTH                                0x1
#define _ADERRH_ERR13_MASK                                  0x20
#define _ADERRH_ERR14_POSN                                  0x6
#define _ADERRH_ERR14_POSITION                              0x6
#define _ADERRH_ERR14_SIZE                                  0x1
#define _ADERRH_ERR14_LENGTH                                0x1
#define _ADERRH_ERR14_MASK                                  0x40
#define _ADERRH_ERR15_POSN                                  0x7
#define _ADERRH_ERR15_POSITION                              0x7
#define _ADERRH_ERR15_SIZE                                  0x1
#define _ADERRH_ERR15_LENGTH                                0x1
#define _ADERRH_ERR15_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x092);
#ifndef _LIB_BUILD
asm("ADSTPT equ 092h");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x092);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x092);
// bitfield macros
#define _ADSTPTL_STPT_POSN                                  0x0
#define _ADSTPTL_STPT_POSITION                              0x0
#define _ADSTPTL_STPT_SIZE                                  0x8
#define _ADSTPTL_STPT_LENGTH                                0x8
#define _ADSTPTL_STPT_MASK                                  0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80
#define _ADSTPTL_ADSTPT_POSN                                0x0
#define _ADSTPTL_ADSTPT_POSITION                            0x0
#define _ADSTPTL_ADSTPT_SIZE                                0x8
#define _ADSTPTL_ADSTPT_LENGTH                              0x8
#define _ADSTPTL_ADSTPT_MASK                                0xFF
#define _ADSTPTL_STPT0_POSN                                 0x0
#define _ADSTPTL_STPT0_POSITION                             0x0
#define _ADSTPTL_STPT0_SIZE                                 0x1
#define _ADSTPTL_STPT0_LENGTH                               0x1
#define _ADSTPTL_STPT0_MASK                                 0x1
#define _ADSTPTL_STPT1_POSN                                 0x1
#define _ADSTPTL_STPT1_POSITION                             0x1
#define _ADSTPTL_STPT1_SIZE                                 0x1
#define _ADSTPTL_STPT1_LENGTH                               0x1
#define _ADSTPTL_STPT1_MASK                                 0x2
#define _ADSTPTL_STPT2_POSN                                 0x2
#define _ADSTPTL_STPT2_POSITION                             0x2
#define _ADSTPTL_STPT2_SIZE                                 0x1
#define _ADSTPTL_STPT2_LENGTH                               0x1
#define _ADSTPTL_STPT2_MASK                                 0x4
#define _ADSTPTL_STPT3_POSN                                 0x3
#define _ADSTPTL_STPT3_POSITION                             0x3
#define _ADSTPTL_STPT3_SIZE                                 0x1
#define _ADSTPTL_STPT3_LENGTH                               0x1
#define _ADSTPTL_STPT3_MASK                                 0x8
#define _ADSTPTL_STPT4_POSN                                 0x4
#define _ADSTPTL_STPT4_POSITION                             0x4
#define _ADSTPTL_STPT4_SIZE                                 0x1
#define _ADSTPTL_STPT4_LENGTH                               0x1
#define _ADSTPTL_STPT4_MASK                                 0x10
#define _ADSTPTL_STPT5_POSN                                 0x5
#define _ADSTPTL_STPT5_POSITION                             0x5
#define _ADSTPTL_STPT5_SIZE                                 0x1
#define _ADSTPTL_STPT5_LENGTH                               0x1
#define _ADSTPTL_STPT5_MASK                                 0x20
#define _ADSTPTL_STPT6_POSN                                 0x6
#define _ADSTPTL_STPT6_POSITION                             0x6
#define _ADSTPTL_STPT6_SIZE                                 0x1
#define _ADSTPTL_STPT6_LENGTH                               0x1
#define _ADSTPTL_STPT6_MASK                                 0x40
#define _ADSTPTL_STPT7_POSN                                 0x7
#define _ADSTPTL_STPT7_POSITION                             0x7
#define _ADSTPTL_STPT7_SIZE                                 0x1
#define _ADSTPTL_STPT7_LENGTH                               0x1
#define _ADSTPTL_STPT7_MASK                                 0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x093);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT15                 :1;
        unsigned STPT16                 :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x093);
// bitfield macros
#define _ADSTPTH_STPT_POSN                                  0x0
#define _ADSTPTH_STPT_POSITION                              0x0
#define _ADSTPTH_STPT_SIZE                                  0x8
#define _ADSTPTH_STPT_LENGTH                                0x8
#define _ADSTPTH_STPT_MASK                                  0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80
#define _ADSTPTH_ADSTPT_POSN                                0x0
#define _ADSTPTH_ADSTPT_POSITION                            0x0
#define _ADSTPTH_ADSTPT_SIZE                                0x8
#define _ADSTPTH_ADSTPT_LENGTH                              0x8
#define _ADSTPTH_ADSTPT_MASK                                0xFF
#define _ADSTPTH_STPT8_POSN                                 0x0
#define _ADSTPTH_STPT8_POSITION                             0x0
#define _ADSTPTH_STPT8_SIZE                                 0x1
#define _ADSTPTH_STPT8_LENGTH                               0x1
#define _ADSTPTH_STPT8_MASK                                 0x1
#define _ADSTPTH_STPT9_POSN                                 0x1
#define _ADSTPTH_STPT9_POSITION                             0x1
#define _ADSTPTH_STPT9_SIZE                                 0x1
#define _ADSTPTH_STPT9_LENGTH                               0x1
#define _ADSTPTH_STPT9_MASK                                 0x2
#define _ADSTPTH_STPT10_POSN                                0x2
#define _ADSTPTH_STPT10_POSITION                            0x2
#define _ADSTPTH_STPT10_SIZE                                0x1
#define _ADSTPTH_STPT10_LENGTH                              0x1
#define _ADSTPTH_STPT10_MASK                                0x4
#define _ADSTPTH_STPT11_POSN                                0x3
#define _ADSTPTH_STPT11_POSITION                            0x3
#define _ADSTPTH_STPT11_SIZE                                0x1
#define _ADSTPTH_STPT11_LENGTH                              0x1
#define _ADSTPTH_STPT11_MASK                                0x8
#define _ADSTPTH_STPT12_POSN                                0x4
#define _ADSTPTH_STPT12_POSITION                            0x4
#define _ADSTPTH_STPT12_SIZE                                0x1
#define _ADSTPTH_STPT12_LENGTH                              0x1
#define _ADSTPTH_STPT12_MASK                                0x10
#define _ADSTPTH_STPT13_POSN                                0x5
#define _ADSTPTH_STPT13_POSITION                            0x5
#define _ADSTPTH_STPT13_SIZE                                0x1
#define _ADSTPTH_STPT13_LENGTH                              0x1
#define _ADSTPTH_STPT13_MASK                                0x20
#define _ADSTPTH_STPT15_POSN                                0x6
#define _ADSTPTH_STPT15_POSITION                            0x6
#define _ADSTPTH_STPT15_SIZE                                0x1
#define _ADSTPTH_STPT15_LENGTH                              0x1
#define _ADSTPTH_STPT15_MASK                                0x40
#define _ADSTPTH_STPT16_POSN                                0x7
#define _ADSTPTH_STPT16_POSITION                            0x7
#define _ADSTPTH_STPT16_SIZE                                0x1
#define _ADSTPTH_STPT16_LENGTH                              0x1
#define _ADSTPTH_STPT16_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x094);
#ifndef _LIB_BUILD
asm("ADFLTR equ 094h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x094);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR0                  :1;
        unsigned FLTR1                  :1;
        unsigned FLTR2                  :1;
        unsigned FLTR3                  :1;
        unsigned FLTR4                  :1;
        unsigned FLTR5                  :1;
        unsigned FLTR6                  :1;
        unsigned FLTR7                  :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x094);
// bitfield macros
#define _ADFLTRL_FLTR_POSN                                  0x0
#define _ADFLTRL_FLTR_POSITION                              0x0
#define _ADFLTRL_FLTR_SIZE                                  0x8
#define _ADFLTRL_FLTR_LENGTH                                0x8
#define _ADFLTRL_FLTR_MASK                                  0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80
#define _ADFLTRL_ADFLTR_POSN                                0x0
#define _ADFLTRL_ADFLTR_POSITION                            0x0
#define _ADFLTRL_ADFLTR_SIZE                                0x8
#define _ADFLTRL_ADFLTR_LENGTH                              0x8
#define _ADFLTRL_ADFLTR_MASK                                0xFF
#define _ADFLTRL_FLTR0_POSN                                 0x0
#define _ADFLTRL_FLTR0_POSITION                             0x0
#define _ADFLTRL_FLTR0_SIZE                                 0x1
#define _ADFLTRL_FLTR0_LENGTH                               0x1
#define _ADFLTRL_FLTR0_MASK                                 0x1
#define _ADFLTRL_FLTR1_POSN                                 0x1
#define _ADFLTRL_FLTR1_POSITION                             0x1
#define _ADFLTRL_FLTR1_SIZE                                 0x1
#define _ADFLTRL_FLTR1_LENGTH                               0x1
#define _ADFLTRL_FLTR1_MASK                                 0x2
#define _ADFLTRL_FLTR2_POSN                                 0x2
#define _ADFLTRL_FLTR2_POSITION                             0x2
#define _ADFLTRL_FLTR2_SIZE                                 0x1
#define _ADFLTRL_FLTR2_LENGTH                               0x1
#define _ADFLTRL_FLTR2_MASK                                 0x4
#define _ADFLTRL_FLTR3_POSN                                 0x3
#define _ADFLTRL_FLTR3_POSITION                             0x3
#define _ADFLTRL_FLTR3_SIZE                                 0x1
#define _ADFLTRL_FLTR3_LENGTH                               0x1
#define _ADFLTRL_FLTR3_MASK                                 0x8
#define _ADFLTRL_FLTR4_POSN                                 0x4
#define _ADFLTRL_FLTR4_POSITION                             0x4
#define _ADFLTRL_FLTR4_SIZE                                 0x1
#define _ADFLTRL_FLTR4_LENGTH                               0x1
#define _ADFLTRL_FLTR4_MASK                                 0x10
#define _ADFLTRL_FLTR5_POSN                                 0x5
#define _ADFLTRL_FLTR5_POSITION                             0x5
#define _ADFLTRL_FLTR5_SIZE                                 0x1
#define _ADFLTRL_FLTR5_LENGTH                               0x1
#define _ADFLTRL_FLTR5_MASK                                 0x20
#define _ADFLTRL_FLTR6_POSN                                 0x6
#define _ADFLTRL_FLTR6_POSITION                             0x6
#define _ADFLTRL_FLTR6_SIZE                                 0x1
#define _ADFLTRL_FLTR6_LENGTH                               0x1
#define _ADFLTRL_FLTR6_MASK                                 0x40
#define _ADFLTRL_FLTR7_POSN                                 0x7
#define _ADFLTRL_FLTR7_POSITION                             0x7
#define _ADFLTRL_FLTR7_SIZE                                 0x1
#define _ADFLTRL_FLTR7_LENGTH                               0x1
#define _ADFLTRL_FLTR7_MASK                                 0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x095);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR8                  :1;
        unsigned FLTR9                  :1;
        unsigned FLTR10                 :1;
        unsigned FLTR11                 :1;
        unsigned FLTR12                 :1;
        unsigned FLTR13                 :1;
        unsigned FLTR14                 :1;
        unsigned FLTR15                 :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x095);
// bitfield macros
#define _ADFLTRH_FLTR_POSN                                  0x0
#define _ADFLTRH_FLTR_POSITION                              0x0
#define _ADFLTRH_FLTR_SIZE                                  0x8
#define _ADFLTRH_FLTR_LENGTH                                0x8
#define _ADFLTRH_FLTR_MASK                                  0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80
#define _ADFLTRH_ADFLTR_POSN                                0x0
#define _ADFLTRH_ADFLTR_POSITION                            0x0
#define _ADFLTRH_ADFLTR_SIZE                                0x8
#define _ADFLTRH_ADFLTR_LENGTH                              0x8
#define _ADFLTRH_ADFLTR_MASK                                0xFF
#define _ADFLTRH_FLTR8_POSN                                 0x0
#define _ADFLTRH_FLTR8_POSITION                             0x0
#define _ADFLTRH_FLTR8_SIZE                                 0x1
#define _ADFLTRH_FLTR8_LENGTH                               0x1
#define _ADFLTRH_FLTR8_MASK                                 0x1
#define _ADFLTRH_FLTR9_POSN                                 0x1
#define _ADFLTRH_FLTR9_POSITION                             0x1
#define _ADFLTRH_FLTR9_SIZE                                 0x1
#define _ADFLTRH_FLTR9_LENGTH                               0x1
#define _ADFLTRH_FLTR9_MASK                                 0x2
#define _ADFLTRH_FLTR10_POSN                                0x2
#define _ADFLTRH_FLTR10_POSITION                            0x2
#define _ADFLTRH_FLTR10_SIZE                                0x1
#define _ADFLTRH_FLTR10_LENGTH                              0x1
#define _ADFLTRH_FLTR10_MASK                                0x4
#define _ADFLTRH_FLTR11_POSN                                0x3
#define _ADFLTRH_FLTR11_POSITION                            0x3
#define _ADFLTRH_FLTR11_SIZE                                0x1
#define _ADFLTRH_FLTR11_LENGTH                              0x1
#define _ADFLTRH_FLTR11_MASK                                0x8
#define _ADFLTRH_FLTR12_POSN                                0x4
#define _ADFLTRH_FLTR12_POSITION                            0x4
#define _ADFLTRH_FLTR12_SIZE                                0x1
#define _ADFLTRH_FLTR12_LENGTH                              0x1
#define _ADFLTRH_FLTR12_MASK                                0x10
#define _ADFLTRH_FLTR13_POSN                                0x5
#define _ADFLTRH_FLTR13_POSITION                            0x5
#define _ADFLTRH_FLTR13_SIZE                                0x1
#define _ADFLTRH_FLTR13_LENGTH                              0x1
#define _ADFLTRH_FLTR13_MASK                                0x20
#define _ADFLTRH_FLTR14_POSN                                0x6
#define _ADFLTRH_FLTR14_POSITION                            0x6
#define _ADFLTRH_FLTR14_SIZE                                0x1
#define _ADFLTRH_FLTR14_LENGTH                              0x1
#define _ADFLTRH_FLTR14_MASK                                0x40
#define _ADFLTRH_FLTR15_POSN                                0x7
#define _ADFLTRH_FLTR15_POSITION                            0x7
#define _ADFLTRH_FLTR15_SIZE                                0x1
#define _ADFLTRH_FLTR15_LENGTH                              0x1
#define _ADFLTRH_FLTR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
#ifndef __CCI__
extern volatile __uint24                ADACC               __at(0x096);
#endif
#ifndef _LIB_BUILD
asm("ADACC equ 096h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x096);
#ifndef _LIB_BUILD
asm("ADACCL equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x096);
// bitfield macros
#define _ADACCL_ACC_POSN                                    0x0
#define _ADACCL_ACC_POSITION                                0x0
#define _ADACCL_ACC_SIZE                                    0x8
#define _ADACCL_ACC_LENGTH                                  0x8
#define _ADACCL_ACC_MASK                                    0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80
#define _ADACCL_ADACC_POSN                                  0x0
#define _ADACCL_ADACC_POSITION                              0x0
#define _ADACCL_ADACC_SIZE                                  0x8
#define _ADACCL_ADACC_LENGTH                                0x8
#define _ADACCL_ADACC_MASK                                  0xFF
#define _ADACCL_ACC0_POSN                                   0x0
#define _ADACCL_ACC0_POSITION                               0x0
#define _ADACCL_ACC0_SIZE                                   0x1
#define _ADACCL_ACC0_LENGTH                                 0x1
#define _ADACCL_ACC0_MASK                                   0x1
#define _ADACCL_ACC1_POSN                                   0x1
#define _ADACCL_ACC1_POSITION                               0x1
#define _ADACCL_ACC1_SIZE                                   0x1
#define _ADACCL_ACC1_LENGTH                                 0x1
#define _ADACCL_ACC1_MASK                                   0x2
#define _ADACCL_ACC2_POSN                                   0x2
#define _ADACCL_ACC2_POSITION                               0x2
#define _ADACCL_ACC2_SIZE                                   0x1
#define _ADACCL_ACC2_LENGTH                                 0x1
#define _ADACCL_ACC2_MASK                                   0x4
#define _ADACCL_ACC3_POSN                                   0x3
#define _ADACCL_ACC3_POSITION                               0x3
#define _ADACCL_ACC3_SIZE                                   0x1
#define _ADACCL_ACC3_LENGTH                                 0x1
#define _ADACCL_ACC3_MASK                                   0x8
#define _ADACCL_ACC4_POSN                                   0x4
#define _ADACCL_ACC4_POSITION                               0x4
#define _ADACCL_ACC4_SIZE                                   0x1
#define _ADACCL_ACC4_LENGTH                                 0x1
#define _ADACCL_ACC4_MASK                                   0x10
#define _ADACCL_ACC5_POSN                                   0x5
#define _ADACCL_ACC5_POSITION                               0x5
#define _ADACCL_ACC5_SIZE                                   0x1
#define _ADACCL_ACC5_LENGTH                                 0x1
#define _ADACCL_ACC5_MASK                                   0x20
#define _ADACCL_ACC6_POSN                                   0x6
#define _ADACCL_ACC6_POSITION                               0x6
#define _ADACCL_ACC6_SIZE                                   0x1
#define _ADACCL_ACC6_LENGTH                                 0x1
#define _ADACCL_ACC6_MASK                                   0x40
#define _ADACCL_ACC7_POSN                                   0x7
#define _ADACCL_ACC7_POSITION                               0x7
#define _ADACCL_ACC7_SIZE                                   0x1
#define _ADACCL_ACC7_LENGTH                                 0x1
#define _ADACCL_ACC7_MASK                                   0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x097);
#ifndef _LIB_BUILD
asm("ADACCH equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x097);
// bitfield macros
#define _ADACCH_ACC_POSN                                    0x0
#define _ADACCH_ACC_POSITION                                0x0
#define _ADACCH_ACC_SIZE                                    0x8
#define _ADACCH_ACC_LENGTH                                  0x8
#define _ADACCH_ACC_MASK                                    0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80
#define _ADACCH_ADACC_POSN                                  0x0
#define _ADACCH_ADACC_POSITION                              0x0
#define _ADACCH_ADACC_SIZE                                  0x8
#define _ADACCH_ADACC_LENGTH                                0x8
#define _ADACCH_ADACC_MASK                                  0xFF
#define _ADACCH_ACC8_POSN                                   0x0
#define _ADACCH_ACC8_POSITION                               0x0
#define _ADACCH_ACC8_SIZE                                   0x1
#define _ADACCH_ACC8_LENGTH                                 0x1
#define _ADACCH_ACC8_MASK                                   0x1
#define _ADACCH_ACC9_POSN                                   0x1
#define _ADACCH_ACC9_POSITION                               0x1
#define _ADACCH_ACC9_SIZE                                   0x1
#define _ADACCH_ACC9_LENGTH                                 0x1
#define _ADACCH_ACC9_MASK                                   0x2
#define _ADACCH_ACC10_POSN                                  0x2
#define _ADACCH_ACC10_POSITION                              0x2
#define _ADACCH_ACC10_SIZE                                  0x1
#define _ADACCH_ACC10_LENGTH                                0x1
#define _ADACCH_ACC10_MASK                                  0x4
#define _ADACCH_ACC11_POSN                                  0x3
#define _ADACCH_ACC11_POSITION                              0x3
#define _ADACCH_ACC11_SIZE                                  0x1
#define _ADACCH_ACC11_LENGTH                                0x1
#define _ADACCH_ACC11_MASK                                  0x8
#define _ADACCH_ACC12_POSN                                  0x4
#define _ADACCH_ACC12_POSITION                              0x4
#define _ADACCH_ACC12_SIZE                                  0x1
#define _ADACCH_ACC12_LENGTH                                0x1
#define _ADACCH_ACC12_MASK                                  0x10
#define _ADACCH_ACC13_POSN                                  0x5
#define _ADACCH_ACC13_POSITION                              0x5
#define _ADACCH_ACC13_SIZE                                  0x1
#define _ADACCH_ACC13_LENGTH                                0x1
#define _ADACCH_ACC13_MASK                                  0x20
#define _ADACCH_ACC14_POSN                                  0x6
#define _ADACCH_ACC14_POSITION                              0x6
#define _ADACCH_ACC14_SIZE                                  0x1
#define _ADACCH_ACC14_LENGTH                                0x1
#define _ADACCH_ACC14_MASK                                  0x40
#define _ADACCH_ACC15_POSN                                  0x7
#define _ADACCH_ACC15_POSITION                              0x7
#define _ADACCH_ACC15_SIZE                                  0x1
#define _ADACCH_ACC15_LENGTH                                0x1
#define _ADACCH_ACC15_MASK                                  0x80

// Register: ADACCU
#define ADACCU ADACCU
extern volatile unsigned char           ADACCU              __at(0x098);
#ifndef _LIB_BUILD
asm("ADACCU equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC16                :1;
        unsigned ADACC17                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
    };
} ADACCUbits_t;
extern volatile ADACCUbits_t ADACCUbits __at(0x098);
// bitfield macros
#define _ADACCU_ACC_POSN                                    0x0
#define _ADACCU_ACC_POSITION                                0x0
#define _ADACCU_ACC_SIZE                                    0x8
#define _ADACCU_ACC_LENGTH                                  0x8
#define _ADACCU_ACC_MASK                                    0xFF
#define _ADACCU_ADACC16_POSN                                0x0
#define _ADACCU_ADACC16_POSITION                            0x0
#define _ADACCU_ADACC16_SIZE                                0x1
#define _ADACCU_ADACC16_LENGTH                              0x1
#define _ADACCU_ADACC16_MASK                                0x1
#define _ADACCU_ADACC17_POSN                                0x1
#define _ADACCU_ADACC17_POSITION                            0x1
#define _ADACCU_ADACC17_SIZE                                0x1
#define _ADACCU_ADACC17_LENGTH                              0x1
#define _ADACCU_ADACC17_MASK                                0x2
#define _ADACCU_ADACC_POSN                                  0x0
#define _ADACCU_ADACC_POSITION                              0x0
#define _ADACCU_ADACC_SIZE                                  0x8
#define _ADACCU_ADACC_LENGTH                                0x8
#define _ADACCU_ADACC_MASK                                  0xFF
#define _ADACCU_ACC16_POSN                                  0x0
#define _ADACCU_ACC16_POSITION                              0x0
#define _ADACCU_ACC16_SIZE                                  0x1
#define _ADACCU_ACC16_LENGTH                                0x1
#define _ADACCU_ACC16_MASK                                  0x1
#define _ADACCU_ACC17_POSN                                  0x1
#define _ADACCU_ACC17_POSITION                              0x1
#define _ADACCU_ACC17_SIZE                                  0x1
#define _ADACCU_ACC17_LENGTH                                0x1
#define _ADACCU_ACC17_MASK                                  0x2

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x099);
#ifndef _LIB_BUILD
asm("ADCNT equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x099);
// bitfield macros
#define _ADCNT_CNT_POSN                                     0x0
#define _ADCNT_CNT_POSITION                                 0x0
#define _ADCNT_CNT_SIZE                                     0x8
#define _ADCNT_CNT_LENGTH                                   0x8
#define _ADCNT_CNT_MASK                                     0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_CNT0_POSN                                    0x0
#define _ADCNT_CNT0_POSITION                                0x0
#define _ADCNT_CNT0_SIZE                                    0x1
#define _ADCNT_CNT0_LENGTH                                  0x1
#define _ADCNT_CNT0_MASK                                    0x1
#define _ADCNT_CNT1_POSN                                    0x1
#define _ADCNT_CNT1_POSITION                                0x1
#define _ADCNT_CNT1_SIZE                                    0x1
#define _ADCNT_CNT1_LENGTH                                  0x1
#define _ADCNT_CNT1_MASK                                    0x2
#define _ADCNT_CNT2_POSN                                    0x2
#define _ADCNT_CNT2_POSITION                                0x2
#define _ADCNT_CNT2_SIZE                                    0x1
#define _ADCNT_CNT2_LENGTH                                  0x1
#define _ADCNT_CNT2_MASK                                    0x4
#define _ADCNT_CNT3_POSN                                    0x3
#define _ADCNT_CNT3_POSITION                                0x3
#define _ADCNT_CNT3_SIZE                                    0x1
#define _ADCNT_CNT3_LENGTH                                  0x1
#define _ADCNT_CNT3_MASK                                    0x8
#define _ADCNT_CNT4_POSN                                    0x4
#define _ADCNT_CNT4_POSITION                                0x4
#define _ADCNT_CNT4_SIZE                                    0x1
#define _ADCNT_CNT4_LENGTH                                  0x1
#define _ADCNT_CNT4_MASK                                    0x10
#define _ADCNT_CNT5_POSN                                    0x5
#define _ADCNT_CNT5_POSITION                                0x5
#define _ADCNT_CNT5_SIZE                                    0x1
#define _ADCNT_CNT5_LENGTH                                  0x1
#define _ADCNT_CNT5_MASK                                    0x20
#define _ADCNT_CNT6_POSN                                    0x6
#define _ADCNT_CNT6_POSITION                                0x6
#define _ADCNT_CNT6_SIZE                                    0x1
#define _ADCNT_CNT6_LENGTH                                  0x1
#define _ADCNT_CNT6_MASK                                    0x40
#define _ADCNT_CNT7_POSN                                    0x7
#define _ADCNT_CNT7_POSITION                                0x7
#define _ADCNT_CNT7_SIZE                                    0x1
#define _ADCNT_CNT7_LENGTH                                  0x1
#define _ADCNT_CNT7_MASK                                    0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x09A);
#ifndef _LIB_BUILD
asm("ADRPT equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPT                    :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned RPT0                   :1;
        unsigned RPT1                   :1;
        unsigned RPT2                   :1;
        unsigned RPT3                   :1;
        unsigned RPT4                   :1;
        unsigned RPT5                   :1;
        unsigned RPT6                   :1;
        unsigned RPT7                   :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x09A);
// bitfield macros
#define _ADRPT_RPT_POSN                                     0x0
#define _ADRPT_RPT_POSITION                                 0x0
#define _ADRPT_RPT_SIZE                                     0x8
#define _ADRPT_RPT_LENGTH                                   0x8
#define _ADRPT_RPT_MASK                                     0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_RPT0_POSN                                    0x0
#define _ADRPT_RPT0_POSITION                                0x0
#define _ADRPT_RPT0_SIZE                                    0x1
#define _ADRPT_RPT0_LENGTH                                  0x1
#define _ADRPT_RPT0_MASK                                    0x1
#define _ADRPT_RPT1_POSN                                    0x1
#define _ADRPT_RPT1_POSITION                                0x1
#define _ADRPT_RPT1_SIZE                                    0x1
#define _ADRPT_RPT1_LENGTH                                  0x1
#define _ADRPT_RPT1_MASK                                    0x2
#define _ADRPT_RPT2_POSN                                    0x2
#define _ADRPT_RPT2_POSITION                                0x2
#define _ADRPT_RPT2_SIZE                                    0x1
#define _ADRPT_RPT2_LENGTH                                  0x1
#define _ADRPT_RPT2_MASK                                    0x4
#define _ADRPT_RPT3_POSN                                    0x3
#define _ADRPT_RPT3_POSITION                                0x3
#define _ADRPT_RPT3_SIZE                                    0x1
#define _ADRPT_RPT3_LENGTH                                  0x1
#define _ADRPT_RPT3_MASK                                    0x8
#define _ADRPT_RPT4_POSN                                    0x4
#define _ADRPT_RPT4_POSITION                                0x4
#define _ADRPT_RPT4_SIZE                                    0x1
#define _ADRPT_RPT4_LENGTH                                  0x1
#define _ADRPT_RPT4_MASK                                    0x10
#define _ADRPT_RPT5_POSN                                    0x5
#define _ADRPT_RPT5_POSITION                                0x5
#define _ADRPT_RPT5_SIZE                                    0x1
#define _ADRPT_RPT5_LENGTH                                  0x1
#define _ADRPT_RPT5_MASK                                    0x20
#define _ADRPT_RPT6_POSN                                    0x6
#define _ADRPT_RPT6_POSITION                                0x6
#define _ADRPT_RPT6_SIZE                                    0x1
#define _ADRPT_RPT6_LENGTH                                  0x1
#define _ADRPT_RPT6_MASK                                    0x40
#define _ADRPT_RPT7_POSN                                    0x7
#define _ADRPT_RPT7_POSITION                                0x7
#define _ADRPT_RPT7_SIZE                                    0x1
#define _ADRPT_RPT7_LENGTH                                  0x1
#define _ADRPT_RPT7_MASK                                    0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x09B);
#ifndef _LIB_BUILD
asm("ADPREV equ 09Bh");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x09B);
#ifndef _LIB_BUILD
asm("ADPREVL equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV0                  :1;
        unsigned PREV1                  :1;
        unsigned PREV2                  :1;
        unsigned PREV3                  :1;
        unsigned PREV4                  :1;
        unsigned PREV5                  :1;
        unsigned PREV6                  :1;
        unsigned PREV7                  :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x09B);
// bitfield macros
#define _ADPREVL_PREV_POSN                                  0x0
#define _ADPREVL_PREV_POSITION                              0x0
#define _ADPREVL_PREV_SIZE                                  0x8
#define _ADPREVL_PREV_LENGTH                                0x8
#define _ADPREVL_PREV_MASK                                  0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80
#define _ADPREVL_ADPREV_POSN                                0x0
#define _ADPREVL_ADPREV_POSITION                            0x0
#define _ADPREVL_ADPREV_SIZE                                0x8
#define _ADPREVL_ADPREV_LENGTH                              0x8
#define _ADPREVL_ADPREV_MASK                                0xFF
#define _ADPREVL_PREV0_POSN                                 0x0
#define _ADPREVL_PREV0_POSITION                             0x0
#define _ADPREVL_PREV0_SIZE                                 0x1
#define _ADPREVL_PREV0_LENGTH                               0x1
#define _ADPREVL_PREV0_MASK                                 0x1
#define _ADPREVL_PREV1_POSN                                 0x1
#define _ADPREVL_PREV1_POSITION                             0x1
#define _ADPREVL_PREV1_SIZE                                 0x1
#define _ADPREVL_PREV1_LENGTH                               0x1
#define _ADPREVL_PREV1_MASK                                 0x2
#define _ADPREVL_PREV2_POSN                                 0x2
#define _ADPREVL_PREV2_POSITION                             0x2
#define _ADPREVL_PREV2_SIZE                                 0x1
#define _ADPREVL_PREV2_LENGTH                               0x1
#define _ADPREVL_PREV2_MASK                                 0x4
#define _ADPREVL_PREV3_POSN                                 0x3
#define _ADPREVL_PREV3_POSITION                             0x3
#define _ADPREVL_PREV3_SIZE                                 0x1
#define _ADPREVL_PREV3_LENGTH                               0x1
#define _ADPREVL_PREV3_MASK                                 0x8
#define _ADPREVL_PREV4_POSN                                 0x4
#define _ADPREVL_PREV4_POSITION                             0x4
#define _ADPREVL_PREV4_SIZE                                 0x1
#define _ADPREVL_PREV4_LENGTH                               0x1
#define _ADPREVL_PREV4_MASK                                 0x10
#define _ADPREVL_PREV5_POSN                                 0x5
#define _ADPREVL_PREV5_POSITION                             0x5
#define _ADPREVL_PREV5_SIZE                                 0x1
#define _ADPREVL_PREV5_LENGTH                               0x1
#define _ADPREVL_PREV5_MASK                                 0x20
#define _ADPREVL_PREV6_POSN                                 0x6
#define _ADPREVL_PREV6_POSITION                             0x6
#define _ADPREVL_PREV6_SIZE                                 0x1
#define _ADPREVL_PREV6_LENGTH                               0x1
#define _ADPREVL_PREV6_MASK                                 0x40
#define _ADPREVL_PREV7_POSN                                 0x7
#define _ADPREVL_PREV7_POSITION                             0x7
#define _ADPREVL_PREV7_SIZE                                 0x1
#define _ADPREVL_PREV7_LENGTH                               0x1
#define _ADPREVL_PREV7_MASK                                 0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x09C);
#ifndef _LIB_BUILD
asm("ADPREVH equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV8                  :1;
        unsigned PREV9                  :1;
        unsigned PREV10                 :1;
        unsigned PREV11                 :1;
        unsigned PREV12                 :1;
        unsigned PREV13                 :1;
        unsigned PREV14                 :1;
        unsigned PREV15                 :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x09C);
// bitfield macros
#define _ADPREVH_PREV_POSN                                  0x0
#define _ADPREVH_PREV_POSITION                              0x0
#define _ADPREVH_PREV_SIZE                                  0x8
#define _ADPREVH_PREV_LENGTH                                0x8
#define _ADPREVH_PREV_MASK                                  0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80
#define _ADPREVH_ADPREV_POSN                                0x0
#define _ADPREVH_ADPREV_POSITION                            0x0
#define _ADPREVH_ADPREV_SIZE                                0x8
#define _ADPREVH_ADPREV_LENGTH                              0x8
#define _ADPREVH_ADPREV_MASK                                0xFF
#define _ADPREVH_PREV8_POSN                                 0x0
#define _ADPREVH_PREV8_POSITION                             0x0
#define _ADPREVH_PREV8_SIZE                                 0x1
#define _ADPREVH_PREV8_LENGTH                               0x1
#define _ADPREVH_PREV8_MASK                                 0x1
#define _ADPREVH_PREV9_POSN                                 0x1
#define _ADPREVH_PREV9_POSITION                             0x1
#define _ADPREVH_PREV9_SIZE                                 0x1
#define _ADPREVH_PREV9_LENGTH                               0x1
#define _ADPREVH_PREV9_MASK                                 0x2
#define _ADPREVH_PREV10_POSN                                0x2
#define _ADPREVH_PREV10_POSITION                            0x2
#define _ADPREVH_PREV10_SIZE                                0x1
#define _ADPREVH_PREV10_LENGTH                              0x1
#define _ADPREVH_PREV10_MASK                                0x4
#define _ADPREVH_PREV11_POSN                                0x3
#define _ADPREVH_PREV11_POSITION                            0x3
#define _ADPREVH_PREV11_SIZE                                0x1
#define _ADPREVH_PREV11_LENGTH                              0x1
#define _ADPREVH_PREV11_MASK                                0x8
#define _ADPREVH_PREV12_POSN                                0x4
#define _ADPREVH_PREV12_POSITION                            0x4
#define _ADPREVH_PREV12_SIZE                                0x1
#define _ADPREVH_PREV12_LENGTH                              0x1
#define _ADPREVH_PREV12_MASK                                0x10
#define _ADPREVH_PREV13_POSN                                0x5
#define _ADPREVH_PREV13_POSITION                            0x5
#define _ADPREVH_PREV13_SIZE                                0x1
#define _ADPREVH_PREV13_LENGTH                              0x1
#define _ADPREVH_PREV13_MASK                                0x20
#define _ADPREVH_PREV14_POSN                                0x6
#define _ADPREVH_PREV14_POSITION                            0x6
#define _ADPREVH_PREV14_SIZE                                0x1
#define _ADPREVH_PREV14_LENGTH                              0x1
#define _ADPREVH_PREV14_MASK                                0x40
#define _ADPREVH_PREV15_POSN                                0x7
#define _ADPREVH_PREV15_POSITION                            0x7
#define _ADPREVH_PREV15_SIZE                                0x1
#define _ADPREVH_PREV15_LENGTH                              0x1
#define _ADPREVH_PREV15_MASK                                0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x09D);
#ifndef _LIB_BUILD
asm("ADRES equ 09Dh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x09D);
#ifndef _LIB_BUILD
asm("ADRESL equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RES                    :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x09D);
// bitfield macros
#define _ADRESL_RES_POSN                                    0x0
#define _ADRESL_RES_POSITION                                0x0
#define _ADRESL_RES_SIZE                                    0x8
#define _ADRESL_RES_LENGTH                                  0x8
#define _ADRESL_RES_MASK                                    0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80
#define _ADRESL_ADRES_POSN                                  0x0
#define _ADRESL_ADRES_POSITION                              0x0
#define _ADRESL_ADRES_SIZE                                  0x8
#define _ADRESL_ADRES_LENGTH                                0x8
#define _ADRESL_ADRES_MASK                                  0xFF
#define _ADRESL_RES0_POSN                                   0x0
#define _ADRESL_RES0_POSITION                               0x0
#define _ADRESL_RES0_SIZE                                   0x1
#define _ADRESL_RES0_LENGTH                                 0x1
#define _ADRESL_RES0_MASK                                   0x1
#define _ADRESL_RES1_POSN                                   0x1
#define _ADRESL_RES1_POSITION                               0x1
#define _ADRESL_RES1_SIZE                                   0x1
#define _ADRESL_RES1_LENGTH                                 0x1
#define _ADRESL_RES1_MASK                                   0x2
#define _ADRESL_RES2_POSN                                   0x2
#define _ADRESL_RES2_POSITION                               0x2
#define _ADRESL_RES2_SIZE                                   0x1
#define _ADRESL_RES2_LENGTH                                 0x1
#define _ADRESL_RES2_MASK                                   0x4
#define _ADRESL_RES3_POSN                                   0x3
#define _ADRESL_RES3_POSITION                               0x3
#define _ADRESL_RES3_SIZE                                   0x1
#define _ADRESL_RES3_LENGTH                                 0x1
#define _ADRESL_RES3_MASK                                   0x8
#define _ADRESL_RES4_POSN                                   0x4
#define _ADRESL_RES4_POSITION                               0x4
#define _ADRESL_RES4_SIZE                                   0x1
#define _ADRESL_RES4_LENGTH                                 0x1
#define _ADRESL_RES4_MASK                                   0x10
#define _ADRESL_RES5_POSN                                   0x5
#define _ADRESL_RES5_POSITION                               0x5
#define _ADRESL_RES5_SIZE                                   0x1
#define _ADRESL_RES5_LENGTH                                 0x1
#define _ADRESL_RES5_MASK                                   0x20
#define _ADRESL_RES6_POSN                                   0x6
#define _ADRESL_RES6_POSITION                               0x6
#define _ADRESL_RES6_SIZE                                   0x1
#define _ADRESL_RES6_LENGTH                                 0x1
#define _ADRESL_RES6_MASK                                   0x40
#define _ADRESL_RES7_POSN                                   0x7
#define _ADRESL_RES7_POSITION                               0x7
#define _ADRESL_RES7_SIZE                                   0x1
#define _ADRESL_RES7_LENGTH                                 0x1
#define _ADRESL_RES7_MASK                                   0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x09E);
#ifndef _LIB_BUILD
asm("ADRESH equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
        unsigned RES10                  :1;
        unsigned RES11                  :1;
        unsigned RES12                  :1;
        unsigned RES13                  :1;
        unsigned RES14                  :1;
        unsigned RES15                  :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x09E);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80
#define _ADRESH_ADRES_POSN                                  0x0
#define _ADRESH_ADRES_POSITION                              0x0
#define _ADRESH_ADRES_SIZE                                  0x8
#define _ADRESH_ADRES_LENGTH                                0x8
#define _ADRESH_ADRES_MASK                                  0xFF
#define _ADRESH_RES8_POSN                                   0x0
#define _ADRESH_RES8_POSITION                               0x0
#define _ADRESH_RES8_SIZE                                   0x1
#define _ADRESH_RES8_LENGTH                                 0x1
#define _ADRESH_RES8_MASK                                   0x1
#define _ADRESH_RES9_POSN                                   0x1
#define _ADRESH_RES9_POSITION                               0x1
#define _ADRESH_RES9_SIZE                                   0x1
#define _ADRESH_RES9_LENGTH                                 0x1
#define _ADRESH_RES9_MASK                                   0x2
#define _ADRESH_RES10_POSN                                  0x2
#define _ADRESH_RES10_POSITION                              0x2
#define _ADRESH_RES10_SIZE                                  0x1
#define _ADRESH_RES10_LENGTH                                0x1
#define _ADRESH_RES10_MASK                                  0x4
#define _ADRESH_RES11_POSN                                  0x3
#define _ADRESH_RES11_POSITION                              0x3
#define _ADRESH_RES11_SIZE                                  0x1
#define _ADRESH_RES11_LENGTH                                0x1
#define _ADRESH_RES11_MASK                                  0x8
#define _ADRESH_RES12_POSN                                  0x4
#define _ADRESH_RES12_POSITION                              0x4
#define _ADRESH_RES12_SIZE                                  0x1
#define _ADRESH_RES12_LENGTH                                0x1
#define _ADRESH_RES12_MASK                                  0x10
#define _ADRESH_RES13_POSN                                  0x5
#define _ADRESH_RES13_POSITION                              0x5
#define _ADRESH_RES13_SIZE                                  0x1
#define _ADRESH_RES13_LENGTH                                0x1
#define _ADRESH_RES13_MASK                                  0x20
#define _ADRESH_RES14_POSN                                  0x6
#define _ADRESH_RES14_POSITION                              0x6
#define _ADRESH_RES14_SIZE                                  0x1
#define _ADRESH_RES14_LENGTH                                0x1
#define _ADRESH_RES14_MASK                                  0x40
#define _ADRESH_RES15_POSN                                  0x7
#define _ADRESH_RES15_POSITION                              0x7
#define _ADRESH_RES15_SIZE                                  0x1
#define _ADRESH_RES15_LENGTH                                0x1
#define _ADRESH_RES15_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x09F);
#ifndef _LIB_BUILD
asm("ADPCH equ 09Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPCH                  :6;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x09F);
// bitfield macros
#define _ADPCH_ADPCH_POSN                                   0x0
#define _ADPCH_ADPCH_POSITION                               0x0
#define _ADPCH_ADPCH_SIZE                                   0x6
#define _ADPCH_ADPCH_LENGTH                                 0x6
#define _ADPCH_ADPCH_MASK                                   0x3F
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned short          ADACQ               __at(0x10C);
#ifndef _LIB_BUILD
asm("ADACQ equ 010Ch");
#endif

// Register: ADACQL
#define ADACQL ADACQL
extern volatile unsigned char           ADACQL              __at(0x10C);
#ifndef _LIB_BUILD
asm("ADACQL equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ACQ0                   :1;
        unsigned ACQ1                   :1;
        unsigned ACQ2                   :1;
        unsigned ACQ3                   :1;
        unsigned ACQ4                   :1;
        unsigned ACQ5                   :1;
        unsigned ACQ6                   :1;
        unsigned ACQ7                   :1;
    };
} ADACQLbits_t;
extern volatile ADACQLbits_t ADACQLbits __at(0x10C);
// bitfield macros
#define _ADACQL_ACQ_POSN                                    0x0
#define _ADACQL_ACQ_POSITION                                0x0
#define _ADACQL_ACQ_SIZE                                    0x8
#define _ADACQL_ACQ_LENGTH                                  0x8
#define _ADACQL_ACQ_MASK                                    0xFF
#define _ADACQL_ADACQ0_POSN                                 0x0
#define _ADACQL_ADACQ0_POSITION                             0x0
#define _ADACQL_ADACQ0_SIZE                                 0x1
#define _ADACQL_ADACQ0_LENGTH                               0x1
#define _ADACQL_ADACQ0_MASK                                 0x1
#define _ADACQL_ADACQ1_POSN                                 0x1
#define _ADACQL_ADACQ1_POSITION                             0x1
#define _ADACQL_ADACQ1_SIZE                                 0x1
#define _ADACQL_ADACQ1_LENGTH                               0x1
#define _ADACQL_ADACQ1_MASK                                 0x2
#define _ADACQL_ADACQ2_POSN                                 0x2
#define _ADACQL_ADACQ2_POSITION                             0x2
#define _ADACQL_ADACQ2_SIZE                                 0x1
#define _ADACQL_ADACQ2_LENGTH                               0x1
#define _ADACQL_ADACQ2_MASK                                 0x4
#define _ADACQL_ADACQ3_POSN                                 0x3
#define _ADACQL_ADACQ3_POSITION                             0x3
#define _ADACQL_ADACQ3_SIZE                                 0x1
#define _ADACQL_ADACQ3_LENGTH                               0x1
#define _ADACQL_ADACQ3_MASK                                 0x8
#define _ADACQL_ADACQ4_POSN                                 0x4
#define _ADACQL_ADACQ4_POSITION                             0x4
#define _ADACQL_ADACQ4_SIZE                                 0x1
#define _ADACQL_ADACQ4_LENGTH                               0x1
#define _ADACQL_ADACQ4_MASK                                 0x10
#define _ADACQL_ADACQ5_POSN                                 0x5
#define _ADACQL_ADACQ5_POSITION                             0x5
#define _ADACQL_ADACQ5_SIZE                                 0x1
#define _ADACQL_ADACQ5_LENGTH                               0x1
#define _ADACQL_ADACQ5_MASK                                 0x20
#define _ADACQL_ADACQ6_POSN                                 0x6
#define _ADACQL_ADACQ6_POSITION                             0x6
#define _ADACQL_ADACQ6_SIZE                                 0x1
#define _ADACQL_ADACQ6_LENGTH                               0x1
#define _ADACQL_ADACQ6_MASK                                 0x40
#define _ADACQL_ADACQ7_POSN                                 0x7
#define _ADACQL_ADACQ7_POSITION                             0x7
#define _ADACQL_ADACQ7_SIZE                                 0x1
#define _ADACQL_ADACQ7_LENGTH                               0x1
#define _ADACQL_ADACQ7_MASK                                 0x80
#define _ADACQL_ADACQ_POSN                                  0x0
#define _ADACQL_ADACQ_POSITION                              0x0
#define _ADACQL_ADACQ_SIZE                                  0x8
#define _ADACQL_ADACQ_LENGTH                                0x8
#define _ADACQL_ADACQ_MASK                                  0xFF
#define _ADACQL_ACQ0_POSN                                   0x0
#define _ADACQL_ACQ0_POSITION                               0x0
#define _ADACQL_ACQ0_SIZE                                   0x1
#define _ADACQL_ACQ0_LENGTH                                 0x1
#define _ADACQL_ACQ0_MASK                                   0x1
#define _ADACQL_ACQ1_POSN                                   0x1
#define _ADACQL_ACQ1_POSITION                               0x1
#define _ADACQL_ACQ1_SIZE                                   0x1
#define _ADACQL_ACQ1_LENGTH                                 0x1
#define _ADACQL_ACQ1_MASK                                   0x2
#define _ADACQL_ACQ2_POSN                                   0x2
#define _ADACQL_ACQ2_POSITION                               0x2
#define _ADACQL_ACQ2_SIZE                                   0x1
#define _ADACQL_ACQ2_LENGTH                                 0x1
#define _ADACQL_ACQ2_MASK                                   0x4
#define _ADACQL_ACQ3_POSN                                   0x3
#define _ADACQL_ACQ3_POSITION                               0x3
#define _ADACQL_ACQ3_SIZE                                   0x1
#define _ADACQL_ACQ3_LENGTH                                 0x1
#define _ADACQL_ACQ3_MASK                                   0x8
#define _ADACQL_ACQ4_POSN                                   0x4
#define _ADACQL_ACQ4_POSITION                               0x4
#define _ADACQL_ACQ4_SIZE                                   0x1
#define _ADACQL_ACQ4_LENGTH                                 0x1
#define _ADACQL_ACQ4_MASK                                   0x10
#define _ADACQL_ACQ5_POSN                                   0x5
#define _ADACQL_ACQ5_POSITION                               0x5
#define _ADACQL_ACQ5_SIZE                                   0x1
#define _ADACQL_ACQ5_LENGTH                                 0x1
#define _ADACQL_ACQ5_MASK                                   0x20
#define _ADACQL_ACQ6_POSN                                   0x6
#define _ADACQL_ACQ6_POSITION                               0x6
#define _ADACQL_ACQ6_SIZE                                   0x1
#define _ADACQL_ACQ6_LENGTH                                 0x1
#define _ADACQL_ACQ6_MASK                                   0x40
#define _ADACQL_ACQ7_POSN                                   0x7
#define _ADACQL_ACQ7_POSITION                               0x7
#define _ADACQL_ACQ7_SIZE                                   0x1
#define _ADACQL_ACQ7_LENGTH                                 0x1
#define _ADACQL_ACQ7_MASK                                   0x80

// Register: ADACQH
#define ADACQH ADACQH
extern volatile unsigned char           ADACQH              __at(0x10D);
#ifndef _LIB_BUILD
asm("ADACQH equ 010Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :5;
    };
    struct {
        unsigned ADACQ8                 :1;
        unsigned ADACQ9                 :1;
        unsigned ADACQ10                :1;
        unsigned ADACQ11                :1;
        unsigned ADACQ12                :1;
    };
    struct {
        unsigned ADACQ                  :5;
    };
    struct {
        unsigned ACQ8                   :1;
        unsigned ACQ9                   :1;
        unsigned ACQ10                  :1;
        unsigned ACQ11                  :1;
        unsigned ACQ12                  :1;
    };
} ADACQHbits_t;
extern volatile ADACQHbits_t ADACQHbits __at(0x10D);
// bitfield macros
#define _ADACQH_ACQ_POSN                                    0x0
#define _ADACQH_ACQ_POSITION                                0x0
#define _ADACQH_ACQ_SIZE                                    0x5
#define _ADACQH_ACQ_LENGTH                                  0x5
#define _ADACQH_ACQ_MASK                                    0x1F
#define _ADACQH_ADACQ8_POSN                                 0x0
#define _ADACQH_ADACQ8_POSITION                             0x0
#define _ADACQH_ADACQ8_SIZE                                 0x1
#define _ADACQH_ADACQ8_LENGTH                               0x1
#define _ADACQH_ADACQ8_MASK                                 0x1
#define _ADACQH_ADACQ9_POSN                                 0x1
#define _ADACQH_ADACQ9_POSITION                             0x1
#define _ADACQH_ADACQ9_SIZE                                 0x1
#define _ADACQH_ADACQ9_LENGTH                               0x1
#define _ADACQH_ADACQ9_MASK                                 0x2
#define _ADACQH_ADACQ10_POSN                                0x2
#define _ADACQH_ADACQ10_POSITION                            0x2
#define _ADACQH_ADACQ10_SIZE                                0x1
#define _ADACQH_ADACQ10_LENGTH                              0x1
#define _ADACQH_ADACQ10_MASK                                0x4
#define _ADACQH_ADACQ11_POSN                                0x3
#define _ADACQH_ADACQ11_POSITION                            0x3
#define _ADACQH_ADACQ11_SIZE                                0x1
#define _ADACQH_ADACQ11_LENGTH                              0x1
#define _ADACQH_ADACQ11_MASK                                0x8
#define _ADACQH_ADACQ12_POSN                                0x4
#define _ADACQH_ADACQ12_POSITION                            0x4
#define _ADACQH_ADACQ12_SIZE                                0x1
#define _ADACQH_ADACQ12_LENGTH                              0x1
#define _ADACQH_ADACQ12_MASK                                0x10
#define _ADACQH_ADACQ_POSN                                  0x0
#define _ADACQH_ADACQ_POSITION                              0x0
#define _ADACQH_ADACQ_SIZE                                  0x5
#define _ADACQH_ADACQ_LENGTH                                0x5
#define _ADACQH_ADACQ_MASK                                  0x1F
#define _ADACQH_ACQ8_POSN                                   0x0
#define _ADACQH_ACQ8_POSITION                               0x0
#define _ADACQH_ACQ8_SIZE                                   0x1
#define _ADACQH_ACQ8_LENGTH                                 0x1
#define _ADACQH_ACQ8_MASK                                   0x1
#define _ADACQH_ACQ9_POSN                                   0x1
#define _ADACQH_ACQ9_POSITION                               0x1
#define _ADACQH_ACQ9_SIZE                                   0x1
#define _ADACQH_ACQ9_LENGTH                                 0x1
#define _ADACQH_ACQ9_MASK                                   0x2
#define _ADACQH_ACQ10_POSN                                  0x2
#define _ADACQH_ACQ10_POSITION                              0x2
#define _ADACQH_ACQ10_SIZE                                  0x1
#define _ADACQH_ACQ10_LENGTH                                0x1
#define _ADACQH_ACQ10_MASK                                  0x4
#define _ADACQH_ACQ11_POSN                                  0x3
#define _ADACQH_ACQ11_POSITION                              0x3
#define _ADACQH_ACQ11_SIZE                                  0x1
#define _ADACQH_ACQ11_LENGTH                                0x1
#define _ADACQH_ACQ11_MASK                                  0x8
#define _ADACQH_ACQ12_POSN                                  0x4
#define _ADACQH_ACQ12_POSITION                              0x4
#define _ADACQH_ACQ12_SIZE                                  0x1
#define _ADACQH_ACQ12_LENGTH                                0x1
#define _ADACQH_ACQ12_MASK                                  0x10

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x10E);
#ifndef _LIB_BUILD
asm("ADCAP equ 010Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCAP                  :5;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x10E);
// bitfield macros
#define _ADCAP_ADCAP_POSN                                   0x0
#define _ADCAP_ADCAP_POSITION                               0x0
#define _ADCAP_ADCAP_SIZE                                   0x5
#define _ADCAP_ADCAP_LENGTH                                 0x5
#define _ADCAP_ADCAP_MASK                                   0x1F
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned short          ADPRE               __at(0x10F);
#ifndef _LIB_BUILD
asm("ADPRE equ 010Fh");
#endif

// Register: ADPREL
#define ADPREL ADPREL
extern volatile unsigned char           ADPREL              __at(0x10F);
#ifndef _LIB_BUILD
asm("ADPREL equ 010Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :8;
    };
    struct {
        unsigned PRE0                   :1;
        unsigned PRE1                   :1;
        unsigned PRE2                   :1;
        unsigned PRE3                   :1;
        unsigned PRE4                   :1;
        unsigned PRE5                   :1;
        unsigned PRE6                   :1;
        unsigned PRE7                   :1;
    };
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPRELbits_t;
extern volatile ADPRELbits_t ADPRELbits __at(0x10F);
// bitfield macros
#define _ADPREL_PRE_POSN                                    0x0
#define _ADPREL_PRE_POSITION                                0x0
#define _ADPREL_PRE_SIZE                                    0x8
#define _ADPREL_PRE_LENGTH                                  0x8
#define _ADPREL_PRE_MASK                                    0xFF
#define _ADPREL_PRE0_POSN                                   0x0
#define _ADPREL_PRE0_POSITION                               0x0
#define _ADPREL_PRE0_SIZE                                   0x1
#define _ADPREL_PRE0_LENGTH                                 0x1
#define _ADPREL_PRE0_MASK                                   0x1
#define _ADPREL_PRE1_POSN                                   0x1
#define _ADPREL_PRE1_POSITION                               0x1
#define _ADPREL_PRE1_SIZE                                   0x1
#define _ADPREL_PRE1_LENGTH                                 0x1
#define _ADPREL_PRE1_MASK                                   0x2
#define _ADPREL_PRE2_POSN                                   0x2
#define _ADPREL_PRE2_POSITION                               0x2
#define _ADPREL_PRE2_SIZE                                   0x1
#define _ADPREL_PRE2_LENGTH                                 0x1
#define _ADPREL_PRE2_MASK                                   0x4
#define _ADPREL_PRE3_POSN                                   0x3
#define _ADPREL_PRE3_POSITION                               0x3
#define _ADPREL_PRE3_SIZE                                   0x1
#define _ADPREL_PRE3_LENGTH                                 0x1
#define _ADPREL_PRE3_MASK                                   0x8
#define _ADPREL_PRE4_POSN                                   0x4
#define _ADPREL_PRE4_POSITION                               0x4
#define _ADPREL_PRE4_SIZE                                   0x1
#define _ADPREL_PRE4_LENGTH                                 0x1
#define _ADPREL_PRE4_MASK                                   0x10
#define _ADPREL_PRE5_POSN                                   0x5
#define _ADPREL_PRE5_POSITION                               0x5
#define _ADPREL_PRE5_SIZE                                   0x1
#define _ADPREL_PRE5_LENGTH                                 0x1
#define _ADPREL_PRE5_MASK                                   0x20
#define _ADPREL_PRE6_POSN                                   0x6
#define _ADPREL_PRE6_POSITION                               0x6
#define _ADPREL_PRE6_SIZE                                   0x1
#define _ADPREL_PRE6_LENGTH                                 0x1
#define _ADPREL_PRE6_MASK                                   0x40
#define _ADPREL_PRE7_POSN                                   0x7
#define _ADPREL_PRE7_POSITION                               0x7
#define _ADPREL_PRE7_SIZE                                   0x1
#define _ADPREL_PRE7_LENGTH                                 0x1
#define _ADPREL_PRE7_MASK                                   0x80
#define _ADPREL_ADPRE_POSN                                  0x0
#define _ADPREL_ADPRE_POSITION                              0x0
#define _ADPREL_ADPRE_SIZE                                  0x8
#define _ADPREL_ADPRE_LENGTH                                0x8
#define _ADPREL_ADPRE_MASK                                  0xFF
#define _ADPREL_ADPRE0_POSN                                 0x0
#define _ADPREL_ADPRE0_POSITION                             0x0
#define _ADPREL_ADPRE0_SIZE                                 0x1
#define _ADPREL_ADPRE0_LENGTH                               0x1
#define _ADPREL_ADPRE0_MASK                                 0x1
#define _ADPREL_ADPRE1_POSN                                 0x1
#define _ADPREL_ADPRE1_POSITION                             0x1
#define _ADPREL_ADPRE1_SIZE                                 0x1
#define _ADPREL_ADPRE1_LENGTH                               0x1
#define _ADPREL_ADPRE1_MASK                                 0x2
#define _ADPREL_ADPRE2_POSN                                 0x2
#define _ADPREL_ADPRE2_POSITION                             0x2
#define _ADPREL_ADPRE2_SIZE                                 0x1
#define _ADPREL_ADPRE2_LENGTH                               0x1
#define _ADPREL_ADPRE2_MASK                                 0x4
#define _ADPREL_ADPRE3_POSN                                 0x3
#define _ADPREL_ADPRE3_POSITION                             0x3
#define _ADPREL_ADPRE3_SIZE                                 0x1
#define _ADPREL_ADPRE3_LENGTH                               0x1
#define _ADPREL_ADPRE3_MASK                                 0x8
#define _ADPREL_ADPRE4_POSN                                 0x4
#define _ADPREL_ADPRE4_POSITION                             0x4
#define _ADPREL_ADPRE4_SIZE                                 0x1
#define _ADPREL_ADPRE4_LENGTH                               0x1
#define _ADPREL_ADPRE4_MASK                                 0x10
#define _ADPREL_ADPRE5_POSN                                 0x5
#define _ADPREL_ADPRE5_POSITION                             0x5
#define _ADPREL_ADPRE5_SIZE                                 0x1
#define _ADPREL_ADPRE5_LENGTH                               0x1
#define _ADPREL_ADPRE5_MASK                                 0x20
#define _ADPREL_ADPRE6_POSN                                 0x6
#define _ADPREL_ADPRE6_POSITION                             0x6
#define _ADPREL_ADPRE6_SIZE                                 0x1
#define _ADPREL_ADPRE6_LENGTH                               0x1
#define _ADPREL_ADPRE6_MASK                                 0x40
#define _ADPREL_ADPRE7_POSN                                 0x7
#define _ADPREL_ADPRE7_POSITION                             0x7
#define _ADPREL_ADPRE7_SIZE                                 0x1
#define _ADPREL_ADPRE7_LENGTH                               0x1
#define _ADPREL_ADPRE7_MASK                                 0x80

// Register: ADPREH
#define ADPREH ADPREH
extern volatile unsigned char           ADPREH              __at(0x110);
#ifndef _LIB_BUILD
asm("ADPREH equ 0110h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :5;
    };
    struct {
        unsigned PRE8                   :1;
        unsigned PRE9                   :1;
        unsigned PRE10                  :1;
        unsigned PRE11                  :1;
        unsigned PRE12                  :1;
    };
    struct {
        unsigned ADPRE                  :5;
    };
    struct {
        unsigned ADPRE8                 :1;
        unsigned ADPRE9                 :1;
        unsigned ADPRE10                :1;
        unsigned ADPRE11                :1;
        unsigned ADPRE12                :1;
    };
} ADPREHbits_t;
extern volatile ADPREHbits_t ADPREHbits __at(0x110);
// bitfield macros
#define _ADPREH_PRE_POSN                                    0x0
#define _ADPREH_PRE_POSITION                                0x0
#define _ADPREH_PRE_SIZE                                    0x5
#define _ADPREH_PRE_LENGTH                                  0x5
#define _ADPREH_PRE_MASK                                    0x1F
#define _ADPREH_PRE8_POSN                                   0x0
#define _ADPREH_PRE8_POSITION                               0x0
#define _ADPREH_PRE8_SIZE                                   0x1
#define _ADPREH_PRE8_LENGTH                                 0x1
#define _ADPREH_PRE8_MASK                                   0x1
#define _ADPREH_PRE9_POSN                                   0x1
#define _ADPREH_PRE9_POSITION                               0x1
#define _ADPREH_PRE9_SIZE                                   0x1
#define _ADPREH_PRE9_LENGTH                                 0x1
#define _ADPREH_PRE9_MASK                                   0x2
#define _ADPREH_PRE10_POSN                                  0x2
#define _ADPREH_PRE10_POSITION                              0x2
#define _ADPREH_PRE10_SIZE                                  0x1
#define _ADPREH_PRE10_LENGTH                                0x1
#define _ADPREH_PRE10_MASK                                  0x4
#define _ADPREH_PRE11_POSN                                  0x3
#define _ADPREH_PRE11_POSITION                              0x3
#define _ADPREH_PRE11_SIZE                                  0x1
#define _ADPREH_PRE11_LENGTH                                0x1
#define _ADPREH_PRE11_MASK                                  0x8
#define _ADPREH_PRE12_POSN                                  0x4
#define _ADPREH_PRE12_POSITION                              0x4
#define _ADPREH_PRE12_SIZE                                  0x1
#define _ADPREH_PRE12_LENGTH                                0x1
#define _ADPREH_PRE12_MASK                                  0x10
#define _ADPREH_ADPRE_POSN                                  0x0
#define _ADPREH_ADPRE_POSITION                              0x0
#define _ADPREH_ADPRE_SIZE                                  0x5
#define _ADPREH_ADPRE_LENGTH                                0x5
#define _ADPREH_ADPRE_MASK                                  0x1F
#define _ADPREH_ADPRE8_POSN                                 0x0
#define _ADPREH_ADPRE8_POSITION                             0x0
#define _ADPREH_ADPRE8_SIZE                                 0x1
#define _ADPREH_ADPRE8_LENGTH                               0x1
#define _ADPREH_ADPRE8_MASK                                 0x1
#define _ADPREH_ADPRE9_POSN                                 0x1
#define _ADPREH_ADPRE9_POSITION                             0x1
#define _ADPREH_ADPRE9_SIZE                                 0x1
#define _ADPREH_ADPRE9_LENGTH                               0x1
#define _ADPREH_ADPRE9_MASK                                 0x2
#define _ADPREH_ADPRE10_POSN                                0x2
#define _ADPREH_ADPRE10_POSITION                            0x2
#define _ADPREH_ADPRE10_SIZE                                0x1
#define _ADPREH_ADPRE10_LENGTH                              0x1
#define _ADPREH_ADPRE10_MASK                                0x4
#define _ADPREH_ADPRE11_POSN                                0x3
#define _ADPREH_ADPRE11_POSITION                            0x3
#define _ADPREH_ADPRE11_SIZE                                0x1
#define _ADPREH_ADPRE11_LENGTH                              0x1
#define _ADPREH_ADPRE11_MASK                                0x8
#define _ADPREH_ADPRE12_POSN                                0x4
#define _ADPREH_ADPRE12_POSITION                            0x4
#define _ADPREH_ADPRE12_SIZE                                0x1
#define _ADPREH_ADPRE12_LENGTH                              0x1
#define _ADPREH_ADPRE12_MASK                                0x10

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x111);
#ifndef _LIB_BUILD
asm("ADCON0 equ 0111h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned FM                     :1;
        unsigned                        :1;
        unsigned CS                     :1;
        unsigned                        :1;
        unsigned CONT                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :1;
        unsigned                        :1;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
    };
    struct {
        unsigned GO_nDONE               :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x111);
// bitfield macros
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_FM_POSN                                     0x2
#define _ADCON0_FM_POSITION                                 0x2
#define _ADCON0_FM_SIZE                                     0x1
#define _ADCON0_FM_LENGTH                                   0x1
#define _ADCON0_FM_MASK                                     0x4
#define _ADCON0_CS_POSN                                     0x4
#define _ADCON0_CS_POSITION                                 0x4
#define _ADCON0_CS_SIZE                                     0x1
#define _ADCON0_CS_LENGTH                                   0x1
#define _ADCON0_CS_MASK                                     0x10
#define _ADCON0_CONT_POSN                                   0x6
#define _ADCON0_CONT_POSITION                               0x6
#define _ADCON0_CONT_SIZE                                   0x1
#define _ADCON0_CONT_LENGTH                                 0x1
#define _ADCON0_CONT_MASK                                   0x40
#define _ADCON0_ON_POSN                                     0x7
#define _ADCON0_ON_POSITION                                 0x7
#define _ADCON0_ON_SIZE                                     0x1
#define _ADCON0_ON_LENGTH                                   0x1
#define _ADCON0_ON_MASK                                     0x80
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x1
#define _ADCON0_ADFM_LENGTH                                 0x1
#define _ADCON0_ADFM_MASK                                   0x4
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x112);
#ifndef _LIB_BUILD
asm("ADCON1 equ 0112h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSEN                   :1;
        unsigned                        :4;
        unsigned GPOL                   :1;
        unsigned IPEN                   :1;
        unsigned PPOL                   :1;
    };
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x112);
// bitfield macros
#define _ADCON1_DSEN_POSN                                   0x0
#define _ADCON1_DSEN_POSITION                               0x0
#define _ADCON1_DSEN_SIZE                                   0x1
#define _ADCON1_DSEN_LENGTH                                 0x1
#define _ADCON1_DSEN_MASK                                   0x1
#define _ADCON1_GPOL_POSN                                   0x5
#define _ADCON1_GPOL_POSITION                               0x5
#define _ADCON1_GPOL_SIZE                                   0x1
#define _ADCON1_GPOL_LENGTH                                 0x1
#define _ADCON1_GPOL_MASK                                   0x20
#define _ADCON1_IPEN_POSN                                   0x6
#define _ADCON1_IPEN_POSITION                               0x6
#define _ADCON1_IPEN_SIZE                                   0x1
#define _ADCON1_IPEN_LENGTH                                 0x1
#define _ADCON1_IPEN_MASK                                   0x40
#define _ADCON1_PPOL_POSN                                   0x7
#define _ADCON1_PPOL_POSITION                               0x7
#define _ADCON1_PPOL_SIZE                                   0x1
#define _ADCON1_PPOL_LENGTH                                 0x1
#define _ADCON1_PPOL_MASK                                   0x80
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x113);
#ifndef _LIB_BUILD
asm("ADCON2 equ 0113h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned ACLR                   :1;
        unsigned CRS                    :3;
        unsigned PSIS                   :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned ADACLR                 :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD                   :3;
        unsigned                        :1;
        unsigned ADCRS                  :3;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :1;
        unsigned CRS0                   :1;
        unsigned CRS1                   :1;
        unsigned CRS2                   :1;
    };
    struct {
        unsigned MD                     :3;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x113);
// bitfield macros
#define _ADCON2_MODE_POSN                                   0x0
#define _ADCON2_MODE_POSITION                               0x0
#define _ADCON2_MODE_SIZE                                   0x3
#define _ADCON2_MODE_LENGTH                                 0x3
#define _ADCON2_MODE_MASK                                   0x7
#define _ADCON2_ACLR_POSN                                   0x3
#define _ADCON2_ACLR_POSITION                               0x3
#define _ADCON2_ACLR_SIZE                                   0x1
#define _ADCON2_ACLR_LENGTH                                 0x1
#define _ADCON2_ACLR_MASK                                   0x8
#define _ADCON2_CRS_POSN                                    0x4
#define _ADCON2_CRS_POSITION                                0x4
#define _ADCON2_CRS_SIZE                                    0x3
#define _ADCON2_CRS_LENGTH                                  0x3
#define _ADCON2_CRS_MASK                                    0x70
#define _ADCON2_PSIS_POSN                                   0x7
#define _ADCON2_PSIS_POSITION                               0x7
#define _ADCON2_PSIS_SIZE                                   0x1
#define _ADCON2_PSIS_LENGTH                                 0x1
#define _ADCON2_PSIS_MASK                                   0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_MODE0_POSN                                  0x0
#define _ADCON2_MODE0_POSITION                              0x0
#define _ADCON2_MODE0_SIZE                                  0x1
#define _ADCON2_MODE0_LENGTH                                0x1
#define _ADCON2_MODE0_MASK                                  0x1
#define _ADCON2_MODE1_POSN                                  0x1
#define _ADCON2_MODE1_POSITION                              0x1
#define _ADCON2_MODE1_SIZE                                  0x1
#define _ADCON2_MODE1_LENGTH                                0x1
#define _ADCON2_MODE1_MASK                                  0x2
#define _ADCON2_MODE2_POSN                                  0x2
#define _ADCON2_MODE2_POSITION                              0x2
#define _ADCON2_MODE2_SIZE                                  0x1
#define _ADCON2_MODE2_LENGTH                                0x1
#define _ADCON2_MODE2_MASK                                  0x4
#define _ADCON2_CRS0_POSN                                   0x4
#define _ADCON2_CRS0_POSITION                               0x4
#define _ADCON2_CRS0_SIZE                                   0x1
#define _ADCON2_CRS0_LENGTH                                 0x1
#define _ADCON2_CRS0_MASK                                   0x10
#define _ADCON2_CRS1_POSN                                   0x5
#define _ADCON2_CRS1_POSITION                               0x5
#define _ADCON2_CRS1_SIZE                                   0x1
#define _ADCON2_CRS1_LENGTH                                 0x1
#define _ADCON2_CRS1_MASK                                   0x20
#define _ADCON2_CRS2_POSN                                   0x6
#define _ADCON2_CRS2_POSITION                               0x6
#define _ADCON2_CRS2_SIZE                                   0x1
#define _ADCON2_CRS2_LENGTH                                 0x1
#define _ADCON2_CRS2_MASK                                   0x40
#define _ADCON2_MD_POSN                                     0x0
#define _ADCON2_MD_POSITION                                 0x0
#define _ADCON2_MD_SIZE                                     0x3
#define _ADCON2_MD_LENGTH                                   0x3
#define _ADCON2_MD_MASK                                     0x7
#define _ADCON2_MD0_POSN                                    0x0
#define _ADCON2_MD0_POSITION                                0x0
#define _ADCON2_MD0_SIZE                                    0x1
#define _ADCON2_MD0_LENGTH                                  0x1
#define _ADCON2_MD0_MASK                                    0x1
#define _ADCON2_MD1_POSN                                    0x1
#define _ADCON2_MD1_POSITION                                0x1
#define _ADCON2_MD1_SIZE                                    0x1
#define _ADCON2_MD1_LENGTH                                  0x1
#define _ADCON2_MD1_MASK                                    0x2
#define _ADCON2_MD2_POSN                                    0x2
#define _ADCON2_MD2_POSITION                                0x2
#define _ADCON2_MD2_SIZE                                    0x1
#define _ADCON2_MD2_LENGTH                                  0x1
#define _ADCON2_MD2_MASK                                    0x4

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x114);
#ifndef _LIB_BUILD
asm("ADCON3 equ 0114h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMD                    :3;
        unsigned SOI                    :1;
        unsigned CALC                   :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned ADSOI                  :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned                        :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned TMD0                   :1;
        unsigned TMD1                   :1;
        unsigned TMD2                   :1;
        unsigned                        :1;
        unsigned CALC0                  :1;
        unsigned CALC1                  :1;
        unsigned CALC2                  :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x114);
// bitfield macros
#define _ADCON3_TMD_POSN                                    0x0
#define _ADCON3_TMD_POSITION                                0x0
#define _ADCON3_TMD_SIZE                                    0x3
#define _ADCON3_TMD_LENGTH                                  0x3
#define _ADCON3_TMD_MASK                                    0x7
#define _ADCON3_SOI_POSN                                    0x3
#define _ADCON3_SOI_POSITION                                0x3
#define _ADCON3_SOI_SIZE                                    0x1
#define _ADCON3_SOI_LENGTH                                  0x1
#define _ADCON3_SOI_MASK                                    0x8
#define _ADCON3_CALC_POSN                                   0x4
#define _ADCON3_CALC_POSITION                               0x4
#define _ADCON3_CALC_SIZE                                   0x3
#define _ADCON3_CALC_LENGTH                                 0x3
#define _ADCON3_CALC_MASK                                   0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_TMD0_POSN                                   0x0
#define _ADCON3_TMD0_POSITION                               0x0
#define _ADCON3_TMD0_SIZE                                   0x1
#define _ADCON3_TMD0_LENGTH                                 0x1
#define _ADCON3_TMD0_MASK                                   0x1
#define _ADCON3_TMD1_POSN                                   0x1
#define _ADCON3_TMD1_POSITION                               0x1
#define _ADCON3_TMD1_SIZE                                   0x1
#define _ADCON3_TMD1_LENGTH                                 0x1
#define _ADCON3_TMD1_MASK                                   0x2
#define _ADCON3_TMD2_POSN                                   0x2
#define _ADCON3_TMD2_POSITION                               0x2
#define _ADCON3_TMD2_SIZE                                   0x1
#define _ADCON3_TMD2_LENGTH                                 0x1
#define _ADCON3_TMD2_MASK                                   0x4
#define _ADCON3_CALC0_POSN                                  0x4
#define _ADCON3_CALC0_POSITION                              0x4
#define _ADCON3_CALC0_SIZE                                  0x1
#define _ADCON3_CALC0_LENGTH                                0x1
#define _ADCON3_CALC0_MASK                                  0x10
#define _ADCON3_CALC1_POSN                                  0x5
#define _ADCON3_CALC1_POSITION                              0x5
#define _ADCON3_CALC1_SIZE                                  0x1
#define _ADCON3_CALC1_LENGTH                                0x1
#define _ADCON3_CALC1_MASK                                  0x20
#define _ADCON3_CALC2_POSN                                  0x6
#define _ADCON3_CALC2_POSITION                              0x6
#define _ADCON3_CALC2_SIZE                                  0x1
#define _ADCON3_CALC2_LENGTH                                0x1
#define _ADCON3_CALC2_MASK                                  0x40

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x115);
#ifndef _LIB_BUILD
asm("ADSTAT equ 0115h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STAT                   :3;
        unsigned                        :1;
        unsigned MATH                   :1;
        unsigned LTHR                   :1;
        unsigned UTHR                   :1;
        unsigned OV                     :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT                 :3;
    };
    struct {
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
        unsigned STAT2                  :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x115);
// bitfield macros
#define _ADSTAT_STAT_POSN                                   0x0
#define _ADSTAT_STAT_POSITION                               0x0
#define _ADSTAT_STAT_SIZE                                   0x3
#define _ADSTAT_STAT_LENGTH                                 0x3
#define _ADSTAT_STAT_MASK                                   0x7
#define _ADSTAT_MATH_POSN                                   0x4
#define _ADSTAT_MATH_POSITION                               0x4
#define _ADSTAT_MATH_SIZE                                   0x1
#define _ADSTAT_MATH_LENGTH                                 0x1
#define _ADSTAT_MATH_MASK                                   0x10
#define _ADSTAT_LTHR_POSN                                   0x5
#define _ADSTAT_LTHR_POSITION                               0x5
#define _ADSTAT_LTHR_SIZE                                   0x1
#define _ADSTAT_LTHR_LENGTH                                 0x1
#define _ADSTAT_LTHR_MASK                                   0x20
#define _ADSTAT_UTHR_POSN                                   0x6
#define _ADSTAT_UTHR_POSITION                               0x6
#define _ADSTAT_UTHR_SIZE                                   0x1
#define _ADSTAT_UTHR_LENGTH                                 0x1
#define _ADSTAT_UTHR_MASK                                   0x40
#define _ADSTAT_OV_POSN                                     0x7
#define _ADSTAT_OV_POSITION                                 0x7
#define _ADSTAT_OV_SIZE                                     0x1
#define _ADSTAT_OV_LENGTH                                   0x1
#define _ADSTAT_OV_MASK                                     0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_STAT0_POSN                                  0x0
#define _ADSTAT_STAT0_POSITION                              0x0
#define _ADSTAT_STAT0_SIZE                                  0x1
#define _ADSTAT_STAT0_LENGTH                                0x1
#define _ADSTAT_STAT0_MASK                                  0x1
#define _ADSTAT_STAT1_POSN                                  0x1
#define _ADSTAT_STAT1_POSITION                              0x1
#define _ADSTAT_STAT1_SIZE                                  0x1
#define _ADSTAT_STAT1_LENGTH                                0x1
#define _ADSTAT_STAT1_MASK                                  0x2
#define _ADSTAT_STAT2_POSN                                  0x2
#define _ADSTAT_STAT2_POSITION                              0x2
#define _ADSTAT_STAT2_SIZE                                  0x1
#define _ADSTAT_STAT2_LENGTH                                0x1
#define _ADSTAT_STAT2_MASK                                  0x4

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x116);
#ifndef _LIB_BUILD
asm("ADREF equ 0116h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREF                   :2;
    };
    struct {
        unsigned ADPREF                 :2;
    };
    struct {
        unsigned PREF0                  :1;
        unsigned PREF1                  :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x116);
// bitfield macros
#define _ADREF_PREF_POSN                                    0x0
#define _ADREF_PREF_POSITION                                0x0
#define _ADREF_PREF_SIZE                                    0x2
#define _ADREF_PREF_LENGTH                                  0x2
#define _ADREF_PREF_MASK                                    0x3
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x2
#define _ADREF_ADPREF_LENGTH                                0x2
#define _ADREF_ADPREF_MASK                                  0x3
#define _ADREF_PREF0_POSN                                   0x0
#define _ADREF_PREF0_POSITION                               0x0
#define _ADREF_PREF0_SIZE                                   0x1
#define _ADREF_PREF0_LENGTH                                 0x1
#define _ADREF_PREF0_MASK                                   0x1
#define _ADREF_PREF1_POSN                                   0x1
#define _ADREF_PREF1_POSITION                               0x1
#define _ADREF_PREF1_SIZE                                   0x1
#define _ADREF_PREF1_LENGTH                                 0x1
#define _ADREF_PREF1_MASK                                   0x2
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x117);
#ifndef _LIB_BUILD
asm("ADACT equ 0117h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACT                    :5;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
    };
    struct {
        unsigned ADACT                  :5;
    };
    struct {
        unsigned ACT0                   :1;
        unsigned ACT1                   :1;
        unsigned ACT2                   :1;
        unsigned ACT3                   :1;
        unsigned ACT4                   :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x117);
// bitfield macros
#define _ADACT_ACT_POSN                                     0x0
#define _ADACT_ACT_POSITION                                 0x0
#define _ADACT_ACT_SIZE                                     0x5
#define _ADACT_ACT_LENGTH                                   0x5
#define _ADACT_ACT_MASK                                     0x1F
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x5
#define _ADACT_ADACT_LENGTH                                 0x5
#define _ADACT_ADACT_MASK                                   0x1F
#define _ADACT_ACT0_POSN                                    0x0
#define _ADACT_ACT0_POSITION                                0x0
#define _ADACT_ACT0_SIZE                                    0x1
#define _ADACT_ACT0_LENGTH                                  0x1
#define _ADACT_ACT0_MASK                                    0x1
#define _ADACT_ACT1_POSN                                    0x1
#define _ADACT_ACT1_POSITION                                0x1
#define _ADACT_ACT1_SIZE                                    0x1
#define _ADACT_ACT1_LENGTH                                  0x1
#define _ADACT_ACT1_MASK                                    0x2
#define _ADACT_ACT2_POSN                                    0x2
#define _ADACT_ACT2_POSITION                                0x2
#define _ADACT_ACT2_SIZE                                    0x1
#define _ADACT_ACT2_LENGTH                                  0x1
#define _ADACT_ACT2_MASK                                    0x4
#define _ADACT_ACT3_POSN                                    0x3
#define _ADACT_ACT3_POSITION                                0x3
#define _ADACT_ACT3_SIZE                                    0x1
#define _ADACT_ACT3_LENGTH                                  0x1
#define _ADACT_ACT3_MASK                                    0x8
#define _ADACT_ACT4_POSN                                    0x4
#define _ADACT_ACT4_POSITION                                0x4
#define _ADACT_ACT4_SIZE                                    0x1
#define _ADACT_ACT4_LENGTH                                  0x1
#define _ADACT_ACT4_MASK                                    0x10

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x118);
#ifndef _LIB_BUILD
asm("ADCLK equ 0118h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :6;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
    struct {
        unsigned ADCS                   :6;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x118);
// bitfield macros
#define _ADCLK_CS_POSN                                      0x0
#define _ADCLK_CS_POSITION                                  0x0
#define _ADCLK_CS_SIZE                                      0x6
#define _ADCLK_CS_LENGTH                                    0x6
#define _ADCLK_CS_MASK                                      0x3F
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x6
#define _ADCLK_ADCS_LENGTH                                  0x6
#define _ADCLK_ADCS_MASK                                    0x3F
#define _ADCLK_CS0_POSN                                     0x0
#define _ADCLK_CS0_POSITION                                 0x0
#define _ADCLK_CS0_SIZE                                     0x1
#define _ADCLK_CS0_LENGTH                                   0x1
#define _ADCLK_CS0_MASK                                     0x1
#define _ADCLK_CS1_POSN                                     0x1
#define _ADCLK_CS1_POSITION                                 0x1
#define _ADCLK_CS1_SIZE                                     0x1
#define _ADCLK_CS1_LENGTH                                   0x1
#define _ADCLK_CS1_MASK                                     0x2
#define _ADCLK_CS2_POSN                                     0x2
#define _ADCLK_CS2_POSITION                                 0x2
#define _ADCLK_CS2_SIZE                                     0x1
#define _ADCLK_CS2_LENGTH                                   0x1
#define _ADCLK_CS2_MASK                                     0x4
#define _ADCLK_CS3_POSN                                     0x3
#define _ADCLK_CS3_POSITION                                 0x3
#define _ADCLK_CS3_SIZE                                     0x1
#define _ADCLK_CS3_LENGTH                                   0x1
#define _ADCLK_CS3_MASK                                     0x8
#define _ADCLK_CS4_POSN                                     0x4
#define _ADCLK_CS4_POSITION                                 0x4
#define _ADCLK_CS4_SIZE                                     0x1
#define _ADCLK_CS4_LENGTH                                   0x1
#define _ADCLK_CS4_MASK                                     0x10
#define _ADCLK_CS5_POSN                                     0x5
#define _ADCLK_CS5_POSITION                                 0x5
#define _ADCLK_CS5_SIZE                                     0x1
#define _ADCLK_CS5_LENGTH                                   0x1
#define _ADCLK_CS5_MASK                                     0x20

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x119);
#ifndef _LIB_BUILD
asm("RC1REG equ 0119h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG equ 0119h");
#endif
extern volatile unsigned char           RCREG1              __at(0x119);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x119);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0x119);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0x119);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x11A);
#ifndef _LIB_BUILD
asm("TX1REG equ 011Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 011Ah");
#endif
extern volatile unsigned char           TXREG               __at(0x11A);
#ifndef _LIB_BUILD
asm("TXREG equ 011Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x11A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0x11A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0x11A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 011Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x11B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 011Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG equ 011Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 011Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0x11B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 011Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x11B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0x11B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0x11B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0x11B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x11C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 011Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 011Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0x11C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x11C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0x11C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0x11C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x11D);
#ifndef _LIB_BUILD
asm("RC1STA equ 011Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 011Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0x11D);
#ifndef _LIB_BUILD
asm("RCSTA equ 011Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x11D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0x11D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0x11D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x11E);
#ifndef _LIB_BUILD
asm("TX1STA equ 011Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 011Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0x11E);
#ifndef _LIB_BUILD
asm("TXSTA equ 011Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x11E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0x11E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0x11E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 011Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 011Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 011Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0x11F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 011Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x11F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0x11F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0x11F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0x11F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0x11F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x18C);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x18C);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x18D);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 018Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x18D);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x18E);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x18E);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x18F);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 018Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x18F);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x190);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0190h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x190);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x191);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x191);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x192);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x192);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1 equ 020Ch");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x20C);
#ifndef _LIB_BUILD
asm("TMR1L equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
    struct {
        unsigned CAL01                  :1;
        unsigned CAL11                  :1;
        unsigned CAL21                  :1;
        unsigned CAL31                  :1;
        unsigned CAL41                  :1;
        unsigned CAL51                  :1;
        unsigned CAL61                  :1;
        unsigned CAL71                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x20C);
// bitfield macros
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80
#define _TMR1L_CAL01_POSN                                   0x0
#define _TMR1L_CAL01_POSITION                               0x0
#define _TMR1L_CAL01_SIZE                                   0x1
#define _TMR1L_CAL01_LENGTH                                 0x1
#define _TMR1L_CAL01_MASK                                   0x1
#define _TMR1L_CAL11_POSN                                   0x1
#define _TMR1L_CAL11_POSITION                               0x1
#define _TMR1L_CAL11_SIZE                                   0x1
#define _TMR1L_CAL11_LENGTH                                 0x1
#define _TMR1L_CAL11_MASK                                   0x2
#define _TMR1L_CAL21_POSN                                   0x2
#define _TMR1L_CAL21_POSITION                               0x2
#define _TMR1L_CAL21_SIZE                                   0x1
#define _TMR1L_CAL21_LENGTH                                 0x1
#define _TMR1L_CAL21_MASK                                   0x4
#define _TMR1L_CAL31_POSN                                   0x3
#define _TMR1L_CAL31_POSITION                               0x3
#define _TMR1L_CAL31_SIZE                                   0x1
#define _TMR1L_CAL31_LENGTH                                 0x1
#define _TMR1L_CAL31_MASK                                   0x8
#define _TMR1L_CAL41_POSN                                   0x4
#define _TMR1L_CAL41_POSITION                               0x4
#define _TMR1L_CAL41_SIZE                                   0x1
#define _TMR1L_CAL41_LENGTH                                 0x1
#define _TMR1L_CAL41_MASK                                   0x10
#define _TMR1L_CAL51_POSN                                   0x5
#define _TMR1L_CAL51_POSITION                               0x5
#define _TMR1L_CAL51_SIZE                                   0x1
#define _TMR1L_CAL51_LENGTH                                 0x1
#define _TMR1L_CAL51_MASK                                   0x20
#define _TMR1L_CAL61_POSN                                   0x6
#define _TMR1L_CAL61_POSITION                               0x6
#define _TMR1L_CAL61_SIZE                                   0x1
#define _TMR1L_CAL61_LENGTH                                 0x1
#define _TMR1L_CAL61_MASK                                   0x40
#define _TMR1L_CAL71_POSN                                   0x7
#define _TMR1L_CAL71_POSITION                               0x7
#define _TMR1L_CAL71_SIZE                                   0x1
#define _TMR1L_CAL71_LENGTH                                 0x1
#define _TMR1L_CAL71_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x20D);
#ifndef _LIB_BUILD
asm("TMR1H equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x20D);
// bitfield macros
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x20E);
#ifndef _LIB_BUILD
asm("T1CON equ 020Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x20E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x20F);
#ifndef _LIB_BUILD
asm("T1GCON equ 020Fh");
#endif
// aliases
extern volatile unsigned char           PR1                 __at(0x20F);
#ifndef _LIB_BUILD
asm("PR1 equ 020Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x20F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0x20F);
// bitfield macros
#define _PR1_GVAL_POSN                                      0x2
#define _PR1_GVAL_POSITION                                  0x2
#define _PR1_GVAL_SIZE                                      0x1
#define _PR1_GVAL_LENGTH                                    0x1
#define _PR1_GVAL_MASK                                      0x4
#define _PR1_GGO_nDONE_POSN                                 0x3
#define _PR1_GGO_nDONE_POSITION                             0x3
#define _PR1_GGO_nDONE_SIZE                                 0x1
#define _PR1_GGO_nDONE_LENGTH                               0x1
#define _PR1_GGO_nDONE_MASK                                 0x8
#define _PR1_GSPM_POSN                                      0x4
#define _PR1_GSPM_POSITION                                  0x4
#define _PR1_GSPM_SIZE                                      0x1
#define _PR1_GSPM_LENGTH                                    0x1
#define _PR1_GSPM_MASK                                      0x10
#define _PR1_GTM_POSN                                       0x5
#define _PR1_GTM_POSITION                                   0x5
#define _PR1_GTM_SIZE                                       0x1
#define _PR1_GTM_LENGTH                                     0x1
#define _PR1_GTM_MASK                                       0x20
#define _PR1_GPOL_POSN                                      0x6
#define _PR1_GPOL_POSITION                                  0x6
#define _PR1_GPOL_SIZE                                      0x1
#define _PR1_GPOL_LENGTH                                    0x1
#define _PR1_GPOL_MASK                                      0x40
#define _PR1_GE_POSN                                        0x7
#define _PR1_GE_POSITION                                    0x7
#define _PR1_GE_SIZE                                        0x1
#define _PR1_GE_LENGTH                                      0x1
#define _PR1_GE_MASK                                        0x80
#define _PR1_T1GVAL_POSN                                    0x2
#define _PR1_T1GVAL_POSITION                                0x2
#define _PR1_T1GVAL_SIZE                                    0x1
#define _PR1_T1GVAL_LENGTH                                  0x1
#define _PR1_T1GVAL_MASK                                    0x4
#define _PR1_T1GGO_nDONE_POSN                               0x3
#define _PR1_T1GGO_nDONE_POSITION                           0x3
#define _PR1_T1GGO_nDONE_SIZE                               0x1
#define _PR1_T1GGO_nDONE_LENGTH                             0x1
#define _PR1_T1GGO_nDONE_MASK                               0x8
#define _PR1_T1GSPM_POSN                                    0x4
#define _PR1_T1GSPM_POSITION                                0x4
#define _PR1_T1GSPM_SIZE                                    0x1
#define _PR1_T1GSPM_LENGTH                                  0x1
#define _PR1_T1GSPM_MASK                                    0x10
#define _PR1_T1GTM_POSN                                     0x5
#define _PR1_T1GTM_POSITION                                 0x5
#define _PR1_T1GTM_SIZE                                     0x1
#define _PR1_T1GTM_LENGTH                                   0x1
#define _PR1_T1GTM_MASK                                     0x20
#define _PR1_T1GPOL_POSN                                    0x6
#define _PR1_T1GPOL_POSITION                                0x6
#define _PR1_T1GPOL_SIZE                                    0x1
#define _PR1_T1GPOL_LENGTH                                  0x1
#define _PR1_T1GPOL_MASK                                    0x40
#define _PR1_T1GE_POSN                                      0x7
#define _PR1_T1GE_POSITION                                  0x7
#define _PR1_T1GE_SIZE                                      0x1
#define _PR1_T1GE_LENGTH                                    0x1
#define _PR1_T1GE_MASK                                      0x80
#define _PR1_T1GGO_POSN                                     0x3
#define _PR1_T1GGO_POSITION                                 0x3
#define _PR1_T1GGO_SIZE                                     0x1
#define _PR1_T1GGO_LENGTH                                   0x1
#define _PR1_T1GGO_MASK                                     0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x210);
#ifndef _LIB_BUILD
asm("T1GATE equ 0210h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x210);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0210h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x210);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x5
#define _T1GATE_GSS_LENGTH                                  0x5
#define _T1GATE_GSS_MASK                                    0x1F
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x210);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x5
#define _TMR1GATE_GSS_LENGTH                                0x5
#define _TMR1GATE_GSS_MASK                                  0x1F
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x211);
#ifndef _LIB_BUILD
asm("T1CLK equ 0211h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x211);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0211h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x211);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x4
#define _T1CLK_CS_LENGTH                                    0x4
#define _T1CLK_CS_MASK                                      0xF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x211);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x4
#define _TMR1CLK_CS_LENGTH                                  0x4
#define _TMR1CLK_CS_MASK                                    0xF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x21E);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 021Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
        unsigned P3TSEL                 :2;
        unsigned P4TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned P3TSEL0                :1;
        unsigned P3TSEL1                :1;
        unsigned P4TSEL0                :1;
        unsigned P4TSEL1                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x21E);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC
#define _CCPTMRS0_P3TSEL_POSN                               0x4
#define _CCPTMRS0_P3TSEL_POSITION                           0x4
#define _CCPTMRS0_P3TSEL_SIZE                               0x2
#define _CCPTMRS0_P3TSEL_LENGTH                             0x2
#define _CCPTMRS0_P3TSEL_MASK                               0x30
#define _CCPTMRS0_P4TSEL_POSN                               0x6
#define _CCPTMRS0_P4TSEL_POSITION                           0x6
#define _CCPTMRS0_P4TSEL_SIZE                               0x2
#define _CCPTMRS0_P4TSEL_LENGTH                             0x2
#define _CCPTMRS0_P4TSEL_MASK                               0xC0
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C2TSEL0_POSN                              0x2
#define _CCPTMRS0_C2TSEL0_POSITION                          0x2
#define _CCPTMRS0_C2TSEL0_SIZE                              0x1
#define _CCPTMRS0_C2TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL0_MASK                              0x4
#define _CCPTMRS0_C2TSEL1_POSN                              0x3
#define _CCPTMRS0_C2TSEL1_POSITION                          0x3
#define _CCPTMRS0_C2TSEL1_SIZE                              0x1
#define _CCPTMRS0_C2TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL1_MASK                              0x8
#define _CCPTMRS0_P3TSEL0_POSN                              0x4
#define _CCPTMRS0_P3TSEL0_POSITION                          0x4
#define _CCPTMRS0_P3TSEL0_SIZE                              0x1
#define _CCPTMRS0_P3TSEL0_LENGTH                            0x1
#define _CCPTMRS0_P3TSEL0_MASK                              0x10
#define _CCPTMRS0_P3TSEL1_POSN                              0x5
#define _CCPTMRS0_P3TSEL1_POSITION                          0x5
#define _CCPTMRS0_P3TSEL1_SIZE                              0x1
#define _CCPTMRS0_P3TSEL1_LENGTH                            0x1
#define _CCPTMRS0_P3TSEL1_MASK                              0x20
#define _CCPTMRS0_P4TSEL0_POSN                              0x6
#define _CCPTMRS0_P4TSEL0_POSITION                          0x6
#define _CCPTMRS0_P4TSEL0_SIZE                              0x1
#define _CCPTMRS0_P4TSEL0_LENGTH                            0x1
#define _CCPTMRS0_P4TSEL0_MASK                              0x40
#define _CCPTMRS0_P4TSEL1_POSN                              0x7
#define _CCPTMRS0_P4TSEL1_POSITION                          0x7
#define _CCPTMRS0_P4TSEL1_SIZE                              0x1
#define _CCPTMRS0_P4TSEL1_LENGTH                            0x1
#define _CCPTMRS0_P4TSEL1_MASK                              0x80

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x28C);
#ifndef _LIB_BUILD
asm("T2TMR equ 028Ch");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x28C);
#ifndef _LIB_BUILD
asm("TMR2 equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x28C);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x28C);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x28D);
#ifndef _LIB_BUILD
asm("T2PR equ 028Dh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x28D);
#ifndef _LIB_BUILD
asm("PR2 equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x28D);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x28D);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x28E);
#ifndef _LIB_BUILD
asm("T2CON equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x28E);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x28F);
#ifndef _LIB_BUILD
asm("T2HLT equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x28F);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0290h");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x290);
#ifndef _LIB_BUILD
asm("T2CLK equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x290);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x290);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x4
#define _T2CLK_CS_LENGTH                                    0x4
#define _T2CLK_CS_MASK                                      0xF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x4
#define _T2CLK_T2CS_LENGTH                                  0x4
#define _T2CLK_T2CS_MASK                                    0xF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x291);
#ifndef _LIB_BUILD
asm("T2RST equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T2RSEL                 :5;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x291);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x5
#define _T2RST_RSEL_LENGTH                                  0x5
#define _T2RST_RSEL_MASK                                    0x1F
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x5
#define _T2RST_T2RSEL_LENGTH                                0x5
#define _T2RST_T2RSEL_MASK                                  0x1F
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x292);
#ifndef _LIB_BUILD
asm("T4TMR equ 0292h");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x292);
#ifndef _LIB_BUILD
asm("TMR4 equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x292);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x292);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x293);
#ifndef _LIB_BUILD
asm("T4PR equ 0293h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x293);
#ifndef _LIB_BUILD
asm("PR4 equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x293);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x293);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x294);
#ifndef _LIB_BUILD
asm("T4CON equ 0294h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x294);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x295);
#ifndef _LIB_BUILD
asm("T4HLT equ 0295h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x295);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x296);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0296h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0x296);
#ifndef _LIB_BUILD
asm("T4CLK equ 0296h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x296);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0x296);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x4
#define _T4CLK_CS_LENGTH                                    0x4
#define _T4CLK_CS_MASK                                      0xF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x4
#define _T4CLK_T4CS_LENGTH                                  0x4
#define _T4CLK_T4CS_MASK                                    0xF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x297);
#ifndef _LIB_BUILD
asm("T4RST equ 0297h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T4RSEL                 :5;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x297);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x5
#define _T4RST_RSEL_LENGTH                                  0x5
#define _T4RST_RSEL_MASK                                    0x1F
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x5
#define _T4RST_T4RSEL_LENGTH                                0x5
#define _T4RST_T4RSEL_MASK                                  0x1F
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1 equ 030Ch");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x30C);
#ifndef _LIB_BUILD
asm("CCPR1L equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x30C);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x30D);
#ifndef _LIB_BUILD
asm("CCPR1H equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x30D);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x30E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned CCP1OE                 :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x30E);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_OE_POSN                                    0x6
#define _CCP1CON_OE_POSITION                                0x6
#define _CCP1CON_OE_SIZE                                    0x1
#define _CCP1CON_OE_LENGTH                                  0x1
#define _CCP1CON_OE_MASK                                    0x40
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1OE_POSN                                0x6
#define _CCP1CON_CCP1OE_POSITION                            0x6
#define _CCP1CON_CCP1OE_SIZE                                0x1
#define _CCP1CON_CCP1OE_LENGTH                              0x1
#define _CCP1CON_CCP1OE_MASK                                0x40
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x30F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
        unsigned CCP1CTS3               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x30F);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CTS3_POSN                                  0x3
#define _CCP1CAP_CTS3_POSITION                              0x3
#define _CCP1CAP_CTS3_SIZE                                  0x1
#define _CCP1CAP_CTS3_LENGTH                                0x1
#define _CCP1CAP_CTS3_MASK                                  0x8
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4
#define _CCP1CAP_CCP1CTS3_POSN                              0x3
#define _CCP1CAP_CCP1CTS3_POSITION                          0x3
#define _CCP1CAP_CCP1CTS3_SIZE                              0x1
#define _CCP1CAP_CCP1CTS3_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS3_MASK                              0x8

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0310h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x310);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x310);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x311);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x311);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x312);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0312h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned CCP2OE                 :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x312);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_OE_POSN                                    0x6
#define _CCP2CON_OE_POSITION                                0x6
#define _CCP2CON_OE_SIZE                                    0x1
#define _CCP2CON_OE_LENGTH                                  0x1
#define _CCP2CON_OE_MASK                                    0x40
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2OE_POSN                                0x6
#define _CCP2CON_CCP2OE_POSITION                            0x6
#define _CCP2CON_CCP2OE_SIZE                                0x1
#define _CCP2CON_CCP2OE_LENGTH                              0x1
#define _CCP2CON_CCP2OE_MASK                                0x40
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x313);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0313h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
        unsigned CCP2CTS3               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x313);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CTS3_POSN                                  0x3
#define _CCP2CAP_CTS3_POSITION                              0x3
#define _CCP2CAP_CTS3_SIZE                                  0x1
#define _CCP2CAP_CTS3_LENGTH                                0x1
#define _CCP2CAP_CTS3_MASK                                  0x8
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4
#define _CCP2CAP_CCP2CTS3_POSN                              0x3
#define _CCP2CAP_CCP2CTS3_POSITION                          0x3
#define _CCP2CAP_CCP2CTS3_SIZE                              0x1
#define _CCP2CAP_CCP2CTS3_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS3_MASK                              0x8

// Register: PWM3DC
#define PWM3DC PWM3DC
extern volatile unsigned short          PWM3DC              __at(0x314);
#ifndef _LIB_BUILD
asm("PWM3DC equ 0314h");
#endif

// Register: PWM3DCL
#define PWM3DCL PWM3DCL
extern volatile unsigned char           PWM3DCL             __at(0x314);
#ifndef _LIB_BUILD
asm("PWM3DCL equ 0314h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM3DC0                :1;
        unsigned PWM3DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM3DCLbits_t;
extern volatile PWM3DCLbits_t PWM3DCLbits __at(0x314);
// bitfield macros
#define _PWM3DCL_DC_POSN                                    0x6
#define _PWM3DCL_DC_POSITION                                0x6
#define _PWM3DCL_DC_SIZE                                    0x2
#define _PWM3DCL_DC_LENGTH                                  0x2
#define _PWM3DCL_DC_MASK                                    0xC0
#define _PWM3DCL_DC0_POSN                                   0x6
#define _PWM3DCL_DC0_POSITION                               0x6
#define _PWM3DCL_DC0_SIZE                                   0x1
#define _PWM3DCL_DC0_LENGTH                                 0x1
#define _PWM3DCL_DC0_MASK                                   0x40
#define _PWM3DCL_DC1_POSN                                   0x7
#define _PWM3DCL_DC1_POSITION                               0x7
#define _PWM3DCL_DC1_SIZE                                   0x1
#define _PWM3DCL_DC1_LENGTH                                 0x1
#define _PWM3DCL_DC1_MASK                                   0x80
#define _PWM3DCL_PWM3DC0_POSN                               0x6
#define _PWM3DCL_PWM3DC0_POSITION                           0x6
#define _PWM3DCL_PWM3DC0_SIZE                               0x1
#define _PWM3DCL_PWM3DC0_LENGTH                             0x1
#define _PWM3DCL_PWM3DC0_MASK                               0x40
#define _PWM3DCL_PWM3DC1_POSN                               0x7
#define _PWM3DCL_PWM3DC1_POSITION                           0x7
#define _PWM3DCL_PWM3DC1_SIZE                               0x1
#define _PWM3DCL_PWM3DC1_LENGTH                             0x1
#define _PWM3DCL_PWM3DC1_MASK                               0x80
#define _PWM3DCL_PWMPW0_POSN                                0x6
#define _PWM3DCL_PWMPW0_POSITION                            0x6
#define _PWM3DCL_PWMPW0_SIZE                                0x1
#define _PWM3DCL_PWMPW0_LENGTH                              0x1
#define _PWM3DCL_PWMPW0_MASK                                0x40
#define _PWM3DCL_PWMPW1_POSN                                0x7
#define _PWM3DCL_PWMPW1_POSITION                            0x7
#define _PWM3DCL_PWMPW1_SIZE                                0x1
#define _PWM3DCL_PWMPW1_LENGTH                              0x1
#define _PWM3DCL_PWMPW1_MASK                                0x80

// Register: PWM3DCH
#define PWM3DCH PWM3DCH
extern volatile unsigned char           PWM3DCH             __at(0x315);
#ifndef _LIB_BUILD
asm("PWM3DCH equ 0315h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM3DC2                :1;
        unsigned PWM3DC3                :1;
        unsigned PWM3DC4                :1;
        unsigned PWM3DC5                :1;
        unsigned PWM3DC6                :1;
        unsigned PWM3DC7                :1;
        unsigned PWM3DC8                :1;
        unsigned PWM3DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM3DCHbits_t;
extern volatile PWM3DCHbits_t PWM3DCHbits __at(0x315);
// bitfield macros
#define _PWM3DCH_DC_POSN                                    0x0
#define _PWM3DCH_DC_POSITION                                0x0
#define _PWM3DCH_DC_SIZE                                    0x8
#define _PWM3DCH_DC_LENGTH                                  0x8
#define _PWM3DCH_DC_MASK                                    0xFF
#define _PWM3DCH_DC2_POSN                                   0x0
#define _PWM3DCH_DC2_POSITION                               0x0
#define _PWM3DCH_DC2_SIZE                                   0x1
#define _PWM3DCH_DC2_LENGTH                                 0x1
#define _PWM3DCH_DC2_MASK                                   0x1
#define _PWM3DCH_DC3_POSN                                   0x1
#define _PWM3DCH_DC3_POSITION                               0x1
#define _PWM3DCH_DC3_SIZE                                   0x1
#define _PWM3DCH_DC3_LENGTH                                 0x1
#define _PWM3DCH_DC3_MASK                                   0x2
#define _PWM3DCH_DC4_POSN                                   0x2
#define _PWM3DCH_DC4_POSITION                               0x2
#define _PWM3DCH_DC4_SIZE                                   0x1
#define _PWM3DCH_DC4_LENGTH                                 0x1
#define _PWM3DCH_DC4_MASK                                   0x4
#define _PWM3DCH_DC5_POSN                                   0x3
#define _PWM3DCH_DC5_POSITION                               0x3
#define _PWM3DCH_DC5_SIZE                                   0x1
#define _PWM3DCH_DC5_LENGTH                                 0x1
#define _PWM3DCH_DC5_MASK                                   0x8
#define _PWM3DCH_DC6_POSN                                   0x4
#define _PWM3DCH_DC6_POSITION                               0x4
#define _PWM3DCH_DC6_SIZE                                   0x1
#define _PWM3DCH_DC6_LENGTH                                 0x1
#define _PWM3DCH_DC6_MASK                                   0x10
#define _PWM3DCH_DC7_POSN                                   0x5
#define _PWM3DCH_DC7_POSITION                               0x5
#define _PWM3DCH_DC7_SIZE                                   0x1
#define _PWM3DCH_DC7_LENGTH                                 0x1
#define _PWM3DCH_DC7_MASK                                   0x20
#define _PWM3DCH_DC8_POSN                                   0x6
#define _PWM3DCH_DC8_POSITION                               0x6
#define _PWM3DCH_DC8_SIZE                                   0x1
#define _PWM3DCH_DC8_LENGTH                                 0x1
#define _PWM3DCH_DC8_MASK                                   0x40
#define _PWM3DCH_DC9_POSN                                   0x7
#define _PWM3DCH_DC9_POSITION                               0x7
#define _PWM3DCH_DC9_SIZE                                   0x1
#define _PWM3DCH_DC9_LENGTH                                 0x1
#define _PWM3DCH_DC9_MASK                                   0x80
#define _PWM3DCH_PWM3DC2_POSN                               0x0
#define _PWM3DCH_PWM3DC2_POSITION                           0x0
#define _PWM3DCH_PWM3DC2_SIZE                               0x1
#define _PWM3DCH_PWM3DC2_LENGTH                             0x1
#define _PWM3DCH_PWM3DC2_MASK                               0x1
#define _PWM3DCH_PWM3DC3_POSN                               0x1
#define _PWM3DCH_PWM3DC3_POSITION                           0x1
#define _PWM3DCH_PWM3DC3_SIZE                               0x1
#define _PWM3DCH_PWM3DC3_LENGTH                             0x1
#define _PWM3DCH_PWM3DC3_MASK                               0x2
#define _PWM3DCH_PWM3DC4_POSN                               0x2
#define _PWM3DCH_PWM3DC4_POSITION                           0x2
#define _PWM3DCH_PWM3DC4_SIZE                               0x1
#define _PWM3DCH_PWM3DC4_LENGTH                             0x1
#define _PWM3DCH_PWM3DC4_MASK                               0x4
#define _PWM3DCH_PWM3DC5_POSN                               0x3
#define _PWM3DCH_PWM3DC5_POSITION                           0x3
#define _PWM3DCH_PWM3DC5_SIZE                               0x1
#define _PWM3DCH_PWM3DC5_LENGTH                             0x1
#define _PWM3DCH_PWM3DC5_MASK                               0x8
#define _PWM3DCH_PWM3DC6_POSN                               0x4
#define _PWM3DCH_PWM3DC6_POSITION                           0x4
#define _PWM3DCH_PWM3DC6_SIZE                               0x1
#define _PWM3DCH_PWM3DC6_LENGTH                             0x1
#define _PWM3DCH_PWM3DC6_MASK                               0x10
#define _PWM3DCH_PWM3DC7_POSN                               0x5
#define _PWM3DCH_PWM3DC7_POSITION                           0x5
#define _PWM3DCH_PWM3DC7_SIZE                               0x1
#define _PWM3DCH_PWM3DC7_LENGTH                             0x1
#define _PWM3DCH_PWM3DC7_MASK                               0x20
#define _PWM3DCH_PWM3DC8_POSN                               0x6
#define _PWM3DCH_PWM3DC8_POSITION                           0x6
#define _PWM3DCH_PWM3DC8_SIZE                               0x1
#define _PWM3DCH_PWM3DC8_LENGTH                             0x1
#define _PWM3DCH_PWM3DC8_MASK                               0x40
#define _PWM3DCH_PWM3DC9_POSN                               0x7
#define _PWM3DCH_PWM3DC9_POSITION                           0x7
#define _PWM3DCH_PWM3DC9_SIZE                               0x1
#define _PWM3DCH_PWM3DC9_LENGTH                             0x1
#define _PWM3DCH_PWM3DC9_MASK                               0x80
#define _PWM3DCH_PWMPW2_POSN                                0x0
#define _PWM3DCH_PWMPW2_POSITION                            0x0
#define _PWM3DCH_PWMPW2_SIZE                                0x1
#define _PWM3DCH_PWMPW2_LENGTH                              0x1
#define _PWM3DCH_PWMPW2_MASK                                0x1
#define _PWM3DCH_PWMPW3_POSN                                0x1
#define _PWM3DCH_PWMPW3_POSITION                            0x1
#define _PWM3DCH_PWMPW3_SIZE                                0x1
#define _PWM3DCH_PWMPW3_LENGTH                              0x1
#define _PWM3DCH_PWMPW3_MASK                                0x2
#define _PWM3DCH_PWMPW4_POSN                                0x2
#define _PWM3DCH_PWMPW4_POSITION                            0x2
#define _PWM3DCH_PWMPW4_SIZE                                0x1
#define _PWM3DCH_PWMPW4_LENGTH                              0x1
#define _PWM3DCH_PWMPW4_MASK                                0x4
#define _PWM3DCH_PWMPW5_POSN                                0x3
#define _PWM3DCH_PWMPW5_POSITION                            0x3
#define _PWM3DCH_PWMPW5_SIZE                                0x1
#define _PWM3DCH_PWMPW5_LENGTH                              0x1
#define _PWM3DCH_PWMPW5_MASK                                0x8
#define _PWM3DCH_PWMPW6_POSN                                0x4
#define _PWM3DCH_PWMPW6_POSITION                            0x4
#define _PWM3DCH_PWMPW6_SIZE                                0x1
#define _PWM3DCH_PWMPW6_LENGTH                              0x1
#define _PWM3DCH_PWMPW6_MASK                                0x10
#define _PWM3DCH_PWMPW7_POSN                                0x5
#define _PWM3DCH_PWMPW7_POSITION                            0x5
#define _PWM3DCH_PWMPW7_SIZE                                0x1
#define _PWM3DCH_PWMPW7_LENGTH                              0x1
#define _PWM3DCH_PWMPW7_MASK                                0x20
#define _PWM3DCH_PWMPW8_POSN                                0x6
#define _PWM3DCH_PWMPW8_POSITION                            0x6
#define _PWM3DCH_PWMPW8_SIZE                                0x1
#define _PWM3DCH_PWMPW8_LENGTH                              0x1
#define _PWM3DCH_PWMPW8_MASK                                0x40
#define _PWM3DCH_PWMPW9_POSN                                0x7
#define _PWM3DCH_PWMPW9_POSITION                            0x7
#define _PWM3DCH_PWMPW9_SIZE                                0x1
#define _PWM3DCH_PWMPW9_LENGTH                              0x1
#define _PWM3DCH_PWMPW9_MASK                                0x80

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0x316);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0316h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM3POL                :1;
        unsigned PWM3OUT                :1;
        unsigned                        :1;
        unsigned PWM3EN                 :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0x316);
// bitfield macros
#define _PWM3CON_POL_POSN                                   0x4
#define _PWM3CON_POL_POSITION                               0x4
#define _PWM3CON_POL_SIZE                                   0x1
#define _PWM3CON_POL_LENGTH                                 0x1
#define _PWM3CON_POL_MASK                                   0x10
#define _PWM3CON_OUT_POSN                                   0x5
#define _PWM3CON_OUT_POSITION                               0x5
#define _PWM3CON_OUT_SIZE                                   0x1
#define _PWM3CON_OUT_LENGTH                                 0x1
#define _PWM3CON_OUT_MASK                                   0x20
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80
#define _PWM3CON_PWM3POL_POSN                               0x4
#define _PWM3CON_PWM3POL_POSITION                           0x4
#define _PWM3CON_PWM3POL_SIZE                               0x1
#define _PWM3CON_PWM3POL_LENGTH                             0x1
#define _PWM3CON_PWM3POL_MASK                               0x10
#define _PWM3CON_PWM3OUT_POSN                               0x5
#define _PWM3CON_PWM3OUT_POSITION                           0x5
#define _PWM3CON_PWM3OUT_SIZE                               0x1
#define _PWM3CON_PWM3OUT_LENGTH                             0x1
#define _PWM3CON_PWM3OUT_MASK                               0x20
#define _PWM3CON_PWM3EN_POSN                                0x7
#define _PWM3CON_PWM3EN_POSITION                            0x7
#define _PWM3CON_PWM3EN_SIZE                                0x1
#define _PWM3CON_PWM3EN_LENGTH                              0x1
#define _PWM3CON_PWM3EN_MASK                                0x80

// Register: PWM4DC
#define PWM4DC PWM4DC
extern volatile unsigned short          PWM4DC              __at(0x318);
#ifndef _LIB_BUILD
asm("PWM4DC equ 0318h");
#endif

// Register: PWM4DCL
#define PWM4DCL PWM4DCL
extern volatile unsigned char           PWM4DCL             __at(0x318);
#ifndef _LIB_BUILD
asm("PWM4DCL equ 0318h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM4DC0                :1;
        unsigned PWM4DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM4DCLbits_t;
extern volatile PWM4DCLbits_t PWM4DCLbits __at(0x318);
// bitfield macros
#define _PWM4DCL_DC_POSN                                    0x6
#define _PWM4DCL_DC_POSITION                                0x6
#define _PWM4DCL_DC_SIZE                                    0x2
#define _PWM4DCL_DC_LENGTH                                  0x2
#define _PWM4DCL_DC_MASK                                    0xC0
#define _PWM4DCL_DC0_POSN                                   0x6
#define _PWM4DCL_DC0_POSITION                               0x6
#define _PWM4DCL_DC0_SIZE                                   0x1
#define _PWM4DCL_DC0_LENGTH                                 0x1
#define _PWM4DCL_DC0_MASK                                   0x40
#define _PWM4DCL_DC1_POSN                                   0x7
#define _PWM4DCL_DC1_POSITION                               0x7
#define _PWM4DCL_DC1_SIZE                                   0x1
#define _PWM4DCL_DC1_LENGTH                                 0x1
#define _PWM4DCL_DC1_MASK                                   0x80
#define _PWM4DCL_PWM4DC0_POSN                               0x6
#define _PWM4DCL_PWM4DC0_POSITION                           0x6
#define _PWM4DCL_PWM4DC0_SIZE                               0x1
#define _PWM4DCL_PWM4DC0_LENGTH                             0x1
#define _PWM4DCL_PWM4DC0_MASK                               0x40
#define _PWM4DCL_PWM4DC1_POSN                               0x7
#define _PWM4DCL_PWM4DC1_POSITION                           0x7
#define _PWM4DCL_PWM4DC1_SIZE                               0x1
#define _PWM4DCL_PWM4DC1_LENGTH                             0x1
#define _PWM4DCL_PWM4DC1_MASK                               0x80
#define _PWM4DCL_PWMPW0_POSN                                0x6
#define _PWM4DCL_PWMPW0_POSITION                            0x6
#define _PWM4DCL_PWMPW0_SIZE                                0x1
#define _PWM4DCL_PWMPW0_LENGTH                              0x1
#define _PWM4DCL_PWMPW0_MASK                                0x40
#define _PWM4DCL_PWMPW1_POSN                                0x7
#define _PWM4DCL_PWMPW1_POSITION                            0x7
#define _PWM4DCL_PWMPW1_SIZE                                0x1
#define _PWM4DCL_PWMPW1_LENGTH                              0x1
#define _PWM4DCL_PWMPW1_MASK                                0x80

// Register: PWM4DCH
#define PWM4DCH PWM4DCH
extern volatile unsigned char           PWM4DCH             __at(0x319);
#ifndef _LIB_BUILD
asm("PWM4DCH equ 0319h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM4DC2                :1;
        unsigned PWM4DC3                :1;
        unsigned PWM4DC4                :1;
        unsigned PWM4DC5                :1;
        unsigned PWM4DC6                :1;
        unsigned PWM4DC7                :1;
        unsigned PWM4DC8                :1;
        unsigned PWM4DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM4DCHbits_t;
extern volatile PWM4DCHbits_t PWM4DCHbits __at(0x319);
// bitfield macros
#define _PWM4DCH_DC_POSN                                    0x0
#define _PWM4DCH_DC_POSITION                                0x0
#define _PWM4DCH_DC_SIZE                                    0x8
#define _PWM4DCH_DC_LENGTH                                  0x8
#define _PWM4DCH_DC_MASK                                    0xFF
#define _PWM4DCH_DC2_POSN                                   0x0
#define _PWM4DCH_DC2_POSITION                               0x0
#define _PWM4DCH_DC2_SIZE                                   0x1
#define _PWM4DCH_DC2_LENGTH                                 0x1
#define _PWM4DCH_DC2_MASK                                   0x1
#define _PWM4DCH_DC3_POSN                                   0x1
#define _PWM4DCH_DC3_POSITION                               0x1
#define _PWM4DCH_DC3_SIZE                                   0x1
#define _PWM4DCH_DC3_LENGTH                                 0x1
#define _PWM4DCH_DC3_MASK                                   0x2
#define _PWM4DCH_DC4_POSN                                   0x2
#define _PWM4DCH_DC4_POSITION                               0x2
#define _PWM4DCH_DC4_SIZE                                   0x1
#define _PWM4DCH_DC4_LENGTH                                 0x1
#define _PWM4DCH_DC4_MASK                                   0x4
#define _PWM4DCH_DC5_POSN                                   0x3
#define _PWM4DCH_DC5_POSITION                               0x3
#define _PWM4DCH_DC5_SIZE                                   0x1
#define _PWM4DCH_DC5_LENGTH                                 0x1
#define _PWM4DCH_DC5_MASK                                   0x8
#define _PWM4DCH_DC6_POSN                                   0x4
#define _PWM4DCH_DC6_POSITION                               0x4
#define _PWM4DCH_DC6_SIZE                                   0x1
#define _PWM4DCH_DC6_LENGTH                                 0x1
#define _PWM4DCH_DC6_MASK                                   0x10
#define _PWM4DCH_DC7_POSN                                   0x5
#define _PWM4DCH_DC7_POSITION                               0x5
#define _PWM4DCH_DC7_SIZE                                   0x1
#define _PWM4DCH_DC7_LENGTH                                 0x1
#define _PWM4DCH_DC7_MASK                                   0x20
#define _PWM4DCH_DC8_POSN                                   0x6
#define _PWM4DCH_DC8_POSITION                               0x6
#define _PWM4DCH_DC8_SIZE                                   0x1
#define _PWM4DCH_DC8_LENGTH                                 0x1
#define _PWM4DCH_DC8_MASK                                   0x40
#define _PWM4DCH_DC9_POSN                                   0x7
#define _PWM4DCH_DC9_POSITION                               0x7
#define _PWM4DCH_DC9_SIZE                                   0x1
#define _PWM4DCH_DC9_LENGTH                                 0x1
#define _PWM4DCH_DC9_MASK                                   0x80
#define _PWM4DCH_PWM4DC2_POSN                               0x0
#define _PWM4DCH_PWM4DC2_POSITION                           0x0
#define _PWM4DCH_PWM4DC2_SIZE                               0x1
#define _PWM4DCH_PWM4DC2_LENGTH                             0x1
#define _PWM4DCH_PWM4DC2_MASK                               0x1
#define _PWM4DCH_PWM4DC3_POSN                               0x1
#define _PWM4DCH_PWM4DC3_POSITION                           0x1
#define _PWM4DCH_PWM4DC3_SIZE                               0x1
#define _PWM4DCH_PWM4DC3_LENGTH                             0x1
#define _PWM4DCH_PWM4DC3_MASK                               0x2
#define _PWM4DCH_PWM4DC4_POSN                               0x2
#define _PWM4DCH_PWM4DC4_POSITION                           0x2
#define _PWM4DCH_PWM4DC4_SIZE                               0x1
#define _PWM4DCH_PWM4DC4_LENGTH                             0x1
#define _PWM4DCH_PWM4DC4_MASK                               0x4
#define _PWM4DCH_PWM4DC5_POSN                               0x3
#define _PWM4DCH_PWM4DC5_POSITION                           0x3
#define _PWM4DCH_PWM4DC5_SIZE                               0x1
#define _PWM4DCH_PWM4DC5_LENGTH                             0x1
#define _PWM4DCH_PWM4DC5_MASK                               0x8
#define _PWM4DCH_PWM4DC6_POSN                               0x4
#define _PWM4DCH_PWM4DC6_POSITION                           0x4
#define _PWM4DCH_PWM4DC6_SIZE                               0x1
#define _PWM4DCH_PWM4DC6_LENGTH                             0x1
#define _PWM4DCH_PWM4DC6_MASK                               0x10
#define _PWM4DCH_PWM4DC7_POSN                               0x5
#define _PWM4DCH_PWM4DC7_POSITION                           0x5
#define _PWM4DCH_PWM4DC7_SIZE                               0x1
#define _PWM4DCH_PWM4DC7_LENGTH                             0x1
#define _PWM4DCH_PWM4DC7_MASK                               0x20
#define _PWM4DCH_PWM4DC8_POSN                               0x6
#define _PWM4DCH_PWM4DC8_POSITION                           0x6
#define _PWM4DCH_PWM4DC8_SIZE                               0x1
#define _PWM4DCH_PWM4DC8_LENGTH                             0x1
#define _PWM4DCH_PWM4DC8_MASK                               0x40
#define _PWM4DCH_PWM4DC9_POSN                               0x7
#define _PWM4DCH_PWM4DC9_POSITION                           0x7
#define _PWM4DCH_PWM4DC9_SIZE                               0x1
#define _PWM4DCH_PWM4DC9_LENGTH                             0x1
#define _PWM4DCH_PWM4DC9_MASK                               0x80
#define _PWM4DCH_PWMPW2_POSN                                0x0
#define _PWM4DCH_PWMPW2_POSITION                            0x0
#define _PWM4DCH_PWMPW2_SIZE                                0x1
#define _PWM4DCH_PWMPW2_LENGTH                              0x1
#define _PWM4DCH_PWMPW2_MASK                                0x1
#define _PWM4DCH_PWMPW3_POSN                                0x1
#define _PWM4DCH_PWMPW3_POSITION                            0x1
#define _PWM4DCH_PWMPW3_SIZE                                0x1
#define _PWM4DCH_PWMPW3_LENGTH                              0x1
#define _PWM4DCH_PWMPW3_MASK                                0x2
#define _PWM4DCH_PWMPW4_POSN                                0x2
#define _PWM4DCH_PWMPW4_POSITION                            0x2
#define _PWM4DCH_PWMPW4_SIZE                                0x1
#define _PWM4DCH_PWMPW4_LENGTH                              0x1
#define _PWM4DCH_PWMPW4_MASK                                0x4
#define _PWM4DCH_PWMPW5_POSN                                0x3
#define _PWM4DCH_PWMPW5_POSITION                            0x3
#define _PWM4DCH_PWMPW5_SIZE                                0x1
#define _PWM4DCH_PWMPW5_LENGTH                              0x1
#define _PWM4DCH_PWMPW5_MASK                                0x8
#define _PWM4DCH_PWMPW6_POSN                                0x4
#define _PWM4DCH_PWMPW6_POSITION                            0x4
#define _PWM4DCH_PWMPW6_SIZE                                0x1
#define _PWM4DCH_PWMPW6_LENGTH                              0x1
#define _PWM4DCH_PWMPW6_MASK                                0x10
#define _PWM4DCH_PWMPW7_POSN                                0x5
#define _PWM4DCH_PWMPW7_POSITION                            0x5
#define _PWM4DCH_PWMPW7_SIZE                                0x1
#define _PWM4DCH_PWMPW7_LENGTH                              0x1
#define _PWM4DCH_PWMPW7_MASK                                0x20
#define _PWM4DCH_PWMPW8_POSN                                0x6
#define _PWM4DCH_PWMPW8_POSITION                            0x6
#define _PWM4DCH_PWMPW8_SIZE                                0x1
#define _PWM4DCH_PWMPW8_LENGTH                              0x1
#define _PWM4DCH_PWMPW8_MASK                                0x40
#define _PWM4DCH_PWMPW9_POSN                                0x7
#define _PWM4DCH_PWMPW9_POSITION                            0x7
#define _PWM4DCH_PWMPW9_SIZE                                0x1
#define _PWM4DCH_PWMPW9_LENGTH                              0x1
#define _PWM4DCH_PWMPW9_MASK                                0x80

// Register: PWM4CON
#define PWM4CON PWM4CON
extern volatile unsigned char           PWM4CON             __at(0x31A);
#ifndef _LIB_BUILD
asm("PWM4CON equ 031Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM4POL                :1;
        unsigned PWM4OUT                :1;
        unsigned                        :1;
        unsigned PWM4EN                 :1;
    };
} PWM4CONbits_t;
extern volatile PWM4CONbits_t PWM4CONbits __at(0x31A);
// bitfield macros
#define _PWM4CON_POL_POSN                                   0x4
#define _PWM4CON_POL_POSITION                               0x4
#define _PWM4CON_POL_SIZE                                   0x1
#define _PWM4CON_POL_LENGTH                                 0x1
#define _PWM4CON_POL_MASK                                   0x10
#define _PWM4CON_OUT_POSN                                   0x5
#define _PWM4CON_OUT_POSITION                               0x5
#define _PWM4CON_OUT_SIZE                                   0x1
#define _PWM4CON_OUT_LENGTH                                 0x1
#define _PWM4CON_OUT_MASK                                   0x20
#define _PWM4CON_EN_POSN                                    0x7
#define _PWM4CON_EN_POSITION                                0x7
#define _PWM4CON_EN_SIZE                                    0x1
#define _PWM4CON_EN_LENGTH                                  0x1
#define _PWM4CON_EN_MASK                                    0x80
#define _PWM4CON_PWM4POL_POSN                               0x4
#define _PWM4CON_PWM4POL_POSITION                           0x4
#define _PWM4CON_PWM4POL_SIZE                               0x1
#define _PWM4CON_PWM4POL_LENGTH                             0x1
#define _PWM4CON_PWM4POL_MASK                               0x10
#define _PWM4CON_PWM4OUT_POSN                               0x5
#define _PWM4CON_PWM4OUT_POSITION                           0x5
#define _PWM4CON_PWM4OUT_SIZE                               0x1
#define _PWM4CON_PWM4OUT_LENGTH                             0x1
#define _PWM4CON_PWM4OUT_MASK                               0x20
#define _PWM4CON_PWM4EN_POSN                                0x7
#define _PWM4CON_PWM4EN_POSITION                            0x7
#define _PWM4CON_PWM4EN_SIZE                                0x1
#define _PWM4CON_PWM4EN_LENGTH                              0x1
#define _PWM4CON_PWM4EN_MASK                                0x80

// Register: SMT1TMR
#define SMT1TMR SMT1TMR
#ifndef __CCI__
extern volatile __uint24                SMT1TMR             __at(0x48C);
#endif
#ifndef _LIB_BUILD
asm("SMT1TMR equ 048Ch");
#endif

// Register: SMT1TMRL
#define SMT1TMRL SMT1TMRL
extern volatile unsigned char           SMT1TMRL            __at(0x48C);
#ifndef _LIB_BUILD
asm("SMT1TMRL equ 048Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR0               :1;
        unsigned SMT1TMR1               :1;
        unsigned SMT1TMR2               :1;
        unsigned SMT1TMR3               :1;
        unsigned SMT1TMR4               :1;
        unsigned SMT1TMR5               :1;
        unsigned SMT1TMR6               :1;
        unsigned SMT1TMR7               :1;
    };
} SMT1TMRLbits_t;
extern volatile SMT1TMRLbits_t SMT1TMRLbits __at(0x48C);
// bitfield macros
#define _SMT1TMRL_SMT1TMR_POSN                              0x0
#define _SMT1TMRL_SMT1TMR_POSITION                          0x0
#define _SMT1TMRL_SMT1TMR_SIZE                              0x8
#define _SMT1TMRL_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRL_SMT1TMR_MASK                              0xFF
#define _SMT1TMRL_SMT1TMR0_POSN                             0x0
#define _SMT1TMRL_SMT1TMR0_POSITION                         0x0
#define _SMT1TMRL_SMT1TMR0_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR0_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR0_MASK                             0x1
#define _SMT1TMRL_SMT1TMR1_POSN                             0x1
#define _SMT1TMRL_SMT1TMR1_POSITION                         0x1
#define _SMT1TMRL_SMT1TMR1_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR1_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR1_MASK                             0x2
#define _SMT1TMRL_SMT1TMR2_POSN                             0x2
#define _SMT1TMRL_SMT1TMR2_POSITION                         0x2
#define _SMT1TMRL_SMT1TMR2_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR2_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR2_MASK                             0x4
#define _SMT1TMRL_SMT1TMR3_POSN                             0x3
#define _SMT1TMRL_SMT1TMR3_POSITION                         0x3
#define _SMT1TMRL_SMT1TMR3_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR3_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR3_MASK                             0x8
#define _SMT1TMRL_SMT1TMR4_POSN                             0x4
#define _SMT1TMRL_SMT1TMR4_POSITION                         0x4
#define _SMT1TMRL_SMT1TMR4_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR4_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR4_MASK                             0x10
#define _SMT1TMRL_SMT1TMR5_POSN                             0x5
#define _SMT1TMRL_SMT1TMR5_POSITION                         0x5
#define _SMT1TMRL_SMT1TMR5_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR5_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR5_MASK                             0x20
#define _SMT1TMRL_SMT1TMR6_POSN                             0x6
#define _SMT1TMRL_SMT1TMR6_POSITION                         0x6
#define _SMT1TMRL_SMT1TMR6_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR6_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR6_MASK                             0x40
#define _SMT1TMRL_SMT1TMR7_POSN                             0x7
#define _SMT1TMRL_SMT1TMR7_POSITION                         0x7
#define _SMT1TMRL_SMT1TMR7_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR7_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR7_MASK                             0x80

// Register: SMT1TMRH
#define SMT1TMRH SMT1TMRH
extern volatile unsigned char           SMT1TMRH            __at(0x48D);
#ifndef _LIB_BUILD
asm("SMT1TMRH equ 048Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR8               :1;
        unsigned SMT1TMR9               :1;
        unsigned SMT1TMR10              :1;
        unsigned SMT1TMR11              :1;
        unsigned SMT1TMR12              :1;
        unsigned SMT1TMR13              :1;
        unsigned SMT1TMR14              :1;
        unsigned SMT1TMR15              :1;
    };
} SMT1TMRHbits_t;
extern volatile SMT1TMRHbits_t SMT1TMRHbits __at(0x48D);
// bitfield macros
#define _SMT1TMRH_SMT1TMR_POSN                              0x0
#define _SMT1TMRH_SMT1TMR_POSITION                          0x0
#define _SMT1TMRH_SMT1TMR_SIZE                              0x8
#define _SMT1TMRH_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRH_SMT1TMR_MASK                              0xFF
#define _SMT1TMRH_SMT1TMR8_POSN                             0x0
#define _SMT1TMRH_SMT1TMR8_POSITION                         0x0
#define _SMT1TMRH_SMT1TMR8_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR8_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR8_MASK                             0x1
#define _SMT1TMRH_SMT1TMR9_POSN                             0x1
#define _SMT1TMRH_SMT1TMR9_POSITION                         0x1
#define _SMT1TMRH_SMT1TMR9_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR9_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR9_MASK                             0x2
#define _SMT1TMRH_SMT1TMR10_POSN                            0x2
#define _SMT1TMRH_SMT1TMR10_POSITION                        0x2
#define _SMT1TMRH_SMT1TMR10_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR10_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR10_MASK                            0x4
#define _SMT1TMRH_SMT1TMR11_POSN                            0x3
#define _SMT1TMRH_SMT1TMR11_POSITION                        0x3
#define _SMT1TMRH_SMT1TMR11_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR11_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR11_MASK                            0x8
#define _SMT1TMRH_SMT1TMR12_POSN                            0x4
#define _SMT1TMRH_SMT1TMR12_POSITION                        0x4
#define _SMT1TMRH_SMT1TMR12_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR12_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR12_MASK                            0x10
#define _SMT1TMRH_SMT1TMR13_POSN                            0x5
#define _SMT1TMRH_SMT1TMR13_POSITION                        0x5
#define _SMT1TMRH_SMT1TMR13_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR13_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR13_MASK                            0x20
#define _SMT1TMRH_SMT1TMR14_POSN                            0x6
#define _SMT1TMRH_SMT1TMR14_POSITION                        0x6
#define _SMT1TMRH_SMT1TMR14_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR14_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR14_MASK                            0x40
#define _SMT1TMRH_SMT1TMR15_POSN                            0x7
#define _SMT1TMRH_SMT1TMR15_POSITION                        0x7
#define _SMT1TMRH_SMT1TMR15_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR15_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR15_MASK                            0x80

// Register: SMT1TMRU
#define SMT1TMRU SMT1TMRU
extern volatile unsigned char           SMT1TMRU            __at(0x48E);
#ifndef _LIB_BUILD
asm("SMT1TMRU equ 048Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR16              :1;
        unsigned SMT1TMR17              :1;
        unsigned SMT1TMR18              :1;
        unsigned SMT1TMR19              :1;
        unsigned SMT1TMR20              :1;
        unsigned SMT1TMR21              :1;
        unsigned SMT1TMR22              :1;
        unsigned SMT1TMR23              :1;
    };
} SMT1TMRUbits_t;
extern volatile SMT1TMRUbits_t SMT1TMRUbits __at(0x48E);
// bitfield macros
#define _SMT1TMRU_SMT1TMR_POSN                              0x0
#define _SMT1TMRU_SMT1TMR_POSITION                          0x0
#define _SMT1TMRU_SMT1TMR_SIZE                              0x8
#define _SMT1TMRU_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRU_SMT1TMR_MASK                              0xFF
#define _SMT1TMRU_SMT1TMR16_POSN                            0x0
#define _SMT1TMRU_SMT1TMR16_POSITION                        0x0
#define _SMT1TMRU_SMT1TMR16_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR16_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR16_MASK                            0x1
#define _SMT1TMRU_SMT1TMR17_POSN                            0x1
#define _SMT1TMRU_SMT1TMR17_POSITION                        0x1
#define _SMT1TMRU_SMT1TMR17_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR17_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR17_MASK                            0x2
#define _SMT1TMRU_SMT1TMR18_POSN                            0x2
#define _SMT1TMRU_SMT1TMR18_POSITION                        0x2
#define _SMT1TMRU_SMT1TMR18_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR18_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR18_MASK                            0x4
#define _SMT1TMRU_SMT1TMR19_POSN                            0x3
#define _SMT1TMRU_SMT1TMR19_POSITION                        0x3
#define _SMT1TMRU_SMT1TMR19_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR19_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR19_MASK                            0x8
#define _SMT1TMRU_SMT1TMR20_POSN                            0x4
#define _SMT1TMRU_SMT1TMR20_POSITION                        0x4
#define _SMT1TMRU_SMT1TMR20_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR20_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR20_MASK                            0x10
#define _SMT1TMRU_SMT1TMR21_POSN                            0x5
#define _SMT1TMRU_SMT1TMR21_POSITION                        0x5
#define _SMT1TMRU_SMT1TMR21_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR21_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR21_MASK                            0x20
#define _SMT1TMRU_SMT1TMR22_POSN                            0x6
#define _SMT1TMRU_SMT1TMR22_POSITION                        0x6
#define _SMT1TMRU_SMT1TMR22_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR22_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR22_MASK                            0x40
#define _SMT1TMRU_SMT1TMR23_POSN                            0x7
#define _SMT1TMRU_SMT1TMR23_POSITION                        0x7
#define _SMT1TMRU_SMT1TMR23_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR23_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR23_MASK                            0x80

// Register: SMT1CPR
#define SMT1CPR SMT1CPR
#ifndef __CCI__
extern volatile __uint24                SMT1CPR             __at(0x48F);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPR equ 048Fh");
#endif

// Register: SMT1CPRL
#define SMT1CPRL SMT1CPRL
extern volatile unsigned char           SMT1CPRL            __at(0x48F);
#ifndef _LIB_BUILD
asm("SMT1CPRL equ 048Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR0                   :1;
        unsigned CPR1                   :1;
        unsigned CPR2                   :1;
        unsigned CPR3                   :1;
        unsigned CPR4                   :1;
        unsigned CPR5                   :1;
        unsigned CPR6                   :1;
        unsigned CPR7                   :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRLbits_t;
extern volatile SMT1CPRLbits_t SMT1CPRLbits __at(0x48F);
// bitfield macros
#define _SMT1CPRL_CPR_POSN                                  0x0
#define _SMT1CPRL_CPR_POSITION                              0x0
#define _SMT1CPRL_CPR_SIZE                                  0x8
#define _SMT1CPRL_CPR_LENGTH                                0x8
#define _SMT1CPRL_CPR_MASK                                  0xFF
#define _SMT1CPRL_CPR0_POSN                                 0x0
#define _SMT1CPRL_CPR0_POSITION                             0x0
#define _SMT1CPRL_CPR0_SIZE                                 0x1
#define _SMT1CPRL_CPR0_LENGTH                               0x1
#define _SMT1CPRL_CPR0_MASK                                 0x1
#define _SMT1CPRL_CPR1_POSN                                 0x1
#define _SMT1CPRL_CPR1_POSITION                             0x1
#define _SMT1CPRL_CPR1_SIZE                                 0x1
#define _SMT1CPRL_CPR1_LENGTH                               0x1
#define _SMT1CPRL_CPR1_MASK                                 0x2
#define _SMT1CPRL_CPR2_POSN                                 0x2
#define _SMT1CPRL_CPR2_POSITION                             0x2
#define _SMT1CPRL_CPR2_SIZE                                 0x1
#define _SMT1CPRL_CPR2_LENGTH                               0x1
#define _SMT1CPRL_CPR2_MASK                                 0x4
#define _SMT1CPRL_CPR3_POSN                                 0x3
#define _SMT1CPRL_CPR3_POSITION                             0x3
#define _SMT1CPRL_CPR3_SIZE                                 0x1
#define _SMT1CPRL_CPR3_LENGTH                               0x1
#define _SMT1CPRL_CPR3_MASK                                 0x8
#define _SMT1CPRL_CPR4_POSN                                 0x4
#define _SMT1CPRL_CPR4_POSITION                             0x4
#define _SMT1CPRL_CPR4_SIZE                                 0x1
#define _SMT1CPRL_CPR4_LENGTH                               0x1
#define _SMT1CPRL_CPR4_MASK                                 0x10
#define _SMT1CPRL_CPR5_POSN                                 0x5
#define _SMT1CPRL_CPR5_POSITION                             0x5
#define _SMT1CPRL_CPR5_SIZE                                 0x1
#define _SMT1CPRL_CPR5_LENGTH                               0x1
#define _SMT1CPRL_CPR5_MASK                                 0x20
#define _SMT1CPRL_CPR6_POSN                                 0x6
#define _SMT1CPRL_CPR6_POSITION                             0x6
#define _SMT1CPRL_CPR6_SIZE                                 0x1
#define _SMT1CPRL_CPR6_LENGTH                               0x1
#define _SMT1CPRL_CPR6_MASK                                 0x40
#define _SMT1CPRL_CPR7_POSN                                 0x7
#define _SMT1CPRL_CPR7_POSITION                             0x7
#define _SMT1CPRL_CPR7_SIZE                                 0x1
#define _SMT1CPRL_CPR7_LENGTH                               0x1
#define _SMT1CPRL_CPR7_MASK                                 0x80
#define _SMT1CPRL_SMT1CPR_POSN                              0x0
#define _SMT1CPRL_SMT1CPR_POSITION                          0x0
#define _SMT1CPRL_SMT1CPR_SIZE                              0x8
#define _SMT1CPRL_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRL_SMT1CPR_MASK                              0xFF

// Register: SMT1CPRH
#define SMT1CPRH SMT1CPRH
extern volatile unsigned char           SMT1CPRH            __at(0x490);
#ifndef _LIB_BUILD
asm("SMT1CPRH equ 0490h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR8                   :1;
        unsigned CPR9                   :1;
        unsigned CPR10                  :1;
        unsigned CPR11                  :1;
        unsigned CPR12                  :1;
        unsigned CPR13                  :1;
        unsigned CPR14                  :1;
        unsigned CPR15                  :1;
    };
    struct {
        unsigned SMT1CPR8               :1;
        unsigned SMT1CPR9               :1;
        unsigned SMT1CPR10              :1;
        unsigned SMT1CPR11              :1;
        unsigned SMT1CPR12              :1;
        unsigned SMT1CPR13              :1;
        unsigned SMT1CPR14              :1;
        unsigned SMT1CPR15              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRHbits_t;
extern volatile SMT1CPRHbits_t SMT1CPRHbits __at(0x490);
// bitfield macros
#define _SMT1CPRH_CPR_POSN                                  0x0
#define _SMT1CPRH_CPR_POSITION                              0x0
#define _SMT1CPRH_CPR_SIZE                                  0x8
#define _SMT1CPRH_CPR_LENGTH                                0x8
#define _SMT1CPRH_CPR_MASK                                  0xFF
#define _SMT1CPRH_CPR8_POSN                                 0x0
#define _SMT1CPRH_CPR8_POSITION                             0x0
#define _SMT1CPRH_CPR8_SIZE                                 0x1
#define _SMT1CPRH_CPR8_LENGTH                               0x1
#define _SMT1CPRH_CPR8_MASK                                 0x1
#define _SMT1CPRH_CPR9_POSN                                 0x1
#define _SMT1CPRH_CPR9_POSITION                             0x1
#define _SMT1CPRH_CPR9_SIZE                                 0x1
#define _SMT1CPRH_CPR9_LENGTH                               0x1
#define _SMT1CPRH_CPR9_MASK                                 0x2
#define _SMT1CPRH_CPR10_POSN                                0x2
#define _SMT1CPRH_CPR10_POSITION                            0x2
#define _SMT1CPRH_CPR10_SIZE                                0x1
#define _SMT1CPRH_CPR10_LENGTH                              0x1
#define _SMT1CPRH_CPR10_MASK                                0x4
#define _SMT1CPRH_CPR11_POSN                                0x3
#define _SMT1CPRH_CPR11_POSITION                            0x3
#define _SMT1CPRH_CPR11_SIZE                                0x1
#define _SMT1CPRH_CPR11_LENGTH                              0x1
#define _SMT1CPRH_CPR11_MASK                                0x8
#define _SMT1CPRH_CPR12_POSN                                0x4
#define _SMT1CPRH_CPR12_POSITION                            0x4
#define _SMT1CPRH_CPR12_SIZE                                0x1
#define _SMT1CPRH_CPR12_LENGTH                              0x1
#define _SMT1CPRH_CPR12_MASK                                0x10
#define _SMT1CPRH_CPR13_POSN                                0x5
#define _SMT1CPRH_CPR13_POSITION                            0x5
#define _SMT1CPRH_CPR13_SIZE                                0x1
#define _SMT1CPRH_CPR13_LENGTH                              0x1
#define _SMT1CPRH_CPR13_MASK                                0x20
#define _SMT1CPRH_CPR14_POSN                                0x6
#define _SMT1CPRH_CPR14_POSITION                            0x6
#define _SMT1CPRH_CPR14_SIZE                                0x1
#define _SMT1CPRH_CPR14_LENGTH                              0x1
#define _SMT1CPRH_CPR14_MASK                                0x40
#define _SMT1CPRH_CPR15_POSN                                0x7
#define _SMT1CPRH_CPR15_POSITION                            0x7
#define _SMT1CPRH_CPR15_SIZE                                0x1
#define _SMT1CPRH_CPR15_LENGTH                              0x1
#define _SMT1CPRH_CPR15_MASK                                0x80
#define _SMT1CPRH_SMT1CPR8_POSN                             0x0
#define _SMT1CPRH_SMT1CPR8_POSITION                         0x0
#define _SMT1CPRH_SMT1CPR8_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR8_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR8_MASK                             0x1
#define _SMT1CPRH_SMT1CPR9_POSN                             0x1
#define _SMT1CPRH_SMT1CPR9_POSITION                         0x1
#define _SMT1CPRH_SMT1CPR9_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR9_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR9_MASK                             0x2
#define _SMT1CPRH_SMT1CPR10_POSN                            0x2
#define _SMT1CPRH_SMT1CPR10_POSITION                        0x2
#define _SMT1CPRH_SMT1CPR10_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR10_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR10_MASK                            0x4
#define _SMT1CPRH_SMT1CPR11_POSN                            0x3
#define _SMT1CPRH_SMT1CPR11_POSITION                        0x3
#define _SMT1CPRH_SMT1CPR11_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR11_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR11_MASK                            0x8
#define _SMT1CPRH_SMT1CPR12_POSN                            0x4
#define _SMT1CPRH_SMT1CPR12_POSITION                        0x4
#define _SMT1CPRH_SMT1CPR12_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR12_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR12_MASK                            0x10
#define _SMT1CPRH_SMT1CPR13_POSN                            0x5
#define _SMT1CPRH_SMT1CPR13_POSITION                        0x5
#define _SMT1CPRH_SMT1CPR13_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR13_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR13_MASK                            0x20
#define _SMT1CPRH_SMT1CPR14_POSN                            0x6
#define _SMT1CPRH_SMT1CPR14_POSITION                        0x6
#define _SMT1CPRH_SMT1CPR14_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR14_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR14_MASK                            0x40
#define _SMT1CPRH_SMT1CPR15_POSN                            0x7
#define _SMT1CPRH_SMT1CPR15_POSITION                        0x7
#define _SMT1CPRH_SMT1CPR15_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR15_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR15_MASK                            0x80
#define _SMT1CPRH_SMT1CPR_POSN                              0x0
#define _SMT1CPRH_SMT1CPR_POSITION                          0x0
#define _SMT1CPRH_SMT1CPR_SIZE                              0x8
#define _SMT1CPRH_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRH_SMT1CPR_MASK                              0xFF

// Register: SMT1CPRU
#define SMT1CPRU SMT1CPRU
extern volatile unsigned char           SMT1CPRU            __at(0x491);
#ifndef _LIB_BUILD
asm("SMT1CPRU equ 0491h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR16                  :1;
        unsigned CPR17                  :1;
        unsigned CPR18                  :1;
        unsigned CPR19                  :1;
        unsigned CPR20                  :1;
        unsigned CPR21                  :1;
        unsigned CPR22                  :1;
        unsigned CPR23                  :1;
    };
    struct {
        unsigned SMT1CPR16              :1;
        unsigned SMT1CPR17              :1;
        unsigned SMT1CPR18              :1;
        unsigned SMT1CPR19              :1;
        unsigned SMT1CPR20              :1;
        unsigned SMT1CPR21              :1;
        unsigned SMT1CPR22              :1;
        unsigned SMT1CPR23              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRUbits_t;
extern volatile SMT1CPRUbits_t SMT1CPRUbits __at(0x491);
// bitfield macros
#define _SMT1CPRU_CPR_POSN                                  0x0
#define _SMT1CPRU_CPR_POSITION                              0x0
#define _SMT1CPRU_CPR_SIZE                                  0x8
#define _SMT1CPRU_CPR_LENGTH                                0x8
#define _SMT1CPRU_CPR_MASK                                  0xFF
#define _SMT1CPRU_CPR16_POSN                                0x0
#define _SMT1CPRU_CPR16_POSITION                            0x0
#define _SMT1CPRU_CPR16_SIZE                                0x1
#define _SMT1CPRU_CPR16_LENGTH                              0x1
#define _SMT1CPRU_CPR16_MASK                                0x1
#define _SMT1CPRU_CPR17_POSN                                0x1
#define _SMT1CPRU_CPR17_POSITION                            0x1
#define _SMT1CPRU_CPR17_SIZE                                0x1
#define _SMT1CPRU_CPR17_LENGTH                              0x1
#define _SMT1CPRU_CPR17_MASK                                0x2
#define _SMT1CPRU_CPR18_POSN                                0x2
#define _SMT1CPRU_CPR18_POSITION                            0x2
#define _SMT1CPRU_CPR18_SIZE                                0x1
#define _SMT1CPRU_CPR18_LENGTH                              0x1
#define _SMT1CPRU_CPR18_MASK                                0x4
#define _SMT1CPRU_CPR19_POSN                                0x3
#define _SMT1CPRU_CPR19_POSITION                            0x3
#define _SMT1CPRU_CPR19_SIZE                                0x1
#define _SMT1CPRU_CPR19_LENGTH                              0x1
#define _SMT1CPRU_CPR19_MASK                                0x8
#define _SMT1CPRU_CPR20_POSN                                0x4
#define _SMT1CPRU_CPR20_POSITION                            0x4
#define _SMT1CPRU_CPR20_SIZE                                0x1
#define _SMT1CPRU_CPR20_LENGTH                              0x1
#define _SMT1CPRU_CPR20_MASK                                0x10
#define _SMT1CPRU_CPR21_POSN                                0x5
#define _SMT1CPRU_CPR21_POSITION                            0x5
#define _SMT1CPRU_CPR21_SIZE                                0x1
#define _SMT1CPRU_CPR21_LENGTH                              0x1
#define _SMT1CPRU_CPR21_MASK                                0x20
#define _SMT1CPRU_CPR22_POSN                                0x6
#define _SMT1CPRU_CPR22_POSITION                            0x6
#define _SMT1CPRU_CPR22_SIZE                                0x1
#define _SMT1CPRU_CPR22_LENGTH                              0x1
#define _SMT1CPRU_CPR22_MASK                                0x40
#define _SMT1CPRU_CPR23_POSN                                0x7
#define _SMT1CPRU_CPR23_POSITION                            0x7
#define _SMT1CPRU_CPR23_SIZE                                0x1
#define _SMT1CPRU_CPR23_LENGTH                              0x1
#define _SMT1CPRU_CPR23_MASK                                0x80
#define _SMT1CPRU_SMT1CPR16_POSN                            0x0
#define _SMT1CPRU_SMT1CPR16_POSITION                        0x0
#define _SMT1CPRU_SMT1CPR16_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR16_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR16_MASK                            0x1
#define _SMT1CPRU_SMT1CPR17_POSN                            0x1
#define _SMT1CPRU_SMT1CPR17_POSITION                        0x1
#define _SMT1CPRU_SMT1CPR17_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR17_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR17_MASK                            0x2
#define _SMT1CPRU_SMT1CPR18_POSN                            0x2
#define _SMT1CPRU_SMT1CPR18_POSITION                        0x2
#define _SMT1CPRU_SMT1CPR18_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR18_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR18_MASK                            0x4
#define _SMT1CPRU_SMT1CPR19_POSN                            0x3
#define _SMT1CPRU_SMT1CPR19_POSITION                        0x3
#define _SMT1CPRU_SMT1CPR19_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR19_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR19_MASK                            0x8
#define _SMT1CPRU_SMT1CPR20_POSN                            0x4
#define _SMT1CPRU_SMT1CPR20_POSITION                        0x4
#define _SMT1CPRU_SMT1CPR20_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR20_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR20_MASK                            0x10
#define _SMT1CPRU_SMT1CPR21_POSN                            0x5
#define _SMT1CPRU_SMT1CPR21_POSITION                        0x5
#define _SMT1CPRU_SMT1CPR21_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR21_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR21_MASK                            0x20
#define _SMT1CPRU_SMT1CPR22_POSN                            0x6
#define _SMT1CPRU_SMT1CPR22_POSITION                        0x6
#define _SMT1CPRU_SMT1CPR22_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR22_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR22_MASK                            0x40
#define _SMT1CPRU_SMT1CPR23_POSN                            0x7
#define _SMT1CPRU_SMT1CPR23_POSITION                        0x7
#define _SMT1CPRU_SMT1CPR23_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR23_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR23_MASK                            0x80
#define _SMT1CPRU_SMT1CPR_POSN                              0x0
#define _SMT1CPRU_SMT1CPR_POSITION                          0x0
#define _SMT1CPRU_SMT1CPR_SIZE                              0x8
#define _SMT1CPRU_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRU_SMT1CPR_MASK                              0xFF

// Register: SMT1CPW
#define SMT1CPW SMT1CPW
#ifndef __CCI__
extern volatile __uint24                SMT1CPW             __at(0x492);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPW equ 0492h");
#endif

// Register: SMT1CPWL
#define SMT1CPWL SMT1CPWL
extern volatile unsigned char           SMT1CPWL            __at(0x492);
#ifndef _LIB_BUILD
asm("SMT1CPWL equ 0492h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW0                   :1;
        unsigned CPW1                   :1;
        unsigned CPW2                   :1;
        unsigned CPW3                   :1;
        unsigned CPW4                   :1;
        unsigned CPW5                   :1;
        unsigned CPW6                   :1;
        unsigned CPW7                   :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW0               :1;
        unsigned SMT1CPW1               :1;
        unsigned SMT1CPW2               :1;
        unsigned SMT1CPW3               :1;
        unsigned SMT1CPW4               :1;
        unsigned SMT1CPW5               :1;
        unsigned SMT1CPW6               :1;
        unsigned SMT1CPW7               :1;
    };
} SMT1CPWLbits_t;
extern volatile SMT1CPWLbits_t SMT1CPWLbits __at(0x492);
// bitfield macros
#define _SMT1CPWL_CPW_POSN                                  0x0
#define _SMT1CPWL_CPW_POSITION                              0x0
#define _SMT1CPWL_CPW_SIZE                                  0x8
#define _SMT1CPWL_CPW_LENGTH                                0x8
#define _SMT1CPWL_CPW_MASK                                  0xFF
#define _SMT1CPWL_CPW0_POSN                                 0x0
#define _SMT1CPWL_CPW0_POSITION                             0x0
#define _SMT1CPWL_CPW0_SIZE                                 0x1
#define _SMT1CPWL_CPW0_LENGTH                               0x1
#define _SMT1CPWL_CPW0_MASK                                 0x1
#define _SMT1CPWL_CPW1_POSN                                 0x1
#define _SMT1CPWL_CPW1_POSITION                             0x1
#define _SMT1CPWL_CPW1_SIZE                                 0x1
#define _SMT1CPWL_CPW1_LENGTH                               0x1
#define _SMT1CPWL_CPW1_MASK                                 0x2
#define _SMT1CPWL_CPW2_POSN                                 0x2
#define _SMT1CPWL_CPW2_POSITION                             0x2
#define _SMT1CPWL_CPW2_SIZE                                 0x1
#define _SMT1CPWL_CPW2_LENGTH                               0x1
#define _SMT1CPWL_CPW2_MASK                                 0x4
#define _SMT1CPWL_CPW3_POSN                                 0x3
#define _SMT1CPWL_CPW3_POSITION                             0x3
#define _SMT1CPWL_CPW3_SIZE                                 0x1
#define _SMT1CPWL_CPW3_LENGTH                               0x1
#define _SMT1CPWL_CPW3_MASK                                 0x8
#define _SMT1CPWL_CPW4_POSN                                 0x4
#define _SMT1CPWL_CPW4_POSITION                             0x4
#define _SMT1CPWL_CPW4_SIZE                                 0x1
#define _SMT1CPWL_CPW4_LENGTH                               0x1
#define _SMT1CPWL_CPW4_MASK                                 0x10
#define _SMT1CPWL_CPW5_POSN                                 0x5
#define _SMT1CPWL_CPW5_POSITION                             0x5
#define _SMT1CPWL_CPW5_SIZE                                 0x1
#define _SMT1CPWL_CPW5_LENGTH                               0x1
#define _SMT1CPWL_CPW5_MASK                                 0x20
#define _SMT1CPWL_CPW6_POSN                                 0x6
#define _SMT1CPWL_CPW6_POSITION                             0x6
#define _SMT1CPWL_CPW6_SIZE                                 0x1
#define _SMT1CPWL_CPW6_LENGTH                               0x1
#define _SMT1CPWL_CPW6_MASK                                 0x40
#define _SMT1CPWL_CPW7_POSN                                 0x7
#define _SMT1CPWL_CPW7_POSITION                             0x7
#define _SMT1CPWL_CPW7_SIZE                                 0x1
#define _SMT1CPWL_CPW7_LENGTH                               0x1
#define _SMT1CPWL_CPW7_MASK                                 0x80
#define _SMT1CPWL_SMT1CPW_POSN                              0x0
#define _SMT1CPWL_SMT1CPW_POSITION                          0x0
#define _SMT1CPWL_SMT1CPW_SIZE                              0x8
#define _SMT1CPWL_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWL_SMT1CPW_MASK                              0xFF
#define _SMT1CPWL_SMT1CPW0_POSN                             0x0
#define _SMT1CPWL_SMT1CPW0_POSITION                         0x0
#define _SMT1CPWL_SMT1CPW0_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW0_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW0_MASK                             0x1
#define _SMT1CPWL_SMT1CPW1_POSN                             0x1
#define _SMT1CPWL_SMT1CPW1_POSITION                         0x1
#define _SMT1CPWL_SMT1CPW1_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW1_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW1_MASK                             0x2
#define _SMT1CPWL_SMT1CPW2_POSN                             0x2
#define _SMT1CPWL_SMT1CPW2_POSITION                         0x2
#define _SMT1CPWL_SMT1CPW2_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW2_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW2_MASK                             0x4
#define _SMT1CPWL_SMT1CPW3_POSN                             0x3
#define _SMT1CPWL_SMT1CPW3_POSITION                         0x3
#define _SMT1CPWL_SMT1CPW3_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW3_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW3_MASK                             0x8
#define _SMT1CPWL_SMT1CPW4_POSN                             0x4
#define _SMT1CPWL_SMT1CPW4_POSITION                         0x4
#define _SMT1CPWL_SMT1CPW4_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW4_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW4_MASK                             0x10
#define _SMT1CPWL_SMT1CPW5_POSN                             0x5
#define _SMT1CPWL_SMT1CPW5_POSITION                         0x5
#define _SMT1CPWL_SMT1CPW5_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW5_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW5_MASK                             0x20
#define _SMT1CPWL_SMT1CPW6_POSN                             0x6
#define _SMT1CPWL_SMT1CPW6_POSITION                         0x6
#define _SMT1CPWL_SMT1CPW6_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW6_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW6_MASK                             0x40
#define _SMT1CPWL_SMT1CPW7_POSN                             0x7
#define _SMT1CPWL_SMT1CPW7_POSITION                         0x7
#define _SMT1CPWL_SMT1CPW7_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW7_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW7_MASK                             0x80

// Register: SMT1CPWH
#define SMT1CPWH SMT1CPWH
extern volatile unsigned char           SMT1CPWH            __at(0x493);
#ifndef _LIB_BUILD
asm("SMT1CPWH equ 0493h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW8                   :1;
        unsigned CPW9                   :1;
        unsigned CPW10                  :1;
        unsigned CPW11                  :1;
        unsigned CPW12                  :1;
        unsigned CPW13                  :1;
        unsigned CPW14                  :1;
        unsigned CPW15                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW8               :1;
        unsigned SMT1CPW9               :1;
        unsigned SMT1CPW10              :1;
        unsigned SMT1CPW11              :1;
        unsigned SMT1CPW12              :1;
        unsigned SMT1CPW13              :1;
        unsigned SMT1CPW14              :1;
        unsigned SMT1CPW15              :1;
    };
} SMT1CPWHbits_t;
extern volatile SMT1CPWHbits_t SMT1CPWHbits __at(0x493);
// bitfield macros
#define _SMT1CPWH_CPW_POSN                                  0x0
#define _SMT1CPWH_CPW_POSITION                              0x0
#define _SMT1CPWH_CPW_SIZE                                  0x8
#define _SMT1CPWH_CPW_LENGTH                                0x8
#define _SMT1CPWH_CPW_MASK                                  0xFF
#define _SMT1CPWH_CPW8_POSN                                 0x0
#define _SMT1CPWH_CPW8_POSITION                             0x0
#define _SMT1CPWH_CPW8_SIZE                                 0x1
#define _SMT1CPWH_CPW8_LENGTH                               0x1
#define _SMT1CPWH_CPW8_MASK                                 0x1
#define _SMT1CPWH_CPW9_POSN                                 0x1
#define _SMT1CPWH_CPW9_POSITION                             0x1
#define _SMT1CPWH_CPW9_SIZE                                 0x1
#define _SMT1CPWH_CPW9_LENGTH                               0x1
#define _SMT1CPWH_CPW9_MASK                                 0x2
#define _SMT1CPWH_CPW10_POSN                                0x2
#define _SMT1CPWH_CPW10_POSITION                            0x2
#define _SMT1CPWH_CPW10_SIZE                                0x1
#define _SMT1CPWH_CPW10_LENGTH                              0x1
#define _SMT1CPWH_CPW10_MASK                                0x4
#define _SMT1CPWH_CPW11_POSN                                0x3
#define _SMT1CPWH_CPW11_POSITION                            0x3
#define _SMT1CPWH_CPW11_SIZE                                0x1
#define _SMT1CPWH_CPW11_LENGTH                              0x1
#define _SMT1CPWH_CPW11_MASK                                0x8
#define _SMT1CPWH_CPW12_POSN                                0x4
#define _SMT1CPWH_CPW12_POSITION                            0x4
#define _SMT1CPWH_CPW12_SIZE                                0x1
#define _SMT1CPWH_CPW12_LENGTH                              0x1
#define _SMT1CPWH_CPW12_MASK                                0x10
#define _SMT1CPWH_CPW13_POSN                                0x5
#define _SMT1CPWH_CPW13_POSITION                            0x5
#define _SMT1CPWH_CPW13_SIZE                                0x1
#define _SMT1CPWH_CPW13_LENGTH                              0x1
#define _SMT1CPWH_CPW13_MASK                                0x20
#define _SMT1CPWH_CPW14_POSN                                0x6
#define _SMT1CPWH_CPW14_POSITION                            0x6
#define _SMT1CPWH_CPW14_SIZE                                0x1
#define _SMT1CPWH_CPW14_LENGTH                              0x1
#define _SMT1CPWH_CPW14_MASK                                0x40
#define _SMT1CPWH_CPW15_POSN                                0x7
#define _SMT1CPWH_CPW15_POSITION                            0x7
#define _SMT1CPWH_CPW15_SIZE                                0x1
#define _SMT1CPWH_CPW15_LENGTH                              0x1
#define _SMT1CPWH_CPW15_MASK                                0x80
#define _SMT1CPWH_SMT1CPW_POSN                              0x0
#define _SMT1CPWH_SMT1CPW_POSITION                          0x0
#define _SMT1CPWH_SMT1CPW_SIZE                              0x8
#define _SMT1CPWH_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWH_SMT1CPW_MASK                              0xFF
#define _SMT1CPWH_SMT1CPW8_POSN                             0x0
#define _SMT1CPWH_SMT1CPW8_POSITION                         0x0
#define _SMT1CPWH_SMT1CPW8_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW8_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW8_MASK                             0x1
#define _SMT1CPWH_SMT1CPW9_POSN                             0x1
#define _SMT1CPWH_SMT1CPW9_POSITION                         0x1
#define _SMT1CPWH_SMT1CPW9_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW9_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW9_MASK                             0x2
#define _SMT1CPWH_SMT1CPW10_POSN                            0x2
#define _SMT1CPWH_SMT1CPW10_POSITION                        0x2
#define _SMT1CPWH_SMT1CPW10_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW10_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW10_MASK                            0x4
#define _SMT1CPWH_SMT1CPW11_POSN                            0x3
#define _SMT1CPWH_SMT1CPW11_POSITION                        0x3
#define _SMT1CPWH_SMT1CPW11_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW11_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW11_MASK                            0x8
#define _SMT1CPWH_SMT1CPW12_POSN                            0x4
#define _SMT1CPWH_SMT1CPW12_POSITION                        0x4
#define _SMT1CPWH_SMT1CPW12_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW12_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW12_MASK                            0x10
#define _SMT1CPWH_SMT1CPW13_POSN                            0x5
#define _SMT1CPWH_SMT1CPW13_POSITION                        0x5
#define _SMT1CPWH_SMT1CPW13_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW13_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW13_MASK                            0x20
#define _SMT1CPWH_SMT1CPW14_POSN                            0x6
#define _SMT1CPWH_SMT1CPW14_POSITION                        0x6
#define _SMT1CPWH_SMT1CPW14_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW14_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW14_MASK                            0x40
#define _SMT1CPWH_SMT1CPW15_POSN                            0x7
#define _SMT1CPWH_SMT1CPW15_POSITION                        0x7
#define _SMT1CPWH_SMT1CPW15_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW15_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW15_MASK                            0x80

// Register: SMT1CPWU
#define SMT1CPWU SMT1CPWU
extern volatile unsigned char           SMT1CPWU            __at(0x494);
#ifndef _LIB_BUILD
asm("SMT1CPWU equ 0494h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW16                  :1;
        unsigned CPW17                  :1;
        unsigned CPW18                  :1;
        unsigned CPW19                  :1;
        unsigned CPW20                  :1;
        unsigned CPW21                  :1;
        unsigned CPW22                  :1;
        unsigned CPW23                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW16              :1;
        unsigned SMT1CPW17              :1;
        unsigned SMT1CPW18              :1;
        unsigned SMT1CPW19              :1;
        unsigned SMT1CPW20              :1;
        unsigned SMT1CPW21              :1;
        unsigned SMT1CPW22              :1;
        unsigned SMT1CPW23              :1;
    };
} SMT1CPWUbits_t;
extern volatile SMT1CPWUbits_t SMT1CPWUbits __at(0x494);
// bitfield macros
#define _SMT1CPWU_CPW_POSN                                  0x0
#define _SMT1CPWU_CPW_POSITION                              0x0
#define _SMT1CPWU_CPW_SIZE                                  0x8
#define _SMT1CPWU_CPW_LENGTH                                0x8
#define _SMT1CPWU_CPW_MASK                                  0xFF
#define _SMT1CPWU_CPW16_POSN                                0x0
#define _SMT1CPWU_CPW16_POSITION                            0x0
#define _SMT1CPWU_CPW16_SIZE                                0x1
#define _SMT1CPWU_CPW16_LENGTH                              0x1
#define _SMT1CPWU_CPW16_MASK                                0x1
#define _SMT1CPWU_CPW17_POSN                                0x1
#define _SMT1CPWU_CPW17_POSITION                            0x1
#define _SMT1CPWU_CPW17_SIZE                                0x1
#define _SMT1CPWU_CPW17_LENGTH                              0x1
#define _SMT1CPWU_CPW17_MASK                                0x2
#define _SMT1CPWU_CPW18_POSN                                0x2
#define _SMT1CPWU_CPW18_POSITION                            0x2
#define _SMT1CPWU_CPW18_SIZE                                0x1
#define _SMT1CPWU_CPW18_LENGTH                              0x1
#define _SMT1CPWU_CPW18_MASK                                0x4
#define _SMT1CPWU_CPW19_POSN                                0x3
#define _SMT1CPWU_CPW19_POSITION                            0x3
#define _SMT1CPWU_CPW19_SIZE                                0x1
#define _SMT1CPWU_CPW19_LENGTH                              0x1
#define _SMT1CPWU_CPW19_MASK                                0x8
#define _SMT1CPWU_CPW20_POSN                                0x4
#define _SMT1CPWU_CPW20_POSITION                            0x4
#define _SMT1CPWU_CPW20_SIZE                                0x1
#define _SMT1CPWU_CPW20_LENGTH                              0x1
#define _SMT1CPWU_CPW20_MASK                                0x10
#define _SMT1CPWU_CPW21_POSN                                0x5
#define _SMT1CPWU_CPW21_POSITION                            0x5
#define _SMT1CPWU_CPW21_SIZE                                0x1
#define _SMT1CPWU_CPW21_LENGTH                              0x1
#define _SMT1CPWU_CPW21_MASK                                0x20
#define _SMT1CPWU_CPW22_POSN                                0x6
#define _SMT1CPWU_CPW22_POSITION                            0x6
#define _SMT1CPWU_CPW22_SIZE                                0x1
#define _SMT1CPWU_CPW22_LENGTH                              0x1
#define _SMT1CPWU_CPW22_MASK                                0x40
#define _SMT1CPWU_CPW23_POSN                                0x7
#define _SMT1CPWU_CPW23_POSITION                            0x7
#define _SMT1CPWU_CPW23_SIZE                                0x1
#define _SMT1CPWU_CPW23_LENGTH                              0x1
#define _SMT1CPWU_CPW23_MASK                                0x80
#define _SMT1CPWU_SMT1CPW_POSN                              0x0
#define _SMT1CPWU_SMT1CPW_POSITION                          0x0
#define _SMT1CPWU_SMT1CPW_SIZE                              0x8
#define _SMT1CPWU_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWU_SMT1CPW_MASK                              0xFF
#define _SMT1CPWU_SMT1CPW16_POSN                            0x0
#define _SMT1CPWU_SMT1CPW16_POSITION                        0x0
#define _SMT1CPWU_SMT1CPW16_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW16_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW16_MASK                            0x1
#define _SMT1CPWU_SMT1CPW17_POSN                            0x1
#define _SMT1CPWU_SMT1CPW17_POSITION                        0x1
#define _SMT1CPWU_SMT1CPW17_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW17_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW17_MASK                            0x2
#define _SMT1CPWU_SMT1CPW18_POSN                            0x2
#define _SMT1CPWU_SMT1CPW18_POSITION                        0x2
#define _SMT1CPWU_SMT1CPW18_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW18_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW18_MASK                            0x4
#define _SMT1CPWU_SMT1CPW19_POSN                            0x3
#define _SMT1CPWU_SMT1CPW19_POSITION                        0x3
#define _SMT1CPWU_SMT1CPW19_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW19_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW19_MASK                            0x8
#define _SMT1CPWU_SMT1CPW20_POSN                            0x4
#define _SMT1CPWU_SMT1CPW20_POSITION                        0x4
#define _SMT1CPWU_SMT1CPW20_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW20_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW20_MASK                            0x10
#define _SMT1CPWU_SMT1CPW21_POSN                            0x5
#define _SMT1CPWU_SMT1CPW21_POSITION                        0x5
#define _SMT1CPWU_SMT1CPW21_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW21_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW21_MASK                            0x20
#define _SMT1CPWU_SMT1CPW22_POSN                            0x6
#define _SMT1CPWU_SMT1CPW22_POSITION                        0x6
#define _SMT1CPWU_SMT1CPW22_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW22_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW22_MASK                            0x40
#define _SMT1CPWU_SMT1CPW23_POSN                            0x7
#define _SMT1CPWU_SMT1CPW23_POSITION                        0x7
#define _SMT1CPWU_SMT1CPW23_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW23_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW23_MASK                            0x80

// Register: SMT1PR
#define SMT1PR SMT1PR
#ifndef __CCI__
extern volatile __uint24                SMT1PR              __at(0x495);
#endif
#ifndef _LIB_BUILD
asm("SMT1PR equ 0495h");
#endif

// Register: SMT1PRL
#define SMT1PRL SMT1PRL
extern volatile unsigned char           SMT1PRL             __at(0x495);
#ifndef _LIB_BUILD
asm("SMT1PRL equ 0495h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR0                :1;
        unsigned SMT1PR1                :1;
        unsigned SMT1PR2                :1;
        unsigned SMT1PR3                :1;
        unsigned SMT1PR4                :1;
        unsigned SMT1PR5                :1;
        unsigned SMT1PR6                :1;
        unsigned SMT1PR7                :1;
    };
} SMT1PRLbits_t;
extern volatile SMT1PRLbits_t SMT1PRLbits __at(0x495);
// bitfield macros
#define _SMT1PRL_SMT1PR_POSN                                0x0
#define _SMT1PRL_SMT1PR_POSITION                            0x0
#define _SMT1PRL_SMT1PR_SIZE                                0x8
#define _SMT1PRL_SMT1PR_LENGTH                              0x8
#define _SMT1PRL_SMT1PR_MASK                                0xFF
#define _SMT1PRL_SMT1PR0_POSN                               0x0
#define _SMT1PRL_SMT1PR0_POSITION                           0x0
#define _SMT1PRL_SMT1PR0_SIZE                               0x1
#define _SMT1PRL_SMT1PR0_LENGTH                             0x1
#define _SMT1PRL_SMT1PR0_MASK                               0x1
#define _SMT1PRL_SMT1PR1_POSN                               0x1
#define _SMT1PRL_SMT1PR1_POSITION                           0x1
#define _SMT1PRL_SMT1PR1_SIZE                               0x1
#define _SMT1PRL_SMT1PR1_LENGTH                             0x1
#define _SMT1PRL_SMT1PR1_MASK                               0x2
#define _SMT1PRL_SMT1PR2_POSN                               0x2
#define _SMT1PRL_SMT1PR2_POSITION                           0x2
#define _SMT1PRL_SMT1PR2_SIZE                               0x1
#define _SMT1PRL_SMT1PR2_LENGTH                             0x1
#define _SMT1PRL_SMT1PR2_MASK                               0x4
#define _SMT1PRL_SMT1PR3_POSN                               0x3
#define _SMT1PRL_SMT1PR3_POSITION                           0x3
#define _SMT1PRL_SMT1PR3_SIZE                               0x1
#define _SMT1PRL_SMT1PR3_LENGTH                             0x1
#define _SMT1PRL_SMT1PR3_MASK                               0x8
#define _SMT1PRL_SMT1PR4_POSN                               0x4
#define _SMT1PRL_SMT1PR4_POSITION                           0x4
#define _SMT1PRL_SMT1PR4_SIZE                               0x1
#define _SMT1PRL_SMT1PR4_LENGTH                             0x1
#define _SMT1PRL_SMT1PR4_MASK                               0x10
#define _SMT1PRL_SMT1PR5_POSN                               0x5
#define _SMT1PRL_SMT1PR5_POSITION                           0x5
#define _SMT1PRL_SMT1PR5_SIZE                               0x1
#define _SMT1PRL_SMT1PR5_LENGTH                             0x1
#define _SMT1PRL_SMT1PR5_MASK                               0x20
#define _SMT1PRL_SMT1PR6_POSN                               0x6
#define _SMT1PRL_SMT1PR6_POSITION                           0x6
#define _SMT1PRL_SMT1PR6_SIZE                               0x1
#define _SMT1PRL_SMT1PR6_LENGTH                             0x1
#define _SMT1PRL_SMT1PR6_MASK                               0x40
#define _SMT1PRL_SMT1PR7_POSN                               0x7
#define _SMT1PRL_SMT1PR7_POSITION                           0x7
#define _SMT1PRL_SMT1PR7_SIZE                               0x1
#define _SMT1PRL_SMT1PR7_LENGTH                             0x1
#define _SMT1PRL_SMT1PR7_MASK                               0x80

// Register: SMT1PRH
#define SMT1PRH SMT1PRH
extern volatile unsigned char           SMT1PRH             __at(0x496);
#ifndef _LIB_BUILD
asm("SMT1PRH equ 0496h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR8                :1;
        unsigned SMT1PR9                :1;
        unsigned SMT1PR10               :1;
        unsigned SMT1PR11               :1;
        unsigned SMT1PR12               :1;
        unsigned SMT1PR13               :1;
        unsigned SMT1PR14               :1;
        unsigned SMT1PR15               :1;
    };
} SMT1PRHbits_t;
extern volatile SMT1PRHbits_t SMT1PRHbits __at(0x496);
// bitfield macros
#define _SMT1PRH_SMT1PR_POSN                                0x0
#define _SMT1PRH_SMT1PR_POSITION                            0x0
#define _SMT1PRH_SMT1PR_SIZE                                0x8
#define _SMT1PRH_SMT1PR_LENGTH                              0x8
#define _SMT1PRH_SMT1PR_MASK                                0xFF
#define _SMT1PRH_SMT1PR8_POSN                               0x0
#define _SMT1PRH_SMT1PR8_POSITION                           0x0
#define _SMT1PRH_SMT1PR8_SIZE                               0x1
#define _SMT1PRH_SMT1PR8_LENGTH                             0x1
#define _SMT1PRH_SMT1PR8_MASK                               0x1
#define _SMT1PRH_SMT1PR9_POSN                               0x1
#define _SMT1PRH_SMT1PR9_POSITION                           0x1
#define _SMT1PRH_SMT1PR9_SIZE                               0x1
#define _SMT1PRH_SMT1PR9_LENGTH                             0x1
#define _SMT1PRH_SMT1PR9_MASK                               0x2
#define _SMT1PRH_SMT1PR10_POSN                              0x2
#define _SMT1PRH_SMT1PR10_POSITION                          0x2
#define _SMT1PRH_SMT1PR10_SIZE                              0x1
#define _SMT1PRH_SMT1PR10_LENGTH                            0x1
#define _SMT1PRH_SMT1PR10_MASK                              0x4
#define _SMT1PRH_SMT1PR11_POSN                              0x3
#define _SMT1PRH_SMT1PR11_POSITION                          0x3
#define _SMT1PRH_SMT1PR11_SIZE                              0x1
#define _SMT1PRH_SMT1PR11_LENGTH                            0x1
#define _SMT1PRH_SMT1PR11_MASK                              0x8
#define _SMT1PRH_SMT1PR12_POSN                              0x4
#define _SMT1PRH_SMT1PR12_POSITION                          0x4
#define _SMT1PRH_SMT1PR12_SIZE                              0x1
#define _SMT1PRH_SMT1PR12_LENGTH                            0x1
#define _SMT1PRH_SMT1PR12_MASK                              0x10
#define _SMT1PRH_SMT1PR13_POSN                              0x5
#define _SMT1PRH_SMT1PR13_POSITION                          0x5
#define _SMT1PRH_SMT1PR13_SIZE                              0x1
#define _SMT1PRH_SMT1PR13_LENGTH                            0x1
#define _SMT1PRH_SMT1PR13_MASK                              0x20
#define _SMT1PRH_SMT1PR14_POSN                              0x6
#define _SMT1PRH_SMT1PR14_POSITION                          0x6
#define _SMT1PRH_SMT1PR14_SIZE                              0x1
#define _SMT1PRH_SMT1PR14_LENGTH                            0x1
#define _SMT1PRH_SMT1PR14_MASK                              0x40
#define _SMT1PRH_SMT1PR15_POSN                              0x7
#define _SMT1PRH_SMT1PR15_POSITION                          0x7
#define _SMT1PRH_SMT1PR15_SIZE                              0x1
#define _SMT1PRH_SMT1PR15_LENGTH                            0x1
#define _SMT1PRH_SMT1PR15_MASK                              0x80

// Register: SMT1PRU
#define SMT1PRU SMT1PRU
extern volatile unsigned char           SMT1PRU             __at(0x497);
#ifndef _LIB_BUILD
asm("SMT1PRU equ 0497h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR16               :1;
        unsigned SMT1PR17               :1;
        unsigned SMT1PR18               :1;
        unsigned SMT1PR19               :1;
        unsigned SMT1PR20               :1;
        unsigned SMT1PR21               :1;
        unsigned SMT1PR22               :1;
        unsigned SMT1PR23               :1;
    };
} SMT1PRUbits_t;
extern volatile SMT1PRUbits_t SMT1PRUbits __at(0x497);
// bitfield macros
#define _SMT1PRU_SMT1PR_POSN                                0x0
#define _SMT1PRU_SMT1PR_POSITION                            0x0
#define _SMT1PRU_SMT1PR_SIZE                                0x8
#define _SMT1PRU_SMT1PR_LENGTH                              0x8
#define _SMT1PRU_SMT1PR_MASK                                0xFF
#define _SMT1PRU_SMT1PR16_POSN                              0x0
#define _SMT1PRU_SMT1PR16_POSITION                          0x0
#define _SMT1PRU_SMT1PR16_SIZE                              0x1
#define _SMT1PRU_SMT1PR16_LENGTH                            0x1
#define _SMT1PRU_SMT1PR16_MASK                              0x1
#define _SMT1PRU_SMT1PR17_POSN                              0x1
#define _SMT1PRU_SMT1PR17_POSITION                          0x1
#define _SMT1PRU_SMT1PR17_SIZE                              0x1
#define _SMT1PRU_SMT1PR17_LENGTH                            0x1
#define _SMT1PRU_SMT1PR17_MASK                              0x2
#define _SMT1PRU_SMT1PR18_POSN                              0x2
#define _SMT1PRU_SMT1PR18_POSITION                          0x2
#define _SMT1PRU_SMT1PR18_SIZE                              0x1
#define _SMT1PRU_SMT1PR18_LENGTH                            0x1
#define _SMT1PRU_SMT1PR18_MASK                              0x4
#define _SMT1PRU_SMT1PR19_POSN                              0x3
#define _SMT1PRU_SMT1PR19_POSITION                          0x3
#define _SMT1PRU_SMT1PR19_SIZE                              0x1
#define _SMT1PRU_SMT1PR19_LENGTH                            0x1
#define _SMT1PRU_SMT1PR19_MASK                              0x8
#define _SMT1PRU_SMT1PR20_POSN                              0x4
#define _SMT1PRU_SMT1PR20_POSITION                          0x4
#define _SMT1PRU_SMT1PR20_SIZE                              0x1
#define _SMT1PRU_SMT1PR20_LENGTH                            0x1
#define _SMT1PRU_SMT1PR20_MASK                              0x10
#define _SMT1PRU_SMT1PR21_POSN                              0x5
#define _SMT1PRU_SMT1PR21_POSITION                          0x5
#define _SMT1PRU_SMT1PR21_SIZE                              0x1
#define _SMT1PRU_SMT1PR21_LENGTH                            0x1
#define _SMT1PRU_SMT1PR21_MASK                              0x20
#define _SMT1PRU_SMT1PR22_POSN                              0x6
#define _SMT1PRU_SMT1PR22_POSITION                          0x6
#define _SMT1PRU_SMT1PR22_SIZE                              0x1
#define _SMT1PRU_SMT1PR22_LENGTH                            0x1
#define _SMT1PRU_SMT1PR22_MASK                              0x40
#define _SMT1PRU_SMT1PR23_POSN                              0x7
#define _SMT1PRU_SMT1PR23_POSITION                          0x7
#define _SMT1PRU_SMT1PR23_SIZE                              0x1
#define _SMT1PRU_SMT1PR23_LENGTH                            0x1
#define _SMT1PRU_SMT1PR23_MASK                              0x80

// Register: SMT1CON0
#define SMT1CON0 SMT1CON0
extern volatile unsigned char           SMT1CON0            __at(0x498);
#ifndef _LIB_BUILD
asm("SMT1CON0 equ 0498h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1PS                 :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT1PS0                :1;
        unsigned SMT1PS1                :1;
        unsigned                        :5;
        unsigned SMT1EN                 :1;
    };
} SMT1CON0bits_t;
extern volatile SMT1CON0bits_t SMT1CON0bits __at(0x498);
// bitfield macros
#define _SMT1CON0_SMT1PS_POSN                               0x0
#define _SMT1CON0_SMT1PS_POSITION                           0x0
#define _SMT1CON0_SMT1PS_SIZE                               0x2
#define _SMT1CON0_SMT1PS_LENGTH                             0x2
#define _SMT1CON0_SMT1PS_MASK                               0x3
#define _SMT1CON0_CPOL_POSN                                 0x2
#define _SMT1CON0_CPOL_POSITION                             0x2
#define _SMT1CON0_CPOL_SIZE                                 0x1
#define _SMT1CON0_CPOL_LENGTH                               0x1
#define _SMT1CON0_CPOL_MASK                                 0x4
#define _SMT1CON0_SPOL_POSN                                 0x3
#define _SMT1CON0_SPOL_POSITION                             0x3
#define _SMT1CON0_SPOL_SIZE                                 0x1
#define _SMT1CON0_SPOL_LENGTH                               0x1
#define _SMT1CON0_SPOL_MASK                                 0x8
#define _SMT1CON0_WPOL_POSN                                 0x4
#define _SMT1CON0_WPOL_POSITION                             0x4
#define _SMT1CON0_WPOL_SIZE                                 0x1
#define _SMT1CON0_WPOL_LENGTH                               0x1
#define _SMT1CON0_WPOL_MASK                                 0x10
#define _SMT1CON0_STP_POSN                                  0x5
#define _SMT1CON0_STP_POSITION                              0x5
#define _SMT1CON0_STP_SIZE                                  0x1
#define _SMT1CON0_STP_LENGTH                                0x1
#define _SMT1CON0_STP_MASK                                  0x20
#define _SMT1CON0_EN_POSN                                   0x7
#define _SMT1CON0_EN_POSITION                               0x7
#define _SMT1CON0_EN_SIZE                                   0x1
#define _SMT1CON0_EN_LENGTH                                 0x1
#define _SMT1CON0_EN_MASK                                   0x80
#define _SMT1CON0_SMT1PS0_POSN                              0x0
#define _SMT1CON0_SMT1PS0_POSITION                          0x0
#define _SMT1CON0_SMT1PS0_SIZE                              0x1
#define _SMT1CON0_SMT1PS0_LENGTH                            0x1
#define _SMT1CON0_SMT1PS0_MASK                              0x1
#define _SMT1CON0_SMT1PS1_POSN                              0x1
#define _SMT1CON0_SMT1PS1_POSITION                          0x1
#define _SMT1CON0_SMT1PS1_SIZE                              0x1
#define _SMT1CON0_SMT1PS1_LENGTH                            0x1
#define _SMT1CON0_SMT1PS1_MASK                              0x2
#define _SMT1CON0_SMT1EN_POSN                               0x7
#define _SMT1CON0_SMT1EN_POSITION                           0x7
#define _SMT1CON0_SMT1EN_SIZE                               0x1
#define _SMT1CON0_SMT1EN_LENGTH                             0x1
#define _SMT1CON0_SMT1EN_MASK                               0x80

// Register: SMT1CON1
#define SMT1CON1 SMT1CON1
extern volatile unsigned char           SMT1CON1            __at(0x499);
#ifndef _LIB_BUILD
asm("SMT1CON1 equ 0499h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned SMT1GO                 :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
} SMT1CON1bits_t;
extern volatile SMT1CON1bits_t SMT1CON1bits __at(0x499);
// bitfield macros
#define _SMT1CON1_MODE_POSN                                 0x0
#define _SMT1CON1_MODE_POSITION                             0x0
#define _SMT1CON1_MODE_SIZE                                 0x4
#define _SMT1CON1_MODE_LENGTH                               0x4
#define _SMT1CON1_MODE_MASK                                 0xF
#define _SMT1CON1_REPEAT_POSN                               0x6
#define _SMT1CON1_REPEAT_POSITION                           0x6
#define _SMT1CON1_REPEAT_SIZE                               0x1
#define _SMT1CON1_REPEAT_LENGTH                             0x1
#define _SMT1CON1_REPEAT_MASK                               0x40
#define _SMT1CON1_SMT1GO_POSN                               0x7
#define _SMT1CON1_SMT1GO_POSITION                           0x7
#define _SMT1CON1_SMT1GO_SIZE                               0x1
#define _SMT1CON1_SMT1GO_LENGTH                             0x1
#define _SMT1CON1_SMT1GO_MASK                               0x80
#define _SMT1CON1_MODE0_POSN                                0x0
#define _SMT1CON1_MODE0_POSITION                            0x0
#define _SMT1CON1_MODE0_SIZE                                0x1
#define _SMT1CON1_MODE0_LENGTH                              0x1
#define _SMT1CON1_MODE0_MASK                                0x1
#define _SMT1CON1_MODE1_POSN                                0x1
#define _SMT1CON1_MODE1_POSITION                            0x1
#define _SMT1CON1_MODE1_SIZE                                0x1
#define _SMT1CON1_MODE1_LENGTH                              0x1
#define _SMT1CON1_MODE1_MASK                                0x2
#define _SMT1CON1_MODE2_POSN                                0x2
#define _SMT1CON1_MODE2_POSITION                            0x2
#define _SMT1CON1_MODE2_SIZE                                0x1
#define _SMT1CON1_MODE2_LENGTH                              0x1
#define _SMT1CON1_MODE2_MASK                                0x4
#define _SMT1CON1_MODE3_POSN                                0x3
#define _SMT1CON1_MODE3_POSITION                            0x3
#define _SMT1CON1_MODE3_SIZE                                0x1
#define _SMT1CON1_MODE3_LENGTH                              0x1
#define _SMT1CON1_MODE3_MASK                                0x8

// Register: SMT1STAT
#define SMT1STAT SMT1STAT
extern volatile unsigned char           SMT1STAT            __at(0x49A);
#ifndef _LIB_BUILD
asm("SMT1STAT equ 049Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT1AS                 :1;
        unsigned SMT1WS                 :1;
        unsigned SMT1TS                 :1;
        unsigned                        :2;
        unsigned SMT1RESET              :1;
        unsigned SMT1CPWUP              :1;
        unsigned SMT1CPRUP              :1;
    };
} SMT1STATbits_t;
extern volatile SMT1STATbits_t SMT1STATbits __at(0x49A);
// bitfield macros
#define _SMT1STAT_AS_POSN                                   0x0
#define _SMT1STAT_AS_POSITION                               0x0
#define _SMT1STAT_AS_SIZE                                   0x1
#define _SMT1STAT_AS_LENGTH                                 0x1
#define _SMT1STAT_AS_MASK                                   0x1
#define _SMT1STAT_WS_POSN                                   0x1
#define _SMT1STAT_WS_POSITION                               0x1
#define _SMT1STAT_WS_SIZE                                   0x1
#define _SMT1STAT_WS_LENGTH                                 0x1
#define _SMT1STAT_WS_MASK                                   0x2
#define _SMT1STAT_TS_POSN                                   0x2
#define _SMT1STAT_TS_POSITION                               0x2
#define _SMT1STAT_TS_SIZE                                   0x1
#define _SMT1STAT_TS_LENGTH                                 0x1
#define _SMT1STAT_TS_MASK                                   0x4
#define _SMT1STAT_RST_POSN                                  0x5
#define _SMT1STAT_RST_POSITION                              0x5
#define _SMT1STAT_RST_SIZE                                  0x1
#define _SMT1STAT_RST_LENGTH                                0x1
#define _SMT1STAT_RST_MASK                                  0x20
#define _SMT1STAT_CPWUP_POSN                                0x6
#define _SMT1STAT_CPWUP_POSITION                            0x6
#define _SMT1STAT_CPWUP_SIZE                                0x1
#define _SMT1STAT_CPWUP_LENGTH                              0x1
#define _SMT1STAT_CPWUP_MASK                                0x40
#define _SMT1STAT_CPRUP_POSN                                0x7
#define _SMT1STAT_CPRUP_POSITION                            0x7
#define _SMT1STAT_CPRUP_SIZE                                0x1
#define _SMT1STAT_CPRUP_LENGTH                              0x1
#define _SMT1STAT_CPRUP_MASK                                0x80
#define _SMT1STAT_SMT1AS_POSN                               0x0
#define _SMT1STAT_SMT1AS_POSITION                           0x0
#define _SMT1STAT_SMT1AS_SIZE                               0x1
#define _SMT1STAT_SMT1AS_LENGTH                             0x1
#define _SMT1STAT_SMT1AS_MASK                               0x1
#define _SMT1STAT_SMT1WS_POSN                               0x1
#define _SMT1STAT_SMT1WS_POSITION                           0x1
#define _SMT1STAT_SMT1WS_SIZE                               0x1
#define _SMT1STAT_SMT1WS_LENGTH                             0x1
#define _SMT1STAT_SMT1WS_MASK                               0x2
#define _SMT1STAT_SMT1TS_POSN                               0x2
#define _SMT1STAT_SMT1TS_POSITION                           0x2
#define _SMT1STAT_SMT1TS_SIZE                               0x1
#define _SMT1STAT_SMT1TS_LENGTH                             0x1
#define _SMT1STAT_SMT1TS_MASK                               0x4
#define _SMT1STAT_SMT1RESET_POSN                            0x5
#define _SMT1STAT_SMT1RESET_POSITION                        0x5
#define _SMT1STAT_SMT1RESET_SIZE                            0x1
#define _SMT1STAT_SMT1RESET_LENGTH                          0x1
#define _SMT1STAT_SMT1RESET_MASK                            0x20
#define _SMT1STAT_SMT1CPWUP_POSN                            0x6
#define _SMT1STAT_SMT1CPWUP_POSITION                        0x6
#define _SMT1STAT_SMT1CPWUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPWUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPWUP_MASK                            0x40
#define _SMT1STAT_SMT1CPRUP_POSN                            0x7
#define _SMT1STAT_SMT1CPRUP_POSITION                        0x7
#define _SMT1STAT_SMT1CPRUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPRUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPRUP_MASK                            0x80

// Register: SMT1CLK
#define SMT1CLK SMT1CLK
extern volatile unsigned char           SMT1CLK             __at(0x49B);
#ifndef _LIB_BUILD
asm("SMT1CLK equ 049Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :3;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT1CSEL               :3;
    };
    struct {
        unsigned SMT1CSEL0              :1;
        unsigned SMT1CSEL1              :1;
        unsigned SMT1CSEL2              :1;
    };
} SMT1CLKbits_t;
extern volatile SMT1CLKbits_t SMT1CLKbits __at(0x49B);
// bitfield macros
#define _SMT1CLK_CSEL_POSN                                  0x0
#define _SMT1CLK_CSEL_POSITION                              0x0
#define _SMT1CLK_CSEL_SIZE                                  0x3
#define _SMT1CLK_CSEL_LENGTH                                0x3
#define _SMT1CLK_CSEL_MASK                                  0x7
#define _SMT1CLK_CSEL0_POSN                                 0x0
#define _SMT1CLK_CSEL0_POSITION                             0x0
#define _SMT1CLK_CSEL0_SIZE                                 0x1
#define _SMT1CLK_CSEL0_LENGTH                               0x1
#define _SMT1CLK_CSEL0_MASK                                 0x1
#define _SMT1CLK_CSEL1_POSN                                 0x1
#define _SMT1CLK_CSEL1_POSITION                             0x1
#define _SMT1CLK_CSEL1_SIZE                                 0x1
#define _SMT1CLK_CSEL1_LENGTH                               0x1
#define _SMT1CLK_CSEL1_MASK                                 0x2
#define _SMT1CLK_CSEL2_POSN                                 0x2
#define _SMT1CLK_CSEL2_POSITION                             0x2
#define _SMT1CLK_CSEL2_SIZE                                 0x1
#define _SMT1CLK_CSEL2_LENGTH                               0x1
#define _SMT1CLK_CSEL2_MASK                                 0x4
#define _SMT1CLK_SMT1CSEL_POSN                              0x0
#define _SMT1CLK_SMT1CSEL_POSITION                          0x0
#define _SMT1CLK_SMT1CSEL_SIZE                              0x3
#define _SMT1CLK_SMT1CSEL_LENGTH                            0x3
#define _SMT1CLK_SMT1CSEL_MASK                              0x7
#define _SMT1CLK_SMT1CSEL0_POSN                             0x0
#define _SMT1CLK_SMT1CSEL0_POSITION                         0x0
#define _SMT1CLK_SMT1CSEL0_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL0_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL0_MASK                             0x1
#define _SMT1CLK_SMT1CSEL1_POSN                             0x1
#define _SMT1CLK_SMT1CSEL1_POSITION                         0x1
#define _SMT1CLK_SMT1CSEL1_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL1_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL1_MASK                             0x2
#define _SMT1CLK_SMT1CSEL2_POSN                             0x2
#define _SMT1CLK_SMT1CSEL2_POSITION                         0x2
#define _SMT1CLK_SMT1CSEL2_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL2_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL2_MASK                             0x4

// Register: SMT1SIG
#define SMT1SIG SMT1SIG
extern volatile unsigned char           SMT1SIG             __at(0x49C);
#ifndef _LIB_BUILD
asm("SMT1SIG equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :5;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT1SSEL               :5;
    };
    struct {
        unsigned SMT1SSEL0              :1;
        unsigned SMT1SSEL1              :1;
        unsigned SMT1SSEL2              :1;
        unsigned SMT1SSEL3              :1;
        unsigned SMT1SSEL4              :1;
    };
} SMT1SIGbits_t;
extern volatile SMT1SIGbits_t SMT1SIGbits __at(0x49C);
// bitfield macros
#define _SMT1SIG_SSEL_POSN                                  0x0
#define _SMT1SIG_SSEL_POSITION                              0x0
#define _SMT1SIG_SSEL_SIZE                                  0x5
#define _SMT1SIG_SSEL_LENGTH                                0x5
#define _SMT1SIG_SSEL_MASK                                  0x1F
#define _SMT1SIG_SSEL0_POSN                                 0x0
#define _SMT1SIG_SSEL0_POSITION                             0x0
#define _SMT1SIG_SSEL0_SIZE                                 0x1
#define _SMT1SIG_SSEL0_LENGTH                               0x1
#define _SMT1SIG_SSEL0_MASK                                 0x1
#define _SMT1SIG_SSEL1_POSN                                 0x1
#define _SMT1SIG_SSEL1_POSITION                             0x1
#define _SMT1SIG_SSEL1_SIZE                                 0x1
#define _SMT1SIG_SSEL1_LENGTH                               0x1
#define _SMT1SIG_SSEL1_MASK                                 0x2
#define _SMT1SIG_SSEL2_POSN                                 0x2
#define _SMT1SIG_SSEL2_POSITION                             0x2
#define _SMT1SIG_SSEL2_SIZE                                 0x1
#define _SMT1SIG_SSEL2_LENGTH                               0x1
#define _SMT1SIG_SSEL2_MASK                                 0x4
#define _SMT1SIG_SSEL3_POSN                                 0x3
#define _SMT1SIG_SSEL3_POSITION                             0x3
#define _SMT1SIG_SSEL3_SIZE                                 0x1
#define _SMT1SIG_SSEL3_LENGTH                               0x1
#define _SMT1SIG_SSEL3_MASK                                 0x8
#define _SMT1SIG_SSEL4_POSN                                 0x4
#define _SMT1SIG_SSEL4_POSITION                             0x4
#define _SMT1SIG_SSEL4_SIZE                                 0x1
#define _SMT1SIG_SSEL4_LENGTH                               0x1
#define _SMT1SIG_SSEL4_MASK                                 0x10
#define _SMT1SIG_SMT1SSEL_POSN                              0x0
#define _SMT1SIG_SMT1SSEL_POSITION                          0x0
#define _SMT1SIG_SMT1SSEL_SIZE                              0x5
#define _SMT1SIG_SMT1SSEL_LENGTH                            0x5
#define _SMT1SIG_SMT1SSEL_MASK                              0x1F
#define _SMT1SIG_SMT1SSEL0_POSN                             0x0
#define _SMT1SIG_SMT1SSEL0_POSITION                         0x0
#define _SMT1SIG_SMT1SSEL0_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL0_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL0_MASK                             0x1
#define _SMT1SIG_SMT1SSEL1_POSN                             0x1
#define _SMT1SIG_SMT1SSEL1_POSITION                         0x1
#define _SMT1SIG_SMT1SSEL1_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL1_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL1_MASK                             0x2
#define _SMT1SIG_SMT1SSEL2_POSN                             0x2
#define _SMT1SIG_SMT1SSEL2_POSITION                         0x2
#define _SMT1SIG_SMT1SSEL2_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL2_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL2_MASK                             0x4
#define _SMT1SIG_SMT1SSEL3_POSN                             0x3
#define _SMT1SIG_SMT1SSEL3_POSITION                         0x3
#define _SMT1SIG_SMT1SSEL3_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL3_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL3_MASK                             0x8
#define _SMT1SIG_SMT1SSEL4_POSN                             0x4
#define _SMT1SIG_SMT1SSEL4_POSITION                         0x4
#define _SMT1SIG_SMT1SSEL4_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL4_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL4_MASK                             0x10

// Register: SMT1WIN
#define SMT1WIN SMT1WIN
extern volatile unsigned char           SMT1WIN             __at(0x49D);
#ifndef _LIB_BUILD
asm("SMT1WIN equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :5;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT1WSEL               :5;
    };
    struct {
        unsigned SMT1WSEL0              :1;
        unsigned SMT1WSEL1              :1;
        unsigned SMT1WSEL2              :1;
        unsigned SMT1WSEL3              :1;
        unsigned SMT1WSEL4              :1;
    };
} SMT1WINbits_t;
extern volatile SMT1WINbits_t SMT1WINbits __at(0x49D);
// bitfield macros
#define _SMT1WIN_WSEL_POSN                                  0x0
#define _SMT1WIN_WSEL_POSITION                              0x0
#define _SMT1WIN_WSEL_SIZE                                  0x5
#define _SMT1WIN_WSEL_LENGTH                                0x5
#define _SMT1WIN_WSEL_MASK                                  0x1F
#define _SMT1WIN_WSEL0_POSN                                 0x0
#define _SMT1WIN_WSEL0_POSITION                             0x0
#define _SMT1WIN_WSEL0_SIZE                                 0x1
#define _SMT1WIN_WSEL0_LENGTH                               0x1
#define _SMT1WIN_WSEL0_MASK                                 0x1
#define _SMT1WIN_WSEL1_POSN                                 0x1
#define _SMT1WIN_WSEL1_POSITION                             0x1
#define _SMT1WIN_WSEL1_SIZE                                 0x1
#define _SMT1WIN_WSEL1_LENGTH                               0x1
#define _SMT1WIN_WSEL1_MASK                                 0x2
#define _SMT1WIN_WSEL2_POSN                                 0x2
#define _SMT1WIN_WSEL2_POSITION                             0x2
#define _SMT1WIN_WSEL2_SIZE                                 0x1
#define _SMT1WIN_WSEL2_LENGTH                               0x1
#define _SMT1WIN_WSEL2_MASK                                 0x4
#define _SMT1WIN_WSEL3_POSN                                 0x3
#define _SMT1WIN_WSEL3_POSITION                             0x3
#define _SMT1WIN_WSEL3_SIZE                                 0x1
#define _SMT1WIN_WSEL3_LENGTH                               0x1
#define _SMT1WIN_WSEL3_MASK                                 0x8
#define _SMT1WIN_WSEL4_POSN                                 0x4
#define _SMT1WIN_WSEL4_POSITION                             0x4
#define _SMT1WIN_WSEL4_SIZE                                 0x1
#define _SMT1WIN_WSEL4_LENGTH                               0x1
#define _SMT1WIN_WSEL4_MASK                                 0x10
#define _SMT1WIN_SMT1WSEL_POSN                              0x0
#define _SMT1WIN_SMT1WSEL_POSITION                          0x0
#define _SMT1WIN_SMT1WSEL_SIZE                              0x5
#define _SMT1WIN_SMT1WSEL_LENGTH                            0x5
#define _SMT1WIN_SMT1WSEL_MASK                              0x1F
#define _SMT1WIN_SMT1WSEL0_POSN                             0x0
#define _SMT1WIN_SMT1WSEL0_POSITION                         0x0
#define _SMT1WIN_SMT1WSEL0_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL0_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL0_MASK                             0x1
#define _SMT1WIN_SMT1WSEL1_POSN                             0x1
#define _SMT1WIN_SMT1WSEL1_POSITION                         0x1
#define _SMT1WIN_SMT1WSEL1_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL1_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL1_MASK                             0x2
#define _SMT1WIN_SMT1WSEL2_POSN                             0x2
#define _SMT1WIN_SMT1WSEL2_POSITION                         0x2
#define _SMT1WIN_SMT1WSEL2_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL2_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL2_MASK                             0x4
#define _SMT1WIN_SMT1WSEL3_POSN                             0x3
#define _SMT1WIN_SMT1WSEL3_POSITION                         0x3
#define _SMT1WIN_SMT1WSEL3_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL3_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL3_MASK                             0x8
#define _SMT1WIN_SMT1WSEL4_POSN                             0x4
#define _SMT1WIN_SMT1WSEL4_POSITION                         0x4
#define _SMT1WIN_SMT1WSEL4_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL4_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL4_MASK                             0x10

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x59C);
#ifndef _LIB_BUILD
asm("TMR0L equ 059Ch");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x59C);
#ifndef _LIB_BUILD
asm("TMR0 equ 059Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x59C);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x59C);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x59D);
#ifndef _LIB_BUILD
asm("TMR0H equ 059Dh");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x59D);
#ifndef _LIB_BUILD
asm("PR0 equ 059Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x59D);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x59D);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x59E);
#ifndef _LIB_BUILD
asm("T0CON0 equ 059Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0OUTPS                :4;
        unsigned T016BIT                :1;
        unsigned T0OUT                  :1;
        unsigned T0OE                   :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x59E);
// bitfield macros
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0OE_POSN                                   0x6
#define _T0CON0_T0OE_POSITION                               0x6
#define _T0CON0_T0OE_SIZE                                   0x1
#define _T0CON0_T0OE_LENGTH                                 0x1
#define _T0CON0_T0OE_MASK                                   0x40
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x59F);
#ifndef _LIB_BUILD
asm("T0CON1 equ 059Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKPS                 :4;
        unsigned T0ASYNC                :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
    struct {
        unsigned T0PS0                  :1;
        unsigned T0PS1                  :1;
        unsigned T0PS2                  :1;
        unsigned T0PS3                  :1;
    };
    struct {
        unsigned T0PS                   :4;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x59F);
// bitfield macros
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80
#define _T0CON1_T0PS0_POSN                                  0x0
#define _T0CON1_T0PS0_POSITION                              0x0
#define _T0CON1_T0PS0_SIZE                                  0x1
#define _T0CON1_T0PS0_LENGTH                                0x1
#define _T0CON1_T0PS0_MASK                                  0x1
#define _T0CON1_T0PS1_POSN                                  0x1
#define _T0CON1_T0PS1_POSITION                              0x1
#define _T0CON1_T0PS1_SIZE                                  0x1
#define _T0CON1_T0PS1_LENGTH                                0x1
#define _T0CON1_T0PS1_MASK                                  0x2
#define _T0CON1_T0PS2_POSN                                  0x2
#define _T0CON1_T0PS2_POSITION                              0x2
#define _T0CON1_T0PS2_SIZE                                  0x1
#define _T0CON1_T0PS2_LENGTH                                0x1
#define _T0CON1_T0PS2_MASK                                  0x4
#define _T0CON1_T0PS3_POSN                                  0x3
#define _T0CON1_T0PS3_POSITION                              0x3
#define _T0CON1_T0PS3_SIZE                                  0x1
#define _T0CON1_T0PS3_LENGTH                                0x1
#define _T0CON1_T0PS3_MASK                                  0x8
#define _T0CON1_T0PS_POSN                                   0x0
#define _T0CON1_T0PS_POSITION                               0x0
#define _T0CON1_T0PS_SIZE                                   0x4
#define _T0CON1_T0PS_LENGTH                                 0x4
#define _T0CON1_T0PS_MASK                                   0xF

// Register: CWG1CLKCON
#define CWG1CLKCON CWG1CLKCON
extern volatile unsigned char           CWG1CLKCON          __at(0x60C);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 060Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x60C);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x60D);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 060Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :4;
    };
    struct {
        unsigned CWG1ISM0               :1;
        unsigned CWG1ISM1               :1;
        unsigned CWG1ISM2               :1;
        unsigned CWG1ISM3               :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x60D);
// bitfield macros
#define _CWG1ISM_IS_POSN                                    0x0
#define _CWG1ISM_IS_POSITION                                0x0
#define _CWG1ISM_IS_SIZE                                    0x4
#define _CWG1ISM_IS_LENGTH                                  0x4
#define _CWG1ISM_IS_MASK                                    0xF
#define _CWG1ISM_CWG1ISM0_POSN                              0x0
#define _CWG1ISM_CWG1ISM0_POSITION                          0x0
#define _CWG1ISM_CWG1ISM0_SIZE                              0x1
#define _CWG1ISM_CWG1ISM0_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM0_MASK                              0x1
#define _CWG1ISM_CWG1ISM1_POSN                              0x1
#define _CWG1ISM_CWG1ISM1_POSITION                          0x1
#define _CWG1ISM_CWG1ISM1_SIZE                              0x1
#define _CWG1ISM_CWG1ISM1_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM1_MASK                              0x2
#define _CWG1ISM_CWG1ISM2_POSN                              0x2
#define _CWG1ISM_CWG1ISM2_POSITION                          0x2
#define _CWG1ISM_CWG1ISM2_SIZE                              0x1
#define _CWG1ISM_CWG1ISM2_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM2_MASK                              0x4
#define _CWG1ISM_CWG1ISM3_POSN                              0x3
#define _CWG1ISM_CWG1ISM3_POSITION                          0x3
#define _CWG1ISM_CWG1ISM3_SIZE                              0x1
#define _CWG1ISM_CWG1ISM3_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM3_MASK                              0x8

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x60E);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 060Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :6;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x60E);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x6
#define _CWG1DBR_DBR_LENGTH                                 0x6
#define _CWG1DBR_DBR_MASK                                   0x3F
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x6
#define _CWG1DBR_CWG1DBR_LENGTH                             0x6
#define _CWG1DBR_CWG1DBR_MASK                               0x3F
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x60F);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 060Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :6;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x60F);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x6
#define _CWG1DBF_DBF_LENGTH                                 0x6
#define _CWG1DBF_DBF_MASK                                   0x3F
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x6
#define _CWG1DBF_CWG1DBF_LENGTH                             0x6
#define _CWG1DBF_CWG1DBF_MASK                               0x3F
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x610);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 0610h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x610);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x611);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 0611h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x611);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x612);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 0612h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSBD               :2;
        unsigned CWG1REN                :1;
        unsigned CWG1SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x612);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30
#define _CWG1AS0_CWG1REN_POSN                               0x6
#define _CWG1AS0_CWG1REN_POSITION                           0x6
#define _CWG1AS0_CWG1REN_SIZE                               0x1
#define _CWG1AS0_CWG1REN_LENGTH                             0x1
#define _CWG1AS0_CWG1REN_MASK                               0x40
#define _CWG1AS0_CWG1SHUTDOWN_POSN                          0x7
#define _CWG1AS0_CWG1SHUTDOWN_POSITION                      0x7
#define _CWG1AS0_CWG1SHUTDOWN_SIZE                          0x1
#define _CWG1AS0_CWG1SHUTDOWN_LENGTH                        0x1
#define _CWG1AS0_CWG1SHUTDOWN_MASK                          0x80
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x613);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 0613h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x613);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x614);
#ifndef _LIB_BUILD
asm("CWG1STR equ 0614h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x614);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x70C);
#ifndef _LIB_BUILD
asm("PIR0 equ 070Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTF                   :1;
        unsigned                        :3;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x70C);
// bitfield macros
#define _PIR0_INTF_POSN                                     0x0
#define _PIR0_INTF_POSITION                                 0x0
#define _PIR0_INTF_SIZE                                     0x1
#define _PIR0_INTF_LENGTH                                   0x1
#define _PIR0_INTF_MASK                                     0x1
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x70D);
#ifndef _LIB_BUILD
asm("PIR1 equ 070Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
        unsigned                        :4;
        unsigned CSWIF                  :1;
        unsigned OSFIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x70D);
// bitfield macros
#define _PIR1_ADIF_POSN                                     0x0
#define _PIR1_ADIF_POSITION                                 0x0
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x1
#define _PIR1_ADTIF_POSN                                    0x1
#define _PIR1_ADTIF_POSITION                                0x1
#define _PIR1_ADTIF_SIZE                                    0x1
#define _PIR1_ADTIF_LENGTH                                  0x1
#define _PIR1_ADTIF_MASK                                    0x2
#define _PIR1_CSWIF_POSN                                    0x6
#define _PIR1_CSWIF_POSITION                                0x6
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x40
#define _PIR1_OSFIF_POSN                                    0x7
#define _PIR1_OSFIF_POSITION                                0x7
#define _PIR1_OSFIF_SIZE                                    0x1
#define _PIR1_OSFIF_LENGTH                                  0x1
#define _PIR1_OSFIF_MASK                                    0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x70E);
#ifndef _LIB_BUILD
asm("PIR2 equ 070Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned                        :4;
        unsigned ZCDIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x70E);
// bitfield macros
#define _PIR2_C1IF_POSN                                     0x0
#define _PIR2_C1IF_POSITION                                 0x0
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x1
#define _PIR2_C2IF_POSN                                     0x1
#define _PIR2_C2IF_POSITION                                 0x1
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x2
#define _PIR2_ZCDIF_POSN                                    0x6
#define _PIR2_ZCDIF_POSITION                                0x6
#define _PIR2_ZCDIF_SIZE                                    0x1
#define _PIR2_ZCDIF_LENGTH                                  0x1
#define _PIR2_ZCDIF_MASK                                    0x40

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x70F);
#ifndef _LIB_BUILD
asm("PIR3 equ 070Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned                        :2;
        unsigned TX1IF                  :1;
        unsigned RC1IF                  :1;
        unsigned TX2IF                  :1;
        unsigned RC2IF                  :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x70F);
// bitfield macros
#define _PIR3_SSP1IF_POSN                                   0x0
#define _PIR3_SSP1IF_POSITION                               0x0
#define _PIR3_SSP1IF_SIZE                                   0x1
#define _PIR3_SSP1IF_LENGTH                                 0x1
#define _PIR3_SSP1IF_MASK                                   0x1
#define _PIR3_BCL1IF_POSN                                   0x1
#define _PIR3_BCL1IF_POSITION                               0x1
#define _PIR3_BCL1IF_SIZE                                   0x1
#define _PIR3_BCL1IF_LENGTH                                 0x1
#define _PIR3_BCL1IF_MASK                                   0x2
#define _PIR3_TX1IF_POSN                                    0x4
#define _PIR3_TX1IF_POSITION                                0x4
#define _PIR3_TX1IF_SIZE                                    0x1
#define _PIR3_TX1IF_LENGTH                                  0x1
#define _PIR3_TX1IF_MASK                                    0x10
#define _PIR3_RC1IF_POSN                                    0x5
#define _PIR3_RC1IF_POSITION                                0x5
#define _PIR3_RC1IF_SIZE                                    0x1
#define _PIR3_RC1IF_LENGTH                                  0x1
#define _PIR3_RC1IF_MASK                                    0x20
#define _PIR3_TX2IF_POSN                                    0x6
#define _PIR3_TX2IF_POSITION                                0x6
#define _PIR3_TX2IF_SIZE                                    0x1
#define _PIR3_TX2IF_LENGTH                                  0x1
#define _PIR3_TX2IF_MASK                                    0x40
#define _PIR3_RC2IF_POSN                                    0x7
#define _PIR3_RC2IF_POSITION                                0x7
#define _PIR3_RC2IF_SIZE                                    0x1
#define _PIR3_RC2IF_LENGTH                                  0x1
#define _PIR3_RC2IF_MASK                                    0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x710);
#ifndef _LIB_BUILD
asm("PIR4 equ 0710h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned                        :1;
        unsigned TMR4IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x710);
// bitfield macros
#define _PIR4_TMR1IF_POSN                                   0x0
#define _PIR4_TMR1IF_POSITION                               0x0
#define _PIR4_TMR1IF_SIZE                                   0x1
#define _PIR4_TMR1IF_LENGTH                                 0x1
#define _PIR4_TMR1IF_MASK                                   0x1
#define _PIR4_TMR2IF_POSN                                   0x1
#define _PIR4_TMR2IF_POSITION                               0x1
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x2
#define _PIR4_TMR4IF_POSN                                   0x3
#define _PIR4_TMR4IF_POSITION                               0x3
#define _PIR4_TMR4IF_SIZE                                   0x1
#define _PIR4_TMR4IF_LENGTH                                 0x1
#define _PIR4_TMR4IF_MASK                                   0x8

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x711);
#ifndef _LIB_BUILD
asm("PIR5 equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIF                :1;
        unsigned                        :3;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x711);
// bitfield macros
#define _PIR5_TMR1GIF_POSN                                  0x0
#define _PIR5_TMR1GIF_POSITION                              0x0
#define _PIR5_TMR1GIF_SIZE                                  0x1
#define _PIR5_TMR1GIF_LENGTH                                0x1
#define _PIR5_TMR1GIF_MASK                                  0x1
#define _PIR5_CLC1IF_POSN                                   0x4
#define _PIR5_CLC1IF_POSITION                               0x4
#define _PIR5_CLC1IF_SIZE                                   0x1
#define _PIR5_CLC1IF_LENGTH                                 0x1
#define _PIR5_CLC1IF_MASK                                   0x10
#define _PIR5_CLC2IF_POSN                                   0x5
#define _PIR5_CLC2IF_POSITION                               0x5
#define _PIR5_CLC2IF_SIZE                                   0x1
#define _PIR5_CLC2IF_LENGTH                                 0x1
#define _PIR5_CLC2IF_MASK                                   0x20
#define _PIR5_CLC3IF_POSN                                   0x6
#define _PIR5_CLC3IF_POSITION                               0x6
#define _PIR5_CLC3IF_SIZE                                   0x1
#define _PIR5_CLC3IF_LENGTH                                 0x1
#define _PIR5_CLC3IF_MASK                                   0x40
#define _PIR5_CLC4IF_POSN                                   0x7
#define _PIR5_CLC4IF_POSITION                               0x7
#define _PIR5_CLC4IF_SIZE                                   0x1
#define _PIR5_CLC4IF_LENGTH                                 0x1
#define _PIR5_CLC4IF_MASK                                   0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x712);
#ifndef _LIB_BUILD
asm("PIR6 equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned                        :5;
        unsigned CRIF                   :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x712);
// bitfield macros
#define _PIR6_CCP1IF_POSN                                   0x0
#define _PIR6_CCP1IF_POSITION                               0x0
#define _PIR6_CCP1IF_SIZE                                   0x1
#define _PIR6_CCP1IF_LENGTH                                 0x1
#define _PIR6_CCP1IF_MASK                                   0x1
#define _PIR6_CCP2IF_POSN                                   0x1
#define _PIR6_CCP2IF_POSITION                               0x1
#define _PIR6_CCP2IF_SIZE                                   0x1
#define _PIR6_CCP2IF_LENGTH                                 0x1
#define _PIR6_CCP2IF_MASK                                   0x2
#define _PIR6_CRIF_POSN                                     0x7
#define _PIR6_CRIF_POSITION                                 0x7
#define _PIR6_CRIF_SIZE                                     0x1
#define _PIR6_CRIF_LENGTH                                   0x1
#define _PIR6_CRIF_MASK                                     0x80

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x713);
#ifndef _LIB_BUILD
asm("PIR7 equ 0713h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IF                 :1;
        unsigned                        :4;
        unsigned NVMIF                  :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x713);
// bitfield macros
#define _PIR7_CWG1IF_POSN                                   0x0
#define _PIR7_CWG1IF_POSITION                               0x0
#define _PIR7_CWG1IF_SIZE                                   0x1
#define _PIR7_CWG1IF_LENGTH                                 0x1
#define _PIR7_CWG1IF_MASK                                   0x1
#define _PIR7_NVMIF_POSN                                    0x5
#define _PIR7_NVMIF_POSITION                                0x5
#define _PIR7_NVMIF_SIZE                                    0x1
#define _PIR7_NVMIF_LENGTH                                  0x1
#define _PIR7_NVMIF_MASK                                    0x20

// Register: PIR8
#define PIR8 PIR8
extern volatile unsigned char           PIR8                __at(0x714);
#ifndef _LIB_BUILD
asm("PIR8 equ 0714h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IF                 :1;
        unsigned SMT1PRAIF              :1;
        unsigned SMT1PWAIF              :1;
        unsigned                        :3;
        unsigned RTCCIF                 :1;
        unsigned LCDIF                  :1;
    };
} PIR8bits_t;
extern volatile PIR8bits_t PIR8bits __at(0x714);
// bitfield macros
#define _PIR8_SMT1IF_POSN                                   0x0
#define _PIR8_SMT1IF_POSITION                               0x0
#define _PIR8_SMT1IF_SIZE                                   0x1
#define _PIR8_SMT1IF_LENGTH                                 0x1
#define _PIR8_SMT1IF_MASK                                   0x1
#define _PIR8_SMT1PRAIF_POSN                                0x1
#define _PIR8_SMT1PRAIF_POSITION                            0x1
#define _PIR8_SMT1PRAIF_SIZE                                0x1
#define _PIR8_SMT1PRAIF_LENGTH                              0x1
#define _PIR8_SMT1PRAIF_MASK                                0x2
#define _PIR8_SMT1PWAIF_POSN                                0x2
#define _PIR8_SMT1PWAIF_POSITION                            0x2
#define _PIR8_SMT1PWAIF_SIZE                                0x1
#define _PIR8_SMT1PWAIF_LENGTH                              0x1
#define _PIR8_SMT1PWAIF_MASK                                0x4
#define _PIR8_RTCCIF_POSN                                   0x6
#define _PIR8_RTCCIF_POSITION                               0x6
#define _PIR8_RTCCIF_SIZE                                   0x1
#define _PIR8_RTCCIF_LENGTH                                 0x1
#define _PIR8_RTCCIF_MASK                                   0x40
#define _PIR8_LCDIF_POSN                                    0x7
#define _PIR8_LCDIF_POSITION                                0x7
#define _PIR8_LCDIF_SIZE                                    0x1
#define _PIR8_LCDIF_LENGTH                                  0x1
#define _PIR8_LCDIF_MASK                                    0x80

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x716);
#ifndef _LIB_BUILD
asm("PIE0 equ 0716h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTE                   :1;
        unsigned                        :3;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x716);
// bitfield macros
#define _PIE0_INTE_POSN                                     0x0
#define _PIE0_INTE_POSITION                                 0x0
#define _PIE0_INTE_SIZE                                     0x1
#define _PIE0_INTE_LENGTH                                   0x1
#define _PIE0_INTE_MASK                                     0x1
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x717);
#ifndef _LIB_BUILD
asm("PIE1 equ 0717h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
        unsigned                        :4;
        unsigned CSWIE                  :1;
        unsigned OSFIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x717);
// bitfield macros
#define _PIE1_ADIE_POSN                                     0x0
#define _PIE1_ADIE_POSITION                                 0x0
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x1
#define _PIE1_ADTIE_POSN                                    0x1
#define _PIE1_ADTIE_POSITION                                0x1
#define _PIE1_ADTIE_SIZE                                    0x1
#define _PIE1_ADTIE_LENGTH                                  0x1
#define _PIE1_ADTIE_MASK                                    0x2
#define _PIE1_CSWIE_POSN                                    0x6
#define _PIE1_CSWIE_POSITION                                0x6
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x40
#define _PIE1_OSFIE_POSN                                    0x7
#define _PIE1_OSFIE_POSITION                                0x7
#define _PIE1_OSFIE_SIZE                                    0x1
#define _PIE1_OSFIE_LENGTH                                  0x1
#define _PIE1_OSFIE_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x718);
#ifndef _LIB_BUILD
asm("PIE2 equ 0718h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned                        :4;
        unsigned ZCDIE                  :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x718);
// bitfield macros
#define _PIE2_C1IE_POSN                                     0x0
#define _PIE2_C1IE_POSITION                                 0x0
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x1
#define _PIE2_C2IE_POSN                                     0x1
#define _PIE2_C2IE_POSITION                                 0x1
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x2
#define _PIE2_ZCDIE_POSN                                    0x6
#define _PIE2_ZCDIE_POSITION                                0x6
#define _PIE2_ZCDIE_SIZE                                    0x1
#define _PIE2_ZCDIE_LENGTH                                  0x1
#define _PIE2_ZCDIE_MASK                                    0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x719);
#ifndef _LIB_BUILD
asm("PIE3 equ 0719h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned                        :2;
        unsigned TX1IE                  :1;
        unsigned RC1IE                  :1;
        unsigned TX2IE                  :1;
        unsigned RC2IE                  :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x719);
// bitfield macros
#define _PIE3_SSP1IE_POSN                                   0x0
#define _PIE3_SSP1IE_POSITION                               0x0
#define _PIE3_SSP1IE_SIZE                                   0x1
#define _PIE3_SSP1IE_LENGTH                                 0x1
#define _PIE3_SSP1IE_MASK                                   0x1
#define _PIE3_BCL1IE_POSN                                   0x1
#define _PIE3_BCL1IE_POSITION                               0x1
#define _PIE3_BCL1IE_SIZE                                   0x1
#define _PIE3_BCL1IE_LENGTH                                 0x1
#define _PIE3_BCL1IE_MASK                                   0x2
#define _PIE3_TX1IE_POSN                                    0x4
#define _PIE3_TX1IE_POSITION                                0x4
#define _PIE3_TX1IE_SIZE                                    0x1
#define _PIE3_TX1IE_LENGTH                                  0x1
#define _PIE3_TX1IE_MASK                                    0x10
#define _PIE3_RC1IE_POSN                                    0x5
#define _PIE3_RC1IE_POSITION                                0x5
#define _PIE3_RC1IE_SIZE                                    0x1
#define _PIE3_RC1IE_LENGTH                                  0x1
#define _PIE3_RC1IE_MASK                                    0x20
#define _PIE3_TX2IE_POSN                                    0x6
#define _PIE3_TX2IE_POSITION                                0x6
#define _PIE3_TX2IE_SIZE                                    0x1
#define _PIE3_TX2IE_LENGTH                                  0x1
#define _PIE3_TX2IE_MASK                                    0x40
#define _PIE3_RC2IE_POSN                                    0x7
#define _PIE3_RC2IE_POSITION                                0x7
#define _PIE3_RC2IE_SIZE                                    0x1
#define _PIE3_RC2IE_LENGTH                                  0x1
#define _PIE3_RC2IE_MASK                                    0x80

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x71A);
#ifndef _LIB_BUILD
asm("PIE4 equ 071Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned                        :1;
        unsigned TMR4IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x71A);
// bitfield macros
#define _PIE4_TMR1IE_POSN                                   0x0
#define _PIE4_TMR1IE_POSITION                               0x0
#define _PIE4_TMR1IE_SIZE                                   0x1
#define _PIE4_TMR1IE_LENGTH                                 0x1
#define _PIE4_TMR1IE_MASK                                   0x1
#define _PIE4_TMR2IE_POSN                                   0x1
#define _PIE4_TMR2IE_POSITION                               0x1
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x2
#define _PIE4_TMR4IE_POSN                                   0x3
#define _PIE4_TMR4IE_POSITION                               0x3
#define _PIE4_TMR4IE_SIZE                                   0x1
#define _PIE4_TMR4IE_LENGTH                                 0x1
#define _PIE4_TMR4IE_MASK                                   0x8

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x71B);
#ifndef _LIB_BUILD
asm("PIE5 equ 071Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIE                :1;
        unsigned                        :3;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x71B);
// bitfield macros
#define _PIE5_TMR1GIE_POSN                                  0x0
#define _PIE5_TMR1GIE_POSITION                              0x0
#define _PIE5_TMR1GIE_SIZE                                  0x1
#define _PIE5_TMR1GIE_LENGTH                                0x1
#define _PIE5_TMR1GIE_MASK                                  0x1
#define _PIE5_CLC1IE_POSN                                   0x4
#define _PIE5_CLC1IE_POSITION                               0x4
#define _PIE5_CLC1IE_SIZE                                   0x1
#define _PIE5_CLC1IE_LENGTH                                 0x1
#define _PIE5_CLC1IE_MASK                                   0x10
#define _PIE5_CLC2IE_POSN                                   0x5
#define _PIE5_CLC2IE_POSITION                               0x5
#define _PIE5_CLC2IE_SIZE                                   0x1
#define _PIE5_CLC2IE_LENGTH                                 0x1
#define _PIE5_CLC2IE_MASK                                   0x20
#define _PIE5_CLC3IE_POSN                                   0x6
#define _PIE5_CLC3IE_POSITION                               0x6
#define _PIE5_CLC3IE_SIZE                                   0x1
#define _PIE5_CLC3IE_LENGTH                                 0x1
#define _PIE5_CLC3IE_MASK                                   0x40
#define _PIE5_CLC4IE_POSN                                   0x7
#define _PIE5_CLC4IE_POSITION                               0x7
#define _PIE5_CLC4IE_SIZE                                   0x1
#define _PIE5_CLC4IE_LENGTH                                 0x1
#define _PIE5_CLC4IE_MASK                                   0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x71C);
#ifndef _LIB_BUILD
asm("PIE6 equ 071Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned                        :5;
        unsigned CRIE                   :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x71C);
// bitfield macros
#define _PIE6_CCP1IE_POSN                                   0x0
#define _PIE6_CCP1IE_POSITION                               0x0
#define _PIE6_CCP1IE_SIZE                                   0x1
#define _PIE6_CCP1IE_LENGTH                                 0x1
#define _PIE6_CCP1IE_MASK                                   0x1
#define _PIE6_CCP2IE_POSN                                   0x1
#define _PIE6_CCP2IE_POSITION                               0x1
#define _PIE6_CCP2IE_SIZE                                   0x1
#define _PIE6_CCP2IE_LENGTH                                 0x1
#define _PIE6_CCP2IE_MASK                                   0x2
#define _PIE6_CRIE_POSN                                     0x7
#define _PIE6_CRIE_POSITION                                 0x7
#define _PIE6_CRIE_SIZE                                     0x1
#define _PIE6_CRIE_LENGTH                                   0x1
#define _PIE6_CRIE_MASK                                     0x80

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x71D);
#ifndef _LIB_BUILD
asm("PIE7 equ 071Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1IE                 :1;
        unsigned                        :4;
        unsigned NVMIE                  :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x71D);
// bitfield macros
#define _PIE7_CWG1IE_POSN                                   0x0
#define _PIE7_CWG1IE_POSITION                               0x0
#define _PIE7_CWG1IE_SIZE                                   0x1
#define _PIE7_CWG1IE_LENGTH                                 0x1
#define _PIE7_CWG1IE_MASK                                   0x1
#define _PIE7_NVMIE_POSN                                    0x5
#define _PIE7_NVMIE_POSITION                                0x5
#define _PIE7_NVMIE_SIZE                                    0x1
#define _PIE7_NVMIE_LENGTH                                  0x1
#define _PIE7_NVMIE_MASK                                    0x20

// Register: PIE8
#define PIE8 PIE8
extern volatile unsigned char           PIE8                __at(0x71E);
#ifndef _LIB_BUILD
asm("PIE8 equ 071Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1IE                 :1;
        unsigned SMT1PRAIE              :1;
        unsigned SMT1PWAIE              :1;
        unsigned                        :3;
        unsigned RTCCIE                 :1;
        unsigned LCDIE                  :1;
    };
} PIE8bits_t;
extern volatile PIE8bits_t PIE8bits __at(0x71E);
// bitfield macros
#define _PIE8_SMT1IE_POSN                                   0x0
#define _PIE8_SMT1IE_POSITION                               0x0
#define _PIE8_SMT1IE_SIZE                                   0x1
#define _PIE8_SMT1IE_LENGTH                                 0x1
#define _PIE8_SMT1IE_MASK                                   0x1
#define _PIE8_SMT1PRAIE_POSN                                0x1
#define _PIE8_SMT1PRAIE_POSITION                            0x1
#define _PIE8_SMT1PRAIE_SIZE                                0x1
#define _PIE8_SMT1PRAIE_LENGTH                              0x1
#define _PIE8_SMT1PRAIE_MASK                                0x2
#define _PIE8_SMT1PWAIE_POSN                                0x2
#define _PIE8_SMT1PWAIE_POSITION                            0x2
#define _PIE8_SMT1PWAIE_SIZE                                0x1
#define _PIE8_SMT1PWAIE_LENGTH                              0x1
#define _PIE8_SMT1PWAIE_MASK                                0x4
#define _PIE8_RTCCIE_POSN                                   0x6
#define _PIE8_RTCCIE_POSITION                               0x6
#define _PIE8_RTCCIE_SIZE                                   0x1
#define _PIE8_RTCCIE_LENGTH                                 0x1
#define _PIE8_RTCCIE_MASK                                   0x40
#define _PIE8_LCDIE_POSN                                    0x7
#define _PIE8_LCDIE_POSITION                                0x7
#define _PIE8_LCDIE_SIZE                                    0x1
#define _PIE8_LCDIE_LENGTH                                  0x1
#define _PIE8_LCDIE_MASK                                    0x80

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x796);
#ifndef _LIB_BUILD
asm("PMD0 equ 0796h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned                        :1;
        unsigned NVMMD                  :1;
        unsigned                        :2;
        unsigned ACTMD                  :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x796);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_ACTMD_POSN                                    0x5
#define _PMD0_ACTMD_POSITION                                0x5
#define _PMD0_ACTMD_SIZE                                    0x1
#define _PMD0_ACTMD_LENGTH                                  0x1
#define _PMD0_ACTMD_MASK                                    0x20
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x797);
#ifndef _LIB_BUILD
asm("PMD1 equ 0797h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned                        :1;
        unsigned TMR4MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x797);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x798);
#ifndef _LIB_BUILD
asm("PMD2 equ 0798h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CMP1MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DACMD                  :1;
        unsigned RTCCMD                 :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x798);
// bitfield macros
#define _PMD2_ZCDMD_POSN                                    0x0
#define _PMD2_ZCDMD_POSITION                                0x0
#define _PMD2_ZCDMD_SIZE                                    0x1
#define _PMD2_ZCDMD_LENGTH                                  0x1
#define _PMD2_ZCDMD_MASK                                    0x1
#define _PMD2_CMP1MD_POSN                                   0x1
#define _PMD2_CMP1MD_POSITION                               0x1
#define _PMD2_CMP1MD_SIZE                                   0x1
#define _PMD2_CMP1MD_LENGTH                                 0x1
#define _PMD2_CMP1MD_MASK                                   0x2
#define _PMD2_CMP2MD_POSN                                   0x2
#define _PMD2_CMP2MD_POSITION                               0x2
#define _PMD2_CMP2MD_SIZE                                   0x1
#define _PMD2_CMP2MD_LENGTH                                 0x1
#define _PMD2_CMP2MD_MASK                                   0x4
#define _PMD2_ADCMD_POSN                                    0x5
#define _PMD2_ADCMD_POSITION                                0x5
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x20
#define _PMD2_DACMD_POSN                                    0x6
#define _PMD2_DACMD_POSITION                                0x6
#define _PMD2_DACMD_SIZE                                    0x1
#define _PMD2_DACMD_LENGTH                                  0x1
#define _PMD2_DACMD_MASK                                    0x40
#define _PMD2_RTCCMD_POSN                                   0x7
#define _PMD2_RTCCMD_POSITION                               0x7
#define _PMD2_RTCCMD_SIZE                                   0x1
#define _PMD2_RTCCMD_LENGTH                                 0x1
#define _PMD2_RTCCMD_MASK                                   0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x799);
#ifndef _LIB_BUILD
asm("PMD3 equ 0799h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned CCP3MD                 :1;
        unsigned CCP4MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x799);
// bitfield macros
#define _PMD3_CCP1MD_POSN                                   0x0
#define _PMD3_CCP1MD_POSITION                               0x0
#define _PMD3_CCP1MD_SIZE                                   0x1
#define _PMD3_CCP1MD_LENGTH                                 0x1
#define _PMD3_CCP1MD_MASK                                   0x1
#define _PMD3_CCP2MD_POSN                                   0x1
#define _PMD3_CCP2MD_POSITION                               0x1
#define _PMD3_CCP2MD_SIZE                                   0x1
#define _PMD3_CCP2MD_LENGTH                                 0x1
#define _PMD3_CCP2MD_MASK                                   0x2
#define _PMD3_CCP3MD_POSN                                   0x2
#define _PMD3_CCP3MD_POSITION                               0x2
#define _PMD3_CCP3MD_SIZE                                   0x1
#define _PMD3_CCP3MD_LENGTH                                 0x1
#define _PMD3_CCP3MD_MASK                                   0x4
#define _PMD3_CCP4MD_POSN                                   0x3
#define _PMD3_CCP4MD_POSITION                               0x3
#define _PMD3_CCP4MD_SIZE                                   0x1
#define _PMD3_CCP4MD_LENGTH                                 0x1
#define _PMD3_CCP4MD_MASK                                   0x8

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x79A);
#ifndef _LIB_BUILD
asm("PMD4 equ 079Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1MD                 :1;
        unsigned                        :3;
        unsigned MSSP1MD                :1;
        unsigned                        :1;
        unsigned UART1MD                :1;
        unsigned UART2MD                :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x79A);
// bitfield macros
#define _PMD4_CWG1MD_POSN                                   0x0
#define _PMD4_CWG1MD_POSITION                               0x0
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x1
#define _PMD4_MSSP1MD_POSN                                  0x4
#define _PMD4_MSSP1MD_POSITION                              0x4
#define _PMD4_MSSP1MD_SIZE                                  0x1
#define _PMD4_MSSP1MD_LENGTH                                0x1
#define _PMD4_MSSP1MD_MASK                                  0x10
#define _PMD4_UART1MD_POSN                                  0x6
#define _PMD4_UART1MD_POSITION                              0x6
#define _PMD4_UART1MD_SIZE                                  0x1
#define _PMD4_UART1MD_LENGTH                                0x1
#define _PMD4_UART1MD_MASK                                  0x40
#define _PMD4_UART2MD_POSN                                  0x7
#define _PMD4_UART2MD_POSITION                              0x7
#define _PMD4_UART2MD_SIZE                                  0x1
#define _PMD4_UART2MD_LENGTH                                0x1
#define _PMD4_UART2MD_MASK                                  0x80

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x79B);
#ifndef _LIB_BUILD
asm("PMD5 equ 079Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
        unsigned LCDMD                  :1;
        unsigned SMT1MD                 :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x79B);
// bitfield macros
#define _PMD5_CLC1MD_POSN                                   0x1
#define _PMD5_CLC1MD_POSITION                               0x1
#define _PMD5_CLC1MD_SIZE                                   0x1
#define _PMD5_CLC1MD_LENGTH                                 0x1
#define _PMD5_CLC1MD_MASK                                   0x2
#define _PMD5_CLC2MD_POSN                                   0x2
#define _PMD5_CLC2MD_POSITION                               0x2
#define _PMD5_CLC2MD_SIZE                                   0x1
#define _PMD5_CLC2MD_LENGTH                                 0x1
#define _PMD5_CLC2MD_MASK                                   0x4
#define _PMD5_CLC3MD_POSN                                   0x3
#define _PMD5_CLC3MD_POSITION                               0x3
#define _PMD5_CLC3MD_SIZE                                   0x1
#define _PMD5_CLC3MD_LENGTH                                 0x1
#define _PMD5_CLC3MD_MASK                                   0x8
#define _PMD5_CLC4MD_POSN                                   0x4
#define _PMD5_CLC4MD_POSITION                               0x4
#define _PMD5_CLC4MD_SIZE                                   0x1
#define _PMD5_CLC4MD_LENGTH                                 0x1
#define _PMD5_CLC4MD_MASK                                   0x10
#define _PMD5_LCDMD_POSN                                    0x5
#define _PMD5_LCDMD_POSITION                                0x5
#define _PMD5_LCDMD_SIZE                                    0x1
#define _PMD5_LCDMD_LENGTH                                  0x1
#define _PMD5_LCDMD_MASK                                    0x20
#define _PMD5_SMT1MD_POSN                                   0x6
#define _PMD5_SMT1MD_POSITION                               0x6
#define _PMD5_SMT1MD_SIZE                                   0x1
#define _PMD5_SMT1MD_LENGTH                                 0x1
#define _PMD5_SMT1MD_MASK                                   0x40

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x80C);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x80C);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x80D);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x80D);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x80E);
#ifndef _LIB_BUILD
asm("WDTPSL equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x80E);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x80F);
#ifndef _LIB_BUILD
asm("WDTPSH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x80F);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x810);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x810);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x811);
#ifndef _LIB_BUILD
asm("BORCON equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x811);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x813);
#ifndef _LIB_BUILD
asm("PCON0 equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x813);
// bitfield macros
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x814);
#ifndef _LIB_BUILD
asm("PCON1 equ 0814h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VBATBOR                :1;
        unsigned MEMV                   :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x814);
// bitfield macros
#define _PCON1_VBATBOR_POSN                                 0x0
#define _PCON1_VBATBOR_POSITION                             0x0
#define _PCON1_VBATBOR_SIZE                                 0x1
#define _PCON1_VBATBOR_LENGTH                               0x1
#define _PCON1_VBATBOR_MASK                                 0x1
#define _PCON1_MEMV_POSN                                    0x1
#define _PCON1_MEMV_POSITION                                0x1
#define _PCON1_MEMV_SIZE                                    0x1
#define _PCON1_MEMV_LENGTH                                  0x1
#define _PCON1_MEMV_MASK                                    0x2

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x81A);
#ifndef _LIB_BUILD
asm("NVMADRL equ 081Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x81A);
// bitfield macros
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x81B);
#ifndef _LIB_BUILD
asm("NVMADRH equ 081Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x81B);
// bitfield macros
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x81C);
#ifndef _LIB_BUILD
asm("NVMDATL equ 081Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x81C);
// bitfield macros
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x81D);
#ifndef _LIB_BUILD
asm("NVMDATH equ 081Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x81D);
// bitfield macros
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x81E);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 081Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned NVMREGS                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x81E);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_LWLO_POSN                                  0x5
#define _NVMCON1_LWLO_POSITION                              0x5
#define _NVMCON1_LWLO_SIZE                                  0x1
#define _NVMCON1_LWLO_LENGTH                                0x1
#define _NVMCON1_LWLO_MASK                                  0x20
#define _NVMCON1_NVMREGS_POSN                               0x6
#define _NVMCON1_NVMREGS_POSITION                           0x6
#define _NVMCON1_NVMREGS_SIZE                               0x1
#define _NVMCON1_NVMREGS_LENGTH                             0x1
#define _NVMCON1_NVMREGS_MASK                               0x40

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x81F);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 081Fh");
#endif

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x88C);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE                   :3;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x88C);
// bitfield macros
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x88D);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x88D);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x88E);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 088Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x88E);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x88F);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 088Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x88F);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x890);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x890);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x891);
#ifndef _LIB_BUILD
asm("OSCEN equ 0891h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x891);
// bitfield macros
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x892);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0892h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFTUN                  :6;
    };
    struct {
        unsigned HFTUN0                 :1;
        unsigned HFTUN1                 :1;
        unsigned HFTUN2                 :1;
        unsigned HFTUN3                 :1;
        unsigned HFTUN4                 :1;
        unsigned HFTUN5                 :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x892);
// bitfield macros
#define _OSCTUNE_HFTUN_POSN                                 0x0
#define _OSCTUNE_HFTUN_POSITION                             0x0
#define _OSCTUNE_HFTUN_SIZE                                 0x6
#define _OSCTUNE_HFTUN_LENGTH                               0x6
#define _OSCTUNE_HFTUN_MASK                                 0x3F
#define _OSCTUNE_HFTUN0_POSN                                0x0
#define _OSCTUNE_HFTUN0_POSITION                            0x0
#define _OSCTUNE_HFTUN0_SIZE                                0x1
#define _OSCTUNE_HFTUN0_LENGTH                              0x1
#define _OSCTUNE_HFTUN0_MASK                                0x1
#define _OSCTUNE_HFTUN1_POSN                                0x1
#define _OSCTUNE_HFTUN1_POSITION                            0x1
#define _OSCTUNE_HFTUN1_SIZE                                0x1
#define _OSCTUNE_HFTUN1_LENGTH                              0x1
#define _OSCTUNE_HFTUN1_MASK                                0x2
#define _OSCTUNE_HFTUN2_POSN                                0x2
#define _OSCTUNE_HFTUN2_POSITION                            0x2
#define _OSCTUNE_HFTUN2_SIZE                                0x1
#define _OSCTUNE_HFTUN2_LENGTH                              0x1
#define _OSCTUNE_HFTUN2_MASK                                0x4
#define _OSCTUNE_HFTUN3_POSN                                0x3
#define _OSCTUNE_HFTUN3_POSITION                            0x3
#define _OSCTUNE_HFTUN3_SIZE                                0x1
#define _OSCTUNE_HFTUN3_LENGTH                              0x1
#define _OSCTUNE_HFTUN3_MASK                                0x8
#define _OSCTUNE_HFTUN4_POSN                                0x4
#define _OSCTUNE_HFTUN4_POSITION                            0x4
#define _OSCTUNE_HFTUN4_SIZE                                0x1
#define _OSCTUNE_HFTUN4_LENGTH                              0x1
#define _OSCTUNE_HFTUN4_MASK                                0x10
#define _OSCTUNE_HFTUN5_POSN                                0x5
#define _OSCTUNE_HFTUN5_POSITION                            0x5
#define _OSCTUNE_HFTUN5_SIZE                                0x1
#define _OSCTUNE_HFTUN5_LENGTH                              0x1
#define _OSCTUNE_HFTUN5_MASK                                0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x893);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0893h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :3;
    };
    struct {
        unsigned HFFRQ0                 :1;
        unsigned HFFRQ1                 :1;
        unsigned HFFRQ2                 :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x893);
// bitfield macros
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x3
#define _OSCFRQ_HFFRQ_LENGTH                                0x3
#define _OSCFRQ_HFFRQ_MASK                                  0x7
#define _OSCFRQ_HFFRQ0_POSN                                 0x0
#define _OSCFRQ_HFFRQ0_POSITION                             0x0
#define _OSCFRQ_HFFRQ0_SIZE                                 0x1
#define _OSCFRQ_HFFRQ0_LENGTH                               0x1
#define _OSCFRQ_HFFRQ0_MASK                                 0x1
#define _OSCFRQ_HFFRQ1_POSN                                 0x1
#define _OSCFRQ_HFFRQ1_POSITION                             0x1
#define _OSCFRQ_HFFRQ1_SIZE                                 0x1
#define _OSCFRQ_HFFRQ1_LENGTH                               0x1
#define _OSCFRQ_HFFRQ1_MASK                                 0x2
#define _OSCFRQ_HFFRQ2_POSN                                 0x2
#define _OSCFRQ_HFFRQ2_POSITION                             0x2
#define _OSCFRQ_HFFRQ2_SIZE                                 0x1
#define _OSCFRQ_HFFRQ2_LENGTH                               0x1
#define _OSCFRQ_HFFRQ2_MASK                                 0x4

// Register: ACTCON
#define ACTCON ACTCON
extern volatile unsigned char           ACTCON              __at(0x894);
#ifndef _LIB_BUILD
asm("ACTCON equ 0894h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ACTORS                 :1;
        unsigned                        :1;
        unsigned ACTLOCK                :1;
        unsigned                        :2;
        unsigned ACTUD                  :1;
        unsigned ACTEN                  :1;
    };
} ACTCONbits_t;
extern volatile ACTCONbits_t ACTCONbits __at(0x894);
// bitfield macros
#define _ACTCON_ACTORS_POSN                                 0x1
#define _ACTCON_ACTORS_POSITION                             0x1
#define _ACTCON_ACTORS_SIZE                                 0x1
#define _ACTCON_ACTORS_LENGTH                               0x1
#define _ACTCON_ACTORS_MASK                                 0x2
#define _ACTCON_ACTLOCK_POSN                                0x3
#define _ACTCON_ACTLOCK_POSITION                            0x3
#define _ACTCON_ACTLOCK_SIZE                                0x1
#define _ACTCON_ACTLOCK_LENGTH                              0x1
#define _ACTCON_ACTLOCK_MASK                                0x8
#define _ACTCON_ACTUD_POSN                                  0x6
#define _ACTCON_ACTUD_POSITION                              0x6
#define _ACTCON_ACTUD_SIZE                                  0x1
#define _ACTCON_ACTUD_LENGTH                                0x1
#define _ACTCON_ACTUD_MASK                                  0x40
#define _ACTCON_ACTEN_POSN                                  0x7
#define _ACTCON_ACTEN_POSITION                              0x7
#define _ACTCON_ACTEN_SIZE                                  0x1
#define _ACTCON_ACTEN_LENGTH                                0x1
#define _ACTCON_ACTEN_MASK                                  0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x90C);
#ifndef _LIB_BUILD
asm("FVRCON equ 090Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x90C);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x90E);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 090Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned PSS                    :2;
        unsigned OE2                    :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE2                :1;
        unsigned DAC1OE1                :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x90E);
// bitfield macros
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE2_POSN                                  0x4
#define _DAC1CON0_OE2_POSITION                              0x4
#define _DAC1CON0_OE2_SIZE                                  0x1
#define _DAC1CON0_OE2_LENGTH                                0x1
#define _DAC1CON0_OE2_MASK                                  0x10
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8
#define _DAC1CON0_DAC1OE2_POSN                              0x4
#define _DAC1CON0_DAC1OE2_POSITION                          0x4
#define _DAC1CON0_DAC1OE2_SIZE                              0x1
#define _DAC1CON0_DAC1OE2_LENGTH                            0x1
#define _DAC1CON0_DAC1OE2_MASK                              0x10
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0x90F);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 090Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :5;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x90F);
// bitfield macros
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x5
#define _DAC1CON1_DAC1R_LENGTH                              0x5
#define _DAC1CON1_DAC1R_MASK                                0x1F
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0x91F);
#ifndef _LIB_BUILD
asm("ZCDCON equ 091Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0x91F);
// bitfield macros
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x98F);
#ifndef _LIB_BUILD
asm("CMOUT equ 098Fh");
#endif
// aliases
extern volatile unsigned char           CMSTAT              __at(0x98F);
#ifndef _LIB_BUILD
asm("CMSTAT equ 098Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x98F);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2
#define _CMOUT_C1OUT_POSN                                   0x0
#define _CMOUT_C1OUT_POSITION                               0x0
#define _CMOUT_C1OUT_SIZE                                   0x1
#define _CMOUT_C1OUT_LENGTH                                 0x1
#define _CMOUT_C1OUT_MASK                                   0x1
#define _CMOUT_C2OUT_POSN                                   0x1
#define _CMOUT_C2OUT_POSITION                               0x1
#define _CMOUT_C2OUT_SIZE                                   0x1
#define _CMOUT_C2OUT_LENGTH                                 0x1
#define _CMOUT_C2OUT_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMSTATbits_t;
extern volatile CMSTATbits_t CMSTATbits __at(0x98F);
// bitfield macros
#define _CMSTAT_MC1OUT_POSN                                 0x0
#define _CMSTAT_MC1OUT_POSITION                             0x0
#define _CMSTAT_MC1OUT_SIZE                                 0x1
#define _CMSTAT_MC1OUT_LENGTH                               0x1
#define _CMSTAT_MC1OUT_MASK                                 0x1
#define _CMSTAT_MC2OUT_POSN                                 0x1
#define _CMSTAT_MC2OUT_POSITION                             0x1
#define _CMSTAT_MC2OUT_SIZE                                 0x1
#define _CMSTAT_MC2OUT_LENGTH                               0x1
#define _CMSTAT_MC2OUT_MASK                                 0x2
#define _CMSTAT_C1OUT_POSN                                  0x0
#define _CMSTAT_C1OUT_POSITION                              0x0
#define _CMSTAT_C1OUT_SIZE                                  0x1
#define _CMSTAT_C1OUT_LENGTH                                0x1
#define _CMSTAT_C1OUT_MASK                                  0x1
#define _CMSTAT_C2OUT_POSN                                  0x1
#define _CMSTAT_C2OUT_POSITION                              0x1
#define _CMSTAT_C2OUT_SIZE                                  0x1
#define _CMSTAT_C2OUT_LENGTH                                0x1
#define _CMSTAT_C2OUT_MASK                                  0x2

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x990);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0990h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned                        :2;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1ON                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x990);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_ON_POSN                                    0x7
#define _CM1CON0_ON_POSITION                                0x7
#define _CM1CON0_ON_SIZE                                    0x1
#define _CM1CON0_ON_LENGTH                                  0x1
#define _CM1CON0_ON_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1ON_POSN                                  0x7
#define _CM1CON0_C1ON_POSITION                              0x7
#define _CM1CON0_C1ON_SIZE                                  0x1
#define _CM1CON0_C1ON_LENGTH                                0x1
#define _CM1CON0_C1ON_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x991);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0991h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x991);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NSEL
#define CM1NSEL CM1NSEL
extern volatile unsigned char           CM1NSEL             __at(0x992);
#ifndef _LIB_BUILD
asm("CM1NSEL equ 0992h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH                  :3;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NSELbits_t;
extern volatile CM1NSELbits_t CM1NSELbits __at(0x992);
// bitfield macros
#define _CM1NSEL_NCH_POSN                                   0x0
#define _CM1NSEL_NCH_POSITION                               0x0
#define _CM1NSEL_NCH_SIZE                                   0x3
#define _CM1NSEL_NCH_LENGTH                                 0x3
#define _CM1NSEL_NCH_MASK                                   0x7
#define _CM1NSEL_NCH0_POSN                                  0x0
#define _CM1NSEL_NCH0_POSITION                              0x0
#define _CM1NSEL_NCH0_SIZE                                  0x1
#define _CM1NSEL_NCH0_LENGTH                                0x1
#define _CM1NSEL_NCH0_MASK                                  0x1
#define _CM1NSEL_NCH1_POSN                                  0x1
#define _CM1NSEL_NCH1_POSITION                              0x1
#define _CM1NSEL_NCH1_SIZE                                  0x1
#define _CM1NSEL_NCH1_LENGTH                                0x1
#define _CM1NSEL_NCH1_MASK                                  0x2
#define _CM1NSEL_NCH2_POSN                                  0x2
#define _CM1NSEL_NCH2_POSITION                              0x2
#define _CM1NSEL_NCH2_SIZE                                  0x1
#define _CM1NSEL_NCH2_LENGTH                                0x1
#define _CM1NSEL_NCH2_MASK                                  0x4
#define _CM1NSEL_C1NCH_POSN                                 0x0
#define _CM1NSEL_C1NCH_POSITION                             0x0
#define _CM1NSEL_C1NCH_SIZE                                 0x3
#define _CM1NSEL_C1NCH_LENGTH                               0x3
#define _CM1NSEL_C1NCH_MASK                                 0x7
#define _CM1NSEL_C1NCH0_POSN                                0x0
#define _CM1NSEL_C1NCH0_POSITION                            0x0
#define _CM1NSEL_C1NCH0_SIZE                                0x1
#define _CM1NSEL_C1NCH0_LENGTH                              0x1
#define _CM1NSEL_C1NCH0_MASK                                0x1
#define _CM1NSEL_C1NCH1_POSN                                0x1
#define _CM1NSEL_C1NCH1_POSITION                            0x1
#define _CM1NSEL_C1NCH1_SIZE                                0x1
#define _CM1NSEL_C1NCH1_LENGTH                              0x1
#define _CM1NSEL_C1NCH1_MASK                                0x2
#define _CM1NSEL_C1NCH2_POSN                                0x2
#define _CM1NSEL_C1NCH2_POSITION                            0x2
#define _CM1NSEL_C1NCH2_SIZE                                0x1
#define _CM1NSEL_C1NCH2_LENGTH                              0x1
#define _CM1NSEL_C1NCH2_MASK                                0x4

// Register: CM1PSEL
#define CM1PSEL CM1PSEL
extern volatile unsigned char           CM1PSEL             __at(0x993);
#ifndef _LIB_BUILD
asm("CM1PSEL equ 0993h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH                  :4;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PSELbits_t;
extern volatile CM1PSELbits_t CM1PSELbits __at(0x993);
// bitfield macros
#define _CM1PSEL_PCH_POSN                                   0x0
#define _CM1PSEL_PCH_POSITION                               0x0
#define _CM1PSEL_PCH_SIZE                                   0x4
#define _CM1PSEL_PCH_LENGTH                                 0x4
#define _CM1PSEL_PCH_MASK                                   0xF
#define _CM1PSEL_PCH0_POSN                                  0x0
#define _CM1PSEL_PCH0_POSITION                              0x0
#define _CM1PSEL_PCH0_SIZE                                  0x1
#define _CM1PSEL_PCH0_LENGTH                                0x1
#define _CM1PSEL_PCH0_MASK                                  0x1
#define _CM1PSEL_PCH1_POSN                                  0x1
#define _CM1PSEL_PCH1_POSITION                              0x1
#define _CM1PSEL_PCH1_SIZE                                  0x1
#define _CM1PSEL_PCH1_LENGTH                                0x1
#define _CM1PSEL_PCH1_MASK                                  0x2
#define _CM1PSEL_PCH2_POSN                                  0x2
#define _CM1PSEL_PCH2_POSITION                              0x2
#define _CM1PSEL_PCH2_SIZE                                  0x1
#define _CM1PSEL_PCH2_LENGTH                                0x1
#define _CM1PSEL_PCH2_MASK                                  0x4
#define _CM1PSEL_C1PCH_POSN                                 0x0
#define _CM1PSEL_C1PCH_POSITION                             0x0
#define _CM1PSEL_C1PCH_SIZE                                 0x4
#define _CM1PSEL_C1PCH_LENGTH                               0x4
#define _CM1PSEL_C1PCH_MASK                                 0xF
#define _CM1PSEL_C1PCH0_POSN                                0x0
#define _CM1PSEL_C1PCH0_POSITION                            0x0
#define _CM1PSEL_C1PCH0_SIZE                                0x1
#define _CM1PSEL_C1PCH0_LENGTH                              0x1
#define _CM1PSEL_C1PCH0_MASK                                0x1
#define _CM1PSEL_C1PCH1_POSN                                0x1
#define _CM1PSEL_C1PCH1_POSITION                            0x1
#define _CM1PSEL_C1PCH1_SIZE                                0x1
#define _CM1PSEL_C1PCH1_LENGTH                              0x1
#define _CM1PSEL_C1PCH1_MASK                                0x2
#define _CM1PSEL_C1PCH2_POSN                                0x2
#define _CM1PSEL_C1PCH2_POSITION                            0x2
#define _CM1PSEL_C1PCH2_SIZE                                0x1
#define _CM1PSEL_C1PCH2_LENGTH                              0x1
#define _CM1PSEL_C1PCH2_MASK                                0x4

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x994);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0994h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned                        :2;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2ON                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x994);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_ON_POSN                                    0x7
#define _CM2CON0_ON_POSITION                                0x7
#define _CM2CON0_ON_SIZE                                    0x1
#define _CM2CON0_ON_LENGTH                                  0x1
#define _CM2CON0_ON_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2ON_POSN                                  0x7
#define _CM2CON0_C2ON_POSITION                              0x7
#define _CM2CON0_C2ON_SIZE                                  0x1
#define _CM2CON0_C2ON_LENGTH                                0x1
#define _CM2CON0_C2ON_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x995);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0995h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x995);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NSEL
#define CM2NSEL CM2NSEL
extern volatile unsigned char           CM2NSEL             __at(0x996);
#ifndef _LIB_BUILD
asm("CM2NSEL equ 0996h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH                  :3;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NSELbits_t;
extern volatile CM2NSELbits_t CM2NSELbits __at(0x996);
// bitfield macros
#define _CM2NSEL_NCH_POSN                                   0x0
#define _CM2NSEL_NCH_POSITION                               0x0
#define _CM2NSEL_NCH_SIZE                                   0x3
#define _CM2NSEL_NCH_LENGTH                                 0x3
#define _CM2NSEL_NCH_MASK                                   0x7
#define _CM2NSEL_NCH0_POSN                                  0x0
#define _CM2NSEL_NCH0_POSITION                              0x0
#define _CM2NSEL_NCH0_SIZE                                  0x1
#define _CM2NSEL_NCH0_LENGTH                                0x1
#define _CM2NSEL_NCH0_MASK                                  0x1
#define _CM2NSEL_NCH1_POSN                                  0x1
#define _CM2NSEL_NCH1_POSITION                              0x1
#define _CM2NSEL_NCH1_SIZE                                  0x1
#define _CM2NSEL_NCH1_LENGTH                                0x1
#define _CM2NSEL_NCH1_MASK                                  0x2
#define _CM2NSEL_NCH2_POSN                                  0x2
#define _CM2NSEL_NCH2_POSITION                              0x2
#define _CM2NSEL_NCH2_SIZE                                  0x1
#define _CM2NSEL_NCH2_LENGTH                                0x1
#define _CM2NSEL_NCH2_MASK                                  0x4
#define _CM2NSEL_C2NCH_POSN                                 0x0
#define _CM2NSEL_C2NCH_POSITION                             0x0
#define _CM2NSEL_C2NCH_SIZE                                 0x3
#define _CM2NSEL_C2NCH_LENGTH                               0x3
#define _CM2NSEL_C2NCH_MASK                                 0x7
#define _CM2NSEL_C2NCH0_POSN                                0x0
#define _CM2NSEL_C2NCH0_POSITION                            0x0
#define _CM2NSEL_C2NCH0_SIZE                                0x1
#define _CM2NSEL_C2NCH0_LENGTH                              0x1
#define _CM2NSEL_C2NCH0_MASK                                0x1
#define _CM2NSEL_C2NCH1_POSN                                0x1
#define _CM2NSEL_C2NCH1_POSITION                            0x1
#define _CM2NSEL_C2NCH1_SIZE                                0x1
#define _CM2NSEL_C2NCH1_LENGTH                              0x1
#define _CM2NSEL_C2NCH1_MASK                                0x2
#define _CM2NSEL_C2NCH2_POSN                                0x2
#define _CM2NSEL_C2NCH2_POSITION                            0x2
#define _CM2NSEL_C2NCH2_SIZE                                0x1
#define _CM2NSEL_C2NCH2_LENGTH                              0x1
#define _CM2NSEL_C2NCH2_MASK                                0x4

// Register: CM2PSEL
#define CM2PSEL CM2PSEL
extern volatile unsigned char           CM2PSEL             __at(0x997);
#ifndef _LIB_BUILD
asm("CM2PSEL equ 0997h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :4;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH                  :4;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PSELbits_t;
extern volatile CM2PSELbits_t CM2PSELbits __at(0x997);
// bitfield macros
#define _CM2PSEL_PCH_POSN                                   0x0
#define _CM2PSEL_PCH_POSITION                               0x0
#define _CM2PSEL_PCH_SIZE                                   0x4
#define _CM2PSEL_PCH_LENGTH                                 0x4
#define _CM2PSEL_PCH_MASK                                   0xF
#define _CM2PSEL_PCH0_POSN                                  0x0
#define _CM2PSEL_PCH0_POSITION                              0x0
#define _CM2PSEL_PCH0_SIZE                                  0x1
#define _CM2PSEL_PCH0_LENGTH                                0x1
#define _CM2PSEL_PCH0_MASK                                  0x1
#define _CM2PSEL_PCH1_POSN                                  0x1
#define _CM2PSEL_PCH1_POSITION                              0x1
#define _CM2PSEL_PCH1_SIZE                                  0x1
#define _CM2PSEL_PCH1_LENGTH                                0x1
#define _CM2PSEL_PCH1_MASK                                  0x2
#define _CM2PSEL_PCH2_POSN                                  0x2
#define _CM2PSEL_PCH2_POSITION                              0x2
#define _CM2PSEL_PCH2_SIZE                                  0x1
#define _CM2PSEL_PCH2_LENGTH                                0x1
#define _CM2PSEL_PCH2_MASK                                  0x4
#define _CM2PSEL_C2PCH_POSN                                 0x0
#define _CM2PSEL_C2PCH_POSITION                             0x0
#define _CM2PSEL_C2PCH_SIZE                                 0x4
#define _CM2PSEL_C2PCH_LENGTH                               0x4
#define _CM2PSEL_C2PCH_MASK                                 0xF
#define _CM2PSEL_C2PCH0_POSN                                0x0
#define _CM2PSEL_C2PCH0_POSITION                            0x0
#define _CM2PSEL_C2PCH0_SIZE                                0x1
#define _CM2PSEL_C2PCH0_LENGTH                              0x1
#define _CM2PSEL_C2PCH0_MASK                                0x1
#define _CM2PSEL_C2PCH1_POSN                                0x1
#define _CM2PSEL_C2PCH1_POSITION                            0x1
#define _CM2PSEL_C2PCH1_SIZE                                0x1
#define _CM2PSEL_C2PCH1_LENGTH                              0x1
#define _CM2PSEL_C2PCH1_MASK                                0x2
#define _CM2PSEL_C2PCH2_POSN                                0x2
#define _CM2PSEL_C2PCH2_POSITION                            0x2
#define _CM2PSEL_C2PCH2_SIZE                                0x1
#define _CM2PSEL_C2PCH2_LENGTH                              0x1
#define _CM2PSEL_C2PCH2_MASK                                0x4

// Register: RC2REG
#define RC2REG RC2REG
extern volatile unsigned char           RC2REG              __at(0xA19);
#ifndef _LIB_BUILD
asm("RC2REG equ 0A19h");
#endif
// aliases
extern volatile unsigned char           RCREG2              __at(0xA19);
#ifndef _LIB_BUILD
asm("RCREG2 equ 0A19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2REG                 :8;
    };
} RC2REGbits_t;
extern volatile RC2REGbits_t RC2REGbits __at(0xA19);
// bitfield macros
#define _RC2REG_RC2REG_POSN                                 0x0
#define _RC2REG_RC2REG_POSITION                             0x0
#define _RC2REG_RC2REG_SIZE                                 0x8
#define _RC2REG_RC2REG_LENGTH                               0x8
#define _RC2REG_RC2REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC2REG                 :8;
    };
} RCREG2bits_t;
extern volatile RCREG2bits_t RCREG2bits __at(0xA19);
// bitfield macros
#define _RCREG2_RC2REG_POSN                                 0x0
#define _RCREG2_RC2REG_POSITION                             0x0
#define _RCREG2_RC2REG_SIZE                                 0x8
#define _RCREG2_RC2REG_LENGTH                               0x8
#define _RCREG2_RC2REG_MASK                                 0xFF

// Register: TX2REG
#define TX2REG TX2REG
extern volatile unsigned char           TX2REG              __at(0xA1A);
#ifndef _LIB_BUILD
asm("TX2REG equ 0A1Ah");
#endif
// aliases
extern volatile unsigned char           TXREG2              __at(0xA1A);
#ifndef _LIB_BUILD
asm("TXREG2 equ 0A1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX2REG                 :8;
    };
} TX2REGbits_t;
extern volatile TX2REGbits_t TX2REGbits __at(0xA1A);
// bitfield macros
#define _TX2REG_TX2REG_POSN                                 0x0
#define _TX2REG_TX2REG_POSITION                             0x0
#define _TX2REG_TX2REG_SIZE                                 0x8
#define _TX2REG_TX2REG_LENGTH                               0x8
#define _TX2REG_TX2REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX2REG                 :8;
    };
} TXREG2bits_t;
extern volatile TXREG2bits_t TXREG2bits __at(0xA1A);
// bitfield macros
#define _TXREG2_TX2REG_POSN                                 0x0
#define _TXREG2_TX2REG_POSITION                             0x0
#define _TXREG2_TX2REG_SIZE                                 0x8
#define _TXREG2_TX2REG_LENGTH                               0x8
#define _TXREG2_TX2REG_MASK                                 0xFF

// Register: SP2BRG
#define SP2BRG SP2BRG
extern volatile unsigned short          SP2BRG              __at(0xA1B);
#ifndef _LIB_BUILD
asm("SP2BRG equ 0A1Bh");
#endif

// Register: SP2BRGL
#define SP2BRGL SP2BRGL
extern volatile unsigned char           SP2BRGL             __at(0xA1B);
#ifndef _LIB_BUILD
asm("SP2BRGL equ 0A1Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG2              __at(0xA1B);
#ifndef _LIB_BUILD
asm("SPBRG2 equ 0A1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGL                :8;
    };
} SP2BRGLbits_t;
extern volatile SP2BRGLbits_t SP2BRGLbits __at(0xA1B);
// bitfield macros
#define _SP2BRGL_SP2BRGL_POSN                               0x0
#define _SP2BRGL_SP2BRGL_POSITION                           0x0
#define _SP2BRGL_SP2BRGL_SIZE                               0x8
#define _SP2BRGL_SP2BRGL_LENGTH                             0x8
#define _SP2BRGL_SP2BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGL                :8;
    };
} SPBRG2bits_t;
extern volatile SPBRG2bits_t SPBRG2bits __at(0xA1B);
// bitfield macros
#define _SPBRG2_SP2BRGL_POSN                                0x0
#define _SPBRG2_SP2BRGL_POSITION                            0x0
#define _SPBRG2_SP2BRGL_SIZE                                0x8
#define _SPBRG2_SP2BRGL_LENGTH                              0x8
#define _SPBRG2_SP2BRGL_MASK                                0xFF

// Register: SP2BRGH
#define SP2BRGH SP2BRGH
extern volatile unsigned char           SP2BRGH             __at(0xA1C);
#ifndef _LIB_BUILD
asm("SP2BRGH equ 0A1Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH2             __at(0xA1C);
#ifndef _LIB_BUILD
asm("SPBRGH2 equ 0A1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGH                :8;
    };
} SP2BRGHbits_t;
extern volatile SP2BRGHbits_t SP2BRGHbits __at(0xA1C);
// bitfield macros
#define _SP2BRGH_SP2BRGH_POSN                               0x0
#define _SP2BRGH_SP2BRGH_POSITION                           0x0
#define _SP2BRGH_SP2BRGH_SIZE                               0x8
#define _SP2BRGH_SP2BRGH_LENGTH                             0x8
#define _SP2BRGH_SP2BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP2BRGH                :8;
    };
} SPBRGH2bits_t;
extern volatile SPBRGH2bits_t SPBRGH2bits __at(0xA1C);
// bitfield macros
#define _SPBRGH2_SP2BRGH_POSN                               0x0
#define _SPBRGH2_SP2BRGH_POSITION                           0x0
#define _SPBRGH2_SP2BRGH_SIZE                               0x8
#define _SPBRGH2_SP2BRGH_LENGTH                             0x8
#define _SPBRGH2_SP2BRGH_MASK                               0xFF

// Register: RC2STA
#define RC2STA RC2STA
extern volatile unsigned char           RC2STA              __at(0xA1D);
#ifndef _LIB_BUILD
asm("RC2STA equ 0A1Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA2              __at(0xA1D);
#ifndef _LIB_BUILD
asm("RCSTA2 equ 0A1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC2STAbits_t;
extern volatile RC2STAbits_t RC2STAbits __at(0xA1D);
// bitfield macros
#define _RC2STA_RX9D_POSN                                   0x0
#define _RC2STA_RX9D_POSITION                               0x0
#define _RC2STA_RX9D_SIZE                                   0x1
#define _RC2STA_RX9D_LENGTH                                 0x1
#define _RC2STA_RX9D_MASK                                   0x1
#define _RC2STA_OERR_POSN                                   0x1
#define _RC2STA_OERR_POSITION                               0x1
#define _RC2STA_OERR_SIZE                                   0x1
#define _RC2STA_OERR_LENGTH                                 0x1
#define _RC2STA_OERR_MASK                                   0x2
#define _RC2STA_FERR_POSN                                   0x2
#define _RC2STA_FERR_POSITION                               0x2
#define _RC2STA_FERR_SIZE                                   0x1
#define _RC2STA_FERR_LENGTH                                 0x1
#define _RC2STA_FERR_MASK                                   0x4
#define _RC2STA_ADDEN_POSN                                  0x3
#define _RC2STA_ADDEN_POSITION                              0x3
#define _RC2STA_ADDEN_SIZE                                  0x1
#define _RC2STA_ADDEN_LENGTH                                0x1
#define _RC2STA_ADDEN_MASK                                  0x8
#define _RC2STA_CREN_POSN                                   0x4
#define _RC2STA_CREN_POSITION                               0x4
#define _RC2STA_CREN_SIZE                                   0x1
#define _RC2STA_CREN_LENGTH                                 0x1
#define _RC2STA_CREN_MASK                                   0x10
#define _RC2STA_SREN_POSN                                   0x5
#define _RC2STA_SREN_POSITION                               0x5
#define _RC2STA_SREN_SIZE                                   0x1
#define _RC2STA_SREN_LENGTH                                 0x1
#define _RC2STA_SREN_MASK                                   0x20
#define _RC2STA_RX9_POSN                                    0x6
#define _RC2STA_RX9_POSITION                                0x6
#define _RC2STA_RX9_SIZE                                    0x1
#define _RC2STA_RX9_LENGTH                                  0x1
#define _RC2STA_RX9_MASK                                    0x40
#define _RC2STA_SPEN_POSN                                   0x7
#define _RC2STA_SPEN_POSITION                               0x7
#define _RC2STA_SPEN_SIZE                                   0x1
#define _RC2STA_SPEN_LENGTH                                 0x1
#define _RC2STA_SPEN_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RCSTA2bits_t;
extern volatile RCSTA2bits_t RCSTA2bits __at(0xA1D);
// bitfield macros
#define _RCSTA2_RX9D_POSN                                   0x0
#define _RCSTA2_RX9D_POSITION                               0x0
#define _RCSTA2_RX9D_SIZE                                   0x1
#define _RCSTA2_RX9D_LENGTH                                 0x1
#define _RCSTA2_RX9D_MASK                                   0x1
#define _RCSTA2_OERR_POSN                                   0x1
#define _RCSTA2_OERR_POSITION                               0x1
#define _RCSTA2_OERR_SIZE                                   0x1
#define _RCSTA2_OERR_LENGTH                                 0x1
#define _RCSTA2_OERR_MASK                                   0x2
#define _RCSTA2_FERR_POSN                                   0x2
#define _RCSTA2_FERR_POSITION                               0x2
#define _RCSTA2_FERR_SIZE                                   0x1
#define _RCSTA2_FERR_LENGTH                                 0x1
#define _RCSTA2_FERR_MASK                                   0x4
#define _RCSTA2_ADDEN_POSN                                  0x3
#define _RCSTA2_ADDEN_POSITION                              0x3
#define _RCSTA2_ADDEN_SIZE                                  0x1
#define _RCSTA2_ADDEN_LENGTH                                0x1
#define _RCSTA2_ADDEN_MASK                                  0x8
#define _RCSTA2_CREN_POSN                                   0x4
#define _RCSTA2_CREN_POSITION                               0x4
#define _RCSTA2_CREN_SIZE                                   0x1
#define _RCSTA2_CREN_LENGTH                                 0x1
#define _RCSTA2_CREN_MASK                                   0x10
#define _RCSTA2_SREN_POSN                                   0x5
#define _RCSTA2_SREN_POSITION                               0x5
#define _RCSTA2_SREN_SIZE                                   0x1
#define _RCSTA2_SREN_LENGTH                                 0x1
#define _RCSTA2_SREN_MASK                                   0x20
#define _RCSTA2_RX9_POSN                                    0x6
#define _RCSTA2_RX9_POSITION                                0x6
#define _RCSTA2_RX9_SIZE                                    0x1
#define _RCSTA2_RX9_LENGTH                                  0x1
#define _RCSTA2_RX9_MASK                                    0x40
#define _RCSTA2_SPEN_POSN                                   0x7
#define _RCSTA2_SPEN_POSITION                               0x7
#define _RCSTA2_SPEN_SIZE                                   0x1
#define _RCSTA2_SPEN_LENGTH                                 0x1
#define _RCSTA2_SPEN_MASK                                   0x80

// Register: TX2STA
#define TX2STA TX2STA
extern volatile unsigned char           TX2STA              __at(0xA1E);
#ifndef _LIB_BUILD
asm("TX2STA equ 0A1Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA2              __at(0xA1E);
#ifndef _LIB_BUILD
asm("TXSTA2 equ 0A1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX2STAbits_t;
extern volatile TX2STAbits_t TX2STAbits __at(0xA1E);
// bitfield macros
#define _TX2STA_TX9D_POSN                                   0x0
#define _TX2STA_TX9D_POSITION                               0x0
#define _TX2STA_TX9D_SIZE                                   0x1
#define _TX2STA_TX9D_LENGTH                                 0x1
#define _TX2STA_TX9D_MASK                                   0x1
#define _TX2STA_TRMT_POSN                                   0x1
#define _TX2STA_TRMT_POSITION                               0x1
#define _TX2STA_TRMT_SIZE                                   0x1
#define _TX2STA_TRMT_LENGTH                                 0x1
#define _TX2STA_TRMT_MASK                                   0x2
#define _TX2STA_BRGH_POSN                                   0x2
#define _TX2STA_BRGH_POSITION                               0x2
#define _TX2STA_BRGH_SIZE                                   0x1
#define _TX2STA_BRGH_LENGTH                                 0x1
#define _TX2STA_BRGH_MASK                                   0x4
#define _TX2STA_SENDB_POSN                                  0x3
#define _TX2STA_SENDB_POSITION                              0x3
#define _TX2STA_SENDB_SIZE                                  0x1
#define _TX2STA_SENDB_LENGTH                                0x1
#define _TX2STA_SENDB_MASK                                  0x8
#define _TX2STA_SYNC_POSN                                   0x4
#define _TX2STA_SYNC_POSITION                               0x4
#define _TX2STA_SYNC_SIZE                                   0x1
#define _TX2STA_SYNC_LENGTH                                 0x1
#define _TX2STA_SYNC_MASK                                   0x10
#define _TX2STA_TXEN_POSN                                   0x5
#define _TX2STA_TXEN_POSITION                               0x5
#define _TX2STA_TXEN_SIZE                                   0x1
#define _TX2STA_TXEN_LENGTH                                 0x1
#define _TX2STA_TXEN_MASK                                   0x20
#define _TX2STA_TX9_POSN                                    0x6
#define _TX2STA_TX9_POSITION                                0x6
#define _TX2STA_TX9_SIZE                                    0x1
#define _TX2STA_TX9_LENGTH                                  0x1
#define _TX2STA_TX9_MASK                                    0x40
#define _TX2STA_CSRC_POSN                                   0x7
#define _TX2STA_CSRC_POSITION                               0x7
#define _TX2STA_CSRC_SIZE                                   0x1
#define _TX2STA_CSRC_LENGTH                                 0x1
#define _TX2STA_CSRC_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TXSTA2bits_t;
extern volatile TXSTA2bits_t TXSTA2bits __at(0xA1E);
// bitfield macros
#define _TXSTA2_TX9D_POSN                                   0x0
#define _TXSTA2_TX9D_POSITION                               0x0
#define _TXSTA2_TX9D_SIZE                                   0x1
#define _TXSTA2_TX9D_LENGTH                                 0x1
#define _TXSTA2_TX9D_MASK                                   0x1
#define _TXSTA2_TRMT_POSN                                   0x1
#define _TXSTA2_TRMT_POSITION                               0x1
#define _TXSTA2_TRMT_SIZE                                   0x1
#define _TXSTA2_TRMT_LENGTH                                 0x1
#define _TXSTA2_TRMT_MASK                                   0x2
#define _TXSTA2_BRGH_POSN                                   0x2
#define _TXSTA2_BRGH_POSITION                               0x2
#define _TXSTA2_BRGH_SIZE                                   0x1
#define _TXSTA2_BRGH_LENGTH                                 0x1
#define _TXSTA2_BRGH_MASK                                   0x4
#define _TXSTA2_SENDB_POSN                                  0x3
#define _TXSTA2_SENDB_POSITION                              0x3
#define _TXSTA2_SENDB_SIZE                                  0x1
#define _TXSTA2_SENDB_LENGTH                                0x1
#define _TXSTA2_SENDB_MASK                                  0x8
#define _TXSTA2_SYNC_POSN                                   0x4
#define _TXSTA2_SYNC_POSITION                               0x4
#define _TXSTA2_SYNC_SIZE                                   0x1
#define _TXSTA2_SYNC_LENGTH                                 0x1
#define _TXSTA2_SYNC_MASK                                   0x10
#define _TXSTA2_TXEN_POSN                                   0x5
#define _TXSTA2_TXEN_POSITION                               0x5
#define _TXSTA2_TXEN_SIZE                                   0x1
#define _TXSTA2_TXEN_LENGTH                                 0x1
#define _TXSTA2_TXEN_MASK                                   0x20
#define _TXSTA2_TX9_POSN                                    0x6
#define _TXSTA2_TX9_POSITION                                0x6
#define _TXSTA2_TX9_SIZE                                    0x1
#define _TXSTA2_TX9_LENGTH                                  0x1
#define _TXSTA2_TX9_MASK                                    0x40
#define _TXSTA2_CSRC_POSN                                   0x7
#define _TXSTA2_CSRC_POSITION                               0x7
#define _TXSTA2_CSRC_SIZE                                   0x1
#define _TXSTA2_CSRC_LENGTH                                 0x1
#define _TXSTA2_CSRC_MASK                                   0x80

// Register: BAUD2CON
#define BAUD2CON BAUD2CON
extern volatile unsigned char           BAUD2CON            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUD2CON equ 0A1Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON2            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUDCON2 equ 0A1Fh");
#endif
extern volatile unsigned char           BAUDCTL2            __at(0xA1F);
#ifndef _LIB_BUILD
asm("BAUDCTL2 equ 0A1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD2CONbits_t;
extern volatile BAUD2CONbits_t BAUD2CONbits __at(0xA1F);
// bitfield macros
#define _BAUD2CON_ABDEN_POSN                                0x0
#define _BAUD2CON_ABDEN_POSITION                            0x0
#define _BAUD2CON_ABDEN_SIZE                                0x1
#define _BAUD2CON_ABDEN_LENGTH                              0x1
#define _BAUD2CON_ABDEN_MASK                                0x1
#define _BAUD2CON_WUE_POSN                                  0x1
#define _BAUD2CON_WUE_POSITION                              0x1
#define _BAUD2CON_WUE_SIZE                                  0x1
#define _BAUD2CON_WUE_LENGTH                                0x1
#define _BAUD2CON_WUE_MASK                                  0x2
#define _BAUD2CON_BRG16_POSN                                0x3
#define _BAUD2CON_BRG16_POSITION                            0x3
#define _BAUD2CON_BRG16_SIZE                                0x1
#define _BAUD2CON_BRG16_LENGTH                              0x1
#define _BAUD2CON_BRG16_MASK                                0x8
#define _BAUD2CON_SCKP_POSN                                 0x4
#define _BAUD2CON_SCKP_POSITION                             0x4
#define _BAUD2CON_SCKP_SIZE                                 0x1
#define _BAUD2CON_SCKP_LENGTH                               0x1
#define _BAUD2CON_SCKP_MASK                                 0x10
#define _BAUD2CON_RCIDL_POSN                                0x6
#define _BAUD2CON_RCIDL_POSITION                            0x6
#define _BAUD2CON_RCIDL_SIZE                                0x1
#define _BAUD2CON_RCIDL_LENGTH                              0x1
#define _BAUD2CON_RCIDL_MASK                                0x40
#define _BAUD2CON_ABDOVF_POSN                               0x7
#define _BAUD2CON_ABDOVF_POSITION                           0x7
#define _BAUD2CON_ABDOVF_SIZE                               0x1
#define _BAUD2CON_ABDOVF_LENGTH                             0x1
#define _BAUD2CON_ABDOVF_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCON2bits_t;
extern volatile BAUDCON2bits_t BAUDCON2bits __at(0xA1F);
// bitfield macros
#define _BAUDCON2_ABDEN_POSN                                0x0
#define _BAUDCON2_ABDEN_POSITION                            0x0
#define _BAUDCON2_ABDEN_SIZE                                0x1
#define _BAUDCON2_ABDEN_LENGTH                              0x1
#define _BAUDCON2_ABDEN_MASK                                0x1
#define _BAUDCON2_WUE_POSN                                  0x1
#define _BAUDCON2_WUE_POSITION                              0x1
#define _BAUDCON2_WUE_SIZE                                  0x1
#define _BAUDCON2_WUE_LENGTH                                0x1
#define _BAUDCON2_WUE_MASK                                  0x2
#define _BAUDCON2_BRG16_POSN                                0x3
#define _BAUDCON2_BRG16_POSITION                            0x3
#define _BAUDCON2_BRG16_SIZE                                0x1
#define _BAUDCON2_BRG16_LENGTH                              0x1
#define _BAUDCON2_BRG16_MASK                                0x8
#define _BAUDCON2_SCKP_POSN                                 0x4
#define _BAUDCON2_SCKP_POSITION                             0x4
#define _BAUDCON2_SCKP_SIZE                                 0x1
#define _BAUDCON2_SCKP_LENGTH                               0x1
#define _BAUDCON2_SCKP_MASK                                 0x10
#define _BAUDCON2_RCIDL_POSN                                0x6
#define _BAUDCON2_RCIDL_POSITION                            0x6
#define _BAUDCON2_RCIDL_SIZE                                0x1
#define _BAUDCON2_RCIDL_LENGTH                              0x1
#define _BAUDCON2_RCIDL_MASK                                0x40
#define _BAUDCON2_ABDOVF_POSN                               0x7
#define _BAUDCON2_ABDOVF_POSITION                           0x7
#define _BAUDCON2_ABDOVF_SIZE                               0x1
#define _BAUDCON2_ABDOVF_LENGTH                             0x1
#define _BAUDCON2_ABDOVF_MASK                               0x80
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUDCTL2bits_t;
extern volatile BAUDCTL2bits_t BAUDCTL2bits __at(0xA1F);
// bitfield macros
#define _BAUDCTL2_ABDEN_POSN                                0x0
#define _BAUDCTL2_ABDEN_POSITION                            0x0
#define _BAUDCTL2_ABDEN_SIZE                                0x1
#define _BAUDCTL2_ABDEN_LENGTH                              0x1
#define _BAUDCTL2_ABDEN_MASK                                0x1
#define _BAUDCTL2_WUE_POSN                                  0x1
#define _BAUDCTL2_WUE_POSITION                              0x1
#define _BAUDCTL2_WUE_SIZE                                  0x1
#define _BAUDCTL2_WUE_LENGTH                                0x1
#define _BAUDCTL2_WUE_MASK                                  0x2
#define _BAUDCTL2_BRG16_POSN                                0x3
#define _BAUDCTL2_BRG16_POSITION                            0x3
#define _BAUDCTL2_BRG16_SIZE                                0x1
#define _BAUDCTL2_BRG16_LENGTH                              0x1
#define _BAUDCTL2_BRG16_MASK                                0x8
#define _BAUDCTL2_SCKP_POSN                                 0x4
#define _BAUDCTL2_SCKP_POSITION                             0x4
#define _BAUDCTL2_SCKP_SIZE                                 0x1
#define _BAUDCTL2_SCKP_LENGTH                               0x1
#define _BAUDCTL2_SCKP_MASK                                 0x10
#define _BAUDCTL2_RCIDL_POSN                                0x6
#define _BAUDCTL2_RCIDL_POSITION                            0x6
#define _BAUDCTL2_RCIDL_SIZE                                0x1
#define _BAUDCTL2_RCIDL_LENGTH                              0x1
#define _BAUDCTL2_RCIDL_MASK                                0x40
#define _BAUDCTL2_ABDOVF_POSN                               0x7
#define _BAUDCTL2_ABDOVF_POSITION                           0x7
#define _BAUDCTL2_ABDOVF_SIZE                               0x1
#define _BAUDCTL2_ABDOVF_LENGTH                             0x1
#define _BAUDCTL2_ABDOVF_MASK                               0x80

// Register: RTCCON
#define RTCCON RTCCON
extern volatile unsigned char           RTCCON              __at(0xC0C);
#ifndef _LIB_BUILD
asm("RTCCON equ 0C0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RTCCLKSEL              :2;
        unsigned                        :1;
        unsigned HALFSEC                :1;
        unsigned RTCSYNC                :1;
        unsigned RTCWREN                :1;
        unsigned                        :1;
        unsigned RTCEN                  :1;
    };
    struct {
        unsigned RTCCLKSEL0             :1;
        unsigned RTCCLKSEL1             :1;
    };
} RTCCONbits_t;
extern volatile RTCCONbits_t RTCCONbits __at(0xC0C);
// bitfield macros
#define _RTCCON_RTCCLKSEL_POSN                              0x0
#define _RTCCON_RTCCLKSEL_POSITION                          0x0
#define _RTCCON_RTCCLKSEL_SIZE                              0x2
#define _RTCCON_RTCCLKSEL_LENGTH                            0x2
#define _RTCCON_RTCCLKSEL_MASK                              0x3
#define _RTCCON_HALFSEC_POSN                                0x3
#define _RTCCON_HALFSEC_POSITION                            0x3
#define _RTCCON_HALFSEC_SIZE                                0x1
#define _RTCCON_HALFSEC_LENGTH                              0x1
#define _RTCCON_HALFSEC_MASK                                0x8
#define _RTCCON_RTCSYNC_POSN                                0x4
#define _RTCCON_RTCSYNC_POSITION                            0x4
#define _RTCCON_RTCSYNC_SIZE                                0x1
#define _RTCCON_RTCSYNC_LENGTH                              0x1
#define _RTCCON_RTCSYNC_MASK                                0x10
#define _RTCCON_RTCWREN_POSN                                0x5
#define _RTCCON_RTCWREN_POSITION                            0x5
#define _RTCCON_RTCWREN_SIZE                                0x1
#define _RTCCON_RTCWREN_LENGTH                              0x1
#define _RTCCON_RTCWREN_MASK                                0x20
#define _RTCCON_RTCEN_POSN                                  0x7
#define _RTCCON_RTCEN_POSITION                              0x7
#define _RTCCON_RTCEN_SIZE                                  0x1
#define _RTCCON_RTCEN_LENGTH                                0x1
#define _RTCCON_RTCEN_MASK                                  0x80
#define _RTCCON_RTCCLKSEL0_POSN                             0x0
#define _RTCCON_RTCCLKSEL0_POSITION                         0x0
#define _RTCCON_RTCCLKSEL0_SIZE                             0x1
#define _RTCCON_RTCCLKSEL0_LENGTH                           0x1
#define _RTCCON_RTCCLKSEL0_MASK                             0x1
#define _RTCCON_RTCCLKSEL1_POSN                             0x1
#define _RTCCON_RTCCLKSEL1_POSITION                         0x1
#define _RTCCON_RTCCLKSEL1_SIZE                             0x1
#define _RTCCON_RTCCLKSEL1_LENGTH                           0x1
#define _RTCCON_RTCCLKSEL1_MASK                             0x2

// Register: RTCCAL
#define RTCCAL RTCCAL
extern volatile unsigned char           RTCCAL              __at(0xC0D);
#ifndef _LIB_BUILD
asm("RTCCAL equ 0C0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CAL                    :8;
    };
    struct {
        unsigned CAL0                   :1;
        unsigned CAL1                   :1;
        unsigned CAL2                   :1;
        unsigned CAL3                   :1;
        unsigned CAL4                   :1;
        unsigned CAL5                   :1;
        unsigned CAL6                   :1;
        unsigned CAL7                   :1;
    };
} RTCCALbits_t;
extern volatile RTCCALbits_t RTCCALbits __at(0xC0D);
// bitfield macros
#define _RTCCAL_CAL_POSN                                    0x0
#define _RTCCAL_CAL_POSITION                                0x0
#define _RTCCAL_CAL_SIZE                                    0x8
#define _RTCCAL_CAL_LENGTH                                  0x8
#define _RTCCAL_CAL_MASK                                    0xFF
#define _RTCCAL_CAL0_POSN                                   0x0
#define _RTCCAL_CAL0_POSITION                               0x0
#define _RTCCAL_CAL0_SIZE                                   0x1
#define _RTCCAL_CAL0_LENGTH                                 0x1
#define _RTCCAL_CAL0_MASK                                   0x1
#define _RTCCAL_CAL1_POSN                                   0x1
#define _RTCCAL_CAL1_POSITION                               0x1
#define _RTCCAL_CAL1_SIZE                                   0x1
#define _RTCCAL_CAL1_LENGTH                                 0x1
#define _RTCCAL_CAL1_MASK                                   0x2
#define _RTCCAL_CAL2_POSN                                   0x2
#define _RTCCAL_CAL2_POSITION                               0x2
#define _RTCCAL_CAL2_SIZE                                   0x1
#define _RTCCAL_CAL2_LENGTH                                 0x1
#define _RTCCAL_CAL2_MASK                                   0x4
#define _RTCCAL_CAL3_POSN                                   0x3
#define _RTCCAL_CAL3_POSITION                               0x3
#define _RTCCAL_CAL3_SIZE                                   0x1
#define _RTCCAL_CAL3_LENGTH                                 0x1
#define _RTCCAL_CAL3_MASK                                   0x8
#define _RTCCAL_CAL4_POSN                                   0x4
#define _RTCCAL_CAL4_POSITION                               0x4
#define _RTCCAL_CAL4_SIZE                                   0x1
#define _RTCCAL_CAL4_LENGTH                                 0x1
#define _RTCCAL_CAL4_MASK                                   0x10
#define _RTCCAL_CAL5_POSN                                   0x5
#define _RTCCAL_CAL5_POSITION                               0x5
#define _RTCCAL_CAL5_SIZE                                   0x1
#define _RTCCAL_CAL5_LENGTH                                 0x1
#define _RTCCAL_CAL5_MASK                                   0x20
#define _RTCCAL_CAL6_POSN                                   0x6
#define _RTCCAL_CAL6_POSITION                               0x6
#define _RTCCAL_CAL6_SIZE                                   0x1
#define _RTCCAL_CAL6_LENGTH                                 0x1
#define _RTCCAL_CAL6_MASK                                   0x40
#define _RTCCAL_CAL7_POSN                                   0x7
#define _RTCCAL_CAL7_POSITION                               0x7
#define _RTCCAL_CAL7_SIZE                                   0x1
#define _RTCCAL_CAL7_LENGTH                                 0x1
#define _RTCCAL_CAL7_MASK                                   0x80

// Register: ALRMCON
#define ALRMCON ALRMCON
extern volatile unsigned char           ALRMCON             __at(0xC0E);
#ifndef _LIB_BUILD
asm("ALRMCON equ 0C0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned AMASK                  :4;
        unsigned CHIME                  :1;
        unsigned ALRMEN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned AMASK0                 :1;
        unsigned AMASK1                 :1;
        unsigned AMASK2                 :1;
        unsigned AMASK3                 :1;
    };
} ALRMCONbits_t;
extern volatile ALRMCONbits_t ALRMCONbits __at(0xC0E);
// bitfield macros
#define _ALRMCON_AMASK_POSN                                 0x2
#define _ALRMCON_AMASK_POSITION                             0x2
#define _ALRMCON_AMASK_SIZE                                 0x4
#define _ALRMCON_AMASK_LENGTH                               0x4
#define _ALRMCON_AMASK_MASK                                 0x3C
#define _ALRMCON_CHIME_POSN                                 0x6
#define _ALRMCON_CHIME_POSITION                             0x6
#define _ALRMCON_CHIME_SIZE                                 0x1
#define _ALRMCON_CHIME_LENGTH                               0x1
#define _ALRMCON_CHIME_MASK                                 0x40
#define _ALRMCON_ALRMEN_POSN                                0x7
#define _ALRMCON_ALRMEN_POSITION                            0x7
#define _ALRMCON_ALRMEN_SIZE                                0x1
#define _ALRMCON_ALRMEN_LENGTH                              0x1
#define _ALRMCON_ALRMEN_MASK                                0x80
#define _ALRMCON_AMASK0_POSN                                0x2
#define _ALRMCON_AMASK0_POSITION                            0x2
#define _ALRMCON_AMASK0_SIZE                                0x1
#define _ALRMCON_AMASK0_LENGTH                              0x1
#define _ALRMCON_AMASK0_MASK                                0x4
#define _ALRMCON_AMASK1_POSN                                0x3
#define _ALRMCON_AMASK1_POSITION                            0x3
#define _ALRMCON_AMASK1_SIZE                                0x1
#define _ALRMCON_AMASK1_LENGTH                              0x1
#define _ALRMCON_AMASK1_MASK                                0x8
#define _ALRMCON_AMASK2_POSN                                0x4
#define _ALRMCON_AMASK2_POSITION                            0x4
#define _ALRMCON_AMASK2_SIZE                                0x1
#define _ALRMCON_AMASK2_LENGTH                              0x1
#define _ALRMCON_AMASK2_MASK                                0x10
#define _ALRMCON_AMASK3_POSN                                0x5
#define _ALRMCON_AMASK3_POSITION                            0x5
#define _ALRMCON_AMASK3_SIZE                                0x1
#define _ALRMCON_AMASK3_LENGTH                              0x1
#define _ALRMCON_AMASK3_MASK                                0x20

// Register: ALRMRPT
#define ALRMRPT ALRMRPT
extern volatile unsigned char           ALRMRPT             __at(0xC0F);
#ifndef _LIB_BUILD
asm("ALRMRPT equ 0C0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ARPT                   :8;
    };
    struct {
        unsigned ARPT0                  :1;
        unsigned ARPT1                  :1;
        unsigned ARPT2                  :1;
        unsigned ARPT3                  :1;
        unsigned ARPT4                  :1;
        unsigned ARPT5                  :1;
        unsigned ARPT6                  :1;
        unsigned ARPT7                  :1;
    };
} ALRMRPTbits_t;
extern volatile ALRMRPTbits_t ALRMRPTbits __at(0xC0F);
// bitfield macros
#define _ALRMRPT_ARPT_POSN                                  0x0
#define _ALRMRPT_ARPT_POSITION                              0x0
#define _ALRMRPT_ARPT_SIZE                                  0x8
#define _ALRMRPT_ARPT_LENGTH                                0x8
#define _ALRMRPT_ARPT_MASK                                  0xFF
#define _ALRMRPT_ARPT0_POSN                                 0x0
#define _ALRMRPT_ARPT0_POSITION                             0x0
#define _ALRMRPT_ARPT0_SIZE                                 0x1
#define _ALRMRPT_ARPT0_LENGTH                               0x1
#define _ALRMRPT_ARPT0_MASK                                 0x1
#define _ALRMRPT_ARPT1_POSN                                 0x1
#define _ALRMRPT_ARPT1_POSITION                             0x1
#define _ALRMRPT_ARPT1_SIZE                                 0x1
#define _ALRMRPT_ARPT1_LENGTH                               0x1
#define _ALRMRPT_ARPT1_MASK                                 0x2
#define _ALRMRPT_ARPT2_POSN                                 0x2
#define _ALRMRPT_ARPT2_POSITION                             0x2
#define _ALRMRPT_ARPT2_SIZE                                 0x1
#define _ALRMRPT_ARPT2_LENGTH                               0x1
#define _ALRMRPT_ARPT2_MASK                                 0x4
#define _ALRMRPT_ARPT3_POSN                                 0x3
#define _ALRMRPT_ARPT3_POSITION                             0x3
#define _ALRMRPT_ARPT3_SIZE                                 0x1
#define _ALRMRPT_ARPT3_LENGTH                               0x1
#define _ALRMRPT_ARPT3_MASK                                 0x8
#define _ALRMRPT_ARPT4_POSN                                 0x4
#define _ALRMRPT_ARPT4_POSITION                             0x4
#define _ALRMRPT_ARPT4_SIZE                                 0x1
#define _ALRMRPT_ARPT4_LENGTH                               0x1
#define _ALRMRPT_ARPT4_MASK                                 0x10
#define _ALRMRPT_ARPT5_POSN                                 0x5
#define _ALRMRPT_ARPT5_POSITION                             0x5
#define _ALRMRPT_ARPT5_SIZE                                 0x1
#define _ALRMRPT_ARPT5_LENGTH                               0x1
#define _ALRMRPT_ARPT5_MASK                                 0x20
#define _ALRMRPT_ARPT6_POSN                                 0x6
#define _ALRMRPT_ARPT6_POSITION                             0x6
#define _ALRMRPT_ARPT6_SIZE                                 0x1
#define _ALRMRPT_ARPT6_LENGTH                               0x1
#define _ALRMRPT_ARPT6_MASK                                 0x40
#define _ALRMRPT_ARPT7_POSN                                 0x7
#define _ALRMRPT_ARPT7_POSITION                             0x7
#define _ALRMRPT_ARPT7_SIZE                                 0x1
#define _ALRMRPT_ARPT7_LENGTH                               0x1
#define _ALRMRPT_ARPT7_MASK                                 0x80

// Register: YEAR
#define YEAR YEAR
extern volatile unsigned char           YEAR                __at(0xC10);
#ifndef _LIB_BUILD
asm("YEAR equ 0C10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned YEARL                  :4;
        unsigned YEARH                  :4;
    };
    struct {
        unsigned YEARL0                 :1;
        unsigned YEARL1                 :1;
        unsigned YEARL2                 :1;
        unsigned YEARL3                 :1;
        unsigned YEARH0                 :1;
        unsigned YEARH1                 :1;
        unsigned YEARH2                 :1;
        unsigned YEARH3                 :1;
    };
} YEARbits_t;
extern volatile YEARbits_t YEARbits __at(0xC10);
// bitfield macros
#define _YEAR_YEARL_POSN                                    0x0
#define _YEAR_YEARL_POSITION                                0x0
#define _YEAR_YEARL_SIZE                                    0x4
#define _YEAR_YEARL_LENGTH                                  0x4
#define _YEAR_YEARL_MASK                                    0xF
#define _YEAR_YEARH_POSN                                    0x4
#define _YEAR_YEARH_POSITION                                0x4
#define _YEAR_YEARH_SIZE                                    0x4
#define _YEAR_YEARH_LENGTH                                  0x4
#define _YEAR_YEARH_MASK                                    0xF0
#define _YEAR_YEARL0_POSN                                   0x0
#define _YEAR_YEARL0_POSITION                               0x0
#define _YEAR_YEARL0_SIZE                                   0x1
#define _YEAR_YEARL0_LENGTH                                 0x1
#define _YEAR_YEARL0_MASK                                   0x1
#define _YEAR_YEARL1_POSN                                   0x1
#define _YEAR_YEARL1_POSITION                               0x1
#define _YEAR_YEARL1_SIZE                                   0x1
#define _YEAR_YEARL1_LENGTH                                 0x1
#define _YEAR_YEARL1_MASK                                   0x2
#define _YEAR_YEARL2_POSN                                   0x2
#define _YEAR_YEARL2_POSITION                               0x2
#define _YEAR_YEARL2_SIZE                                   0x1
#define _YEAR_YEARL2_LENGTH                                 0x1
#define _YEAR_YEARL2_MASK                                   0x4
#define _YEAR_YEARL3_POSN                                   0x3
#define _YEAR_YEARL3_POSITION                               0x3
#define _YEAR_YEARL3_SIZE                                   0x1
#define _YEAR_YEARL3_LENGTH                                 0x1
#define _YEAR_YEARL3_MASK                                   0x8
#define _YEAR_YEARH0_POSN                                   0x4
#define _YEAR_YEARH0_POSITION                               0x4
#define _YEAR_YEARH0_SIZE                                   0x1
#define _YEAR_YEARH0_LENGTH                                 0x1
#define _YEAR_YEARH0_MASK                                   0x10
#define _YEAR_YEARH1_POSN                                   0x5
#define _YEAR_YEARH1_POSITION                               0x5
#define _YEAR_YEARH1_SIZE                                   0x1
#define _YEAR_YEARH1_LENGTH                                 0x1
#define _YEAR_YEARH1_MASK                                   0x20
#define _YEAR_YEARH2_POSN                                   0x6
#define _YEAR_YEARH2_POSITION                               0x6
#define _YEAR_YEARH2_SIZE                                   0x1
#define _YEAR_YEARH2_LENGTH                                 0x1
#define _YEAR_YEARH2_MASK                                   0x40
#define _YEAR_YEARH3_POSN                                   0x7
#define _YEAR_YEARH3_POSITION                               0x7
#define _YEAR_YEARH3_SIZE                                   0x1
#define _YEAR_YEARH3_LENGTH                                 0x1
#define _YEAR_YEARH3_MASK                                   0x80

// Register: MONTH
#define MONTH MONTH
extern volatile unsigned char           MONTH               __at(0xC11);
#ifndef _LIB_BUILD
asm("MONTH equ 0C11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MONTHL                 :4;
    };
    struct {
        unsigned MONTHL0                :1;
        unsigned MONTHL1                :1;
        unsigned MONTHL2                :1;
        unsigned MONTHL3                :1;
        unsigned MONTHH                 :1;
    };
} MONTHbits_t;
extern volatile MONTHbits_t MONTHbits __at(0xC11);
// bitfield macros
#define _MONTH_MONTHL_POSN                                  0x0
#define _MONTH_MONTHL_POSITION                              0x0
#define _MONTH_MONTHL_SIZE                                  0x4
#define _MONTH_MONTHL_LENGTH                                0x4
#define _MONTH_MONTHL_MASK                                  0xF
#define _MONTH_MONTHL0_POSN                                 0x0
#define _MONTH_MONTHL0_POSITION                             0x0
#define _MONTH_MONTHL0_SIZE                                 0x1
#define _MONTH_MONTHL0_LENGTH                               0x1
#define _MONTH_MONTHL0_MASK                                 0x1
#define _MONTH_MONTHL1_POSN                                 0x1
#define _MONTH_MONTHL1_POSITION                             0x1
#define _MONTH_MONTHL1_SIZE                                 0x1
#define _MONTH_MONTHL1_LENGTH                               0x1
#define _MONTH_MONTHL1_MASK                                 0x2
#define _MONTH_MONTHL2_POSN                                 0x2
#define _MONTH_MONTHL2_POSITION                             0x2
#define _MONTH_MONTHL2_SIZE                                 0x1
#define _MONTH_MONTHL2_LENGTH                               0x1
#define _MONTH_MONTHL2_MASK                                 0x4
#define _MONTH_MONTHL3_POSN                                 0x3
#define _MONTH_MONTHL3_POSITION                             0x3
#define _MONTH_MONTHL3_SIZE                                 0x1
#define _MONTH_MONTHL3_LENGTH                               0x1
#define _MONTH_MONTHL3_MASK                                 0x8
#define _MONTH_MONTHH_POSN                                  0x4
#define _MONTH_MONTHH_POSITION                              0x4
#define _MONTH_MONTHH_SIZE                                  0x1
#define _MONTH_MONTHH_LENGTH                                0x1
#define _MONTH_MONTHH_MASK                                  0x10

// Register: WEEKDAY
#define WEEKDAY WEEKDAY
extern volatile unsigned char           WEEKDAY             __at(0xC12);
#ifndef _LIB_BUILD
asm("WEEKDAY equ 0C12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WDAY                   :3;
    };
    struct {
        unsigned WDAY0                  :1;
        unsigned WDAY1                  :1;
        unsigned WDAY2                  :1;
    };
} WEEKDAYbits_t;
extern volatile WEEKDAYbits_t WEEKDAYbits __at(0xC12);
// bitfield macros
#define _WEEKDAY_WDAY_POSN                                  0x0
#define _WEEKDAY_WDAY_POSITION                              0x0
#define _WEEKDAY_WDAY_SIZE                                  0x3
#define _WEEKDAY_WDAY_LENGTH                                0x3
#define _WEEKDAY_WDAY_MASK                                  0x7
#define _WEEKDAY_WDAY0_POSN                                 0x0
#define _WEEKDAY_WDAY0_POSITION                             0x0
#define _WEEKDAY_WDAY0_SIZE                                 0x1
#define _WEEKDAY_WDAY0_LENGTH                               0x1
#define _WEEKDAY_WDAY0_MASK                                 0x1
#define _WEEKDAY_WDAY1_POSN                                 0x1
#define _WEEKDAY_WDAY1_POSITION                             0x1
#define _WEEKDAY_WDAY1_SIZE                                 0x1
#define _WEEKDAY_WDAY1_LENGTH                               0x1
#define _WEEKDAY_WDAY1_MASK                                 0x2
#define _WEEKDAY_WDAY2_POSN                                 0x2
#define _WEEKDAY_WDAY2_POSITION                             0x2
#define _WEEKDAY_WDAY2_SIZE                                 0x1
#define _WEEKDAY_WDAY2_LENGTH                               0x1
#define _WEEKDAY_WDAY2_MASK                                 0x4

// Register: DAY
#define DAY DAY
extern volatile unsigned char           DAY                 __at(0xC13);
#ifndef _LIB_BUILD
asm("DAY equ 0C13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAYL                   :4;
        unsigned DAYH                   :2;
    };
    struct {
        unsigned DAYL0                  :1;
        unsigned DAYL1                  :1;
        unsigned DAYL2                  :1;
        unsigned DAYL3                  :1;
        unsigned DAYH0                  :1;
        unsigned DAYH1                  :1;
    };
} DAYbits_t;
extern volatile DAYbits_t DAYbits __at(0xC13);
// bitfield macros
#define _DAY_DAYL_POSN                                      0x0
#define _DAY_DAYL_POSITION                                  0x0
#define _DAY_DAYL_SIZE                                      0x4
#define _DAY_DAYL_LENGTH                                    0x4
#define _DAY_DAYL_MASK                                      0xF
#define _DAY_DAYH_POSN                                      0x4
#define _DAY_DAYH_POSITION                                  0x4
#define _DAY_DAYH_SIZE                                      0x2
#define _DAY_DAYH_LENGTH                                    0x2
#define _DAY_DAYH_MASK                                      0x30
#define _DAY_DAYL0_POSN                                     0x0
#define _DAY_DAYL0_POSITION                                 0x0
#define _DAY_DAYL0_SIZE                                     0x1
#define _DAY_DAYL0_LENGTH                                   0x1
#define _DAY_DAYL0_MASK                                     0x1
#define _DAY_DAYL1_POSN                                     0x1
#define _DAY_DAYL1_POSITION                                 0x1
#define _DAY_DAYL1_SIZE                                     0x1
#define _DAY_DAYL1_LENGTH                                   0x1
#define _DAY_DAYL1_MASK                                     0x2
#define _DAY_DAYL2_POSN                                     0x2
#define _DAY_DAYL2_POSITION                                 0x2
#define _DAY_DAYL2_SIZE                                     0x1
#define _DAY_DAYL2_LENGTH                                   0x1
#define _DAY_DAYL2_MASK                                     0x4
#define _DAY_DAYL3_POSN                                     0x3
#define _DAY_DAYL3_POSITION                                 0x3
#define _DAY_DAYL3_SIZE                                     0x1
#define _DAY_DAYL3_LENGTH                                   0x1
#define _DAY_DAYL3_MASK                                     0x8
#define _DAY_DAYH0_POSN                                     0x4
#define _DAY_DAYH0_POSITION                                 0x4
#define _DAY_DAYH0_SIZE                                     0x1
#define _DAY_DAYH0_LENGTH                                   0x1
#define _DAY_DAYH0_MASK                                     0x10
#define _DAY_DAYH1_POSN                                     0x5
#define _DAY_DAYH1_POSITION                                 0x5
#define _DAY_DAYH1_SIZE                                     0x1
#define _DAY_DAYH1_LENGTH                                   0x1
#define _DAY_DAYH1_MASK                                     0x20

// Register: HOURS
#define HOURS HOURS
extern volatile unsigned char           HOURS               __at(0xC14);
#ifndef _LIB_BUILD
asm("HOURS equ 0C14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HRL                    :4;
        unsigned HRH                    :2;
    };
    struct {
        unsigned HRL0                   :1;
        unsigned HRL1                   :1;
        unsigned HRL2                   :1;
        unsigned HRL3                   :1;
        unsigned HRH0                   :1;
        unsigned HRH1                   :1;
    };
} HOURSbits_t;
extern volatile HOURSbits_t HOURSbits __at(0xC14);
// bitfield macros
#define _HOURS_HRL_POSN                                     0x0
#define _HOURS_HRL_POSITION                                 0x0
#define _HOURS_HRL_SIZE                                     0x4
#define _HOURS_HRL_LENGTH                                   0x4
#define _HOURS_HRL_MASK                                     0xF
#define _HOURS_HRH_POSN                                     0x4
#define _HOURS_HRH_POSITION                                 0x4
#define _HOURS_HRH_SIZE                                     0x2
#define _HOURS_HRH_LENGTH                                   0x2
#define _HOURS_HRH_MASK                                     0x30
#define _HOURS_HRL0_POSN                                    0x0
#define _HOURS_HRL0_POSITION                                0x0
#define _HOURS_HRL0_SIZE                                    0x1
#define _HOURS_HRL0_LENGTH                                  0x1
#define _HOURS_HRL0_MASK                                    0x1
#define _HOURS_HRL1_POSN                                    0x1
#define _HOURS_HRL1_POSITION                                0x1
#define _HOURS_HRL1_SIZE                                    0x1
#define _HOURS_HRL1_LENGTH                                  0x1
#define _HOURS_HRL1_MASK                                    0x2
#define _HOURS_HRL2_POSN                                    0x2
#define _HOURS_HRL2_POSITION                                0x2
#define _HOURS_HRL2_SIZE                                    0x1
#define _HOURS_HRL2_LENGTH                                  0x1
#define _HOURS_HRL2_MASK                                    0x4
#define _HOURS_HRL3_POSN                                    0x3
#define _HOURS_HRL3_POSITION                                0x3
#define _HOURS_HRL3_SIZE                                    0x1
#define _HOURS_HRL3_LENGTH                                  0x1
#define _HOURS_HRL3_MASK                                    0x8
#define _HOURS_HRH0_POSN                                    0x4
#define _HOURS_HRH0_POSITION                                0x4
#define _HOURS_HRH0_SIZE                                    0x1
#define _HOURS_HRH0_LENGTH                                  0x1
#define _HOURS_HRH0_MASK                                    0x10
#define _HOURS_HRH1_POSN                                    0x5
#define _HOURS_HRH1_POSITION                                0x5
#define _HOURS_HRH1_SIZE                                    0x1
#define _HOURS_HRH1_LENGTH                                  0x1
#define _HOURS_HRH1_MASK                                    0x20

// Register: MINUTES
#define MINUTES MINUTES
extern volatile unsigned char           MINUTES             __at(0xC15);
#ifndef _LIB_BUILD
asm("MINUTES equ 0C15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MINL                   :4;
        unsigned MINH                   :3;
    };
    struct {
        unsigned MINL0                  :1;
        unsigned MINL1                  :1;
        unsigned MINL2                  :1;
        unsigned MINL3                  :1;
        unsigned MINH0                  :1;
        unsigned MINH1                  :1;
        unsigned MINH2                  :1;
    };
} MINUTESbits_t;
extern volatile MINUTESbits_t MINUTESbits __at(0xC15);
// bitfield macros
#define _MINUTES_MINL_POSN                                  0x0
#define _MINUTES_MINL_POSITION                              0x0
#define _MINUTES_MINL_SIZE                                  0x4
#define _MINUTES_MINL_LENGTH                                0x4
#define _MINUTES_MINL_MASK                                  0xF
#define _MINUTES_MINH_POSN                                  0x4
#define _MINUTES_MINH_POSITION                              0x4
#define _MINUTES_MINH_SIZE                                  0x3
#define _MINUTES_MINH_LENGTH                                0x3
#define _MINUTES_MINH_MASK                                  0x70
#define _MINUTES_MINL0_POSN                                 0x0
#define _MINUTES_MINL0_POSITION                             0x0
#define _MINUTES_MINL0_SIZE                                 0x1
#define _MINUTES_MINL0_LENGTH                               0x1
#define _MINUTES_MINL0_MASK                                 0x1
#define _MINUTES_MINL1_POSN                                 0x1
#define _MINUTES_MINL1_POSITION                             0x1
#define _MINUTES_MINL1_SIZE                                 0x1
#define _MINUTES_MINL1_LENGTH                               0x1
#define _MINUTES_MINL1_MASK                                 0x2
#define _MINUTES_MINL2_POSN                                 0x2
#define _MINUTES_MINL2_POSITION                             0x2
#define _MINUTES_MINL2_SIZE                                 0x1
#define _MINUTES_MINL2_LENGTH                               0x1
#define _MINUTES_MINL2_MASK                                 0x4
#define _MINUTES_MINL3_POSN                                 0x3
#define _MINUTES_MINL3_POSITION                             0x3
#define _MINUTES_MINL3_SIZE                                 0x1
#define _MINUTES_MINL3_LENGTH                               0x1
#define _MINUTES_MINL3_MASK                                 0x8
#define _MINUTES_MINH0_POSN                                 0x4
#define _MINUTES_MINH0_POSITION                             0x4
#define _MINUTES_MINH0_SIZE                                 0x1
#define _MINUTES_MINH0_LENGTH                               0x1
#define _MINUTES_MINH0_MASK                                 0x10
#define _MINUTES_MINH1_POSN                                 0x5
#define _MINUTES_MINH1_POSITION                             0x5
#define _MINUTES_MINH1_SIZE                                 0x1
#define _MINUTES_MINH1_LENGTH                               0x1
#define _MINUTES_MINH1_MASK                                 0x20
#define _MINUTES_MINH2_POSN                                 0x6
#define _MINUTES_MINH2_POSITION                             0x6
#define _MINUTES_MINH2_SIZE                                 0x1
#define _MINUTES_MINH2_LENGTH                               0x1
#define _MINUTES_MINH2_MASK                                 0x40

// Register: SECONDS
#define SECONDS SECONDS
extern volatile unsigned char           SECONDS             __at(0xC16);
#ifndef _LIB_BUILD
asm("SECONDS equ 0C16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SECL                   :4;
        unsigned SECH                   :3;
    };
    struct {
        unsigned SECL0                  :1;
        unsigned SECL1                  :1;
        unsigned SECL2                  :1;
        unsigned SECL3                  :1;
        unsigned SECH0                  :1;
        unsigned SECH1                  :1;
        unsigned SECH2                  :1;
    };
} SECONDSbits_t;
extern volatile SECONDSbits_t SECONDSbits __at(0xC16);
// bitfield macros
#define _SECONDS_SECL_POSN                                  0x0
#define _SECONDS_SECL_POSITION                              0x0
#define _SECONDS_SECL_SIZE                                  0x4
#define _SECONDS_SECL_LENGTH                                0x4
#define _SECONDS_SECL_MASK                                  0xF
#define _SECONDS_SECH_POSN                                  0x4
#define _SECONDS_SECH_POSITION                              0x4
#define _SECONDS_SECH_SIZE                                  0x3
#define _SECONDS_SECH_LENGTH                                0x3
#define _SECONDS_SECH_MASK                                  0x70
#define _SECONDS_SECL0_POSN                                 0x0
#define _SECONDS_SECL0_POSITION                             0x0
#define _SECONDS_SECL0_SIZE                                 0x1
#define _SECONDS_SECL0_LENGTH                               0x1
#define _SECONDS_SECL0_MASK                                 0x1
#define _SECONDS_SECL1_POSN                                 0x1
#define _SECONDS_SECL1_POSITION                             0x1
#define _SECONDS_SECL1_SIZE                                 0x1
#define _SECONDS_SECL1_LENGTH                               0x1
#define _SECONDS_SECL1_MASK                                 0x2
#define _SECONDS_SECL2_POSN                                 0x2
#define _SECONDS_SECL2_POSITION                             0x2
#define _SECONDS_SECL2_SIZE                                 0x1
#define _SECONDS_SECL2_LENGTH                               0x1
#define _SECONDS_SECL2_MASK                                 0x4
#define _SECONDS_SECL3_POSN                                 0x3
#define _SECONDS_SECL3_POSITION                             0x3
#define _SECONDS_SECL3_SIZE                                 0x1
#define _SECONDS_SECL3_LENGTH                               0x1
#define _SECONDS_SECL3_MASK                                 0x8
#define _SECONDS_SECH0_POSN                                 0x4
#define _SECONDS_SECH0_POSITION                             0x4
#define _SECONDS_SECH0_SIZE                                 0x1
#define _SECONDS_SECH0_LENGTH                               0x1
#define _SECONDS_SECH0_MASK                                 0x10
#define _SECONDS_SECH1_POSN                                 0x5
#define _SECONDS_SECH1_POSITION                             0x5
#define _SECONDS_SECH1_SIZE                                 0x1
#define _SECONDS_SECH1_LENGTH                               0x1
#define _SECONDS_SECH1_MASK                                 0x20
#define _SECONDS_SECH2_POSN                                 0x6
#define _SECONDS_SECH2_POSITION                             0x6
#define _SECONDS_SECH2_SIZE                                 0x1
#define _SECONDS_SECH2_LENGTH                               0x1
#define _SECONDS_SECH2_MASK                                 0x40

// Register: ALRMMTH
#define ALRMMTH ALRMMTH
extern volatile unsigned char           ALRMMTH             __at(0xC17);
#ifndef _LIB_BUILD
asm("ALRMMTH equ 0C17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLMONTH             :4;
        unsigned ALRMHMONTH             :1;
    };
    struct {
        unsigned ALRMLMONTH0            :1;
        unsigned ALRMLMONTH1            :1;
        unsigned ALRMLMONTH2            :1;
        unsigned ALRMLMONTH3            :1;
    };
} ALRMMTHbits_t;
extern volatile ALRMMTHbits_t ALRMMTHbits __at(0xC17);
// bitfield macros
#define _ALRMMTH_ALRMLMONTH_POSN                            0x0
#define _ALRMMTH_ALRMLMONTH_POSITION                        0x0
#define _ALRMMTH_ALRMLMONTH_SIZE                            0x4
#define _ALRMMTH_ALRMLMONTH_LENGTH                          0x4
#define _ALRMMTH_ALRMLMONTH_MASK                            0xF
#define _ALRMMTH_ALRMHMONTH_POSN                            0x4
#define _ALRMMTH_ALRMHMONTH_POSITION                        0x4
#define _ALRMMTH_ALRMHMONTH_SIZE                            0x1
#define _ALRMMTH_ALRMHMONTH_LENGTH                          0x1
#define _ALRMMTH_ALRMHMONTH_MASK                            0x10
#define _ALRMMTH_ALRMLMONTH0_POSN                           0x0
#define _ALRMMTH_ALRMLMONTH0_POSITION                       0x0
#define _ALRMMTH_ALRMLMONTH0_SIZE                           0x1
#define _ALRMMTH_ALRMLMONTH0_LENGTH                         0x1
#define _ALRMMTH_ALRMLMONTH0_MASK                           0x1
#define _ALRMMTH_ALRMLMONTH1_POSN                           0x1
#define _ALRMMTH_ALRMLMONTH1_POSITION                       0x1
#define _ALRMMTH_ALRMLMONTH1_SIZE                           0x1
#define _ALRMMTH_ALRMLMONTH1_LENGTH                         0x1
#define _ALRMMTH_ALRMLMONTH1_MASK                           0x2
#define _ALRMMTH_ALRMLMONTH2_POSN                           0x2
#define _ALRMMTH_ALRMLMONTH2_POSITION                       0x2
#define _ALRMMTH_ALRMLMONTH2_SIZE                           0x1
#define _ALRMMTH_ALRMLMONTH2_LENGTH                         0x1
#define _ALRMMTH_ALRMLMONTH2_MASK                           0x4
#define _ALRMMTH_ALRMLMONTH3_POSN                           0x3
#define _ALRMMTH_ALRMLMONTH3_POSITION                       0x3
#define _ALRMMTH_ALRMLMONTH3_SIZE                           0x1
#define _ALRMMTH_ALRMLMONTH3_LENGTH                         0x1
#define _ALRMMTH_ALRMLMONTH3_MASK                           0x8

// Register: ALRMWD
#define ALRMWD ALRMWD
extern volatile unsigned char           ALRMWD              __at(0xC18);
#ifndef _LIB_BUILD
asm("ALRMWD equ 0C18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLWDAY              :3;
    };
    struct {
        unsigned ALRMLWDAY0             :1;
        unsigned ALRMLWDAY1             :1;
        unsigned ALRMLWDAY2             :1;
    };
} ALRMWDbits_t;
extern volatile ALRMWDbits_t ALRMWDbits __at(0xC18);
// bitfield macros
#define _ALRMWD_ALRMLWDAY_POSN                              0x0
#define _ALRMWD_ALRMLWDAY_POSITION                          0x0
#define _ALRMWD_ALRMLWDAY_SIZE                              0x3
#define _ALRMWD_ALRMLWDAY_LENGTH                            0x3
#define _ALRMWD_ALRMLWDAY_MASK                              0x7
#define _ALRMWD_ALRMLWDAY0_POSN                             0x0
#define _ALRMWD_ALRMLWDAY0_POSITION                         0x0
#define _ALRMWD_ALRMLWDAY0_SIZE                             0x1
#define _ALRMWD_ALRMLWDAY0_LENGTH                           0x1
#define _ALRMWD_ALRMLWDAY0_MASK                             0x1
#define _ALRMWD_ALRMLWDAY1_POSN                             0x1
#define _ALRMWD_ALRMLWDAY1_POSITION                         0x1
#define _ALRMWD_ALRMLWDAY1_SIZE                             0x1
#define _ALRMWD_ALRMLWDAY1_LENGTH                           0x1
#define _ALRMWD_ALRMLWDAY1_MASK                             0x2
#define _ALRMWD_ALRMLWDAY2_POSN                             0x2
#define _ALRMWD_ALRMLWDAY2_POSITION                         0x2
#define _ALRMWD_ALRMLWDAY2_SIZE                             0x1
#define _ALRMWD_ALRMLWDAY2_LENGTH                           0x1
#define _ALRMWD_ALRMLWDAY2_MASK                             0x4

// Register: ALRMDAY
#define ALRMDAY ALRMDAY
extern volatile unsigned char           ALRMDAY             __at(0xC19);
#ifndef _LIB_BUILD
asm("ALRMDAY equ 0C19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLDAY               :4;
        unsigned ALRMHDAY               :2;
    };
    struct {
        unsigned ALRMLDAY0              :1;
        unsigned ALRMLDAY1              :1;
        unsigned ALRMLDAY2              :1;
        unsigned ALRMLDAY3              :1;
        unsigned ALRMHDAY0              :1;
        unsigned ALRMHDAY1              :1;
    };
} ALRMDAYbits_t;
extern volatile ALRMDAYbits_t ALRMDAYbits __at(0xC19);
// bitfield macros
#define _ALRMDAY_ALRMLDAY_POSN                              0x0
#define _ALRMDAY_ALRMLDAY_POSITION                          0x0
#define _ALRMDAY_ALRMLDAY_SIZE                              0x4
#define _ALRMDAY_ALRMLDAY_LENGTH                            0x4
#define _ALRMDAY_ALRMLDAY_MASK                              0xF
#define _ALRMDAY_ALRMHDAY_POSN                              0x4
#define _ALRMDAY_ALRMHDAY_POSITION                          0x4
#define _ALRMDAY_ALRMHDAY_SIZE                              0x2
#define _ALRMDAY_ALRMHDAY_LENGTH                            0x2
#define _ALRMDAY_ALRMHDAY_MASK                              0x30
#define _ALRMDAY_ALRMLDAY0_POSN                             0x0
#define _ALRMDAY_ALRMLDAY0_POSITION                         0x0
#define _ALRMDAY_ALRMLDAY0_SIZE                             0x1
#define _ALRMDAY_ALRMLDAY0_LENGTH                           0x1
#define _ALRMDAY_ALRMLDAY0_MASK                             0x1
#define _ALRMDAY_ALRMLDAY1_POSN                             0x1
#define _ALRMDAY_ALRMLDAY1_POSITION                         0x1
#define _ALRMDAY_ALRMLDAY1_SIZE                             0x1
#define _ALRMDAY_ALRMLDAY1_LENGTH                           0x1
#define _ALRMDAY_ALRMLDAY1_MASK                             0x2
#define _ALRMDAY_ALRMLDAY2_POSN                             0x2
#define _ALRMDAY_ALRMLDAY2_POSITION                         0x2
#define _ALRMDAY_ALRMLDAY2_SIZE                             0x1
#define _ALRMDAY_ALRMLDAY2_LENGTH                           0x1
#define _ALRMDAY_ALRMLDAY2_MASK                             0x4
#define _ALRMDAY_ALRMLDAY3_POSN                             0x3
#define _ALRMDAY_ALRMLDAY3_POSITION                         0x3
#define _ALRMDAY_ALRMLDAY3_SIZE                             0x1
#define _ALRMDAY_ALRMLDAY3_LENGTH                           0x1
#define _ALRMDAY_ALRMLDAY3_MASK                             0x8
#define _ALRMDAY_ALRMHDAY0_POSN                             0x4
#define _ALRMDAY_ALRMHDAY0_POSITION                         0x4
#define _ALRMDAY_ALRMHDAY0_SIZE                             0x1
#define _ALRMDAY_ALRMHDAY0_LENGTH                           0x1
#define _ALRMDAY_ALRMHDAY0_MASK                             0x10
#define _ALRMDAY_ALRMHDAY1_POSN                             0x5
#define _ALRMDAY_ALRMHDAY1_POSITION                         0x5
#define _ALRMDAY_ALRMHDAY1_SIZE                             0x1
#define _ALRMDAY_ALRMHDAY1_LENGTH                           0x1
#define _ALRMDAY_ALRMHDAY1_MASK                             0x20

// Register: ALRMHR
#define ALRMHR ALRMHR
extern volatile unsigned char           ALRMHR              __at(0xC1A);
#ifndef _LIB_BUILD
asm("ALRMHR equ 0C1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLHR                :4;
        unsigned ALRMHHR                :2;
    };
    struct {
        unsigned ALRMLHR0               :1;
        unsigned ALRMLHR1               :1;
        unsigned ALRMLHR2               :1;
        unsigned ALRMLHR3               :1;
        unsigned ALRMHHR0               :1;
        unsigned ALRMHHR1               :1;
    };
} ALRMHRbits_t;
extern volatile ALRMHRbits_t ALRMHRbits __at(0xC1A);
// bitfield macros
#define _ALRMHR_ALRMLHR_POSN                                0x0
#define _ALRMHR_ALRMLHR_POSITION                            0x0
#define _ALRMHR_ALRMLHR_SIZE                                0x4
#define _ALRMHR_ALRMLHR_LENGTH                              0x4
#define _ALRMHR_ALRMLHR_MASK                                0xF
#define _ALRMHR_ALRMHHR_POSN                                0x4
#define _ALRMHR_ALRMHHR_POSITION                            0x4
#define _ALRMHR_ALRMHHR_SIZE                                0x2
#define _ALRMHR_ALRMHHR_LENGTH                              0x2
#define _ALRMHR_ALRMHHR_MASK                                0x30
#define _ALRMHR_ALRMLHR0_POSN                               0x0
#define _ALRMHR_ALRMLHR0_POSITION                           0x0
#define _ALRMHR_ALRMLHR0_SIZE                               0x1
#define _ALRMHR_ALRMLHR0_LENGTH                             0x1
#define _ALRMHR_ALRMLHR0_MASK                               0x1
#define _ALRMHR_ALRMLHR1_POSN                               0x1
#define _ALRMHR_ALRMLHR1_POSITION                           0x1
#define _ALRMHR_ALRMLHR1_SIZE                               0x1
#define _ALRMHR_ALRMLHR1_LENGTH                             0x1
#define _ALRMHR_ALRMLHR1_MASK                               0x2
#define _ALRMHR_ALRMLHR2_POSN                               0x2
#define _ALRMHR_ALRMLHR2_POSITION                           0x2
#define _ALRMHR_ALRMLHR2_SIZE                               0x1
#define _ALRMHR_ALRMLHR2_LENGTH                             0x1
#define _ALRMHR_ALRMLHR2_MASK                               0x4
#define _ALRMHR_ALRMLHR3_POSN                               0x3
#define _ALRMHR_ALRMLHR3_POSITION                           0x3
#define _ALRMHR_ALRMLHR3_SIZE                               0x1
#define _ALRMHR_ALRMLHR3_LENGTH                             0x1
#define _ALRMHR_ALRMLHR3_MASK                               0x8
#define _ALRMHR_ALRMHHR0_POSN                               0x4
#define _ALRMHR_ALRMHHR0_POSITION                           0x4
#define _ALRMHR_ALRMHHR0_SIZE                               0x1
#define _ALRMHR_ALRMHHR0_LENGTH                             0x1
#define _ALRMHR_ALRMHHR0_MASK                               0x10
#define _ALRMHR_ALRMHHR1_POSN                               0x5
#define _ALRMHR_ALRMHHR1_POSITION                           0x5
#define _ALRMHR_ALRMHHR1_SIZE                               0x1
#define _ALRMHR_ALRMHHR1_LENGTH                             0x1
#define _ALRMHR_ALRMHHR1_MASK                               0x20

// Register: ALRMMIN
#define ALRMMIN ALRMMIN
extern volatile unsigned char           ALRMMIN             __at(0xC1B);
#ifndef _LIB_BUILD
asm("ALRMMIN equ 0C1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLMIN               :4;
        unsigned ALRMHMIN               :3;
    };
    struct {
        unsigned ALRMLMIN0              :1;
        unsigned ALRMLMIN1              :1;
        unsigned ALRMLMIN2              :1;
        unsigned ALRMLMIN3              :1;
        unsigned ALRMHMIN0              :1;
        unsigned ALRMHMIN1              :1;
        unsigned ALRMHMIN2              :1;
    };
} ALRMMINbits_t;
extern volatile ALRMMINbits_t ALRMMINbits __at(0xC1B);
// bitfield macros
#define _ALRMMIN_ALRMLMIN_POSN                              0x0
#define _ALRMMIN_ALRMLMIN_POSITION                          0x0
#define _ALRMMIN_ALRMLMIN_SIZE                              0x4
#define _ALRMMIN_ALRMLMIN_LENGTH                            0x4
#define _ALRMMIN_ALRMLMIN_MASK                              0xF
#define _ALRMMIN_ALRMHMIN_POSN                              0x4
#define _ALRMMIN_ALRMHMIN_POSITION                          0x4
#define _ALRMMIN_ALRMHMIN_SIZE                              0x3
#define _ALRMMIN_ALRMHMIN_LENGTH                            0x3
#define _ALRMMIN_ALRMHMIN_MASK                              0x70
#define _ALRMMIN_ALRMLMIN0_POSN                             0x0
#define _ALRMMIN_ALRMLMIN0_POSITION                         0x0
#define _ALRMMIN_ALRMLMIN0_SIZE                             0x1
#define _ALRMMIN_ALRMLMIN0_LENGTH                           0x1
#define _ALRMMIN_ALRMLMIN0_MASK                             0x1
#define _ALRMMIN_ALRMLMIN1_POSN                             0x1
#define _ALRMMIN_ALRMLMIN1_POSITION                         0x1
#define _ALRMMIN_ALRMLMIN1_SIZE                             0x1
#define _ALRMMIN_ALRMLMIN1_LENGTH                           0x1
#define _ALRMMIN_ALRMLMIN1_MASK                             0x2
#define _ALRMMIN_ALRMLMIN2_POSN                             0x2
#define _ALRMMIN_ALRMLMIN2_POSITION                         0x2
#define _ALRMMIN_ALRMLMIN2_SIZE                             0x1
#define _ALRMMIN_ALRMLMIN2_LENGTH                           0x1
#define _ALRMMIN_ALRMLMIN2_MASK                             0x4
#define _ALRMMIN_ALRMLMIN3_POSN                             0x3
#define _ALRMMIN_ALRMLMIN3_POSITION                         0x3
#define _ALRMMIN_ALRMLMIN3_SIZE                             0x1
#define _ALRMMIN_ALRMLMIN3_LENGTH                           0x1
#define _ALRMMIN_ALRMLMIN3_MASK                             0x8
#define _ALRMMIN_ALRMHMIN0_POSN                             0x4
#define _ALRMMIN_ALRMHMIN0_POSITION                         0x4
#define _ALRMMIN_ALRMHMIN0_SIZE                             0x1
#define _ALRMMIN_ALRMHMIN0_LENGTH                           0x1
#define _ALRMMIN_ALRMHMIN0_MASK                             0x10
#define _ALRMMIN_ALRMHMIN1_POSN                             0x5
#define _ALRMMIN_ALRMHMIN1_POSITION                         0x5
#define _ALRMMIN_ALRMHMIN1_SIZE                             0x1
#define _ALRMMIN_ALRMHMIN1_LENGTH                           0x1
#define _ALRMMIN_ALRMHMIN1_MASK                             0x20
#define _ALRMMIN_ALRMHMIN2_POSN                             0x6
#define _ALRMMIN_ALRMHMIN2_POSITION                         0x6
#define _ALRMMIN_ALRMHMIN2_SIZE                             0x1
#define _ALRMMIN_ALRMHMIN2_LENGTH                           0x1
#define _ALRMMIN_ALRMHMIN2_MASK                             0x40

// Register: ALRMSEC
#define ALRMSEC ALRMSEC
extern volatile unsigned char           ALRMSEC             __at(0xC1C);
#ifndef _LIB_BUILD
asm("ALRMSEC equ 0C1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ALRMLSEC               :4;
        unsigned ALRMHSEC               :3;
    };
    struct {
        unsigned ALRMLSEC0              :1;
        unsigned ALRMLSEC1              :1;
        unsigned ALRMLSEC2              :1;
        unsigned ALRMLSEC3              :1;
        unsigned ALRMHSEC0              :1;
        unsigned ALRMHSEC1              :1;
        unsigned ALRMHSEC2              :1;
    };
} ALRMSECbits_t;
extern volatile ALRMSECbits_t ALRMSECbits __at(0xC1C);
// bitfield macros
#define _ALRMSEC_ALRMLSEC_POSN                              0x0
#define _ALRMSEC_ALRMLSEC_POSITION                          0x0
#define _ALRMSEC_ALRMLSEC_SIZE                              0x4
#define _ALRMSEC_ALRMLSEC_LENGTH                            0x4
#define _ALRMSEC_ALRMLSEC_MASK                              0xF
#define _ALRMSEC_ALRMHSEC_POSN                              0x4
#define _ALRMSEC_ALRMHSEC_POSITION                          0x4
#define _ALRMSEC_ALRMHSEC_SIZE                              0x3
#define _ALRMSEC_ALRMHSEC_LENGTH                            0x3
#define _ALRMSEC_ALRMHSEC_MASK                              0x70
#define _ALRMSEC_ALRMLSEC0_POSN                             0x0
#define _ALRMSEC_ALRMLSEC0_POSITION                         0x0
#define _ALRMSEC_ALRMLSEC0_SIZE                             0x1
#define _ALRMSEC_ALRMLSEC0_LENGTH                           0x1
#define _ALRMSEC_ALRMLSEC0_MASK                             0x1
#define _ALRMSEC_ALRMLSEC1_POSN                             0x1
#define _ALRMSEC_ALRMLSEC1_POSITION                         0x1
#define _ALRMSEC_ALRMLSEC1_SIZE                             0x1
#define _ALRMSEC_ALRMLSEC1_LENGTH                           0x1
#define _ALRMSEC_ALRMLSEC1_MASK                             0x2
#define _ALRMSEC_ALRMLSEC2_POSN                             0x2
#define _ALRMSEC_ALRMLSEC2_POSITION                         0x2
#define _ALRMSEC_ALRMLSEC2_SIZE                             0x1
#define _ALRMSEC_ALRMLSEC2_LENGTH                           0x1
#define _ALRMSEC_ALRMLSEC2_MASK                             0x4
#define _ALRMSEC_ALRMLSEC3_POSN                             0x3
#define _ALRMSEC_ALRMLSEC3_POSITION                         0x3
#define _ALRMSEC_ALRMLSEC3_SIZE                             0x1
#define _ALRMSEC_ALRMLSEC3_LENGTH                           0x1
#define _ALRMSEC_ALRMLSEC3_MASK                             0x8
#define _ALRMSEC_ALRMHSEC0_POSN                             0x4
#define _ALRMSEC_ALRMHSEC0_POSITION                         0x4
#define _ALRMSEC_ALRMHSEC0_SIZE                             0x1
#define _ALRMSEC_ALRMHSEC0_LENGTH                           0x1
#define _ALRMSEC_ALRMHSEC0_MASK                             0x10
#define _ALRMSEC_ALRMHSEC1_POSN                             0x5
#define _ALRMSEC_ALRMHSEC1_POSITION                         0x5
#define _ALRMSEC_ALRMHSEC1_SIZE                             0x1
#define _ALRMSEC_ALRMHSEC1_LENGTH                           0x1
#define _ALRMSEC_ALRMHSEC1_MASK                             0x20
#define _ALRMSEC_ALRMHSEC2_POSN                             0x6
#define _ALRMSEC_ALRMHSEC2_POSITION                         0x6
#define _ALRMSEC_ALRMHSEC2_SIZE                             0x1
#define _ALRMSEC_ALRMHSEC2_LENGTH                           0x1
#define _ALRMSEC_ALRMHSEC2_MASK                             0x40

// Register: PORTG
#define PORTG PORTG
extern volatile unsigned char           PORTG               __at(0xC8C);
#ifndef _LIB_BUILD
asm("PORTG equ 0C8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG0                    :1;
        unsigned RG1                    :1;
        unsigned RG2                    :1;
        unsigned RG3                    :1;
        unsigned RG4                    :1;
        unsigned RG5                    :1;
        unsigned RG6                    :1;
        unsigned RG7                    :1;
    };
} PORTGbits_t;
extern volatile PORTGbits_t PORTGbits __at(0xC8C);
// bitfield macros
#define _PORTG_RG0_POSN                                     0x0
#define _PORTG_RG0_POSITION                                 0x0
#define _PORTG_RG0_SIZE                                     0x1
#define _PORTG_RG0_LENGTH                                   0x1
#define _PORTG_RG0_MASK                                     0x1
#define _PORTG_RG1_POSN                                     0x1
#define _PORTG_RG1_POSITION                                 0x1
#define _PORTG_RG1_SIZE                                     0x1
#define _PORTG_RG1_LENGTH                                   0x1
#define _PORTG_RG1_MASK                                     0x2
#define _PORTG_RG2_POSN                                     0x2
#define _PORTG_RG2_POSITION                                 0x2
#define _PORTG_RG2_SIZE                                     0x1
#define _PORTG_RG2_LENGTH                                   0x1
#define _PORTG_RG2_MASK                                     0x4
#define _PORTG_RG3_POSN                                     0x3
#define _PORTG_RG3_POSITION                                 0x3
#define _PORTG_RG3_SIZE                                     0x1
#define _PORTG_RG3_LENGTH                                   0x1
#define _PORTG_RG3_MASK                                     0x8
#define _PORTG_RG4_POSN                                     0x4
#define _PORTG_RG4_POSITION                                 0x4
#define _PORTG_RG4_SIZE                                     0x1
#define _PORTG_RG4_LENGTH                                   0x1
#define _PORTG_RG4_MASK                                     0x10
#define _PORTG_RG5_POSN                                     0x5
#define _PORTG_RG5_POSITION                                 0x5
#define _PORTG_RG5_SIZE                                     0x1
#define _PORTG_RG5_LENGTH                                   0x1
#define _PORTG_RG5_MASK                                     0x20
#define _PORTG_RG6_POSN                                     0x6
#define _PORTG_RG6_POSITION                                 0x6
#define _PORTG_RG6_SIZE                                     0x1
#define _PORTG_RG6_LENGTH                                   0x1
#define _PORTG_RG6_MASK                                     0x40
#define _PORTG_RG7_POSN                                     0x7
#define _PORTG_RG7_POSITION                                 0x7
#define _PORTG_RG7_SIZE                                     0x1
#define _PORTG_RG7_LENGTH                                   0x1
#define _PORTG_RG7_MASK                                     0x80

// Register: PORTH
#define PORTH PORTH
extern volatile unsigned char           PORTH               __at(0xC8D);
#ifndef _LIB_BUILD
asm("PORTH equ 0C8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH0                    :1;
        unsigned RH1                    :1;
        unsigned RH2                    :1;
        unsigned RH3                    :1;
    };
} PORTHbits_t;
extern volatile PORTHbits_t PORTHbits __at(0xC8D);
// bitfield macros
#define _PORTH_RH0_POSN                                     0x0
#define _PORTH_RH0_POSITION                                 0x0
#define _PORTH_RH0_SIZE                                     0x1
#define _PORTH_RH0_LENGTH                                   0x1
#define _PORTH_RH0_MASK                                     0x1
#define _PORTH_RH1_POSN                                     0x1
#define _PORTH_RH1_POSITION                                 0x1
#define _PORTH_RH1_SIZE                                     0x1
#define _PORTH_RH1_LENGTH                                   0x1
#define _PORTH_RH1_MASK                                     0x2
#define _PORTH_RH2_POSN                                     0x2
#define _PORTH_RH2_POSITION                                 0x2
#define _PORTH_RH2_SIZE                                     0x1
#define _PORTH_RH2_LENGTH                                   0x1
#define _PORTH_RH2_MASK                                     0x4
#define _PORTH_RH3_POSN                                     0x3
#define _PORTH_RH3_POSITION                                 0x3
#define _PORTH_RH3_SIZE                                     0x1
#define _PORTH_RH3_LENGTH                                   0x1
#define _PORTH_RH3_MASK                                     0x8

// Register: TRISG
#define TRISG TRISG
extern volatile unsigned char           TRISG               __at(0xC8E);
#ifndef _LIB_BUILD
asm("TRISG equ 0C8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISG0                 :1;
        unsigned TRISG1                 :1;
        unsigned TRISG2                 :1;
        unsigned TRISG3                 :1;
        unsigned TRISG4                 :1;
        unsigned                        :1;
        unsigned TRISG6                 :1;
        unsigned TRISG7                 :1;
    };
} TRISGbits_t;
extern volatile TRISGbits_t TRISGbits __at(0xC8E);
// bitfield macros
#define _TRISG_TRISG0_POSN                                  0x0
#define _TRISG_TRISG0_POSITION                              0x0
#define _TRISG_TRISG0_SIZE                                  0x1
#define _TRISG_TRISG0_LENGTH                                0x1
#define _TRISG_TRISG0_MASK                                  0x1
#define _TRISG_TRISG1_POSN                                  0x1
#define _TRISG_TRISG1_POSITION                              0x1
#define _TRISG_TRISG1_SIZE                                  0x1
#define _TRISG_TRISG1_LENGTH                                0x1
#define _TRISG_TRISG1_MASK                                  0x2
#define _TRISG_TRISG2_POSN                                  0x2
#define _TRISG_TRISG2_POSITION                              0x2
#define _TRISG_TRISG2_SIZE                                  0x1
#define _TRISG_TRISG2_LENGTH                                0x1
#define _TRISG_TRISG2_MASK                                  0x4
#define _TRISG_TRISG3_POSN                                  0x3
#define _TRISG_TRISG3_POSITION                              0x3
#define _TRISG_TRISG3_SIZE                                  0x1
#define _TRISG_TRISG3_LENGTH                                0x1
#define _TRISG_TRISG3_MASK                                  0x8
#define _TRISG_TRISG4_POSN                                  0x4
#define _TRISG_TRISG4_POSITION                              0x4
#define _TRISG_TRISG4_SIZE                                  0x1
#define _TRISG_TRISG4_LENGTH                                0x1
#define _TRISG_TRISG4_MASK                                  0x10
#define _TRISG_TRISG6_POSN                                  0x6
#define _TRISG_TRISG6_POSITION                              0x6
#define _TRISG_TRISG6_SIZE                                  0x1
#define _TRISG_TRISG6_LENGTH                                0x1
#define _TRISG_TRISG6_MASK                                  0x40
#define _TRISG_TRISG7_POSN                                  0x7
#define _TRISG_TRISG7_POSITION                              0x7
#define _TRISG_TRISG7_SIZE                                  0x1
#define _TRISG_TRISG7_LENGTH                                0x1
#define _TRISG_TRISG7_MASK                                  0x80

// Register: TRISH
#define TRISH TRISH
extern volatile unsigned char           TRISH               __at(0xC8F);
#ifndef _LIB_BUILD
asm("TRISH equ 0C8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISH0                 :1;
        unsigned TRISH1                 :1;
        unsigned TRISH2                 :1;
        unsigned TRISH3                 :1;
    };
} TRISHbits_t;
extern volatile TRISHbits_t TRISHbits __at(0xC8F);
// bitfield macros
#define _TRISH_TRISH0_POSN                                  0x0
#define _TRISH_TRISH0_POSITION                              0x0
#define _TRISH_TRISH0_SIZE                                  0x1
#define _TRISH_TRISH0_LENGTH                                0x1
#define _TRISH_TRISH0_MASK                                  0x1
#define _TRISH_TRISH1_POSN                                  0x1
#define _TRISH_TRISH1_POSITION                              0x1
#define _TRISH_TRISH1_SIZE                                  0x1
#define _TRISH_TRISH1_LENGTH                                0x1
#define _TRISH_TRISH1_MASK                                  0x2
#define _TRISH_TRISH2_POSN                                  0x2
#define _TRISH_TRISH2_POSITION                              0x2
#define _TRISH_TRISH2_SIZE                                  0x1
#define _TRISH_TRISH2_LENGTH                                0x1
#define _TRISH_TRISH2_MASK                                  0x4
#define _TRISH_TRISH3_POSN                                  0x3
#define _TRISH_TRISH3_POSITION                              0x3
#define _TRISH_TRISH3_SIZE                                  0x1
#define _TRISH_TRISH3_LENGTH                                0x1
#define _TRISH_TRISH3_MASK                                  0x8

// Register: LATG
#define LATG LATG
extern volatile unsigned char           LATG                __at(0xC90);
#ifndef _LIB_BUILD
asm("LATG equ 0C90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATG0                  :1;
        unsigned LATG1                  :1;
        unsigned LATG2                  :1;
        unsigned LATG3                  :1;
        unsigned LATG4                  :1;
        unsigned                        :1;
        unsigned LATG6                  :1;
        unsigned LATG7                  :1;
    };
} LATGbits_t;
extern volatile LATGbits_t LATGbits __at(0xC90);
// bitfield macros
#define _LATG_LATG0_POSN                                    0x0
#define _LATG_LATG0_POSITION                                0x0
#define _LATG_LATG0_SIZE                                    0x1
#define _LATG_LATG0_LENGTH                                  0x1
#define _LATG_LATG0_MASK                                    0x1
#define _LATG_LATG1_POSN                                    0x1
#define _LATG_LATG1_POSITION                                0x1
#define _LATG_LATG1_SIZE                                    0x1
#define _LATG_LATG1_LENGTH                                  0x1
#define _LATG_LATG1_MASK                                    0x2
#define _LATG_LATG2_POSN                                    0x2
#define _LATG_LATG2_POSITION                                0x2
#define _LATG_LATG2_SIZE                                    0x1
#define _LATG_LATG2_LENGTH                                  0x1
#define _LATG_LATG2_MASK                                    0x4
#define _LATG_LATG3_POSN                                    0x3
#define _LATG_LATG3_POSITION                                0x3
#define _LATG_LATG3_SIZE                                    0x1
#define _LATG_LATG3_LENGTH                                  0x1
#define _LATG_LATG3_MASK                                    0x8
#define _LATG_LATG4_POSN                                    0x4
#define _LATG_LATG4_POSITION                                0x4
#define _LATG_LATG4_SIZE                                    0x1
#define _LATG_LATG4_LENGTH                                  0x1
#define _LATG_LATG4_MASK                                    0x10
#define _LATG_LATG6_POSN                                    0x6
#define _LATG_LATG6_POSITION                                0x6
#define _LATG_LATG6_SIZE                                    0x1
#define _LATG_LATG6_LENGTH                                  0x1
#define _LATG_LATG6_MASK                                    0x40
#define _LATG_LATG7_POSN                                    0x7
#define _LATG_LATG7_POSITION                                0x7
#define _LATG_LATG7_SIZE                                    0x1
#define _LATG_LATG7_LENGTH                                  0x1
#define _LATG_LATG7_MASK                                    0x80

// Register: LATH
#define LATH LATH
extern volatile unsigned char           LATH                __at(0xC91);
#ifndef _LIB_BUILD
asm("LATH equ 0C91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATH0                  :1;
        unsigned LATH1                  :1;
        unsigned LATH2                  :1;
        unsigned LATH3                  :1;
    };
} LATHbits_t;
extern volatile LATHbits_t LATHbits __at(0xC91);
// bitfield macros
#define _LATH_LATH0_POSN                                    0x0
#define _LATH_LATH0_POSITION                                0x0
#define _LATH_LATH0_SIZE                                    0x1
#define _LATH_LATH0_LENGTH                                  0x1
#define _LATH_LATH0_MASK                                    0x1
#define _LATH_LATH1_POSN                                    0x1
#define _LATH_LATH1_POSITION                                0x1
#define _LATH_LATH1_SIZE                                    0x1
#define _LATH_LATH1_LENGTH                                  0x1
#define _LATH_LATH1_MASK                                    0x2
#define _LATH_LATH2_POSN                                    0x2
#define _LATH_LATH2_POSITION                                0x2
#define _LATH_LATH2_SIZE                                    0x1
#define _LATH_LATH2_LENGTH                                  0x1
#define _LATH_LATH2_MASK                                    0x4
#define _LATH_LATH3_POSN                                    0x3
#define _LATH_LATH3_POSITION                                0x3
#define _LATH_LATH3_SIZE                                    0x1
#define _LATH_LATH3_LENGTH                                  0x1
#define _LATH_LATH3_MASK                                    0x8

// Register: VB0GPR
#define VB0GPR VB0GPR
extern volatile unsigned char           VB0GPR              __at(0xE8C);
#ifndef _LIB_BUILD
asm("VB0GPR equ 0E8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VB0GPR                 :8;
    };
    struct {
        unsigned VB0GPR0                :1;
        unsigned VB0GPR1                :1;
        unsigned VB0GPR2                :1;
        unsigned VB0GPR3                :1;
        unsigned VB0GPR4                :1;
        unsigned VB0GPR5                :1;
        unsigned VB0GPR6                :1;
        unsigned VB0GPR7                :1;
    };
} VB0GPRbits_t;
extern volatile VB0GPRbits_t VB0GPRbits __at(0xE8C);
// bitfield macros
#define _VB0GPR_VB0GPR_POSN                                 0x0
#define _VB0GPR_VB0GPR_POSITION                             0x0
#define _VB0GPR_VB0GPR_SIZE                                 0x8
#define _VB0GPR_VB0GPR_LENGTH                               0x8
#define _VB0GPR_VB0GPR_MASK                                 0xFF
#define _VB0GPR_VB0GPR0_POSN                                0x0
#define _VB0GPR_VB0GPR0_POSITION                            0x0
#define _VB0GPR_VB0GPR0_SIZE                                0x1
#define _VB0GPR_VB0GPR0_LENGTH                              0x1
#define _VB0GPR_VB0GPR0_MASK                                0x1
#define _VB0GPR_VB0GPR1_POSN                                0x1
#define _VB0GPR_VB0GPR1_POSITION                            0x1
#define _VB0GPR_VB0GPR1_SIZE                                0x1
#define _VB0GPR_VB0GPR1_LENGTH                              0x1
#define _VB0GPR_VB0GPR1_MASK                                0x2
#define _VB0GPR_VB0GPR2_POSN                                0x2
#define _VB0GPR_VB0GPR2_POSITION                            0x2
#define _VB0GPR_VB0GPR2_SIZE                                0x1
#define _VB0GPR_VB0GPR2_LENGTH                              0x1
#define _VB0GPR_VB0GPR2_MASK                                0x4
#define _VB0GPR_VB0GPR3_POSN                                0x3
#define _VB0GPR_VB0GPR3_POSITION                            0x3
#define _VB0GPR_VB0GPR3_SIZE                                0x1
#define _VB0GPR_VB0GPR3_LENGTH                              0x1
#define _VB0GPR_VB0GPR3_MASK                                0x8
#define _VB0GPR_VB0GPR4_POSN                                0x4
#define _VB0GPR_VB0GPR4_POSITION                            0x4
#define _VB0GPR_VB0GPR4_SIZE                                0x1
#define _VB0GPR_VB0GPR4_LENGTH                              0x1
#define _VB0GPR_VB0GPR4_MASK                                0x10
#define _VB0GPR_VB0GPR5_POSN                                0x5
#define _VB0GPR_VB0GPR5_POSITION                            0x5
#define _VB0GPR_VB0GPR5_SIZE                                0x1
#define _VB0GPR_VB0GPR5_LENGTH                              0x1
#define _VB0GPR_VB0GPR5_MASK                                0x20
#define _VB0GPR_VB0GPR6_POSN                                0x6
#define _VB0GPR_VB0GPR6_POSITION                            0x6
#define _VB0GPR_VB0GPR6_SIZE                                0x1
#define _VB0GPR_VB0GPR6_LENGTH                              0x1
#define _VB0GPR_VB0GPR6_MASK                                0x40
#define _VB0GPR_VB0GPR7_POSN                                0x7
#define _VB0GPR_VB0GPR7_POSITION                            0x7
#define _VB0GPR_VB0GPR7_SIZE                                0x1
#define _VB0GPR_VB0GPR7_LENGTH                              0x1
#define _VB0GPR_VB0GPR7_MASK                                0x80

// Register: VB1GPR
#define VB1GPR VB1GPR
extern volatile unsigned char           VB1GPR              __at(0xE8D);
#ifndef _LIB_BUILD
asm("VB1GPR equ 0E8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VB1GPR                 :8;
    };
    struct {
        unsigned VB1GPR0                :1;
        unsigned VB1GPR1                :1;
        unsigned VB1GPR2                :1;
        unsigned VB1GPR3                :1;
        unsigned VB1GPR4                :1;
        unsigned VB1GPR5                :1;
        unsigned VB1GPR6                :1;
        unsigned VB1GPR7                :1;
    };
} VB1GPRbits_t;
extern volatile VB1GPRbits_t VB1GPRbits __at(0xE8D);
// bitfield macros
#define _VB1GPR_VB1GPR_POSN                                 0x0
#define _VB1GPR_VB1GPR_POSITION                             0x0
#define _VB1GPR_VB1GPR_SIZE                                 0x8
#define _VB1GPR_VB1GPR_LENGTH                               0x8
#define _VB1GPR_VB1GPR_MASK                                 0xFF
#define _VB1GPR_VB1GPR0_POSN                                0x0
#define _VB1GPR_VB1GPR0_POSITION                            0x0
#define _VB1GPR_VB1GPR0_SIZE                                0x1
#define _VB1GPR_VB1GPR0_LENGTH                              0x1
#define _VB1GPR_VB1GPR0_MASK                                0x1
#define _VB1GPR_VB1GPR1_POSN                                0x1
#define _VB1GPR_VB1GPR1_POSITION                            0x1
#define _VB1GPR_VB1GPR1_SIZE                                0x1
#define _VB1GPR_VB1GPR1_LENGTH                              0x1
#define _VB1GPR_VB1GPR1_MASK                                0x2
#define _VB1GPR_VB1GPR2_POSN                                0x2
#define _VB1GPR_VB1GPR2_POSITION                            0x2
#define _VB1GPR_VB1GPR2_SIZE                                0x1
#define _VB1GPR_VB1GPR2_LENGTH                              0x1
#define _VB1GPR_VB1GPR2_MASK                                0x4
#define _VB1GPR_VB1GPR3_POSN                                0x3
#define _VB1GPR_VB1GPR3_POSITION                            0x3
#define _VB1GPR_VB1GPR3_SIZE                                0x1
#define _VB1GPR_VB1GPR3_LENGTH                              0x1
#define _VB1GPR_VB1GPR3_MASK                                0x8
#define _VB1GPR_VB1GPR4_POSN                                0x4
#define _VB1GPR_VB1GPR4_POSITION                            0x4
#define _VB1GPR_VB1GPR4_SIZE                                0x1
#define _VB1GPR_VB1GPR4_LENGTH                              0x1
#define _VB1GPR_VB1GPR4_MASK                                0x10
#define _VB1GPR_VB1GPR5_POSN                                0x5
#define _VB1GPR_VB1GPR5_POSITION                            0x5
#define _VB1GPR_VB1GPR5_SIZE                                0x1
#define _VB1GPR_VB1GPR5_LENGTH                              0x1
#define _VB1GPR_VB1GPR5_MASK                                0x20
#define _VB1GPR_VB1GPR6_POSN                                0x6
#define _VB1GPR_VB1GPR6_POSITION                            0x6
#define _VB1GPR_VB1GPR6_SIZE                                0x1
#define _VB1GPR_VB1GPR6_LENGTH                              0x1
#define _VB1GPR_VB1GPR6_MASK                                0x40
#define _VB1GPR_VB1GPR7_POSN                                0x7
#define _VB1GPR_VB1GPR7_POSITION                            0x7
#define _VB1GPR_VB1GPR7_SIZE                                0x1
#define _VB1GPR_VB1GPR7_LENGTH                              0x1
#define _VB1GPR_VB1GPR7_MASK                                0x80

// Register: VB2GPR
#define VB2GPR VB2GPR
extern volatile unsigned char           VB2GPR              __at(0xE8E);
#ifndef _LIB_BUILD
asm("VB2GPR equ 0E8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VB2GPR                 :8;
    };
    struct {
        unsigned VB2GPR0                :1;
        unsigned VB2GPR1                :1;
        unsigned VB2GPR2                :1;
        unsigned VB2GPR3                :1;
        unsigned VB2GPR4                :1;
        unsigned VB2GPR5                :1;
        unsigned VB2GPR6                :1;
        unsigned VB2GPR7                :1;
    };
} VB2GPRbits_t;
extern volatile VB2GPRbits_t VB2GPRbits __at(0xE8E);
// bitfield macros
#define _VB2GPR_VB2GPR_POSN                                 0x0
#define _VB2GPR_VB2GPR_POSITION                             0x0
#define _VB2GPR_VB2GPR_SIZE                                 0x8
#define _VB2GPR_VB2GPR_LENGTH                               0x8
#define _VB2GPR_VB2GPR_MASK                                 0xFF
#define _VB2GPR_VB2GPR0_POSN                                0x0
#define _VB2GPR_VB2GPR0_POSITION                            0x0
#define _VB2GPR_VB2GPR0_SIZE                                0x1
#define _VB2GPR_VB2GPR0_LENGTH                              0x1
#define _VB2GPR_VB2GPR0_MASK                                0x1
#define _VB2GPR_VB2GPR1_POSN                                0x1
#define _VB2GPR_VB2GPR1_POSITION                            0x1
#define _VB2GPR_VB2GPR1_SIZE                                0x1
#define _VB2GPR_VB2GPR1_LENGTH                              0x1
#define _VB2GPR_VB2GPR1_MASK                                0x2
#define _VB2GPR_VB2GPR2_POSN                                0x2
#define _VB2GPR_VB2GPR2_POSITION                            0x2
#define _VB2GPR_VB2GPR2_SIZE                                0x1
#define _VB2GPR_VB2GPR2_LENGTH                              0x1
#define _VB2GPR_VB2GPR2_MASK                                0x4
#define _VB2GPR_VB2GPR3_POSN                                0x3
#define _VB2GPR_VB2GPR3_POSITION                            0x3
#define _VB2GPR_VB2GPR3_SIZE                                0x1
#define _VB2GPR_VB2GPR3_LENGTH                              0x1
#define _VB2GPR_VB2GPR3_MASK                                0x8
#define _VB2GPR_VB2GPR4_POSN                                0x4
#define _VB2GPR_VB2GPR4_POSITION                            0x4
#define _VB2GPR_VB2GPR4_SIZE                                0x1
#define _VB2GPR_VB2GPR4_LENGTH                              0x1
#define _VB2GPR_VB2GPR4_MASK                                0x10
#define _VB2GPR_VB2GPR5_POSN                                0x5
#define _VB2GPR_VB2GPR5_POSITION                            0x5
#define _VB2GPR_VB2GPR5_SIZE                                0x1
#define _VB2GPR_VB2GPR5_LENGTH                              0x1
#define _VB2GPR_VB2GPR5_MASK                                0x20
#define _VB2GPR_VB2GPR6_POSN                                0x6
#define _VB2GPR_VB2GPR6_POSITION                            0x6
#define _VB2GPR_VB2GPR6_SIZE                                0x1
#define _VB2GPR_VB2GPR6_LENGTH                              0x1
#define _VB2GPR_VB2GPR6_MASK                                0x40
#define _VB2GPR_VB2GPR7_POSN                                0x7
#define _VB2GPR_VB2GPR7_POSITION                            0x7
#define _VB2GPR_VB2GPR7_SIZE                                0x1
#define _VB2GPR_VB2GPR7_LENGTH                              0x1
#define _VB2GPR_VB2GPR7_MASK                                0x80

// Register: VB3GPR
#define VB3GPR VB3GPR
extern volatile unsigned char           VB3GPR              __at(0xE8F);
#ifndef _LIB_BUILD
asm("VB3GPR equ 0E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VB3GPR                 :8;
    };
    struct {
        unsigned VB3GPR0                :1;
        unsigned VB3GPR1                :1;
        unsigned VB3GPR2                :1;
        unsigned VB3GPR3                :1;
        unsigned VB3GPR4                :1;
        unsigned VB3GPR5                :1;
        unsigned VB3GPR6                :1;
        unsigned VB3GPR7                :1;
    };
} VB3GPRbits_t;
extern volatile VB3GPRbits_t VB3GPRbits __at(0xE8F);
// bitfield macros
#define _VB3GPR_VB3GPR_POSN                                 0x0
#define _VB3GPR_VB3GPR_POSITION                             0x0
#define _VB3GPR_VB3GPR_SIZE                                 0x8
#define _VB3GPR_VB3GPR_LENGTH                               0x8
#define _VB3GPR_VB3GPR_MASK                                 0xFF
#define _VB3GPR_VB3GPR0_POSN                                0x0
#define _VB3GPR_VB3GPR0_POSITION                            0x0
#define _VB3GPR_VB3GPR0_SIZE                                0x1
#define _VB3GPR_VB3GPR0_LENGTH                              0x1
#define _VB3GPR_VB3GPR0_MASK                                0x1
#define _VB3GPR_VB3GPR1_POSN                                0x1
#define _VB3GPR_VB3GPR1_POSITION                            0x1
#define _VB3GPR_VB3GPR1_SIZE                                0x1
#define _VB3GPR_VB3GPR1_LENGTH                              0x1
#define _VB3GPR_VB3GPR1_MASK                                0x2
#define _VB3GPR_VB3GPR2_POSN                                0x2
#define _VB3GPR_VB3GPR2_POSITION                            0x2
#define _VB3GPR_VB3GPR2_SIZE                                0x1
#define _VB3GPR_VB3GPR2_LENGTH                              0x1
#define _VB3GPR_VB3GPR2_MASK                                0x4
#define _VB3GPR_VB3GPR3_POSN                                0x3
#define _VB3GPR_VB3GPR3_POSITION                            0x3
#define _VB3GPR_VB3GPR3_SIZE                                0x1
#define _VB3GPR_VB3GPR3_LENGTH                              0x1
#define _VB3GPR_VB3GPR3_MASK                                0x8
#define _VB3GPR_VB3GPR4_POSN                                0x4
#define _VB3GPR_VB3GPR4_POSITION                            0x4
#define _VB3GPR_VB3GPR4_SIZE                                0x1
#define _VB3GPR_VB3GPR4_LENGTH                              0x1
#define _VB3GPR_VB3GPR4_MASK                                0x10
#define _VB3GPR_VB3GPR5_POSN                                0x5
#define _VB3GPR_VB3GPR5_POSITION                            0x5
#define _VB3GPR_VB3GPR5_SIZE                                0x1
#define _VB3GPR_VB3GPR5_LENGTH                              0x1
#define _VB3GPR_VB3GPR5_MASK                                0x20
#define _VB3GPR_VB3GPR6_POSN                                0x6
#define _VB3GPR_VB3GPR6_POSITION                            0x6
#define _VB3GPR_VB3GPR6_SIZE                                0x1
#define _VB3GPR_VB3GPR6_LENGTH                              0x1
#define _VB3GPR_VB3GPR6_MASK                                0x40
#define _VB3GPR_VB3GPR7_POSN                                0x7
#define _VB3GPR_VB3GPR7_POSITION                            0x7
#define _VB3GPR_VB3GPR7_SIZE                                0x1
#define _VB3GPR_VB3GPR7_LENGTH                              0x1
#define _VB3GPR_VB3GPR7_MASK                                0x80

// Register: LCDCON
#define LCDCON LCDCON
extern volatile unsigned char           LCDCON              __at(0x1D0C);
#ifndef _LIB_BUILD
asm("LCDCON equ 01D0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LMUX                   :4;
        unsigned CS                     :1;
        unsigned WERR                   :1;
        unsigned SLPEN                  :1;
        unsigned LCDEN                  :1;
    };
    struct {
        unsigned LMUX0                  :1;
        unsigned LMUX1                  :1;
        unsigned LMUX2                  :1;
        unsigned LMUX3                  :1;
    };
} LCDCONbits_t;
extern volatile LCDCONbits_t LCDCONbits __at(0x1D0C);
// bitfield macros
#define _LCDCON_LMUX_POSN                                   0x0
#define _LCDCON_LMUX_POSITION                               0x0
#define _LCDCON_LMUX_SIZE                                   0x4
#define _LCDCON_LMUX_LENGTH                                 0x4
#define _LCDCON_LMUX_MASK                                   0xF
#define _LCDCON_CS_POSN                                     0x4
#define _LCDCON_CS_POSITION                                 0x4
#define _LCDCON_CS_SIZE                                     0x1
#define _LCDCON_CS_LENGTH                                   0x1
#define _LCDCON_CS_MASK                                     0x10
#define _LCDCON_WERR_POSN                                   0x5
#define _LCDCON_WERR_POSITION                               0x5
#define _LCDCON_WERR_SIZE                                   0x1
#define _LCDCON_WERR_LENGTH                                 0x1
#define _LCDCON_WERR_MASK                                   0x20
#define _LCDCON_SLPEN_POSN                                  0x6
#define _LCDCON_SLPEN_POSITION                              0x6
#define _LCDCON_SLPEN_SIZE                                  0x1
#define _LCDCON_SLPEN_LENGTH                                0x1
#define _LCDCON_SLPEN_MASK                                  0x40
#define _LCDCON_LCDEN_POSN                                  0x7
#define _LCDCON_LCDEN_POSITION                              0x7
#define _LCDCON_LCDEN_SIZE                                  0x1
#define _LCDCON_LCDEN_LENGTH                                0x1
#define _LCDCON_LCDEN_MASK                                  0x80
#define _LCDCON_LMUX0_POSN                                  0x0
#define _LCDCON_LMUX0_POSITION                              0x0
#define _LCDCON_LMUX0_SIZE                                  0x1
#define _LCDCON_LMUX0_LENGTH                                0x1
#define _LCDCON_LMUX0_MASK                                  0x1
#define _LCDCON_LMUX1_POSN                                  0x1
#define _LCDCON_LMUX1_POSITION                              0x1
#define _LCDCON_LMUX1_SIZE                                  0x1
#define _LCDCON_LMUX1_LENGTH                                0x1
#define _LCDCON_LMUX1_MASK                                  0x2
#define _LCDCON_LMUX2_POSN                                  0x2
#define _LCDCON_LMUX2_POSITION                              0x2
#define _LCDCON_LMUX2_SIZE                                  0x1
#define _LCDCON_LMUX2_LENGTH                                0x1
#define _LCDCON_LMUX2_MASK                                  0x4
#define _LCDCON_LMUX3_POSN                                  0x3
#define _LCDCON_LMUX3_POSITION                              0x3
#define _LCDCON_LMUX3_SIZE                                  0x1
#define _LCDCON_LMUX3_LENGTH                                0x1
#define _LCDCON_LMUX3_MASK                                  0x8

// Register: LCDPS
#define LCDPS LCDPS
extern volatile unsigned char           LCDPS               __at(0x1D0D);
#ifndef _LIB_BUILD
asm("LCDPS equ 01D0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LP                     :4;
        unsigned WA                     :1;
        unsigned LCDA                   :1;
        unsigned                        :1;
        unsigned WFT                    :1;
    };
    struct {
        unsigned LP0                    :1;
        unsigned LP1                    :1;
        unsigned LP2                    :1;
        unsigned LP3                    :1;
    };
} LCDPSbits_t;
extern volatile LCDPSbits_t LCDPSbits __at(0x1D0D);
// bitfield macros
#define _LCDPS_LP_POSN                                      0x0
#define _LCDPS_LP_POSITION                                  0x0
#define _LCDPS_LP_SIZE                                      0x4
#define _LCDPS_LP_LENGTH                                    0x4
#define _LCDPS_LP_MASK                                      0xF
#define _LCDPS_WA_POSN                                      0x4
#define _LCDPS_WA_POSITION                                  0x4
#define _LCDPS_WA_SIZE                                      0x1
#define _LCDPS_WA_LENGTH                                    0x1
#define _LCDPS_WA_MASK                                      0x10
#define _LCDPS_LCDA_POSN                                    0x5
#define _LCDPS_LCDA_POSITION                                0x5
#define _LCDPS_LCDA_SIZE                                    0x1
#define _LCDPS_LCDA_LENGTH                                  0x1
#define _LCDPS_LCDA_MASK                                    0x20
#define _LCDPS_WFT_POSN                                     0x7
#define _LCDPS_WFT_POSITION                                 0x7
#define _LCDPS_WFT_SIZE                                     0x1
#define _LCDPS_WFT_LENGTH                                   0x1
#define _LCDPS_WFT_MASK                                     0x80
#define _LCDPS_LP0_POSN                                     0x0
#define _LCDPS_LP0_POSITION                                 0x0
#define _LCDPS_LP0_SIZE                                     0x1
#define _LCDPS_LP0_LENGTH                                   0x1
#define _LCDPS_LP0_MASK                                     0x1
#define _LCDPS_LP1_POSN                                     0x1
#define _LCDPS_LP1_POSITION                                 0x1
#define _LCDPS_LP1_SIZE                                     0x1
#define _LCDPS_LP1_LENGTH                                   0x1
#define _LCDPS_LP1_MASK                                     0x2
#define _LCDPS_LP2_POSN                                     0x2
#define _LCDPS_LP2_POSITION                                 0x2
#define _LCDPS_LP2_SIZE                                     0x1
#define _LCDPS_LP2_LENGTH                                   0x1
#define _LCDPS_LP2_MASK                                     0x4
#define _LCDPS_LP3_POSN                                     0x3
#define _LCDPS_LP3_POSITION                                 0x3
#define _LCDPS_LP3_SIZE                                     0x1
#define _LCDPS_LP3_LENGTH                                   0x1
#define _LCDPS_LP3_MASK                                     0x8

// Register: LCDSE0
#define LCDSE0 LCDSE0
extern volatile unsigned char           LCDSE0              __at(0x1D0E);
#ifndef _LIB_BUILD
asm("LCDSE0 equ 01D0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE00                   :1;
        unsigned SE01                   :1;
        unsigned SE02                   :1;
        unsigned SE03                   :1;
        unsigned SE04                   :1;
        unsigned SE05                   :1;
        unsigned SE06                   :1;
        unsigned SE07                   :1;
    };
} LCDSE0bits_t;
extern volatile LCDSE0bits_t LCDSE0bits __at(0x1D0E);
// bitfield macros
#define _LCDSE0_SE00_POSN                                   0x0
#define _LCDSE0_SE00_POSITION                               0x0
#define _LCDSE0_SE00_SIZE                                   0x1
#define _LCDSE0_SE00_LENGTH                                 0x1
#define _LCDSE0_SE00_MASK                                   0x1
#define _LCDSE0_SE01_POSN                                   0x1
#define _LCDSE0_SE01_POSITION                               0x1
#define _LCDSE0_SE01_SIZE                                   0x1
#define _LCDSE0_SE01_LENGTH                                 0x1
#define _LCDSE0_SE01_MASK                                   0x2
#define _LCDSE0_SE02_POSN                                   0x2
#define _LCDSE0_SE02_POSITION                               0x2
#define _LCDSE0_SE02_SIZE                                   0x1
#define _LCDSE0_SE02_LENGTH                                 0x1
#define _LCDSE0_SE02_MASK                                   0x4
#define _LCDSE0_SE03_POSN                                   0x3
#define _LCDSE0_SE03_POSITION                               0x3
#define _LCDSE0_SE03_SIZE                                   0x1
#define _LCDSE0_SE03_LENGTH                                 0x1
#define _LCDSE0_SE03_MASK                                   0x8
#define _LCDSE0_SE04_POSN                                   0x4
#define _LCDSE0_SE04_POSITION                               0x4
#define _LCDSE0_SE04_SIZE                                   0x1
#define _LCDSE0_SE04_LENGTH                                 0x1
#define _LCDSE0_SE04_MASK                                   0x10
#define _LCDSE0_SE05_POSN                                   0x5
#define _LCDSE0_SE05_POSITION                               0x5
#define _LCDSE0_SE05_SIZE                                   0x1
#define _LCDSE0_SE05_LENGTH                                 0x1
#define _LCDSE0_SE05_MASK                                   0x20
#define _LCDSE0_SE06_POSN                                   0x6
#define _LCDSE0_SE06_POSITION                               0x6
#define _LCDSE0_SE06_SIZE                                   0x1
#define _LCDSE0_SE06_LENGTH                                 0x1
#define _LCDSE0_SE06_MASK                                   0x40
#define _LCDSE0_SE07_POSN                                   0x7
#define _LCDSE0_SE07_POSITION                               0x7
#define _LCDSE0_SE07_SIZE                                   0x1
#define _LCDSE0_SE07_LENGTH                                 0x1
#define _LCDSE0_SE07_MASK                                   0x80

// Register: LCDSE1
#define LCDSE1 LCDSE1
extern volatile unsigned char           LCDSE1              __at(0x1D0F);
#ifndef _LIB_BUILD
asm("LCDSE1 equ 01D0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE08                   :1;
        unsigned SE09                   :1;
        unsigned SE10                   :1;
        unsigned SE11                   :1;
        unsigned SE12                   :1;
        unsigned SE13                   :1;
        unsigned SE14                   :1;
        unsigned SE15                   :1;
    };
} LCDSE1bits_t;
extern volatile LCDSE1bits_t LCDSE1bits __at(0x1D0F);
// bitfield macros
#define _LCDSE1_SE08_POSN                                   0x0
#define _LCDSE1_SE08_POSITION                               0x0
#define _LCDSE1_SE08_SIZE                                   0x1
#define _LCDSE1_SE08_LENGTH                                 0x1
#define _LCDSE1_SE08_MASK                                   0x1
#define _LCDSE1_SE09_POSN                                   0x1
#define _LCDSE1_SE09_POSITION                               0x1
#define _LCDSE1_SE09_SIZE                                   0x1
#define _LCDSE1_SE09_LENGTH                                 0x1
#define _LCDSE1_SE09_MASK                                   0x2
#define _LCDSE1_SE10_POSN                                   0x2
#define _LCDSE1_SE10_POSITION                               0x2
#define _LCDSE1_SE10_SIZE                                   0x1
#define _LCDSE1_SE10_LENGTH                                 0x1
#define _LCDSE1_SE10_MASK                                   0x4
#define _LCDSE1_SE11_POSN                                   0x3
#define _LCDSE1_SE11_POSITION                               0x3
#define _LCDSE1_SE11_SIZE                                   0x1
#define _LCDSE1_SE11_LENGTH                                 0x1
#define _LCDSE1_SE11_MASK                                   0x8
#define _LCDSE1_SE12_POSN                                   0x4
#define _LCDSE1_SE12_POSITION                               0x4
#define _LCDSE1_SE12_SIZE                                   0x1
#define _LCDSE1_SE12_LENGTH                                 0x1
#define _LCDSE1_SE12_MASK                                   0x10
#define _LCDSE1_SE13_POSN                                   0x5
#define _LCDSE1_SE13_POSITION                               0x5
#define _LCDSE1_SE13_SIZE                                   0x1
#define _LCDSE1_SE13_LENGTH                                 0x1
#define _LCDSE1_SE13_MASK                                   0x20
#define _LCDSE1_SE14_POSN                                   0x6
#define _LCDSE1_SE14_POSITION                               0x6
#define _LCDSE1_SE14_SIZE                                   0x1
#define _LCDSE1_SE14_LENGTH                                 0x1
#define _LCDSE1_SE14_MASK                                   0x40
#define _LCDSE1_SE15_POSN                                   0x7
#define _LCDSE1_SE15_POSITION                               0x7
#define _LCDSE1_SE15_SIZE                                   0x1
#define _LCDSE1_SE15_LENGTH                                 0x1
#define _LCDSE1_SE15_MASK                                   0x80

// Register: LCDSE2
#define LCDSE2 LCDSE2
extern volatile unsigned char           LCDSE2              __at(0x1D10);
#ifndef _LIB_BUILD
asm("LCDSE2 equ 01D10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE16                   :1;
        unsigned SE17                   :1;
        unsigned SE18                   :1;
        unsigned SE19                   :1;
        unsigned SE20                   :1;
        unsigned SE21                   :1;
        unsigned SE22                   :1;
        unsigned SE23                   :1;
    };
} LCDSE2bits_t;
extern volatile LCDSE2bits_t LCDSE2bits __at(0x1D10);
// bitfield macros
#define _LCDSE2_SE16_POSN                                   0x0
#define _LCDSE2_SE16_POSITION                               0x0
#define _LCDSE2_SE16_SIZE                                   0x1
#define _LCDSE2_SE16_LENGTH                                 0x1
#define _LCDSE2_SE16_MASK                                   0x1
#define _LCDSE2_SE17_POSN                                   0x1
#define _LCDSE2_SE17_POSITION                               0x1
#define _LCDSE2_SE17_SIZE                                   0x1
#define _LCDSE2_SE17_LENGTH                                 0x1
#define _LCDSE2_SE17_MASK                                   0x2
#define _LCDSE2_SE18_POSN                                   0x2
#define _LCDSE2_SE18_POSITION                               0x2
#define _LCDSE2_SE18_SIZE                                   0x1
#define _LCDSE2_SE18_LENGTH                                 0x1
#define _LCDSE2_SE18_MASK                                   0x4
#define _LCDSE2_SE19_POSN                                   0x3
#define _LCDSE2_SE19_POSITION                               0x3
#define _LCDSE2_SE19_SIZE                                   0x1
#define _LCDSE2_SE19_LENGTH                                 0x1
#define _LCDSE2_SE19_MASK                                   0x8
#define _LCDSE2_SE20_POSN                                   0x4
#define _LCDSE2_SE20_POSITION                               0x4
#define _LCDSE2_SE20_SIZE                                   0x1
#define _LCDSE2_SE20_LENGTH                                 0x1
#define _LCDSE2_SE20_MASK                                   0x10
#define _LCDSE2_SE21_POSN                                   0x5
#define _LCDSE2_SE21_POSITION                               0x5
#define _LCDSE2_SE21_SIZE                                   0x1
#define _LCDSE2_SE21_LENGTH                                 0x1
#define _LCDSE2_SE21_MASK                                   0x20
#define _LCDSE2_SE22_POSN                                   0x6
#define _LCDSE2_SE22_POSITION                               0x6
#define _LCDSE2_SE22_SIZE                                   0x1
#define _LCDSE2_SE22_LENGTH                                 0x1
#define _LCDSE2_SE22_MASK                                   0x40
#define _LCDSE2_SE23_POSN                                   0x7
#define _LCDSE2_SE23_POSITION                               0x7
#define _LCDSE2_SE23_SIZE                                   0x1
#define _LCDSE2_SE23_LENGTH                                 0x1
#define _LCDSE2_SE23_MASK                                   0x80

// Register: LCDSE3
#define LCDSE3 LCDSE3
extern volatile unsigned char           LCDSE3              __at(0x1D11);
#ifndef _LIB_BUILD
asm("LCDSE3 equ 01D11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE24                   :1;
        unsigned SE25                   :1;
        unsigned SE26                   :1;
        unsigned SE27                   :1;
        unsigned SE28                   :1;
        unsigned SE29                   :1;
        unsigned SE30                   :1;
        unsigned SE31                   :1;
    };
} LCDSE3bits_t;
extern volatile LCDSE3bits_t LCDSE3bits __at(0x1D11);
// bitfield macros
#define _LCDSE3_SE24_POSN                                   0x0
#define _LCDSE3_SE24_POSITION                               0x0
#define _LCDSE3_SE24_SIZE                                   0x1
#define _LCDSE3_SE24_LENGTH                                 0x1
#define _LCDSE3_SE24_MASK                                   0x1
#define _LCDSE3_SE25_POSN                                   0x1
#define _LCDSE3_SE25_POSITION                               0x1
#define _LCDSE3_SE25_SIZE                                   0x1
#define _LCDSE3_SE25_LENGTH                                 0x1
#define _LCDSE3_SE25_MASK                                   0x2
#define _LCDSE3_SE26_POSN                                   0x2
#define _LCDSE3_SE26_POSITION                               0x2
#define _LCDSE3_SE26_SIZE                                   0x1
#define _LCDSE3_SE26_LENGTH                                 0x1
#define _LCDSE3_SE26_MASK                                   0x4
#define _LCDSE3_SE27_POSN                                   0x3
#define _LCDSE3_SE27_POSITION                               0x3
#define _LCDSE3_SE27_SIZE                                   0x1
#define _LCDSE3_SE27_LENGTH                                 0x1
#define _LCDSE3_SE27_MASK                                   0x8
#define _LCDSE3_SE28_POSN                                   0x4
#define _LCDSE3_SE28_POSITION                               0x4
#define _LCDSE3_SE28_SIZE                                   0x1
#define _LCDSE3_SE28_LENGTH                                 0x1
#define _LCDSE3_SE28_MASK                                   0x10
#define _LCDSE3_SE29_POSN                                   0x5
#define _LCDSE3_SE29_POSITION                               0x5
#define _LCDSE3_SE29_SIZE                                   0x1
#define _LCDSE3_SE29_LENGTH                                 0x1
#define _LCDSE3_SE29_MASK                                   0x20
#define _LCDSE3_SE30_POSN                                   0x6
#define _LCDSE3_SE30_POSITION                               0x6
#define _LCDSE3_SE30_SIZE                                   0x1
#define _LCDSE3_SE30_LENGTH                                 0x1
#define _LCDSE3_SE30_MASK                                   0x40
#define _LCDSE3_SE31_POSN                                   0x7
#define _LCDSE3_SE31_POSITION                               0x7
#define _LCDSE3_SE31_SIZE                                   0x1
#define _LCDSE3_SE31_LENGTH                                 0x1
#define _LCDSE3_SE31_MASK                                   0x80

// Register: LCDSE4
#define LCDSE4 LCDSE4
extern volatile unsigned char           LCDSE4              __at(0x1D12);
#ifndef _LIB_BUILD
asm("LCDSE4 equ 01D12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE32                   :1;
        unsigned SE33                   :1;
        unsigned SE34                   :1;
        unsigned SE35                   :1;
        unsigned SE36                   :1;
        unsigned SE37                   :1;
        unsigned SE38                   :1;
        unsigned SE39                   :1;
    };
} LCDSE4bits_t;
extern volatile LCDSE4bits_t LCDSE4bits __at(0x1D12);
// bitfield macros
#define _LCDSE4_SE32_POSN                                   0x0
#define _LCDSE4_SE32_POSITION                               0x0
#define _LCDSE4_SE32_SIZE                                   0x1
#define _LCDSE4_SE32_LENGTH                                 0x1
#define _LCDSE4_SE32_MASK                                   0x1
#define _LCDSE4_SE33_POSN                                   0x1
#define _LCDSE4_SE33_POSITION                               0x1
#define _LCDSE4_SE33_SIZE                                   0x1
#define _LCDSE4_SE33_LENGTH                                 0x1
#define _LCDSE4_SE33_MASK                                   0x2
#define _LCDSE4_SE34_POSN                                   0x2
#define _LCDSE4_SE34_POSITION                               0x2
#define _LCDSE4_SE34_SIZE                                   0x1
#define _LCDSE4_SE34_LENGTH                                 0x1
#define _LCDSE4_SE34_MASK                                   0x4
#define _LCDSE4_SE35_POSN                                   0x3
#define _LCDSE4_SE35_POSITION                               0x3
#define _LCDSE4_SE35_SIZE                                   0x1
#define _LCDSE4_SE35_LENGTH                                 0x1
#define _LCDSE4_SE35_MASK                                   0x8
#define _LCDSE4_SE36_POSN                                   0x4
#define _LCDSE4_SE36_POSITION                               0x4
#define _LCDSE4_SE36_SIZE                                   0x1
#define _LCDSE4_SE36_LENGTH                                 0x1
#define _LCDSE4_SE36_MASK                                   0x10
#define _LCDSE4_SE37_POSN                                   0x5
#define _LCDSE4_SE37_POSITION                               0x5
#define _LCDSE4_SE37_SIZE                                   0x1
#define _LCDSE4_SE37_LENGTH                                 0x1
#define _LCDSE4_SE37_MASK                                   0x20
#define _LCDSE4_SE38_POSN                                   0x6
#define _LCDSE4_SE38_POSITION                               0x6
#define _LCDSE4_SE38_SIZE                                   0x1
#define _LCDSE4_SE38_LENGTH                                 0x1
#define _LCDSE4_SE38_MASK                                   0x40
#define _LCDSE4_SE39_POSN                                   0x7
#define _LCDSE4_SE39_POSITION                               0x7
#define _LCDSE4_SE39_SIZE                                   0x1
#define _LCDSE4_SE39_LENGTH                                 0x1
#define _LCDSE4_SE39_MASK                                   0x80

// Register: LCDSE5
#define LCDSE5 LCDSE5
extern volatile unsigned char           LCDSE5              __at(0x1D13);
#ifndef _LIB_BUILD
asm("LCDSE5 equ 01D13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SE40                   :1;
        unsigned SE41                   :1;
        unsigned SE42                   :1;
        unsigned SE43                   :1;
        unsigned SE44                   :1;
        unsigned SE45                   :1;
        unsigned SE46                   :1;
        unsigned SE47                   :1;
    };
} LCDSE5bits_t;
extern volatile LCDSE5bits_t LCDSE5bits __at(0x1D13);
// bitfield macros
#define _LCDSE5_SE40_POSN                                   0x0
#define _LCDSE5_SE40_POSITION                               0x0
#define _LCDSE5_SE40_SIZE                                   0x1
#define _LCDSE5_SE40_LENGTH                                 0x1
#define _LCDSE5_SE40_MASK                                   0x1
#define _LCDSE5_SE41_POSN                                   0x1
#define _LCDSE5_SE41_POSITION                               0x1
#define _LCDSE5_SE41_SIZE                                   0x1
#define _LCDSE5_SE41_LENGTH                                 0x1
#define _LCDSE5_SE41_MASK                                   0x2
#define _LCDSE5_SE42_POSN                                   0x2
#define _LCDSE5_SE42_POSITION                               0x2
#define _LCDSE5_SE42_SIZE                                   0x1
#define _LCDSE5_SE42_LENGTH                                 0x1
#define _LCDSE5_SE42_MASK                                   0x4
#define _LCDSE5_SE43_POSN                                   0x3
#define _LCDSE5_SE43_POSITION                               0x3
#define _LCDSE5_SE43_SIZE                                   0x1
#define _LCDSE5_SE43_LENGTH                                 0x1
#define _LCDSE5_SE43_MASK                                   0x8
#define _LCDSE5_SE44_POSN                                   0x4
#define _LCDSE5_SE44_POSITION                               0x4
#define _LCDSE5_SE44_SIZE                                   0x1
#define _LCDSE5_SE44_LENGTH                                 0x1
#define _LCDSE5_SE44_MASK                                   0x10
#define _LCDSE5_SE45_POSN                                   0x5
#define _LCDSE5_SE45_POSITION                               0x5
#define _LCDSE5_SE45_SIZE                                   0x1
#define _LCDSE5_SE45_LENGTH                                 0x1
#define _LCDSE5_SE45_MASK                                   0x20
#define _LCDSE5_SE46_POSN                                   0x6
#define _LCDSE5_SE46_POSITION                               0x6
#define _LCDSE5_SE46_SIZE                                   0x1
#define _LCDSE5_SE46_LENGTH                                 0x1
#define _LCDSE5_SE46_MASK                                   0x40
#define _LCDSE5_SE47_POSN                                   0x7
#define _LCDSE5_SE47_POSITION                               0x7
#define _LCDSE5_SE47_SIZE                                   0x1
#define _LCDSE5_SE47_LENGTH                                 0x1
#define _LCDSE5_SE47_MASK                                   0x80

// Register: LCDVCON1
#define LCDVCON1 LCDVCON1
extern volatile unsigned char           LCDVCON1            __at(0x1D14);
#ifndef _LIB_BUILD
asm("LCDVCON1 equ 01D14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIAS                   :3;
        unsigned                        :3;
        unsigned EN5V                   :1;
        unsigned LPEN                   :1;
    };
    struct {
        unsigned BIAS0                  :1;
        unsigned BIAS1                  :1;
        unsigned BIAS2                  :1;
    };
} LCDVCON1bits_t;
extern volatile LCDVCON1bits_t LCDVCON1bits __at(0x1D14);
// bitfield macros
#define _LCDVCON1_BIAS_POSN                                 0x0
#define _LCDVCON1_BIAS_POSITION                             0x0
#define _LCDVCON1_BIAS_SIZE                                 0x3
#define _LCDVCON1_BIAS_LENGTH                               0x3
#define _LCDVCON1_BIAS_MASK                                 0x7
#define _LCDVCON1_EN5V_POSN                                 0x6
#define _LCDVCON1_EN5V_POSITION                             0x6
#define _LCDVCON1_EN5V_SIZE                                 0x1
#define _LCDVCON1_EN5V_LENGTH                               0x1
#define _LCDVCON1_EN5V_MASK                                 0x40
#define _LCDVCON1_LPEN_POSN                                 0x7
#define _LCDVCON1_LPEN_POSITION                             0x7
#define _LCDVCON1_LPEN_SIZE                                 0x1
#define _LCDVCON1_LPEN_LENGTH                               0x1
#define _LCDVCON1_LPEN_MASK                                 0x80
#define _LCDVCON1_BIAS0_POSN                                0x0
#define _LCDVCON1_BIAS0_POSITION                            0x0
#define _LCDVCON1_BIAS0_SIZE                                0x1
#define _LCDVCON1_BIAS0_LENGTH                              0x1
#define _LCDVCON1_BIAS0_MASK                                0x1
#define _LCDVCON1_BIAS1_POSN                                0x1
#define _LCDVCON1_BIAS1_POSITION                            0x1
#define _LCDVCON1_BIAS1_SIZE                                0x1
#define _LCDVCON1_BIAS1_LENGTH                              0x1
#define _LCDVCON1_BIAS1_MASK                                0x2
#define _LCDVCON1_BIAS2_POSN                                0x2
#define _LCDVCON1_BIAS2_POSITION                            0x2
#define _LCDVCON1_BIAS2_SIZE                                0x1
#define _LCDVCON1_BIAS2_LENGTH                              0x1
#define _LCDVCON1_BIAS2_MASK                                0x4

// Register: LCDVCON2
#define LCDVCON2 LCDVCON2
extern volatile unsigned char           LCDVCON2            __at(0x1D15);
#ifndef _LIB_BUILD
asm("LCDVCON2 equ 01D15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LCDVSRC                :4;
        unsigned                        :3;
        unsigned CPWDT                  :1;
    };
    struct {
        unsigned LCDVSRC0               :1;
        unsigned LCDVSRC1               :1;
        unsigned LCDVSRC2               :1;
        unsigned LCDVSRC3               :1;
    };
} LCDVCON2bits_t;
extern volatile LCDVCON2bits_t LCDVCON2bits __at(0x1D15);
// bitfield macros
#define _LCDVCON2_LCDVSRC_POSN                              0x0
#define _LCDVCON2_LCDVSRC_POSITION                          0x0
#define _LCDVCON2_LCDVSRC_SIZE                              0x4
#define _LCDVCON2_LCDVSRC_LENGTH                            0x4
#define _LCDVCON2_LCDVSRC_MASK                              0xF
#define _LCDVCON2_CPWDT_POSN                                0x7
#define _LCDVCON2_CPWDT_POSITION                            0x7
#define _LCDVCON2_CPWDT_SIZE                                0x1
#define _LCDVCON2_CPWDT_LENGTH                              0x1
#define _LCDVCON2_CPWDT_MASK                                0x80
#define _LCDVCON2_LCDVSRC0_POSN                             0x0
#define _LCDVCON2_LCDVSRC0_POSITION                         0x0
#define _LCDVCON2_LCDVSRC0_SIZE                             0x1
#define _LCDVCON2_LCDVSRC0_LENGTH                           0x1
#define _LCDVCON2_LCDVSRC0_MASK                             0x1
#define _LCDVCON2_LCDVSRC1_POSN                             0x1
#define _LCDVCON2_LCDVSRC1_POSITION                         0x1
#define _LCDVCON2_LCDVSRC1_SIZE                             0x1
#define _LCDVCON2_LCDVSRC1_LENGTH                           0x1
#define _LCDVCON2_LCDVSRC1_MASK                             0x2
#define _LCDVCON2_LCDVSRC2_POSN                             0x2
#define _LCDVCON2_LCDVSRC2_POSITION                         0x2
#define _LCDVCON2_LCDVSRC2_SIZE                             0x1
#define _LCDVCON2_LCDVSRC2_LENGTH                           0x1
#define _LCDVCON2_LCDVSRC2_MASK                             0x4
#define _LCDVCON2_LCDVSRC3_POSN                             0x3
#define _LCDVCON2_LCDVSRC3_POSITION                         0x3
#define _LCDVCON2_LCDVSRC3_SIZE                             0x1
#define _LCDVCON2_LCDVSRC3_LENGTH                           0x1
#define _LCDVCON2_LCDVSRC3_MASK                             0x8

// Register: LCDREF
#define LCDREF LCDREF
extern volatile unsigned char           LCDREF              __at(0x1D16);
#ifndef _LIB_BUILD
asm("LCDREF equ 01D16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LCDCST                 :3;
    };
    struct {
        unsigned LCDCST0                :1;
        unsigned LCDCST1                :1;
        unsigned LCDCST2                :1;
    };
} LCDREFbits_t;
extern volatile LCDREFbits_t LCDREFbits __at(0x1D16);
// bitfield macros
#define _LCDREF_LCDCST_POSN                                 0x0
#define _LCDREF_LCDCST_POSITION                             0x0
#define _LCDREF_LCDCST_SIZE                                 0x3
#define _LCDREF_LCDCST_LENGTH                               0x3
#define _LCDREF_LCDCST_MASK                                 0x7
#define _LCDREF_LCDCST0_POSN                                0x0
#define _LCDREF_LCDCST0_POSITION                            0x0
#define _LCDREF_LCDCST0_SIZE                                0x1
#define _LCDREF_LCDCST0_LENGTH                              0x1
#define _LCDREF_LCDCST0_MASK                                0x1
#define _LCDREF_LCDCST1_POSN                                0x1
#define _LCDREF_LCDCST1_POSITION                            0x1
#define _LCDREF_LCDCST1_SIZE                                0x1
#define _LCDREF_LCDCST1_LENGTH                              0x1
#define _LCDREF_LCDCST1_MASK                                0x2
#define _LCDREF_LCDCST2_POSN                                0x2
#define _LCDREF_LCDCST2_POSITION                            0x2
#define _LCDREF_LCDCST2_SIZE                                0x1
#define _LCDREF_LCDCST2_LENGTH                              0x1
#define _LCDREF_LCDCST2_MASK                                0x4

// Register: LCDRL
#define LCDRL LCDRL
extern volatile unsigned char           LCDRL               __at(0x1D17);
#ifndef _LIB_BUILD
asm("LCDRL equ 01D17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LRLAT                  :3;
        unsigned LCDIRI                 :1;
        unsigned LRLBP                  :2;
        unsigned LRLAP                  :2;
    };
    struct {
        unsigned LRLAT0                 :1;
        unsigned LRLAT1                 :1;
        unsigned LRLAT2                 :1;
        unsigned                        :1;
        unsigned LRLBP0                 :1;
        unsigned LRLBP1                 :1;
        unsigned LRLAP0                 :1;
        unsigned LRLAP1                 :1;
    };
} LCDRLbits_t;
extern volatile LCDRLbits_t LCDRLbits __at(0x1D17);
// bitfield macros
#define _LCDRL_LRLAT_POSN                                   0x0
#define _LCDRL_LRLAT_POSITION                               0x0
#define _LCDRL_LRLAT_SIZE                                   0x3
#define _LCDRL_LRLAT_LENGTH                                 0x3
#define _LCDRL_LRLAT_MASK                                   0x7
#define _LCDRL_LCDIRI_POSN                                  0x3
#define _LCDRL_LCDIRI_POSITION                              0x3
#define _LCDRL_LCDIRI_SIZE                                  0x1
#define _LCDRL_LCDIRI_LENGTH                                0x1
#define _LCDRL_LCDIRI_MASK                                  0x8
#define _LCDRL_LRLBP_POSN                                   0x4
#define _LCDRL_LRLBP_POSITION                               0x4
#define _LCDRL_LRLBP_SIZE                                   0x2
#define _LCDRL_LRLBP_LENGTH                                 0x2
#define _LCDRL_LRLBP_MASK                                   0x30
#define _LCDRL_LRLAP_POSN                                   0x6
#define _LCDRL_LRLAP_POSITION                               0x6
#define _LCDRL_LRLAP_SIZE                                   0x2
#define _LCDRL_LRLAP_LENGTH                                 0x2
#define _LCDRL_LRLAP_MASK                                   0xC0
#define _LCDRL_LRLAT0_POSN                                  0x0
#define _LCDRL_LRLAT0_POSITION                              0x0
#define _LCDRL_LRLAT0_SIZE                                  0x1
#define _LCDRL_LRLAT0_LENGTH                                0x1
#define _LCDRL_LRLAT0_MASK                                  0x1
#define _LCDRL_LRLAT1_POSN                                  0x1
#define _LCDRL_LRLAT1_POSITION                              0x1
#define _LCDRL_LRLAT1_SIZE                                  0x1
#define _LCDRL_LRLAT1_LENGTH                                0x1
#define _LCDRL_LRLAT1_MASK                                  0x2
#define _LCDRL_LRLAT2_POSN                                  0x2
#define _LCDRL_LRLAT2_POSITION                              0x2
#define _LCDRL_LRLAT2_SIZE                                  0x1
#define _LCDRL_LRLAT2_LENGTH                                0x1
#define _LCDRL_LRLAT2_MASK                                  0x4
#define _LCDRL_LRLBP0_POSN                                  0x4
#define _LCDRL_LRLBP0_POSITION                              0x4
#define _LCDRL_LRLBP0_SIZE                                  0x1
#define _LCDRL_LRLBP0_LENGTH                                0x1
#define _LCDRL_LRLBP0_MASK                                  0x10
#define _LCDRL_LRLBP1_POSN                                  0x5
#define _LCDRL_LRLBP1_POSITION                              0x5
#define _LCDRL_LRLBP1_SIZE                                  0x1
#define _LCDRL_LRLBP1_LENGTH                                0x1
#define _LCDRL_LRLBP1_MASK                                  0x20
#define _LCDRL_LRLAP0_POSN                                  0x6
#define _LCDRL_LRLAP0_POSITION                              0x6
#define _LCDRL_LRLAP0_SIZE                                  0x1
#define _LCDRL_LRLAP0_LENGTH                                0x1
#define _LCDRL_LRLAP0_MASK                                  0x40
#define _LCDRL_LRLAP1_POSN                                  0x7
#define _LCDRL_LRLAP1_POSITION                              0x7
#define _LCDRL_LRLAP1_SIZE                                  0x1
#define _LCDRL_LRLAP1_LENGTH                                0x1
#define _LCDRL_LRLAP1_MASK                                  0x80

// Register: LCDDATA0
#define LCDDATA0 LCDDATA0
extern volatile unsigned char           LCDDATA0            __at(0x1D18);
#ifndef _LIB_BUILD
asm("LCDDATA0 equ 01D18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C0                  :1;
        unsigned S01C0                  :1;
        unsigned S02C0                  :1;
        unsigned S03C0                  :1;
        unsigned S04C0                  :1;
        unsigned S05C0                  :1;
        unsigned S06C0                  :1;
        unsigned S07C0                  :1;
    };
} LCDDATA0bits_t;
extern volatile LCDDATA0bits_t LCDDATA0bits __at(0x1D18);
// bitfield macros
#define _LCDDATA0_S00C0_POSN                                0x0
#define _LCDDATA0_S00C0_POSITION                            0x0
#define _LCDDATA0_S00C0_SIZE                                0x1
#define _LCDDATA0_S00C0_LENGTH                              0x1
#define _LCDDATA0_S00C0_MASK                                0x1
#define _LCDDATA0_S01C0_POSN                                0x1
#define _LCDDATA0_S01C0_POSITION                            0x1
#define _LCDDATA0_S01C0_SIZE                                0x1
#define _LCDDATA0_S01C0_LENGTH                              0x1
#define _LCDDATA0_S01C0_MASK                                0x2
#define _LCDDATA0_S02C0_POSN                                0x2
#define _LCDDATA0_S02C0_POSITION                            0x2
#define _LCDDATA0_S02C0_SIZE                                0x1
#define _LCDDATA0_S02C0_LENGTH                              0x1
#define _LCDDATA0_S02C0_MASK                                0x4
#define _LCDDATA0_S03C0_POSN                                0x3
#define _LCDDATA0_S03C0_POSITION                            0x3
#define _LCDDATA0_S03C0_SIZE                                0x1
#define _LCDDATA0_S03C0_LENGTH                              0x1
#define _LCDDATA0_S03C0_MASK                                0x8
#define _LCDDATA0_S04C0_POSN                                0x4
#define _LCDDATA0_S04C0_POSITION                            0x4
#define _LCDDATA0_S04C0_SIZE                                0x1
#define _LCDDATA0_S04C0_LENGTH                              0x1
#define _LCDDATA0_S04C0_MASK                                0x10
#define _LCDDATA0_S05C0_POSN                                0x5
#define _LCDDATA0_S05C0_POSITION                            0x5
#define _LCDDATA0_S05C0_SIZE                                0x1
#define _LCDDATA0_S05C0_LENGTH                              0x1
#define _LCDDATA0_S05C0_MASK                                0x20
#define _LCDDATA0_S06C0_POSN                                0x6
#define _LCDDATA0_S06C0_POSITION                            0x6
#define _LCDDATA0_S06C0_SIZE                                0x1
#define _LCDDATA0_S06C0_LENGTH                              0x1
#define _LCDDATA0_S06C0_MASK                                0x40
#define _LCDDATA0_S07C0_POSN                                0x7
#define _LCDDATA0_S07C0_POSITION                            0x7
#define _LCDDATA0_S07C0_SIZE                                0x1
#define _LCDDATA0_S07C0_LENGTH                              0x1
#define _LCDDATA0_S07C0_MASK                                0x80

// Register: LCDDATA1
#define LCDDATA1 LCDDATA1
extern volatile unsigned char           LCDDATA1            __at(0x1D19);
#ifndef _LIB_BUILD
asm("LCDDATA1 equ 01D19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C0                  :1;
        unsigned S09C0                  :1;
        unsigned S10C0                  :1;
        unsigned S11C0                  :1;
        unsigned S12C0                  :1;
        unsigned S13C0                  :1;
        unsigned S14C0                  :1;
        unsigned S15C0                  :1;
    };
} LCDDATA1bits_t;
extern volatile LCDDATA1bits_t LCDDATA1bits __at(0x1D19);
// bitfield macros
#define _LCDDATA1_S08C0_POSN                                0x0
#define _LCDDATA1_S08C0_POSITION                            0x0
#define _LCDDATA1_S08C0_SIZE                                0x1
#define _LCDDATA1_S08C0_LENGTH                              0x1
#define _LCDDATA1_S08C0_MASK                                0x1
#define _LCDDATA1_S09C0_POSN                                0x1
#define _LCDDATA1_S09C0_POSITION                            0x1
#define _LCDDATA1_S09C0_SIZE                                0x1
#define _LCDDATA1_S09C0_LENGTH                              0x1
#define _LCDDATA1_S09C0_MASK                                0x2
#define _LCDDATA1_S10C0_POSN                                0x2
#define _LCDDATA1_S10C0_POSITION                            0x2
#define _LCDDATA1_S10C0_SIZE                                0x1
#define _LCDDATA1_S10C0_LENGTH                              0x1
#define _LCDDATA1_S10C0_MASK                                0x4
#define _LCDDATA1_S11C0_POSN                                0x3
#define _LCDDATA1_S11C0_POSITION                            0x3
#define _LCDDATA1_S11C0_SIZE                                0x1
#define _LCDDATA1_S11C0_LENGTH                              0x1
#define _LCDDATA1_S11C0_MASK                                0x8
#define _LCDDATA1_S12C0_POSN                                0x4
#define _LCDDATA1_S12C0_POSITION                            0x4
#define _LCDDATA1_S12C0_SIZE                                0x1
#define _LCDDATA1_S12C0_LENGTH                              0x1
#define _LCDDATA1_S12C0_MASK                                0x10
#define _LCDDATA1_S13C0_POSN                                0x5
#define _LCDDATA1_S13C0_POSITION                            0x5
#define _LCDDATA1_S13C0_SIZE                                0x1
#define _LCDDATA1_S13C0_LENGTH                              0x1
#define _LCDDATA1_S13C0_MASK                                0x20
#define _LCDDATA1_S14C0_POSN                                0x6
#define _LCDDATA1_S14C0_POSITION                            0x6
#define _LCDDATA1_S14C0_SIZE                                0x1
#define _LCDDATA1_S14C0_LENGTH                              0x1
#define _LCDDATA1_S14C0_MASK                                0x40
#define _LCDDATA1_S15C0_POSN                                0x7
#define _LCDDATA1_S15C0_POSITION                            0x7
#define _LCDDATA1_S15C0_SIZE                                0x1
#define _LCDDATA1_S15C0_LENGTH                              0x1
#define _LCDDATA1_S15C0_MASK                                0x80

// Register: LCDDATA2
#define LCDDATA2 LCDDATA2
extern volatile unsigned char           LCDDATA2            __at(0x1D1A);
#ifndef _LIB_BUILD
asm("LCDDATA2 equ 01D1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C0                  :1;
        unsigned S17C0                  :1;
        unsigned S18C0                  :1;
        unsigned S19C0                  :1;
        unsigned S20C0                  :1;
        unsigned S21C0                  :1;
        unsigned S22C0                  :1;
        unsigned S23C0                  :1;
    };
} LCDDATA2bits_t;
extern volatile LCDDATA2bits_t LCDDATA2bits __at(0x1D1A);
// bitfield macros
#define _LCDDATA2_S16C0_POSN                                0x0
#define _LCDDATA2_S16C0_POSITION                            0x0
#define _LCDDATA2_S16C0_SIZE                                0x1
#define _LCDDATA2_S16C0_LENGTH                              0x1
#define _LCDDATA2_S16C0_MASK                                0x1
#define _LCDDATA2_S17C0_POSN                                0x1
#define _LCDDATA2_S17C0_POSITION                            0x1
#define _LCDDATA2_S17C0_SIZE                                0x1
#define _LCDDATA2_S17C0_LENGTH                              0x1
#define _LCDDATA2_S17C0_MASK                                0x2
#define _LCDDATA2_S18C0_POSN                                0x2
#define _LCDDATA2_S18C0_POSITION                            0x2
#define _LCDDATA2_S18C0_SIZE                                0x1
#define _LCDDATA2_S18C0_LENGTH                              0x1
#define _LCDDATA2_S18C0_MASK                                0x4
#define _LCDDATA2_S19C0_POSN                                0x3
#define _LCDDATA2_S19C0_POSITION                            0x3
#define _LCDDATA2_S19C0_SIZE                                0x1
#define _LCDDATA2_S19C0_LENGTH                              0x1
#define _LCDDATA2_S19C0_MASK                                0x8
#define _LCDDATA2_S20C0_POSN                                0x4
#define _LCDDATA2_S20C0_POSITION                            0x4
#define _LCDDATA2_S20C0_SIZE                                0x1
#define _LCDDATA2_S20C0_LENGTH                              0x1
#define _LCDDATA2_S20C0_MASK                                0x10
#define _LCDDATA2_S21C0_POSN                                0x5
#define _LCDDATA2_S21C0_POSITION                            0x5
#define _LCDDATA2_S21C0_SIZE                                0x1
#define _LCDDATA2_S21C0_LENGTH                              0x1
#define _LCDDATA2_S21C0_MASK                                0x20
#define _LCDDATA2_S22C0_POSN                                0x6
#define _LCDDATA2_S22C0_POSITION                            0x6
#define _LCDDATA2_S22C0_SIZE                                0x1
#define _LCDDATA2_S22C0_LENGTH                              0x1
#define _LCDDATA2_S22C0_MASK                                0x40
#define _LCDDATA2_S23C0_POSN                                0x7
#define _LCDDATA2_S23C0_POSITION                            0x7
#define _LCDDATA2_S23C0_SIZE                                0x1
#define _LCDDATA2_S23C0_LENGTH                              0x1
#define _LCDDATA2_S23C0_MASK                                0x80

// Register: LCDDATA3
#define LCDDATA3 LCDDATA3
extern volatile unsigned char           LCDDATA3            __at(0x1D1B);
#ifndef _LIB_BUILD
asm("LCDDATA3 equ 01D1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C0                  :1;
        unsigned S25C0                  :1;
        unsigned S26C0                  :1;
        unsigned S27C0                  :1;
        unsigned S28C0                  :1;
        unsigned S29C0                  :1;
        unsigned S30C0                  :1;
        unsigned S31C0                  :1;
    };
} LCDDATA3bits_t;
extern volatile LCDDATA3bits_t LCDDATA3bits __at(0x1D1B);
// bitfield macros
#define _LCDDATA3_S24C0_POSN                                0x0
#define _LCDDATA3_S24C0_POSITION                            0x0
#define _LCDDATA3_S24C0_SIZE                                0x1
#define _LCDDATA3_S24C0_LENGTH                              0x1
#define _LCDDATA3_S24C0_MASK                                0x1
#define _LCDDATA3_S25C0_POSN                                0x1
#define _LCDDATA3_S25C0_POSITION                            0x1
#define _LCDDATA3_S25C0_SIZE                                0x1
#define _LCDDATA3_S25C0_LENGTH                              0x1
#define _LCDDATA3_S25C0_MASK                                0x2
#define _LCDDATA3_S26C0_POSN                                0x2
#define _LCDDATA3_S26C0_POSITION                            0x2
#define _LCDDATA3_S26C0_SIZE                                0x1
#define _LCDDATA3_S26C0_LENGTH                              0x1
#define _LCDDATA3_S26C0_MASK                                0x4
#define _LCDDATA3_S27C0_POSN                                0x3
#define _LCDDATA3_S27C0_POSITION                            0x3
#define _LCDDATA3_S27C0_SIZE                                0x1
#define _LCDDATA3_S27C0_LENGTH                              0x1
#define _LCDDATA3_S27C0_MASK                                0x8
#define _LCDDATA3_S28C0_POSN                                0x4
#define _LCDDATA3_S28C0_POSITION                            0x4
#define _LCDDATA3_S28C0_SIZE                                0x1
#define _LCDDATA3_S28C0_LENGTH                              0x1
#define _LCDDATA3_S28C0_MASK                                0x10
#define _LCDDATA3_S29C0_POSN                                0x5
#define _LCDDATA3_S29C0_POSITION                            0x5
#define _LCDDATA3_S29C0_SIZE                                0x1
#define _LCDDATA3_S29C0_LENGTH                              0x1
#define _LCDDATA3_S29C0_MASK                                0x20
#define _LCDDATA3_S30C0_POSN                                0x6
#define _LCDDATA3_S30C0_POSITION                            0x6
#define _LCDDATA3_S30C0_SIZE                                0x1
#define _LCDDATA3_S30C0_LENGTH                              0x1
#define _LCDDATA3_S30C0_MASK                                0x40
#define _LCDDATA3_S31C0_POSN                                0x7
#define _LCDDATA3_S31C0_POSITION                            0x7
#define _LCDDATA3_S31C0_SIZE                                0x1
#define _LCDDATA3_S31C0_LENGTH                              0x1
#define _LCDDATA3_S31C0_MASK                                0x80

// Register: LCDDATA4
#define LCDDATA4 LCDDATA4
extern volatile unsigned char           LCDDATA4            __at(0x1D1C);
#ifndef _LIB_BUILD
asm("LCDDATA4 equ 01D1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C0                  :1;
        unsigned S33C0                  :1;
        unsigned S34C0                  :1;
        unsigned S35C0                  :1;
        unsigned S36C0                  :1;
        unsigned S37C0                  :1;
        unsigned S38C0                  :1;
        unsigned S39C0                  :1;
    };
} LCDDATA4bits_t;
extern volatile LCDDATA4bits_t LCDDATA4bits __at(0x1D1C);
// bitfield macros
#define _LCDDATA4_S32C0_POSN                                0x0
#define _LCDDATA4_S32C0_POSITION                            0x0
#define _LCDDATA4_S32C0_SIZE                                0x1
#define _LCDDATA4_S32C0_LENGTH                              0x1
#define _LCDDATA4_S32C0_MASK                                0x1
#define _LCDDATA4_S33C0_POSN                                0x1
#define _LCDDATA4_S33C0_POSITION                            0x1
#define _LCDDATA4_S33C0_SIZE                                0x1
#define _LCDDATA4_S33C0_LENGTH                              0x1
#define _LCDDATA4_S33C0_MASK                                0x2
#define _LCDDATA4_S34C0_POSN                                0x2
#define _LCDDATA4_S34C0_POSITION                            0x2
#define _LCDDATA4_S34C0_SIZE                                0x1
#define _LCDDATA4_S34C0_LENGTH                              0x1
#define _LCDDATA4_S34C0_MASK                                0x4
#define _LCDDATA4_S35C0_POSN                                0x3
#define _LCDDATA4_S35C0_POSITION                            0x3
#define _LCDDATA4_S35C0_SIZE                                0x1
#define _LCDDATA4_S35C0_LENGTH                              0x1
#define _LCDDATA4_S35C0_MASK                                0x8
#define _LCDDATA4_S36C0_POSN                                0x4
#define _LCDDATA4_S36C0_POSITION                            0x4
#define _LCDDATA4_S36C0_SIZE                                0x1
#define _LCDDATA4_S36C0_LENGTH                              0x1
#define _LCDDATA4_S36C0_MASK                                0x10
#define _LCDDATA4_S37C0_POSN                                0x5
#define _LCDDATA4_S37C0_POSITION                            0x5
#define _LCDDATA4_S37C0_SIZE                                0x1
#define _LCDDATA4_S37C0_LENGTH                              0x1
#define _LCDDATA4_S37C0_MASK                                0x20
#define _LCDDATA4_S38C0_POSN                                0x6
#define _LCDDATA4_S38C0_POSITION                            0x6
#define _LCDDATA4_S38C0_SIZE                                0x1
#define _LCDDATA4_S38C0_LENGTH                              0x1
#define _LCDDATA4_S38C0_MASK                                0x40
#define _LCDDATA4_S39C0_POSN                                0x7
#define _LCDDATA4_S39C0_POSITION                            0x7
#define _LCDDATA4_S39C0_SIZE                                0x1
#define _LCDDATA4_S39C0_LENGTH                              0x1
#define _LCDDATA4_S39C0_MASK                                0x80

// Register: LCDDATA5
#define LCDDATA5 LCDDATA5
extern volatile unsigned char           LCDDATA5            __at(0x1D1D);
#ifndef _LIB_BUILD
asm("LCDDATA5 equ 01D1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C0                  :1;
        unsigned S41C0                  :1;
        unsigned S42C0                  :1;
        unsigned S43C0                  :1;
        unsigned S44C0                  :1;
        unsigned S45C0                  :1;
    };
} LCDDATA5bits_t;
extern volatile LCDDATA5bits_t LCDDATA5bits __at(0x1D1D);
// bitfield macros
#define _LCDDATA5_S40C0_POSN                                0x0
#define _LCDDATA5_S40C0_POSITION                            0x0
#define _LCDDATA5_S40C0_SIZE                                0x1
#define _LCDDATA5_S40C0_LENGTH                              0x1
#define _LCDDATA5_S40C0_MASK                                0x1
#define _LCDDATA5_S41C0_POSN                                0x1
#define _LCDDATA5_S41C0_POSITION                            0x1
#define _LCDDATA5_S41C0_SIZE                                0x1
#define _LCDDATA5_S41C0_LENGTH                              0x1
#define _LCDDATA5_S41C0_MASK                                0x2
#define _LCDDATA5_S42C0_POSN                                0x2
#define _LCDDATA5_S42C0_POSITION                            0x2
#define _LCDDATA5_S42C0_SIZE                                0x1
#define _LCDDATA5_S42C0_LENGTH                              0x1
#define _LCDDATA5_S42C0_MASK                                0x4
#define _LCDDATA5_S43C0_POSN                                0x3
#define _LCDDATA5_S43C0_POSITION                            0x3
#define _LCDDATA5_S43C0_SIZE                                0x1
#define _LCDDATA5_S43C0_LENGTH                              0x1
#define _LCDDATA5_S43C0_MASK                                0x8
#define _LCDDATA5_S44C0_POSN                                0x4
#define _LCDDATA5_S44C0_POSITION                            0x4
#define _LCDDATA5_S44C0_SIZE                                0x1
#define _LCDDATA5_S44C0_LENGTH                              0x1
#define _LCDDATA5_S44C0_MASK                                0x10
#define _LCDDATA5_S45C0_POSN                                0x5
#define _LCDDATA5_S45C0_POSITION                            0x5
#define _LCDDATA5_S45C0_SIZE                                0x1
#define _LCDDATA5_S45C0_LENGTH                              0x1
#define _LCDDATA5_S45C0_MASK                                0x20

// Register: LCDDATA6
#define LCDDATA6 LCDDATA6
extern volatile unsigned char           LCDDATA6            __at(0x1D1E);
#ifndef _LIB_BUILD
asm("LCDDATA6 equ 01D1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C1                  :1;
        unsigned S01C1                  :1;
        unsigned S02C1                  :1;
        unsigned S03C1                  :1;
        unsigned S04C1                  :1;
        unsigned S05C1                  :1;
        unsigned S06C1                  :1;
        unsigned S07C1                  :1;
    };
} LCDDATA6bits_t;
extern volatile LCDDATA6bits_t LCDDATA6bits __at(0x1D1E);
// bitfield macros
#define _LCDDATA6_S00C1_POSN                                0x0
#define _LCDDATA6_S00C1_POSITION                            0x0
#define _LCDDATA6_S00C1_SIZE                                0x1
#define _LCDDATA6_S00C1_LENGTH                              0x1
#define _LCDDATA6_S00C1_MASK                                0x1
#define _LCDDATA6_S01C1_POSN                                0x1
#define _LCDDATA6_S01C1_POSITION                            0x1
#define _LCDDATA6_S01C1_SIZE                                0x1
#define _LCDDATA6_S01C1_LENGTH                              0x1
#define _LCDDATA6_S01C1_MASK                                0x2
#define _LCDDATA6_S02C1_POSN                                0x2
#define _LCDDATA6_S02C1_POSITION                            0x2
#define _LCDDATA6_S02C1_SIZE                                0x1
#define _LCDDATA6_S02C1_LENGTH                              0x1
#define _LCDDATA6_S02C1_MASK                                0x4
#define _LCDDATA6_S03C1_POSN                                0x3
#define _LCDDATA6_S03C1_POSITION                            0x3
#define _LCDDATA6_S03C1_SIZE                                0x1
#define _LCDDATA6_S03C1_LENGTH                              0x1
#define _LCDDATA6_S03C1_MASK                                0x8
#define _LCDDATA6_S04C1_POSN                                0x4
#define _LCDDATA6_S04C1_POSITION                            0x4
#define _LCDDATA6_S04C1_SIZE                                0x1
#define _LCDDATA6_S04C1_LENGTH                              0x1
#define _LCDDATA6_S04C1_MASK                                0x10
#define _LCDDATA6_S05C1_POSN                                0x5
#define _LCDDATA6_S05C1_POSITION                            0x5
#define _LCDDATA6_S05C1_SIZE                                0x1
#define _LCDDATA6_S05C1_LENGTH                              0x1
#define _LCDDATA6_S05C1_MASK                                0x20
#define _LCDDATA6_S06C1_POSN                                0x6
#define _LCDDATA6_S06C1_POSITION                            0x6
#define _LCDDATA6_S06C1_SIZE                                0x1
#define _LCDDATA6_S06C1_LENGTH                              0x1
#define _LCDDATA6_S06C1_MASK                                0x40
#define _LCDDATA6_S07C1_POSN                                0x7
#define _LCDDATA6_S07C1_POSITION                            0x7
#define _LCDDATA6_S07C1_SIZE                                0x1
#define _LCDDATA6_S07C1_LENGTH                              0x1
#define _LCDDATA6_S07C1_MASK                                0x80

// Register: LCDDATA7
#define LCDDATA7 LCDDATA7
extern volatile unsigned char           LCDDATA7            __at(0x1D1F);
#ifndef _LIB_BUILD
asm("LCDDATA7 equ 01D1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C1                  :1;
        unsigned S09C1                  :1;
        unsigned S10C1                  :1;
        unsigned S11C1                  :1;
        unsigned S12C1                  :1;
        unsigned S13C1                  :1;
        unsigned S14C1                  :1;
        unsigned S15C1                  :1;
    };
} LCDDATA7bits_t;
extern volatile LCDDATA7bits_t LCDDATA7bits __at(0x1D1F);
// bitfield macros
#define _LCDDATA7_S08C1_POSN                                0x0
#define _LCDDATA7_S08C1_POSITION                            0x0
#define _LCDDATA7_S08C1_SIZE                                0x1
#define _LCDDATA7_S08C1_LENGTH                              0x1
#define _LCDDATA7_S08C1_MASK                                0x1
#define _LCDDATA7_S09C1_POSN                                0x1
#define _LCDDATA7_S09C1_POSITION                            0x1
#define _LCDDATA7_S09C1_SIZE                                0x1
#define _LCDDATA7_S09C1_LENGTH                              0x1
#define _LCDDATA7_S09C1_MASK                                0x2
#define _LCDDATA7_S10C1_POSN                                0x2
#define _LCDDATA7_S10C1_POSITION                            0x2
#define _LCDDATA7_S10C1_SIZE                                0x1
#define _LCDDATA7_S10C1_LENGTH                              0x1
#define _LCDDATA7_S10C1_MASK                                0x4
#define _LCDDATA7_S11C1_POSN                                0x3
#define _LCDDATA7_S11C1_POSITION                            0x3
#define _LCDDATA7_S11C1_SIZE                                0x1
#define _LCDDATA7_S11C1_LENGTH                              0x1
#define _LCDDATA7_S11C1_MASK                                0x8
#define _LCDDATA7_S12C1_POSN                                0x4
#define _LCDDATA7_S12C1_POSITION                            0x4
#define _LCDDATA7_S12C1_SIZE                                0x1
#define _LCDDATA7_S12C1_LENGTH                              0x1
#define _LCDDATA7_S12C1_MASK                                0x10
#define _LCDDATA7_S13C1_POSN                                0x5
#define _LCDDATA7_S13C1_POSITION                            0x5
#define _LCDDATA7_S13C1_SIZE                                0x1
#define _LCDDATA7_S13C1_LENGTH                              0x1
#define _LCDDATA7_S13C1_MASK                                0x20
#define _LCDDATA7_S14C1_POSN                                0x6
#define _LCDDATA7_S14C1_POSITION                            0x6
#define _LCDDATA7_S14C1_SIZE                                0x1
#define _LCDDATA7_S14C1_LENGTH                              0x1
#define _LCDDATA7_S14C1_MASK                                0x40
#define _LCDDATA7_S15C1_POSN                                0x7
#define _LCDDATA7_S15C1_POSITION                            0x7
#define _LCDDATA7_S15C1_SIZE                                0x1
#define _LCDDATA7_S15C1_LENGTH                              0x1
#define _LCDDATA7_S15C1_MASK                                0x80

// Register: LCDDATA8
#define LCDDATA8 LCDDATA8
extern volatile unsigned char           LCDDATA8            __at(0x1D20);
#ifndef _LIB_BUILD
asm("LCDDATA8 equ 01D20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C1                  :1;
        unsigned S17C1                  :1;
        unsigned S18C1                  :1;
        unsigned S19C1                  :1;
        unsigned S20C1                  :1;
        unsigned S21C1                  :1;
        unsigned S22C1                  :1;
        unsigned S23C1                  :1;
    };
} LCDDATA8bits_t;
extern volatile LCDDATA8bits_t LCDDATA8bits __at(0x1D20);
// bitfield macros
#define _LCDDATA8_S16C1_POSN                                0x0
#define _LCDDATA8_S16C1_POSITION                            0x0
#define _LCDDATA8_S16C1_SIZE                                0x1
#define _LCDDATA8_S16C1_LENGTH                              0x1
#define _LCDDATA8_S16C1_MASK                                0x1
#define _LCDDATA8_S17C1_POSN                                0x1
#define _LCDDATA8_S17C1_POSITION                            0x1
#define _LCDDATA8_S17C1_SIZE                                0x1
#define _LCDDATA8_S17C1_LENGTH                              0x1
#define _LCDDATA8_S17C1_MASK                                0x2
#define _LCDDATA8_S18C1_POSN                                0x2
#define _LCDDATA8_S18C1_POSITION                            0x2
#define _LCDDATA8_S18C1_SIZE                                0x1
#define _LCDDATA8_S18C1_LENGTH                              0x1
#define _LCDDATA8_S18C1_MASK                                0x4
#define _LCDDATA8_S19C1_POSN                                0x3
#define _LCDDATA8_S19C1_POSITION                            0x3
#define _LCDDATA8_S19C1_SIZE                                0x1
#define _LCDDATA8_S19C1_LENGTH                              0x1
#define _LCDDATA8_S19C1_MASK                                0x8
#define _LCDDATA8_S20C1_POSN                                0x4
#define _LCDDATA8_S20C1_POSITION                            0x4
#define _LCDDATA8_S20C1_SIZE                                0x1
#define _LCDDATA8_S20C1_LENGTH                              0x1
#define _LCDDATA8_S20C1_MASK                                0x10
#define _LCDDATA8_S21C1_POSN                                0x5
#define _LCDDATA8_S21C1_POSITION                            0x5
#define _LCDDATA8_S21C1_SIZE                                0x1
#define _LCDDATA8_S21C1_LENGTH                              0x1
#define _LCDDATA8_S21C1_MASK                                0x20
#define _LCDDATA8_S22C1_POSN                                0x6
#define _LCDDATA8_S22C1_POSITION                            0x6
#define _LCDDATA8_S22C1_SIZE                                0x1
#define _LCDDATA8_S22C1_LENGTH                              0x1
#define _LCDDATA8_S22C1_MASK                                0x40
#define _LCDDATA8_S23C1_POSN                                0x7
#define _LCDDATA8_S23C1_POSITION                            0x7
#define _LCDDATA8_S23C1_SIZE                                0x1
#define _LCDDATA8_S23C1_LENGTH                              0x1
#define _LCDDATA8_S23C1_MASK                                0x80

// Register: LCDDATA9
#define LCDDATA9 LCDDATA9
extern volatile unsigned char           LCDDATA9            __at(0x1D21);
#ifndef _LIB_BUILD
asm("LCDDATA9 equ 01D21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C1                  :1;
        unsigned S25C1                  :1;
        unsigned S26C1                  :1;
        unsigned S27C1                  :1;
        unsigned S28C1                  :1;
        unsigned S29C1                  :1;
        unsigned S30C1                  :1;
        unsigned S31C1                  :1;
    };
} LCDDATA9bits_t;
extern volatile LCDDATA9bits_t LCDDATA9bits __at(0x1D21);
// bitfield macros
#define _LCDDATA9_S24C1_POSN                                0x0
#define _LCDDATA9_S24C1_POSITION                            0x0
#define _LCDDATA9_S24C1_SIZE                                0x1
#define _LCDDATA9_S24C1_LENGTH                              0x1
#define _LCDDATA9_S24C1_MASK                                0x1
#define _LCDDATA9_S25C1_POSN                                0x1
#define _LCDDATA9_S25C1_POSITION                            0x1
#define _LCDDATA9_S25C1_SIZE                                0x1
#define _LCDDATA9_S25C1_LENGTH                              0x1
#define _LCDDATA9_S25C1_MASK                                0x2
#define _LCDDATA9_S26C1_POSN                                0x2
#define _LCDDATA9_S26C1_POSITION                            0x2
#define _LCDDATA9_S26C1_SIZE                                0x1
#define _LCDDATA9_S26C1_LENGTH                              0x1
#define _LCDDATA9_S26C1_MASK                                0x4
#define _LCDDATA9_S27C1_POSN                                0x3
#define _LCDDATA9_S27C1_POSITION                            0x3
#define _LCDDATA9_S27C1_SIZE                                0x1
#define _LCDDATA9_S27C1_LENGTH                              0x1
#define _LCDDATA9_S27C1_MASK                                0x8
#define _LCDDATA9_S28C1_POSN                                0x4
#define _LCDDATA9_S28C1_POSITION                            0x4
#define _LCDDATA9_S28C1_SIZE                                0x1
#define _LCDDATA9_S28C1_LENGTH                              0x1
#define _LCDDATA9_S28C1_MASK                                0x10
#define _LCDDATA9_S29C1_POSN                                0x5
#define _LCDDATA9_S29C1_POSITION                            0x5
#define _LCDDATA9_S29C1_SIZE                                0x1
#define _LCDDATA9_S29C1_LENGTH                              0x1
#define _LCDDATA9_S29C1_MASK                                0x20
#define _LCDDATA9_S30C1_POSN                                0x6
#define _LCDDATA9_S30C1_POSITION                            0x6
#define _LCDDATA9_S30C1_SIZE                                0x1
#define _LCDDATA9_S30C1_LENGTH                              0x1
#define _LCDDATA9_S30C1_MASK                                0x40
#define _LCDDATA9_S31C1_POSN                                0x7
#define _LCDDATA9_S31C1_POSITION                            0x7
#define _LCDDATA9_S31C1_SIZE                                0x1
#define _LCDDATA9_S31C1_LENGTH                              0x1
#define _LCDDATA9_S31C1_MASK                                0x80

// Register: LCDDATA10
#define LCDDATA10 LCDDATA10
extern volatile unsigned char           LCDDATA10           __at(0x1D22);
#ifndef _LIB_BUILD
asm("LCDDATA10 equ 01D22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C1                  :1;
        unsigned S33C1                  :1;
        unsigned S34C1                  :1;
        unsigned S35C1                  :1;
        unsigned S36C1                  :1;
        unsigned S37C1                  :1;
        unsigned S38C1                  :1;
        unsigned S39C1                  :1;
    };
} LCDDATA10bits_t;
extern volatile LCDDATA10bits_t LCDDATA10bits __at(0x1D22);
// bitfield macros
#define _LCDDATA10_S32C1_POSN                               0x0
#define _LCDDATA10_S32C1_POSITION                           0x0
#define _LCDDATA10_S32C1_SIZE                               0x1
#define _LCDDATA10_S32C1_LENGTH                             0x1
#define _LCDDATA10_S32C1_MASK                               0x1
#define _LCDDATA10_S33C1_POSN                               0x1
#define _LCDDATA10_S33C1_POSITION                           0x1
#define _LCDDATA10_S33C1_SIZE                               0x1
#define _LCDDATA10_S33C1_LENGTH                             0x1
#define _LCDDATA10_S33C1_MASK                               0x2
#define _LCDDATA10_S34C1_POSN                               0x2
#define _LCDDATA10_S34C1_POSITION                           0x2
#define _LCDDATA10_S34C1_SIZE                               0x1
#define _LCDDATA10_S34C1_LENGTH                             0x1
#define _LCDDATA10_S34C1_MASK                               0x4
#define _LCDDATA10_S35C1_POSN                               0x3
#define _LCDDATA10_S35C1_POSITION                           0x3
#define _LCDDATA10_S35C1_SIZE                               0x1
#define _LCDDATA10_S35C1_LENGTH                             0x1
#define _LCDDATA10_S35C1_MASK                               0x8
#define _LCDDATA10_S36C1_POSN                               0x4
#define _LCDDATA10_S36C1_POSITION                           0x4
#define _LCDDATA10_S36C1_SIZE                               0x1
#define _LCDDATA10_S36C1_LENGTH                             0x1
#define _LCDDATA10_S36C1_MASK                               0x10
#define _LCDDATA10_S37C1_POSN                               0x5
#define _LCDDATA10_S37C1_POSITION                           0x5
#define _LCDDATA10_S37C1_SIZE                               0x1
#define _LCDDATA10_S37C1_LENGTH                             0x1
#define _LCDDATA10_S37C1_MASK                               0x20
#define _LCDDATA10_S38C1_POSN                               0x6
#define _LCDDATA10_S38C1_POSITION                           0x6
#define _LCDDATA10_S38C1_SIZE                               0x1
#define _LCDDATA10_S38C1_LENGTH                             0x1
#define _LCDDATA10_S38C1_MASK                               0x40
#define _LCDDATA10_S39C1_POSN                               0x7
#define _LCDDATA10_S39C1_POSITION                           0x7
#define _LCDDATA10_S39C1_SIZE                               0x1
#define _LCDDATA10_S39C1_LENGTH                             0x1
#define _LCDDATA10_S39C1_MASK                               0x80

// Register: LCDDATA11
#define LCDDATA11 LCDDATA11
extern volatile unsigned char           LCDDATA11           __at(0x1D23);
#ifndef _LIB_BUILD
asm("LCDDATA11 equ 01D23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C1                  :1;
        unsigned S41C1                  :1;
        unsigned S42C1                  :1;
        unsigned S43C1                  :1;
        unsigned S44C1                  :1;
        unsigned S45C1                  :1;
    };
} LCDDATA11bits_t;
extern volatile LCDDATA11bits_t LCDDATA11bits __at(0x1D23);
// bitfield macros
#define _LCDDATA11_S40C1_POSN                               0x0
#define _LCDDATA11_S40C1_POSITION                           0x0
#define _LCDDATA11_S40C1_SIZE                               0x1
#define _LCDDATA11_S40C1_LENGTH                             0x1
#define _LCDDATA11_S40C1_MASK                               0x1
#define _LCDDATA11_S41C1_POSN                               0x1
#define _LCDDATA11_S41C1_POSITION                           0x1
#define _LCDDATA11_S41C1_SIZE                               0x1
#define _LCDDATA11_S41C1_LENGTH                             0x1
#define _LCDDATA11_S41C1_MASK                               0x2
#define _LCDDATA11_S42C1_POSN                               0x2
#define _LCDDATA11_S42C1_POSITION                           0x2
#define _LCDDATA11_S42C1_SIZE                               0x1
#define _LCDDATA11_S42C1_LENGTH                             0x1
#define _LCDDATA11_S42C1_MASK                               0x4
#define _LCDDATA11_S43C1_POSN                               0x3
#define _LCDDATA11_S43C1_POSITION                           0x3
#define _LCDDATA11_S43C1_SIZE                               0x1
#define _LCDDATA11_S43C1_LENGTH                             0x1
#define _LCDDATA11_S43C1_MASK                               0x8
#define _LCDDATA11_S44C1_POSN                               0x4
#define _LCDDATA11_S44C1_POSITION                           0x4
#define _LCDDATA11_S44C1_SIZE                               0x1
#define _LCDDATA11_S44C1_LENGTH                             0x1
#define _LCDDATA11_S44C1_MASK                               0x10
#define _LCDDATA11_S45C1_POSN                               0x5
#define _LCDDATA11_S45C1_POSITION                           0x5
#define _LCDDATA11_S45C1_SIZE                               0x1
#define _LCDDATA11_S45C1_LENGTH                             0x1
#define _LCDDATA11_S45C1_MASK                               0x20

// Register: LCDDATA12
#define LCDDATA12 LCDDATA12
extern volatile unsigned char           LCDDATA12           __at(0x1D24);
#ifndef _LIB_BUILD
asm("LCDDATA12 equ 01D24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C2                  :1;
        unsigned S01C2                  :1;
        unsigned S02C2                  :1;
        unsigned S03C2                  :1;
        unsigned S04C2                  :1;
        unsigned S05C2                  :1;
        unsigned S06C2                  :1;
        unsigned S07C2                  :1;
    };
} LCDDATA12bits_t;
extern volatile LCDDATA12bits_t LCDDATA12bits __at(0x1D24);
// bitfield macros
#define _LCDDATA12_S00C2_POSN                               0x0
#define _LCDDATA12_S00C2_POSITION                           0x0
#define _LCDDATA12_S00C2_SIZE                               0x1
#define _LCDDATA12_S00C2_LENGTH                             0x1
#define _LCDDATA12_S00C2_MASK                               0x1
#define _LCDDATA12_S01C2_POSN                               0x1
#define _LCDDATA12_S01C2_POSITION                           0x1
#define _LCDDATA12_S01C2_SIZE                               0x1
#define _LCDDATA12_S01C2_LENGTH                             0x1
#define _LCDDATA12_S01C2_MASK                               0x2
#define _LCDDATA12_S02C2_POSN                               0x2
#define _LCDDATA12_S02C2_POSITION                           0x2
#define _LCDDATA12_S02C2_SIZE                               0x1
#define _LCDDATA12_S02C2_LENGTH                             0x1
#define _LCDDATA12_S02C2_MASK                               0x4
#define _LCDDATA12_S03C2_POSN                               0x3
#define _LCDDATA12_S03C2_POSITION                           0x3
#define _LCDDATA12_S03C2_SIZE                               0x1
#define _LCDDATA12_S03C2_LENGTH                             0x1
#define _LCDDATA12_S03C2_MASK                               0x8
#define _LCDDATA12_S04C2_POSN                               0x4
#define _LCDDATA12_S04C2_POSITION                           0x4
#define _LCDDATA12_S04C2_SIZE                               0x1
#define _LCDDATA12_S04C2_LENGTH                             0x1
#define _LCDDATA12_S04C2_MASK                               0x10
#define _LCDDATA12_S05C2_POSN                               0x5
#define _LCDDATA12_S05C2_POSITION                           0x5
#define _LCDDATA12_S05C2_SIZE                               0x1
#define _LCDDATA12_S05C2_LENGTH                             0x1
#define _LCDDATA12_S05C2_MASK                               0x20
#define _LCDDATA12_S06C2_POSN                               0x6
#define _LCDDATA12_S06C2_POSITION                           0x6
#define _LCDDATA12_S06C2_SIZE                               0x1
#define _LCDDATA12_S06C2_LENGTH                             0x1
#define _LCDDATA12_S06C2_MASK                               0x40
#define _LCDDATA12_S07C2_POSN                               0x7
#define _LCDDATA12_S07C2_POSITION                           0x7
#define _LCDDATA12_S07C2_SIZE                               0x1
#define _LCDDATA12_S07C2_LENGTH                             0x1
#define _LCDDATA12_S07C2_MASK                               0x80

// Register: LCDDATA13
#define LCDDATA13 LCDDATA13
extern volatile unsigned char           LCDDATA13           __at(0x1D25);
#ifndef _LIB_BUILD
asm("LCDDATA13 equ 01D25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C2                  :1;
        unsigned S09C2                  :1;
        unsigned S10C2                  :1;
        unsigned S11C2                  :1;
        unsigned S12C2                  :1;
        unsigned S13C2                  :1;
        unsigned S14C2                  :1;
        unsigned S15C2                  :1;
    };
} LCDDATA13bits_t;
extern volatile LCDDATA13bits_t LCDDATA13bits __at(0x1D25);
// bitfield macros
#define _LCDDATA13_S08C2_POSN                               0x0
#define _LCDDATA13_S08C2_POSITION                           0x0
#define _LCDDATA13_S08C2_SIZE                               0x1
#define _LCDDATA13_S08C2_LENGTH                             0x1
#define _LCDDATA13_S08C2_MASK                               0x1
#define _LCDDATA13_S09C2_POSN                               0x1
#define _LCDDATA13_S09C2_POSITION                           0x1
#define _LCDDATA13_S09C2_SIZE                               0x1
#define _LCDDATA13_S09C2_LENGTH                             0x1
#define _LCDDATA13_S09C2_MASK                               0x2
#define _LCDDATA13_S10C2_POSN                               0x2
#define _LCDDATA13_S10C2_POSITION                           0x2
#define _LCDDATA13_S10C2_SIZE                               0x1
#define _LCDDATA13_S10C2_LENGTH                             0x1
#define _LCDDATA13_S10C2_MASK                               0x4
#define _LCDDATA13_S11C2_POSN                               0x3
#define _LCDDATA13_S11C2_POSITION                           0x3
#define _LCDDATA13_S11C2_SIZE                               0x1
#define _LCDDATA13_S11C2_LENGTH                             0x1
#define _LCDDATA13_S11C2_MASK                               0x8
#define _LCDDATA13_S12C2_POSN                               0x4
#define _LCDDATA13_S12C2_POSITION                           0x4
#define _LCDDATA13_S12C2_SIZE                               0x1
#define _LCDDATA13_S12C2_LENGTH                             0x1
#define _LCDDATA13_S12C2_MASK                               0x10
#define _LCDDATA13_S13C2_POSN                               0x5
#define _LCDDATA13_S13C2_POSITION                           0x5
#define _LCDDATA13_S13C2_SIZE                               0x1
#define _LCDDATA13_S13C2_LENGTH                             0x1
#define _LCDDATA13_S13C2_MASK                               0x20
#define _LCDDATA13_S14C2_POSN                               0x6
#define _LCDDATA13_S14C2_POSITION                           0x6
#define _LCDDATA13_S14C2_SIZE                               0x1
#define _LCDDATA13_S14C2_LENGTH                             0x1
#define _LCDDATA13_S14C2_MASK                               0x40
#define _LCDDATA13_S15C2_POSN                               0x7
#define _LCDDATA13_S15C2_POSITION                           0x7
#define _LCDDATA13_S15C2_SIZE                               0x1
#define _LCDDATA13_S15C2_LENGTH                             0x1
#define _LCDDATA13_S15C2_MASK                               0x80

// Register: LCDDATA14
#define LCDDATA14 LCDDATA14
extern volatile unsigned char           LCDDATA14           __at(0x1D26);
#ifndef _LIB_BUILD
asm("LCDDATA14 equ 01D26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C2                  :1;
        unsigned S17C2                  :1;
        unsigned S18C2                  :1;
        unsigned S19C2                  :1;
        unsigned S20C2                  :1;
        unsigned S21C2                  :1;
        unsigned S22C2                  :1;
        unsigned S23C2                  :1;
    };
} LCDDATA14bits_t;
extern volatile LCDDATA14bits_t LCDDATA14bits __at(0x1D26);
// bitfield macros
#define _LCDDATA14_S16C2_POSN                               0x0
#define _LCDDATA14_S16C2_POSITION                           0x0
#define _LCDDATA14_S16C2_SIZE                               0x1
#define _LCDDATA14_S16C2_LENGTH                             0x1
#define _LCDDATA14_S16C2_MASK                               0x1
#define _LCDDATA14_S17C2_POSN                               0x1
#define _LCDDATA14_S17C2_POSITION                           0x1
#define _LCDDATA14_S17C2_SIZE                               0x1
#define _LCDDATA14_S17C2_LENGTH                             0x1
#define _LCDDATA14_S17C2_MASK                               0x2
#define _LCDDATA14_S18C2_POSN                               0x2
#define _LCDDATA14_S18C2_POSITION                           0x2
#define _LCDDATA14_S18C2_SIZE                               0x1
#define _LCDDATA14_S18C2_LENGTH                             0x1
#define _LCDDATA14_S18C2_MASK                               0x4
#define _LCDDATA14_S19C2_POSN                               0x3
#define _LCDDATA14_S19C2_POSITION                           0x3
#define _LCDDATA14_S19C2_SIZE                               0x1
#define _LCDDATA14_S19C2_LENGTH                             0x1
#define _LCDDATA14_S19C2_MASK                               0x8
#define _LCDDATA14_S20C2_POSN                               0x4
#define _LCDDATA14_S20C2_POSITION                           0x4
#define _LCDDATA14_S20C2_SIZE                               0x1
#define _LCDDATA14_S20C2_LENGTH                             0x1
#define _LCDDATA14_S20C2_MASK                               0x10
#define _LCDDATA14_S21C2_POSN                               0x5
#define _LCDDATA14_S21C2_POSITION                           0x5
#define _LCDDATA14_S21C2_SIZE                               0x1
#define _LCDDATA14_S21C2_LENGTH                             0x1
#define _LCDDATA14_S21C2_MASK                               0x20
#define _LCDDATA14_S22C2_POSN                               0x6
#define _LCDDATA14_S22C2_POSITION                           0x6
#define _LCDDATA14_S22C2_SIZE                               0x1
#define _LCDDATA14_S22C2_LENGTH                             0x1
#define _LCDDATA14_S22C2_MASK                               0x40
#define _LCDDATA14_S23C2_POSN                               0x7
#define _LCDDATA14_S23C2_POSITION                           0x7
#define _LCDDATA14_S23C2_SIZE                               0x1
#define _LCDDATA14_S23C2_LENGTH                             0x1
#define _LCDDATA14_S23C2_MASK                               0x80

// Register: LCDDATA15
#define LCDDATA15 LCDDATA15
extern volatile unsigned char           LCDDATA15           __at(0x1D27);
#ifndef _LIB_BUILD
asm("LCDDATA15 equ 01D27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C2                  :1;
        unsigned S25C2                  :1;
        unsigned S26C2                  :1;
        unsigned S27C2                  :1;
        unsigned S28C2                  :1;
        unsigned S29C2                  :1;
        unsigned S30C2                  :1;
        unsigned S31C2                  :1;
    };
} LCDDATA15bits_t;
extern volatile LCDDATA15bits_t LCDDATA15bits __at(0x1D27);
// bitfield macros
#define _LCDDATA15_S24C2_POSN                               0x0
#define _LCDDATA15_S24C2_POSITION                           0x0
#define _LCDDATA15_S24C2_SIZE                               0x1
#define _LCDDATA15_S24C2_LENGTH                             0x1
#define _LCDDATA15_S24C2_MASK                               0x1
#define _LCDDATA15_S25C2_POSN                               0x1
#define _LCDDATA15_S25C2_POSITION                           0x1
#define _LCDDATA15_S25C2_SIZE                               0x1
#define _LCDDATA15_S25C2_LENGTH                             0x1
#define _LCDDATA15_S25C2_MASK                               0x2
#define _LCDDATA15_S26C2_POSN                               0x2
#define _LCDDATA15_S26C2_POSITION                           0x2
#define _LCDDATA15_S26C2_SIZE                               0x1
#define _LCDDATA15_S26C2_LENGTH                             0x1
#define _LCDDATA15_S26C2_MASK                               0x4
#define _LCDDATA15_S27C2_POSN                               0x3
#define _LCDDATA15_S27C2_POSITION                           0x3
#define _LCDDATA15_S27C2_SIZE                               0x1
#define _LCDDATA15_S27C2_LENGTH                             0x1
#define _LCDDATA15_S27C2_MASK                               0x8
#define _LCDDATA15_S28C2_POSN                               0x4
#define _LCDDATA15_S28C2_POSITION                           0x4
#define _LCDDATA15_S28C2_SIZE                               0x1
#define _LCDDATA15_S28C2_LENGTH                             0x1
#define _LCDDATA15_S28C2_MASK                               0x10
#define _LCDDATA15_S29C2_POSN                               0x5
#define _LCDDATA15_S29C2_POSITION                           0x5
#define _LCDDATA15_S29C2_SIZE                               0x1
#define _LCDDATA15_S29C2_LENGTH                             0x1
#define _LCDDATA15_S29C2_MASK                               0x20
#define _LCDDATA15_S30C2_POSN                               0x6
#define _LCDDATA15_S30C2_POSITION                           0x6
#define _LCDDATA15_S30C2_SIZE                               0x1
#define _LCDDATA15_S30C2_LENGTH                             0x1
#define _LCDDATA15_S30C2_MASK                               0x40
#define _LCDDATA15_S31C2_POSN                               0x7
#define _LCDDATA15_S31C2_POSITION                           0x7
#define _LCDDATA15_S31C2_SIZE                               0x1
#define _LCDDATA15_S31C2_LENGTH                             0x1
#define _LCDDATA15_S31C2_MASK                               0x80

// Register: LCDDATA16
#define LCDDATA16 LCDDATA16
extern volatile unsigned char           LCDDATA16           __at(0x1D28);
#ifndef _LIB_BUILD
asm("LCDDATA16 equ 01D28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C2                  :1;
        unsigned S33C2                  :1;
        unsigned S34C2                  :1;
        unsigned S35C2                  :1;
        unsigned S36C2                  :1;
        unsigned S37C2                  :1;
        unsigned S38C2                  :1;
        unsigned S39C2                  :1;
    };
} LCDDATA16bits_t;
extern volatile LCDDATA16bits_t LCDDATA16bits __at(0x1D28);
// bitfield macros
#define _LCDDATA16_S32C2_POSN                               0x0
#define _LCDDATA16_S32C2_POSITION                           0x0
#define _LCDDATA16_S32C2_SIZE                               0x1
#define _LCDDATA16_S32C2_LENGTH                             0x1
#define _LCDDATA16_S32C2_MASK                               0x1
#define _LCDDATA16_S33C2_POSN                               0x1
#define _LCDDATA16_S33C2_POSITION                           0x1
#define _LCDDATA16_S33C2_SIZE                               0x1
#define _LCDDATA16_S33C2_LENGTH                             0x1
#define _LCDDATA16_S33C2_MASK                               0x2
#define _LCDDATA16_S34C2_POSN                               0x2
#define _LCDDATA16_S34C2_POSITION                           0x2
#define _LCDDATA16_S34C2_SIZE                               0x1
#define _LCDDATA16_S34C2_LENGTH                             0x1
#define _LCDDATA16_S34C2_MASK                               0x4
#define _LCDDATA16_S35C2_POSN                               0x3
#define _LCDDATA16_S35C2_POSITION                           0x3
#define _LCDDATA16_S35C2_SIZE                               0x1
#define _LCDDATA16_S35C2_LENGTH                             0x1
#define _LCDDATA16_S35C2_MASK                               0x8
#define _LCDDATA16_S36C2_POSN                               0x4
#define _LCDDATA16_S36C2_POSITION                           0x4
#define _LCDDATA16_S36C2_SIZE                               0x1
#define _LCDDATA16_S36C2_LENGTH                             0x1
#define _LCDDATA16_S36C2_MASK                               0x10
#define _LCDDATA16_S37C2_POSN                               0x5
#define _LCDDATA16_S37C2_POSITION                           0x5
#define _LCDDATA16_S37C2_SIZE                               0x1
#define _LCDDATA16_S37C2_LENGTH                             0x1
#define _LCDDATA16_S37C2_MASK                               0x20
#define _LCDDATA16_S38C2_POSN                               0x6
#define _LCDDATA16_S38C2_POSITION                           0x6
#define _LCDDATA16_S38C2_SIZE                               0x1
#define _LCDDATA16_S38C2_LENGTH                             0x1
#define _LCDDATA16_S38C2_MASK                               0x40
#define _LCDDATA16_S39C2_POSN                               0x7
#define _LCDDATA16_S39C2_POSITION                           0x7
#define _LCDDATA16_S39C2_SIZE                               0x1
#define _LCDDATA16_S39C2_LENGTH                             0x1
#define _LCDDATA16_S39C2_MASK                               0x80

// Register: LCDDATA17
#define LCDDATA17 LCDDATA17
extern volatile unsigned char           LCDDATA17           __at(0x1D29);
#ifndef _LIB_BUILD
asm("LCDDATA17 equ 01D29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C2                  :1;
        unsigned S41C2                  :1;
        unsigned S42C2                  :1;
        unsigned S43C2                  :1;
        unsigned S44C2                  :1;
        unsigned S45C2                  :1;
    };
} LCDDATA17bits_t;
extern volatile LCDDATA17bits_t LCDDATA17bits __at(0x1D29);
// bitfield macros
#define _LCDDATA17_S40C2_POSN                               0x0
#define _LCDDATA17_S40C2_POSITION                           0x0
#define _LCDDATA17_S40C2_SIZE                               0x1
#define _LCDDATA17_S40C2_LENGTH                             0x1
#define _LCDDATA17_S40C2_MASK                               0x1
#define _LCDDATA17_S41C2_POSN                               0x1
#define _LCDDATA17_S41C2_POSITION                           0x1
#define _LCDDATA17_S41C2_SIZE                               0x1
#define _LCDDATA17_S41C2_LENGTH                             0x1
#define _LCDDATA17_S41C2_MASK                               0x2
#define _LCDDATA17_S42C2_POSN                               0x2
#define _LCDDATA17_S42C2_POSITION                           0x2
#define _LCDDATA17_S42C2_SIZE                               0x1
#define _LCDDATA17_S42C2_LENGTH                             0x1
#define _LCDDATA17_S42C2_MASK                               0x4
#define _LCDDATA17_S43C2_POSN                               0x3
#define _LCDDATA17_S43C2_POSITION                           0x3
#define _LCDDATA17_S43C2_SIZE                               0x1
#define _LCDDATA17_S43C2_LENGTH                             0x1
#define _LCDDATA17_S43C2_MASK                               0x8
#define _LCDDATA17_S44C2_POSN                               0x4
#define _LCDDATA17_S44C2_POSITION                           0x4
#define _LCDDATA17_S44C2_SIZE                               0x1
#define _LCDDATA17_S44C2_LENGTH                             0x1
#define _LCDDATA17_S44C2_MASK                               0x10
#define _LCDDATA17_S45C2_POSN                               0x5
#define _LCDDATA17_S45C2_POSITION                           0x5
#define _LCDDATA17_S45C2_SIZE                               0x1
#define _LCDDATA17_S45C2_LENGTH                             0x1
#define _LCDDATA17_S45C2_MASK                               0x20

// Register: LCDDATA18
#define LCDDATA18 LCDDATA18
extern volatile unsigned char           LCDDATA18           __at(0x1D2A);
#ifndef _LIB_BUILD
asm("LCDDATA18 equ 01D2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C3                  :1;
        unsigned S01C3                  :1;
        unsigned S02C3                  :1;
        unsigned S03C3                  :1;
        unsigned S04C3                  :1;
        unsigned S05C3                  :1;
        unsigned S06C3                  :1;
        unsigned S07C3                  :1;
    };
} LCDDATA18bits_t;
extern volatile LCDDATA18bits_t LCDDATA18bits __at(0x1D2A);
// bitfield macros
#define _LCDDATA18_S00C3_POSN                               0x0
#define _LCDDATA18_S00C3_POSITION                           0x0
#define _LCDDATA18_S00C3_SIZE                               0x1
#define _LCDDATA18_S00C3_LENGTH                             0x1
#define _LCDDATA18_S00C3_MASK                               0x1
#define _LCDDATA18_S01C3_POSN                               0x1
#define _LCDDATA18_S01C3_POSITION                           0x1
#define _LCDDATA18_S01C3_SIZE                               0x1
#define _LCDDATA18_S01C3_LENGTH                             0x1
#define _LCDDATA18_S01C3_MASK                               0x2
#define _LCDDATA18_S02C3_POSN                               0x2
#define _LCDDATA18_S02C3_POSITION                           0x2
#define _LCDDATA18_S02C3_SIZE                               0x1
#define _LCDDATA18_S02C3_LENGTH                             0x1
#define _LCDDATA18_S02C3_MASK                               0x4
#define _LCDDATA18_S03C3_POSN                               0x3
#define _LCDDATA18_S03C3_POSITION                           0x3
#define _LCDDATA18_S03C3_SIZE                               0x1
#define _LCDDATA18_S03C3_LENGTH                             0x1
#define _LCDDATA18_S03C3_MASK                               0x8
#define _LCDDATA18_S04C3_POSN                               0x4
#define _LCDDATA18_S04C3_POSITION                           0x4
#define _LCDDATA18_S04C3_SIZE                               0x1
#define _LCDDATA18_S04C3_LENGTH                             0x1
#define _LCDDATA18_S04C3_MASK                               0x10
#define _LCDDATA18_S05C3_POSN                               0x5
#define _LCDDATA18_S05C3_POSITION                           0x5
#define _LCDDATA18_S05C3_SIZE                               0x1
#define _LCDDATA18_S05C3_LENGTH                             0x1
#define _LCDDATA18_S05C3_MASK                               0x20
#define _LCDDATA18_S06C3_POSN                               0x6
#define _LCDDATA18_S06C3_POSITION                           0x6
#define _LCDDATA18_S06C3_SIZE                               0x1
#define _LCDDATA18_S06C3_LENGTH                             0x1
#define _LCDDATA18_S06C3_MASK                               0x40
#define _LCDDATA18_S07C3_POSN                               0x7
#define _LCDDATA18_S07C3_POSITION                           0x7
#define _LCDDATA18_S07C3_SIZE                               0x1
#define _LCDDATA18_S07C3_LENGTH                             0x1
#define _LCDDATA18_S07C3_MASK                               0x80

// Register: LCDDATA19
#define LCDDATA19 LCDDATA19
extern volatile unsigned char           LCDDATA19           __at(0x1D2B);
#ifndef _LIB_BUILD
asm("LCDDATA19 equ 01D2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C3                  :1;
        unsigned S09C3                  :1;
        unsigned S10C3                  :1;
        unsigned S11C3                  :1;
        unsigned S12C3                  :1;
        unsigned S13C3                  :1;
        unsigned S14C3                  :1;
        unsigned S15C3                  :1;
    };
} LCDDATA19bits_t;
extern volatile LCDDATA19bits_t LCDDATA19bits __at(0x1D2B);
// bitfield macros
#define _LCDDATA19_S08C3_POSN                               0x0
#define _LCDDATA19_S08C3_POSITION                           0x0
#define _LCDDATA19_S08C3_SIZE                               0x1
#define _LCDDATA19_S08C3_LENGTH                             0x1
#define _LCDDATA19_S08C3_MASK                               0x1
#define _LCDDATA19_S09C3_POSN                               0x1
#define _LCDDATA19_S09C3_POSITION                           0x1
#define _LCDDATA19_S09C3_SIZE                               0x1
#define _LCDDATA19_S09C3_LENGTH                             0x1
#define _LCDDATA19_S09C3_MASK                               0x2
#define _LCDDATA19_S10C3_POSN                               0x2
#define _LCDDATA19_S10C3_POSITION                           0x2
#define _LCDDATA19_S10C3_SIZE                               0x1
#define _LCDDATA19_S10C3_LENGTH                             0x1
#define _LCDDATA19_S10C3_MASK                               0x4
#define _LCDDATA19_S11C3_POSN                               0x3
#define _LCDDATA19_S11C3_POSITION                           0x3
#define _LCDDATA19_S11C3_SIZE                               0x1
#define _LCDDATA19_S11C3_LENGTH                             0x1
#define _LCDDATA19_S11C3_MASK                               0x8
#define _LCDDATA19_S12C3_POSN                               0x4
#define _LCDDATA19_S12C3_POSITION                           0x4
#define _LCDDATA19_S12C3_SIZE                               0x1
#define _LCDDATA19_S12C3_LENGTH                             0x1
#define _LCDDATA19_S12C3_MASK                               0x10
#define _LCDDATA19_S13C3_POSN                               0x5
#define _LCDDATA19_S13C3_POSITION                           0x5
#define _LCDDATA19_S13C3_SIZE                               0x1
#define _LCDDATA19_S13C3_LENGTH                             0x1
#define _LCDDATA19_S13C3_MASK                               0x20
#define _LCDDATA19_S14C3_POSN                               0x6
#define _LCDDATA19_S14C3_POSITION                           0x6
#define _LCDDATA19_S14C3_SIZE                               0x1
#define _LCDDATA19_S14C3_LENGTH                             0x1
#define _LCDDATA19_S14C3_MASK                               0x40
#define _LCDDATA19_S15C3_POSN                               0x7
#define _LCDDATA19_S15C3_POSITION                           0x7
#define _LCDDATA19_S15C3_SIZE                               0x1
#define _LCDDATA19_S15C3_LENGTH                             0x1
#define _LCDDATA19_S15C3_MASK                               0x80

// Register: LCDDATA20
#define LCDDATA20 LCDDATA20
extern volatile unsigned char           LCDDATA20           __at(0x1D2C);
#ifndef _LIB_BUILD
asm("LCDDATA20 equ 01D2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C3                  :1;
        unsigned S17C3                  :1;
        unsigned S18C3                  :1;
        unsigned S19C3                  :1;
        unsigned S20C3                  :1;
        unsigned S21C3                  :1;
        unsigned S22C3                  :1;
        unsigned S23C3                  :1;
    };
} LCDDATA20bits_t;
extern volatile LCDDATA20bits_t LCDDATA20bits __at(0x1D2C);
// bitfield macros
#define _LCDDATA20_S16C3_POSN                               0x0
#define _LCDDATA20_S16C3_POSITION                           0x0
#define _LCDDATA20_S16C3_SIZE                               0x1
#define _LCDDATA20_S16C3_LENGTH                             0x1
#define _LCDDATA20_S16C3_MASK                               0x1
#define _LCDDATA20_S17C3_POSN                               0x1
#define _LCDDATA20_S17C3_POSITION                           0x1
#define _LCDDATA20_S17C3_SIZE                               0x1
#define _LCDDATA20_S17C3_LENGTH                             0x1
#define _LCDDATA20_S17C3_MASK                               0x2
#define _LCDDATA20_S18C3_POSN                               0x2
#define _LCDDATA20_S18C3_POSITION                           0x2
#define _LCDDATA20_S18C3_SIZE                               0x1
#define _LCDDATA20_S18C3_LENGTH                             0x1
#define _LCDDATA20_S18C3_MASK                               0x4
#define _LCDDATA20_S19C3_POSN                               0x3
#define _LCDDATA20_S19C3_POSITION                           0x3
#define _LCDDATA20_S19C3_SIZE                               0x1
#define _LCDDATA20_S19C3_LENGTH                             0x1
#define _LCDDATA20_S19C3_MASK                               0x8
#define _LCDDATA20_S20C3_POSN                               0x4
#define _LCDDATA20_S20C3_POSITION                           0x4
#define _LCDDATA20_S20C3_SIZE                               0x1
#define _LCDDATA20_S20C3_LENGTH                             0x1
#define _LCDDATA20_S20C3_MASK                               0x10
#define _LCDDATA20_S21C3_POSN                               0x5
#define _LCDDATA20_S21C3_POSITION                           0x5
#define _LCDDATA20_S21C3_SIZE                               0x1
#define _LCDDATA20_S21C3_LENGTH                             0x1
#define _LCDDATA20_S21C3_MASK                               0x20
#define _LCDDATA20_S22C3_POSN                               0x6
#define _LCDDATA20_S22C3_POSITION                           0x6
#define _LCDDATA20_S22C3_SIZE                               0x1
#define _LCDDATA20_S22C3_LENGTH                             0x1
#define _LCDDATA20_S22C3_MASK                               0x40
#define _LCDDATA20_S23C3_POSN                               0x7
#define _LCDDATA20_S23C3_POSITION                           0x7
#define _LCDDATA20_S23C3_SIZE                               0x1
#define _LCDDATA20_S23C3_LENGTH                             0x1
#define _LCDDATA20_S23C3_MASK                               0x80

// Register: LCDDATA21
#define LCDDATA21 LCDDATA21
extern volatile unsigned char           LCDDATA21           __at(0x1D2D);
#ifndef _LIB_BUILD
asm("LCDDATA21 equ 01D2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C3                  :1;
        unsigned S25C3                  :1;
        unsigned S26C3                  :1;
        unsigned S27C3                  :1;
        unsigned S28C3                  :1;
        unsigned S29C3                  :1;
        unsigned S30C3                  :1;
        unsigned S31C3                  :1;
    };
} LCDDATA21bits_t;
extern volatile LCDDATA21bits_t LCDDATA21bits __at(0x1D2D);
// bitfield macros
#define _LCDDATA21_S24C3_POSN                               0x0
#define _LCDDATA21_S24C3_POSITION                           0x0
#define _LCDDATA21_S24C3_SIZE                               0x1
#define _LCDDATA21_S24C3_LENGTH                             0x1
#define _LCDDATA21_S24C3_MASK                               0x1
#define _LCDDATA21_S25C3_POSN                               0x1
#define _LCDDATA21_S25C3_POSITION                           0x1
#define _LCDDATA21_S25C3_SIZE                               0x1
#define _LCDDATA21_S25C3_LENGTH                             0x1
#define _LCDDATA21_S25C3_MASK                               0x2
#define _LCDDATA21_S26C3_POSN                               0x2
#define _LCDDATA21_S26C3_POSITION                           0x2
#define _LCDDATA21_S26C3_SIZE                               0x1
#define _LCDDATA21_S26C3_LENGTH                             0x1
#define _LCDDATA21_S26C3_MASK                               0x4
#define _LCDDATA21_S27C3_POSN                               0x3
#define _LCDDATA21_S27C3_POSITION                           0x3
#define _LCDDATA21_S27C3_SIZE                               0x1
#define _LCDDATA21_S27C3_LENGTH                             0x1
#define _LCDDATA21_S27C3_MASK                               0x8
#define _LCDDATA21_S28C3_POSN                               0x4
#define _LCDDATA21_S28C3_POSITION                           0x4
#define _LCDDATA21_S28C3_SIZE                               0x1
#define _LCDDATA21_S28C3_LENGTH                             0x1
#define _LCDDATA21_S28C3_MASK                               0x10
#define _LCDDATA21_S29C3_POSN                               0x5
#define _LCDDATA21_S29C3_POSITION                           0x5
#define _LCDDATA21_S29C3_SIZE                               0x1
#define _LCDDATA21_S29C3_LENGTH                             0x1
#define _LCDDATA21_S29C3_MASK                               0x20
#define _LCDDATA21_S30C3_POSN                               0x6
#define _LCDDATA21_S30C3_POSITION                           0x6
#define _LCDDATA21_S30C3_SIZE                               0x1
#define _LCDDATA21_S30C3_LENGTH                             0x1
#define _LCDDATA21_S30C3_MASK                               0x40
#define _LCDDATA21_S31C3_POSN                               0x7
#define _LCDDATA21_S31C3_POSITION                           0x7
#define _LCDDATA21_S31C3_SIZE                               0x1
#define _LCDDATA21_S31C3_LENGTH                             0x1
#define _LCDDATA21_S31C3_MASK                               0x80

// Register: LCDDATA22
#define LCDDATA22 LCDDATA22
extern volatile unsigned char           LCDDATA22           __at(0x1D2E);
#ifndef _LIB_BUILD
asm("LCDDATA22 equ 01D2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C3                  :1;
        unsigned S33C3                  :1;
        unsigned S34C3                  :1;
        unsigned S35C3                  :1;
        unsigned S36C3                  :1;
        unsigned S37C3                  :1;
        unsigned S38C3                  :1;
        unsigned S39C3                  :1;
    };
} LCDDATA22bits_t;
extern volatile LCDDATA22bits_t LCDDATA22bits __at(0x1D2E);
// bitfield macros
#define _LCDDATA22_S32C3_POSN                               0x0
#define _LCDDATA22_S32C3_POSITION                           0x0
#define _LCDDATA22_S32C3_SIZE                               0x1
#define _LCDDATA22_S32C3_LENGTH                             0x1
#define _LCDDATA22_S32C3_MASK                               0x1
#define _LCDDATA22_S33C3_POSN                               0x1
#define _LCDDATA22_S33C3_POSITION                           0x1
#define _LCDDATA22_S33C3_SIZE                               0x1
#define _LCDDATA22_S33C3_LENGTH                             0x1
#define _LCDDATA22_S33C3_MASK                               0x2
#define _LCDDATA22_S34C3_POSN                               0x2
#define _LCDDATA22_S34C3_POSITION                           0x2
#define _LCDDATA22_S34C3_SIZE                               0x1
#define _LCDDATA22_S34C3_LENGTH                             0x1
#define _LCDDATA22_S34C3_MASK                               0x4
#define _LCDDATA22_S35C3_POSN                               0x3
#define _LCDDATA22_S35C3_POSITION                           0x3
#define _LCDDATA22_S35C3_SIZE                               0x1
#define _LCDDATA22_S35C3_LENGTH                             0x1
#define _LCDDATA22_S35C3_MASK                               0x8
#define _LCDDATA22_S36C3_POSN                               0x4
#define _LCDDATA22_S36C3_POSITION                           0x4
#define _LCDDATA22_S36C3_SIZE                               0x1
#define _LCDDATA22_S36C3_LENGTH                             0x1
#define _LCDDATA22_S36C3_MASK                               0x10
#define _LCDDATA22_S37C3_POSN                               0x5
#define _LCDDATA22_S37C3_POSITION                           0x5
#define _LCDDATA22_S37C3_SIZE                               0x1
#define _LCDDATA22_S37C3_LENGTH                             0x1
#define _LCDDATA22_S37C3_MASK                               0x20
#define _LCDDATA22_S38C3_POSN                               0x6
#define _LCDDATA22_S38C3_POSITION                           0x6
#define _LCDDATA22_S38C3_SIZE                               0x1
#define _LCDDATA22_S38C3_LENGTH                             0x1
#define _LCDDATA22_S38C3_MASK                               0x40
#define _LCDDATA22_S39C3_POSN                               0x7
#define _LCDDATA22_S39C3_POSITION                           0x7
#define _LCDDATA22_S39C3_SIZE                               0x1
#define _LCDDATA22_S39C3_LENGTH                             0x1
#define _LCDDATA22_S39C3_MASK                               0x80

// Register: LCDDATA23
#define LCDDATA23 LCDDATA23
extern volatile unsigned char           LCDDATA23           __at(0x1D2F);
#ifndef _LIB_BUILD
asm("LCDDATA23 equ 01D2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C3                  :1;
        unsigned S41C3                  :1;
        unsigned S42C3                  :1;
        unsigned S43C3                  :1;
        unsigned S44C3                  :1;
        unsigned S45C3                  :1;
    };
} LCDDATA23bits_t;
extern volatile LCDDATA23bits_t LCDDATA23bits __at(0x1D2F);
// bitfield macros
#define _LCDDATA23_S40C3_POSN                               0x0
#define _LCDDATA23_S40C3_POSITION                           0x0
#define _LCDDATA23_S40C3_SIZE                               0x1
#define _LCDDATA23_S40C3_LENGTH                             0x1
#define _LCDDATA23_S40C3_MASK                               0x1
#define _LCDDATA23_S41C3_POSN                               0x1
#define _LCDDATA23_S41C3_POSITION                           0x1
#define _LCDDATA23_S41C3_SIZE                               0x1
#define _LCDDATA23_S41C3_LENGTH                             0x1
#define _LCDDATA23_S41C3_MASK                               0x2
#define _LCDDATA23_S42C3_POSN                               0x2
#define _LCDDATA23_S42C3_POSITION                           0x2
#define _LCDDATA23_S42C3_SIZE                               0x1
#define _LCDDATA23_S42C3_LENGTH                             0x1
#define _LCDDATA23_S42C3_MASK                               0x4
#define _LCDDATA23_S43C3_POSN                               0x3
#define _LCDDATA23_S43C3_POSITION                           0x3
#define _LCDDATA23_S43C3_SIZE                               0x1
#define _LCDDATA23_S43C3_LENGTH                             0x1
#define _LCDDATA23_S43C3_MASK                               0x8
#define _LCDDATA23_S44C3_POSN                               0x4
#define _LCDDATA23_S44C3_POSITION                           0x4
#define _LCDDATA23_S44C3_SIZE                               0x1
#define _LCDDATA23_S44C3_LENGTH                             0x1
#define _LCDDATA23_S44C3_MASK                               0x10
#define _LCDDATA23_S45C3_POSN                               0x5
#define _LCDDATA23_S45C3_POSITION                           0x5
#define _LCDDATA23_S45C3_SIZE                               0x1
#define _LCDDATA23_S45C3_LENGTH                             0x1
#define _LCDDATA23_S45C3_MASK                               0x20

// Register: LCDDATA24
#define LCDDATA24 LCDDATA24
extern volatile unsigned char           LCDDATA24           __at(0x1D30);
#ifndef _LIB_BUILD
asm("LCDDATA24 equ 01D30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C4                  :1;
        unsigned S01C4                  :1;
        unsigned S02C4                  :1;
        unsigned S03C4                  :1;
        unsigned S04C4                  :1;
        unsigned S05C4                  :1;
        unsigned S06C4                  :1;
        unsigned S07C4                  :1;
    };
} LCDDATA24bits_t;
extern volatile LCDDATA24bits_t LCDDATA24bits __at(0x1D30);
// bitfield macros
#define _LCDDATA24_S00C4_POSN                               0x0
#define _LCDDATA24_S00C4_POSITION                           0x0
#define _LCDDATA24_S00C4_SIZE                               0x1
#define _LCDDATA24_S00C4_LENGTH                             0x1
#define _LCDDATA24_S00C4_MASK                               0x1
#define _LCDDATA24_S01C4_POSN                               0x1
#define _LCDDATA24_S01C4_POSITION                           0x1
#define _LCDDATA24_S01C4_SIZE                               0x1
#define _LCDDATA24_S01C4_LENGTH                             0x1
#define _LCDDATA24_S01C4_MASK                               0x2
#define _LCDDATA24_S02C4_POSN                               0x2
#define _LCDDATA24_S02C4_POSITION                           0x2
#define _LCDDATA24_S02C4_SIZE                               0x1
#define _LCDDATA24_S02C4_LENGTH                             0x1
#define _LCDDATA24_S02C4_MASK                               0x4
#define _LCDDATA24_S03C4_POSN                               0x3
#define _LCDDATA24_S03C4_POSITION                           0x3
#define _LCDDATA24_S03C4_SIZE                               0x1
#define _LCDDATA24_S03C4_LENGTH                             0x1
#define _LCDDATA24_S03C4_MASK                               0x8
#define _LCDDATA24_S04C4_POSN                               0x4
#define _LCDDATA24_S04C4_POSITION                           0x4
#define _LCDDATA24_S04C4_SIZE                               0x1
#define _LCDDATA24_S04C4_LENGTH                             0x1
#define _LCDDATA24_S04C4_MASK                               0x10
#define _LCDDATA24_S05C4_POSN                               0x5
#define _LCDDATA24_S05C4_POSITION                           0x5
#define _LCDDATA24_S05C4_SIZE                               0x1
#define _LCDDATA24_S05C4_LENGTH                             0x1
#define _LCDDATA24_S05C4_MASK                               0x20
#define _LCDDATA24_S06C4_POSN                               0x6
#define _LCDDATA24_S06C4_POSITION                           0x6
#define _LCDDATA24_S06C4_SIZE                               0x1
#define _LCDDATA24_S06C4_LENGTH                             0x1
#define _LCDDATA24_S06C4_MASK                               0x40
#define _LCDDATA24_S07C4_POSN                               0x7
#define _LCDDATA24_S07C4_POSITION                           0x7
#define _LCDDATA24_S07C4_SIZE                               0x1
#define _LCDDATA24_S07C4_LENGTH                             0x1
#define _LCDDATA24_S07C4_MASK                               0x80

// Register: LCDDATA25
#define LCDDATA25 LCDDATA25
extern volatile unsigned char           LCDDATA25           __at(0x1D31);
#ifndef _LIB_BUILD
asm("LCDDATA25 equ 01D31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C4                  :1;
        unsigned S09C4                  :1;
        unsigned S10C4                  :1;
        unsigned S11C4                  :1;
        unsigned S12C4                  :1;
        unsigned S13C4                  :1;
        unsigned S14C4                  :1;
        unsigned S15C4                  :1;
    };
} LCDDATA25bits_t;
extern volatile LCDDATA25bits_t LCDDATA25bits __at(0x1D31);
// bitfield macros
#define _LCDDATA25_S08C4_POSN                               0x0
#define _LCDDATA25_S08C4_POSITION                           0x0
#define _LCDDATA25_S08C4_SIZE                               0x1
#define _LCDDATA25_S08C4_LENGTH                             0x1
#define _LCDDATA25_S08C4_MASK                               0x1
#define _LCDDATA25_S09C4_POSN                               0x1
#define _LCDDATA25_S09C4_POSITION                           0x1
#define _LCDDATA25_S09C4_SIZE                               0x1
#define _LCDDATA25_S09C4_LENGTH                             0x1
#define _LCDDATA25_S09C4_MASK                               0x2
#define _LCDDATA25_S10C4_POSN                               0x2
#define _LCDDATA25_S10C4_POSITION                           0x2
#define _LCDDATA25_S10C4_SIZE                               0x1
#define _LCDDATA25_S10C4_LENGTH                             0x1
#define _LCDDATA25_S10C4_MASK                               0x4
#define _LCDDATA25_S11C4_POSN                               0x3
#define _LCDDATA25_S11C4_POSITION                           0x3
#define _LCDDATA25_S11C4_SIZE                               0x1
#define _LCDDATA25_S11C4_LENGTH                             0x1
#define _LCDDATA25_S11C4_MASK                               0x8
#define _LCDDATA25_S12C4_POSN                               0x4
#define _LCDDATA25_S12C4_POSITION                           0x4
#define _LCDDATA25_S12C4_SIZE                               0x1
#define _LCDDATA25_S12C4_LENGTH                             0x1
#define _LCDDATA25_S12C4_MASK                               0x10
#define _LCDDATA25_S13C4_POSN                               0x5
#define _LCDDATA25_S13C4_POSITION                           0x5
#define _LCDDATA25_S13C4_SIZE                               0x1
#define _LCDDATA25_S13C4_LENGTH                             0x1
#define _LCDDATA25_S13C4_MASK                               0x20
#define _LCDDATA25_S14C4_POSN                               0x6
#define _LCDDATA25_S14C4_POSITION                           0x6
#define _LCDDATA25_S14C4_SIZE                               0x1
#define _LCDDATA25_S14C4_LENGTH                             0x1
#define _LCDDATA25_S14C4_MASK                               0x40
#define _LCDDATA25_S15C4_POSN                               0x7
#define _LCDDATA25_S15C4_POSITION                           0x7
#define _LCDDATA25_S15C4_SIZE                               0x1
#define _LCDDATA25_S15C4_LENGTH                             0x1
#define _LCDDATA25_S15C4_MASK                               0x80

// Register: LCDDATA26
#define LCDDATA26 LCDDATA26
extern volatile unsigned char           LCDDATA26           __at(0x1D32);
#ifndef _LIB_BUILD
asm("LCDDATA26 equ 01D32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C4                  :1;
        unsigned S17C4                  :1;
        unsigned S18C4                  :1;
        unsigned S19C4                  :1;
        unsigned S20C4                  :1;
        unsigned S21C4                  :1;
        unsigned S22C4                  :1;
        unsigned S23C4                  :1;
    };
} LCDDATA26bits_t;
extern volatile LCDDATA26bits_t LCDDATA26bits __at(0x1D32);
// bitfield macros
#define _LCDDATA26_S16C4_POSN                               0x0
#define _LCDDATA26_S16C4_POSITION                           0x0
#define _LCDDATA26_S16C4_SIZE                               0x1
#define _LCDDATA26_S16C4_LENGTH                             0x1
#define _LCDDATA26_S16C4_MASK                               0x1
#define _LCDDATA26_S17C4_POSN                               0x1
#define _LCDDATA26_S17C4_POSITION                           0x1
#define _LCDDATA26_S17C4_SIZE                               0x1
#define _LCDDATA26_S17C4_LENGTH                             0x1
#define _LCDDATA26_S17C4_MASK                               0x2
#define _LCDDATA26_S18C4_POSN                               0x2
#define _LCDDATA26_S18C4_POSITION                           0x2
#define _LCDDATA26_S18C4_SIZE                               0x1
#define _LCDDATA26_S18C4_LENGTH                             0x1
#define _LCDDATA26_S18C4_MASK                               0x4
#define _LCDDATA26_S19C4_POSN                               0x3
#define _LCDDATA26_S19C4_POSITION                           0x3
#define _LCDDATA26_S19C4_SIZE                               0x1
#define _LCDDATA26_S19C4_LENGTH                             0x1
#define _LCDDATA26_S19C4_MASK                               0x8
#define _LCDDATA26_S20C4_POSN                               0x4
#define _LCDDATA26_S20C4_POSITION                           0x4
#define _LCDDATA26_S20C4_SIZE                               0x1
#define _LCDDATA26_S20C4_LENGTH                             0x1
#define _LCDDATA26_S20C4_MASK                               0x10
#define _LCDDATA26_S21C4_POSN                               0x5
#define _LCDDATA26_S21C4_POSITION                           0x5
#define _LCDDATA26_S21C4_SIZE                               0x1
#define _LCDDATA26_S21C4_LENGTH                             0x1
#define _LCDDATA26_S21C4_MASK                               0x20
#define _LCDDATA26_S22C4_POSN                               0x6
#define _LCDDATA26_S22C4_POSITION                           0x6
#define _LCDDATA26_S22C4_SIZE                               0x1
#define _LCDDATA26_S22C4_LENGTH                             0x1
#define _LCDDATA26_S22C4_MASK                               0x40
#define _LCDDATA26_S23C4_POSN                               0x7
#define _LCDDATA26_S23C4_POSITION                           0x7
#define _LCDDATA26_S23C4_SIZE                               0x1
#define _LCDDATA26_S23C4_LENGTH                             0x1
#define _LCDDATA26_S23C4_MASK                               0x80

// Register: LCDDATA27
#define LCDDATA27 LCDDATA27
extern volatile unsigned char           LCDDATA27           __at(0x1D33);
#ifndef _LIB_BUILD
asm("LCDDATA27 equ 01D33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C4                  :1;
        unsigned S25C4                  :1;
        unsigned S26C4                  :1;
        unsigned S27C4                  :1;
        unsigned S28C4                  :1;
        unsigned S29C4                  :1;
        unsigned S30C4                  :1;
        unsigned S31C4                  :1;
    };
} LCDDATA27bits_t;
extern volatile LCDDATA27bits_t LCDDATA27bits __at(0x1D33);
// bitfield macros
#define _LCDDATA27_S24C4_POSN                               0x0
#define _LCDDATA27_S24C4_POSITION                           0x0
#define _LCDDATA27_S24C4_SIZE                               0x1
#define _LCDDATA27_S24C4_LENGTH                             0x1
#define _LCDDATA27_S24C4_MASK                               0x1
#define _LCDDATA27_S25C4_POSN                               0x1
#define _LCDDATA27_S25C4_POSITION                           0x1
#define _LCDDATA27_S25C4_SIZE                               0x1
#define _LCDDATA27_S25C4_LENGTH                             0x1
#define _LCDDATA27_S25C4_MASK                               0x2
#define _LCDDATA27_S26C4_POSN                               0x2
#define _LCDDATA27_S26C4_POSITION                           0x2
#define _LCDDATA27_S26C4_SIZE                               0x1
#define _LCDDATA27_S26C4_LENGTH                             0x1
#define _LCDDATA27_S26C4_MASK                               0x4
#define _LCDDATA27_S27C4_POSN                               0x3
#define _LCDDATA27_S27C4_POSITION                           0x3
#define _LCDDATA27_S27C4_SIZE                               0x1
#define _LCDDATA27_S27C4_LENGTH                             0x1
#define _LCDDATA27_S27C4_MASK                               0x8
#define _LCDDATA27_S28C4_POSN                               0x4
#define _LCDDATA27_S28C4_POSITION                           0x4
#define _LCDDATA27_S28C4_SIZE                               0x1
#define _LCDDATA27_S28C4_LENGTH                             0x1
#define _LCDDATA27_S28C4_MASK                               0x10
#define _LCDDATA27_S29C4_POSN                               0x5
#define _LCDDATA27_S29C4_POSITION                           0x5
#define _LCDDATA27_S29C4_SIZE                               0x1
#define _LCDDATA27_S29C4_LENGTH                             0x1
#define _LCDDATA27_S29C4_MASK                               0x20
#define _LCDDATA27_S30C4_POSN                               0x6
#define _LCDDATA27_S30C4_POSITION                           0x6
#define _LCDDATA27_S30C4_SIZE                               0x1
#define _LCDDATA27_S30C4_LENGTH                             0x1
#define _LCDDATA27_S30C4_MASK                               0x40
#define _LCDDATA27_S31C4_POSN                               0x7
#define _LCDDATA27_S31C4_POSITION                           0x7
#define _LCDDATA27_S31C4_SIZE                               0x1
#define _LCDDATA27_S31C4_LENGTH                             0x1
#define _LCDDATA27_S31C4_MASK                               0x80

// Register: LCDDATA28
#define LCDDATA28 LCDDATA28
extern volatile unsigned char           LCDDATA28           __at(0x1D34);
#ifndef _LIB_BUILD
asm("LCDDATA28 equ 01D34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C4                  :1;
        unsigned S33C4                  :1;
        unsigned S34C4                  :1;
        unsigned S35C4                  :1;
        unsigned S36C4                  :1;
        unsigned S37C4                  :1;
        unsigned S38C4                  :1;
        unsigned S39C4                  :1;
    };
} LCDDATA28bits_t;
extern volatile LCDDATA28bits_t LCDDATA28bits __at(0x1D34);
// bitfield macros
#define _LCDDATA28_S32C4_POSN                               0x0
#define _LCDDATA28_S32C4_POSITION                           0x0
#define _LCDDATA28_S32C4_SIZE                               0x1
#define _LCDDATA28_S32C4_LENGTH                             0x1
#define _LCDDATA28_S32C4_MASK                               0x1
#define _LCDDATA28_S33C4_POSN                               0x1
#define _LCDDATA28_S33C4_POSITION                           0x1
#define _LCDDATA28_S33C4_SIZE                               0x1
#define _LCDDATA28_S33C4_LENGTH                             0x1
#define _LCDDATA28_S33C4_MASK                               0x2
#define _LCDDATA28_S34C4_POSN                               0x2
#define _LCDDATA28_S34C4_POSITION                           0x2
#define _LCDDATA28_S34C4_SIZE                               0x1
#define _LCDDATA28_S34C4_LENGTH                             0x1
#define _LCDDATA28_S34C4_MASK                               0x4
#define _LCDDATA28_S35C4_POSN                               0x3
#define _LCDDATA28_S35C4_POSITION                           0x3
#define _LCDDATA28_S35C4_SIZE                               0x1
#define _LCDDATA28_S35C4_LENGTH                             0x1
#define _LCDDATA28_S35C4_MASK                               0x8
#define _LCDDATA28_S36C4_POSN                               0x4
#define _LCDDATA28_S36C4_POSITION                           0x4
#define _LCDDATA28_S36C4_SIZE                               0x1
#define _LCDDATA28_S36C4_LENGTH                             0x1
#define _LCDDATA28_S36C4_MASK                               0x10
#define _LCDDATA28_S37C4_POSN                               0x5
#define _LCDDATA28_S37C4_POSITION                           0x5
#define _LCDDATA28_S37C4_SIZE                               0x1
#define _LCDDATA28_S37C4_LENGTH                             0x1
#define _LCDDATA28_S37C4_MASK                               0x20
#define _LCDDATA28_S38C4_POSN                               0x6
#define _LCDDATA28_S38C4_POSITION                           0x6
#define _LCDDATA28_S38C4_SIZE                               0x1
#define _LCDDATA28_S38C4_LENGTH                             0x1
#define _LCDDATA28_S38C4_MASK                               0x40
#define _LCDDATA28_S39C4_POSN                               0x7
#define _LCDDATA28_S39C4_POSITION                           0x7
#define _LCDDATA28_S39C4_SIZE                               0x1
#define _LCDDATA28_S39C4_LENGTH                             0x1
#define _LCDDATA28_S39C4_MASK                               0x80

// Register: LCDDATA29
#define LCDDATA29 LCDDATA29
extern volatile unsigned char           LCDDATA29           __at(0x1D35);
#ifndef _LIB_BUILD
asm("LCDDATA29 equ 01D35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C4                  :1;
        unsigned S41C4                  :1;
        unsigned S42C4                  :1;
        unsigned S43C4                  :1;
        unsigned S44C4                  :1;
        unsigned S45C4                  :1;
    };
} LCDDATA29bits_t;
extern volatile LCDDATA29bits_t LCDDATA29bits __at(0x1D35);
// bitfield macros
#define _LCDDATA29_S40C4_POSN                               0x0
#define _LCDDATA29_S40C4_POSITION                           0x0
#define _LCDDATA29_S40C4_SIZE                               0x1
#define _LCDDATA29_S40C4_LENGTH                             0x1
#define _LCDDATA29_S40C4_MASK                               0x1
#define _LCDDATA29_S41C4_POSN                               0x1
#define _LCDDATA29_S41C4_POSITION                           0x1
#define _LCDDATA29_S41C4_SIZE                               0x1
#define _LCDDATA29_S41C4_LENGTH                             0x1
#define _LCDDATA29_S41C4_MASK                               0x2
#define _LCDDATA29_S42C4_POSN                               0x2
#define _LCDDATA29_S42C4_POSITION                           0x2
#define _LCDDATA29_S42C4_SIZE                               0x1
#define _LCDDATA29_S42C4_LENGTH                             0x1
#define _LCDDATA29_S42C4_MASK                               0x4
#define _LCDDATA29_S43C4_POSN                               0x3
#define _LCDDATA29_S43C4_POSITION                           0x3
#define _LCDDATA29_S43C4_SIZE                               0x1
#define _LCDDATA29_S43C4_LENGTH                             0x1
#define _LCDDATA29_S43C4_MASK                               0x8
#define _LCDDATA29_S44C4_POSN                               0x4
#define _LCDDATA29_S44C4_POSITION                           0x4
#define _LCDDATA29_S44C4_SIZE                               0x1
#define _LCDDATA29_S44C4_LENGTH                             0x1
#define _LCDDATA29_S44C4_MASK                               0x10
#define _LCDDATA29_S45C4_POSN                               0x5
#define _LCDDATA29_S45C4_POSITION                           0x5
#define _LCDDATA29_S45C4_SIZE                               0x1
#define _LCDDATA29_S45C4_LENGTH                             0x1
#define _LCDDATA29_S45C4_MASK                               0x20

// Register: LCDDATA30
#define LCDDATA30 LCDDATA30
extern volatile unsigned char           LCDDATA30           __at(0x1D36);
#ifndef _LIB_BUILD
asm("LCDDATA30 equ 01D36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C5                  :1;
        unsigned S01C5                  :1;
        unsigned S02C5                  :1;
        unsigned S03C5                  :1;
        unsigned S04C5                  :1;
        unsigned S05C5                  :1;
        unsigned S06C5                  :1;
        unsigned S07C5                  :1;
    };
} LCDDATA30bits_t;
extern volatile LCDDATA30bits_t LCDDATA30bits __at(0x1D36);
// bitfield macros
#define _LCDDATA30_S00C5_POSN                               0x0
#define _LCDDATA30_S00C5_POSITION                           0x0
#define _LCDDATA30_S00C5_SIZE                               0x1
#define _LCDDATA30_S00C5_LENGTH                             0x1
#define _LCDDATA30_S00C5_MASK                               0x1
#define _LCDDATA30_S01C5_POSN                               0x1
#define _LCDDATA30_S01C5_POSITION                           0x1
#define _LCDDATA30_S01C5_SIZE                               0x1
#define _LCDDATA30_S01C5_LENGTH                             0x1
#define _LCDDATA30_S01C5_MASK                               0x2
#define _LCDDATA30_S02C5_POSN                               0x2
#define _LCDDATA30_S02C5_POSITION                           0x2
#define _LCDDATA30_S02C5_SIZE                               0x1
#define _LCDDATA30_S02C5_LENGTH                             0x1
#define _LCDDATA30_S02C5_MASK                               0x4
#define _LCDDATA30_S03C5_POSN                               0x3
#define _LCDDATA30_S03C5_POSITION                           0x3
#define _LCDDATA30_S03C5_SIZE                               0x1
#define _LCDDATA30_S03C5_LENGTH                             0x1
#define _LCDDATA30_S03C5_MASK                               0x8
#define _LCDDATA30_S04C5_POSN                               0x4
#define _LCDDATA30_S04C5_POSITION                           0x4
#define _LCDDATA30_S04C5_SIZE                               0x1
#define _LCDDATA30_S04C5_LENGTH                             0x1
#define _LCDDATA30_S04C5_MASK                               0x10
#define _LCDDATA30_S05C5_POSN                               0x5
#define _LCDDATA30_S05C5_POSITION                           0x5
#define _LCDDATA30_S05C5_SIZE                               0x1
#define _LCDDATA30_S05C5_LENGTH                             0x1
#define _LCDDATA30_S05C5_MASK                               0x20
#define _LCDDATA30_S06C5_POSN                               0x6
#define _LCDDATA30_S06C5_POSITION                           0x6
#define _LCDDATA30_S06C5_SIZE                               0x1
#define _LCDDATA30_S06C5_LENGTH                             0x1
#define _LCDDATA30_S06C5_MASK                               0x40
#define _LCDDATA30_S07C5_POSN                               0x7
#define _LCDDATA30_S07C5_POSITION                           0x7
#define _LCDDATA30_S07C5_SIZE                               0x1
#define _LCDDATA30_S07C5_LENGTH                             0x1
#define _LCDDATA30_S07C5_MASK                               0x80

// Register: LCDDATA31
#define LCDDATA31 LCDDATA31
extern volatile unsigned char           LCDDATA31           __at(0x1D37);
#ifndef _LIB_BUILD
asm("LCDDATA31 equ 01D37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C5                  :1;
        unsigned S09C5                  :1;
        unsigned S10C5                  :1;
        unsigned S11C5                  :1;
        unsigned S12C5                  :1;
        unsigned S13C5                  :1;
        unsigned S14C5                  :1;
        unsigned S15C5                  :1;
    };
} LCDDATA31bits_t;
extern volatile LCDDATA31bits_t LCDDATA31bits __at(0x1D37);
// bitfield macros
#define _LCDDATA31_S08C5_POSN                               0x0
#define _LCDDATA31_S08C5_POSITION                           0x0
#define _LCDDATA31_S08C5_SIZE                               0x1
#define _LCDDATA31_S08C5_LENGTH                             0x1
#define _LCDDATA31_S08C5_MASK                               0x1
#define _LCDDATA31_S09C5_POSN                               0x1
#define _LCDDATA31_S09C5_POSITION                           0x1
#define _LCDDATA31_S09C5_SIZE                               0x1
#define _LCDDATA31_S09C5_LENGTH                             0x1
#define _LCDDATA31_S09C5_MASK                               0x2
#define _LCDDATA31_S10C5_POSN                               0x2
#define _LCDDATA31_S10C5_POSITION                           0x2
#define _LCDDATA31_S10C5_SIZE                               0x1
#define _LCDDATA31_S10C5_LENGTH                             0x1
#define _LCDDATA31_S10C5_MASK                               0x4
#define _LCDDATA31_S11C5_POSN                               0x3
#define _LCDDATA31_S11C5_POSITION                           0x3
#define _LCDDATA31_S11C5_SIZE                               0x1
#define _LCDDATA31_S11C5_LENGTH                             0x1
#define _LCDDATA31_S11C5_MASK                               0x8
#define _LCDDATA31_S12C5_POSN                               0x4
#define _LCDDATA31_S12C5_POSITION                           0x4
#define _LCDDATA31_S12C5_SIZE                               0x1
#define _LCDDATA31_S12C5_LENGTH                             0x1
#define _LCDDATA31_S12C5_MASK                               0x10
#define _LCDDATA31_S13C5_POSN                               0x5
#define _LCDDATA31_S13C5_POSITION                           0x5
#define _LCDDATA31_S13C5_SIZE                               0x1
#define _LCDDATA31_S13C5_LENGTH                             0x1
#define _LCDDATA31_S13C5_MASK                               0x20
#define _LCDDATA31_S14C5_POSN                               0x6
#define _LCDDATA31_S14C5_POSITION                           0x6
#define _LCDDATA31_S14C5_SIZE                               0x1
#define _LCDDATA31_S14C5_LENGTH                             0x1
#define _LCDDATA31_S14C5_MASK                               0x40
#define _LCDDATA31_S15C5_POSN                               0x7
#define _LCDDATA31_S15C5_POSITION                           0x7
#define _LCDDATA31_S15C5_SIZE                               0x1
#define _LCDDATA31_S15C5_LENGTH                             0x1
#define _LCDDATA31_S15C5_MASK                               0x80

// Register: LCDDATA32
#define LCDDATA32 LCDDATA32
extern volatile unsigned char           LCDDATA32           __at(0x1D38);
#ifndef _LIB_BUILD
asm("LCDDATA32 equ 01D38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C5                  :1;
        unsigned S17C5                  :1;
        unsigned S18C5                  :1;
        unsigned S19C5                  :1;
        unsigned S20C5                  :1;
        unsigned S21C5                  :1;
        unsigned S22C5                  :1;
        unsigned S23C5                  :1;
    };
} LCDDATA32bits_t;
extern volatile LCDDATA32bits_t LCDDATA32bits __at(0x1D38);
// bitfield macros
#define _LCDDATA32_S16C5_POSN                               0x0
#define _LCDDATA32_S16C5_POSITION                           0x0
#define _LCDDATA32_S16C5_SIZE                               0x1
#define _LCDDATA32_S16C5_LENGTH                             0x1
#define _LCDDATA32_S16C5_MASK                               0x1
#define _LCDDATA32_S17C5_POSN                               0x1
#define _LCDDATA32_S17C5_POSITION                           0x1
#define _LCDDATA32_S17C5_SIZE                               0x1
#define _LCDDATA32_S17C5_LENGTH                             0x1
#define _LCDDATA32_S17C5_MASK                               0x2
#define _LCDDATA32_S18C5_POSN                               0x2
#define _LCDDATA32_S18C5_POSITION                           0x2
#define _LCDDATA32_S18C5_SIZE                               0x1
#define _LCDDATA32_S18C5_LENGTH                             0x1
#define _LCDDATA32_S18C5_MASK                               0x4
#define _LCDDATA32_S19C5_POSN                               0x3
#define _LCDDATA32_S19C5_POSITION                           0x3
#define _LCDDATA32_S19C5_SIZE                               0x1
#define _LCDDATA32_S19C5_LENGTH                             0x1
#define _LCDDATA32_S19C5_MASK                               0x8
#define _LCDDATA32_S20C5_POSN                               0x4
#define _LCDDATA32_S20C5_POSITION                           0x4
#define _LCDDATA32_S20C5_SIZE                               0x1
#define _LCDDATA32_S20C5_LENGTH                             0x1
#define _LCDDATA32_S20C5_MASK                               0x10
#define _LCDDATA32_S21C5_POSN                               0x5
#define _LCDDATA32_S21C5_POSITION                           0x5
#define _LCDDATA32_S21C5_SIZE                               0x1
#define _LCDDATA32_S21C5_LENGTH                             0x1
#define _LCDDATA32_S21C5_MASK                               0x20
#define _LCDDATA32_S22C5_POSN                               0x6
#define _LCDDATA32_S22C5_POSITION                           0x6
#define _LCDDATA32_S22C5_SIZE                               0x1
#define _LCDDATA32_S22C5_LENGTH                             0x1
#define _LCDDATA32_S22C5_MASK                               0x40
#define _LCDDATA32_S23C5_POSN                               0x7
#define _LCDDATA32_S23C5_POSITION                           0x7
#define _LCDDATA32_S23C5_SIZE                               0x1
#define _LCDDATA32_S23C5_LENGTH                             0x1
#define _LCDDATA32_S23C5_MASK                               0x80

// Register: LCDDATA33
#define LCDDATA33 LCDDATA33
extern volatile unsigned char           LCDDATA33           __at(0x1D39);
#ifndef _LIB_BUILD
asm("LCDDATA33 equ 01D39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C5                  :1;
        unsigned S25C5                  :1;
        unsigned S26C5                  :1;
        unsigned S27C5                  :1;
        unsigned S28C5                  :1;
        unsigned S29C5                  :1;
        unsigned S30C5                  :1;
        unsigned S31C5                  :1;
    };
} LCDDATA33bits_t;
extern volatile LCDDATA33bits_t LCDDATA33bits __at(0x1D39);
// bitfield macros
#define _LCDDATA33_S24C5_POSN                               0x0
#define _LCDDATA33_S24C5_POSITION                           0x0
#define _LCDDATA33_S24C5_SIZE                               0x1
#define _LCDDATA33_S24C5_LENGTH                             0x1
#define _LCDDATA33_S24C5_MASK                               0x1
#define _LCDDATA33_S25C5_POSN                               0x1
#define _LCDDATA33_S25C5_POSITION                           0x1
#define _LCDDATA33_S25C5_SIZE                               0x1
#define _LCDDATA33_S25C5_LENGTH                             0x1
#define _LCDDATA33_S25C5_MASK                               0x2
#define _LCDDATA33_S26C5_POSN                               0x2
#define _LCDDATA33_S26C5_POSITION                           0x2
#define _LCDDATA33_S26C5_SIZE                               0x1
#define _LCDDATA33_S26C5_LENGTH                             0x1
#define _LCDDATA33_S26C5_MASK                               0x4
#define _LCDDATA33_S27C5_POSN                               0x3
#define _LCDDATA33_S27C5_POSITION                           0x3
#define _LCDDATA33_S27C5_SIZE                               0x1
#define _LCDDATA33_S27C5_LENGTH                             0x1
#define _LCDDATA33_S27C5_MASK                               0x8
#define _LCDDATA33_S28C5_POSN                               0x4
#define _LCDDATA33_S28C5_POSITION                           0x4
#define _LCDDATA33_S28C5_SIZE                               0x1
#define _LCDDATA33_S28C5_LENGTH                             0x1
#define _LCDDATA33_S28C5_MASK                               0x10
#define _LCDDATA33_S29C5_POSN                               0x5
#define _LCDDATA33_S29C5_POSITION                           0x5
#define _LCDDATA33_S29C5_SIZE                               0x1
#define _LCDDATA33_S29C5_LENGTH                             0x1
#define _LCDDATA33_S29C5_MASK                               0x20
#define _LCDDATA33_S30C5_POSN                               0x6
#define _LCDDATA33_S30C5_POSITION                           0x6
#define _LCDDATA33_S30C5_SIZE                               0x1
#define _LCDDATA33_S30C5_LENGTH                             0x1
#define _LCDDATA33_S30C5_MASK                               0x40
#define _LCDDATA33_S31C5_POSN                               0x7
#define _LCDDATA33_S31C5_POSITION                           0x7
#define _LCDDATA33_S31C5_SIZE                               0x1
#define _LCDDATA33_S31C5_LENGTH                             0x1
#define _LCDDATA33_S31C5_MASK                               0x80

// Register: LCDDATA34
#define LCDDATA34 LCDDATA34
extern volatile unsigned char           LCDDATA34           __at(0x1D3A);
#ifndef _LIB_BUILD
asm("LCDDATA34 equ 01D3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C5                  :1;
        unsigned S33C5                  :1;
        unsigned S34C5                  :1;
        unsigned S35C5                  :1;
        unsigned S36C5                  :1;
        unsigned S37C5                  :1;
        unsigned S38C5                  :1;
        unsigned S39C5                  :1;
    };
} LCDDATA34bits_t;
extern volatile LCDDATA34bits_t LCDDATA34bits __at(0x1D3A);
// bitfield macros
#define _LCDDATA34_S32C5_POSN                               0x0
#define _LCDDATA34_S32C5_POSITION                           0x0
#define _LCDDATA34_S32C5_SIZE                               0x1
#define _LCDDATA34_S32C5_LENGTH                             0x1
#define _LCDDATA34_S32C5_MASK                               0x1
#define _LCDDATA34_S33C5_POSN                               0x1
#define _LCDDATA34_S33C5_POSITION                           0x1
#define _LCDDATA34_S33C5_SIZE                               0x1
#define _LCDDATA34_S33C5_LENGTH                             0x1
#define _LCDDATA34_S33C5_MASK                               0x2
#define _LCDDATA34_S34C5_POSN                               0x2
#define _LCDDATA34_S34C5_POSITION                           0x2
#define _LCDDATA34_S34C5_SIZE                               0x1
#define _LCDDATA34_S34C5_LENGTH                             0x1
#define _LCDDATA34_S34C5_MASK                               0x4
#define _LCDDATA34_S35C5_POSN                               0x3
#define _LCDDATA34_S35C5_POSITION                           0x3
#define _LCDDATA34_S35C5_SIZE                               0x1
#define _LCDDATA34_S35C5_LENGTH                             0x1
#define _LCDDATA34_S35C5_MASK                               0x8
#define _LCDDATA34_S36C5_POSN                               0x4
#define _LCDDATA34_S36C5_POSITION                           0x4
#define _LCDDATA34_S36C5_SIZE                               0x1
#define _LCDDATA34_S36C5_LENGTH                             0x1
#define _LCDDATA34_S36C5_MASK                               0x10
#define _LCDDATA34_S37C5_POSN                               0x5
#define _LCDDATA34_S37C5_POSITION                           0x5
#define _LCDDATA34_S37C5_SIZE                               0x1
#define _LCDDATA34_S37C5_LENGTH                             0x1
#define _LCDDATA34_S37C5_MASK                               0x20
#define _LCDDATA34_S38C5_POSN                               0x6
#define _LCDDATA34_S38C5_POSITION                           0x6
#define _LCDDATA34_S38C5_SIZE                               0x1
#define _LCDDATA34_S38C5_LENGTH                             0x1
#define _LCDDATA34_S38C5_MASK                               0x40
#define _LCDDATA34_S39C5_POSN                               0x7
#define _LCDDATA34_S39C5_POSITION                           0x7
#define _LCDDATA34_S39C5_SIZE                               0x1
#define _LCDDATA34_S39C5_LENGTH                             0x1
#define _LCDDATA34_S39C5_MASK                               0x80

// Register: LCDDATA35
#define LCDDATA35 LCDDATA35
extern volatile unsigned char           LCDDATA35           __at(0x1D3B);
#ifndef _LIB_BUILD
asm("LCDDATA35 equ 01D3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C5                  :1;
        unsigned S41C5                  :1;
        unsigned S42C5                  :1;
        unsigned S43C5                  :1;
        unsigned S44C5                  :1;
        unsigned S45C5                  :1;
    };
} LCDDATA35bits_t;
extern volatile LCDDATA35bits_t LCDDATA35bits __at(0x1D3B);
// bitfield macros
#define _LCDDATA35_S40C5_POSN                               0x0
#define _LCDDATA35_S40C5_POSITION                           0x0
#define _LCDDATA35_S40C5_SIZE                               0x1
#define _LCDDATA35_S40C5_LENGTH                             0x1
#define _LCDDATA35_S40C5_MASK                               0x1
#define _LCDDATA35_S41C5_POSN                               0x1
#define _LCDDATA35_S41C5_POSITION                           0x1
#define _LCDDATA35_S41C5_SIZE                               0x1
#define _LCDDATA35_S41C5_LENGTH                             0x1
#define _LCDDATA35_S41C5_MASK                               0x2
#define _LCDDATA35_S42C5_POSN                               0x2
#define _LCDDATA35_S42C5_POSITION                           0x2
#define _LCDDATA35_S42C5_SIZE                               0x1
#define _LCDDATA35_S42C5_LENGTH                             0x1
#define _LCDDATA35_S42C5_MASK                               0x4
#define _LCDDATA35_S43C5_POSN                               0x3
#define _LCDDATA35_S43C5_POSITION                           0x3
#define _LCDDATA35_S43C5_SIZE                               0x1
#define _LCDDATA35_S43C5_LENGTH                             0x1
#define _LCDDATA35_S43C5_MASK                               0x8
#define _LCDDATA35_S44C5_POSN                               0x4
#define _LCDDATA35_S44C5_POSITION                           0x4
#define _LCDDATA35_S44C5_SIZE                               0x1
#define _LCDDATA35_S44C5_LENGTH                             0x1
#define _LCDDATA35_S44C5_MASK                               0x10
#define _LCDDATA35_S45C5_POSN                               0x5
#define _LCDDATA35_S45C5_POSITION                           0x5
#define _LCDDATA35_S45C5_SIZE                               0x1
#define _LCDDATA35_S45C5_LENGTH                             0x1
#define _LCDDATA35_S45C5_MASK                               0x20

// Register: LCDDATA36
#define LCDDATA36 LCDDATA36
extern volatile unsigned char           LCDDATA36           __at(0x1D3C);
#ifndef _LIB_BUILD
asm("LCDDATA36 equ 01D3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C6                  :1;
        unsigned S01C6                  :1;
        unsigned S02C6                  :1;
        unsigned S03C6                  :1;
        unsigned S04C6                  :1;
        unsigned S05C6                  :1;
        unsigned S06C6                  :1;
        unsigned S07C6                  :1;
    };
} LCDDATA36bits_t;
extern volatile LCDDATA36bits_t LCDDATA36bits __at(0x1D3C);
// bitfield macros
#define _LCDDATA36_S00C6_POSN                               0x0
#define _LCDDATA36_S00C6_POSITION                           0x0
#define _LCDDATA36_S00C6_SIZE                               0x1
#define _LCDDATA36_S00C6_LENGTH                             0x1
#define _LCDDATA36_S00C6_MASK                               0x1
#define _LCDDATA36_S01C6_POSN                               0x1
#define _LCDDATA36_S01C6_POSITION                           0x1
#define _LCDDATA36_S01C6_SIZE                               0x1
#define _LCDDATA36_S01C6_LENGTH                             0x1
#define _LCDDATA36_S01C6_MASK                               0x2
#define _LCDDATA36_S02C6_POSN                               0x2
#define _LCDDATA36_S02C6_POSITION                           0x2
#define _LCDDATA36_S02C6_SIZE                               0x1
#define _LCDDATA36_S02C6_LENGTH                             0x1
#define _LCDDATA36_S02C6_MASK                               0x4
#define _LCDDATA36_S03C6_POSN                               0x3
#define _LCDDATA36_S03C6_POSITION                           0x3
#define _LCDDATA36_S03C6_SIZE                               0x1
#define _LCDDATA36_S03C6_LENGTH                             0x1
#define _LCDDATA36_S03C6_MASK                               0x8
#define _LCDDATA36_S04C6_POSN                               0x4
#define _LCDDATA36_S04C6_POSITION                           0x4
#define _LCDDATA36_S04C6_SIZE                               0x1
#define _LCDDATA36_S04C6_LENGTH                             0x1
#define _LCDDATA36_S04C6_MASK                               0x10
#define _LCDDATA36_S05C6_POSN                               0x5
#define _LCDDATA36_S05C6_POSITION                           0x5
#define _LCDDATA36_S05C6_SIZE                               0x1
#define _LCDDATA36_S05C6_LENGTH                             0x1
#define _LCDDATA36_S05C6_MASK                               0x20
#define _LCDDATA36_S06C6_POSN                               0x6
#define _LCDDATA36_S06C6_POSITION                           0x6
#define _LCDDATA36_S06C6_SIZE                               0x1
#define _LCDDATA36_S06C6_LENGTH                             0x1
#define _LCDDATA36_S06C6_MASK                               0x40
#define _LCDDATA36_S07C6_POSN                               0x7
#define _LCDDATA36_S07C6_POSITION                           0x7
#define _LCDDATA36_S07C6_SIZE                               0x1
#define _LCDDATA36_S07C6_LENGTH                             0x1
#define _LCDDATA36_S07C6_MASK                               0x80

// Register: LCDDATA37
#define LCDDATA37 LCDDATA37
extern volatile unsigned char           LCDDATA37           __at(0x1D3D);
#ifndef _LIB_BUILD
asm("LCDDATA37 equ 01D3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C6                  :1;
        unsigned S09C6                  :1;
        unsigned S10C6                  :1;
        unsigned S11C6                  :1;
        unsigned S12C6                  :1;
        unsigned S13C6                  :1;
        unsigned S14C6                  :1;
        unsigned S15C6                  :1;
    };
} LCDDATA37bits_t;
extern volatile LCDDATA37bits_t LCDDATA37bits __at(0x1D3D);
// bitfield macros
#define _LCDDATA37_S08C6_POSN                               0x0
#define _LCDDATA37_S08C6_POSITION                           0x0
#define _LCDDATA37_S08C6_SIZE                               0x1
#define _LCDDATA37_S08C6_LENGTH                             0x1
#define _LCDDATA37_S08C6_MASK                               0x1
#define _LCDDATA37_S09C6_POSN                               0x1
#define _LCDDATA37_S09C6_POSITION                           0x1
#define _LCDDATA37_S09C6_SIZE                               0x1
#define _LCDDATA37_S09C6_LENGTH                             0x1
#define _LCDDATA37_S09C6_MASK                               0x2
#define _LCDDATA37_S10C6_POSN                               0x2
#define _LCDDATA37_S10C6_POSITION                           0x2
#define _LCDDATA37_S10C6_SIZE                               0x1
#define _LCDDATA37_S10C6_LENGTH                             0x1
#define _LCDDATA37_S10C6_MASK                               0x4
#define _LCDDATA37_S11C6_POSN                               0x3
#define _LCDDATA37_S11C6_POSITION                           0x3
#define _LCDDATA37_S11C6_SIZE                               0x1
#define _LCDDATA37_S11C6_LENGTH                             0x1
#define _LCDDATA37_S11C6_MASK                               0x8
#define _LCDDATA37_S12C6_POSN                               0x4
#define _LCDDATA37_S12C6_POSITION                           0x4
#define _LCDDATA37_S12C6_SIZE                               0x1
#define _LCDDATA37_S12C6_LENGTH                             0x1
#define _LCDDATA37_S12C6_MASK                               0x10
#define _LCDDATA37_S13C6_POSN                               0x5
#define _LCDDATA37_S13C6_POSITION                           0x5
#define _LCDDATA37_S13C6_SIZE                               0x1
#define _LCDDATA37_S13C6_LENGTH                             0x1
#define _LCDDATA37_S13C6_MASK                               0x20
#define _LCDDATA37_S14C6_POSN                               0x6
#define _LCDDATA37_S14C6_POSITION                           0x6
#define _LCDDATA37_S14C6_SIZE                               0x1
#define _LCDDATA37_S14C6_LENGTH                             0x1
#define _LCDDATA37_S14C6_MASK                               0x40
#define _LCDDATA37_S15C6_POSN                               0x7
#define _LCDDATA37_S15C6_POSITION                           0x7
#define _LCDDATA37_S15C6_SIZE                               0x1
#define _LCDDATA37_S15C6_LENGTH                             0x1
#define _LCDDATA37_S15C6_MASK                               0x80

// Register: LCDDATA38
#define LCDDATA38 LCDDATA38
extern volatile unsigned char           LCDDATA38           __at(0x1D3E);
#ifndef _LIB_BUILD
asm("LCDDATA38 equ 01D3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C6                  :1;
        unsigned S17C6                  :1;
        unsigned S18C6                  :1;
        unsigned S19C6                  :1;
        unsigned S20C6                  :1;
        unsigned S21C6                  :1;
        unsigned S22C6                  :1;
        unsigned S23C6                  :1;
    };
} LCDDATA38bits_t;
extern volatile LCDDATA38bits_t LCDDATA38bits __at(0x1D3E);
// bitfield macros
#define _LCDDATA38_S16C6_POSN                               0x0
#define _LCDDATA38_S16C6_POSITION                           0x0
#define _LCDDATA38_S16C6_SIZE                               0x1
#define _LCDDATA38_S16C6_LENGTH                             0x1
#define _LCDDATA38_S16C6_MASK                               0x1
#define _LCDDATA38_S17C6_POSN                               0x1
#define _LCDDATA38_S17C6_POSITION                           0x1
#define _LCDDATA38_S17C6_SIZE                               0x1
#define _LCDDATA38_S17C6_LENGTH                             0x1
#define _LCDDATA38_S17C6_MASK                               0x2
#define _LCDDATA38_S18C6_POSN                               0x2
#define _LCDDATA38_S18C6_POSITION                           0x2
#define _LCDDATA38_S18C6_SIZE                               0x1
#define _LCDDATA38_S18C6_LENGTH                             0x1
#define _LCDDATA38_S18C6_MASK                               0x4
#define _LCDDATA38_S19C6_POSN                               0x3
#define _LCDDATA38_S19C6_POSITION                           0x3
#define _LCDDATA38_S19C6_SIZE                               0x1
#define _LCDDATA38_S19C6_LENGTH                             0x1
#define _LCDDATA38_S19C6_MASK                               0x8
#define _LCDDATA38_S20C6_POSN                               0x4
#define _LCDDATA38_S20C6_POSITION                           0x4
#define _LCDDATA38_S20C6_SIZE                               0x1
#define _LCDDATA38_S20C6_LENGTH                             0x1
#define _LCDDATA38_S20C6_MASK                               0x10
#define _LCDDATA38_S21C6_POSN                               0x5
#define _LCDDATA38_S21C6_POSITION                           0x5
#define _LCDDATA38_S21C6_SIZE                               0x1
#define _LCDDATA38_S21C6_LENGTH                             0x1
#define _LCDDATA38_S21C6_MASK                               0x20
#define _LCDDATA38_S22C6_POSN                               0x6
#define _LCDDATA38_S22C6_POSITION                           0x6
#define _LCDDATA38_S22C6_SIZE                               0x1
#define _LCDDATA38_S22C6_LENGTH                             0x1
#define _LCDDATA38_S22C6_MASK                               0x40
#define _LCDDATA38_S23C6_POSN                               0x7
#define _LCDDATA38_S23C6_POSITION                           0x7
#define _LCDDATA38_S23C6_SIZE                               0x1
#define _LCDDATA38_S23C6_LENGTH                             0x1
#define _LCDDATA38_S23C6_MASK                               0x80

// Register: LCDDATA39
#define LCDDATA39 LCDDATA39
extern volatile unsigned char           LCDDATA39           __at(0x1D3F);
#ifndef _LIB_BUILD
asm("LCDDATA39 equ 01D3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C6                  :1;
        unsigned S25C6                  :1;
        unsigned S26C6                  :1;
        unsigned S27C6                  :1;
        unsigned S28C6                  :1;
        unsigned S29C6                  :1;
        unsigned S30C6                  :1;
        unsigned S31C6                  :1;
    };
} LCDDATA39bits_t;
extern volatile LCDDATA39bits_t LCDDATA39bits __at(0x1D3F);
// bitfield macros
#define _LCDDATA39_S24C6_POSN                               0x0
#define _LCDDATA39_S24C6_POSITION                           0x0
#define _LCDDATA39_S24C6_SIZE                               0x1
#define _LCDDATA39_S24C6_LENGTH                             0x1
#define _LCDDATA39_S24C6_MASK                               0x1
#define _LCDDATA39_S25C6_POSN                               0x1
#define _LCDDATA39_S25C6_POSITION                           0x1
#define _LCDDATA39_S25C6_SIZE                               0x1
#define _LCDDATA39_S25C6_LENGTH                             0x1
#define _LCDDATA39_S25C6_MASK                               0x2
#define _LCDDATA39_S26C6_POSN                               0x2
#define _LCDDATA39_S26C6_POSITION                           0x2
#define _LCDDATA39_S26C6_SIZE                               0x1
#define _LCDDATA39_S26C6_LENGTH                             0x1
#define _LCDDATA39_S26C6_MASK                               0x4
#define _LCDDATA39_S27C6_POSN                               0x3
#define _LCDDATA39_S27C6_POSITION                           0x3
#define _LCDDATA39_S27C6_SIZE                               0x1
#define _LCDDATA39_S27C6_LENGTH                             0x1
#define _LCDDATA39_S27C6_MASK                               0x8
#define _LCDDATA39_S28C6_POSN                               0x4
#define _LCDDATA39_S28C6_POSITION                           0x4
#define _LCDDATA39_S28C6_SIZE                               0x1
#define _LCDDATA39_S28C6_LENGTH                             0x1
#define _LCDDATA39_S28C6_MASK                               0x10
#define _LCDDATA39_S29C6_POSN                               0x5
#define _LCDDATA39_S29C6_POSITION                           0x5
#define _LCDDATA39_S29C6_SIZE                               0x1
#define _LCDDATA39_S29C6_LENGTH                             0x1
#define _LCDDATA39_S29C6_MASK                               0x20
#define _LCDDATA39_S30C6_POSN                               0x6
#define _LCDDATA39_S30C6_POSITION                           0x6
#define _LCDDATA39_S30C6_SIZE                               0x1
#define _LCDDATA39_S30C6_LENGTH                             0x1
#define _LCDDATA39_S30C6_MASK                               0x40
#define _LCDDATA39_S31C6_POSN                               0x7
#define _LCDDATA39_S31C6_POSITION                           0x7
#define _LCDDATA39_S31C6_SIZE                               0x1
#define _LCDDATA39_S31C6_LENGTH                             0x1
#define _LCDDATA39_S31C6_MASK                               0x80

// Register: LCDDATA40
#define LCDDATA40 LCDDATA40
extern volatile unsigned char           LCDDATA40           __at(0x1D40);
#ifndef _LIB_BUILD
asm("LCDDATA40 equ 01D40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C6                  :1;
        unsigned S33C6                  :1;
        unsigned S34C6                  :1;
        unsigned S35C6                  :1;
        unsigned S36C6                  :1;
        unsigned S37C6                  :1;
        unsigned S38C6                  :1;
        unsigned S39C6                  :1;
    };
} LCDDATA40bits_t;
extern volatile LCDDATA40bits_t LCDDATA40bits __at(0x1D40);
// bitfield macros
#define _LCDDATA40_S32C6_POSN                               0x0
#define _LCDDATA40_S32C6_POSITION                           0x0
#define _LCDDATA40_S32C6_SIZE                               0x1
#define _LCDDATA40_S32C6_LENGTH                             0x1
#define _LCDDATA40_S32C6_MASK                               0x1
#define _LCDDATA40_S33C6_POSN                               0x1
#define _LCDDATA40_S33C6_POSITION                           0x1
#define _LCDDATA40_S33C6_SIZE                               0x1
#define _LCDDATA40_S33C6_LENGTH                             0x1
#define _LCDDATA40_S33C6_MASK                               0x2
#define _LCDDATA40_S34C6_POSN                               0x2
#define _LCDDATA40_S34C6_POSITION                           0x2
#define _LCDDATA40_S34C6_SIZE                               0x1
#define _LCDDATA40_S34C6_LENGTH                             0x1
#define _LCDDATA40_S34C6_MASK                               0x4
#define _LCDDATA40_S35C6_POSN                               0x3
#define _LCDDATA40_S35C6_POSITION                           0x3
#define _LCDDATA40_S35C6_SIZE                               0x1
#define _LCDDATA40_S35C6_LENGTH                             0x1
#define _LCDDATA40_S35C6_MASK                               0x8
#define _LCDDATA40_S36C6_POSN                               0x4
#define _LCDDATA40_S36C6_POSITION                           0x4
#define _LCDDATA40_S36C6_SIZE                               0x1
#define _LCDDATA40_S36C6_LENGTH                             0x1
#define _LCDDATA40_S36C6_MASK                               0x10
#define _LCDDATA40_S37C6_POSN                               0x5
#define _LCDDATA40_S37C6_POSITION                           0x5
#define _LCDDATA40_S37C6_SIZE                               0x1
#define _LCDDATA40_S37C6_LENGTH                             0x1
#define _LCDDATA40_S37C6_MASK                               0x20
#define _LCDDATA40_S38C6_POSN                               0x6
#define _LCDDATA40_S38C6_POSITION                           0x6
#define _LCDDATA40_S38C6_SIZE                               0x1
#define _LCDDATA40_S38C6_LENGTH                             0x1
#define _LCDDATA40_S38C6_MASK                               0x40
#define _LCDDATA40_S39C6_POSN                               0x7
#define _LCDDATA40_S39C6_POSITION                           0x7
#define _LCDDATA40_S39C6_SIZE                               0x1
#define _LCDDATA40_S39C6_LENGTH                             0x1
#define _LCDDATA40_S39C6_MASK                               0x80

// Register: LCDDATA41
#define LCDDATA41 LCDDATA41
extern volatile unsigned char           LCDDATA41           __at(0x1D41);
#ifndef _LIB_BUILD
asm("LCDDATA41 equ 01D41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C6                  :1;
        unsigned S41C6                  :1;
        unsigned S42C6                  :1;
        unsigned S43C6                  :1;
        unsigned S44C6                  :1;
        unsigned S45C6                  :1;
    };
} LCDDATA41bits_t;
extern volatile LCDDATA41bits_t LCDDATA41bits __at(0x1D41);
// bitfield macros
#define _LCDDATA41_S40C6_POSN                               0x0
#define _LCDDATA41_S40C6_POSITION                           0x0
#define _LCDDATA41_S40C6_SIZE                               0x1
#define _LCDDATA41_S40C6_LENGTH                             0x1
#define _LCDDATA41_S40C6_MASK                               0x1
#define _LCDDATA41_S41C6_POSN                               0x1
#define _LCDDATA41_S41C6_POSITION                           0x1
#define _LCDDATA41_S41C6_SIZE                               0x1
#define _LCDDATA41_S41C6_LENGTH                             0x1
#define _LCDDATA41_S41C6_MASK                               0x2
#define _LCDDATA41_S42C6_POSN                               0x2
#define _LCDDATA41_S42C6_POSITION                           0x2
#define _LCDDATA41_S42C6_SIZE                               0x1
#define _LCDDATA41_S42C6_LENGTH                             0x1
#define _LCDDATA41_S42C6_MASK                               0x4
#define _LCDDATA41_S43C6_POSN                               0x3
#define _LCDDATA41_S43C6_POSITION                           0x3
#define _LCDDATA41_S43C6_SIZE                               0x1
#define _LCDDATA41_S43C6_LENGTH                             0x1
#define _LCDDATA41_S43C6_MASK                               0x8
#define _LCDDATA41_S44C6_POSN                               0x4
#define _LCDDATA41_S44C6_POSITION                           0x4
#define _LCDDATA41_S44C6_SIZE                               0x1
#define _LCDDATA41_S44C6_LENGTH                             0x1
#define _LCDDATA41_S44C6_MASK                               0x10
#define _LCDDATA41_S45C6_POSN                               0x5
#define _LCDDATA41_S45C6_POSITION                           0x5
#define _LCDDATA41_S45C6_SIZE                               0x1
#define _LCDDATA41_S45C6_LENGTH                             0x1
#define _LCDDATA41_S45C6_MASK                               0x20

// Register: LCDDATA42
#define LCDDATA42 LCDDATA42
extern volatile unsigned char           LCDDATA42           __at(0x1D42);
#ifndef _LIB_BUILD
asm("LCDDATA42 equ 01D42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S00C7                  :1;
        unsigned S01C7                  :1;
        unsigned S02C7                  :1;
        unsigned S03C7                  :1;
        unsigned S04C7                  :1;
        unsigned S05C7                  :1;
        unsigned S06C7                  :1;
        unsigned S07C7                  :1;
    };
} LCDDATA42bits_t;
extern volatile LCDDATA42bits_t LCDDATA42bits __at(0x1D42);
// bitfield macros
#define _LCDDATA42_S00C7_POSN                               0x0
#define _LCDDATA42_S00C7_POSITION                           0x0
#define _LCDDATA42_S00C7_SIZE                               0x1
#define _LCDDATA42_S00C7_LENGTH                             0x1
#define _LCDDATA42_S00C7_MASK                               0x1
#define _LCDDATA42_S01C7_POSN                               0x1
#define _LCDDATA42_S01C7_POSITION                           0x1
#define _LCDDATA42_S01C7_SIZE                               0x1
#define _LCDDATA42_S01C7_LENGTH                             0x1
#define _LCDDATA42_S01C7_MASK                               0x2
#define _LCDDATA42_S02C7_POSN                               0x2
#define _LCDDATA42_S02C7_POSITION                           0x2
#define _LCDDATA42_S02C7_SIZE                               0x1
#define _LCDDATA42_S02C7_LENGTH                             0x1
#define _LCDDATA42_S02C7_MASK                               0x4
#define _LCDDATA42_S03C7_POSN                               0x3
#define _LCDDATA42_S03C7_POSITION                           0x3
#define _LCDDATA42_S03C7_SIZE                               0x1
#define _LCDDATA42_S03C7_LENGTH                             0x1
#define _LCDDATA42_S03C7_MASK                               0x8
#define _LCDDATA42_S04C7_POSN                               0x4
#define _LCDDATA42_S04C7_POSITION                           0x4
#define _LCDDATA42_S04C7_SIZE                               0x1
#define _LCDDATA42_S04C7_LENGTH                             0x1
#define _LCDDATA42_S04C7_MASK                               0x10
#define _LCDDATA42_S05C7_POSN                               0x5
#define _LCDDATA42_S05C7_POSITION                           0x5
#define _LCDDATA42_S05C7_SIZE                               0x1
#define _LCDDATA42_S05C7_LENGTH                             0x1
#define _LCDDATA42_S05C7_MASK                               0x20
#define _LCDDATA42_S06C7_POSN                               0x6
#define _LCDDATA42_S06C7_POSITION                           0x6
#define _LCDDATA42_S06C7_SIZE                               0x1
#define _LCDDATA42_S06C7_LENGTH                             0x1
#define _LCDDATA42_S06C7_MASK                               0x40
#define _LCDDATA42_S07C7_POSN                               0x7
#define _LCDDATA42_S07C7_POSITION                           0x7
#define _LCDDATA42_S07C7_SIZE                               0x1
#define _LCDDATA42_S07C7_LENGTH                             0x1
#define _LCDDATA42_S07C7_MASK                               0x80

// Register: LCDDATA43
#define LCDDATA43 LCDDATA43
extern volatile unsigned char           LCDDATA43           __at(0x1D43);
#ifndef _LIB_BUILD
asm("LCDDATA43 equ 01D43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S08C7                  :1;
        unsigned S09C7                  :1;
        unsigned S10C7                  :1;
        unsigned S11C7                  :1;
        unsigned S12C7                  :1;
        unsigned S13C7                  :1;
        unsigned S14C7                  :1;
        unsigned S15C7                  :1;
    };
} LCDDATA43bits_t;
extern volatile LCDDATA43bits_t LCDDATA43bits __at(0x1D43);
// bitfield macros
#define _LCDDATA43_S08C7_POSN                               0x0
#define _LCDDATA43_S08C7_POSITION                           0x0
#define _LCDDATA43_S08C7_SIZE                               0x1
#define _LCDDATA43_S08C7_LENGTH                             0x1
#define _LCDDATA43_S08C7_MASK                               0x1
#define _LCDDATA43_S09C7_POSN                               0x1
#define _LCDDATA43_S09C7_POSITION                           0x1
#define _LCDDATA43_S09C7_SIZE                               0x1
#define _LCDDATA43_S09C7_LENGTH                             0x1
#define _LCDDATA43_S09C7_MASK                               0x2
#define _LCDDATA43_S10C7_POSN                               0x2
#define _LCDDATA43_S10C7_POSITION                           0x2
#define _LCDDATA43_S10C7_SIZE                               0x1
#define _LCDDATA43_S10C7_LENGTH                             0x1
#define _LCDDATA43_S10C7_MASK                               0x4
#define _LCDDATA43_S11C7_POSN                               0x3
#define _LCDDATA43_S11C7_POSITION                           0x3
#define _LCDDATA43_S11C7_SIZE                               0x1
#define _LCDDATA43_S11C7_LENGTH                             0x1
#define _LCDDATA43_S11C7_MASK                               0x8
#define _LCDDATA43_S12C7_POSN                               0x4
#define _LCDDATA43_S12C7_POSITION                           0x4
#define _LCDDATA43_S12C7_SIZE                               0x1
#define _LCDDATA43_S12C7_LENGTH                             0x1
#define _LCDDATA43_S12C7_MASK                               0x10
#define _LCDDATA43_S13C7_POSN                               0x5
#define _LCDDATA43_S13C7_POSITION                           0x5
#define _LCDDATA43_S13C7_SIZE                               0x1
#define _LCDDATA43_S13C7_LENGTH                             0x1
#define _LCDDATA43_S13C7_MASK                               0x20
#define _LCDDATA43_S14C7_POSN                               0x6
#define _LCDDATA43_S14C7_POSITION                           0x6
#define _LCDDATA43_S14C7_SIZE                               0x1
#define _LCDDATA43_S14C7_LENGTH                             0x1
#define _LCDDATA43_S14C7_MASK                               0x40
#define _LCDDATA43_S15C7_POSN                               0x7
#define _LCDDATA43_S15C7_POSITION                           0x7
#define _LCDDATA43_S15C7_SIZE                               0x1
#define _LCDDATA43_S15C7_LENGTH                             0x1
#define _LCDDATA43_S15C7_MASK                               0x80

// Register: LCDDATA44
#define LCDDATA44 LCDDATA44
extern volatile unsigned char           LCDDATA44           __at(0x1D44);
#ifndef _LIB_BUILD
asm("LCDDATA44 equ 01D44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S16C7                  :1;
        unsigned S17C7                  :1;
        unsigned S18C7                  :1;
        unsigned S19C7                  :1;
        unsigned S20C7                  :1;
        unsigned S21C7                  :1;
        unsigned S22C7                  :1;
        unsigned S23C7                  :1;
    };
} LCDDATA44bits_t;
extern volatile LCDDATA44bits_t LCDDATA44bits __at(0x1D44);
// bitfield macros
#define _LCDDATA44_S16C7_POSN                               0x0
#define _LCDDATA44_S16C7_POSITION                           0x0
#define _LCDDATA44_S16C7_SIZE                               0x1
#define _LCDDATA44_S16C7_LENGTH                             0x1
#define _LCDDATA44_S16C7_MASK                               0x1
#define _LCDDATA44_S17C7_POSN                               0x1
#define _LCDDATA44_S17C7_POSITION                           0x1
#define _LCDDATA44_S17C7_SIZE                               0x1
#define _LCDDATA44_S17C7_LENGTH                             0x1
#define _LCDDATA44_S17C7_MASK                               0x2
#define _LCDDATA44_S18C7_POSN                               0x2
#define _LCDDATA44_S18C7_POSITION                           0x2
#define _LCDDATA44_S18C7_SIZE                               0x1
#define _LCDDATA44_S18C7_LENGTH                             0x1
#define _LCDDATA44_S18C7_MASK                               0x4
#define _LCDDATA44_S19C7_POSN                               0x3
#define _LCDDATA44_S19C7_POSITION                           0x3
#define _LCDDATA44_S19C7_SIZE                               0x1
#define _LCDDATA44_S19C7_LENGTH                             0x1
#define _LCDDATA44_S19C7_MASK                               0x8
#define _LCDDATA44_S20C7_POSN                               0x4
#define _LCDDATA44_S20C7_POSITION                           0x4
#define _LCDDATA44_S20C7_SIZE                               0x1
#define _LCDDATA44_S20C7_LENGTH                             0x1
#define _LCDDATA44_S20C7_MASK                               0x10
#define _LCDDATA44_S21C7_POSN                               0x5
#define _LCDDATA44_S21C7_POSITION                           0x5
#define _LCDDATA44_S21C7_SIZE                               0x1
#define _LCDDATA44_S21C7_LENGTH                             0x1
#define _LCDDATA44_S21C7_MASK                               0x20
#define _LCDDATA44_S22C7_POSN                               0x6
#define _LCDDATA44_S22C7_POSITION                           0x6
#define _LCDDATA44_S22C7_SIZE                               0x1
#define _LCDDATA44_S22C7_LENGTH                             0x1
#define _LCDDATA44_S22C7_MASK                               0x40
#define _LCDDATA44_S23C7_POSN                               0x7
#define _LCDDATA44_S23C7_POSITION                           0x7
#define _LCDDATA44_S23C7_SIZE                               0x1
#define _LCDDATA44_S23C7_LENGTH                             0x1
#define _LCDDATA44_S23C7_MASK                               0x80

// Register: LCDDATA45
#define LCDDATA45 LCDDATA45
extern volatile unsigned char           LCDDATA45           __at(0x1D45);
#ifndef _LIB_BUILD
asm("LCDDATA45 equ 01D45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S24C7                  :1;
        unsigned S25C7                  :1;
        unsigned S26C7                  :1;
        unsigned S27C7                  :1;
        unsigned S28C7                  :1;
        unsigned S29C7                  :1;
        unsigned S30C7                  :1;
        unsigned S31C7                  :1;
    };
} LCDDATA45bits_t;
extern volatile LCDDATA45bits_t LCDDATA45bits __at(0x1D45);
// bitfield macros
#define _LCDDATA45_S24C7_POSN                               0x0
#define _LCDDATA45_S24C7_POSITION                           0x0
#define _LCDDATA45_S24C7_SIZE                               0x1
#define _LCDDATA45_S24C7_LENGTH                             0x1
#define _LCDDATA45_S24C7_MASK                               0x1
#define _LCDDATA45_S25C7_POSN                               0x1
#define _LCDDATA45_S25C7_POSITION                           0x1
#define _LCDDATA45_S25C7_SIZE                               0x1
#define _LCDDATA45_S25C7_LENGTH                             0x1
#define _LCDDATA45_S25C7_MASK                               0x2
#define _LCDDATA45_S26C7_POSN                               0x2
#define _LCDDATA45_S26C7_POSITION                           0x2
#define _LCDDATA45_S26C7_SIZE                               0x1
#define _LCDDATA45_S26C7_LENGTH                             0x1
#define _LCDDATA45_S26C7_MASK                               0x4
#define _LCDDATA45_S27C7_POSN                               0x3
#define _LCDDATA45_S27C7_POSITION                           0x3
#define _LCDDATA45_S27C7_SIZE                               0x1
#define _LCDDATA45_S27C7_LENGTH                             0x1
#define _LCDDATA45_S27C7_MASK                               0x8
#define _LCDDATA45_S28C7_POSN                               0x4
#define _LCDDATA45_S28C7_POSITION                           0x4
#define _LCDDATA45_S28C7_SIZE                               0x1
#define _LCDDATA45_S28C7_LENGTH                             0x1
#define _LCDDATA45_S28C7_MASK                               0x10
#define _LCDDATA45_S29C7_POSN                               0x5
#define _LCDDATA45_S29C7_POSITION                           0x5
#define _LCDDATA45_S29C7_SIZE                               0x1
#define _LCDDATA45_S29C7_LENGTH                             0x1
#define _LCDDATA45_S29C7_MASK                               0x20
#define _LCDDATA45_S30C7_POSN                               0x6
#define _LCDDATA45_S30C7_POSITION                           0x6
#define _LCDDATA45_S30C7_SIZE                               0x1
#define _LCDDATA45_S30C7_LENGTH                             0x1
#define _LCDDATA45_S30C7_MASK                               0x40
#define _LCDDATA45_S31C7_POSN                               0x7
#define _LCDDATA45_S31C7_POSITION                           0x7
#define _LCDDATA45_S31C7_SIZE                               0x1
#define _LCDDATA45_S31C7_LENGTH                             0x1
#define _LCDDATA45_S31C7_MASK                               0x80

// Register: LCDDATA46
#define LCDDATA46 LCDDATA46
extern volatile unsigned char           LCDDATA46           __at(0x1D46);
#ifndef _LIB_BUILD
asm("LCDDATA46 equ 01D46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S32C7                  :1;
        unsigned S33C7                  :1;
        unsigned S34C7                  :1;
        unsigned S35C7                  :1;
        unsigned S36C7                  :1;
        unsigned S37C7                  :1;
        unsigned S38C7                  :1;
        unsigned S39C7                  :1;
    };
} LCDDATA46bits_t;
extern volatile LCDDATA46bits_t LCDDATA46bits __at(0x1D46);
// bitfield macros
#define _LCDDATA46_S32C7_POSN                               0x0
#define _LCDDATA46_S32C7_POSITION                           0x0
#define _LCDDATA46_S32C7_SIZE                               0x1
#define _LCDDATA46_S32C7_LENGTH                             0x1
#define _LCDDATA46_S32C7_MASK                               0x1
#define _LCDDATA46_S33C7_POSN                               0x1
#define _LCDDATA46_S33C7_POSITION                           0x1
#define _LCDDATA46_S33C7_SIZE                               0x1
#define _LCDDATA46_S33C7_LENGTH                             0x1
#define _LCDDATA46_S33C7_MASK                               0x2
#define _LCDDATA46_S34C7_POSN                               0x2
#define _LCDDATA46_S34C7_POSITION                           0x2
#define _LCDDATA46_S34C7_SIZE                               0x1
#define _LCDDATA46_S34C7_LENGTH                             0x1
#define _LCDDATA46_S34C7_MASK                               0x4
#define _LCDDATA46_S35C7_POSN                               0x3
#define _LCDDATA46_S35C7_POSITION                           0x3
#define _LCDDATA46_S35C7_SIZE                               0x1
#define _LCDDATA46_S35C7_LENGTH                             0x1
#define _LCDDATA46_S35C7_MASK                               0x8
#define _LCDDATA46_S36C7_POSN                               0x4
#define _LCDDATA46_S36C7_POSITION                           0x4
#define _LCDDATA46_S36C7_SIZE                               0x1
#define _LCDDATA46_S36C7_LENGTH                             0x1
#define _LCDDATA46_S36C7_MASK                               0x10
#define _LCDDATA46_S37C7_POSN                               0x5
#define _LCDDATA46_S37C7_POSITION                           0x5
#define _LCDDATA46_S37C7_SIZE                               0x1
#define _LCDDATA46_S37C7_LENGTH                             0x1
#define _LCDDATA46_S37C7_MASK                               0x20
#define _LCDDATA46_S38C7_POSN                               0x6
#define _LCDDATA46_S38C7_POSITION                           0x6
#define _LCDDATA46_S38C7_SIZE                               0x1
#define _LCDDATA46_S38C7_LENGTH                             0x1
#define _LCDDATA46_S38C7_MASK                               0x40
#define _LCDDATA46_S39C7_POSN                               0x7
#define _LCDDATA46_S39C7_POSITION                           0x7
#define _LCDDATA46_S39C7_SIZE                               0x1
#define _LCDDATA46_S39C7_LENGTH                             0x1
#define _LCDDATA46_S39C7_MASK                               0x80

// Register: LCDDATA47
#define LCDDATA47 LCDDATA47
extern volatile unsigned char           LCDDATA47           __at(0x1D47);
#ifndef _LIB_BUILD
asm("LCDDATA47 equ 01D47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S40C7                  :1;
        unsigned S41C7                  :1;
        unsigned S42C7                  :1;
        unsigned S43C7                  :1;
        unsigned S44C7                  :1;
        unsigned S45C7                  :1;
    };
} LCDDATA47bits_t;
extern volatile LCDDATA47bits_t LCDDATA47bits __at(0x1D47);
// bitfield macros
#define _LCDDATA47_S40C7_POSN                               0x0
#define _LCDDATA47_S40C7_POSITION                           0x0
#define _LCDDATA47_S40C7_SIZE                               0x1
#define _LCDDATA47_S40C7_LENGTH                             0x1
#define _LCDDATA47_S40C7_MASK                               0x1
#define _LCDDATA47_S41C7_POSN                               0x1
#define _LCDDATA47_S41C7_POSITION                           0x1
#define _LCDDATA47_S41C7_SIZE                               0x1
#define _LCDDATA47_S41C7_LENGTH                             0x1
#define _LCDDATA47_S41C7_MASK                               0x2
#define _LCDDATA47_S42C7_POSN                               0x2
#define _LCDDATA47_S42C7_POSITION                           0x2
#define _LCDDATA47_S42C7_SIZE                               0x1
#define _LCDDATA47_S42C7_LENGTH                             0x1
#define _LCDDATA47_S42C7_MASK                               0x4
#define _LCDDATA47_S43C7_POSN                               0x3
#define _LCDDATA47_S43C7_POSITION                           0x3
#define _LCDDATA47_S43C7_SIZE                               0x1
#define _LCDDATA47_S43C7_LENGTH                             0x1
#define _LCDDATA47_S43C7_MASK                               0x8
#define _LCDDATA47_S44C7_POSN                               0x4
#define _LCDDATA47_S44C7_POSITION                           0x4
#define _LCDDATA47_S44C7_SIZE                               0x1
#define _LCDDATA47_S44C7_LENGTH                             0x1
#define _LCDDATA47_S44C7_MASK                               0x10
#define _LCDDATA47_S45C7_POSN                               0x5
#define _LCDDATA47_S45C7_POSITION                           0x5
#define _LCDDATA47_S45C7_SIZE                               0x1
#define _LCDDATA47_S45C7_LENGTH                             0x1
#define _LCDDATA47_S45C7_MASK                               0x20

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x1E0F);
#ifndef _LIB_BUILD
asm("CLCDATA equ 01E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MLC1OUT                :1;
        unsigned MLC2OUT                :1;
        unsigned MLC3OUT                :1;
        unsigned MLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x1E0F);
// bitfield macros
#define _CLCDATA_MLC1OUT_POSN                               0x0
#define _CLCDATA_MLC1OUT_POSITION                           0x0
#define _CLCDATA_MLC1OUT_SIZE                               0x1
#define _CLCDATA_MLC1OUT_LENGTH                             0x1
#define _CLCDATA_MLC1OUT_MASK                               0x1
#define _CLCDATA_MLC2OUT_POSN                               0x1
#define _CLCDATA_MLC2OUT_POSITION                           0x1
#define _CLCDATA_MLC2OUT_SIZE                               0x1
#define _CLCDATA_MLC2OUT_LENGTH                             0x1
#define _CLCDATA_MLC2OUT_MASK                               0x2
#define _CLCDATA_MLC3OUT_POSN                               0x2
#define _CLCDATA_MLC3OUT_POSITION                           0x2
#define _CLCDATA_MLC3OUT_SIZE                               0x1
#define _CLCDATA_MLC3OUT_LENGTH                             0x1
#define _CLCDATA_MLC3OUT_MASK                               0x4
#define _CLCDATA_MLC4OUT_POSN                               0x3
#define _CLCDATA_MLC4OUT_POSITION                           0x3
#define _CLCDATA_MLC4OUT_SIZE                               0x1
#define _CLCDATA_MLC4OUT_LENGTH                             0x1
#define _CLCDATA_MLC4OUT_MASK                               0x8

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0x1E10);
#ifndef _LIB_BUILD
asm("CLC1CON equ 01E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned                        :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0x1E10);
// bitfield macros
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0x1E11);
#ifndef _LIB_BUILD
asm("CLC1POL equ 01E11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0x1E11);
// bitfield macros
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0x1E12);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 01E12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0x1E12);
// bitfield macros
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0x1E13);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 01E13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0x1E13);
// bitfield macros
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0x1E14);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 01E14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0x1E14);
// bitfield macros
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0x1E15);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 01E15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0x1E15);
// bitfield macros
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0x1E16);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 01E16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0x1E16);
// bitfield macros
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80
#define _CLC1GLS0_D1N_POSN                                  0x0
#define _CLC1GLS0_D1N_POSITION                              0x0
#define _CLC1GLS0_D1N_SIZE                                  0x1
#define _CLC1GLS0_D1N_LENGTH                                0x1
#define _CLC1GLS0_D1N_MASK                                  0x1
#define _CLC1GLS0_D1T_POSN                                  0x1
#define _CLC1GLS0_D1T_POSITION                              0x1
#define _CLC1GLS0_D1T_SIZE                                  0x1
#define _CLC1GLS0_D1T_LENGTH                                0x1
#define _CLC1GLS0_D1T_MASK                                  0x2
#define _CLC1GLS0_D2N_POSN                                  0x2
#define _CLC1GLS0_D2N_POSITION                              0x2
#define _CLC1GLS0_D2N_SIZE                                  0x1
#define _CLC1GLS0_D2N_LENGTH                                0x1
#define _CLC1GLS0_D2N_MASK                                  0x4
#define _CLC1GLS0_D2T_POSN                                  0x3
#define _CLC1GLS0_D2T_POSITION                              0x3
#define _CLC1GLS0_D2T_SIZE                                  0x1
#define _CLC1GLS0_D2T_LENGTH                                0x1
#define _CLC1GLS0_D2T_MASK                                  0x8
#define _CLC1GLS0_D3N_POSN                                  0x4
#define _CLC1GLS0_D3N_POSITION                              0x4
#define _CLC1GLS0_D3N_SIZE                                  0x1
#define _CLC1GLS0_D3N_LENGTH                                0x1
#define _CLC1GLS0_D3N_MASK                                  0x10
#define _CLC1GLS0_D3T_POSN                                  0x5
#define _CLC1GLS0_D3T_POSITION                              0x5
#define _CLC1GLS0_D3T_SIZE                                  0x1
#define _CLC1GLS0_D3T_LENGTH                                0x1
#define _CLC1GLS0_D3T_MASK                                  0x20
#define _CLC1GLS0_D4N_POSN                                  0x6
#define _CLC1GLS0_D4N_POSITION                              0x6
#define _CLC1GLS0_D4N_SIZE                                  0x1
#define _CLC1GLS0_D4N_LENGTH                                0x1
#define _CLC1GLS0_D4N_MASK                                  0x40
#define _CLC1GLS0_D4T_POSN                                  0x7
#define _CLC1GLS0_D4T_POSITION                              0x7
#define _CLC1GLS0_D4T_SIZE                                  0x1
#define _CLC1GLS0_D4T_LENGTH                                0x1
#define _CLC1GLS0_D4T_MASK                                  0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0x1E17);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 01E17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0x1E17);
// bitfield macros
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80
#define _CLC1GLS1_D1N_POSN                                  0x0
#define _CLC1GLS1_D1N_POSITION                              0x0
#define _CLC1GLS1_D1N_SIZE                                  0x1
#define _CLC1GLS1_D1N_LENGTH                                0x1
#define _CLC1GLS1_D1N_MASK                                  0x1
#define _CLC1GLS1_D1T_POSN                                  0x1
#define _CLC1GLS1_D1T_POSITION                              0x1
#define _CLC1GLS1_D1T_SIZE                                  0x1
#define _CLC1GLS1_D1T_LENGTH                                0x1
#define _CLC1GLS1_D1T_MASK                                  0x2
#define _CLC1GLS1_D2N_POSN                                  0x2
#define _CLC1GLS1_D2N_POSITION                              0x2
#define _CLC1GLS1_D2N_SIZE                                  0x1
#define _CLC1GLS1_D2N_LENGTH                                0x1
#define _CLC1GLS1_D2N_MASK                                  0x4
#define _CLC1GLS1_D2T_POSN                                  0x3
#define _CLC1GLS1_D2T_POSITION                              0x3
#define _CLC1GLS1_D2T_SIZE                                  0x1
#define _CLC1GLS1_D2T_LENGTH                                0x1
#define _CLC1GLS1_D2T_MASK                                  0x8
#define _CLC1GLS1_D3N_POSN                                  0x4
#define _CLC1GLS1_D3N_POSITION                              0x4
#define _CLC1GLS1_D3N_SIZE                                  0x1
#define _CLC1GLS1_D3N_LENGTH                                0x1
#define _CLC1GLS1_D3N_MASK                                  0x10
#define _CLC1GLS1_D3T_POSN                                  0x5
#define _CLC1GLS1_D3T_POSITION                              0x5
#define _CLC1GLS1_D3T_SIZE                                  0x1
#define _CLC1GLS1_D3T_LENGTH                                0x1
#define _CLC1GLS1_D3T_MASK                                  0x20
#define _CLC1GLS1_D4N_POSN                                  0x6
#define _CLC1GLS1_D4N_POSITION                              0x6
#define _CLC1GLS1_D4N_SIZE                                  0x1
#define _CLC1GLS1_D4N_LENGTH                                0x1
#define _CLC1GLS1_D4N_MASK                                  0x40
#define _CLC1GLS1_D4T_POSN                                  0x7
#define _CLC1GLS1_D4T_POSITION                              0x7
#define _CLC1GLS1_D4T_SIZE                                  0x1
#define _CLC1GLS1_D4T_LENGTH                                0x1
#define _CLC1GLS1_D4T_MASK                                  0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0x1E18);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 01E18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0x1E18);
// bitfield macros
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80
#define _CLC1GLS2_D1N_POSN                                  0x0
#define _CLC1GLS2_D1N_POSITION                              0x0
#define _CLC1GLS2_D1N_SIZE                                  0x1
#define _CLC1GLS2_D1N_LENGTH                                0x1
#define _CLC1GLS2_D1N_MASK                                  0x1
#define _CLC1GLS2_D1T_POSN                                  0x1
#define _CLC1GLS2_D1T_POSITION                              0x1
#define _CLC1GLS2_D1T_SIZE                                  0x1
#define _CLC1GLS2_D1T_LENGTH                                0x1
#define _CLC1GLS2_D1T_MASK                                  0x2
#define _CLC1GLS2_D2N_POSN                                  0x2
#define _CLC1GLS2_D2N_POSITION                              0x2
#define _CLC1GLS2_D2N_SIZE                                  0x1
#define _CLC1GLS2_D2N_LENGTH                                0x1
#define _CLC1GLS2_D2N_MASK                                  0x4
#define _CLC1GLS2_D2T_POSN                                  0x3
#define _CLC1GLS2_D2T_POSITION                              0x3
#define _CLC1GLS2_D2T_SIZE                                  0x1
#define _CLC1GLS2_D2T_LENGTH                                0x1
#define _CLC1GLS2_D2T_MASK                                  0x8
#define _CLC1GLS2_D3N_POSN                                  0x4
#define _CLC1GLS2_D3N_POSITION                              0x4
#define _CLC1GLS2_D3N_SIZE                                  0x1
#define _CLC1GLS2_D3N_LENGTH                                0x1
#define _CLC1GLS2_D3N_MASK                                  0x10
#define _CLC1GLS2_D3T_POSN                                  0x5
#define _CLC1GLS2_D3T_POSITION                              0x5
#define _CLC1GLS2_D3T_SIZE                                  0x1
#define _CLC1GLS2_D3T_LENGTH                                0x1
#define _CLC1GLS2_D3T_MASK                                  0x20
#define _CLC1GLS2_D4N_POSN                                  0x6
#define _CLC1GLS2_D4N_POSITION                              0x6
#define _CLC1GLS2_D4N_SIZE                                  0x1
#define _CLC1GLS2_D4N_LENGTH                                0x1
#define _CLC1GLS2_D4N_MASK                                  0x40
#define _CLC1GLS2_D4T_POSN                                  0x7
#define _CLC1GLS2_D4T_POSITION                              0x7
#define _CLC1GLS2_D4T_SIZE                                  0x1
#define _CLC1GLS2_D4T_LENGTH                                0x1
#define _CLC1GLS2_D4T_MASK                                  0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0x1E19);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 01E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0x1E19);
// bitfield macros
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0x1E1A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 01E1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned                        :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0x1E1A);
// bitfield macros
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0x1E1B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 01E1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0x1E1B);
// bitfield macros
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0x1E1C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 01E1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0x1E1C);
// bitfield macros
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0x1E1D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 01E1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0x1E1D);
// bitfield macros
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0x1E1E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 01E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0x1E1E);
// bitfield macros
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0x1E1F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 01E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0x1E1F);
// bitfield macros
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0x1E20);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 01E20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0x1E20);
// bitfield macros
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80
#define _CLC2GLS0_D1N_POSN                                  0x0
#define _CLC2GLS0_D1N_POSITION                              0x0
#define _CLC2GLS0_D1N_SIZE                                  0x1
#define _CLC2GLS0_D1N_LENGTH                                0x1
#define _CLC2GLS0_D1N_MASK                                  0x1
#define _CLC2GLS0_D1T_POSN                                  0x1
#define _CLC2GLS0_D1T_POSITION                              0x1
#define _CLC2GLS0_D1T_SIZE                                  0x1
#define _CLC2GLS0_D1T_LENGTH                                0x1
#define _CLC2GLS0_D1T_MASK                                  0x2
#define _CLC2GLS0_D2N_POSN                                  0x2
#define _CLC2GLS0_D2N_POSITION                              0x2
#define _CLC2GLS0_D2N_SIZE                                  0x1
#define _CLC2GLS0_D2N_LENGTH                                0x1
#define _CLC2GLS0_D2N_MASK                                  0x4
#define _CLC2GLS0_D2T_POSN                                  0x3
#define _CLC2GLS0_D2T_POSITION                              0x3
#define _CLC2GLS0_D2T_SIZE                                  0x1
#define _CLC2GLS0_D2T_LENGTH                                0x1
#define _CLC2GLS0_D2T_MASK                                  0x8
#define _CLC2GLS0_D3N_POSN                                  0x4
#define _CLC2GLS0_D3N_POSITION                              0x4
#define _CLC2GLS0_D3N_SIZE                                  0x1
#define _CLC2GLS0_D3N_LENGTH                                0x1
#define _CLC2GLS0_D3N_MASK                                  0x10
#define _CLC2GLS0_D3T_POSN                                  0x5
#define _CLC2GLS0_D3T_POSITION                              0x5
#define _CLC2GLS0_D3T_SIZE                                  0x1
#define _CLC2GLS0_D3T_LENGTH                                0x1
#define _CLC2GLS0_D3T_MASK                                  0x20
#define _CLC2GLS0_D4N_POSN                                  0x6
#define _CLC2GLS0_D4N_POSITION                              0x6
#define _CLC2GLS0_D4N_SIZE                                  0x1
#define _CLC2GLS0_D4N_LENGTH                                0x1
#define _CLC2GLS0_D4N_MASK                                  0x40
#define _CLC2GLS0_D4T_POSN                                  0x7
#define _CLC2GLS0_D4T_POSITION                              0x7
#define _CLC2GLS0_D4T_SIZE                                  0x1
#define _CLC2GLS0_D4T_LENGTH                                0x1
#define _CLC2GLS0_D4T_MASK                                  0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0x1E21);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 01E21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0x1E21);
// bitfield macros
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80
#define _CLC2GLS1_D1N_POSN                                  0x0
#define _CLC2GLS1_D1N_POSITION                              0x0
#define _CLC2GLS1_D1N_SIZE                                  0x1
#define _CLC2GLS1_D1N_LENGTH                                0x1
#define _CLC2GLS1_D1N_MASK                                  0x1
#define _CLC2GLS1_D1T_POSN                                  0x1
#define _CLC2GLS1_D1T_POSITION                              0x1
#define _CLC2GLS1_D1T_SIZE                                  0x1
#define _CLC2GLS1_D1T_LENGTH                                0x1
#define _CLC2GLS1_D1T_MASK                                  0x2
#define _CLC2GLS1_D2N_POSN                                  0x2
#define _CLC2GLS1_D2N_POSITION                              0x2
#define _CLC2GLS1_D2N_SIZE                                  0x1
#define _CLC2GLS1_D2N_LENGTH                                0x1
#define _CLC2GLS1_D2N_MASK                                  0x4
#define _CLC2GLS1_D2T_POSN                                  0x3
#define _CLC2GLS1_D2T_POSITION                              0x3
#define _CLC2GLS1_D2T_SIZE                                  0x1
#define _CLC2GLS1_D2T_LENGTH                                0x1
#define _CLC2GLS1_D2T_MASK                                  0x8
#define _CLC2GLS1_D3N_POSN                                  0x4
#define _CLC2GLS1_D3N_POSITION                              0x4
#define _CLC2GLS1_D3N_SIZE                                  0x1
#define _CLC2GLS1_D3N_LENGTH                                0x1
#define _CLC2GLS1_D3N_MASK                                  0x10
#define _CLC2GLS1_D3T_POSN                                  0x5
#define _CLC2GLS1_D3T_POSITION                              0x5
#define _CLC2GLS1_D3T_SIZE                                  0x1
#define _CLC2GLS1_D3T_LENGTH                                0x1
#define _CLC2GLS1_D3T_MASK                                  0x20
#define _CLC2GLS1_D4N_POSN                                  0x6
#define _CLC2GLS1_D4N_POSITION                              0x6
#define _CLC2GLS1_D4N_SIZE                                  0x1
#define _CLC2GLS1_D4N_LENGTH                                0x1
#define _CLC2GLS1_D4N_MASK                                  0x40
#define _CLC2GLS1_D4T_POSN                                  0x7
#define _CLC2GLS1_D4T_POSITION                              0x7
#define _CLC2GLS1_D4T_SIZE                                  0x1
#define _CLC2GLS1_D4T_LENGTH                                0x1
#define _CLC2GLS1_D4T_MASK                                  0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0x1E22);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 01E22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0x1E22);
// bitfield macros
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80
#define _CLC2GLS2_D1N_POSN                                  0x0
#define _CLC2GLS2_D1N_POSITION                              0x0
#define _CLC2GLS2_D1N_SIZE                                  0x1
#define _CLC2GLS2_D1N_LENGTH                                0x1
#define _CLC2GLS2_D1N_MASK                                  0x1
#define _CLC2GLS2_D1T_POSN                                  0x1
#define _CLC2GLS2_D1T_POSITION                              0x1
#define _CLC2GLS2_D1T_SIZE                                  0x1
#define _CLC2GLS2_D1T_LENGTH                                0x1
#define _CLC2GLS2_D1T_MASK                                  0x2
#define _CLC2GLS2_D2N_POSN                                  0x2
#define _CLC2GLS2_D2N_POSITION                              0x2
#define _CLC2GLS2_D2N_SIZE                                  0x1
#define _CLC2GLS2_D2N_LENGTH                                0x1
#define _CLC2GLS2_D2N_MASK                                  0x4
#define _CLC2GLS2_D2T_POSN                                  0x3
#define _CLC2GLS2_D2T_POSITION                              0x3
#define _CLC2GLS2_D2T_SIZE                                  0x1
#define _CLC2GLS2_D2T_LENGTH                                0x1
#define _CLC2GLS2_D2T_MASK                                  0x8
#define _CLC2GLS2_D3N_POSN                                  0x4
#define _CLC2GLS2_D3N_POSITION                              0x4
#define _CLC2GLS2_D3N_SIZE                                  0x1
#define _CLC2GLS2_D3N_LENGTH                                0x1
#define _CLC2GLS2_D3N_MASK                                  0x10
#define _CLC2GLS2_D3T_POSN                                  0x5
#define _CLC2GLS2_D3T_POSITION                              0x5
#define _CLC2GLS2_D3T_SIZE                                  0x1
#define _CLC2GLS2_D3T_LENGTH                                0x1
#define _CLC2GLS2_D3T_MASK                                  0x20
#define _CLC2GLS2_D4N_POSN                                  0x6
#define _CLC2GLS2_D4N_POSITION                              0x6
#define _CLC2GLS2_D4N_SIZE                                  0x1
#define _CLC2GLS2_D4N_LENGTH                                0x1
#define _CLC2GLS2_D4N_MASK                                  0x40
#define _CLC2GLS2_D4T_POSN                                  0x7
#define _CLC2GLS2_D4T_POSITION                              0x7
#define _CLC2GLS2_D4T_SIZE                                  0x1
#define _CLC2GLS2_D4T_LENGTH                                0x1
#define _CLC2GLS2_D4T_MASK                                  0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0x1E23);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 01E23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0x1E23);
// bitfield macros
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0x1E24);
#ifndef _LIB_BUILD
asm("CLC3CON equ 01E24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned                        :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0x1E24);
// bitfield macros
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0x1E25);
#ifndef _LIB_BUILD
asm("CLC3POL equ 01E25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0x1E25);
// bitfield macros
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0x1E26);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 01E26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
        unsigned LC3D1S5                :1;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0x1E26);
// bitfield macros
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S5_POSN                              0x5
#define _CLC3SEL0_LC3D1S5_POSITION                          0x5
#define _CLC3SEL0_LC3D1S5_SIZE                              0x1
#define _CLC3SEL0_LC3D1S5_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S5_MASK                              0x20
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10
#define _CLC3SEL0_D1S5_POSN                                 0x5
#define _CLC3SEL0_D1S5_POSITION                             0x5
#define _CLC3SEL0_D1S5_SIZE                                 0x1
#define _CLC3SEL0_D1S5_LENGTH                               0x1
#define _CLC3SEL0_D1S5_MASK                                 0x20

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0x1E27);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 01E27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
        unsigned LC3D2S5                :1;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0x1E27);
// bitfield macros
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S5_POSN                              0x5
#define _CLC3SEL1_LC3D2S5_POSITION                          0x5
#define _CLC3SEL1_LC3D2S5_SIZE                              0x1
#define _CLC3SEL1_LC3D2S5_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S5_MASK                              0x20
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10
#define _CLC3SEL1_D2S5_POSN                                 0x5
#define _CLC3SEL1_D2S5_POSITION                             0x5
#define _CLC3SEL1_D2S5_SIZE                                 0x1
#define _CLC3SEL1_D2S5_LENGTH                               0x1
#define _CLC3SEL1_D2S5_MASK                                 0x20

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0x1E28);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 01E28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
        unsigned LC3D3S5                :1;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0x1E28);
// bitfield macros
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S5_POSN                              0x5
#define _CLC3SEL2_LC3D3S5_POSITION                          0x5
#define _CLC3SEL2_LC3D3S5_SIZE                              0x1
#define _CLC3SEL2_LC3D3S5_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S5_MASK                              0x20
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10
#define _CLC3SEL2_D3S5_POSN                                 0x5
#define _CLC3SEL2_D3S5_POSITION                             0x5
#define _CLC3SEL2_D3S5_SIZE                                 0x1
#define _CLC3SEL2_D3S5_LENGTH                               0x1
#define _CLC3SEL2_D3S5_MASK                                 0x20

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0x1E29);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 01E29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
        unsigned LC3D4S5                :1;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0x1E29);
// bitfield macros
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S5_POSN                              0x5
#define _CLC3SEL3_LC3D4S5_POSITION                          0x5
#define _CLC3SEL3_LC3D4S5_SIZE                              0x1
#define _CLC3SEL3_LC3D4S5_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S5_MASK                              0x20
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10
#define _CLC3SEL3_D4S5_POSN                                 0x5
#define _CLC3SEL3_D4S5_POSITION                             0x5
#define _CLC3SEL3_D4S5_SIZE                                 0x1
#define _CLC3SEL3_D4S5_LENGTH                               0x1
#define _CLC3SEL3_D4S5_MASK                                 0x20

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0x1E2A);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 01E2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0x1E2A);
// bitfield macros
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80
#define _CLC3GLS0_D1N_POSN                                  0x0
#define _CLC3GLS0_D1N_POSITION                              0x0
#define _CLC3GLS0_D1N_SIZE                                  0x1
#define _CLC3GLS0_D1N_LENGTH                                0x1
#define _CLC3GLS0_D1N_MASK                                  0x1
#define _CLC3GLS0_D1T_POSN                                  0x1
#define _CLC3GLS0_D1T_POSITION                              0x1
#define _CLC3GLS0_D1T_SIZE                                  0x1
#define _CLC3GLS0_D1T_LENGTH                                0x1
#define _CLC3GLS0_D1T_MASK                                  0x2
#define _CLC3GLS0_D2N_POSN                                  0x2
#define _CLC3GLS0_D2N_POSITION                              0x2
#define _CLC3GLS0_D2N_SIZE                                  0x1
#define _CLC3GLS0_D2N_LENGTH                                0x1
#define _CLC3GLS0_D2N_MASK                                  0x4
#define _CLC3GLS0_D2T_POSN                                  0x3
#define _CLC3GLS0_D2T_POSITION                              0x3
#define _CLC3GLS0_D2T_SIZE                                  0x1
#define _CLC3GLS0_D2T_LENGTH                                0x1
#define _CLC3GLS0_D2T_MASK                                  0x8
#define _CLC3GLS0_D3N_POSN                                  0x4
#define _CLC3GLS0_D3N_POSITION                              0x4
#define _CLC3GLS0_D3N_SIZE                                  0x1
#define _CLC3GLS0_D3N_LENGTH                                0x1
#define _CLC3GLS0_D3N_MASK                                  0x10
#define _CLC3GLS0_D3T_POSN                                  0x5
#define _CLC3GLS0_D3T_POSITION                              0x5
#define _CLC3GLS0_D3T_SIZE                                  0x1
#define _CLC3GLS0_D3T_LENGTH                                0x1
#define _CLC3GLS0_D3T_MASK                                  0x20
#define _CLC3GLS0_D4N_POSN                                  0x6
#define _CLC3GLS0_D4N_POSITION                              0x6
#define _CLC3GLS0_D4N_SIZE                                  0x1
#define _CLC3GLS0_D4N_LENGTH                                0x1
#define _CLC3GLS0_D4N_MASK                                  0x40
#define _CLC3GLS0_D4T_POSN                                  0x7
#define _CLC3GLS0_D4T_POSITION                              0x7
#define _CLC3GLS0_D4T_SIZE                                  0x1
#define _CLC3GLS0_D4T_LENGTH                                0x1
#define _CLC3GLS0_D4T_MASK                                  0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0x1E2B);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 01E2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0x1E2B);
// bitfield macros
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80
#define _CLC3GLS1_D1N_POSN                                  0x0
#define _CLC3GLS1_D1N_POSITION                              0x0
#define _CLC3GLS1_D1N_SIZE                                  0x1
#define _CLC3GLS1_D1N_LENGTH                                0x1
#define _CLC3GLS1_D1N_MASK                                  0x1
#define _CLC3GLS1_D1T_POSN                                  0x1
#define _CLC3GLS1_D1T_POSITION                              0x1
#define _CLC3GLS1_D1T_SIZE                                  0x1
#define _CLC3GLS1_D1T_LENGTH                                0x1
#define _CLC3GLS1_D1T_MASK                                  0x2
#define _CLC3GLS1_D2N_POSN                                  0x2
#define _CLC3GLS1_D2N_POSITION                              0x2
#define _CLC3GLS1_D2N_SIZE                                  0x1
#define _CLC3GLS1_D2N_LENGTH                                0x1
#define _CLC3GLS1_D2N_MASK                                  0x4
#define _CLC3GLS1_D2T_POSN                                  0x3
#define _CLC3GLS1_D2T_POSITION                              0x3
#define _CLC3GLS1_D2T_SIZE                                  0x1
#define _CLC3GLS1_D2T_LENGTH                                0x1
#define _CLC3GLS1_D2T_MASK                                  0x8
#define _CLC3GLS1_D3N_POSN                                  0x4
#define _CLC3GLS1_D3N_POSITION                              0x4
#define _CLC3GLS1_D3N_SIZE                                  0x1
#define _CLC3GLS1_D3N_LENGTH                                0x1
#define _CLC3GLS1_D3N_MASK                                  0x10
#define _CLC3GLS1_D3T_POSN                                  0x5
#define _CLC3GLS1_D3T_POSITION                              0x5
#define _CLC3GLS1_D3T_SIZE                                  0x1
#define _CLC3GLS1_D3T_LENGTH                                0x1
#define _CLC3GLS1_D3T_MASK                                  0x20
#define _CLC3GLS1_D4N_POSN                                  0x6
#define _CLC3GLS1_D4N_POSITION                              0x6
#define _CLC3GLS1_D4N_SIZE                                  0x1
#define _CLC3GLS1_D4N_LENGTH                                0x1
#define _CLC3GLS1_D4N_MASK                                  0x40
#define _CLC3GLS1_D4T_POSN                                  0x7
#define _CLC3GLS1_D4T_POSITION                              0x7
#define _CLC3GLS1_D4T_SIZE                                  0x1
#define _CLC3GLS1_D4T_LENGTH                                0x1
#define _CLC3GLS1_D4T_MASK                                  0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0x1E2C);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 01E2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0x1E2C);
// bitfield macros
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80
#define _CLC3GLS2_D1N_POSN                                  0x0
#define _CLC3GLS2_D1N_POSITION                              0x0
#define _CLC3GLS2_D1N_SIZE                                  0x1
#define _CLC3GLS2_D1N_LENGTH                                0x1
#define _CLC3GLS2_D1N_MASK                                  0x1
#define _CLC3GLS2_D1T_POSN                                  0x1
#define _CLC3GLS2_D1T_POSITION                              0x1
#define _CLC3GLS2_D1T_SIZE                                  0x1
#define _CLC3GLS2_D1T_LENGTH                                0x1
#define _CLC3GLS2_D1T_MASK                                  0x2
#define _CLC3GLS2_D2N_POSN                                  0x2
#define _CLC3GLS2_D2N_POSITION                              0x2
#define _CLC3GLS2_D2N_SIZE                                  0x1
#define _CLC3GLS2_D2N_LENGTH                                0x1
#define _CLC3GLS2_D2N_MASK                                  0x4
#define _CLC3GLS2_D2T_POSN                                  0x3
#define _CLC3GLS2_D2T_POSITION                              0x3
#define _CLC3GLS2_D2T_SIZE                                  0x1
#define _CLC3GLS2_D2T_LENGTH                                0x1
#define _CLC3GLS2_D2T_MASK                                  0x8
#define _CLC3GLS2_D3N_POSN                                  0x4
#define _CLC3GLS2_D3N_POSITION                              0x4
#define _CLC3GLS2_D3N_SIZE                                  0x1
#define _CLC3GLS2_D3N_LENGTH                                0x1
#define _CLC3GLS2_D3N_MASK                                  0x10
#define _CLC3GLS2_D3T_POSN                                  0x5
#define _CLC3GLS2_D3T_POSITION                              0x5
#define _CLC3GLS2_D3T_SIZE                                  0x1
#define _CLC3GLS2_D3T_LENGTH                                0x1
#define _CLC3GLS2_D3T_MASK                                  0x20
#define _CLC3GLS2_D4N_POSN                                  0x6
#define _CLC3GLS2_D4N_POSITION                              0x6
#define _CLC3GLS2_D4N_SIZE                                  0x1
#define _CLC3GLS2_D4N_LENGTH                                0x1
#define _CLC3GLS2_D4N_MASK                                  0x40
#define _CLC3GLS2_D4T_POSN                                  0x7
#define _CLC3GLS2_D4T_POSITION                              0x7
#define _CLC3GLS2_D4T_SIZE                                  0x1
#define _CLC3GLS2_D4T_LENGTH                                0x1
#define _CLC3GLS2_D4T_MASK                                  0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0x1E2D);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 01E2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0x1E2D);
// bitfield macros
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80

// Register: CLC4CON
#define CLC4CON CLC4CON
extern volatile unsigned char           CLC4CON             __at(0x1E2E);
#ifndef _LIB_BUILD
asm("CLC4CON equ 01E2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4MODE                :3;
        unsigned LC4INTN                :1;
        unsigned LC4INTP                :1;
        unsigned LC4OUT                 :1;
        unsigned                        :1;
        unsigned LC4EN                  :1;
    };
    struct {
        unsigned LC4MODE0               :1;
        unsigned LC4MODE1               :1;
        unsigned LC4MODE2               :1;
    };
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLC4CONbits_t;
extern volatile CLC4CONbits_t CLC4CONbits __at(0x1E2E);
// bitfield macros
#define _CLC4CON_LC4MODE_POSN                               0x0
#define _CLC4CON_LC4MODE_POSITION                           0x0
#define _CLC4CON_LC4MODE_SIZE                               0x3
#define _CLC4CON_LC4MODE_LENGTH                             0x3
#define _CLC4CON_LC4MODE_MASK                               0x7
#define _CLC4CON_LC4INTN_POSN                               0x3
#define _CLC4CON_LC4INTN_POSITION                           0x3
#define _CLC4CON_LC4INTN_SIZE                               0x1
#define _CLC4CON_LC4INTN_LENGTH                             0x1
#define _CLC4CON_LC4INTN_MASK                               0x8
#define _CLC4CON_LC4INTP_POSN                               0x4
#define _CLC4CON_LC4INTP_POSITION                           0x4
#define _CLC4CON_LC4INTP_SIZE                               0x1
#define _CLC4CON_LC4INTP_LENGTH                             0x1
#define _CLC4CON_LC4INTP_MASK                               0x10
#define _CLC4CON_LC4OUT_POSN                                0x5
#define _CLC4CON_LC4OUT_POSITION                            0x5
#define _CLC4CON_LC4OUT_SIZE                                0x1
#define _CLC4CON_LC4OUT_LENGTH                              0x1
#define _CLC4CON_LC4OUT_MASK                                0x20
#define _CLC4CON_LC4EN_POSN                                 0x7
#define _CLC4CON_LC4EN_POSITION                             0x7
#define _CLC4CON_LC4EN_SIZE                                 0x1
#define _CLC4CON_LC4EN_LENGTH                               0x1
#define _CLC4CON_LC4EN_MASK                                 0x80
#define _CLC4CON_LC4MODE0_POSN                              0x0
#define _CLC4CON_LC4MODE0_POSITION                          0x0
#define _CLC4CON_LC4MODE0_SIZE                              0x1
#define _CLC4CON_LC4MODE0_LENGTH                            0x1
#define _CLC4CON_LC4MODE0_MASK                              0x1
#define _CLC4CON_LC4MODE1_POSN                              0x1
#define _CLC4CON_LC4MODE1_POSITION                          0x1
#define _CLC4CON_LC4MODE1_SIZE                              0x1
#define _CLC4CON_LC4MODE1_LENGTH                            0x1
#define _CLC4CON_LC4MODE1_MASK                              0x2
#define _CLC4CON_LC4MODE2_POSN                              0x2
#define _CLC4CON_LC4MODE2_POSITION                          0x2
#define _CLC4CON_LC4MODE2_SIZE                              0x1
#define _CLC4CON_LC4MODE2_LENGTH                            0x1
#define _CLC4CON_LC4MODE2_MASK                              0x4
#define _CLC4CON_MODE_POSN                                  0x0
#define _CLC4CON_MODE_POSITION                              0x0
#define _CLC4CON_MODE_SIZE                                  0x3
#define _CLC4CON_MODE_LENGTH                                0x3
#define _CLC4CON_MODE_MASK                                  0x7
#define _CLC4CON_INTN_POSN                                  0x3
#define _CLC4CON_INTN_POSITION                              0x3
#define _CLC4CON_INTN_SIZE                                  0x1
#define _CLC4CON_INTN_LENGTH                                0x1
#define _CLC4CON_INTN_MASK                                  0x8
#define _CLC4CON_INTP_POSN                                  0x4
#define _CLC4CON_INTP_POSITION                              0x4
#define _CLC4CON_INTP_SIZE                                  0x1
#define _CLC4CON_INTP_LENGTH                                0x1
#define _CLC4CON_INTP_MASK                                  0x10
#define _CLC4CON_OUT_POSN                                   0x5
#define _CLC4CON_OUT_POSITION                               0x5
#define _CLC4CON_OUT_SIZE                                   0x1
#define _CLC4CON_OUT_LENGTH                                 0x1
#define _CLC4CON_OUT_MASK                                   0x20
#define _CLC4CON_EN_POSN                                    0x7
#define _CLC4CON_EN_POSITION                                0x7
#define _CLC4CON_EN_SIZE                                    0x1
#define _CLC4CON_EN_LENGTH                                  0x1
#define _CLC4CON_EN_MASK                                    0x80
#define _CLC4CON_MODE0_POSN                                 0x0
#define _CLC4CON_MODE0_POSITION                             0x0
#define _CLC4CON_MODE0_SIZE                                 0x1
#define _CLC4CON_MODE0_LENGTH                               0x1
#define _CLC4CON_MODE0_MASK                                 0x1
#define _CLC4CON_MODE1_POSN                                 0x1
#define _CLC4CON_MODE1_POSITION                             0x1
#define _CLC4CON_MODE1_SIZE                                 0x1
#define _CLC4CON_MODE1_LENGTH                               0x1
#define _CLC4CON_MODE1_MASK                                 0x2
#define _CLC4CON_MODE2_POSN                                 0x2
#define _CLC4CON_MODE2_POSITION                             0x2
#define _CLC4CON_MODE2_SIZE                                 0x1
#define _CLC4CON_MODE2_LENGTH                               0x1
#define _CLC4CON_MODE2_MASK                                 0x4

// Register: CLC4POL
#define CLC4POL CLC4POL
extern volatile unsigned char           CLC4POL             __at(0x1E2F);
#ifndef _LIB_BUILD
asm("CLC4POL equ 01E2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1POL               :1;
        unsigned LC4G2POL               :1;
        unsigned LC4G3POL               :1;
        unsigned LC4G4POL               :1;
        unsigned                        :3;
        unsigned LC4POL                 :1;
    };
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLC4POLbits_t;
extern volatile CLC4POLbits_t CLC4POLbits __at(0x1E2F);
// bitfield macros
#define _CLC4POL_LC4G1POL_POSN                              0x0
#define _CLC4POL_LC4G1POL_POSITION                          0x0
#define _CLC4POL_LC4G1POL_SIZE                              0x1
#define _CLC4POL_LC4G1POL_LENGTH                            0x1
#define _CLC4POL_LC4G1POL_MASK                              0x1
#define _CLC4POL_LC4G2POL_POSN                              0x1
#define _CLC4POL_LC4G2POL_POSITION                          0x1
#define _CLC4POL_LC4G2POL_SIZE                              0x1
#define _CLC4POL_LC4G2POL_LENGTH                            0x1
#define _CLC4POL_LC4G2POL_MASK                              0x2
#define _CLC4POL_LC4G3POL_POSN                              0x2
#define _CLC4POL_LC4G3POL_POSITION                          0x2
#define _CLC4POL_LC4G3POL_SIZE                              0x1
#define _CLC4POL_LC4G3POL_LENGTH                            0x1
#define _CLC4POL_LC4G3POL_MASK                              0x4
#define _CLC4POL_LC4G4POL_POSN                              0x3
#define _CLC4POL_LC4G4POL_POSITION                          0x3
#define _CLC4POL_LC4G4POL_SIZE                              0x1
#define _CLC4POL_LC4G4POL_LENGTH                            0x1
#define _CLC4POL_LC4G4POL_MASK                              0x8
#define _CLC4POL_LC4POL_POSN                                0x7
#define _CLC4POL_LC4POL_POSITION                            0x7
#define _CLC4POL_LC4POL_SIZE                                0x1
#define _CLC4POL_LC4POL_LENGTH                              0x1
#define _CLC4POL_LC4POL_MASK                                0x80
#define _CLC4POL_G1POL_POSN                                 0x0
#define _CLC4POL_G1POL_POSITION                             0x0
#define _CLC4POL_G1POL_SIZE                                 0x1
#define _CLC4POL_G1POL_LENGTH                               0x1
#define _CLC4POL_G1POL_MASK                                 0x1
#define _CLC4POL_G2POL_POSN                                 0x1
#define _CLC4POL_G2POL_POSITION                             0x1
#define _CLC4POL_G2POL_SIZE                                 0x1
#define _CLC4POL_G2POL_LENGTH                               0x1
#define _CLC4POL_G2POL_MASK                                 0x2
#define _CLC4POL_G3POL_POSN                                 0x2
#define _CLC4POL_G3POL_POSITION                             0x2
#define _CLC4POL_G3POL_SIZE                                 0x1
#define _CLC4POL_G3POL_LENGTH                               0x1
#define _CLC4POL_G3POL_MASK                                 0x4
#define _CLC4POL_G4POL_POSN                                 0x3
#define _CLC4POL_G4POL_POSITION                             0x3
#define _CLC4POL_G4POL_SIZE                                 0x1
#define _CLC4POL_G4POL_LENGTH                               0x1
#define _CLC4POL_G4POL_MASK                                 0x8
#define _CLC4POL_POL_POSN                                   0x7
#define _CLC4POL_POL_POSITION                               0x7
#define _CLC4POL_POL_SIZE                                   0x1
#define _CLC4POL_POL_LENGTH                                 0x1
#define _CLC4POL_POL_MASK                                   0x80

// Register: CLC4SEL0
#define CLC4SEL0 CLC4SEL0
extern volatile unsigned char           CLC4SEL0            __at(0x1E30);
#ifndef _LIB_BUILD
asm("CLC4SEL0 equ 01E30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D1S0                :1;
        unsigned LC4D1S1                :1;
        unsigned LC4D1S2                :1;
        unsigned LC4D1S3                :1;
        unsigned LC4D1S4                :1;
        unsigned LC4D1S5                :1;
    };
    struct {
        unsigned LC4D1S                 :8;
    };
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLC4SEL0bits_t;
extern volatile CLC4SEL0bits_t CLC4SEL0bits __at(0x1E30);
// bitfield macros
#define _CLC4SEL0_LC4D1S0_POSN                              0x0
#define _CLC4SEL0_LC4D1S0_POSITION                          0x0
#define _CLC4SEL0_LC4D1S0_SIZE                              0x1
#define _CLC4SEL0_LC4D1S0_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S0_MASK                              0x1
#define _CLC4SEL0_LC4D1S1_POSN                              0x1
#define _CLC4SEL0_LC4D1S1_POSITION                          0x1
#define _CLC4SEL0_LC4D1S1_SIZE                              0x1
#define _CLC4SEL0_LC4D1S1_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S1_MASK                              0x2
#define _CLC4SEL0_LC4D1S2_POSN                              0x2
#define _CLC4SEL0_LC4D1S2_POSITION                          0x2
#define _CLC4SEL0_LC4D1S2_SIZE                              0x1
#define _CLC4SEL0_LC4D1S2_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S2_MASK                              0x4
#define _CLC4SEL0_LC4D1S3_POSN                              0x3
#define _CLC4SEL0_LC4D1S3_POSITION                          0x3
#define _CLC4SEL0_LC4D1S3_SIZE                              0x1
#define _CLC4SEL0_LC4D1S3_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S3_MASK                              0x8
#define _CLC4SEL0_LC4D1S4_POSN                              0x4
#define _CLC4SEL0_LC4D1S4_POSITION                          0x4
#define _CLC4SEL0_LC4D1S4_SIZE                              0x1
#define _CLC4SEL0_LC4D1S4_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S4_MASK                              0x10
#define _CLC4SEL0_LC4D1S5_POSN                              0x5
#define _CLC4SEL0_LC4D1S5_POSITION                          0x5
#define _CLC4SEL0_LC4D1S5_SIZE                              0x1
#define _CLC4SEL0_LC4D1S5_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S5_MASK                              0x20
#define _CLC4SEL0_LC4D1S_POSN                               0x0
#define _CLC4SEL0_LC4D1S_POSITION                           0x0
#define _CLC4SEL0_LC4D1S_SIZE                               0x8
#define _CLC4SEL0_LC4D1S_LENGTH                             0x8
#define _CLC4SEL0_LC4D1S_MASK                               0xFF
#define _CLC4SEL0_D1S_POSN                                  0x0
#define _CLC4SEL0_D1S_POSITION                              0x0
#define _CLC4SEL0_D1S_SIZE                                  0x8
#define _CLC4SEL0_D1S_LENGTH                                0x8
#define _CLC4SEL0_D1S_MASK                                  0xFF
#define _CLC4SEL0_D1S0_POSN                                 0x0
#define _CLC4SEL0_D1S0_POSITION                             0x0
#define _CLC4SEL0_D1S0_SIZE                                 0x1
#define _CLC4SEL0_D1S0_LENGTH                               0x1
#define _CLC4SEL0_D1S0_MASK                                 0x1
#define _CLC4SEL0_D1S1_POSN                                 0x1
#define _CLC4SEL0_D1S1_POSITION                             0x1
#define _CLC4SEL0_D1S1_SIZE                                 0x1
#define _CLC4SEL0_D1S1_LENGTH                               0x1
#define _CLC4SEL0_D1S1_MASK                                 0x2
#define _CLC4SEL0_D1S2_POSN                                 0x2
#define _CLC4SEL0_D1S2_POSITION                             0x2
#define _CLC4SEL0_D1S2_SIZE                                 0x1
#define _CLC4SEL0_D1S2_LENGTH                               0x1
#define _CLC4SEL0_D1S2_MASK                                 0x4
#define _CLC4SEL0_D1S3_POSN                                 0x3
#define _CLC4SEL0_D1S3_POSITION                             0x3
#define _CLC4SEL0_D1S3_SIZE                                 0x1
#define _CLC4SEL0_D1S3_LENGTH                               0x1
#define _CLC4SEL0_D1S3_MASK                                 0x8
#define _CLC4SEL0_D1S4_POSN                                 0x4
#define _CLC4SEL0_D1S4_POSITION                             0x4
#define _CLC4SEL0_D1S4_SIZE                                 0x1
#define _CLC4SEL0_D1S4_LENGTH                               0x1
#define _CLC4SEL0_D1S4_MASK                                 0x10
#define _CLC4SEL0_D1S5_POSN                                 0x5
#define _CLC4SEL0_D1S5_POSITION                             0x5
#define _CLC4SEL0_D1S5_SIZE                                 0x1
#define _CLC4SEL0_D1S5_LENGTH                               0x1
#define _CLC4SEL0_D1S5_MASK                                 0x20

// Register: CLC4SEL1
#define CLC4SEL1 CLC4SEL1
extern volatile unsigned char           CLC4SEL1            __at(0x1E31);
#ifndef _LIB_BUILD
asm("CLC4SEL1 equ 01E31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D2S0                :1;
        unsigned LC4D2S1                :1;
        unsigned LC4D2S2                :1;
        unsigned LC4D2S3                :1;
        unsigned LC4D2S4                :1;
        unsigned LC4D2S5                :1;
    };
    struct {
        unsigned LC4D2S                 :8;
    };
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLC4SEL1bits_t;
extern volatile CLC4SEL1bits_t CLC4SEL1bits __at(0x1E31);
// bitfield macros
#define _CLC4SEL1_LC4D2S0_POSN                              0x0
#define _CLC4SEL1_LC4D2S0_POSITION                          0x0
#define _CLC4SEL1_LC4D2S0_SIZE                              0x1
#define _CLC4SEL1_LC4D2S0_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S0_MASK                              0x1
#define _CLC4SEL1_LC4D2S1_POSN                              0x1
#define _CLC4SEL1_LC4D2S1_POSITION                          0x1
#define _CLC4SEL1_LC4D2S1_SIZE                              0x1
#define _CLC4SEL1_LC4D2S1_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S1_MASK                              0x2
#define _CLC4SEL1_LC4D2S2_POSN                              0x2
#define _CLC4SEL1_LC4D2S2_POSITION                          0x2
#define _CLC4SEL1_LC4D2S2_SIZE                              0x1
#define _CLC4SEL1_LC4D2S2_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S2_MASK                              0x4
#define _CLC4SEL1_LC4D2S3_POSN                              0x3
#define _CLC4SEL1_LC4D2S3_POSITION                          0x3
#define _CLC4SEL1_LC4D2S3_SIZE                              0x1
#define _CLC4SEL1_LC4D2S3_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S3_MASK                              0x8
#define _CLC4SEL1_LC4D2S4_POSN                              0x4
#define _CLC4SEL1_LC4D2S4_POSITION                          0x4
#define _CLC4SEL1_LC4D2S4_SIZE                              0x1
#define _CLC4SEL1_LC4D2S4_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S4_MASK                              0x10
#define _CLC4SEL1_LC4D2S5_POSN                              0x5
#define _CLC4SEL1_LC4D2S5_POSITION                          0x5
#define _CLC4SEL1_LC4D2S5_SIZE                              0x1
#define _CLC4SEL1_LC4D2S5_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S5_MASK                              0x20
#define _CLC4SEL1_LC4D2S_POSN                               0x0
#define _CLC4SEL1_LC4D2S_POSITION                           0x0
#define _CLC4SEL1_LC4D2S_SIZE                               0x8
#define _CLC4SEL1_LC4D2S_LENGTH                             0x8
#define _CLC4SEL1_LC4D2S_MASK                               0xFF
#define _CLC4SEL1_D2S_POSN                                  0x0
#define _CLC4SEL1_D2S_POSITION                              0x0
#define _CLC4SEL1_D2S_SIZE                                  0x8
#define _CLC4SEL1_D2S_LENGTH                                0x8
#define _CLC4SEL1_D2S_MASK                                  0xFF
#define _CLC4SEL1_D2S0_POSN                                 0x0
#define _CLC4SEL1_D2S0_POSITION                             0x0
#define _CLC4SEL1_D2S0_SIZE                                 0x1
#define _CLC4SEL1_D2S0_LENGTH                               0x1
#define _CLC4SEL1_D2S0_MASK                                 0x1
#define _CLC4SEL1_D2S1_POSN                                 0x1
#define _CLC4SEL1_D2S1_POSITION                             0x1
#define _CLC4SEL1_D2S1_SIZE                                 0x1
#define _CLC4SEL1_D2S1_LENGTH                               0x1
#define _CLC4SEL1_D2S1_MASK                                 0x2
#define _CLC4SEL1_D2S2_POSN                                 0x2
#define _CLC4SEL1_D2S2_POSITION                             0x2
#define _CLC4SEL1_D2S2_SIZE                                 0x1
#define _CLC4SEL1_D2S2_LENGTH                               0x1
#define _CLC4SEL1_D2S2_MASK                                 0x4
#define _CLC4SEL1_D2S3_POSN                                 0x3
#define _CLC4SEL1_D2S3_POSITION                             0x3
#define _CLC4SEL1_D2S3_SIZE                                 0x1
#define _CLC4SEL1_D2S3_LENGTH                               0x1
#define _CLC4SEL1_D2S3_MASK                                 0x8
#define _CLC4SEL1_D2S4_POSN                                 0x4
#define _CLC4SEL1_D2S4_POSITION                             0x4
#define _CLC4SEL1_D2S4_SIZE                                 0x1
#define _CLC4SEL1_D2S4_LENGTH                               0x1
#define _CLC4SEL1_D2S4_MASK                                 0x10
#define _CLC4SEL1_D2S5_POSN                                 0x5
#define _CLC4SEL1_D2S5_POSITION                             0x5
#define _CLC4SEL1_D2S5_SIZE                                 0x1
#define _CLC4SEL1_D2S5_LENGTH                               0x1
#define _CLC4SEL1_D2S5_MASK                                 0x20

// Register: CLC4SEL2
#define CLC4SEL2 CLC4SEL2
extern volatile unsigned char           CLC4SEL2            __at(0x1E32);
#ifndef _LIB_BUILD
asm("CLC4SEL2 equ 01E32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D3S0                :1;
        unsigned LC4D3S1                :1;
        unsigned LC4D3S2                :1;
        unsigned LC4D3S3                :1;
        unsigned LC4D3S4                :1;
        unsigned LC4D3S5                :1;
    };
    struct {
        unsigned LC4D3S                 :8;
    };
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLC4SEL2bits_t;
extern volatile CLC4SEL2bits_t CLC4SEL2bits __at(0x1E32);
// bitfield macros
#define _CLC4SEL2_LC4D3S0_POSN                              0x0
#define _CLC4SEL2_LC4D3S0_POSITION                          0x0
#define _CLC4SEL2_LC4D3S0_SIZE                              0x1
#define _CLC4SEL2_LC4D3S0_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S0_MASK                              0x1
#define _CLC4SEL2_LC4D3S1_POSN                              0x1
#define _CLC4SEL2_LC4D3S1_POSITION                          0x1
#define _CLC4SEL2_LC4D3S1_SIZE                              0x1
#define _CLC4SEL2_LC4D3S1_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S1_MASK                              0x2
#define _CLC4SEL2_LC4D3S2_POSN                              0x2
#define _CLC4SEL2_LC4D3S2_POSITION                          0x2
#define _CLC4SEL2_LC4D3S2_SIZE                              0x1
#define _CLC4SEL2_LC4D3S2_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S2_MASK                              0x4
#define _CLC4SEL2_LC4D3S3_POSN                              0x3
#define _CLC4SEL2_LC4D3S3_POSITION                          0x3
#define _CLC4SEL2_LC4D3S3_SIZE                              0x1
#define _CLC4SEL2_LC4D3S3_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S3_MASK                              0x8
#define _CLC4SEL2_LC4D3S4_POSN                              0x4
#define _CLC4SEL2_LC4D3S4_POSITION                          0x4
#define _CLC4SEL2_LC4D3S4_SIZE                              0x1
#define _CLC4SEL2_LC4D3S4_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S4_MASK                              0x10
#define _CLC4SEL2_LC4D3S5_POSN                              0x5
#define _CLC4SEL2_LC4D3S5_POSITION                          0x5
#define _CLC4SEL2_LC4D3S5_SIZE                              0x1
#define _CLC4SEL2_LC4D3S5_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S5_MASK                              0x20
#define _CLC4SEL2_LC4D3S_POSN                               0x0
#define _CLC4SEL2_LC4D3S_POSITION                           0x0
#define _CLC4SEL2_LC4D3S_SIZE                               0x8
#define _CLC4SEL2_LC4D3S_LENGTH                             0x8
#define _CLC4SEL2_LC4D3S_MASK                               0xFF
#define _CLC4SEL2_D3S_POSN                                  0x0
#define _CLC4SEL2_D3S_POSITION                              0x0
#define _CLC4SEL2_D3S_SIZE                                  0x8
#define _CLC4SEL2_D3S_LENGTH                                0x8
#define _CLC4SEL2_D3S_MASK                                  0xFF
#define _CLC4SEL2_D3S0_POSN                                 0x0
#define _CLC4SEL2_D3S0_POSITION                             0x0
#define _CLC4SEL2_D3S0_SIZE                                 0x1
#define _CLC4SEL2_D3S0_LENGTH                               0x1
#define _CLC4SEL2_D3S0_MASK                                 0x1
#define _CLC4SEL2_D3S1_POSN                                 0x1
#define _CLC4SEL2_D3S1_POSITION                             0x1
#define _CLC4SEL2_D3S1_SIZE                                 0x1
#define _CLC4SEL2_D3S1_LENGTH                               0x1
#define _CLC4SEL2_D3S1_MASK                                 0x2
#define _CLC4SEL2_D3S2_POSN                                 0x2
#define _CLC4SEL2_D3S2_POSITION                             0x2
#define _CLC4SEL2_D3S2_SIZE                                 0x1
#define _CLC4SEL2_D3S2_LENGTH                               0x1
#define _CLC4SEL2_D3S2_MASK                                 0x4
#define _CLC4SEL2_D3S3_POSN                                 0x3
#define _CLC4SEL2_D3S3_POSITION                             0x3
#define _CLC4SEL2_D3S3_SIZE                                 0x1
#define _CLC4SEL2_D3S3_LENGTH                               0x1
#define _CLC4SEL2_D3S3_MASK                                 0x8
#define _CLC4SEL2_D3S4_POSN                                 0x4
#define _CLC4SEL2_D3S4_POSITION                             0x4
#define _CLC4SEL2_D3S4_SIZE                                 0x1
#define _CLC4SEL2_D3S4_LENGTH                               0x1
#define _CLC4SEL2_D3S4_MASK                                 0x10
#define _CLC4SEL2_D3S5_POSN                                 0x5
#define _CLC4SEL2_D3S5_POSITION                             0x5
#define _CLC4SEL2_D3S5_SIZE                                 0x1
#define _CLC4SEL2_D3S5_LENGTH                               0x1
#define _CLC4SEL2_D3S5_MASK                                 0x20

// Register: CLC4SEL3
#define CLC4SEL3 CLC4SEL3
extern volatile unsigned char           CLC4SEL3            __at(0x1E33);
#ifndef _LIB_BUILD
asm("CLC4SEL3 equ 01E33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4D4S0                :1;
        unsigned LC4D4S1                :1;
        unsigned LC4D4S2                :1;
        unsigned LC4D4S3                :1;
        unsigned LC4D4S4                :1;
        unsigned LC4D4S5                :1;
    };
    struct {
        unsigned LC4D4S                 :8;
    };
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLC4SEL3bits_t;
extern volatile CLC4SEL3bits_t CLC4SEL3bits __at(0x1E33);
// bitfield macros
#define _CLC4SEL3_LC4D4S0_POSN                              0x0
#define _CLC4SEL3_LC4D4S0_POSITION                          0x0
#define _CLC4SEL3_LC4D4S0_SIZE                              0x1
#define _CLC4SEL3_LC4D4S0_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S0_MASK                              0x1
#define _CLC4SEL3_LC4D4S1_POSN                              0x1
#define _CLC4SEL3_LC4D4S1_POSITION                          0x1
#define _CLC4SEL3_LC4D4S1_SIZE                              0x1
#define _CLC4SEL3_LC4D4S1_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S1_MASK                              0x2
#define _CLC4SEL3_LC4D4S2_POSN                              0x2
#define _CLC4SEL3_LC4D4S2_POSITION                          0x2
#define _CLC4SEL3_LC4D4S2_SIZE                              0x1
#define _CLC4SEL3_LC4D4S2_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S2_MASK                              0x4
#define _CLC4SEL3_LC4D4S3_POSN                              0x3
#define _CLC4SEL3_LC4D4S3_POSITION                          0x3
#define _CLC4SEL3_LC4D4S3_SIZE                              0x1
#define _CLC4SEL3_LC4D4S3_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S3_MASK                              0x8
#define _CLC4SEL3_LC4D4S4_POSN                              0x4
#define _CLC4SEL3_LC4D4S4_POSITION                          0x4
#define _CLC4SEL3_LC4D4S4_SIZE                              0x1
#define _CLC4SEL3_LC4D4S4_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S4_MASK                              0x10
#define _CLC4SEL3_LC4D4S5_POSN                              0x5
#define _CLC4SEL3_LC4D4S5_POSITION                          0x5
#define _CLC4SEL3_LC4D4S5_SIZE                              0x1
#define _CLC4SEL3_LC4D4S5_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S5_MASK                              0x20
#define _CLC4SEL3_LC4D4S_POSN                               0x0
#define _CLC4SEL3_LC4D4S_POSITION                           0x0
#define _CLC4SEL3_LC4D4S_SIZE                               0x8
#define _CLC4SEL3_LC4D4S_LENGTH                             0x8
#define _CLC4SEL3_LC4D4S_MASK                               0xFF
#define _CLC4SEL3_D4S_POSN                                  0x0
#define _CLC4SEL3_D4S_POSITION                              0x0
#define _CLC4SEL3_D4S_SIZE                                  0x8
#define _CLC4SEL3_D4S_LENGTH                                0x8
#define _CLC4SEL3_D4S_MASK                                  0xFF
#define _CLC4SEL3_D4S0_POSN                                 0x0
#define _CLC4SEL3_D4S0_POSITION                             0x0
#define _CLC4SEL3_D4S0_SIZE                                 0x1
#define _CLC4SEL3_D4S0_LENGTH                               0x1
#define _CLC4SEL3_D4S0_MASK                                 0x1
#define _CLC4SEL3_D4S1_POSN                                 0x1
#define _CLC4SEL3_D4S1_POSITION                             0x1
#define _CLC4SEL3_D4S1_SIZE                                 0x1
#define _CLC4SEL3_D4S1_LENGTH                               0x1
#define _CLC4SEL3_D4S1_MASK                                 0x2
#define _CLC4SEL3_D4S2_POSN                                 0x2
#define _CLC4SEL3_D4S2_POSITION                             0x2
#define _CLC4SEL3_D4S2_SIZE                                 0x1
#define _CLC4SEL3_D4S2_LENGTH                               0x1
#define _CLC4SEL3_D4S2_MASK                                 0x4
#define _CLC4SEL3_D4S3_POSN                                 0x3
#define _CLC4SEL3_D4S3_POSITION                             0x3
#define _CLC4SEL3_D4S3_SIZE                                 0x1
#define _CLC4SEL3_D4S3_LENGTH                               0x1
#define _CLC4SEL3_D4S3_MASK                                 0x8
#define _CLC4SEL3_D4S4_POSN                                 0x4
#define _CLC4SEL3_D4S4_POSITION                             0x4
#define _CLC4SEL3_D4S4_SIZE                                 0x1
#define _CLC4SEL3_D4S4_LENGTH                               0x1
#define _CLC4SEL3_D4S4_MASK                                 0x10
#define _CLC4SEL3_D4S5_POSN                                 0x5
#define _CLC4SEL3_D4S5_POSITION                             0x5
#define _CLC4SEL3_D4S5_SIZE                                 0x1
#define _CLC4SEL3_D4S5_LENGTH                               0x1
#define _CLC4SEL3_D4S5_MASK                                 0x20

// Register: CLC4GLS0
#define CLC4GLS0 CLC4GLS0
extern volatile unsigned char           CLC4GLS0            __at(0x1E34);
#ifndef _LIB_BUILD
asm("CLC4GLS0 equ 01E34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G1D1N               :1;
        unsigned LC4G1D1T               :1;
        unsigned LC4G1D2N               :1;
        unsigned LC4G1D2T               :1;
        unsigned LC4G1D3N               :1;
        unsigned LC4G1D3T               :1;
        unsigned LC4G1D4N               :1;
        unsigned LC4G1D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS0bits_t;
extern volatile CLC4GLS0bits_t CLC4GLS0bits __at(0x1E34);
// bitfield macros
#define _CLC4GLS0_LC4G1D1N_POSN                             0x0
#define _CLC4GLS0_LC4G1D1N_POSITION                         0x0
#define _CLC4GLS0_LC4G1D1N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1N_MASK                             0x1
#define _CLC4GLS0_LC4G1D1T_POSN                             0x1
#define _CLC4GLS0_LC4G1D1T_POSITION                         0x1
#define _CLC4GLS0_LC4G1D1T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1T_MASK                             0x2
#define _CLC4GLS0_LC4G1D2N_POSN                             0x2
#define _CLC4GLS0_LC4G1D2N_POSITION                         0x2
#define _CLC4GLS0_LC4G1D2N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2N_MASK                             0x4
#define _CLC4GLS0_LC4G1D2T_POSN                             0x3
#define _CLC4GLS0_LC4G1D2T_POSITION                         0x3
#define _CLC4GLS0_LC4G1D2T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2T_MASK                             0x8
#define _CLC4GLS0_LC4G1D3N_POSN                             0x4
#define _CLC4GLS0_LC4G1D3N_POSITION                         0x4
#define _CLC4GLS0_LC4G1D3N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3N_MASK                             0x10
#define _CLC4GLS0_LC4G1D3T_POSN                             0x5
#define _CLC4GLS0_LC4G1D3T_POSITION                         0x5
#define _CLC4GLS0_LC4G1D3T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3T_MASK                             0x20
#define _CLC4GLS0_LC4G1D4N_POSN                             0x6
#define _CLC4GLS0_LC4G1D4N_POSITION                         0x6
#define _CLC4GLS0_LC4G1D4N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4N_MASK                             0x40
#define _CLC4GLS0_LC4G1D4T_POSN                             0x7
#define _CLC4GLS0_LC4G1D4T_POSITION                         0x7
#define _CLC4GLS0_LC4G1D4T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4T_MASK                             0x80
#define _CLC4GLS0_D1N_POSN                                  0x0
#define _CLC4GLS0_D1N_POSITION                              0x0
#define _CLC4GLS0_D1N_SIZE                                  0x1
#define _CLC4GLS0_D1N_LENGTH                                0x1
#define _CLC4GLS0_D1N_MASK                                  0x1
#define _CLC4GLS0_D1T_POSN                                  0x1
#define _CLC4GLS0_D1T_POSITION                              0x1
#define _CLC4GLS0_D1T_SIZE                                  0x1
#define _CLC4GLS0_D1T_LENGTH                                0x1
#define _CLC4GLS0_D1T_MASK                                  0x2
#define _CLC4GLS0_D2N_POSN                                  0x2
#define _CLC4GLS0_D2N_POSITION                              0x2
#define _CLC4GLS0_D2N_SIZE                                  0x1
#define _CLC4GLS0_D2N_LENGTH                                0x1
#define _CLC4GLS0_D2N_MASK                                  0x4
#define _CLC4GLS0_D2T_POSN                                  0x3
#define _CLC4GLS0_D2T_POSITION                              0x3
#define _CLC4GLS0_D2T_SIZE                                  0x1
#define _CLC4GLS0_D2T_LENGTH                                0x1
#define _CLC4GLS0_D2T_MASK                                  0x8
#define _CLC4GLS0_D3N_POSN                                  0x4
#define _CLC4GLS0_D3N_POSITION                              0x4
#define _CLC4GLS0_D3N_SIZE                                  0x1
#define _CLC4GLS0_D3N_LENGTH                                0x1
#define _CLC4GLS0_D3N_MASK                                  0x10
#define _CLC4GLS0_D3T_POSN                                  0x5
#define _CLC4GLS0_D3T_POSITION                              0x5
#define _CLC4GLS0_D3T_SIZE                                  0x1
#define _CLC4GLS0_D3T_LENGTH                                0x1
#define _CLC4GLS0_D3T_MASK                                  0x20
#define _CLC4GLS0_D4N_POSN                                  0x6
#define _CLC4GLS0_D4N_POSITION                              0x6
#define _CLC4GLS0_D4N_SIZE                                  0x1
#define _CLC4GLS0_D4N_LENGTH                                0x1
#define _CLC4GLS0_D4N_MASK                                  0x40
#define _CLC4GLS0_D4T_POSN                                  0x7
#define _CLC4GLS0_D4T_POSITION                              0x7
#define _CLC4GLS0_D4T_SIZE                                  0x1
#define _CLC4GLS0_D4T_LENGTH                                0x1
#define _CLC4GLS0_D4T_MASK                                  0x80

// Register: CLC4GLS1
#define CLC4GLS1 CLC4GLS1
extern volatile unsigned char           CLC4GLS1            __at(0x1E35);
#ifndef _LIB_BUILD
asm("CLC4GLS1 equ 01E35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G2D1N               :1;
        unsigned LC4G2D1T               :1;
        unsigned LC4G2D2N               :1;
        unsigned LC4G2D2T               :1;
        unsigned LC4G2D3N               :1;
        unsigned LC4G2D3T               :1;
        unsigned LC4G2D4N               :1;
        unsigned LC4G2D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS1bits_t;
extern volatile CLC4GLS1bits_t CLC4GLS1bits __at(0x1E35);
// bitfield macros
#define _CLC4GLS1_LC4G2D1N_POSN                             0x0
#define _CLC4GLS1_LC4G2D1N_POSITION                         0x0
#define _CLC4GLS1_LC4G2D1N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1N_MASK                             0x1
#define _CLC4GLS1_LC4G2D1T_POSN                             0x1
#define _CLC4GLS1_LC4G2D1T_POSITION                         0x1
#define _CLC4GLS1_LC4G2D1T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1T_MASK                             0x2
#define _CLC4GLS1_LC4G2D2N_POSN                             0x2
#define _CLC4GLS1_LC4G2D2N_POSITION                         0x2
#define _CLC4GLS1_LC4G2D2N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2N_MASK                             0x4
#define _CLC4GLS1_LC4G2D2T_POSN                             0x3
#define _CLC4GLS1_LC4G2D2T_POSITION                         0x3
#define _CLC4GLS1_LC4G2D2T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2T_MASK                             0x8
#define _CLC4GLS1_LC4G2D3N_POSN                             0x4
#define _CLC4GLS1_LC4G2D3N_POSITION                         0x4
#define _CLC4GLS1_LC4G2D3N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3N_MASK                             0x10
#define _CLC4GLS1_LC4G2D3T_POSN                             0x5
#define _CLC4GLS1_LC4G2D3T_POSITION                         0x5
#define _CLC4GLS1_LC4G2D3T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3T_MASK                             0x20
#define _CLC4GLS1_LC4G2D4N_POSN                             0x6
#define _CLC4GLS1_LC4G2D4N_POSITION                         0x6
#define _CLC4GLS1_LC4G2D4N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4N_MASK                             0x40
#define _CLC4GLS1_LC4G2D4T_POSN                             0x7
#define _CLC4GLS1_LC4G2D4T_POSITION                         0x7
#define _CLC4GLS1_LC4G2D4T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4T_MASK                             0x80
#define _CLC4GLS1_D1N_POSN                                  0x0
#define _CLC4GLS1_D1N_POSITION                              0x0
#define _CLC4GLS1_D1N_SIZE                                  0x1
#define _CLC4GLS1_D1N_LENGTH                                0x1
#define _CLC4GLS1_D1N_MASK                                  0x1
#define _CLC4GLS1_D1T_POSN                                  0x1
#define _CLC4GLS1_D1T_POSITION                              0x1
#define _CLC4GLS1_D1T_SIZE                                  0x1
#define _CLC4GLS1_D1T_LENGTH                                0x1
#define _CLC4GLS1_D1T_MASK                                  0x2
#define _CLC4GLS1_D2N_POSN                                  0x2
#define _CLC4GLS1_D2N_POSITION                              0x2
#define _CLC4GLS1_D2N_SIZE                                  0x1
#define _CLC4GLS1_D2N_LENGTH                                0x1
#define _CLC4GLS1_D2N_MASK                                  0x4
#define _CLC4GLS1_D2T_POSN                                  0x3
#define _CLC4GLS1_D2T_POSITION                              0x3
#define _CLC4GLS1_D2T_SIZE                                  0x1
#define _CLC4GLS1_D2T_LENGTH                                0x1
#define _CLC4GLS1_D2T_MASK                                  0x8
#define _CLC4GLS1_D3N_POSN                                  0x4
#define _CLC4GLS1_D3N_POSITION                              0x4
#define _CLC4GLS1_D3N_SIZE                                  0x1
#define _CLC4GLS1_D3N_LENGTH                                0x1
#define _CLC4GLS1_D3N_MASK                                  0x10
#define _CLC4GLS1_D3T_POSN                                  0x5
#define _CLC4GLS1_D3T_POSITION                              0x5
#define _CLC4GLS1_D3T_SIZE                                  0x1
#define _CLC4GLS1_D3T_LENGTH                                0x1
#define _CLC4GLS1_D3T_MASK                                  0x20
#define _CLC4GLS1_D4N_POSN                                  0x6
#define _CLC4GLS1_D4N_POSITION                              0x6
#define _CLC4GLS1_D4N_SIZE                                  0x1
#define _CLC4GLS1_D4N_LENGTH                                0x1
#define _CLC4GLS1_D4N_MASK                                  0x40
#define _CLC4GLS1_D4T_POSN                                  0x7
#define _CLC4GLS1_D4T_POSITION                              0x7
#define _CLC4GLS1_D4T_SIZE                                  0x1
#define _CLC4GLS1_D4T_LENGTH                                0x1
#define _CLC4GLS1_D4T_MASK                                  0x80

// Register: CLC4GLS2
#define CLC4GLS2 CLC4GLS2
extern volatile unsigned char           CLC4GLS2            __at(0x1E36);
#ifndef _LIB_BUILD
asm("CLC4GLS2 equ 01E36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G3D1N               :1;
        unsigned LC4G3D1T               :1;
        unsigned LC4G3D2N               :1;
        unsigned LC4G3D2T               :1;
        unsigned LC4G3D3N               :1;
        unsigned LC4G3D3T               :1;
        unsigned LC4G3D4N               :1;
        unsigned LC4G3D4T               :1;
    };
    struct {
        unsigned D1N                    :1;
        unsigned D1T                    :1;
        unsigned D2N                    :1;
        unsigned D2T                    :1;
        unsigned D3N                    :1;
        unsigned D3T                    :1;
        unsigned D4N                    :1;
        unsigned D4T                    :1;
    };
} CLC4GLS2bits_t;
extern volatile CLC4GLS2bits_t CLC4GLS2bits __at(0x1E36);
// bitfield macros
#define _CLC4GLS2_LC4G3D1N_POSN                             0x0
#define _CLC4GLS2_LC4G3D1N_POSITION                         0x0
#define _CLC4GLS2_LC4G3D1N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1N_MASK                             0x1
#define _CLC4GLS2_LC4G3D1T_POSN                             0x1
#define _CLC4GLS2_LC4G3D1T_POSITION                         0x1
#define _CLC4GLS2_LC4G3D1T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1T_MASK                             0x2
#define _CLC4GLS2_LC4G3D2N_POSN                             0x2
#define _CLC4GLS2_LC4G3D2N_POSITION                         0x2
#define _CLC4GLS2_LC4G3D2N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2N_MASK                             0x4
#define _CLC4GLS2_LC4G3D2T_POSN                             0x3
#define _CLC4GLS2_LC4G3D2T_POSITION                         0x3
#define _CLC4GLS2_LC4G3D2T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2T_MASK                             0x8
#define _CLC4GLS2_LC4G3D3N_POSN                             0x4
#define _CLC4GLS2_LC4G3D3N_POSITION                         0x4
#define _CLC4GLS2_LC4G3D3N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3N_MASK                             0x10
#define _CLC4GLS2_LC4G3D3T_POSN                             0x5
#define _CLC4GLS2_LC4G3D3T_POSITION                         0x5
#define _CLC4GLS2_LC4G3D3T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3T_MASK                             0x20
#define _CLC4GLS2_LC4G3D4N_POSN                             0x6
#define _CLC4GLS2_LC4G3D4N_POSITION                         0x6
#define _CLC4GLS2_LC4G3D4N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4N_MASK                             0x40
#define _CLC4GLS2_LC4G3D4T_POSN                             0x7
#define _CLC4GLS2_LC4G3D4T_POSITION                         0x7
#define _CLC4GLS2_LC4G3D4T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4T_MASK                             0x80
#define _CLC4GLS2_D1N_POSN                                  0x0
#define _CLC4GLS2_D1N_POSITION                              0x0
#define _CLC4GLS2_D1N_SIZE                                  0x1
#define _CLC4GLS2_D1N_LENGTH                                0x1
#define _CLC4GLS2_D1N_MASK                                  0x1
#define _CLC4GLS2_D1T_POSN                                  0x1
#define _CLC4GLS2_D1T_POSITION                              0x1
#define _CLC4GLS2_D1T_SIZE                                  0x1
#define _CLC4GLS2_D1T_LENGTH                                0x1
#define _CLC4GLS2_D1T_MASK                                  0x2
#define _CLC4GLS2_D2N_POSN                                  0x2
#define _CLC4GLS2_D2N_POSITION                              0x2
#define _CLC4GLS2_D2N_SIZE                                  0x1
#define _CLC4GLS2_D2N_LENGTH                                0x1
#define _CLC4GLS2_D2N_MASK                                  0x4
#define _CLC4GLS2_D2T_POSN                                  0x3
#define _CLC4GLS2_D2T_POSITION                              0x3
#define _CLC4GLS2_D2T_SIZE                                  0x1
#define _CLC4GLS2_D2T_LENGTH                                0x1
#define _CLC4GLS2_D2T_MASK                                  0x8
#define _CLC4GLS2_D3N_POSN                                  0x4
#define _CLC4GLS2_D3N_POSITION                              0x4
#define _CLC4GLS2_D3N_SIZE                                  0x1
#define _CLC4GLS2_D3N_LENGTH                                0x1
#define _CLC4GLS2_D3N_MASK                                  0x10
#define _CLC4GLS2_D3T_POSN                                  0x5
#define _CLC4GLS2_D3T_POSITION                              0x5
#define _CLC4GLS2_D3T_SIZE                                  0x1
#define _CLC4GLS2_D3T_LENGTH                                0x1
#define _CLC4GLS2_D3T_MASK                                  0x20
#define _CLC4GLS2_D4N_POSN                                  0x6
#define _CLC4GLS2_D4N_POSITION                              0x6
#define _CLC4GLS2_D4N_SIZE                                  0x1
#define _CLC4GLS2_D4N_LENGTH                                0x1
#define _CLC4GLS2_D4N_MASK                                  0x40
#define _CLC4GLS2_D4T_POSN                                  0x7
#define _CLC4GLS2_D4T_POSITION                              0x7
#define _CLC4GLS2_D4T_SIZE                                  0x1
#define _CLC4GLS2_D4T_LENGTH                                0x1
#define _CLC4GLS2_D4T_MASK                                  0x80

// Register: CLC4GLS3
#define CLC4GLS3 CLC4GLS3
extern volatile unsigned char           CLC4GLS3            __at(0x1E37);
#ifndef _LIB_BUILD
asm("CLC4GLS3 equ 01E37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LC4G4D1N               :1;
        unsigned LC4G4D1T               :1;
        unsigned LC4G4D2N               :1;
        unsigned LC4G4D2T               :1;
        unsigned LC4G4D3N               :1;
        unsigned LC4G4D3T               :1;
        unsigned LC4G4D4N               :1;
        unsigned LC4G4D4T               :1;
    };
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLC4GLS3bits_t;
extern volatile CLC4GLS3bits_t CLC4GLS3bits __at(0x1E37);
// bitfield macros
#define _CLC4GLS3_LC4G4D1N_POSN                             0x0
#define _CLC4GLS3_LC4G4D1N_POSITION                         0x0
#define _CLC4GLS3_LC4G4D1N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1N_MASK                             0x1
#define _CLC4GLS3_LC4G4D1T_POSN                             0x1
#define _CLC4GLS3_LC4G4D1T_POSITION                         0x1
#define _CLC4GLS3_LC4G4D1T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1T_MASK                             0x2
#define _CLC4GLS3_LC4G4D2N_POSN                             0x2
#define _CLC4GLS3_LC4G4D2N_POSITION                         0x2
#define _CLC4GLS3_LC4G4D2N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2N_MASK                             0x4
#define _CLC4GLS3_LC4G4D2T_POSN                             0x3
#define _CLC4GLS3_LC4G4D2T_POSITION                         0x3
#define _CLC4GLS3_LC4G4D2T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2T_MASK                             0x8
#define _CLC4GLS3_LC4G4D3N_POSN                             0x4
#define _CLC4GLS3_LC4G4D3N_POSITION                         0x4
#define _CLC4GLS3_LC4G4D3N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3N_MASK                             0x10
#define _CLC4GLS3_LC4G4D3T_POSN                             0x5
#define _CLC4GLS3_LC4G4D3T_POSITION                         0x5
#define _CLC4GLS3_LC4G4D3T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3T_MASK                             0x20
#define _CLC4GLS3_LC4G4D4N_POSN                             0x6
#define _CLC4GLS3_LC4G4D4N_POSITION                         0x6
#define _CLC4GLS3_LC4G4D4N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4N_MASK                             0x40
#define _CLC4GLS3_LC4G4D4T_POSN                             0x7
#define _CLC4GLS3_LC4G4D4T_POSITION                         0x7
#define _CLC4GLS3_LC4G4D4T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4T_MASK                             0x80
#define _CLC4GLS3_G4D1N_POSN                                0x0
#define _CLC4GLS3_G4D1N_POSITION                            0x0
#define _CLC4GLS3_G4D1N_SIZE                                0x1
#define _CLC4GLS3_G4D1N_LENGTH                              0x1
#define _CLC4GLS3_G4D1N_MASK                                0x1
#define _CLC4GLS3_G4D1T_POSN                                0x1
#define _CLC4GLS3_G4D1T_POSITION                            0x1
#define _CLC4GLS3_G4D1T_SIZE                                0x1
#define _CLC4GLS3_G4D1T_LENGTH                              0x1
#define _CLC4GLS3_G4D1T_MASK                                0x2
#define _CLC4GLS3_G4D2N_POSN                                0x2
#define _CLC4GLS3_G4D2N_POSITION                            0x2
#define _CLC4GLS3_G4D2N_SIZE                                0x1
#define _CLC4GLS3_G4D2N_LENGTH                              0x1
#define _CLC4GLS3_G4D2N_MASK                                0x4
#define _CLC4GLS3_G4D2T_POSN                                0x3
#define _CLC4GLS3_G4D2T_POSITION                            0x3
#define _CLC4GLS3_G4D2T_SIZE                                0x1
#define _CLC4GLS3_G4D2T_LENGTH                              0x1
#define _CLC4GLS3_G4D2T_MASK                                0x8
#define _CLC4GLS3_G4D3N_POSN                                0x4
#define _CLC4GLS3_G4D3N_POSITION                            0x4
#define _CLC4GLS3_G4D3N_SIZE                                0x1
#define _CLC4GLS3_G4D3N_LENGTH                              0x1
#define _CLC4GLS3_G4D3N_MASK                                0x10
#define _CLC4GLS3_G4D3T_POSN                                0x5
#define _CLC4GLS3_G4D3T_POSITION                            0x5
#define _CLC4GLS3_G4D3T_SIZE                                0x1
#define _CLC4GLS3_G4D3T_LENGTH                              0x1
#define _CLC4GLS3_G4D3T_MASK                                0x20
#define _CLC4GLS3_G4D4N_POSN                                0x6
#define _CLC4GLS3_G4D4N_POSITION                            0x6
#define _CLC4GLS3_G4D4N_SIZE                                0x1
#define _CLC4GLS3_G4D4N_LENGTH                              0x1
#define _CLC4GLS3_G4D4N_MASK                                0x40
#define _CLC4GLS3_G4D4T_POSN                                0x7
#define _CLC4GLS3_G4D4T_POSITION                            0x7
#define _CLC4GLS3_G4D4T_SIZE                                0x1
#define _CLC4GLS3_G4D4T_LENGTH                              0x1
#define _CLC4GLS3_G4D4T_MASK                                0x80

// Register: RF0PPS
#define RF0PPS RF0PPS
extern volatile unsigned char           RF0PPS              __at(0x1E38);
#ifndef _LIB_BUILD
asm("RF0PPS equ 01E38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF0PPS0                :1;
        unsigned RF0PPS1                :1;
        unsigned RF0PPS2                :1;
        unsigned RF0PPS3                :1;
        unsigned RF0PPS4                :1;
        unsigned RF0PPS5                :1;
    };
} RF0PPSbits_t;
extern volatile RF0PPSbits_t RF0PPSbits __at(0x1E38);
// bitfield macros
#define _RF0PPS_RF0PPS0_POSN                                0x0
#define _RF0PPS_RF0PPS0_POSITION                            0x0
#define _RF0PPS_RF0PPS0_SIZE                                0x1
#define _RF0PPS_RF0PPS0_LENGTH                              0x1
#define _RF0PPS_RF0PPS0_MASK                                0x1
#define _RF0PPS_RF0PPS1_POSN                                0x1
#define _RF0PPS_RF0PPS1_POSITION                            0x1
#define _RF0PPS_RF0PPS1_SIZE                                0x1
#define _RF0PPS_RF0PPS1_LENGTH                              0x1
#define _RF0PPS_RF0PPS1_MASK                                0x2
#define _RF0PPS_RF0PPS2_POSN                                0x2
#define _RF0PPS_RF0PPS2_POSITION                            0x2
#define _RF0PPS_RF0PPS2_SIZE                                0x1
#define _RF0PPS_RF0PPS2_LENGTH                              0x1
#define _RF0PPS_RF0PPS2_MASK                                0x4
#define _RF0PPS_RF0PPS3_POSN                                0x3
#define _RF0PPS_RF0PPS3_POSITION                            0x3
#define _RF0PPS_RF0PPS3_SIZE                                0x1
#define _RF0PPS_RF0PPS3_LENGTH                              0x1
#define _RF0PPS_RF0PPS3_MASK                                0x8
#define _RF0PPS_RF0PPS4_POSN                                0x4
#define _RF0PPS_RF0PPS4_POSITION                            0x4
#define _RF0PPS_RF0PPS4_SIZE                                0x1
#define _RF0PPS_RF0PPS4_LENGTH                              0x1
#define _RF0PPS_RF0PPS4_MASK                                0x10
#define _RF0PPS_RF0PPS5_POSN                                0x5
#define _RF0PPS_RF0PPS5_POSITION                            0x5
#define _RF0PPS_RF0PPS5_SIZE                                0x1
#define _RF0PPS_RF0PPS5_LENGTH                              0x1
#define _RF0PPS_RF0PPS5_MASK                                0x20

// Register: RF1PPS
#define RF1PPS RF1PPS
extern volatile unsigned char           RF1PPS              __at(0x1E39);
#ifndef _LIB_BUILD
asm("RF1PPS equ 01E39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF1PPS0                :1;
        unsigned RF1PPS1                :1;
        unsigned RF1PPS2                :1;
        unsigned RF1PPS3                :1;
        unsigned RF1PPS4                :1;
        unsigned RF1PPS5                :1;
    };
} RF1PPSbits_t;
extern volatile RF1PPSbits_t RF1PPSbits __at(0x1E39);
// bitfield macros
#define _RF1PPS_RF1PPS0_POSN                                0x0
#define _RF1PPS_RF1PPS0_POSITION                            0x0
#define _RF1PPS_RF1PPS0_SIZE                                0x1
#define _RF1PPS_RF1PPS0_LENGTH                              0x1
#define _RF1PPS_RF1PPS0_MASK                                0x1
#define _RF1PPS_RF1PPS1_POSN                                0x1
#define _RF1PPS_RF1PPS1_POSITION                            0x1
#define _RF1PPS_RF1PPS1_SIZE                                0x1
#define _RF1PPS_RF1PPS1_LENGTH                              0x1
#define _RF1PPS_RF1PPS1_MASK                                0x2
#define _RF1PPS_RF1PPS2_POSN                                0x2
#define _RF1PPS_RF1PPS2_POSITION                            0x2
#define _RF1PPS_RF1PPS2_SIZE                                0x1
#define _RF1PPS_RF1PPS2_LENGTH                              0x1
#define _RF1PPS_RF1PPS2_MASK                                0x4
#define _RF1PPS_RF1PPS3_POSN                                0x3
#define _RF1PPS_RF1PPS3_POSITION                            0x3
#define _RF1PPS_RF1PPS3_SIZE                                0x1
#define _RF1PPS_RF1PPS3_LENGTH                              0x1
#define _RF1PPS_RF1PPS3_MASK                                0x8
#define _RF1PPS_RF1PPS4_POSN                                0x4
#define _RF1PPS_RF1PPS4_POSITION                            0x4
#define _RF1PPS_RF1PPS4_SIZE                                0x1
#define _RF1PPS_RF1PPS4_LENGTH                              0x1
#define _RF1PPS_RF1PPS4_MASK                                0x10
#define _RF1PPS_RF1PPS5_POSN                                0x5
#define _RF1PPS_RF1PPS5_POSITION                            0x5
#define _RF1PPS_RF1PPS5_SIZE                                0x1
#define _RF1PPS_RF1PPS5_LENGTH                              0x1
#define _RF1PPS_RF1PPS5_MASK                                0x20

// Register: RF2PPS
#define RF2PPS RF2PPS
extern volatile unsigned char           RF2PPS              __at(0x1E3A);
#ifndef _LIB_BUILD
asm("RF2PPS equ 01E3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF2PPS0                :1;
        unsigned RF2PPS1                :1;
        unsigned RF2PPS2                :1;
        unsigned RF2PPS3                :1;
        unsigned RF2PPS4                :1;
        unsigned RF2PPS5                :1;
    };
} RF2PPSbits_t;
extern volatile RF2PPSbits_t RF2PPSbits __at(0x1E3A);
// bitfield macros
#define _RF2PPS_RF2PPS0_POSN                                0x0
#define _RF2PPS_RF2PPS0_POSITION                            0x0
#define _RF2PPS_RF2PPS0_SIZE                                0x1
#define _RF2PPS_RF2PPS0_LENGTH                              0x1
#define _RF2PPS_RF2PPS0_MASK                                0x1
#define _RF2PPS_RF2PPS1_POSN                                0x1
#define _RF2PPS_RF2PPS1_POSITION                            0x1
#define _RF2PPS_RF2PPS1_SIZE                                0x1
#define _RF2PPS_RF2PPS1_LENGTH                              0x1
#define _RF2PPS_RF2PPS1_MASK                                0x2
#define _RF2PPS_RF2PPS2_POSN                                0x2
#define _RF2PPS_RF2PPS2_POSITION                            0x2
#define _RF2PPS_RF2PPS2_SIZE                                0x1
#define _RF2PPS_RF2PPS2_LENGTH                              0x1
#define _RF2PPS_RF2PPS2_MASK                                0x4
#define _RF2PPS_RF2PPS3_POSN                                0x3
#define _RF2PPS_RF2PPS3_POSITION                            0x3
#define _RF2PPS_RF2PPS3_SIZE                                0x1
#define _RF2PPS_RF2PPS3_LENGTH                              0x1
#define _RF2PPS_RF2PPS3_MASK                                0x8
#define _RF2PPS_RF2PPS4_POSN                                0x4
#define _RF2PPS_RF2PPS4_POSITION                            0x4
#define _RF2PPS_RF2PPS4_SIZE                                0x1
#define _RF2PPS_RF2PPS4_LENGTH                              0x1
#define _RF2PPS_RF2PPS4_MASK                                0x10
#define _RF2PPS_RF2PPS5_POSN                                0x5
#define _RF2PPS_RF2PPS5_POSITION                            0x5
#define _RF2PPS_RF2PPS5_SIZE                                0x1
#define _RF2PPS_RF2PPS5_LENGTH                              0x1
#define _RF2PPS_RF2PPS5_MASK                                0x20

// Register: RF3PPS
#define RF3PPS RF3PPS
extern volatile unsigned char           RF3PPS              __at(0x1E3B);
#ifndef _LIB_BUILD
asm("RF3PPS equ 01E3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF3PPS0                :1;
        unsigned RF3PPS1                :1;
        unsigned RF3PPS2                :1;
        unsigned RF3PPS3                :1;
        unsigned RF3PPS4                :1;
        unsigned RF3PPS5                :1;
    };
} RF3PPSbits_t;
extern volatile RF3PPSbits_t RF3PPSbits __at(0x1E3B);
// bitfield macros
#define _RF3PPS_RF3PPS0_POSN                                0x0
#define _RF3PPS_RF3PPS0_POSITION                            0x0
#define _RF3PPS_RF3PPS0_SIZE                                0x1
#define _RF3PPS_RF3PPS0_LENGTH                              0x1
#define _RF3PPS_RF3PPS0_MASK                                0x1
#define _RF3PPS_RF3PPS1_POSN                                0x1
#define _RF3PPS_RF3PPS1_POSITION                            0x1
#define _RF3PPS_RF3PPS1_SIZE                                0x1
#define _RF3PPS_RF3PPS1_LENGTH                              0x1
#define _RF3PPS_RF3PPS1_MASK                                0x2
#define _RF3PPS_RF3PPS2_POSN                                0x2
#define _RF3PPS_RF3PPS2_POSITION                            0x2
#define _RF3PPS_RF3PPS2_SIZE                                0x1
#define _RF3PPS_RF3PPS2_LENGTH                              0x1
#define _RF3PPS_RF3PPS2_MASK                                0x4
#define _RF3PPS_RF3PPS3_POSN                                0x3
#define _RF3PPS_RF3PPS3_POSITION                            0x3
#define _RF3PPS_RF3PPS3_SIZE                                0x1
#define _RF3PPS_RF3PPS3_LENGTH                              0x1
#define _RF3PPS_RF3PPS3_MASK                                0x8
#define _RF3PPS_RF3PPS4_POSN                                0x4
#define _RF3PPS_RF3PPS4_POSITION                            0x4
#define _RF3PPS_RF3PPS4_SIZE                                0x1
#define _RF3PPS_RF3PPS4_LENGTH                              0x1
#define _RF3PPS_RF3PPS4_MASK                                0x10
#define _RF3PPS_RF3PPS5_POSN                                0x5
#define _RF3PPS_RF3PPS5_POSITION                            0x5
#define _RF3PPS_RF3PPS5_SIZE                                0x1
#define _RF3PPS_RF3PPS5_LENGTH                              0x1
#define _RF3PPS_RF3PPS5_MASK                                0x20

// Register: RF4PPS
#define RF4PPS RF4PPS
extern volatile unsigned char           RF4PPS              __at(0x1E3C);
#ifndef _LIB_BUILD
asm("RF4PPS equ 01E3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF4PPS0                :1;
        unsigned RF4PPS1                :1;
        unsigned RF4PPS2                :1;
        unsigned RF4PPS3                :1;
        unsigned RF4PPS4                :1;
        unsigned RF4PPS5                :1;
    };
} RF4PPSbits_t;
extern volatile RF4PPSbits_t RF4PPSbits __at(0x1E3C);
// bitfield macros
#define _RF4PPS_RF4PPS0_POSN                                0x0
#define _RF4PPS_RF4PPS0_POSITION                            0x0
#define _RF4PPS_RF4PPS0_SIZE                                0x1
#define _RF4PPS_RF4PPS0_LENGTH                              0x1
#define _RF4PPS_RF4PPS0_MASK                                0x1
#define _RF4PPS_RF4PPS1_POSN                                0x1
#define _RF4PPS_RF4PPS1_POSITION                            0x1
#define _RF4PPS_RF4PPS1_SIZE                                0x1
#define _RF4PPS_RF4PPS1_LENGTH                              0x1
#define _RF4PPS_RF4PPS1_MASK                                0x2
#define _RF4PPS_RF4PPS2_POSN                                0x2
#define _RF4PPS_RF4PPS2_POSITION                            0x2
#define _RF4PPS_RF4PPS2_SIZE                                0x1
#define _RF4PPS_RF4PPS2_LENGTH                              0x1
#define _RF4PPS_RF4PPS2_MASK                                0x4
#define _RF4PPS_RF4PPS3_POSN                                0x3
#define _RF4PPS_RF4PPS3_POSITION                            0x3
#define _RF4PPS_RF4PPS3_SIZE                                0x1
#define _RF4PPS_RF4PPS3_LENGTH                              0x1
#define _RF4PPS_RF4PPS3_MASK                                0x8
#define _RF4PPS_RF4PPS4_POSN                                0x4
#define _RF4PPS_RF4PPS4_POSITION                            0x4
#define _RF4PPS_RF4PPS4_SIZE                                0x1
#define _RF4PPS_RF4PPS4_LENGTH                              0x1
#define _RF4PPS_RF4PPS4_MASK                                0x10
#define _RF4PPS_RF4PPS5_POSN                                0x5
#define _RF4PPS_RF4PPS5_POSITION                            0x5
#define _RF4PPS_RF4PPS5_SIZE                                0x1
#define _RF4PPS_RF4PPS5_LENGTH                              0x1
#define _RF4PPS_RF4PPS5_MASK                                0x20

// Register: RF5PPS
#define RF5PPS RF5PPS
extern volatile unsigned char           RF5PPS              __at(0x1E3D);
#ifndef _LIB_BUILD
asm("RF5PPS equ 01E3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF5PPS0                :1;
        unsigned RF5PPS1                :1;
        unsigned RF5PPS2                :1;
        unsigned RF5PPS3                :1;
        unsigned RF5PPS4                :1;
        unsigned RF5PPS5                :1;
    };
} RF5PPSbits_t;
extern volatile RF5PPSbits_t RF5PPSbits __at(0x1E3D);
// bitfield macros
#define _RF5PPS_RF5PPS0_POSN                                0x0
#define _RF5PPS_RF5PPS0_POSITION                            0x0
#define _RF5PPS_RF5PPS0_SIZE                                0x1
#define _RF5PPS_RF5PPS0_LENGTH                              0x1
#define _RF5PPS_RF5PPS0_MASK                                0x1
#define _RF5PPS_RF5PPS1_POSN                                0x1
#define _RF5PPS_RF5PPS1_POSITION                            0x1
#define _RF5PPS_RF5PPS1_SIZE                                0x1
#define _RF5PPS_RF5PPS1_LENGTH                              0x1
#define _RF5PPS_RF5PPS1_MASK                                0x2
#define _RF5PPS_RF5PPS2_POSN                                0x2
#define _RF5PPS_RF5PPS2_POSITION                            0x2
#define _RF5PPS_RF5PPS2_SIZE                                0x1
#define _RF5PPS_RF5PPS2_LENGTH                              0x1
#define _RF5PPS_RF5PPS2_MASK                                0x4
#define _RF5PPS_RF5PPS3_POSN                                0x3
#define _RF5PPS_RF5PPS3_POSITION                            0x3
#define _RF5PPS_RF5PPS3_SIZE                                0x1
#define _RF5PPS_RF5PPS3_LENGTH                              0x1
#define _RF5PPS_RF5PPS3_MASK                                0x8
#define _RF5PPS_RF5PPS4_POSN                                0x4
#define _RF5PPS_RF5PPS4_POSITION                            0x4
#define _RF5PPS_RF5PPS4_SIZE                                0x1
#define _RF5PPS_RF5PPS4_LENGTH                              0x1
#define _RF5PPS_RF5PPS4_MASK                                0x10
#define _RF5PPS_RF5PPS5_POSN                                0x5
#define _RF5PPS_RF5PPS5_POSITION                            0x5
#define _RF5PPS_RF5PPS5_SIZE                                0x1
#define _RF5PPS_RF5PPS5_LENGTH                              0x1
#define _RF5PPS_RF5PPS5_MASK                                0x20

// Register: RF6PPS
#define RF6PPS RF6PPS
extern volatile unsigned char           RF6PPS              __at(0x1E3E);
#ifndef _LIB_BUILD
asm("RF6PPS equ 01E3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF6PPS0                :1;
        unsigned RF6PPS1                :1;
        unsigned RF6PPS2                :1;
        unsigned RF6PPS3                :1;
        unsigned RF6PPS4                :1;
        unsigned RF6PPS5                :1;
    };
} RF6PPSbits_t;
extern volatile RF6PPSbits_t RF6PPSbits __at(0x1E3E);
// bitfield macros
#define _RF6PPS_RF6PPS0_POSN                                0x0
#define _RF6PPS_RF6PPS0_POSITION                            0x0
#define _RF6PPS_RF6PPS0_SIZE                                0x1
#define _RF6PPS_RF6PPS0_LENGTH                              0x1
#define _RF6PPS_RF6PPS0_MASK                                0x1
#define _RF6PPS_RF6PPS1_POSN                                0x1
#define _RF6PPS_RF6PPS1_POSITION                            0x1
#define _RF6PPS_RF6PPS1_SIZE                                0x1
#define _RF6PPS_RF6PPS1_LENGTH                              0x1
#define _RF6PPS_RF6PPS1_MASK                                0x2
#define _RF6PPS_RF6PPS2_POSN                                0x2
#define _RF6PPS_RF6PPS2_POSITION                            0x2
#define _RF6PPS_RF6PPS2_SIZE                                0x1
#define _RF6PPS_RF6PPS2_LENGTH                              0x1
#define _RF6PPS_RF6PPS2_MASK                                0x4
#define _RF6PPS_RF6PPS3_POSN                                0x3
#define _RF6PPS_RF6PPS3_POSITION                            0x3
#define _RF6PPS_RF6PPS3_SIZE                                0x1
#define _RF6PPS_RF6PPS3_LENGTH                              0x1
#define _RF6PPS_RF6PPS3_MASK                                0x8
#define _RF6PPS_RF6PPS4_POSN                                0x4
#define _RF6PPS_RF6PPS4_POSITION                            0x4
#define _RF6PPS_RF6PPS4_SIZE                                0x1
#define _RF6PPS_RF6PPS4_LENGTH                              0x1
#define _RF6PPS_RF6PPS4_MASK                                0x10
#define _RF6PPS_RF6PPS5_POSN                                0x5
#define _RF6PPS_RF6PPS5_POSITION                            0x5
#define _RF6PPS_RF6PPS5_SIZE                                0x1
#define _RF6PPS_RF6PPS5_LENGTH                              0x1
#define _RF6PPS_RF6PPS5_MASK                                0x20

// Register: RF7PPS
#define RF7PPS RF7PPS
extern volatile unsigned char           RF7PPS              __at(0x1E3F);
#ifndef _LIB_BUILD
asm("RF7PPS equ 01E3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RF7PPS0                :1;
        unsigned RF7PPS1                :1;
        unsigned RF7PPS2                :1;
        unsigned RF7PPS3                :1;
        unsigned RF7PPS4                :1;
        unsigned RF7PPS5                :1;
    };
} RF7PPSbits_t;
extern volatile RF7PPSbits_t RF7PPSbits __at(0x1E3F);
// bitfield macros
#define _RF7PPS_RF7PPS0_POSN                                0x0
#define _RF7PPS_RF7PPS0_POSITION                            0x0
#define _RF7PPS_RF7PPS0_SIZE                                0x1
#define _RF7PPS_RF7PPS0_LENGTH                              0x1
#define _RF7PPS_RF7PPS0_MASK                                0x1
#define _RF7PPS_RF7PPS1_POSN                                0x1
#define _RF7PPS_RF7PPS1_POSITION                            0x1
#define _RF7PPS_RF7PPS1_SIZE                                0x1
#define _RF7PPS_RF7PPS1_LENGTH                              0x1
#define _RF7PPS_RF7PPS1_MASK                                0x2
#define _RF7PPS_RF7PPS2_POSN                                0x2
#define _RF7PPS_RF7PPS2_POSITION                            0x2
#define _RF7PPS_RF7PPS2_SIZE                                0x1
#define _RF7PPS_RF7PPS2_LENGTH                              0x1
#define _RF7PPS_RF7PPS2_MASK                                0x4
#define _RF7PPS_RF7PPS3_POSN                                0x3
#define _RF7PPS_RF7PPS3_POSITION                            0x3
#define _RF7PPS_RF7PPS3_SIZE                                0x1
#define _RF7PPS_RF7PPS3_LENGTH                              0x1
#define _RF7PPS_RF7PPS3_MASK                                0x8
#define _RF7PPS_RF7PPS4_POSN                                0x4
#define _RF7PPS_RF7PPS4_POSITION                            0x4
#define _RF7PPS_RF7PPS4_SIZE                                0x1
#define _RF7PPS_RF7PPS4_LENGTH                              0x1
#define _RF7PPS_RF7PPS4_MASK                                0x10
#define _RF7PPS_RF7PPS5_POSN                                0x5
#define _RF7PPS_RF7PPS5_POSITION                            0x5
#define _RF7PPS_RF7PPS5_SIZE                                0x1
#define _RF7PPS_RF7PPS5_LENGTH                              0x1
#define _RF7PPS_RF7PPS5_MASK                                0x20

// Register: RG0PPS
#define RG0PPS RG0PPS
extern volatile unsigned char           RG0PPS              __at(0x1E40);
#ifndef _LIB_BUILD
asm("RG0PPS equ 01E40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG0PPS0                :1;
        unsigned RG0PPS1                :1;
        unsigned RG0PPS2                :1;
        unsigned RG0PPS3                :1;
        unsigned RG0PPS4                :1;
        unsigned RG0PPS5                :1;
    };
} RG0PPSbits_t;
extern volatile RG0PPSbits_t RG0PPSbits __at(0x1E40);
// bitfield macros
#define _RG0PPS_RG0PPS0_POSN                                0x0
#define _RG0PPS_RG0PPS0_POSITION                            0x0
#define _RG0PPS_RG0PPS0_SIZE                                0x1
#define _RG0PPS_RG0PPS0_LENGTH                              0x1
#define _RG0PPS_RG0PPS0_MASK                                0x1
#define _RG0PPS_RG0PPS1_POSN                                0x1
#define _RG0PPS_RG0PPS1_POSITION                            0x1
#define _RG0PPS_RG0PPS1_SIZE                                0x1
#define _RG0PPS_RG0PPS1_LENGTH                              0x1
#define _RG0PPS_RG0PPS1_MASK                                0x2
#define _RG0PPS_RG0PPS2_POSN                                0x2
#define _RG0PPS_RG0PPS2_POSITION                            0x2
#define _RG0PPS_RG0PPS2_SIZE                                0x1
#define _RG0PPS_RG0PPS2_LENGTH                              0x1
#define _RG0PPS_RG0PPS2_MASK                                0x4
#define _RG0PPS_RG0PPS3_POSN                                0x3
#define _RG0PPS_RG0PPS3_POSITION                            0x3
#define _RG0PPS_RG0PPS3_SIZE                                0x1
#define _RG0PPS_RG0PPS3_LENGTH                              0x1
#define _RG0PPS_RG0PPS3_MASK                                0x8
#define _RG0PPS_RG0PPS4_POSN                                0x4
#define _RG0PPS_RG0PPS4_POSITION                            0x4
#define _RG0PPS_RG0PPS4_SIZE                                0x1
#define _RG0PPS_RG0PPS4_LENGTH                              0x1
#define _RG0PPS_RG0PPS4_MASK                                0x10
#define _RG0PPS_RG0PPS5_POSN                                0x5
#define _RG0PPS_RG0PPS5_POSITION                            0x5
#define _RG0PPS_RG0PPS5_SIZE                                0x1
#define _RG0PPS_RG0PPS5_LENGTH                              0x1
#define _RG0PPS_RG0PPS5_MASK                                0x20

// Register: RG1PPS
#define RG1PPS RG1PPS
extern volatile unsigned char           RG1PPS              __at(0x1E41);
#ifndef _LIB_BUILD
asm("RG1PPS equ 01E41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG1PPS0                :1;
        unsigned RG1PPS1                :1;
        unsigned RG1PPS2                :1;
        unsigned RG1PPS3                :1;
        unsigned RG1PPS4                :1;
        unsigned RG1PPS5                :1;
    };
} RG1PPSbits_t;
extern volatile RG1PPSbits_t RG1PPSbits __at(0x1E41);
// bitfield macros
#define _RG1PPS_RG1PPS0_POSN                                0x0
#define _RG1PPS_RG1PPS0_POSITION                            0x0
#define _RG1PPS_RG1PPS0_SIZE                                0x1
#define _RG1PPS_RG1PPS0_LENGTH                              0x1
#define _RG1PPS_RG1PPS0_MASK                                0x1
#define _RG1PPS_RG1PPS1_POSN                                0x1
#define _RG1PPS_RG1PPS1_POSITION                            0x1
#define _RG1PPS_RG1PPS1_SIZE                                0x1
#define _RG1PPS_RG1PPS1_LENGTH                              0x1
#define _RG1PPS_RG1PPS1_MASK                                0x2
#define _RG1PPS_RG1PPS2_POSN                                0x2
#define _RG1PPS_RG1PPS2_POSITION                            0x2
#define _RG1PPS_RG1PPS2_SIZE                                0x1
#define _RG1PPS_RG1PPS2_LENGTH                              0x1
#define _RG1PPS_RG1PPS2_MASK                                0x4
#define _RG1PPS_RG1PPS3_POSN                                0x3
#define _RG1PPS_RG1PPS3_POSITION                            0x3
#define _RG1PPS_RG1PPS3_SIZE                                0x1
#define _RG1PPS_RG1PPS3_LENGTH                              0x1
#define _RG1PPS_RG1PPS3_MASK                                0x8
#define _RG1PPS_RG1PPS4_POSN                                0x4
#define _RG1PPS_RG1PPS4_POSITION                            0x4
#define _RG1PPS_RG1PPS4_SIZE                                0x1
#define _RG1PPS_RG1PPS4_LENGTH                              0x1
#define _RG1PPS_RG1PPS4_MASK                                0x10
#define _RG1PPS_RG1PPS5_POSN                                0x5
#define _RG1PPS_RG1PPS5_POSITION                            0x5
#define _RG1PPS_RG1PPS5_SIZE                                0x1
#define _RG1PPS_RG1PPS5_LENGTH                              0x1
#define _RG1PPS_RG1PPS5_MASK                                0x20

// Register: RG2PPS
#define RG2PPS RG2PPS
extern volatile unsigned char           RG2PPS              __at(0x1E42);
#ifndef _LIB_BUILD
asm("RG2PPS equ 01E42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG2PPS0                :1;
        unsigned RG2PPS1                :1;
        unsigned RG2PPS2                :1;
        unsigned RG2PPS3                :1;
        unsigned RG2PPS4                :1;
        unsigned RG2PPS5                :1;
    };
} RG2PPSbits_t;
extern volatile RG2PPSbits_t RG2PPSbits __at(0x1E42);
// bitfield macros
#define _RG2PPS_RG2PPS0_POSN                                0x0
#define _RG2PPS_RG2PPS0_POSITION                            0x0
#define _RG2PPS_RG2PPS0_SIZE                                0x1
#define _RG2PPS_RG2PPS0_LENGTH                              0x1
#define _RG2PPS_RG2PPS0_MASK                                0x1
#define _RG2PPS_RG2PPS1_POSN                                0x1
#define _RG2PPS_RG2PPS1_POSITION                            0x1
#define _RG2PPS_RG2PPS1_SIZE                                0x1
#define _RG2PPS_RG2PPS1_LENGTH                              0x1
#define _RG2PPS_RG2PPS1_MASK                                0x2
#define _RG2PPS_RG2PPS2_POSN                                0x2
#define _RG2PPS_RG2PPS2_POSITION                            0x2
#define _RG2PPS_RG2PPS2_SIZE                                0x1
#define _RG2PPS_RG2PPS2_LENGTH                              0x1
#define _RG2PPS_RG2PPS2_MASK                                0x4
#define _RG2PPS_RG2PPS3_POSN                                0x3
#define _RG2PPS_RG2PPS3_POSITION                            0x3
#define _RG2PPS_RG2PPS3_SIZE                                0x1
#define _RG2PPS_RG2PPS3_LENGTH                              0x1
#define _RG2PPS_RG2PPS3_MASK                                0x8
#define _RG2PPS_RG2PPS4_POSN                                0x4
#define _RG2PPS_RG2PPS4_POSITION                            0x4
#define _RG2PPS_RG2PPS4_SIZE                                0x1
#define _RG2PPS_RG2PPS4_LENGTH                              0x1
#define _RG2PPS_RG2PPS4_MASK                                0x10
#define _RG2PPS_RG2PPS5_POSN                                0x5
#define _RG2PPS_RG2PPS5_POSITION                            0x5
#define _RG2PPS_RG2PPS5_SIZE                                0x1
#define _RG2PPS_RG2PPS5_LENGTH                              0x1
#define _RG2PPS_RG2PPS5_MASK                                0x20

// Register: RG3PPS
#define RG3PPS RG3PPS
extern volatile unsigned char           RG3PPS              __at(0x1E43);
#ifndef _LIB_BUILD
asm("RG3PPS equ 01E43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG3PPS0                :1;
        unsigned RG3PPS1                :1;
        unsigned RG3PPS2                :1;
        unsigned RG3PPS3                :1;
        unsigned RG3PPS4                :1;
        unsigned RG3PPS5                :1;
    };
} RG3PPSbits_t;
extern volatile RG3PPSbits_t RG3PPSbits __at(0x1E43);
// bitfield macros
#define _RG3PPS_RG3PPS0_POSN                                0x0
#define _RG3PPS_RG3PPS0_POSITION                            0x0
#define _RG3PPS_RG3PPS0_SIZE                                0x1
#define _RG3PPS_RG3PPS0_LENGTH                              0x1
#define _RG3PPS_RG3PPS0_MASK                                0x1
#define _RG3PPS_RG3PPS1_POSN                                0x1
#define _RG3PPS_RG3PPS1_POSITION                            0x1
#define _RG3PPS_RG3PPS1_SIZE                                0x1
#define _RG3PPS_RG3PPS1_LENGTH                              0x1
#define _RG3PPS_RG3PPS1_MASK                                0x2
#define _RG3PPS_RG3PPS2_POSN                                0x2
#define _RG3PPS_RG3PPS2_POSITION                            0x2
#define _RG3PPS_RG3PPS2_SIZE                                0x1
#define _RG3PPS_RG3PPS2_LENGTH                              0x1
#define _RG3PPS_RG3PPS2_MASK                                0x4
#define _RG3PPS_RG3PPS3_POSN                                0x3
#define _RG3PPS_RG3PPS3_POSITION                            0x3
#define _RG3PPS_RG3PPS3_SIZE                                0x1
#define _RG3PPS_RG3PPS3_LENGTH                              0x1
#define _RG3PPS_RG3PPS3_MASK                                0x8
#define _RG3PPS_RG3PPS4_POSN                                0x4
#define _RG3PPS_RG3PPS4_POSITION                            0x4
#define _RG3PPS_RG3PPS4_SIZE                                0x1
#define _RG3PPS_RG3PPS4_LENGTH                              0x1
#define _RG3PPS_RG3PPS4_MASK                                0x10
#define _RG3PPS_RG3PPS5_POSN                                0x5
#define _RG3PPS_RG3PPS5_POSITION                            0x5
#define _RG3PPS_RG3PPS5_SIZE                                0x1
#define _RG3PPS_RG3PPS5_LENGTH                              0x1
#define _RG3PPS_RG3PPS5_MASK                                0x20

// Register: RG4PPS
#define RG4PPS RG4PPS
extern volatile unsigned char           RG4PPS              __at(0x1E44);
#ifndef _LIB_BUILD
asm("RG4PPS equ 01E44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG4PPS0                :1;
        unsigned RG4PPS1                :1;
        unsigned RG4PPS2                :1;
        unsigned RG4PPS3                :1;
        unsigned RG4PPS4                :1;
        unsigned RG4PPS5                :1;
    };
} RG4PPSbits_t;
extern volatile RG4PPSbits_t RG4PPSbits __at(0x1E44);
// bitfield macros
#define _RG4PPS_RG4PPS0_POSN                                0x0
#define _RG4PPS_RG4PPS0_POSITION                            0x0
#define _RG4PPS_RG4PPS0_SIZE                                0x1
#define _RG4PPS_RG4PPS0_LENGTH                              0x1
#define _RG4PPS_RG4PPS0_MASK                                0x1
#define _RG4PPS_RG4PPS1_POSN                                0x1
#define _RG4PPS_RG4PPS1_POSITION                            0x1
#define _RG4PPS_RG4PPS1_SIZE                                0x1
#define _RG4PPS_RG4PPS1_LENGTH                              0x1
#define _RG4PPS_RG4PPS1_MASK                                0x2
#define _RG4PPS_RG4PPS2_POSN                                0x2
#define _RG4PPS_RG4PPS2_POSITION                            0x2
#define _RG4PPS_RG4PPS2_SIZE                                0x1
#define _RG4PPS_RG4PPS2_LENGTH                              0x1
#define _RG4PPS_RG4PPS2_MASK                                0x4
#define _RG4PPS_RG4PPS3_POSN                                0x3
#define _RG4PPS_RG4PPS3_POSITION                            0x3
#define _RG4PPS_RG4PPS3_SIZE                                0x1
#define _RG4PPS_RG4PPS3_LENGTH                              0x1
#define _RG4PPS_RG4PPS3_MASK                                0x8
#define _RG4PPS_RG4PPS4_POSN                                0x4
#define _RG4PPS_RG4PPS4_POSITION                            0x4
#define _RG4PPS_RG4PPS4_SIZE                                0x1
#define _RG4PPS_RG4PPS4_LENGTH                              0x1
#define _RG4PPS_RG4PPS4_MASK                                0x10
#define _RG4PPS_RG4PPS5_POSN                                0x5
#define _RG4PPS_RG4PPS5_POSITION                            0x5
#define _RG4PPS_RG4PPS5_SIZE                                0x1
#define _RG4PPS_RG4PPS5_LENGTH                              0x1
#define _RG4PPS_RG4PPS5_MASK                                0x20

// Register: RG6PPS
#define RG6PPS RG6PPS
extern volatile unsigned char           RG6PPS              __at(0x1E46);
#ifndef _LIB_BUILD
asm("RG6PPS equ 01E46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG6PPS0                :1;
        unsigned RG6PPS1                :1;
        unsigned RG6PPS2                :1;
        unsigned RG6PPS3                :1;
        unsigned RG6PPS4                :1;
        unsigned RG6PPS5                :1;
    };
} RG6PPSbits_t;
extern volatile RG6PPSbits_t RG6PPSbits __at(0x1E46);
// bitfield macros
#define _RG6PPS_RG6PPS0_POSN                                0x0
#define _RG6PPS_RG6PPS0_POSITION                            0x0
#define _RG6PPS_RG6PPS0_SIZE                                0x1
#define _RG6PPS_RG6PPS0_LENGTH                              0x1
#define _RG6PPS_RG6PPS0_MASK                                0x1
#define _RG6PPS_RG6PPS1_POSN                                0x1
#define _RG6PPS_RG6PPS1_POSITION                            0x1
#define _RG6PPS_RG6PPS1_SIZE                                0x1
#define _RG6PPS_RG6PPS1_LENGTH                              0x1
#define _RG6PPS_RG6PPS1_MASK                                0x2
#define _RG6PPS_RG6PPS2_POSN                                0x2
#define _RG6PPS_RG6PPS2_POSITION                            0x2
#define _RG6PPS_RG6PPS2_SIZE                                0x1
#define _RG6PPS_RG6PPS2_LENGTH                              0x1
#define _RG6PPS_RG6PPS2_MASK                                0x4
#define _RG6PPS_RG6PPS3_POSN                                0x3
#define _RG6PPS_RG6PPS3_POSITION                            0x3
#define _RG6PPS_RG6PPS3_SIZE                                0x1
#define _RG6PPS_RG6PPS3_LENGTH                              0x1
#define _RG6PPS_RG6PPS3_MASK                                0x8
#define _RG6PPS_RG6PPS4_POSN                                0x4
#define _RG6PPS_RG6PPS4_POSITION                            0x4
#define _RG6PPS_RG6PPS4_SIZE                                0x1
#define _RG6PPS_RG6PPS4_LENGTH                              0x1
#define _RG6PPS_RG6PPS4_MASK                                0x10
#define _RG6PPS_RG6PPS5_POSN                                0x5
#define _RG6PPS_RG6PPS5_POSITION                            0x5
#define _RG6PPS_RG6PPS5_SIZE                                0x1
#define _RG6PPS_RG6PPS5_LENGTH                              0x1
#define _RG6PPS_RG6PPS5_MASK                                0x20

// Register: RG7PPS
#define RG7PPS RG7PPS
extern volatile unsigned char           RG7PPS              __at(0x1E47);
#ifndef _LIB_BUILD
asm("RG7PPS equ 01E47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RG7PPS0                :1;
        unsigned RG7PPS1                :1;
        unsigned RG7PPS2                :1;
        unsigned RG7PPS3                :1;
        unsigned RG7PPS4                :1;
        unsigned RG7PPS5                :1;
    };
} RG7PPSbits_t;
extern volatile RG7PPSbits_t RG7PPSbits __at(0x1E47);
// bitfield macros
#define _RG7PPS_RG7PPS0_POSN                                0x0
#define _RG7PPS_RG7PPS0_POSITION                            0x0
#define _RG7PPS_RG7PPS0_SIZE                                0x1
#define _RG7PPS_RG7PPS0_LENGTH                              0x1
#define _RG7PPS_RG7PPS0_MASK                                0x1
#define _RG7PPS_RG7PPS1_POSN                                0x1
#define _RG7PPS_RG7PPS1_POSITION                            0x1
#define _RG7PPS_RG7PPS1_SIZE                                0x1
#define _RG7PPS_RG7PPS1_LENGTH                              0x1
#define _RG7PPS_RG7PPS1_MASK                                0x2
#define _RG7PPS_RG7PPS2_POSN                                0x2
#define _RG7PPS_RG7PPS2_POSITION                            0x2
#define _RG7PPS_RG7PPS2_SIZE                                0x1
#define _RG7PPS_RG7PPS2_LENGTH                              0x1
#define _RG7PPS_RG7PPS2_MASK                                0x4
#define _RG7PPS_RG7PPS3_POSN                                0x3
#define _RG7PPS_RG7PPS3_POSITION                            0x3
#define _RG7PPS_RG7PPS3_SIZE                                0x1
#define _RG7PPS_RG7PPS3_LENGTH                              0x1
#define _RG7PPS_RG7PPS3_MASK                                0x8
#define _RG7PPS_RG7PPS4_POSN                                0x4
#define _RG7PPS_RG7PPS4_POSITION                            0x4
#define _RG7PPS_RG7PPS4_SIZE                                0x1
#define _RG7PPS_RG7PPS4_LENGTH                              0x1
#define _RG7PPS_RG7PPS4_MASK                                0x10
#define _RG7PPS_RG7PPS5_POSN                                0x5
#define _RG7PPS_RG7PPS5_POSITION                            0x5
#define _RG7PPS_RG7PPS5_SIZE                                0x1
#define _RG7PPS_RG7PPS5_LENGTH                              0x1
#define _RG7PPS_RG7PPS5_MASK                                0x20

// Register: RH0PPS
#define RH0PPS RH0PPS
extern volatile unsigned char           RH0PPS              __at(0x1E48);
#ifndef _LIB_BUILD
asm("RH0PPS equ 01E48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH0PPS0                :1;
        unsigned RH0PPS1                :1;
        unsigned RH0PPS2                :1;
        unsigned RH0PPS3                :1;
        unsigned RH0PPS4                :1;
        unsigned RH0PPS5                :1;
    };
} RH0PPSbits_t;
extern volatile RH0PPSbits_t RH0PPSbits __at(0x1E48);
// bitfield macros
#define _RH0PPS_RH0PPS0_POSN                                0x0
#define _RH0PPS_RH0PPS0_POSITION                            0x0
#define _RH0PPS_RH0PPS0_SIZE                                0x1
#define _RH0PPS_RH0PPS0_LENGTH                              0x1
#define _RH0PPS_RH0PPS0_MASK                                0x1
#define _RH0PPS_RH0PPS1_POSN                                0x1
#define _RH0PPS_RH0PPS1_POSITION                            0x1
#define _RH0PPS_RH0PPS1_SIZE                                0x1
#define _RH0PPS_RH0PPS1_LENGTH                              0x1
#define _RH0PPS_RH0PPS1_MASK                                0x2
#define _RH0PPS_RH0PPS2_POSN                                0x2
#define _RH0PPS_RH0PPS2_POSITION                            0x2
#define _RH0PPS_RH0PPS2_SIZE                                0x1
#define _RH0PPS_RH0PPS2_LENGTH                              0x1
#define _RH0PPS_RH0PPS2_MASK                                0x4
#define _RH0PPS_RH0PPS3_POSN                                0x3
#define _RH0PPS_RH0PPS3_POSITION                            0x3
#define _RH0PPS_RH0PPS3_SIZE                                0x1
#define _RH0PPS_RH0PPS3_LENGTH                              0x1
#define _RH0PPS_RH0PPS3_MASK                                0x8
#define _RH0PPS_RH0PPS4_POSN                                0x4
#define _RH0PPS_RH0PPS4_POSITION                            0x4
#define _RH0PPS_RH0PPS4_SIZE                                0x1
#define _RH0PPS_RH0PPS4_LENGTH                              0x1
#define _RH0PPS_RH0PPS4_MASK                                0x10
#define _RH0PPS_RH0PPS5_POSN                                0x5
#define _RH0PPS_RH0PPS5_POSITION                            0x5
#define _RH0PPS_RH0PPS5_SIZE                                0x1
#define _RH0PPS_RH0PPS5_LENGTH                              0x1
#define _RH0PPS_RH0PPS5_MASK                                0x20

// Register: RH1PPS
#define RH1PPS RH1PPS
extern volatile unsigned char           RH1PPS              __at(0x1E49);
#ifndef _LIB_BUILD
asm("RH1PPS equ 01E49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH1PPS0                :1;
        unsigned RH1PPS1                :1;
        unsigned RH1PPS2                :1;
        unsigned RH1PPS3                :1;
        unsigned RH1PPS4                :1;
        unsigned RH1PPS5                :1;
    };
} RH1PPSbits_t;
extern volatile RH1PPSbits_t RH1PPSbits __at(0x1E49);
// bitfield macros
#define _RH1PPS_RH1PPS0_POSN                                0x0
#define _RH1PPS_RH1PPS0_POSITION                            0x0
#define _RH1PPS_RH1PPS0_SIZE                                0x1
#define _RH1PPS_RH1PPS0_LENGTH                              0x1
#define _RH1PPS_RH1PPS0_MASK                                0x1
#define _RH1PPS_RH1PPS1_POSN                                0x1
#define _RH1PPS_RH1PPS1_POSITION                            0x1
#define _RH1PPS_RH1PPS1_SIZE                                0x1
#define _RH1PPS_RH1PPS1_LENGTH                              0x1
#define _RH1PPS_RH1PPS1_MASK                                0x2
#define _RH1PPS_RH1PPS2_POSN                                0x2
#define _RH1PPS_RH1PPS2_POSITION                            0x2
#define _RH1PPS_RH1PPS2_SIZE                                0x1
#define _RH1PPS_RH1PPS2_LENGTH                              0x1
#define _RH1PPS_RH1PPS2_MASK                                0x4
#define _RH1PPS_RH1PPS3_POSN                                0x3
#define _RH1PPS_RH1PPS3_POSITION                            0x3
#define _RH1PPS_RH1PPS3_SIZE                                0x1
#define _RH1PPS_RH1PPS3_LENGTH                              0x1
#define _RH1PPS_RH1PPS3_MASK                                0x8
#define _RH1PPS_RH1PPS4_POSN                                0x4
#define _RH1PPS_RH1PPS4_POSITION                            0x4
#define _RH1PPS_RH1PPS4_SIZE                                0x1
#define _RH1PPS_RH1PPS4_LENGTH                              0x1
#define _RH1PPS_RH1PPS4_MASK                                0x10
#define _RH1PPS_RH1PPS5_POSN                                0x5
#define _RH1PPS_RH1PPS5_POSITION                            0x5
#define _RH1PPS_RH1PPS5_SIZE                                0x1
#define _RH1PPS_RH1PPS5_LENGTH                              0x1
#define _RH1PPS_RH1PPS5_MASK                                0x20

// Register: RH2PPS
#define RH2PPS RH2PPS
extern volatile unsigned char           RH2PPS              __at(0x1E4A);
#ifndef _LIB_BUILD
asm("RH2PPS equ 01E4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH2PPS0                :1;
        unsigned RH2PPS1                :1;
        unsigned RH2PPS2                :1;
        unsigned RH2PPS3                :1;
        unsigned RH2PPS4                :1;
        unsigned RH2PPS5                :1;
    };
} RH2PPSbits_t;
extern volatile RH2PPSbits_t RH2PPSbits __at(0x1E4A);
// bitfield macros
#define _RH2PPS_RH2PPS0_POSN                                0x0
#define _RH2PPS_RH2PPS0_POSITION                            0x0
#define _RH2PPS_RH2PPS0_SIZE                                0x1
#define _RH2PPS_RH2PPS0_LENGTH                              0x1
#define _RH2PPS_RH2PPS0_MASK                                0x1
#define _RH2PPS_RH2PPS1_POSN                                0x1
#define _RH2PPS_RH2PPS1_POSITION                            0x1
#define _RH2PPS_RH2PPS1_SIZE                                0x1
#define _RH2PPS_RH2PPS1_LENGTH                              0x1
#define _RH2PPS_RH2PPS1_MASK                                0x2
#define _RH2PPS_RH2PPS2_POSN                                0x2
#define _RH2PPS_RH2PPS2_POSITION                            0x2
#define _RH2PPS_RH2PPS2_SIZE                                0x1
#define _RH2PPS_RH2PPS2_LENGTH                              0x1
#define _RH2PPS_RH2PPS2_MASK                                0x4
#define _RH2PPS_RH2PPS3_POSN                                0x3
#define _RH2PPS_RH2PPS3_POSITION                            0x3
#define _RH2PPS_RH2PPS3_SIZE                                0x1
#define _RH2PPS_RH2PPS3_LENGTH                              0x1
#define _RH2PPS_RH2PPS3_MASK                                0x8
#define _RH2PPS_RH2PPS4_POSN                                0x4
#define _RH2PPS_RH2PPS4_POSITION                            0x4
#define _RH2PPS_RH2PPS4_SIZE                                0x1
#define _RH2PPS_RH2PPS4_LENGTH                              0x1
#define _RH2PPS_RH2PPS4_MASK                                0x10
#define _RH2PPS_RH2PPS5_POSN                                0x5
#define _RH2PPS_RH2PPS5_POSITION                            0x5
#define _RH2PPS_RH2PPS5_SIZE                                0x1
#define _RH2PPS_RH2PPS5_LENGTH                              0x1
#define _RH2PPS_RH2PPS5_MASK                                0x20

// Register: RH3PPS
#define RH3PPS RH3PPS
extern volatile unsigned char           RH3PPS              __at(0x1E4B);
#ifndef _LIB_BUILD
asm("RH3PPS equ 01E4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH3PPS0                :1;
        unsigned RH3PPS1                :1;
        unsigned RH3PPS2                :1;
        unsigned RH3PPS3                :1;
        unsigned RH3PPS4                :1;
        unsigned RH3PPS5                :1;
    };
} RH3PPSbits_t;
extern volatile RH3PPSbits_t RH3PPSbits __at(0x1E4B);
// bitfield macros
#define _RH3PPS_RH3PPS0_POSN                                0x0
#define _RH3PPS_RH3PPS0_POSITION                            0x0
#define _RH3PPS_RH3PPS0_SIZE                                0x1
#define _RH3PPS_RH3PPS0_LENGTH                              0x1
#define _RH3PPS_RH3PPS0_MASK                                0x1
#define _RH3PPS_RH3PPS1_POSN                                0x1
#define _RH3PPS_RH3PPS1_POSITION                            0x1
#define _RH3PPS_RH3PPS1_SIZE                                0x1
#define _RH3PPS_RH3PPS1_LENGTH                              0x1
#define _RH3PPS_RH3PPS1_MASK                                0x2
#define _RH3PPS_RH3PPS2_POSN                                0x2
#define _RH3PPS_RH3PPS2_POSITION                            0x2
#define _RH3PPS_RH3PPS2_SIZE                                0x1
#define _RH3PPS_RH3PPS2_LENGTH                              0x1
#define _RH3PPS_RH3PPS2_MASK                                0x4
#define _RH3PPS_RH3PPS3_POSN                                0x3
#define _RH3PPS_RH3PPS3_POSITION                            0x3
#define _RH3PPS_RH3PPS3_SIZE                                0x1
#define _RH3PPS_RH3PPS3_LENGTH                              0x1
#define _RH3PPS_RH3PPS3_MASK                                0x8
#define _RH3PPS_RH3PPS4_POSN                                0x4
#define _RH3PPS_RH3PPS4_POSITION                            0x4
#define _RH3PPS_RH3PPS4_SIZE                                0x1
#define _RH3PPS_RH3PPS4_LENGTH                              0x1
#define _RH3PPS_RH3PPS4_MASK                                0x10
#define _RH3PPS_RH3PPS5_POSN                                0x5
#define _RH3PPS_RH3PPS5_POSITION                            0x5
#define _RH3PPS_RH3PPS5_SIZE                                0x1
#define _RH3PPS_RH3PPS5_LENGTH                              0x1
#define _RH3PPS_RH3PPS5_MASK                                0x20

// Register: ANSELF
#define ANSELF ANSELF
extern volatile unsigned char           ANSELF              __at(0x1E50);
#ifndef _LIB_BUILD
asm("ANSELF equ 01E50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSF0                  :1;
        unsigned ANSF1                  :1;
        unsigned ANSF2                  :1;
        unsigned ANSF3                  :1;
        unsigned ANSF4                  :1;
        unsigned ANSF5                  :1;
        unsigned ANSF6                  :1;
        unsigned ANSF7                  :1;
    };
} ANSELFbits_t;
extern volatile ANSELFbits_t ANSELFbits __at(0x1E50);
// bitfield macros
#define _ANSELF_ANSF0_POSN                                  0x0
#define _ANSELF_ANSF0_POSITION                              0x0
#define _ANSELF_ANSF0_SIZE                                  0x1
#define _ANSELF_ANSF0_LENGTH                                0x1
#define _ANSELF_ANSF0_MASK                                  0x1
#define _ANSELF_ANSF1_POSN                                  0x1
#define _ANSELF_ANSF1_POSITION                              0x1
#define _ANSELF_ANSF1_SIZE                                  0x1
#define _ANSELF_ANSF1_LENGTH                                0x1
#define _ANSELF_ANSF1_MASK                                  0x2
#define _ANSELF_ANSF2_POSN                                  0x2
#define _ANSELF_ANSF2_POSITION                              0x2
#define _ANSELF_ANSF2_SIZE                                  0x1
#define _ANSELF_ANSF2_LENGTH                                0x1
#define _ANSELF_ANSF2_MASK                                  0x4
#define _ANSELF_ANSF3_POSN                                  0x3
#define _ANSELF_ANSF3_POSITION                              0x3
#define _ANSELF_ANSF3_SIZE                                  0x1
#define _ANSELF_ANSF3_LENGTH                                0x1
#define _ANSELF_ANSF3_MASK                                  0x8
#define _ANSELF_ANSF4_POSN                                  0x4
#define _ANSELF_ANSF4_POSITION                              0x4
#define _ANSELF_ANSF4_SIZE                                  0x1
#define _ANSELF_ANSF4_LENGTH                                0x1
#define _ANSELF_ANSF4_MASK                                  0x10
#define _ANSELF_ANSF5_POSN                                  0x5
#define _ANSELF_ANSF5_POSITION                              0x5
#define _ANSELF_ANSF5_SIZE                                  0x1
#define _ANSELF_ANSF5_LENGTH                                0x1
#define _ANSELF_ANSF5_MASK                                  0x20
#define _ANSELF_ANSF6_POSN                                  0x6
#define _ANSELF_ANSF6_POSITION                              0x6
#define _ANSELF_ANSF6_SIZE                                  0x1
#define _ANSELF_ANSF6_LENGTH                                0x1
#define _ANSELF_ANSF6_MASK                                  0x40
#define _ANSELF_ANSF7_POSN                                  0x7
#define _ANSELF_ANSF7_POSITION                              0x7
#define _ANSELF_ANSF7_SIZE                                  0x1
#define _ANSELF_ANSF7_LENGTH                                0x1
#define _ANSELF_ANSF7_MASK                                  0x80

// Register: WPUF
#define WPUF WPUF
extern volatile unsigned char           WPUF                __at(0x1E51);
#ifndef _LIB_BUILD
asm("WPUF equ 01E51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUF0                  :1;
        unsigned WPUF1                  :1;
        unsigned WPUF2                  :1;
        unsigned WPUF3                  :1;
        unsigned WPUF4                  :1;
        unsigned WPUF5                  :1;
        unsigned WPUF6                  :1;
        unsigned WPUF7                  :1;
    };
} WPUFbits_t;
extern volatile WPUFbits_t WPUFbits __at(0x1E51);
// bitfield macros
#define _WPUF_WPUF0_POSN                                    0x0
#define _WPUF_WPUF0_POSITION                                0x0
#define _WPUF_WPUF0_SIZE                                    0x1
#define _WPUF_WPUF0_LENGTH                                  0x1
#define _WPUF_WPUF0_MASK                                    0x1
#define _WPUF_WPUF1_POSN                                    0x1
#define _WPUF_WPUF1_POSITION                                0x1
#define _WPUF_WPUF1_SIZE                                    0x1
#define _WPUF_WPUF1_LENGTH                                  0x1
#define _WPUF_WPUF1_MASK                                    0x2
#define _WPUF_WPUF2_POSN                                    0x2
#define _WPUF_WPUF2_POSITION                                0x2
#define _WPUF_WPUF2_SIZE                                    0x1
#define _WPUF_WPUF2_LENGTH                                  0x1
#define _WPUF_WPUF2_MASK                                    0x4
#define _WPUF_WPUF3_POSN                                    0x3
#define _WPUF_WPUF3_POSITION                                0x3
#define _WPUF_WPUF3_SIZE                                    0x1
#define _WPUF_WPUF3_LENGTH                                  0x1
#define _WPUF_WPUF3_MASK                                    0x8
#define _WPUF_WPUF4_POSN                                    0x4
#define _WPUF_WPUF4_POSITION                                0x4
#define _WPUF_WPUF4_SIZE                                    0x1
#define _WPUF_WPUF4_LENGTH                                  0x1
#define _WPUF_WPUF4_MASK                                    0x10
#define _WPUF_WPUF5_POSN                                    0x5
#define _WPUF_WPUF5_POSITION                                0x5
#define _WPUF_WPUF5_SIZE                                    0x1
#define _WPUF_WPUF5_LENGTH                                  0x1
#define _WPUF_WPUF5_MASK                                    0x20
#define _WPUF_WPUF6_POSN                                    0x6
#define _WPUF_WPUF6_POSITION                                0x6
#define _WPUF_WPUF6_SIZE                                    0x1
#define _WPUF_WPUF6_LENGTH                                  0x1
#define _WPUF_WPUF6_MASK                                    0x40
#define _WPUF_WPUF7_POSN                                    0x7
#define _WPUF_WPUF7_POSITION                                0x7
#define _WPUF_WPUF7_SIZE                                    0x1
#define _WPUF_WPUF7_LENGTH                                  0x1
#define _WPUF_WPUF7_MASK                                    0x80

// Register: ODCONF
#define ODCONF ODCONF
extern volatile unsigned char           ODCONF              __at(0x1E52);
#ifndef _LIB_BUILD
asm("ODCONF equ 01E52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCF0                  :1;
        unsigned ODCF1                  :1;
        unsigned ODCF2                  :1;
        unsigned ODCF3                  :1;
        unsigned ODCF4                  :1;
        unsigned ODCF5                  :1;
        unsigned ODCF6                  :1;
        unsigned ODCF7                  :1;
    };
} ODCONFbits_t;
extern volatile ODCONFbits_t ODCONFbits __at(0x1E52);
// bitfield macros
#define _ODCONF_ODCF0_POSN                                  0x0
#define _ODCONF_ODCF0_POSITION                              0x0
#define _ODCONF_ODCF0_SIZE                                  0x1
#define _ODCONF_ODCF0_LENGTH                                0x1
#define _ODCONF_ODCF0_MASK                                  0x1
#define _ODCONF_ODCF1_POSN                                  0x1
#define _ODCONF_ODCF1_POSITION                              0x1
#define _ODCONF_ODCF1_SIZE                                  0x1
#define _ODCONF_ODCF1_LENGTH                                0x1
#define _ODCONF_ODCF1_MASK                                  0x2
#define _ODCONF_ODCF2_POSN                                  0x2
#define _ODCONF_ODCF2_POSITION                              0x2
#define _ODCONF_ODCF2_SIZE                                  0x1
#define _ODCONF_ODCF2_LENGTH                                0x1
#define _ODCONF_ODCF2_MASK                                  0x4
#define _ODCONF_ODCF3_POSN                                  0x3
#define _ODCONF_ODCF3_POSITION                              0x3
#define _ODCONF_ODCF3_SIZE                                  0x1
#define _ODCONF_ODCF3_LENGTH                                0x1
#define _ODCONF_ODCF3_MASK                                  0x8
#define _ODCONF_ODCF4_POSN                                  0x4
#define _ODCONF_ODCF4_POSITION                              0x4
#define _ODCONF_ODCF4_SIZE                                  0x1
#define _ODCONF_ODCF4_LENGTH                                0x1
#define _ODCONF_ODCF4_MASK                                  0x10
#define _ODCONF_ODCF5_POSN                                  0x5
#define _ODCONF_ODCF5_POSITION                              0x5
#define _ODCONF_ODCF5_SIZE                                  0x1
#define _ODCONF_ODCF5_LENGTH                                0x1
#define _ODCONF_ODCF5_MASK                                  0x20
#define _ODCONF_ODCF6_POSN                                  0x6
#define _ODCONF_ODCF6_POSITION                              0x6
#define _ODCONF_ODCF6_SIZE                                  0x1
#define _ODCONF_ODCF6_LENGTH                                0x1
#define _ODCONF_ODCF6_MASK                                  0x40
#define _ODCONF_ODCF7_POSN                                  0x7
#define _ODCONF_ODCF7_POSITION                              0x7
#define _ODCONF_ODCF7_SIZE                                  0x1
#define _ODCONF_ODCF7_LENGTH                                0x1
#define _ODCONF_ODCF7_MASK                                  0x80

// Register: SLRCONF
#define SLRCONF SLRCONF
extern volatile unsigned char           SLRCONF             __at(0x1E53);
#ifndef _LIB_BUILD
asm("SLRCONF equ 01E53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRF0                  :1;
        unsigned SLRF1                  :1;
        unsigned SLRF2                  :1;
        unsigned SLRF3                  :1;
        unsigned SLRF4                  :1;
        unsigned SLRF5                  :1;
        unsigned SLRF6                  :1;
        unsigned SLRF7                  :1;
    };
} SLRCONFbits_t;
extern volatile SLRCONFbits_t SLRCONFbits __at(0x1E53);
// bitfield macros
#define _SLRCONF_SLRF0_POSN                                 0x0
#define _SLRCONF_SLRF0_POSITION                             0x0
#define _SLRCONF_SLRF0_SIZE                                 0x1
#define _SLRCONF_SLRF0_LENGTH                               0x1
#define _SLRCONF_SLRF0_MASK                                 0x1
#define _SLRCONF_SLRF1_POSN                                 0x1
#define _SLRCONF_SLRF1_POSITION                             0x1
#define _SLRCONF_SLRF1_SIZE                                 0x1
#define _SLRCONF_SLRF1_LENGTH                               0x1
#define _SLRCONF_SLRF1_MASK                                 0x2
#define _SLRCONF_SLRF2_POSN                                 0x2
#define _SLRCONF_SLRF2_POSITION                             0x2
#define _SLRCONF_SLRF2_SIZE                                 0x1
#define _SLRCONF_SLRF2_LENGTH                               0x1
#define _SLRCONF_SLRF2_MASK                                 0x4
#define _SLRCONF_SLRF3_POSN                                 0x3
#define _SLRCONF_SLRF3_POSITION                             0x3
#define _SLRCONF_SLRF3_SIZE                                 0x1
#define _SLRCONF_SLRF3_LENGTH                               0x1
#define _SLRCONF_SLRF3_MASK                                 0x8
#define _SLRCONF_SLRF4_POSN                                 0x4
#define _SLRCONF_SLRF4_POSITION                             0x4
#define _SLRCONF_SLRF4_SIZE                                 0x1
#define _SLRCONF_SLRF4_LENGTH                               0x1
#define _SLRCONF_SLRF4_MASK                                 0x10
#define _SLRCONF_SLRF5_POSN                                 0x5
#define _SLRCONF_SLRF5_POSITION                             0x5
#define _SLRCONF_SLRF5_SIZE                                 0x1
#define _SLRCONF_SLRF5_LENGTH                               0x1
#define _SLRCONF_SLRF5_MASK                                 0x20
#define _SLRCONF_SLRF6_POSN                                 0x6
#define _SLRCONF_SLRF6_POSITION                             0x6
#define _SLRCONF_SLRF6_SIZE                                 0x1
#define _SLRCONF_SLRF6_LENGTH                               0x1
#define _SLRCONF_SLRF6_MASK                                 0x40
#define _SLRCONF_SLRF7_POSN                                 0x7
#define _SLRCONF_SLRF7_POSITION                             0x7
#define _SLRCONF_SLRF7_SIZE                                 0x1
#define _SLRCONF_SLRF7_LENGTH                               0x1
#define _SLRCONF_SLRF7_MASK                                 0x80

// Register: INLVLF
#define INLVLF INLVLF
extern volatile unsigned char           INLVLF              __at(0x1E54);
#ifndef _LIB_BUILD
asm("INLVLF equ 01E54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLF0                :1;
        unsigned INLVLF1                :1;
        unsigned INLVLF2                :1;
        unsigned INLVLF3                :1;
        unsigned INLVLF4                :1;
        unsigned INLVLF5                :1;
        unsigned INLVLF6                :1;
        unsigned INLVLF7                :1;
    };
} INLVLFbits_t;
extern volatile INLVLFbits_t INLVLFbits __at(0x1E54);
// bitfield macros
#define _INLVLF_INLVLF0_POSN                                0x0
#define _INLVLF_INLVLF0_POSITION                            0x0
#define _INLVLF_INLVLF0_SIZE                                0x1
#define _INLVLF_INLVLF0_LENGTH                              0x1
#define _INLVLF_INLVLF0_MASK                                0x1
#define _INLVLF_INLVLF1_POSN                                0x1
#define _INLVLF_INLVLF1_POSITION                            0x1
#define _INLVLF_INLVLF1_SIZE                                0x1
#define _INLVLF_INLVLF1_LENGTH                              0x1
#define _INLVLF_INLVLF1_MASK                                0x2
#define _INLVLF_INLVLF2_POSN                                0x2
#define _INLVLF_INLVLF2_POSITION                            0x2
#define _INLVLF_INLVLF2_SIZE                                0x1
#define _INLVLF_INLVLF2_LENGTH                              0x1
#define _INLVLF_INLVLF2_MASK                                0x4
#define _INLVLF_INLVLF3_POSN                                0x3
#define _INLVLF_INLVLF3_POSITION                            0x3
#define _INLVLF_INLVLF3_SIZE                                0x1
#define _INLVLF_INLVLF3_LENGTH                              0x1
#define _INLVLF_INLVLF3_MASK                                0x8
#define _INLVLF_INLVLF4_POSN                                0x4
#define _INLVLF_INLVLF4_POSITION                            0x4
#define _INLVLF_INLVLF4_SIZE                                0x1
#define _INLVLF_INLVLF4_LENGTH                              0x1
#define _INLVLF_INLVLF4_MASK                                0x10
#define _INLVLF_INLVLF5_POSN                                0x5
#define _INLVLF_INLVLF5_POSITION                            0x5
#define _INLVLF_INLVLF5_SIZE                                0x1
#define _INLVLF_INLVLF5_LENGTH                              0x1
#define _INLVLF_INLVLF5_MASK                                0x20
#define _INLVLF_INLVLF6_POSN                                0x6
#define _INLVLF_INLVLF6_POSITION                            0x6
#define _INLVLF_INLVLF6_SIZE                                0x1
#define _INLVLF_INLVLF6_LENGTH                              0x1
#define _INLVLF_INLVLF6_MASK                                0x40
#define _INLVLF_INLVLF7_POSN                                0x7
#define _INLVLF_INLVLF7_POSITION                            0x7
#define _INLVLF_INLVLF7_SIZE                                0x1
#define _INLVLF_INLVLF7_LENGTH                              0x1
#define _INLVLF_INLVLF7_MASK                                0x80

// Register: HIDRVF
#define HIDRVF HIDRVF
extern volatile unsigned char           HIDRVF              __at(0x1E55);
#ifndef _LIB_BUILD
asm("HIDRVF equ 01E55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :7;
        unsigned HIDF7                  :1;
    };
} HIDRVFbits_t;
extern volatile HIDRVFbits_t HIDRVFbits __at(0x1E55);
// bitfield macros
#define _HIDRVF_HIDF7_POSN                                  0x7
#define _HIDRVF_HIDF7_POSITION                              0x7
#define _HIDRVF_HIDF7_SIZE                                  0x1
#define _HIDRVF_HIDF7_LENGTH                                0x1
#define _HIDRVF_HIDF7_MASK                                  0x80

// Register: ANSELG
#define ANSELG ANSELG
extern volatile unsigned char           ANSELG              __at(0x1E5B);
#ifndef _LIB_BUILD
asm("ANSELG equ 01E5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSG0                  :1;
        unsigned ANSG1                  :1;
        unsigned ANSG2                  :1;
        unsigned ANSG3                  :1;
        unsigned ANSG4                  :1;
        unsigned                        :1;
        unsigned ANSG6                  :1;
        unsigned ANSG7                  :1;
    };
} ANSELGbits_t;
extern volatile ANSELGbits_t ANSELGbits __at(0x1E5B);
// bitfield macros
#define _ANSELG_ANSG0_POSN                                  0x0
#define _ANSELG_ANSG0_POSITION                              0x0
#define _ANSELG_ANSG0_SIZE                                  0x1
#define _ANSELG_ANSG0_LENGTH                                0x1
#define _ANSELG_ANSG0_MASK                                  0x1
#define _ANSELG_ANSG1_POSN                                  0x1
#define _ANSELG_ANSG1_POSITION                              0x1
#define _ANSELG_ANSG1_SIZE                                  0x1
#define _ANSELG_ANSG1_LENGTH                                0x1
#define _ANSELG_ANSG1_MASK                                  0x2
#define _ANSELG_ANSG2_POSN                                  0x2
#define _ANSELG_ANSG2_POSITION                              0x2
#define _ANSELG_ANSG2_SIZE                                  0x1
#define _ANSELG_ANSG2_LENGTH                                0x1
#define _ANSELG_ANSG2_MASK                                  0x4
#define _ANSELG_ANSG3_POSN                                  0x3
#define _ANSELG_ANSG3_POSITION                              0x3
#define _ANSELG_ANSG3_SIZE                                  0x1
#define _ANSELG_ANSG3_LENGTH                                0x1
#define _ANSELG_ANSG3_MASK                                  0x8
#define _ANSELG_ANSG4_POSN                                  0x4
#define _ANSELG_ANSG4_POSITION                              0x4
#define _ANSELG_ANSG4_SIZE                                  0x1
#define _ANSELG_ANSG4_LENGTH                                0x1
#define _ANSELG_ANSG4_MASK                                  0x10
#define _ANSELG_ANSG6_POSN                                  0x6
#define _ANSELG_ANSG6_POSITION                              0x6
#define _ANSELG_ANSG6_SIZE                                  0x1
#define _ANSELG_ANSG6_LENGTH                                0x1
#define _ANSELG_ANSG6_MASK                                  0x40
#define _ANSELG_ANSG7_POSN                                  0x7
#define _ANSELG_ANSG7_POSITION                              0x7
#define _ANSELG_ANSG7_SIZE                                  0x1
#define _ANSELG_ANSG7_LENGTH                                0x1
#define _ANSELG_ANSG7_MASK                                  0x80

// Register: WPUG
#define WPUG WPUG
extern volatile unsigned char           WPUG                __at(0x1E5C);
#ifndef _LIB_BUILD
asm("WPUG equ 01E5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUG0                  :1;
        unsigned WPUG1                  :1;
        unsigned WPUG2                  :1;
        unsigned WPUG3                  :1;
        unsigned WPUG4                  :1;
        unsigned WPUG5                  :1;
        unsigned WPUG6                  :1;
        unsigned WPUG7                  :1;
    };
} WPUGbits_t;
extern volatile WPUGbits_t WPUGbits __at(0x1E5C);
// bitfield macros
#define _WPUG_WPUG0_POSN                                    0x0
#define _WPUG_WPUG0_POSITION                                0x0
#define _WPUG_WPUG0_SIZE                                    0x1
#define _WPUG_WPUG0_LENGTH                                  0x1
#define _WPUG_WPUG0_MASK                                    0x1
#define _WPUG_WPUG1_POSN                                    0x1
#define _WPUG_WPUG1_POSITION                                0x1
#define _WPUG_WPUG1_SIZE                                    0x1
#define _WPUG_WPUG1_LENGTH                                  0x1
#define _WPUG_WPUG1_MASK                                    0x2
#define _WPUG_WPUG2_POSN                                    0x2
#define _WPUG_WPUG2_POSITION                                0x2
#define _WPUG_WPUG2_SIZE                                    0x1
#define _WPUG_WPUG2_LENGTH                                  0x1
#define _WPUG_WPUG2_MASK                                    0x4
#define _WPUG_WPUG3_POSN                                    0x3
#define _WPUG_WPUG3_POSITION                                0x3
#define _WPUG_WPUG3_SIZE                                    0x1
#define _WPUG_WPUG3_LENGTH                                  0x1
#define _WPUG_WPUG3_MASK                                    0x8
#define _WPUG_WPUG4_POSN                                    0x4
#define _WPUG_WPUG4_POSITION                                0x4
#define _WPUG_WPUG4_SIZE                                    0x1
#define _WPUG_WPUG4_LENGTH                                  0x1
#define _WPUG_WPUG4_MASK                                    0x10
#define _WPUG_WPUG5_POSN                                    0x5
#define _WPUG_WPUG5_POSITION                                0x5
#define _WPUG_WPUG5_SIZE                                    0x1
#define _WPUG_WPUG5_LENGTH                                  0x1
#define _WPUG_WPUG5_MASK                                    0x20
#define _WPUG_WPUG6_POSN                                    0x6
#define _WPUG_WPUG6_POSITION                                0x6
#define _WPUG_WPUG6_SIZE                                    0x1
#define _WPUG_WPUG6_LENGTH                                  0x1
#define _WPUG_WPUG6_MASK                                    0x40
#define _WPUG_WPUG7_POSN                                    0x7
#define _WPUG_WPUG7_POSITION                                0x7
#define _WPUG_WPUG7_SIZE                                    0x1
#define _WPUG_WPUG7_LENGTH                                  0x1
#define _WPUG_WPUG7_MASK                                    0x80

// Register: ODCONG
#define ODCONG ODCONG
extern volatile unsigned char           ODCONG              __at(0x1E5D);
#ifndef _LIB_BUILD
asm("ODCONG equ 01E5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCG0                  :1;
        unsigned ODCG1                  :1;
        unsigned ODCG2                  :1;
        unsigned ODCG3                  :1;
        unsigned ODCG4                  :1;
        unsigned                        :1;
        unsigned ODCG6                  :1;
        unsigned ODCG7                  :1;
    };
} ODCONGbits_t;
extern volatile ODCONGbits_t ODCONGbits __at(0x1E5D);
// bitfield macros
#define _ODCONG_ODCG0_POSN                                  0x0
#define _ODCONG_ODCG0_POSITION                              0x0
#define _ODCONG_ODCG0_SIZE                                  0x1
#define _ODCONG_ODCG0_LENGTH                                0x1
#define _ODCONG_ODCG0_MASK                                  0x1
#define _ODCONG_ODCG1_POSN                                  0x1
#define _ODCONG_ODCG1_POSITION                              0x1
#define _ODCONG_ODCG1_SIZE                                  0x1
#define _ODCONG_ODCG1_LENGTH                                0x1
#define _ODCONG_ODCG1_MASK                                  0x2
#define _ODCONG_ODCG2_POSN                                  0x2
#define _ODCONG_ODCG2_POSITION                              0x2
#define _ODCONG_ODCG2_SIZE                                  0x1
#define _ODCONG_ODCG2_LENGTH                                0x1
#define _ODCONG_ODCG2_MASK                                  0x4
#define _ODCONG_ODCG3_POSN                                  0x3
#define _ODCONG_ODCG3_POSITION                              0x3
#define _ODCONG_ODCG3_SIZE                                  0x1
#define _ODCONG_ODCG3_LENGTH                                0x1
#define _ODCONG_ODCG3_MASK                                  0x8
#define _ODCONG_ODCG4_POSN                                  0x4
#define _ODCONG_ODCG4_POSITION                              0x4
#define _ODCONG_ODCG4_SIZE                                  0x1
#define _ODCONG_ODCG4_LENGTH                                0x1
#define _ODCONG_ODCG4_MASK                                  0x10
#define _ODCONG_ODCG6_POSN                                  0x6
#define _ODCONG_ODCG6_POSITION                              0x6
#define _ODCONG_ODCG6_SIZE                                  0x1
#define _ODCONG_ODCG6_LENGTH                                0x1
#define _ODCONG_ODCG6_MASK                                  0x40
#define _ODCONG_ODCG7_POSN                                  0x7
#define _ODCONG_ODCG7_POSITION                              0x7
#define _ODCONG_ODCG7_SIZE                                  0x1
#define _ODCONG_ODCG7_LENGTH                                0x1
#define _ODCONG_ODCG7_MASK                                  0x80

// Register: SLRCONG
#define SLRCONG SLRCONG
extern volatile unsigned char           SLRCONG             __at(0x1E5E);
#ifndef _LIB_BUILD
asm("SLRCONG equ 01E5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRG0                  :1;
        unsigned SLRG1                  :1;
        unsigned SLRG2                  :1;
        unsigned SLRG3                  :1;
        unsigned SLRG4                  :1;
        unsigned                        :1;
        unsigned SLRG6                  :1;
        unsigned SLRG7                  :1;
    };
} SLRCONGbits_t;
extern volatile SLRCONGbits_t SLRCONGbits __at(0x1E5E);
// bitfield macros
#define _SLRCONG_SLRG0_POSN                                 0x0
#define _SLRCONG_SLRG0_POSITION                             0x0
#define _SLRCONG_SLRG0_SIZE                                 0x1
#define _SLRCONG_SLRG0_LENGTH                               0x1
#define _SLRCONG_SLRG0_MASK                                 0x1
#define _SLRCONG_SLRG1_POSN                                 0x1
#define _SLRCONG_SLRG1_POSITION                             0x1
#define _SLRCONG_SLRG1_SIZE                                 0x1
#define _SLRCONG_SLRG1_LENGTH                               0x1
#define _SLRCONG_SLRG1_MASK                                 0x2
#define _SLRCONG_SLRG2_POSN                                 0x2
#define _SLRCONG_SLRG2_POSITION                             0x2
#define _SLRCONG_SLRG2_SIZE                                 0x1
#define _SLRCONG_SLRG2_LENGTH                               0x1
#define _SLRCONG_SLRG2_MASK                                 0x4
#define _SLRCONG_SLRG3_POSN                                 0x3
#define _SLRCONG_SLRG3_POSITION                             0x3
#define _SLRCONG_SLRG3_SIZE                                 0x1
#define _SLRCONG_SLRG3_LENGTH                               0x1
#define _SLRCONG_SLRG3_MASK                                 0x8
#define _SLRCONG_SLRG4_POSN                                 0x4
#define _SLRCONG_SLRG4_POSITION                             0x4
#define _SLRCONG_SLRG4_SIZE                                 0x1
#define _SLRCONG_SLRG4_LENGTH                               0x1
#define _SLRCONG_SLRG4_MASK                                 0x10
#define _SLRCONG_SLRG6_POSN                                 0x6
#define _SLRCONG_SLRG6_POSITION                             0x6
#define _SLRCONG_SLRG6_SIZE                                 0x1
#define _SLRCONG_SLRG6_LENGTH                               0x1
#define _SLRCONG_SLRG6_MASK                                 0x40
#define _SLRCONG_SLRG7_POSN                                 0x7
#define _SLRCONG_SLRG7_POSITION                             0x7
#define _SLRCONG_SLRG7_SIZE                                 0x1
#define _SLRCONG_SLRG7_LENGTH                               0x1
#define _SLRCONG_SLRG7_MASK                                 0x80

// Register: INLVLG
#define INLVLG INLVLG
extern volatile unsigned char           INLVLG              __at(0x1E5F);
#ifndef _LIB_BUILD
asm("INLVLG equ 01E5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLG0                :1;
        unsigned INLVLG1                :1;
        unsigned INLVLG2                :1;
        unsigned INLVLG3                :1;
        unsigned INLVLG4                :1;
        unsigned INLVLG5                :1;
        unsigned INLVLG6                :1;
        unsigned INLVLG7                :1;
    };
} INLVLGbits_t;
extern volatile INLVLGbits_t INLVLGbits __at(0x1E5F);
// bitfield macros
#define _INLVLG_INLVLG0_POSN                                0x0
#define _INLVLG_INLVLG0_POSITION                            0x0
#define _INLVLG_INLVLG0_SIZE                                0x1
#define _INLVLG_INLVLG0_LENGTH                              0x1
#define _INLVLG_INLVLG0_MASK                                0x1
#define _INLVLG_INLVLG1_POSN                                0x1
#define _INLVLG_INLVLG1_POSITION                            0x1
#define _INLVLG_INLVLG1_SIZE                                0x1
#define _INLVLG_INLVLG1_LENGTH                              0x1
#define _INLVLG_INLVLG1_MASK                                0x2
#define _INLVLG_INLVLG2_POSN                                0x2
#define _INLVLG_INLVLG2_POSITION                            0x2
#define _INLVLG_INLVLG2_SIZE                                0x1
#define _INLVLG_INLVLG2_LENGTH                              0x1
#define _INLVLG_INLVLG2_MASK                                0x4
#define _INLVLG_INLVLG3_POSN                                0x3
#define _INLVLG_INLVLG3_POSITION                            0x3
#define _INLVLG_INLVLG3_SIZE                                0x1
#define _INLVLG_INLVLG3_LENGTH                              0x1
#define _INLVLG_INLVLG3_MASK                                0x8
#define _INLVLG_INLVLG4_POSN                                0x4
#define _INLVLG_INLVLG4_POSITION                            0x4
#define _INLVLG_INLVLG4_SIZE                                0x1
#define _INLVLG_INLVLG4_LENGTH                              0x1
#define _INLVLG_INLVLG4_MASK                                0x10
#define _INLVLG_INLVLG5_POSN                                0x5
#define _INLVLG_INLVLG5_POSITION                            0x5
#define _INLVLG_INLVLG5_SIZE                                0x1
#define _INLVLG_INLVLG5_LENGTH                              0x1
#define _INLVLG_INLVLG5_MASK                                0x20
#define _INLVLG_INLVLG6_POSN                                0x6
#define _INLVLG_INLVLG6_POSITION                            0x6
#define _INLVLG_INLVLG6_SIZE                                0x1
#define _INLVLG_INLVLG6_LENGTH                              0x1
#define _INLVLG_INLVLG6_MASK                                0x40
#define _INLVLG_INLVLG7_POSN                                0x7
#define _INLVLG_INLVLG7_POSITION                            0x7
#define _INLVLG_INLVLG7_SIZE                                0x1
#define _INLVLG_INLVLG7_LENGTH                              0x1
#define _INLVLG_INLVLG7_MASK                                0x80

// Register: IOCGP
#define IOCGP IOCGP
extern volatile unsigned char           IOCGP               __at(0x1E60);
#ifndef _LIB_BUILD
asm("IOCGP equ 01E60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned IOCGP5                 :1;
    };
} IOCGPbits_t;
extern volatile IOCGPbits_t IOCGPbits __at(0x1E60);
// bitfield macros
#define _IOCGP_IOCGP5_POSN                                  0x5
#define _IOCGP_IOCGP5_POSITION                              0x5
#define _IOCGP_IOCGP5_SIZE                                  0x1
#define _IOCGP_IOCGP5_LENGTH                                0x1
#define _IOCGP_IOCGP5_MASK                                  0x20

// Register: IOCGN
#define IOCGN IOCGN
extern volatile unsigned char           IOCGN               __at(0x1E61);
#ifndef _LIB_BUILD
asm("IOCGN equ 01E61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned IOCGN5                 :1;
    };
} IOCGNbits_t;
extern volatile IOCGNbits_t IOCGNbits __at(0x1E61);
// bitfield macros
#define _IOCGN_IOCGN5_POSN                                  0x5
#define _IOCGN_IOCGN5_POSITION                              0x5
#define _IOCGN_IOCGN5_SIZE                                  0x1
#define _IOCGN_IOCGN5_LENGTH                                0x1
#define _IOCGN_IOCGN5_MASK                                  0x20

// Register: IOCGF
#define IOCGF IOCGF
extern volatile unsigned char           IOCGF               __at(0x1E62);
#ifndef _LIB_BUILD
asm("IOCGF equ 01E62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned IOCGF5                 :1;
    };
} IOCGFbits_t;
extern volatile IOCGFbits_t IOCGFbits __at(0x1E62);
// bitfield macros
#define _IOCGF_IOCGF5_POSN                                  0x5
#define _IOCGF_IOCGF5_POSITION                              0x5
#define _IOCGF_IOCGF5_SIZE                                  0x1
#define _IOCGF_IOCGF5_LENGTH                                0x1
#define _IOCGF_IOCGF5_MASK                                  0x20

// Register: ANSELH
#define ANSELH ANSELH
extern volatile unsigned char           ANSELH              __at(0x1E66);
#ifndef _LIB_BUILD
asm("ANSELH equ 01E66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELH0                :1;
        unsigned ANSELH1                :1;
        unsigned ANSELH2                :1;
        unsigned ANSELH3                :1;
    };
} ANSELHbits_t;
extern volatile ANSELHbits_t ANSELHbits __at(0x1E66);
// bitfield macros
#define _ANSELH_ANSELH0_POSN                                0x0
#define _ANSELH_ANSELH0_POSITION                            0x0
#define _ANSELH_ANSELH0_SIZE                                0x1
#define _ANSELH_ANSELH0_LENGTH                              0x1
#define _ANSELH_ANSELH0_MASK                                0x1
#define _ANSELH_ANSELH1_POSN                                0x1
#define _ANSELH_ANSELH1_POSITION                            0x1
#define _ANSELH_ANSELH1_SIZE                                0x1
#define _ANSELH_ANSELH1_LENGTH                              0x1
#define _ANSELH_ANSELH1_MASK                                0x2
#define _ANSELH_ANSELH2_POSN                                0x2
#define _ANSELH_ANSELH2_POSITION                            0x2
#define _ANSELH_ANSELH2_SIZE                                0x1
#define _ANSELH_ANSELH2_LENGTH                              0x1
#define _ANSELH_ANSELH2_MASK                                0x4
#define _ANSELH_ANSELH3_POSN                                0x3
#define _ANSELH_ANSELH3_POSITION                            0x3
#define _ANSELH_ANSELH3_SIZE                                0x1
#define _ANSELH_ANSELH3_LENGTH                              0x1
#define _ANSELH_ANSELH3_MASK                                0x8

// Register: WPUH
#define WPUH WPUH
extern volatile unsigned char           WPUH                __at(0x1E67);
#ifndef _LIB_BUILD
asm("WPUH equ 01E67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUH0                  :1;
        unsigned WPUH1                  :1;
        unsigned WPUH2                  :1;
        unsigned WPUH3                  :1;
    };
} WPUHbits_t;
extern volatile WPUHbits_t WPUHbits __at(0x1E67);
// bitfield macros
#define _WPUH_WPUH0_POSN                                    0x0
#define _WPUH_WPUH0_POSITION                                0x0
#define _WPUH_WPUH0_SIZE                                    0x1
#define _WPUH_WPUH0_LENGTH                                  0x1
#define _WPUH_WPUH0_MASK                                    0x1
#define _WPUH_WPUH1_POSN                                    0x1
#define _WPUH_WPUH1_POSITION                                0x1
#define _WPUH_WPUH1_SIZE                                    0x1
#define _WPUH_WPUH1_LENGTH                                  0x1
#define _WPUH_WPUH1_MASK                                    0x2
#define _WPUH_WPUH2_POSN                                    0x2
#define _WPUH_WPUH2_POSITION                                0x2
#define _WPUH_WPUH2_SIZE                                    0x1
#define _WPUH_WPUH2_LENGTH                                  0x1
#define _WPUH_WPUH2_MASK                                    0x4
#define _WPUH_WPUH3_POSN                                    0x3
#define _WPUH_WPUH3_POSITION                                0x3
#define _WPUH_WPUH3_SIZE                                    0x1
#define _WPUH_WPUH3_LENGTH                                  0x1
#define _WPUH_WPUH3_MASK                                    0x8

// Register: ODCONH
#define ODCONH ODCONH
extern volatile unsigned char           ODCONH              __at(0x1E68);
#ifndef _LIB_BUILD
asm("ODCONH equ 01E68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCH0                  :1;
        unsigned ODCH1                  :1;
        unsigned ODCH2                  :1;
        unsigned ODCH3                  :1;
    };
} ODCONHbits_t;
extern volatile ODCONHbits_t ODCONHbits __at(0x1E68);
// bitfield macros
#define _ODCONH_ODCH0_POSN                                  0x0
#define _ODCONH_ODCH0_POSITION                              0x0
#define _ODCONH_ODCH0_SIZE                                  0x1
#define _ODCONH_ODCH0_LENGTH                                0x1
#define _ODCONH_ODCH0_MASK                                  0x1
#define _ODCONH_ODCH1_POSN                                  0x1
#define _ODCONH_ODCH1_POSITION                              0x1
#define _ODCONH_ODCH1_SIZE                                  0x1
#define _ODCONH_ODCH1_LENGTH                                0x1
#define _ODCONH_ODCH1_MASK                                  0x2
#define _ODCONH_ODCH2_POSN                                  0x2
#define _ODCONH_ODCH2_POSITION                              0x2
#define _ODCONH_ODCH2_SIZE                                  0x1
#define _ODCONH_ODCH2_LENGTH                                0x1
#define _ODCONH_ODCH2_MASK                                  0x4
#define _ODCONH_ODCH3_POSN                                  0x3
#define _ODCONH_ODCH3_POSITION                              0x3
#define _ODCONH_ODCH3_SIZE                                  0x1
#define _ODCONH_ODCH3_LENGTH                                0x1
#define _ODCONH_ODCH3_MASK                                  0x8

// Register: SLRCONH
#define SLRCONH SLRCONH
extern volatile unsigned char           SLRCONH             __at(0x1E69);
#ifndef _LIB_BUILD
asm("SLRCONH equ 01E69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRH0                  :1;
        unsigned SLRH1                  :1;
        unsigned SLRH2                  :1;
        unsigned SLRH3                  :1;
    };
} SLRCONHbits_t;
extern volatile SLRCONHbits_t SLRCONHbits __at(0x1E69);
// bitfield macros
#define _SLRCONH_SLRH0_POSN                                 0x0
#define _SLRCONH_SLRH0_POSITION                             0x0
#define _SLRCONH_SLRH0_SIZE                                 0x1
#define _SLRCONH_SLRH0_LENGTH                               0x1
#define _SLRCONH_SLRH0_MASK                                 0x1
#define _SLRCONH_SLRH1_POSN                                 0x1
#define _SLRCONH_SLRH1_POSITION                             0x1
#define _SLRCONH_SLRH1_SIZE                                 0x1
#define _SLRCONH_SLRH1_LENGTH                               0x1
#define _SLRCONH_SLRH1_MASK                                 0x2
#define _SLRCONH_SLRH2_POSN                                 0x2
#define _SLRCONH_SLRH2_POSITION                             0x2
#define _SLRCONH_SLRH2_SIZE                                 0x1
#define _SLRCONH_SLRH2_LENGTH                               0x1
#define _SLRCONH_SLRH2_MASK                                 0x4
#define _SLRCONH_SLRH3_POSN                                 0x3
#define _SLRCONH_SLRH3_POSITION                             0x3
#define _SLRCONH_SLRH3_SIZE                                 0x1
#define _SLRCONH_SLRH3_LENGTH                               0x1
#define _SLRCONH_SLRH3_MASK                                 0x8

// Register: INLVLH
#define INLVLH INLVLH
extern volatile unsigned char           INLVLH              __at(0x1E6A);
#ifndef _LIB_BUILD
asm("INLVLH equ 01E6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLH0                :1;
        unsigned INLVLH1                :1;
        unsigned INLVLH2                :1;
        unsigned INLVLH3                :1;
    };
} INLVLHbits_t;
extern volatile INLVLHbits_t INLVLHbits __at(0x1E6A);
// bitfield macros
#define _INLVLH_INLVLH0_POSN                                0x0
#define _INLVLH_INLVLH0_POSITION                            0x0
#define _INLVLH_INLVLH0_SIZE                                0x1
#define _INLVLH_INLVLH0_LENGTH                              0x1
#define _INLVLH_INLVLH0_MASK                                0x1
#define _INLVLH_INLVLH1_POSN                                0x1
#define _INLVLH_INLVLH1_POSITION                            0x1
#define _INLVLH_INLVLH1_SIZE                                0x1
#define _INLVLH_INLVLH1_LENGTH                              0x1
#define _INLVLH_INLVLH1_MASK                                0x2
#define _INLVLH_INLVLH2_POSN                                0x2
#define _INLVLH_INLVLH2_POSITION                            0x2
#define _INLVLH_INLVLH2_SIZE                                0x1
#define _INLVLH_INLVLH2_LENGTH                              0x1
#define _INLVLH_INLVLH2_MASK                                0x4
#define _INLVLH_INLVLH3_POSN                                0x3
#define _INLVLH_INLVLH3_POSITION                            0x3
#define _INLVLH_INLVLH3_SIZE                                0x1
#define _INLVLH_INLVLH3_LENGTH                              0x1
#define _INLVLH_INLVLH3_MASK                                0x8

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x1E8F);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 01E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x1E8F);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0x1E90);
#ifndef _LIB_BUILD
asm("INTPPS equ 01E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :6;
    };
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
        unsigned INTPPS4                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0x1E90);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x6
#define _INTPPS_INTPPS_LENGTH                               0x6
#define _INTPPS_INTPPS_MASK                                 0x3F
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8
#define _INTPPS_INTPPS4_POSN                                0x4
#define _INTPPS_INTPPS4_POSITION                            0x4
#define _INTPPS_INTPPS4_SIZE                                0x1
#define _INTPPS_INTPPS4_LENGTH                              0x1
#define _INTPPS_INTPPS4_MASK                                0x10

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x1E91);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 01E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :6;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x1E91);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x6
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x6
#define _T0CKIPPS_T0CKIPPS_MASK                             0x3F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x1E92);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 01E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :6;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x1E92);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x6
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x6
#define _T1CKIPPS_T1CKIPPS_MASK                             0x3F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x1E93);
#ifndef _LIB_BUILD
asm("T1GPPS equ 01E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :6;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x1E93);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x6
#define _T1GPPS_T1GPPS_LENGTH                               0x6
#define _T1GPPS_T1GPPS_MASK                                 0x3F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x1E9C);
#ifndef _LIB_BUILD
asm("T2INPPS equ 01E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :6;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x1E9C);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x6
#define _T2INPPS_T2INPPS_LENGTH                             0x6
#define _T2INPPS_T2INPPS_MASK                               0x3F
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0x1E9D);
#ifndef _LIB_BUILD
asm("T4INPPS equ 01E9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4INPPS                :6;
    };
    struct {
        unsigned T4INPPS0               :1;
        unsigned T4INPPS1               :1;
        unsigned T4INPPS2               :1;
        unsigned T4INPPS3               :1;
        unsigned T4INPPS4               :1;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0x1E9D);
// bitfield macros
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x6
#define _T4INPPS_T4INPPS_LENGTH                             0x6
#define _T4INPPS_T4INPPS_MASK                               0x3F
#define _T4INPPS_T4INPPS0_POSN                              0x0
#define _T4INPPS_T4INPPS0_POSITION                          0x0
#define _T4INPPS_T4INPPS0_SIZE                              0x1
#define _T4INPPS_T4INPPS0_LENGTH                            0x1
#define _T4INPPS_T4INPPS0_MASK                              0x1
#define _T4INPPS_T4INPPS1_POSN                              0x1
#define _T4INPPS_T4INPPS1_POSITION                          0x1
#define _T4INPPS_T4INPPS1_SIZE                              0x1
#define _T4INPPS_T4INPPS1_LENGTH                            0x1
#define _T4INPPS_T4INPPS1_MASK                              0x2
#define _T4INPPS_T4INPPS2_POSN                              0x2
#define _T4INPPS_T4INPPS2_POSITION                          0x2
#define _T4INPPS_T4INPPS2_SIZE                              0x1
#define _T4INPPS_T4INPPS2_LENGTH                            0x1
#define _T4INPPS_T4INPPS2_MASK                              0x4
#define _T4INPPS_T4INPPS3_POSN                              0x3
#define _T4INPPS_T4INPPS3_POSITION                          0x3
#define _T4INPPS_T4INPPS3_SIZE                              0x1
#define _T4INPPS_T4INPPS3_LENGTH                            0x1
#define _T4INPPS_T4INPPS3_MASK                              0x8
#define _T4INPPS_T4INPPS4_POSN                              0x4
#define _T4INPPS_T4INPPS4_POSITION                          0x4
#define _T4INPPS_T4INPPS4_SIZE                              0x1
#define _T4INPPS_T4INPPS4_LENGTH                            0x1
#define _T4INPPS_T4INPPS4_MASK                              0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x1EA1);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 01EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :6;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x1EA1);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x6
#define _CCP1PPS_CCP1PPS_LENGTH                             0x6
#define _CCP1PPS_CCP1PPS_MASK                               0x3F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x1EA2);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 01EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :6;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x1EA2);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x6
#define _CCP2PPS_CCP2PPS_LENGTH                             0x6
#define _CCP2PPS_CCP2PPS_MASK                               0x3F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: SMT1WINPPS
#define SMT1WINPPS SMT1WINPPS
extern volatile unsigned char           SMT1WINPPS          __at(0x1EA9);
#ifndef _LIB_BUILD
asm("SMT1WINPPS equ 01EA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1WINPPS             :6;
    };
    struct {
        unsigned SMT1WINPPS0            :1;
        unsigned SMT1WINPPS1            :1;
        unsigned SMT1WINPPS2            :1;
        unsigned SMT1WINPPS3            :1;
        unsigned SMT1WINPPS4            :1;
    };
} SMT1WINPPSbits_t;
extern volatile SMT1WINPPSbits_t SMT1WINPPSbits __at(0x1EA9);
// bitfield macros
#define _SMT1WINPPS_SMT1WINPPS_POSN                         0x0
#define _SMT1WINPPS_SMT1WINPPS_POSITION                     0x0
#define _SMT1WINPPS_SMT1WINPPS_SIZE                         0x6
#define _SMT1WINPPS_SMT1WINPPS_LENGTH                       0x6
#define _SMT1WINPPS_SMT1WINPPS_MASK                         0x3F
#define _SMT1WINPPS_SMT1WINPPS0_POSN                        0x0
#define _SMT1WINPPS_SMT1WINPPS0_POSITION                    0x0
#define _SMT1WINPPS_SMT1WINPPS0_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS0_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS0_MASK                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_POSN                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_POSITION                    0x1
#define _SMT1WINPPS_SMT1WINPPS1_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS1_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS1_MASK                        0x2
#define _SMT1WINPPS_SMT1WINPPS2_POSN                        0x2
#define _SMT1WINPPS_SMT1WINPPS2_POSITION                    0x2
#define _SMT1WINPPS_SMT1WINPPS2_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS2_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS2_MASK                        0x4
#define _SMT1WINPPS_SMT1WINPPS3_POSN                        0x3
#define _SMT1WINPPS_SMT1WINPPS3_POSITION                    0x3
#define _SMT1WINPPS_SMT1WINPPS3_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS3_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS3_MASK                        0x8
#define _SMT1WINPPS_SMT1WINPPS4_POSN                        0x4
#define _SMT1WINPPS_SMT1WINPPS4_POSITION                    0x4
#define _SMT1WINPPS_SMT1WINPPS4_SIZE                        0x1
#define _SMT1WINPPS_SMT1WINPPS4_LENGTH                      0x1
#define _SMT1WINPPS_SMT1WINPPS4_MASK                        0x10

// Register: SMT1SIGPPS
#define SMT1SIGPPS SMT1SIGPPS
extern volatile unsigned char           SMT1SIGPPS          __at(0x1EAA);
#ifndef _LIB_BUILD
asm("SMT1SIGPPS equ 01EAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1SIGPPS             :6;
    };
    struct {
        unsigned SMT1SIGPPS0            :1;
        unsigned SMT1SIGPPS1            :1;
        unsigned SMT1SIGPPS2            :1;
        unsigned SMT1SIGPPS3            :1;
        unsigned SMT1SIGPPS4            :1;
    };
} SMT1SIGPPSbits_t;
extern volatile SMT1SIGPPSbits_t SMT1SIGPPSbits __at(0x1EAA);
// bitfield macros
#define _SMT1SIGPPS_SMT1SIGPPS_POSN                         0x0
#define _SMT1SIGPPS_SMT1SIGPPS_POSITION                     0x0
#define _SMT1SIGPPS_SMT1SIGPPS_SIZE                         0x6
#define _SMT1SIGPPS_SMT1SIGPPS_LENGTH                       0x6
#define _SMT1SIGPPS_SMT1SIGPPS_MASK                         0x3F
#define _SMT1SIGPPS_SMT1SIGPPS0_POSN                        0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_POSITION                    0x0
#define _SMT1SIGPPS_SMT1SIGPPS0_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS0_MASK                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSN                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_POSITION                    0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS1_MASK                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSN                        0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_POSITION                    0x2
#define _SMT1SIGPPS_SMT1SIGPPS2_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS2_MASK                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS3_POSN                        0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_POSITION                    0x3
#define _SMT1SIGPPS_SMT1SIGPPS3_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS3_MASK                        0x8
#define _SMT1SIGPPS_SMT1SIGPPS4_POSN                        0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_POSITION                    0x4
#define _SMT1SIGPPS_SMT1SIGPPS4_SIZE                        0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_LENGTH                      0x1
#define _SMT1SIGPPS_SMT1SIGPPS4_MASK                        0x10

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0x1EB1);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 01EB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1PPS                :6;
    };
    struct {
        unsigned CWG1PPS0               :1;
        unsigned CWG1PPS1               :1;
        unsigned CWG1PPS2               :1;
        unsigned CWG1PPS3               :1;
        unsigned CWG1PPS4               :1;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0x1EB1);
// bitfield macros
#define _CWG1PPS_CWG1PPS_POSN                               0x0
#define _CWG1PPS_CWG1PPS_POSITION                           0x0
#define _CWG1PPS_CWG1PPS_SIZE                               0x6
#define _CWG1PPS_CWG1PPS_LENGTH                             0x6
#define _CWG1PPS_CWG1PPS_MASK                               0x3F
#define _CWG1PPS_CWG1PPS0_POSN                              0x0
#define _CWG1PPS_CWG1PPS0_POSITION                          0x0
#define _CWG1PPS_CWG1PPS0_SIZE                              0x1
#define _CWG1PPS_CWG1PPS0_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS0_MASK                              0x1
#define _CWG1PPS_CWG1PPS1_POSN                              0x1
#define _CWG1PPS_CWG1PPS1_POSITION                          0x1
#define _CWG1PPS_CWG1PPS1_SIZE                              0x1
#define _CWG1PPS_CWG1PPS1_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS1_MASK                              0x2
#define _CWG1PPS_CWG1PPS2_POSN                              0x2
#define _CWG1PPS_CWG1PPS2_POSITION                          0x2
#define _CWG1PPS_CWG1PPS2_SIZE                              0x1
#define _CWG1PPS_CWG1PPS2_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS2_MASK                              0x4
#define _CWG1PPS_CWG1PPS3_POSN                              0x3
#define _CWG1PPS_CWG1PPS3_POSITION                          0x3
#define _CWG1PPS_CWG1PPS3_SIZE                              0x1
#define _CWG1PPS_CWG1PPS3_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS3_MASK                              0x8
#define _CWG1PPS_CWG1PPS4_POSN                              0x4
#define _CWG1PPS_CWG1PPS4_POSITION                          0x4
#define _CWG1PPS_CWG1PPS4_SIZE                              0x1
#define _CWG1PPS_CWG1PPS4_LENGTH                            0x1
#define _CWG1PPS_CWG1PPS4_MASK                              0x10

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x1EBB);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 01EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :6;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x1EBB);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x6
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x6
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x3F
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x1EBC);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 01EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :6;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x1EBC);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x6
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x6
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x3F
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x1EBD);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 01EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :6;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x1EBD);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x6
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x6
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x3F
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x1EBE);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 01EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :6;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x1EBE);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x6
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x6
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x3F
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x1EC3);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 01EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACTPPS               :6;
    };
    struct {
        unsigned ADACTPPS0              :1;
        unsigned ADACTPPS1              :1;
        unsigned ADACTPPS2              :1;
        unsigned ADACTPPS3              :1;
        unsigned ADACTPPS4              :1;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x1EC3);
// bitfield macros
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x6
#define _ADACTPPS_ADACTPPS_LENGTH                           0x6
#define _ADACTPPS_ADACTPPS_MASK                             0x3F
#define _ADACTPPS_ADACTPPS0_POSN                            0x0
#define _ADACTPPS_ADACTPPS0_POSITION                        0x0
#define _ADACTPPS_ADACTPPS0_SIZE                            0x1
#define _ADACTPPS_ADACTPPS0_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS0_MASK                            0x1
#define _ADACTPPS_ADACTPPS1_POSN                            0x1
#define _ADACTPPS_ADACTPPS1_POSITION                        0x1
#define _ADACTPPS_ADACTPPS1_SIZE                            0x1
#define _ADACTPPS_ADACTPPS1_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS1_MASK                            0x2
#define _ADACTPPS_ADACTPPS2_POSN                            0x2
#define _ADACTPPS_ADACTPPS2_POSITION                        0x2
#define _ADACTPPS_ADACTPPS2_SIZE                            0x1
#define _ADACTPPS_ADACTPPS2_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS2_MASK                            0x4
#define _ADACTPPS_ADACTPPS3_POSN                            0x3
#define _ADACTPPS_ADACTPPS3_POSITION                        0x3
#define _ADACTPPS_ADACTPPS3_SIZE                            0x1
#define _ADACTPPS_ADACTPPS3_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS3_MASK                            0x8
#define _ADACTPPS_ADACTPPS4_POSN                            0x4
#define _ADACTPPS_ADACTPPS4_POSITION                        0x4
#define _ADACTPPS_ADACTPPS4_SIZE                            0x1
#define _ADACTPPS_ADACTPPS4_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS4_MASK                            0x10

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0x1EC5);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 01EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1CLKPPS             :6;
    };
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0x1EC5);
// bitfield macros
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x6
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x6
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x3F
#define _SSP1CLKPPS_SSP1CLKPPS0_POSN                        0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_POSITION                    0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_MASK                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSN                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSITION                    0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_MASK                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSN                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSITION                    0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_MASK                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS3_POSN                        0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_POSITION                    0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_MASK                        0x8
#define _SSP1CLKPPS_SSP1CLKPPS4_POSN                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_POSITION                    0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_MASK                        0x10

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0x1EC6);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 01EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1DATPPS             :6;
    };
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0x1EC6);
// bitfield macros
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x6
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x6
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x3F
#define _SSP1DATPPS_SSP1DATPPS0_POSN                        0x0
#define _SSP1DATPPS_SSP1DATPPS0_POSITION                    0x0
#define _SSP1DATPPS_SSP1DATPPS0_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS0_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS0_MASK                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSN                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSITION                    0x1
#define _SSP1DATPPS_SSP1DATPPS1_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS1_MASK                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSN                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSITION                    0x2
#define _SSP1DATPPS_SSP1DATPPS2_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS2_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS2_MASK                        0x4
#define _SSP1DATPPS_SSP1DATPPS3_POSN                        0x3
#define _SSP1DATPPS_SSP1DATPPS3_POSITION                    0x3
#define _SSP1DATPPS_SSP1DATPPS3_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS3_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS3_MASK                        0x8
#define _SSP1DATPPS_SSP1DATPPS4_POSN                        0x4
#define _SSP1DATPPS_SSP1DATPPS4_POSITION                    0x4
#define _SSP1DATPPS_SSP1DATPPS4_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS4_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS4_MASK                        0x10

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0x1EC7);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 01EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1SSPPS              :6;
    };
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0x1EC7);
// bitfield macros
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x6
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x6
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x3F
#define _SSP1SSPPS_SSP1SSPPS0_POSN                          0x0
#define _SSP1SSPPS_SSP1SSPPS0_POSITION                      0x0
#define _SSP1SSPPS_SSP1SSPPS0_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS0_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS0_MASK                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSN                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSITION                      0x1
#define _SSP1SSPPS_SSP1SSPPS1_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS1_MASK                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSN                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSITION                      0x2
#define _SSP1SSPPS_SSP1SSPPS2_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS2_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS2_MASK                          0x4
#define _SSP1SSPPS_SSP1SSPPS3_POSN                          0x3
#define _SSP1SSPPS_SSP1SSPPS3_POSITION                      0x3
#define _SSP1SSPPS_SSP1SSPPS3_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS3_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS3_MASK                          0x8
#define _SSP1SSPPS_SSP1SSPPS4_POSN                          0x4
#define _SSP1SSPPS_SSP1SSPPS4_POSITION                      0x4
#define _SSP1SSPPS_SSP1SSPPS4_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS4_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS4_MASK                          0x10

// Register: RX1PPS
#define RX1PPS RX1PPS
extern volatile unsigned char           RX1PPS              __at(0x1ECB);
#ifndef _LIB_BUILD
asm("RX1PPS equ 01ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX1PPS                 :6;
    };
    struct {
        unsigned RX1PPS0                :1;
        unsigned RX1PPS1                :1;
        unsigned RX1PPS2                :1;
        unsigned RX1PPS3                :1;
        unsigned RX1PPS4                :1;
    };
} RX1PPSbits_t;
extern volatile RX1PPSbits_t RX1PPSbits __at(0x1ECB);
// bitfield macros
#define _RX1PPS_RX1PPS_POSN                                 0x0
#define _RX1PPS_RX1PPS_POSITION                             0x0
#define _RX1PPS_RX1PPS_SIZE                                 0x6
#define _RX1PPS_RX1PPS_LENGTH                               0x6
#define _RX1PPS_RX1PPS_MASK                                 0x3F
#define _RX1PPS_RX1PPS0_POSN                                0x0
#define _RX1PPS_RX1PPS0_POSITION                            0x0
#define _RX1PPS_RX1PPS0_SIZE                                0x1
#define _RX1PPS_RX1PPS0_LENGTH                              0x1
#define _RX1PPS_RX1PPS0_MASK                                0x1
#define _RX1PPS_RX1PPS1_POSN                                0x1
#define _RX1PPS_RX1PPS1_POSITION                            0x1
#define _RX1PPS_RX1PPS1_SIZE                                0x1
#define _RX1PPS_RX1PPS1_LENGTH                              0x1
#define _RX1PPS_RX1PPS1_MASK                                0x2
#define _RX1PPS_RX1PPS2_POSN                                0x2
#define _RX1PPS_RX1PPS2_POSITION                            0x2
#define _RX1PPS_RX1PPS2_SIZE                                0x1
#define _RX1PPS_RX1PPS2_LENGTH                              0x1
#define _RX1PPS_RX1PPS2_MASK                                0x4
#define _RX1PPS_RX1PPS3_POSN                                0x3
#define _RX1PPS_RX1PPS3_POSITION                            0x3
#define _RX1PPS_RX1PPS3_SIZE                                0x1
#define _RX1PPS_RX1PPS3_LENGTH                              0x1
#define _RX1PPS_RX1PPS3_MASK                                0x8
#define _RX1PPS_RX1PPS4_POSN                                0x4
#define _RX1PPS_RX1PPS4_POSITION                            0x4
#define _RX1PPS_RX1PPS4_SIZE                                0x1
#define _RX1PPS_RX1PPS4_LENGTH                              0x1
#define _RX1PPS_RX1PPS4_MASK                                0x10

// Register: TX1PPS
#define TX1PPS TX1PPS
extern volatile unsigned char           TX1PPS              __at(0x1ECC);
#ifndef _LIB_BUILD
asm("TX1PPS equ 01ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1PPS                 :6;
    };
    struct {
        unsigned TX1PPS0                :1;
        unsigned TX1PPS1                :1;
        unsigned TX1PPS2                :1;
        unsigned TX1PPS3                :1;
        unsigned TX1PPS4                :1;
    };
} TX1PPSbits_t;
extern volatile TX1PPSbits_t TX1PPSbits __at(0x1ECC);
// bitfield macros
#define _TX1PPS_TX1PPS_POSN                                 0x0
#define _TX1PPS_TX1PPS_POSITION                             0x0
#define _TX1PPS_TX1PPS_SIZE                                 0x6
#define _TX1PPS_TX1PPS_LENGTH                               0x6
#define _TX1PPS_TX1PPS_MASK                                 0x3F
#define _TX1PPS_TX1PPS0_POSN                                0x0
#define _TX1PPS_TX1PPS0_POSITION                            0x0
#define _TX1PPS_TX1PPS0_SIZE                                0x1
#define _TX1PPS_TX1PPS0_LENGTH                              0x1
#define _TX1PPS_TX1PPS0_MASK                                0x1
#define _TX1PPS_TX1PPS1_POSN                                0x1
#define _TX1PPS_TX1PPS1_POSITION                            0x1
#define _TX1PPS_TX1PPS1_SIZE                                0x1
#define _TX1PPS_TX1PPS1_LENGTH                              0x1
#define _TX1PPS_TX1PPS1_MASK                                0x2
#define _TX1PPS_TX1PPS2_POSN                                0x2
#define _TX1PPS_TX1PPS2_POSITION                            0x2
#define _TX1PPS_TX1PPS2_SIZE                                0x1
#define _TX1PPS_TX1PPS2_LENGTH                              0x1
#define _TX1PPS_TX1PPS2_MASK                                0x4
#define _TX1PPS_TX1PPS3_POSN                                0x3
#define _TX1PPS_TX1PPS3_POSITION                            0x3
#define _TX1PPS_TX1PPS3_SIZE                                0x1
#define _TX1PPS_TX1PPS3_LENGTH                              0x1
#define _TX1PPS_TX1PPS3_MASK                                0x8
#define _TX1PPS_TX1PPS4_POSN                                0x4
#define _TX1PPS_TX1PPS4_POSITION                            0x4
#define _TX1PPS_TX1PPS4_SIZE                                0x1
#define _TX1PPS_TX1PPS4_LENGTH                              0x1
#define _TX1PPS_TX1PPS4_MASK                                0x10

// Register: RX2PPS
#define RX2PPS RX2PPS
extern volatile unsigned char           RX2PPS              __at(0x1ECD);
#ifndef _LIB_BUILD
asm("RX2PPS equ 01ECDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX2PPS                 :6;
    };
    struct {
        unsigned RX2PPS0                :1;
        unsigned RX2PPS1                :1;
        unsigned RX2PPS2                :1;
        unsigned RX2PPS3                :1;
        unsigned RX2PPS4                :1;
    };
} RX2PPSbits_t;
extern volatile RX2PPSbits_t RX2PPSbits __at(0x1ECD);
// bitfield macros
#define _RX2PPS_RX2PPS_POSN                                 0x0
#define _RX2PPS_RX2PPS_POSITION                             0x0
#define _RX2PPS_RX2PPS_SIZE                                 0x6
#define _RX2PPS_RX2PPS_LENGTH                               0x6
#define _RX2PPS_RX2PPS_MASK                                 0x3F
#define _RX2PPS_RX2PPS0_POSN                                0x0
#define _RX2PPS_RX2PPS0_POSITION                            0x0
#define _RX2PPS_RX2PPS0_SIZE                                0x1
#define _RX2PPS_RX2PPS0_LENGTH                              0x1
#define _RX2PPS_RX2PPS0_MASK                                0x1
#define _RX2PPS_RX2PPS1_POSN                                0x1
#define _RX2PPS_RX2PPS1_POSITION                            0x1
#define _RX2PPS_RX2PPS1_SIZE                                0x1
#define _RX2PPS_RX2PPS1_LENGTH                              0x1
#define _RX2PPS_RX2PPS1_MASK                                0x2
#define _RX2PPS_RX2PPS2_POSN                                0x2
#define _RX2PPS_RX2PPS2_POSITION                            0x2
#define _RX2PPS_RX2PPS2_SIZE                                0x1
#define _RX2PPS_RX2PPS2_LENGTH                              0x1
#define _RX2PPS_RX2PPS2_MASK                                0x4
#define _RX2PPS_RX2PPS3_POSN                                0x3
#define _RX2PPS_RX2PPS3_POSITION                            0x3
#define _RX2PPS_RX2PPS3_SIZE                                0x1
#define _RX2PPS_RX2PPS3_LENGTH                              0x1
#define _RX2PPS_RX2PPS3_MASK                                0x8
#define _RX2PPS_RX2PPS4_POSN                                0x4
#define _RX2PPS_RX2PPS4_POSITION                            0x4
#define _RX2PPS_RX2PPS4_SIZE                                0x1
#define _RX2PPS_RX2PPS4_LENGTH                              0x1
#define _RX2PPS_RX2PPS4_MASK                                0x10

// Register: TX2PPS
#define TX2PPS TX2PPS
extern volatile unsigned char           TX2PPS              __at(0x1ECE);
#ifndef _LIB_BUILD
asm("TX2PPS equ 01ECEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX2PPS                 :6;
    };
    struct {
        unsigned TX2PPS0                :1;
        unsigned TX2PPS1                :1;
        unsigned TX2PPS2                :1;
        unsigned TX2PPS3                :1;
        unsigned TX2PPS4                :1;
    };
} TX2PPSbits_t;
extern volatile TX2PPSbits_t TX2PPSbits __at(0x1ECE);
// bitfield macros
#define _TX2PPS_TX2PPS_POSN                                 0x0
#define _TX2PPS_TX2PPS_POSITION                             0x0
#define _TX2PPS_TX2PPS_SIZE                                 0x6
#define _TX2PPS_TX2PPS_LENGTH                               0x6
#define _TX2PPS_TX2PPS_MASK                                 0x3F
#define _TX2PPS_TX2PPS0_POSN                                0x0
#define _TX2PPS_TX2PPS0_POSITION                            0x0
#define _TX2PPS_TX2PPS0_SIZE                                0x1
#define _TX2PPS_TX2PPS0_LENGTH                              0x1
#define _TX2PPS_TX2PPS0_MASK                                0x1
#define _TX2PPS_TX2PPS1_POSN                                0x1
#define _TX2PPS_TX2PPS1_POSITION                            0x1
#define _TX2PPS_TX2PPS1_SIZE                                0x1
#define _TX2PPS_TX2PPS1_LENGTH                              0x1
#define _TX2PPS_TX2PPS1_MASK                                0x2
#define _TX2PPS_TX2PPS2_POSN                                0x2
#define _TX2PPS_TX2PPS2_POSITION                            0x2
#define _TX2PPS_TX2PPS2_SIZE                                0x1
#define _TX2PPS_TX2PPS2_LENGTH                              0x1
#define _TX2PPS_TX2PPS2_MASK                                0x4
#define _TX2PPS_TX2PPS3_POSN                                0x3
#define _TX2PPS_TX2PPS3_POSITION                            0x3
#define _TX2PPS_TX2PPS3_SIZE                                0x1
#define _TX2PPS_TX2PPS3_LENGTH                              0x1
#define _TX2PPS_TX2PPS3_MASK                                0x8
#define _TX2PPS_TX2PPS4_POSN                                0x4
#define _TX2PPS_TX2PPS4_POSITION                            0x4
#define _TX2PPS_TX2PPS4_SIZE                                0x1
#define _TX2PPS_TX2PPS4_LENGTH                              0x1
#define _TX2PPS_TX2PPS4_MASK                                0x10

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x1F10);
#ifndef _LIB_BUILD
asm("RA0PPS equ 01F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
        unsigned RA0PPS5                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x1F10);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10
#define _RA0PPS_RA0PPS5_POSN                                0x5
#define _RA0PPS_RA0PPS5_POSITION                            0x5
#define _RA0PPS_RA0PPS5_SIZE                                0x1
#define _RA0PPS_RA0PPS5_LENGTH                              0x1
#define _RA0PPS_RA0PPS5_MASK                                0x20

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x1F11);
#ifndef _LIB_BUILD
asm("RA1PPS equ 01F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
        unsigned RA1PPS5                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x1F11);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10
#define _RA1PPS_RA1PPS5_POSN                                0x5
#define _RA1PPS_RA1PPS5_POSITION                            0x5
#define _RA1PPS_RA1PPS5_SIZE                                0x1
#define _RA1PPS_RA1PPS5_LENGTH                              0x1
#define _RA1PPS_RA1PPS5_MASK                                0x20

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x1F12);
#ifndef _LIB_BUILD
asm("RA2PPS equ 01F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
        unsigned RA2PPS5                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x1F12);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10
#define _RA2PPS_RA2PPS5_POSN                                0x5
#define _RA2PPS_RA2PPS5_POSITION                            0x5
#define _RA2PPS_RA2PPS5_SIZE                                0x1
#define _RA2PPS_RA2PPS5_LENGTH                              0x1
#define _RA2PPS_RA2PPS5_MASK                                0x20

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0x1F13);
#ifndef _LIB_BUILD
asm("RA3PPS equ 01F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
        unsigned RA3PPS5                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0x1F13);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10
#define _RA3PPS_RA3PPS5_POSN                                0x5
#define _RA3PPS_RA3PPS5_POSITION                            0x5
#define _RA3PPS_RA3PPS5_SIZE                                0x1
#define _RA3PPS_RA3PPS5_LENGTH                              0x1
#define _RA3PPS_RA3PPS5_MASK                                0x20

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x1F14);
#ifndef _LIB_BUILD
asm("RA4PPS equ 01F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
        unsigned RA4PPS5                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x1F14);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10
#define _RA4PPS_RA4PPS5_POSN                                0x5
#define _RA4PPS_RA4PPS5_POSITION                            0x5
#define _RA4PPS_RA4PPS5_SIZE                                0x1
#define _RA4PPS_RA4PPS5_LENGTH                              0x1
#define _RA4PPS_RA4PPS5_MASK                                0x20

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x1F15);
#ifndef _LIB_BUILD
asm("RA5PPS equ 01F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
        unsigned RA5PPS5                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x1F15);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10
#define _RA5PPS_RA5PPS5_POSN                                0x5
#define _RA5PPS_RA5PPS5_POSITION                            0x5
#define _RA5PPS_RA5PPS5_SIZE                                0x1
#define _RA5PPS_RA5PPS5_LENGTH                              0x1
#define _RA5PPS_RA5PPS5_MASK                                0x20

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0x1F16);
#ifndef _LIB_BUILD
asm("RA6PPS equ 01F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
        unsigned RA6PPS5                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0x1F16);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10
#define _RA6PPS_RA6PPS5_POSN                                0x5
#define _RA6PPS_RA6PPS5_POSITION                            0x5
#define _RA6PPS_RA6PPS5_SIZE                                0x1
#define _RA6PPS_RA6PPS5_LENGTH                              0x1
#define _RA6PPS_RA6PPS5_MASK                                0x20

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0x1F17);
#ifndef _LIB_BUILD
asm("RA7PPS equ 01F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
        unsigned RA7PPS5                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0x1F17);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10
#define _RA7PPS_RA7PPS5_POSN                                0x5
#define _RA7PPS_RA7PPS5_POSITION                            0x5
#define _RA7PPS_RA7PPS5_SIZE                                0x1
#define _RA7PPS_RA7PPS5_LENGTH                              0x1
#define _RA7PPS_RA7PPS5_MASK                                0x20

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0x1F18);
#ifndef _LIB_BUILD
asm("RB0PPS equ 01F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
        unsigned RB0PPS5                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0x1F18);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10
#define _RB0PPS_RB0PPS5_POSN                                0x5
#define _RB0PPS_RB0PPS5_POSITION                            0x5
#define _RB0PPS_RB0PPS5_SIZE                                0x1
#define _RB0PPS_RB0PPS5_LENGTH                              0x1
#define _RB0PPS_RB0PPS5_MASK                                0x20

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0x1F19);
#ifndef _LIB_BUILD
asm("RB1PPS equ 01F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
        unsigned RB1PPS5                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0x1F19);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10
#define _RB1PPS_RB1PPS5_POSN                                0x5
#define _RB1PPS_RB1PPS5_POSITION                            0x5
#define _RB1PPS_RB1PPS5_SIZE                                0x1
#define _RB1PPS_RB1PPS5_LENGTH                              0x1
#define _RB1PPS_RB1PPS5_MASK                                0x20

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0x1F1A);
#ifndef _LIB_BUILD
asm("RB2PPS equ 01F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
        unsigned RB2PPS5                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0x1F1A);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10
#define _RB2PPS_RB2PPS5_POSN                                0x5
#define _RB2PPS_RB2PPS5_POSITION                            0x5
#define _RB2PPS_RB2PPS5_SIZE                                0x1
#define _RB2PPS_RB2PPS5_LENGTH                              0x1
#define _RB2PPS_RB2PPS5_MASK                                0x20

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0x1F1B);
#ifndef _LIB_BUILD
asm("RB3PPS equ 01F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
        unsigned RB3PPS5                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0x1F1B);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10
#define _RB3PPS_RB3PPS5_POSN                                0x5
#define _RB3PPS_RB3PPS5_POSITION                            0x5
#define _RB3PPS_RB3PPS5_SIZE                                0x1
#define _RB3PPS_RB3PPS5_LENGTH                              0x1
#define _RB3PPS_RB3PPS5_MASK                                0x20

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0x1F1C);
#ifndef _LIB_BUILD
asm("RB4PPS equ 01F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
        unsigned RB4PPS5                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0x1F1C);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10
#define _RB4PPS_RB4PPS5_POSN                                0x5
#define _RB4PPS_RB4PPS5_POSITION                            0x5
#define _RB4PPS_RB4PPS5_SIZE                                0x1
#define _RB4PPS_RB4PPS5_LENGTH                              0x1
#define _RB4PPS_RB4PPS5_MASK                                0x20

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0x1F1D);
#ifndef _LIB_BUILD
asm("RB5PPS equ 01F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
        unsigned RB5PPS5                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0x1F1D);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10
#define _RB5PPS_RB5PPS5_POSN                                0x5
#define _RB5PPS_RB5PPS5_POSITION                            0x5
#define _RB5PPS_RB5PPS5_SIZE                                0x1
#define _RB5PPS_RB5PPS5_LENGTH                              0x1
#define _RB5PPS_RB5PPS5_MASK                                0x20

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0x1F1E);
#ifndef _LIB_BUILD
asm("RB6PPS equ 01F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
        unsigned RB6PPS5                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0x1F1E);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10
#define _RB6PPS_RB6PPS5_POSN                                0x5
#define _RB6PPS_RB6PPS5_POSITION                            0x5
#define _RB6PPS_RB6PPS5_SIZE                                0x1
#define _RB6PPS_RB6PPS5_LENGTH                              0x1
#define _RB6PPS_RB6PPS5_MASK                                0x20

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0x1F1F);
#ifndef _LIB_BUILD
asm("RB7PPS equ 01F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
        unsigned RB7PPS5                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0x1F1F);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10
#define _RB7PPS_RB7PPS5_POSN                                0x5
#define _RB7PPS_RB7PPS5_POSITION                            0x5
#define _RB7PPS_RB7PPS5_SIZE                                0x1
#define _RB7PPS_RB7PPS5_LENGTH                              0x1
#define _RB7PPS_RB7PPS5_MASK                                0x20

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x1F20);
#ifndef _LIB_BUILD
asm("RC0PPS equ 01F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
        unsigned RC0PPS5                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x1F20);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10
#define _RC0PPS_RC0PPS5_POSN                                0x5
#define _RC0PPS_RC0PPS5_POSITION                            0x5
#define _RC0PPS_RC0PPS5_SIZE                                0x1
#define _RC0PPS_RC0PPS5_LENGTH                              0x1
#define _RC0PPS_RC0PPS5_MASK                                0x20

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x1F21);
#ifndef _LIB_BUILD
asm("RC1PPS equ 01F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
        unsigned RC1PPS5                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x1F21);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10
#define _RC1PPS_RC1PPS5_POSN                                0x5
#define _RC1PPS_RC1PPS5_POSITION                            0x5
#define _RC1PPS_RC1PPS5_SIZE                                0x1
#define _RC1PPS_RC1PPS5_LENGTH                              0x1
#define _RC1PPS_RC1PPS5_MASK                                0x20

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x1F22);
#ifndef _LIB_BUILD
asm("RC2PPS equ 01F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
        unsigned RC2PPS5                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x1F22);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10
#define _RC2PPS_RC2PPS5_POSN                                0x5
#define _RC2PPS_RC2PPS5_POSITION                            0x5
#define _RC2PPS_RC2PPS5_SIZE                                0x1
#define _RC2PPS_RC2PPS5_LENGTH                              0x1
#define _RC2PPS_RC2PPS5_MASK                                0x20

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x1F23);
#ifndef _LIB_BUILD
asm("RC3PPS equ 01F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
        unsigned RC3PPS5                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x1F23);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10
#define _RC3PPS_RC3PPS5_POSN                                0x5
#define _RC3PPS_RC3PPS5_POSITION                            0x5
#define _RC3PPS_RC3PPS5_SIZE                                0x1
#define _RC3PPS_RC3PPS5_LENGTH                              0x1
#define _RC3PPS_RC3PPS5_MASK                                0x20

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x1F24);
#ifndef _LIB_BUILD
asm("RC4PPS equ 01F24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
        unsigned RC4PPS5                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x1F24);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10
#define _RC4PPS_RC4PPS5_POSN                                0x5
#define _RC4PPS_RC4PPS5_POSITION                            0x5
#define _RC4PPS_RC4PPS5_SIZE                                0x1
#define _RC4PPS_RC4PPS5_LENGTH                              0x1
#define _RC4PPS_RC4PPS5_MASK                                0x20

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x1F25);
#ifndef _LIB_BUILD
asm("RC5PPS equ 01F25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
        unsigned RC5PPS5                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x1F25);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10
#define _RC5PPS_RC5PPS5_POSN                                0x5
#define _RC5PPS_RC5PPS5_POSITION                            0x5
#define _RC5PPS_RC5PPS5_SIZE                                0x1
#define _RC5PPS_RC5PPS5_LENGTH                              0x1
#define _RC5PPS_RC5PPS5_MASK                                0x20

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0x1F26);
#ifndef _LIB_BUILD
asm("RC6PPS equ 01F26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
        unsigned RC6PPS5                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0x1F26);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10
#define _RC6PPS_RC6PPS5_POSN                                0x5
#define _RC6PPS_RC6PPS5_POSITION                            0x5
#define _RC6PPS_RC6PPS5_SIZE                                0x1
#define _RC6PPS_RC6PPS5_LENGTH                              0x1
#define _RC6PPS_RC6PPS5_MASK                                0x20

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0x1F27);
#ifndef _LIB_BUILD
asm("RC7PPS equ 01F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
        unsigned RC7PPS5                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0x1F27);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10
#define _RC7PPS_RC7PPS5_POSN                                0x5
#define _RC7PPS_RC7PPS5_POSITION                            0x5
#define _RC7PPS_RC7PPS5_SIZE                                0x1
#define _RC7PPS_RC7PPS5_LENGTH                              0x1
#define _RC7PPS_RC7PPS5_MASK                                0x20

// Register: RD0PPS
#define RD0PPS RD0PPS
extern volatile unsigned char           RD0PPS              __at(0x1F28);
#ifndef _LIB_BUILD
asm("RD0PPS equ 01F28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD0PPS0                :1;
        unsigned RD0PPS1                :1;
        unsigned RD0PPS2                :1;
        unsigned RD0PPS3                :1;
        unsigned RD0PPS4                :1;
        unsigned RD0PPS5                :1;
    };
} RD0PPSbits_t;
extern volatile RD0PPSbits_t RD0PPSbits __at(0x1F28);
// bitfield macros
#define _RD0PPS_RD0PPS0_POSN                                0x0
#define _RD0PPS_RD0PPS0_POSITION                            0x0
#define _RD0PPS_RD0PPS0_SIZE                                0x1
#define _RD0PPS_RD0PPS0_LENGTH                              0x1
#define _RD0PPS_RD0PPS0_MASK                                0x1
#define _RD0PPS_RD0PPS1_POSN                                0x1
#define _RD0PPS_RD0PPS1_POSITION                            0x1
#define _RD0PPS_RD0PPS1_SIZE                                0x1
#define _RD0PPS_RD0PPS1_LENGTH                              0x1
#define _RD0PPS_RD0PPS1_MASK                                0x2
#define _RD0PPS_RD0PPS2_POSN                                0x2
#define _RD0PPS_RD0PPS2_POSITION                            0x2
#define _RD0PPS_RD0PPS2_SIZE                                0x1
#define _RD0PPS_RD0PPS2_LENGTH                              0x1
#define _RD0PPS_RD0PPS2_MASK                                0x4
#define _RD0PPS_RD0PPS3_POSN                                0x3
#define _RD0PPS_RD0PPS3_POSITION                            0x3
#define _RD0PPS_RD0PPS3_SIZE                                0x1
#define _RD0PPS_RD0PPS3_LENGTH                              0x1
#define _RD0PPS_RD0PPS3_MASK                                0x8
#define _RD0PPS_RD0PPS4_POSN                                0x4
#define _RD0PPS_RD0PPS4_POSITION                            0x4
#define _RD0PPS_RD0PPS4_SIZE                                0x1
#define _RD0PPS_RD0PPS4_LENGTH                              0x1
#define _RD0PPS_RD0PPS4_MASK                                0x10
#define _RD0PPS_RD0PPS5_POSN                                0x5
#define _RD0PPS_RD0PPS5_POSITION                            0x5
#define _RD0PPS_RD0PPS5_SIZE                                0x1
#define _RD0PPS_RD0PPS5_LENGTH                              0x1
#define _RD0PPS_RD0PPS5_MASK                                0x20

// Register: RD1PPS
#define RD1PPS RD1PPS
extern volatile unsigned char           RD1PPS              __at(0x1F29);
#ifndef _LIB_BUILD
asm("RD1PPS equ 01F29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD1PPS0                :1;
        unsigned RD1PPS1                :1;
        unsigned RD1PPS2                :1;
        unsigned RD1PPS3                :1;
        unsigned RD1PPS4                :1;
        unsigned RD1PPS5                :1;
    };
} RD1PPSbits_t;
extern volatile RD1PPSbits_t RD1PPSbits __at(0x1F29);
// bitfield macros
#define _RD1PPS_RD1PPS0_POSN                                0x0
#define _RD1PPS_RD1PPS0_POSITION                            0x0
#define _RD1PPS_RD1PPS0_SIZE                                0x1
#define _RD1PPS_RD1PPS0_LENGTH                              0x1
#define _RD1PPS_RD1PPS0_MASK                                0x1
#define _RD1PPS_RD1PPS1_POSN                                0x1
#define _RD1PPS_RD1PPS1_POSITION                            0x1
#define _RD1PPS_RD1PPS1_SIZE                                0x1
#define _RD1PPS_RD1PPS1_LENGTH                              0x1
#define _RD1PPS_RD1PPS1_MASK                                0x2
#define _RD1PPS_RD1PPS2_POSN                                0x2
#define _RD1PPS_RD1PPS2_POSITION                            0x2
#define _RD1PPS_RD1PPS2_SIZE                                0x1
#define _RD1PPS_RD1PPS2_LENGTH                              0x1
#define _RD1PPS_RD1PPS2_MASK                                0x4
#define _RD1PPS_RD1PPS3_POSN                                0x3
#define _RD1PPS_RD1PPS3_POSITION                            0x3
#define _RD1PPS_RD1PPS3_SIZE                                0x1
#define _RD1PPS_RD1PPS3_LENGTH                              0x1
#define _RD1PPS_RD1PPS3_MASK                                0x8
#define _RD1PPS_RD1PPS4_POSN                                0x4
#define _RD1PPS_RD1PPS4_POSITION                            0x4
#define _RD1PPS_RD1PPS4_SIZE                                0x1
#define _RD1PPS_RD1PPS4_LENGTH                              0x1
#define _RD1PPS_RD1PPS4_MASK                                0x10
#define _RD1PPS_RD1PPS5_POSN                                0x5
#define _RD1PPS_RD1PPS5_POSITION                            0x5
#define _RD1PPS_RD1PPS5_SIZE                                0x1
#define _RD1PPS_RD1PPS5_LENGTH                              0x1
#define _RD1PPS_RD1PPS5_MASK                                0x20

// Register: RD2PPS
#define RD2PPS RD2PPS
extern volatile unsigned char           RD2PPS              __at(0x1F2A);
#ifndef _LIB_BUILD
asm("RD2PPS equ 01F2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD2PPS0                :1;
        unsigned RD2PPS1                :1;
        unsigned RD2PPS2                :1;
        unsigned RD2PPS3                :1;
        unsigned RD2PPS4                :1;
        unsigned RD2PPS5                :1;
    };
} RD2PPSbits_t;
extern volatile RD2PPSbits_t RD2PPSbits __at(0x1F2A);
// bitfield macros
#define _RD2PPS_RD2PPS0_POSN                                0x0
#define _RD2PPS_RD2PPS0_POSITION                            0x0
#define _RD2PPS_RD2PPS0_SIZE                                0x1
#define _RD2PPS_RD2PPS0_LENGTH                              0x1
#define _RD2PPS_RD2PPS0_MASK                                0x1
#define _RD2PPS_RD2PPS1_POSN                                0x1
#define _RD2PPS_RD2PPS1_POSITION                            0x1
#define _RD2PPS_RD2PPS1_SIZE                                0x1
#define _RD2PPS_RD2PPS1_LENGTH                              0x1
#define _RD2PPS_RD2PPS1_MASK                                0x2
#define _RD2PPS_RD2PPS2_POSN                                0x2
#define _RD2PPS_RD2PPS2_POSITION                            0x2
#define _RD2PPS_RD2PPS2_SIZE                                0x1
#define _RD2PPS_RD2PPS2_LENGTH                              0x1
#define _RD2PPS_RD2PPS2_MASK                                0x4
#define _RD2PPS_RD2PPS3_POSN                                0x3
#define _RD2PPS_RD2PPS3_POSITION                            0x3
#define _RD2PPS_RD2PPS3_SIZE                                0x1
#define _RD2PPS_RD2PPS3_LENGTH                              0x1
#define _RD2PPS_RD2PPS3_MASK                                0x8
#define _RD2PPS_RD2PPS4_POSN                                0x4
#define _RD2PPS_RD2PPS4_POSITION                            0x4
#define _RD2PPS_RD2PPS4_SIZE                                0x1
#define _RD2PPS_RD2PPS4_LENGTH                              0x1
#define _RD2PPS_RD2PPS4_MASK                                0x10
#define _RD2PPS_RD2PPS5_POSN                                0x5
#define _RD2PPS_RD2PPS5_POSITION                            0x5
#define _RD2PPS_RD2PPS5_SIZE                                0x1
#define _RD2PPS_RD2PPS5_LENGTH                              0x1
#define _RD2PPS_RD2PPS5_MASK                                0x20

// Register: RD3PPS
#define RD3PPS RD3PPS
extern volatile unsigned char           RD3PPS              __at(0x1F2B);
#ifndef _LIB_BUILD
asm("RD3PPS equ 01F2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD3PPS0                :1;
        unsigned RD3PPS1                :1;
        unsigned RD3PPS2                :1;
        unsigned RD3PPS3                :1;
        unsigned RD3PPS4                :1;
        unsigned RD3PPS5                :1;
    };
} RD3PPSbits_t;
extern volatile RD3PPSbits_t RD3PPSbits __at(0x1F2B);
// bitfield macros
#define _RD3PPS_RD3PPS0_POSN                                0x0
#define _RD3PPS_RD3PPS0_POSITION                            0x0
#define _RD3PPS_RD3PPS0_SIZE                                0x1
#define _RD3PPS_RD3PPS0_LENGTH                              0x1
#define _RD3PPS_RD3PPS0_MASK                                0x1
#define _RD3PPS_RD3PPS1_POSN                                0x1
#define _RD3PPS_RD3PPS1_POSITION                            0x1
#define _RD3PPS_RD3PPS1_SIZE                                0x1
#define _RD3PPS_RD3PPS1_LENGTH                              0x1
#define _RD3PPS_RD3PPS1_MASK                                0x2
#define _RD3PPS_RD3PPS2_POSN                                0x2
#define _RD3PPS_RD3PPS2_POSITION                            0x2
#define _RD3PPS_RD3PPS2_SIZE                                0x1
#define _RD3PPS_RD3PPS2_LENGTH                              0x1
#define _RD3PPS_RD3PPS2_MASK                                0x4
#define _RD3PPS_RD3PPS3_POSN                                0x3
#define _RD3PPS_RD3PPS3_POSITION                            0x3
#define _RD3PPS_RD3PPS3_SIZE                                0x1
#define _RD3PPS_RD3PPS3_LENGTH                              0x1
#define _RD3PPS_RD3PPS3_MASK                                0x8
#define _RD3PPS_RD3PPS4_POSN                                0x4
#define _RD3PPS_RD3PPS4_POSITION                            0x4
#define _RD3PPS_RD3PPS4_SIZE                                0x1
#define _RD3PPS_RD3PPS4_LENGTH                              0x1
#define _RD3PPS_RD3PPS4_MASK                                0x10
#define _RD3PPS_RD3PPS5_POSN                                0x5
#define _RD3PPS_RD3PPS5_POSITION                            0x5
#define _RD3PPS_RD3PPS5_SIZE                                0x1
#define _RD3PPS_RD3PPS5_LENGTH                              0x1
#define _RD3PPS_RD3PPS5_MASK                                0x20

// Register: RD4PPS
#define RD4PPS RD4PPS
extern volatile unsigned char           RD4PPS              __at(0x1F2C);
#ifndef _LIB_BUILD
asm("RD4PPS equ 01F2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD4PPS0                :1;
        unsigned RD4PPS1                :1;
        unsigned RD4PPS2                :1;
        unsigned RD4PPS3                :1;
        unsigned RD4PPS4                :1;
        unsigned RD4PPS5                :1;
    };
} RD4PPSbits_t;
extern volatile RD4PPSbits_t RD4PPSbits __at(0x1F2C);
// bitfield macros
#define _RD4PPS_RD4PPS0_POSN                                0x0
#define _RD4PPS_RD4PPS0_POSITION                            0x0
#define _RD4PPS_RD4PPS0_SIZE                                0x1
#define _RD4PPS_RD4PPS0_LENGTH                              0x1
#define _RD4PPS_RD4PPS0_MASK                                0x1
#define _RD4PPS_RD4PPS1_POSN                                0x1
#define _RD4PPS_RD4PPS1_POSITION                            0x1
#define _RD4PPS_RD4PPS1_SIZE                                0x1
#define _RD4PPS_RD4PPS1_LENGTH                              0x1
#define _RD4PPS_RD4PPS1_MASK                                0x2
#define _RD4PPS_RD4PPS2_POSN                                0x2
#define _RD4PPS_RD4PPS2_POSITION                            0x2
#define _RD4PPS_RD4PPS2_SIZE                                0x1
#define _RD4PPS_RD4PPS2_LENGTH                              0x1
#define _RD4PPS_RD4PPS2_MASK                                0x4
#define _RD4PPS_RD4PPS3_POSN                                0x3
#define _RD4PPS_RD4PPS3_POSITION                            0x3
#define _RD4PPS_RD4PPS3_SIZE                                0x1
#define _RD4PPS_RD4PPS3_LENGTH                              0x1
#define _RD4PPS_RD4PPS3_MASK                                0x8
#define _RD4PPS_RD4PPS4_POSN                                0x4
#define _RD4PPS_RD4PPS4_POSITION                            0x4
#define _RD4PPS_RD4PPS4_SIZE                                0x1
#define _RD4PPS_RD4PPS4_LENGTH                              0x1
#define _RD4PPS_RD4PPS4_MASK                                0x10
#define _RD4PPS_RD4PPS5_POSN                                0x5
#define _RD4PPS_RD4PPS5_POSITION                            0x5
#define _RD4PPS_RD4PPS5_SIZE                                0x1
#define _RD4PPS_RD4PPS5_LENGTH                              0x1
#define _RD4PPS_RD4PPS5_MASK                                0x20

// Register: RD5PPS
#define RD5PPS RD5PPS
extern volatile unsigned char           RD5PPS              __at(0x1F2D);
#ifndef _LIB_BUILD
asm("RD5PPS equ 01F2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD5PPS0                :1;
        unsigned RD5PPS1                :1;
        unsigned RD5PPS2                :1;
        unsigned RD5PPS3                :1;
        unsigned RD5PPS4                :1;
        unsigned RD5PPS5                :1;
    };
} RD5PPSbits_t;
extern volatile RD5PPSbits_t RD5PPSbits __at(0x1F2D);
// bitfield macros
#define _RD5PPS_RD5PPS0_POSN                                0x0
#define _RD5PPS_RD5PPS0_POSITION                            0x0
#define _RD5PPS_RD5PPS0_SIZE                                0x1
#define _RD5PPS_RD5PPS0_LENGTH                              0x1
#define _RD5PPS_RD5PPS0_MASK                                0x1
#define _RD5PPS_RD5PPS1_POSN                                0x1
#define _RD5PPS_RD5PPS1_POSITION                            0x1
#define _RD5PPS_RD5PPS1_SIZE                                0x1
#define _RD5PPS_RD5PPS1_LENGTH                              0x1
#define _RD5PPS_RD5PPS1_MASK                                0x2
#define _RD5PPS_RD5PPS2_POSN                                0x2
#define _RD5PPS_RD5PPS2_POSITION                            0x2
#define _RD5PPS_RD5PPS2_SIZE                                0x1
#define _RD5PPS_RD5PPS2_LENGTH                              0x1
#define _RD5PPS_RD5PPS2_MASK                                0x4
#define _RD5PPS_RD5PPS3_POSN                                0x3
#define _RD5PPS_RD5PPS3_POSITION                            0x3
#define _RD5PPS_RD5PPS3_SIZE                                0x1
#define _RD5PPS_RD5PPS3_LENGTH                              0x1
#define _RD5PPS_RD5PPS3_MASK                                0x8
#define _RD5PPS_RD5PPS4_POSN                                0x4
#define _RD5PPS_RD5PPS4_POSITION                            0x4
#define _RD5PPS_RD5PPS4_SIZE                                0x1
#define _RD5PPS_RD5PPS4_LENGTH                              0x1
#define _RD5PPS_RD5PPS4_MASK                                0x10
#define _RD5PPS_RD5PPS5_POSN                                0x5
#define _RD5PPS_RD5PPS5_POSITION                            0x5
#define _RD5PPS_RD5PPS5_SIZE                                0x1
#define _RD5PPS_RD5PPS5_LENGTH                              0x1
#define _RD5PPS_RD5PPS5_MASK                                0x20

// Register: RD6PPS
#define RD6PPS RD6PPS
extern volatile unsigned char           RD6PPS              __at(0x1F2E);
#ifndef _LIB_BUILD
asm("RD6PPS equ 01F2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD6PPS0                :1;
        unsigned RD6PPS1                :1;
        unsigned RD6PPS2                :1;
        unsigned RD6PPS3                :1;
        unsigned RD6PPS4                :1;
        unsigned RD6PPS5                :1;
    };
} RD6PPSbits_t;
extern volatile RD6PPSbits_t RD6PPSbits __at(0x1F2E);
// bitfield macros
#define _RD6PPS_RD6PPS0_POSN                                0x0
#define _RD6PPS_RD6PPS0_POSITION                            0x0
#define _RD6PPS_RD6PPS0_SIZE                                0x1
#define _RD6PPS_RD6PPS0_LENGTH                              0x1
#define _RD6PPS_RD6PPS0_MASK                                0x1
#define _RD6PPS_RD6PPS1_POSN                                0x1
#define _RD6PPS_RD6PPS1_POSITION                            0x1
#define _RD6PPS_RD6PPS1_SIZE                                0x1
#define _RD6PPS_RD6PPS1_LENGTH                              0x1
#define _RD6PPS_RD6PPS1_MASK                                0x2
#define _RD6PPS_RD6PPS2_POSN                                0x2
#define _RD6PPS_RD6PPS2_POSITION                            0x2
#define _RD6PPS_RD6PPS2_SIZE                                0x1
#define _RD6PPS_RD6PPS2_LENGTH                              0x1
#define _RD6PPS_RD6PPS2_MASK                                0x4
#define _RD6PPS_RD6PPS3_POSN                                0x3
#define _RD6PPS_RD6PPS3_POSITION                            0x3
#define _RD6PPS_RD6PPS3_SIZE                                0x1
#define _RD6PPS_RD6PPS3_LENGTH                              0x1
#define _RD6PPS_RD6PPS3_MASK                                0x8
#define _RD6PPS_RD6PPS4_POSN                                0x4
#define _RD6PPS_RD6PPS4_POSITION                            0x4
#define _RD6PPS_RD6PPS4_SIZE                                0x1
#define _RD6PPS_RD6PPS4_LENGTH                              0x1
#define _RD6PPS_RD6PPS4_MASK                                0x10
#define _RD6PPS_RD6PPS5_POSN                                0x5
#define _RD6PPS_RD6PPS5_POSITION                            0x5
#define _RD6PPS_RD6PPS5_SIZE                                0x1
#define _RD6PPS_RD6PPS5_LENGTH                              0x1
#define _RD6PPS_RD6PPS5_MASK                                0x20

// Register: RD7PPS
#define RD7PPS RD7PPS
extern volatile unsigned char           RD7PPS              __at(0x1F2F);
#ifndef _LIB_BUILD
asm("RD7PPS equ 01F2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD7PPS0                :1;
        unsigned RD7PPS1                :1;
        unsigned RD7PPS2                :1;
        unsigned RD7PPS3                :1;
        unsigned RD7PPS4                :1;
        unsigned RD7PPS5                :1;
    };
} RD7PPSbits_t;
extern volatile RD7PPSbits_t RD7PPSbits __at(0x1F2F);
// bitfield macros
#define _RD7PPS_RD7PPS0_POSN                                0x0
#define _RD7PPS_RD7PPS0_POSITION                            0x0
#define _RD7PPS_RD7PPS0_SIZE                                0x1
#define _RD7PPS_RD7PPS0_LENGTH                              0x1
#define _RD7PPS_RD7PPS0_MASK                                0x1
#define _RD7PPS_RD7PPS1_POSN                                0x1
#define _RD7PPS_RD7PPS1_POSITION                            0x1
#define _RD7PPS_RD7PPS1_SIZE                                0x1
#define _RD7PPS_RD7PPS1_LENGTH                              0x1
#define _RD7PPS_RD7PPS1_MASK                                0x2
#define _RD7PPS_RD7PPS2_POSN                                0x2
#define _RD7PPS_RD7PPS2_POSITION                            0x2
#define _RD7PPS_RD7PPS2_SIZE                                0x1
#define _RD7PPS_RD7PPS2_LENGTH                              0x1
#define _RD7PPS_RD7PPS2_MASK                                0x4
#define _RD7PPS_RD7PPS3_POSN                                0x3
#define _RD7PPS_RD7PPS3_POSITION                            0x3
#define _RD7PPS_RD7PPS3_SIZE                                0x1
#define _RD7PPS_RD7PPS3_LENGTH                              0x1
#define _RD7PPS_RD7PPS3_MASK                                0x8
#define _RD7PPS_RD7PPS4_POSN                                0x4
#define _RD7PPS_RD7PPS4_POSITION                            0x4
#define _RD7PPS_RD7PPS4_SIZE                                0x1
#define _RD7PPS_RD7PPS4_LENGTH                              0x1
#define _RD7PPS_RD7PPS4_MASK                                0x10
#define _RD7PPS_RD7PPS5_POSN                                0x5
#define _RD7PPS_RD7PPS5_POSITION                            0x5
#define _RD7PPS_RD7PPS5_SIZE                                0x1
#define _RD7PPS_RD7PPS5_LENGTH                              0x1
#define _RD7PPS_RD7PPS5_MASK                                0x20

// Register: RE0PPS
#define RE0PPS RE0PPS
extern volatile unsigned char           RE0PPS              __at(0x1F30);
#ifndef _LIB_BUILD
asm("RE0PPS equ 01F30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE0PPS0                :1;
        unsigned RE0PPS1                :1;
        unsigned RE0PPS2                :1;
        unsigned RE0PPS3                :1;
        unsigned RE0PPS4                :1;
        unsigned RE0PPS5                :1;
    };
} RE0PPSbits_t;
extern volatile RE0PPSbits_t RE0PPSbits __at(0x1F30);
// bitfield macros
#define _RE0PPS_RE0PPS0_POSN                                0x0
#define _RE0PPS_RE0PPS0_POSITION                            0x0
#define _RE0PPS_RE0PPS0_SIZE                                0x1
#define _RE0PPS_RE0PPS0_LENGTH                              0x1
#define _RE0PPS_RE0PPS0_MASK                                0x1
#define _RE0PPS_RE0PPS1_POSN                                0x1
#define _RE0PPS_RE0PPS1_POSITION                            0x1
#define _RE0PPS_RE0PPS1_SIZE                                0x1
#define _RE0PPS_RE0PPS1_LENGTH                              0x1
#define _RE0PPS_RE0PPS1_MASK                                0x2
#define _RE0PPS_RE0PPS2_POSN                                0x2
#define _RE0PPS_RE0PPS2_POSITION                            0x2
#define _RE0PPS_RE0PPS2_SIZE                                0x1
#define _RE0PPS_RE0PPS2_LENGTH                              0x1
#define _RE0PPS_RE0PPS2_MASK                                0x4
#define _RE0PPS_RE0PPS3_POSN                                0x3
#define _RE0PPS_RE0PPS3_POSITION                            0x3
#define _RE0PPS_RE0PPS3_SIZE                                0x1
#define _RE0PPS_RE0PPS3_LENGTH                              0x1
#define _RE0PPS_RE0PPS3_MASK                                0x8
#define _RE0PPS_RE0PPS4_POSN                                0x4
#define _RE0PPS_RE0PPS4_POSITION                            0x4
#define _RE0PPS_RE0PPS4_SIZE                                0x1
#define _RE0PPS_RE0PPS4_LENGTH                              0x1
#define _RE0PPS_RE0PPS4_MASK                                0x10
#define _RE0PPS_RE0PPS5_POSN                                0x5
#define _RE0PPS_RE0PPS5_POSITION                            0x5
#define _RE0PPS_RE0PPS5_SIZE                                0x1
#define _RE0PPS_RE0PPS5_LENGTH                              0x1
#define _RE0PPS_RE0PPS5_MASK                                0x20

// Register: RE1PPS
#define RE1PPS RE1PPS
extern volatile unsigned char           RE1PPS              __at(0x1F31);
#ifndef _LIB_BUILD
asm("RE1PPS equ 01F31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE1PPS0                :1;
        unsigned RE1PPS1                :1;
        unsigned RE1PPS2                :1;
        unsigned RE1PPS3                :1;
        unsigned RE1PPS4                :1;
        unsigned RE1PPS5                :1;
    };
} RE1PPSbits_t;
extern volatile RE1PPSbits_t RE1PPSbits __at(0x1F31);
// bitfield macros
#define _RE1PPS_RE1PPS0_POSN                                0x0
#define _RE1PPS_RE1PPS0_POSITION                            0x0
#define _RE1PPS_RE1PPS0_SIZE                                0x1
#define _RE1PPS_RE1PPS0_LENGTH                              0x1
#define _RE1PPS_RE1PPS0_MASK                                0x1
#define _RE1PPS_RE1PPS1_POSN                                0x1
#define _RE1PPS_RE1PPS1_POSITION                            0x1
#define _RE1PPS_RE1PPS1_SIZE                                0x1
#define _RE1PPS_RE1PPS1_LENGTH                              0x1
#define _RE1PPS_RE1PPS1_MASK                                0x2
#define _RE1PPS_RE1PPS2_POSN                                0x2
#define _RE1PPS_RE1PPS2_POSITION                            0x2
#define _RE1PPS_RE1PPS2_SIZE                                0x1
#define _RE1PPS_RE1PPS2_LENGTH                              0x1
#define _RE1PPS_RE1PPS2_MASK                                0x4
#define _RE1PPS_RE1PPS3_POSN                                0x3
#define _RE1PPS_RE1PPS3_POSITION                            0x3
#define _RE1PPS_RE1PPS3_SIZE                                0x1
#define _RE1PPS_RE1PPS3_LENGTH                              0x1
#define _RE1PPS_RE1PPS3_MASK                                0x8
#define _RE1PPS_RE1PPS4_POSN                                0x4
#define _RE1PPS_RE1PPS4_POSITION                            0x4
#define _RE1PPS_RE1PPS4_SIZE                                0x1
#define _RE1PPS_RE1PPS4_LENGTH                              0x1
#define _RE1PPS_RE1PPS4_MASK                                0x10
#define _RE1PPS_RE1PPS5_POSN                                0x5
#define _RE1PPS_RE1PPS5_POSITION                            0x5
#define _RE1PPS_RE1PPS5_SIZE                                0x1
#define _RE1PPS_RE1PPS5_LENGTH                              0x1
#define _RE1PPS_RE1PPS5_MASK                                0x20

// Register: RE3PPS
#define RE3PPS RE3PPS
extern volatile unsigned char           RE3PPS              __at(0x1F33);
#ifndef _LIB_BUILD
asm("RE3PPS equ 01F33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE3PPS0                :1;
        unsigned RE3PPS1                :1;
        unsigned RE3PPS2                :1;
        unsigned RE3PPS3                :1;
        unsigned RE3PPS4                :1;
        unsigned RE3PPS5                :1;
    };
} RE3PPSbits_t;
extern volatile RE3PPSbits_t RE3PPSbits __at(0x1F33);
// bitfield macros
#define _RE3PPS_RE3PPS0_POSN                                0x0
#define _RE3PPS_RE3PPS0_POSITION                            0x0
#define _RE3PPS_RE3PPS0_SIZE                                0x1
#define _RE3PPS_RE3PPS0_LENGTH                              0x1
#define _RE3PPS_RE3PPS0_MASK                                0x1
#define _RE3PPS_RE3PPS1_POSN                                0x1
#define _RE3PPS_RE3PPS1_POSITION                            0x1
#define _RE3PPS_RE3PPS1_SIZE                                0x1
#define _RE3PPS_RE3PPS1_LENGTH                              0x1
#define _RE3PPS_RE3PPS1_MASK                                0x2
#define _RE3PPS_RE3PPS2_POSN                                0x2
#define _RE3PPS_RE3PPS2_POSITION                            0x2
#define _RE3PPS_RE3PPS2_SIZE                                0x1
#define _RE3PPS_RE3PPS2_LENGTH                              0x1
#define _RE3PPS_RE3PPS2_MASK                                0x4
#define _RE3PPS_RE3PPS3_POSN                                0x3
#define _RE3PPS_RE3PPS3_POSITION                            0x3
#define _RE3PPS_RE3PPS3_SIZE                                0x1
#define _RE3PPS_RE3PPS3_LENGTH                              0x1
#define _RE3PPS_RE3PPS3_MASK                                0x8
#define _RE3PPS_RE3PPS4_POSN                                0x4
#define _RE3PPS_RE3PPS4_POSITION                            0x4
#define _RE3PPS_RE3PPS4_SIZE                                0x1
#define _RE3PPS_RE3PPS4_LENGTH                              0x1
#define _RE3PPS_RE3PPS4_MASK                                0x10
#define _RE3PPS_RE3PPS5_POSN                                0x5
#define _RE3PPS_RE3PPS5_POSITION                            0x5
#define _RE3PPS_RE3PPS5_SIZE                                0x1
#define _RE3PPS_RE3PPS5_LENGTH                              0x1
#define _RE3PPS_RE3PPS5_MASK                                0x20

// Register: RE4PPS
#define RE4PPS RE4PPS
extern volatile unsigned char           RE4PPS              __at(0x1F34);
#ifndef _LIB_BUILD
asm("RE4PPS equ 01F34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE4PPS0                :1;
        unsigned RE4PPS1                :1;
        unsigned RE4PPS2                :1;
        unsigned RE4PPS3                :1;
        unsigned RE4PPS4                :1;
        unsigned RE4PPS5                :1;
    };
} RE4PPSbits_t;
extern volatile RE4PPSbits_t RE4PPSbits __at(0x1F34);
// bitfield macros
#define _RE4PPS_RE4PPS0_POSN                                0x0
#define _RE4PPS_RE4PPS0_POSITION                            0x0
#define _RE4PPS_RE4PPS0_SIZE                                0x1
#define _RE4PPS_RE4PPS0_LENGTH                              0x1
#define _RE4PPS_RE4PPS0_MASK                                0x1
#define _RE4PPS_RE4PPS1_POSN                                0x1
#define _RE4PPS_RE4PPS1_POSITION                            0x1
#define _RE4PPS_RE4PPS1_SIZE                                0x1
#define _RE4PPS_RE4PPS1_LENGTH                              0x1
#define _RE4PPS_RE4PPS1_MASK                                0x2
#define _RE4PPS_RE4PPS2_POSN                                0x2
#define _RE4PPS_RE4PPS2_POSITION                            0x2
#define _RE4PPS_RE4PPS2_SIZE                                0x1
#define _RE4PPS_RE4PPS2_LENGTH                              0x1
#define _RE4PPS_RE4PPS2_MASK                                0x4
#define _RE4PPS_RE4PPS3_POSN                                0x3
#define _RE4PPS_RE4PPS3_POSITION                            0x3
#define _RE4PPS_RE4PPS3_SIZE                                0x1
#define _RE4PPS_RE4PPS3_LENGTH                              0x1
#define _RE4PPS_RE4PPS3_MASK                                0x8
#define _RE4PPS_RE4PPS4_POSN                                0x4
#define _RE4PPS_RE4PPS4_POSITION                            0x4
#define _RE4PPS_RE4PPS4_SIZE                                0x1
#define _RE4PPS_RE4PPS4_LENGTH                              0x1
#define _RE4PPS_RE4PPS4_MASK                                0x10
#define _RE4PPS_RE4PPS5_POSN                                0x5
#define _RE4PPS_RE4PPS5_POSITION                            0x5
#define _RE4PPS_RE4PPS5_SIZE                                0x1
#define _RE4PPS_RE4PPS5_LENGTH                              0x1
#define _RE4PPS_RE4PPS5_MASK                                0x20

// Register: RE5PPS
#define RE5PPS RE5PPS
extern volatile unsigned char           RE5PPS              __at(0x1F35);
#ifndef _LIB_BUILD
asm("RE5PPS equ 01F35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE5PPS0                :1;
        unsigned RE5PPS1                :1;
        unsigned RE5PPS2                :1;
        unsigned RE5PPS3                :1;
        unsigned RE5PPS4                :1;
        unsigned RE5PPS5                :1;
    };
} RE5PPSbits_t;
extern volatile RE5PPSbits_t RE5PPSbits __at(0x1F35);
// bitfield macros
#define _RE5PPS_RE5PPS0_POSN                                0x0
#define _RE5PPS_RE5PPS0_POSITION                            0x0
#define _RE5PPS_RE5PPS0_SIZE                                0x1
#define _RE5PPS_RE5PPS0_LENGTH                              0x1
#define _RE5PPS_RE5PPS0_MASK                                0x1
#define _RE5PPS_RE5PPS1_POSN                                0x1
#define _RE5PPS_RE5PPS1_POSITION                            0x1
#define _RE5PPS_RE5PPS1_SIZE                                0x1
#define _RE5PPS_RE5PPS1_LENGTH                              0x1
#define _RE5PPS_RE5PPS1_MASK                                0x2
#define _RE5PPS_RE5PPS2_POSN                                0x2
#define _RE5PPS_RE5PPS2_POSITION                            0x2
#define _RE5PPS_RE5PPS2_SIZE                                0x1
#define _RE5PPS_RE5PPS2_LENGTH                              0x1
#define _RE5PPS_RE5PPS2_MASK                                0x4
#define _RE5PPS_RE5PPS3_POSN                                0x3
#define _RE5PPS_RE5PPS3_POSITION                            0x3
#define _RE5PPS_RE5PPS3_SIZE                                0x1
#define _RE5PPS_RE5PPS3_LENGTH                              0x1
#define _RE5PPS_RE5PPS3_MASK                                0x8
#define _RE5PPS_RE5PPS4_POSN                                0x4
#define _RE5PPS_RE5PPS4_POSITION                            0x4
#define _RE5PPS_RE5PPS4_SIZE                                0x1
#define _RE5PPS_RE5PPS4_LENGTH                              0x1
#define _RE5PPS_RE5PPS4_MASK                                0x10
#define _RE5PPS_RE5PPS5_POSN                                0x5
#define _RE5PPS_RE5PPS5_POSITION                            0x5
#define _RE5PPS_RE5PPS5_SIZE                                0x1
#define _RE5PPS_RE5PPS5_LENGTH                              0x1
#define _RE5PPS_RE5PPS5_MASK                                0x20

// Register: RE6PPS
#define RE6PPS RE6PPS
extern volatile unsigned char           RE6PPS              __at(0x1F36);
#ifndef _LIB_BUILD
asm("RE6PPS equ 01F36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE6PPS0                :1;
        unsigned RE6PPS1                :1;
        unsigned RE6PPS2                :1;
        unsigned RE6PPS3                :1;
        unsigned RE6PPS4                :1;
        unsigned RE6PPS5                :1;
    };
} RE6PPSbits_t;
extern volatile RE6PPSbits_t RE6PPSbits __at(0x1F36);
// bitfield macros
#define _RE6PPS_RE6PPS0_POSN                                0x0
#define _RE6PPS_RE6PPS0_POSITION                            0x0
#define _RE6PPS_RE6PPS0_SIZE                                0x1
#define _RE6PPS_RE6PPS0_LENGTH                              0x1
#define _RE6PPS_RE6PPS0_MASK                                0x1
#define _RE6PPS_RE6PPS1_POSN                                0x1
#define _RE6PPS_RE6PPS1_POSITION                            0x1
#define _RE6PPS_RE6PPS1_SIZE                                0x1
#define _RE6PPS_RE6PPS1_LENGTH                              0x1
#define _RE6PPS_RE6PPS1_MASK                                0x2
#define _RE6PPS_RE6PPS2_POSN                                0x2
#define _RE6PPS_RE6PPS2_POSITION                            0x2
#define _RE6PPS_RE6PPS2_SIZE                                0x1
#define _RE6PPS_RE6PPS2_LENGTH                              0x1
#define _RE6PPS_RE6PPS2_MASK                                0x4
#define _RE6PPS_RE6PPS3_POSN                                0x3
#define _RE6PPS_RE6PPS3_POSITION                            0x3
#define _RE6PPS_RE6PPS3_SIZE                                0x1
#define _RE6PPS_RE6PPS3_LENGTH                              0x1
#define _RE6PPS_RE6PPS3_MASK                                0x8
#define _RE6PPS_RE6PPS4_POSN                                0x4
#define _RE6PPS_RE6PPS4_POSITION                            0x4
#define _RE6PPS_RE6PPS4_SIZE                                0x1
#define _RE6PPS_RE6PPS4_LENGTH                              0x1
#define _RE6PPS_RE6PPS4_MASK                                0x10
#define _RE6PPS_RE6PPS5_POSN                                0x5
#define _RE6PPS_RE6PPS5_POSITION                            0x5
#define _RE6PPS_RE6PPS5_SIZE                                0x1
#define _RE6PPS_RE6PPS5_LENGTH                              0x1
#define _RE6PPS_RE6PPS5_MASK                                0x20

// Register: RE7PPS
#define RE7PPS RE7PPS
extern volatile unsigned char           RE7PPS              __at(0x1F37);
#ifndef _LIB_BUILD
asm("RE7PPS equ 01F37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RE7PPS0                :1;
        unsigned RE7PPS1                :1;
        unsigned RE7PPS2                :1;
        unsigned RE7PPS3                :1;
        unsigned RE7PPS4                :1;
        unsigned RE7PPS5                :1;
    };
} RE7PPSbits_t;
extern volatile RE7PPSbits_t RE7PPSbits __at(0x1F37);
// bitfield macros
#define _RE7PPS_RE7PPS0_POSN                                0x0
#define _RE7PPS_RE7PPS0_POSITION                            0x0
#define _RE7PPS_RE7PPS0_SIZE                                0x1
#define _RE7PPS_RE7PPS0_LENGTH                              0x1
#define _RE7PPS_RE7PPS0_MASK                                0x1
#define _RE7PPS_RE7PPS1_POSN                                0x1
#define _RE7PPS_RE7PPS1_POSITION                            0x1
#define _RE7PPS_RE7PPS1_SIZE                                0x1
#define _RE7PPS_RE7PPS1_LENGTH                              0x1
#define _RE7PPS_RE7PPS1_MASK                                0x2
#define _RE7PPS_RE7PPS2_POSN                                0x2
#define _RE7PPS_RE7PPS2_POSITION                            0x2
#define _RE7PPS_RE7PPS2_SIZE                                0x1
#define _RE7PPS_RE7PPS2_LENGTH                              0x1
#define _RE7PPS_RE7PPS2_MASK                                0x4
#define _RE7PPS_RE7PPS3_POSN                                0x3
#define _RE7PPS_RE7PPS3_POSITION                            0x3
#define _RE7PPS_RE7PPS3_SIZE                                0x1
#define _RE7PPS_RE7PPS3_LENGTH                              0x1
#define _RE7PPS_RE7PPS3_MASK                                0x8
#define _RE7PPS_RE7PPS4_POSN                                0x4
#define _RE7PPS_RE7PPS4_POSITION                            0x4
#define _RE7PPS_RE7PPS4_SIZE                                0x1
#define _RE7PPS_RE7PPS4_LENGTH                              0x1
#define _RE7PPS_RE7PPS4_MASK                                0x10
#define _RE7PPS_RE7PPS5_POSN                                0x5
#define _RE7PPS_RE7PPS5_POSITION                            0x5
#define _RE7PPS_RE7PPS5_SIZE                                0x1
#define _RE7PPS_RE7PPS5_LENGTH                              0x1
#define _RE7PPS_RE7PPS5_MASK                                0x20

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x1F38);
#ifndef _LIB_BUILD
asm("ANSELA equ 01F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned ANSA3                  :1;
        unsigned ANSA4                  :1;
        unsigned                        :1;
        unsigned ANSA6                  :1;
        unsigned ANSA7                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x1F38);
// bitfield macros
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA3_POSN                                  0x3
#define _ANSELA_ANSA3_POSITION                              0x3
#define _ANSELA_ANSA3_SIZE                                  0x1
#define _ANSELA_ANSA3_LENGTH                                0x1
#define _ANSELA_ANSA3_MASK                                  0x8
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10
#define _ANSELA_ANSA6_POSN                                  0x6
#define _ANSELA_ANSA6_POSITION                              0x6
#define _ANSELA_ANSA6_SIZE                                  0x1
#define _ANSELA_ANSA6_LENGTH                                0x1
#define _ANSELA_ANSA6_MASK                                  0x40
#define _ANSELA_ANSA7_POSN                                  0x7
#define _ANSELA_ANSA7_POSITION                              0x7
#define _ANSELA_ANSA7_SIZE                                  0x1
#define _ANSELA_ANSA7_LENGTH                                0x1
#define _ANSELA_ANSA7_MASK                                  0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x1F39);
#ifndef _LIB_BUILD
asm("WPUA equ 01F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x1F39);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x1F3A);
#ifndef _LIB_BUILD
asm("ODCONA equ 01F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned                        :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x1F3A);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x1F3B);
#ifndef _LIB_BUILD
asm("SLRCONA equ 01F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned                        :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x1F3B);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x1F3C);
#ifndef _LIB_BUILD
asm("INLVLA equ 01F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x1F3C);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0x1F43);
#ifndef _LIB_BUILD
asm("ANSELB equ 01F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSB0                  :1;
        unsigned ANSB1                  :1;
        unsigned ANSB2                  :1;
        unsigned ANSB3                  :1;
        unsigned ANSB4                  :1;
        unsigned ANSB5                  :1;
        unsigned ANSB6                  :1;
        unsigned ANSB7                  :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0x1F43);
// bitfield macros
#define _ANSELB_ANSB0_POSN                                  0x0
#define _ANSELB_ANSB0_POSITION                              0x0
#define _ANSELB_ANSB0_SIZE                                  0x1
#define _ANSELB_ANSB0_LENGTH                                0x1
#define _ANSELB_ANSB0_MASK                                  0x1
#define _ANSELB_ANSB1_POSN                                  0x1
#define _ANSELB_ANSB1_POSITION                              0x1
#define _ANSELB_ANSB1_SIZE                                  0x1
#define _ANSELB_ANSB1_LENGTH                                0x1
#define _ANSELB_ANSB1_MASK                                  0x2
#define _ANSELB_ANSB2_POSN                                  0x2
#define _ANSELB_ANSB2_POSITION                              0x2
#define _ANSELB_ANSB2_SIZE                                  0x1
#define _ANSELB_ANSB2_LENGTH                                0x1
#define _ANSELB_ANSB2_MASK                                  0x4
#define _ANSELB_ANSB3_POSN                                  0x3
#define _ANSELB_ANSB3_POSITION                              0x3
#define _ANSELB_ANSB3_SIZE                                  0x1
#define _ANSELB_ANSB3_LENGTH                                0x1
#define _ANSELB_ANSB3_MASK                                  0x8
#define _ANSELB_ANSB4_POSN                                  0x4
#define _ANSELB_ANSB4_POSITION                              0x4
#define _ANSELB_ANSB4_SIZE                                  0x1
#define _ANSELB_ANSB4_LENGTH                                0x1
#define _ANSELB_ANSB4_MASK                                  0x10
#define _ANSELB_ANSB5_POSN                                  0x5
#define _ANSELB_ANSB5_POSITION                              0x5
#define _ANSELB_ANSB5_SIZE                                  0x1
#define _ANSELB_ANSB5_LENGTH                                0x1
#define _ANSELB_ANSB5_MASK                                  0x20
#define _ANSELB_ANSB6_POSN                                  0x6
#define _ANSELB_ANSB6_POSITION                              0x6
#define _ANSELB_ANSB6_SIZE                                  0x1
#define _ANSELB_ANSB6_LENGTH                                0x1
#define _ANSELB_ANSB6_MASK                                  0x40
#define _ANSELB_ANSB7_POSN                                  0x7
#define _ANSELB_ANSB7_POSITION                              0x7
#define _ANSELB_ANSB7_SIZE                                  0x1
#define _ANSELB_ANSB7_LENGTH                                0x1
#define _ANSELB_ANSB7_MASK                                  0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0x1F44);
#ifndef _LIB_BUILD
asm("WPUB equ 01F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0x1F44);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0x1F45);
#ifndef _LIB_BUILD
asm("ODCONB equ 01F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0x1F45);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0x1F46);
#ifndef _LIB_BUILD
asm("SLRCONB equ 01F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0x1F46);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0x1F47);
#ifndef _LIB_BUILD
asm("INLVLB equ 01F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0x1F47);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0x1F48);
#ifndef _LIB_BUILD
asm("IOCBP equ 01F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0x1F48);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0x1F49);
#ifndef _LIB_BUILD
asm("IOCBN equ 01F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0x1F49);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0x1F4A);
#ifndef _LIB_BUILD
asm("IOCBF equ 01F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0x1F4A);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x1F4F);
#ifndef _LIB_BUILD
asm("WPUC equ 01F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x1F4F);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x1F50);
#ifndef _LIB_BUILD
asm("ODCONC equ 01F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x1F50);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x1F51);
#ifndef _LIB_BUILD
asm("SLRCONC equ 01F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x1F51);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x1F52);
#ifndef _LIB_BUILD
asm("INLVLC equ 01F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x1F52);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x1F53);
#ifndef _LIB_BUILD
asm("IOCCP equ 01F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x1F53);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x1F54);
#ifndef _LIB_BUILD
asm("IOCCN equ 01F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x1F54);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x1F55);
#ifndef _LIB_BUILD
asm("IOCCF equ 01F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x1F55);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: ANSELD
#define ANSELD ANSELD
extern volatile unsigned char           ANSELD              __at(0x1F59);
#ifndef _LIB_BUILD
asm("ANSELD equ 01F59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSD0                  :1;
        unsigned ANSD1                  :1;
        unsigned ANSD2                  :1;
        unsigned ANSD3                  :1;
        unsigned ANSD4                  :1;
        unsigned ANSD5                  :1;
        unsigned ANSD6                  :1;
        unsigned ANSD7                  :1;
    };
} ANSELDbits_t;
extern volatile ANSELDbits_t ANSELDbits __at(0x1F59);
// bitfield macros
#define _ANSELD_ANSD0_POSN                                  0x0
#define _ANSELD_ANSD0_POSITION                              0x0
#define _ANSELD_ANSD0_SIZE                                  0x1
#define _ANSELD_ANSD0_LENGTH                                0x1
#define _ANSELD_ANSD0_MASK                                  0x1
#define _ANSELD_ANSD1_POSN                                  0x1
#define _ANSELD_ANSD1_POSITION                              0x1
#define _ANSELD_ANSD1_SIZE                                  0x1
#define _ANSELD_ANSD1_LENGTH                                0x1
#define _ANSELD_ANSD1_MASK                                  0x2
#define _ANSELD_ANSD2_POSN                                  0x2
#define _ANSELD_ANSD2_POSITION                              0x2
#define _ANSELD_ANSD2_SIZE                                  0x1
#define _ANSELD_ANSD2_LENGTH                                0x1
#define _ANSELD_ANSD2_MASK                                  0x4
#define _ANSELD_ANSD3_POSN                                  0x3
#define _ANSELD_ANSD3_POSITION                              0x3
#define _ANSELD_ANSD3_SIZE                                  0x1
#define _ANSELD_ANSD3_LENGTH                                0x1
#define _ANSELD_ANSD3_MASK                                  0x8
#define _ANSELD_ANSD4_POSN                                  0x4
#define _ANSELD_ANSD4_POSITION                              0x4
#define _ANSELD_ANSD4_SIZE                                  0x1
#define _ANSELD_ANSD4_LENGTH                                0x1
#define _ANSELD_ANSD4_MASK                                  0x10
#define _ANSELD_ANSD5_POSN                                  0x5
#define _ANSELD_ANSD5_POSITION                              0x5
#define _ANSELD_ANSD5_SIZE                                  0x1
#define _ANSELD_ANSD5_LENGTH                                0x1
#define _ANSELD_ANSD5_MASK                                  0x20
#define _ANSELD_ANSD6_POSN                                  0x6
#define _ANSELD_ANSD6_POSITION                              0x6
#define _ANSELD_ANSD6_SIZE                                  0x1
#define _ANSELD_ANSD6_LENGTH                                0x1
#define _ANSELD_ANSD6_MASK                                  0x40
#define _ANSELD_ANSD7_POSN                                  0x7
#define _ANSELD_ANSD7_POSITION                              0x7
#define _ANSELD_ANSD7_SIZE                                  0x1
#define _ANSELD_ANSD7_LENGTH                                0x1
#define _ANSELD_ANSD7_MASK                                  0x80

// Register: WPUD
#define WPUD WPUD
extern volatile unsigned char           WPUD                __at(0x1F5A);
#ifndef _LIB_BUILD
asm("WPUD equ 01F5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUD0                  :1;
        unsigned WPUD1                  :1;
        unsigned WPUD2                  :1;
        unsigned WPUD3                  :1;
        unsigned WPUD4                  :1;
        unsigned WPUD5                  :1;
        unsigned WPUD6                  :1;
        unsigned WPUD7                  :1;
    };
} WPUDbits_t;
extern volatile WPUDbits_t WPUDbits __at(0x1F5A);
// bitfield macros
#define _WPUD_WPUD0_POSN                                    0x0
#define _WPUD_WPUD0_POSITION                                0x0
#define _WPUD_WPUD0_SIZE                                    0x1
#define _WPUD_WPUD0_LENGTH                                  0x1
#define _WPUD_WPUD0_MASK                                    0x1
#define _WPUD_WPUD1_POSN                                    0x1
#define _WPUD_WPUD1_POSITION                                0x1
#define _WPUD_WPUD1_SIZE                                    0x1
#define _WPUD_WPUD1_LENGTH                                  0x1
#define _WPUD_WPUD1_MASK                                    0x2
#define _WPUD_WPUD2_POSN                                    0x2
#define _WPUD_WPUD2_POSITION                                0x2
#define _WPUD_WPUD2_SIZE                                    0x1
#define _WPUD_WPUD2_LENGTH                                  0x1
#define _WPUD_WPUD2_MASK                                    0x4
#define _WPUD_WPUD3_POSN                                    0x3
#define _WPUD_WPUD3_POSITION                                0x3
#define _WPUD_WPUD3_SIZE                                    0x1
#define _WPUD_WPUD3_LENGTH                                  0x1
#define _WPUD_WPUD3_MASK                                    0x8
#define _WPUD_WPUD4_POSN                                    0x4
#define _WPUD_WPUD4_POSITION                                0x4
#define _WPUD_WPUD4_SIZE                                    0x1
#define _WPUD_WPUD4_LENGTH                                  0x1
#define _WPUD_WPUD4_MASK                                    0x10
#define _WPUD_WPUD5_POSN                                    0x5
#define _WPUD_WPUD5_POSITION                                0x5
#define _WPUD_WPUD5_SIZE                                    0x1
#define _WPUD_WPUD5_LENGTH                                  0x1
#define _WPUD_WPUD5_MASK                                    0x20
#define _WPUD_WPUD6_POSN                                    0x6
#define _WPUD_WPUD6_POSITION                                0x6
#define _WPUD_WPUD6_SIZE                                    0x1
#define _WPUD_WPUD6_LENGTH                                  0x1
#define _WPUD_WPUD6_MASK                                    0x40
#define _WPUD_WPUD7_POSN                                    0x7
#define _WPUD_WPUD7_POSITION                                0x7
#define _WPUD_WPUD7_SIZE                                    0x1
#define _WPUD_WPUD7_LENGTH                                  0x1
#define _WPUD_WPUD7_MASK                                    0x80

// Register: ODCOND
#define ODCOND ODCOND
extern volatile unsigned char           ODCOND              __at(0x1F5B);
#ifndef _LIB_BUILD
asm("ODCOND equ 01F5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCD0                  :1;
        unsigned ODCD1                  :1;
        unsigned ODCD2                  :1;
        unsigned ODCD3                  :1;
        unsigned ODCD4                  :1;
        unsigned ODCD5                  :1;
        unsigned ODCD6                  :1;
        unsigned ODCD7                  :1;
    };
} ODCONDbits_t;
extern volatile ODCONDbits_t ODCONDbits __at(0x1F5B);
// bitfield macros
#define _ODCOND_ODCD0_POSN                                  0x0
#define _ODCOND_ODCD0_POSITION                              0x0
#define _ODCOND_ODCD0_SIZE                                  0x1
#define _ODCOND_ODCD0_LENGTH                                0x1
#define _ODCOND_ODCD0_MASK                                  0x1
#define _ODCOND_ODCD1_POSN                                  0x1
#define _ODCOND_ODCD1_POSITION                              0x1
#define _ODCOND_ODCD1_SIZE                                  0x1
#define _ODCOND_ODCD1_LENGTH                                0x1
#define _ODCOND_ODCD1_MASK                                  0x2
#define _ODCOND_ODCD2_POSN                                  0x2
#define _ODCOND_ODCD2_POSITION                              0x2
#define _ODCOND_ODCD2_SIZE                                  0x1
#define _ODCOND_ODCD2_LENGTH                                0x1
#define _ODCOND_ODCD2_MASK                                  0x4
#define _ODCOND_ODCD3_POSN                                  0x3
#define _ODCOND_ODCD3_POSITION                              0x3
#define _ODCOND_ODCD3_SIZE                                  0x1
#define _ODCOND_ODCD3_LENGTH                                0x1
#define _ODCOND_ODCD3_MASK                                  0x8
#define _ODCOND_ODCD4_POSN                                  0x4
#define _ODCOND_ODCD4_POSITION                              0x4
#define _ODCOND_ODCD4_SIZE                                  0x1
#define _ODCOND_ODCD4_LENGTH                                0x1
#define _ODCOND_ODCD4_MASK                                  0x10
#define _ODCOND_ODCD5_POSN                                  0x5
#define _ODCOND_ODCD5_POSITION                              0x5
#define _ODCOND_ODCD5_SIZE                                  0x1
#define _ODCOND_ODCD5_LENGTH                                0x1
#define _ODCOND_ODCD5_MASK                                  0x20
#define _ODCOND_ODCD6_POSN                                  0x6
#define _ODCOND_ODCD6_POSITION                              0x6
#define _ODCOND_ODCD6_SIZE                                  0x1
#define _ODCOND_ODCD6_LENGTH                                0x1
#define _ODCOND_ODCD6_MASK                                  0x40
#define _ODCOND_ODCD7_POSN                                  0x7
#define _ODCOND_ODCD7_POSITION                              0x7
#define _ODCOND_ODCD7_SIZE                                  0x1
#define _ODCOND_ODCD7_LENGTH                                0x1
#define _ODCOND_ODCD7_MASK                                  0x80

// Register: SLRCOND
#define SLRCOND SLRCOND
extern volatile unsigned char           SLRCOND             __at(0x1F5C);
#ifndef _LIB_BUILD
asm("SLRCOND equ 01F5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRD0                  :1;
        unsigned SLRD1                  :1;
        unsigned SLRD2                  :1;
        unsigned SLRD3                  :1;
        unsigned SLRD4                  :1;
        unsigned SLRD5                  :1;
        unsigned SLRD6                  :1;
        unsigned SLRD7                  :1;
    };
} SLRCONDbits_t;
extern volatile SLRCONDbits_t SLRCONDbits __at(0x1F5C);
// bitfield macros
#define _SLRCOND_SLRD0_POSN                                 0x0
#define _SLRCOND_SLRD0_POSITION                             0x0
#define _SLRCOND_SLRD0_SIZE                                 0x1
#define _SLRCOND_SLRD0_LENGTH                               0x1
#define _SLRCOND_SLRD0_MASK                                 0x1
#define _SLRCOND_SLRD1_POSN                                 0x1
#define _SLRCOND_SLRD1_POSITION                             0x1
#define _SLRCOND_SLRD1_SIZE                                 0x1
#define _SLRCOND_SLRD1_LENGTH                               0x1
#define _SLRCOND_SLRD1_MASK                                 0x2
#define _SLRCOND_SLRD2_POSN                                 0x2
#define _SLRCOND_SLRD2_POSITION                             0x2
#define _SLRCOND_SLRD2_SIZE                                 0x1
#define _SLRCOND_SLRD2_LENGTH                               0x1
#define _SLRCOND_SLRD2_MASK                                 0x4
#define _SLRCOND_SLRD3_POSN                                 0x3
#define _SLRCOND_SLRD3_POSITION                             0x3
#define _SLRCOND_SLRD3_SIZE                                 0x1
#define _SLRCOND_SLRD3_LENGTH                               0x1
#define _SLRCOND_SLRD3_MASK                                 0x8
#define _SLRCOND_SLRD4_POSN                                 0x4
#define _SLRCOND_SLRD4_POSITION                             0x4
#define _SLRCOND_SLRD4_SIZE                                 0x1
#define _SLRCOND_SLRD4_LENGTH                               0x1
#define _SLRCOND_SLRD4_MASK                                 0x10
#define _SLRCOND_SLRD5_POSN                                 0x5
#define _SLRCOND_SLRD5_POSITION                             0x5
#define _SLRCOND_SLRD5_SIZE                                 0x1
#define _SLRCOND_SLRD5_LENGTH                               0x1
#define _SLRCOND_SLRD5_MASK                                 0x20
#define _SLRCOND_SLRD6_POSN                                 0x6
#define _SLRCOND_SLRD6_POSITION                             0x6
#define _SLRCOND_SLRD6_SIZE                                 0x1
#define _SLRCOND_SLRD6_LENGTH                               0x1
#define _SLRCOND_SLRD6_MASK                                 0x40
#define _SLRCOND_SLRD7_POSN                                 0x7
#define _SLRCOND_SLRD7_POSITION                             0x7
#define _SLRCOND_SLRD7_SIZE                                 0x1
#define _SLRCOND_SLRD7_LENGTH                               0x1
#define _SLRCOND_SLRD7_MASK                                 0x80

// Register: INLVLD
#define INLVLD INLVLD
extern volatile unsigned char           INLVLD              __at(0x1F5D);
#ifndef _LIB_BUILD
asm("INLVLD equ 01F5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLD0                :1;
        unsigned INLVLD1                :1;
        unsigned INLVLD2                :1;
        unsigned INLVLD3                :1;
        unsigned INLVLD4                :1;
        unsigned INLVLD5                :1;
        unsigned INLVLD6                :1;
        unsigned INLVLD7                :1;
    };
} INLVLDbits_t;
extern volatile INLVLDbits_t INLVLDbits __at(0x1F5D);
// bitfield macros
#define _INLVLD_INLVLD0_POSN                                0x0
#define _INLVLD_INLVLD0_POSITION                            0x0
#define _INLVLD_INLVLD0_SIZE                                0x1
#define _INLVLD_INLVLD0_LENGTH                              0x1
#define _INLVLD_INLVLD0_MASK                                0x1
#define _INLVLD_INLVLD1_POSN                                0x1
#define _INLVLD_INLVLD1_POSITION                            0x1
#define _INLVLD_INLVLD1_SIZE                                0x1
#define _INLVLD_INLVLD1_LENGTH                              0x1
#define _INLVLD_INLVLD1_MASK                                0x2
#define _INLVLD_INLVLD2_POSN                                0x2
#define _INLVLD_INLVLD2_POSITION                            0x2
#define _INLVLD_INLVLD2_SIZE                                0x1
#define _INLVLD_INLVLD2_LENGTH                              0x1
#define _INLVLD_INLVLD2_MASK                                0x4
#define _INLVLD_INLVLD3_POSN                                0x3
#define _INLVLD_INLVLD3_POSITION                            0x3
#define _INLVLD_INLVLD3_SIZE                                0x1
#define _INLVLD_INLVLD3_LENGTH                              0x1
#define _INLVLD_INLVLD3_MASK                                0x8
#define _INLVLD_INLVLD4_POSN                                0x4
#define _INLVLD_INLVLD4_POSITION                            0x4
#define _INLVLD_INLVLD4_SIZE                                0x1
#define _INLVLD_INLVLD4_LENGTH                              0x1
#define _INLVLD_INLVLD4_MASK                                0x10
#define _INLVLD_INLVLD5_POSN                                0x5
#define _INLVLD_INLVLD5_POSITION                            0x5
#define _INLVLD_INLVLD5_SIZE                                0x1
#define _INLVLD_INLVLD5_LENGTH                              0x1
#define _INLVLD_INLVLD5_MASK                                0x20
#define _INLVLD_INLVLD6_POSN                                0x6
#define _INLVLD_INLVLD6_POSITION                            0x6
#define _INLVLD_INLVLD6_SIZE                                0x1
#define _INLVLD_INLVLD6_LENGTH                              0x1
#define _INLVLD_INLVLD6_MASK                                0x40
#define _INLVLD_INLVLD7_POSN                                0x7
#define _INLVLD_INLVLD7_POSITION                            0x7
#define _INLVLD_INLVLD7_SIZE                                0x1
#define _INLVLD_INLVLD7_LENGTH                              0x1
#define _INLVLD_INLVLD7_MASK                                0x80

// Register: ANSELE
#define ANSELE ANSELE
extern volatile unsigned char           ANSELE              __at(0x1F64);
#ifndef _LIB_BUILD
asm("ANSELE equ 01F64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSE0                  :1;
        unsigned ANSE1                  :1;
        unsigned                        :1;
        unsigned ANSE3                  :1;
        unsigned ANSE4                  :1;
        unsigned ANSE5                  :1;
        unsigned ANSE6                  :1;
        unsigned ANSE7                  :1;
    };
} ANSELEbits_t;
extern volatile ANSELEbits_t ANSELEbits __at(0x1F64);
// bitfield macros
#define _ANSELE_ANSE0_POSN                                  0x0
#define _ANSELE_ANSE0_POSITION                              0x0
#define _ANSELE_ANSE0_SIZE                                  0x1
#define _ANSELE_ANSE0_LENGTH                                0x1
#define _ANSELE_ANSE0_MASK                                  0x1
#define _ANSELE_ANSE1_POSN                                  0x1
#define _ANSELE_ANSE1_POSITION                              0x1
#define _ANSELE_ANSE1_SIZE                                  0x1
#define _ANSELE_ANSE1_LENGTH                                0x1
#define _ANSELE_ANSE1_MASK                                  0x2
#define _ANSELE_ANSE3_POSN                                  0x3
#define _ANSELE_ANSE3_POSITION                              0x3
#define _ANSELE_ANSE3_SIZE                                  0x1
#define _ANSELE_ANSE3_LENGTH                                0x1
#define _ANSELE_ANSE3_MASK                                  0x8
#define _ANSELE_ANSE4_POSN                                  0x4
#define _ANSELE_ANSE4_POSITION                              0x4
#define _ANSELE_ANSE4_SIZE                                  0x1
#define _ANSELE_ANSE4_LENGTH                                0x1
#define _ANSELE_ANSE4_MASK                                  0x10
#define _ANSELE_ANSE5_POSN                                  0x5
#define _ANSELE_ANSE5_POSITION                              0x5
#define _ANSELE_ANSE5_SIZE                                  0x1
#define _ANSELE_ANSE5_LENGTH                                0x1
#define _ANSELE_ANSE5_MASK                                  0x20
#define _ANSELE_ANSE6_POSN                                  0x6
#define _ANSELE_ANSE6_POSITION                              0x6
#define _ANSELE_ANSE6_SIZE                                  0x1
#define _ANSELE_ANSE6_LENGTH                                0x1
#define _ANSELE_ANSE6_MASK                                  0x40
#define _ANSELE_ANSE7_POSN                                  0x7
#define _ANSELE_ANSE7_POSITION                              0x7
#define _ANSELE_ANSE7_SIZE                                  0x1
#define _ANSELE_ANSE7_LENGTH                                0x1
#define _ANSELE_ANSE7_MASK                                  0x80

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0x1F65);
#ifndef _LIB_BUILD
asm("WPUE equ 01F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUE0                  :1;
        unsigned WPUE1                  :1;
        unsigned                        :1;
        unsigned WPUE3                  :1;
        unsigned WPUE4                  :1;
        unsigned WPUE5                  :1;
        unsigned WPUE6                  :1;
        unsigned WPUE7                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0x1F65);
// bitfield macros
#define _WPUE_WPUE0_POSN                                    0x0
#define _WPUE_WPUE0_POSITION                                0x0
#define _WPUE_WPUE0_SIZE                                    0x1
#define _WPUE_WPUE0_LENGTH                                  0x1
#define _WPUE_WPUE0_MASK                                    0x1
#define _WPUE_WPUE1_POSN                                    0x1
#define _WPUE_WPUE1_POSITION                                0x1
#define _WPUE_WPUE1_SIZE                                    0x1
#define _WPUE_WPUE1_LENGTH                                  0x1
#define _WPUE_WPUE1_MASK                                    0x2
#define _WPUE_WPUE3_POSN                                    0x3
#define _WPUE_WPUE3_POSITION                                0x3
#define _WPUE_WPUE3_SIZE                                    0x1
#define _WPUE_WPUE3_LENGTH                                  0x1
#define _WPUE_WPUE3_MASK                                    0x8
#define _WPUE_WPUE4_POSN                                    0x4
#define _WPUE_WPUE4_POSITION                                0x4
#define _WPUE_WPUE4_SIZE                                    0x1
#define _WPUE_WPUE4_LENGTH                                  0x1
#define _WPUE_WPUE4_MASK                                    0x10
#define _WPUE_WPUE5_POSN                                    0x5
#define _WPUE_WPUE5_POSITION                                0x5
#define _WPUE_WPUE5_SIZE                                    0x1
#define _WPUE_WPUE5_LENGTH                                  0x1
#define _WPUE_WPUE5_MASK                                    0x20
#define _WPUE_WPUE6_POSN                                    0x6
#define _WPUE_WPUE6_POSITION                                0x6
#define _WPUE_WPUE6_SIZE                                    0x1
#define _WPUE_WPUE6_LENGTH                                  0x1
#define _WPUE_WPUE6_MASK                                    0x40
#define _WPUE_WPUE7_POSN                                    0x7
#define _WPUE_WPUE7_POSITION                                0x7
#define _WPUE_WPUE7_SIZE                                    0x1
#define _WPUE_WPUE7_LENGTH                                  0x1
#define _WPUE_WPUE7_MASK                                    0x80

// Register: ODCONE
#define ODCONE ODCONE
extern volatile unsigned char           ODCONE              __at(0x1F66);
#ifndef _LIB_BUILD
asm("ODCONE equ 01F66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCE0                  :1;
        unsigned ODCE1                  :1;
        unsigned                        :1;
        unsigned ODCE3                  :1;
        unsigned ODCE4                  :1;
        unsigned ODCE5                  :1;
        unsigned ODCE6                  :1;
        unsigned ODCE7                  :1;
    };
} ODCONEbits_t;
extern volatile ODCONEbits_t ODCONEbits __at(0x1F66);
// bitfield macros
#define _ODCONE_ODCE0_POSN                                  0x0
#define _ODCONE_ODCE0_POSITION                              0x0
#define _ODCONE_ODCE0_SIZE                                  0x1
#define _ODCONE_ODCE0_LENGTH                                0x1
#define _ODCONE_ODCE0_MASK                                  0x1
#define _ODCONE_ODCE1_POSN                                  0x1
#define _ODCONE_ODCE1_POSITION                              0x1
#define _ODCONE_ODCE1_SIZE                                  0x1
#define _ODCONE_ODCE1_LENGTH                                0x1
#define _ODCONE_ODCE1_MASK                                  0x2
#define _ODCONE_ODCE3_POSN                                  0x3
#define _ODCONE_ODCE3_POSITION                              0x3
#define _ODCONE_ODCE3_SIZE                                  0x1
#define _ODCONE_ODCE3_LENGTH                                0x1
#define _ODCONE_ODCE3_MASK                                  0x8
#define _ODCONE_ODCE4_POSN                                  0x4
#define _ODCONE_ODCE4_POSITION                              0x4
#define _ODCONE_ODCE4_SIZE                                  0x1
#define _ODCONE_ODCE4_LENGTH                                0x1
#define _ODCONE_ODCE4_MASK                                  0x10
#define _ODCONE_ODCE5_POSN                                  0x5
#define _ODCONE_ODCE5_POSITION                              0x5
#define _ODCONE_ODCE5_SIZE                                  0x1
#define _ODCONE_ODCE5_LENGTH                                0x1
#define _ODCONE_ODCE5_MASK                                  0x20
#define _ODCONE_ODCE6_POSN                                  0x6
#define _ODCONE_ODCE6_POSITION                              0x6
#define _ODCONE_ODCE6_SIZE                                  0x1
#define _ODCONE_ODCE6_LENGTH                                0x1
#define _ODCONE_ODCE6_MASK                                  0x40
#define _ODCONE_ODCE7_POSN                                  0x7
#define _ODCONE_ODCE7_POSITION                              0x7
#define _ODCONE_ODCE7_SIZE                                  0x1
#define _ODCONE_ODCE7_LENGTH                                0x1
#define _ODCONE_ODCE7_MASK                                  0x80

// Register: SLRCONE
#define SLRCONE SLRCONE
extern volatile unsigned char           SLRCONE             __at(0x1F67);
#ifndef _LIB_BUILD
asm("SLRCONE equ 01F67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRE0                  :1;
        unsigned SLRE1                  :1;
        unsigned                        :1;
        unsigned SLRE3                  :1;
        unsigned SLRE4                  :1;
        unsigned SLRE5                  :1;
        unsigned SLRE6                  :1;
        unsigned SLRE7                  :1;
    };
} SLRCONEbits_t;
extern volatile SLRCONEbits_t SLRCONEbits __at(0x1F67);
// bitfield macros
#define _SLRCONE_SLRE0_POSN                                 0x0
#define _SLRCONE_SLRE0_POSITION                             0x0
#define _SLRCONE_SLRE0_SIZE                                 0x1
#define _SLRCONE_SLRE0_LENGTH                               0x1
#define _SLRCONE_SLRE0_MASK                                 0x1
#define _SLRCONE_SLRE1_POSN                                 0x1
#define _SLRCONE_SLRE1_POSITION                             0x1
#define _SLRCONE_SLRE1_SIZE                                 0x1
#define _SLRCONE_SLRE1_LENGTH                               0x1
#define _SLRCONE_SLRE1_MASK                                 0x2
#define _SLRCONE_SLRE3_POSN                                 0x3
#define _SLRCONE_SLRE3_POSITION                             0x3
#define _SLRCONE_SLRE3_SIZE                                 0x1
#define _SLRCONE_SLRE3_LENGTH                               0x1
#define _SLRCONE_SLRE3_MASK                                 0x8
#define _SLRCONE_SLRE4_POSN                                 0x4
#define _SLRCONE_SLRE4_POSITION                             0x4
#define _SLRCONE_SLRE4_SIZE                                 0x1
#define _SLRCONE_SLRE4_LENGTH                               0x1
#define _SLRCONE_SLRE4_MASK                                 0x10
#define _SLRCONE_SLRE5_POSN                                 0x5
#define _SLRCONE_SLRE5_POSITION                             0x5
#define _SLRCONE_SLRE5_SIZE                                 0x1
#define _SLRCONE_SLRE5_LENGTH                               0x1
#define _SLRCONE_SLRE5_MASK                                 0x20
#define _SLRCONE_SLRE6_POSN                                 0x6
#define _SLRCONE_SLRE6_POSITION                             0x6
#define _SLRCONE_SLRE6_SIZE                                 0x1
#define _SLRCONE_SLRE6_LENGTH                               0x1
#define _SLRCONE_SLRE6_MASK                                 0x40
#define _SLRCONE_SLRE7_POSN                                 0x7
#define _SLRCONE_SLRE7_POSITION                             0x7
#define _SLRCONE_SLRE7_SIZE                                 0x1
#define _SLRCONE_SLRE7_LENGTH                               0x1
#define _SLRCONE_SLRE7_MASK                                 0x80

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0x1F68);
#ifndef _LIB_BUILD
asm("INLVLE equ 01F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLE0                :1;
        unsigned INLVLE1                :1;
        unsigned                        :1;
        unsigned INLVLE3                :1;
        unsigned INLVLE4                :1;
        unsigned INLVLE5                :1;
        unsigned INLVLE6                :1;
        unsigned INLVLE7                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0x1F68);
// bitfield macros
#define _INLVLE_INLVLE0_POSN                                0x0
#define _INLVLE_INLVLE0_POSITION                            0x0
#define _INLVLE_INLVLE0_SIZE                                0x1
#define _INLVLE_INLVLE0_LENGTH                              0x1
#define _INLVLE_INLVLE0_MASK                                0x1
#define _INLVLE_INLVLE1_POSN                                0x1
#define _INLVLE_INLVLE1_POSITION                            0x1
#define _INLVLE_INLVLE1_SIZE                                0x1
#define _INLVLE_INLVLE1_LENGTH                              0x1
#define _INLVLE_INLVLE1_MASK                                0x2
#define _INLVLE_INLVLE3_POSN                                0x3
#define _INLVLE_INLVLE3_POSITION                            0x3
#define _INLVLE_INLVLE3_SIZE                                0x1
#define _INLVLE_INLVLE3_LENGTH                              0x1
#define _INLVLE_INLVLE3_MASK                                0x8
#define _INLVLE_INLVLE4_POSN                                0x4
#define _INLVLE_INLVLE4_POSITION                            0x4
#define _INLVLE_INLVLE4_SIZE                                0x1
#define _INLVLE_INLVLE4_LENGTH                              0x1
#define _INLVLE_INLVLE4_MASK                                0x10
#define _INLVLE_INLVLE5_POSN                                0x5
#define _INLVLE_INLVLE5_POSITION                            0x5
#define _INLVLE_INLVLE5_SIZE                                0x1
#define _INLVLE_INLVLE5_LENGTH                              0x1
#define _INLVLE_INLVLE5_MASK                                0x20
#define _INLVLE_INLVLE6_POSN                                0x6
#define _INLVLE_INLVLE6_POSITION                            0x6
#define _INLVLE_INLVLE6_SIZE                                0x1
#define _INLVLE_INLVLE6_LENGTH                              0x1
#define _INLVLE_INLVLE6_MASK                                0x40
#define _INLVLE_INLVLE7_POSN                                0x7
#define _INLVLE_INLVLE7_POSITION                            0x7
#define _INLVLE_INLVLE7_SIZE                                0x1
#define _INLVLE_INLVLE7_LENGTH                              0x1
#define _INLVLE_INLVLE7_MASK                                0x80

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0x1F69);
#ifndef _LIB_BUILD
asm("IOCEP equ 01F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCEP0                 :1;
        unsigned IOCEP1                 :1;
        unsigned IOCEP2                 :1;
        unsigned IOCEP3                 :1;
        unsigned IOCEP4                 :1;
        unsigned IOCEP5                 :1;
        unsigned IOCEP6                 :1;
        unsigned IOCEP7                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0x1F69);
// bitfield macros
#define _IOCEP_IOCEP0_POSN                                  0x0
#define _IOCEP_IOCEP0_POSITION                              0x0
#define _IOCEP_IOCEP0_SIZE                                  0x1
#define _IOCEP_IOCEP0_LENGTH                                0x1
#define _IOCEP_IOCEP0_MASK                                  0x1
#define _IOCEP_IOCEP1_POSN                                  0x1
#define _IOCEP_IOCEP1_POSITION                              0x1
#define _IOCEP_IOCEP1_SIZE                                  0x1
#define _IOCEP_IOCEP1_LENGTH                                0x1
#define _IOCEP_IOCEP1_MASK                                  0x2
#define _IOCEP_IOCEP2_POSN                                  0x2
#define _IOCEP_IOCEP2_POSITION                              0x2
#define _IOCEP_IOCEP2_SIZE                                  0x1
#define _IOCEP_IOCEP2_LENGTH                                0x1
#define _IOCEP_IOCEP2_MASK                                  0x4
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8
#define _IOCEP_IOCEP4_POSN                                  0x4
#define _IOCEP_IOCEP4_POSITION                              0x4
#define _IOCEP_IOCEP4_SIZE                                  0x1
#define _IOCEP_IOCEP4_LENGTH                                0x1
#define _IOCEP_IOCEP4_MASK                                  0x10
#define _IOCEP_IOCEP5_POSN                                  0x5
#define _IOCEP_IOCEP5_POSITION                              0x5
#define _IOCEP_IOCEP5_SIZE                                  0x1
#define _IOCEP_IOCEP5_LENGTH                                0x1
#define _IOCEP_IOCEP5_MASK                                  0x20
#define _IOCEP_IOCEP6_POSN                                  0x6
#define _IOCEP_IOCEP6_POSITION                              0x6
#define _IOCEP_IOCEP6_SIZE                                  0x1
#define _IOCEP_IOCEP6_LENGTH                                0x1
#define _IOCEP_IOCEP6_MASK                                  0x40
#define _IOCEP_IOCEP7_POSN                                  0x7
#define _IOCEP_IOCEP7_POSITION                              0x7
#define _IOCEP_IOCEP7_SIZE                                  0x1
#define _IOCEP_IOCEP7_LENGTH                                0x1
#define _IOCEP_IOCEP7_MASK                                  0x80

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0x1F6A);
#ifndef _LIB_BUILD
asm("IOCEN equ 01F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCEN0                 :1;
        unsigned IOCEN1                 :1;
        unsigned IOCEN2                 :1;
        unsigned IOCEN3                 :1;
        unsigned IOCEN4                 :1;
        unsigned IOCEN5                 :1;
        unsigned IOCEN6                 :1;
        unsigned IOCEN7                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0x1F6A);
// bitfield macros
#define _IOCEN_IOCEN0_POSN                                  0x0
#define _IOCEN_IOCEN0_POSITION                              0x0
#define _IOCEN_IOCEN0_SIZE                                  0x1
#define _IOCEN_IOCEN0_LENGTH                                0x1
#define _IOCEN_IOCEN0_MASK                                  0x1
#define _IOCEN_IOCEN1_POSN                                  0x1
#define _IOCEN_IOCEN1_POSITION                              0x1
#define _IOCEN_IOCEN1_SIZE                                  0x1
#define _IOCEN_IOCEN1_LENGTH                                0x1
#define _IOCEN_IOCEN1_MASK                                  0x2
#define _IOCEN_IOCEN2_POSN                                  0x2
#define _IOCEN_IOCEN2_POSITION                              0x2
#define _IOCEN_IOCEN2_SIZE                                  0x1
#define _IOCEN_IOCEN2_LENGTH                                0x1
#define _IOCEN_IOCEN2_MASK                                  0x4
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8
#define _IOCEN_IOCEN4_POSN                                  0x4
#define _IOCEN_IOCEN4_POSITION                              0x4
#define _IOCEN_IOCEN4_SIZE                                  0x1
#define _IOCEN_IOCEN4_LENGTH                                0x1
#define _IOCEN_IOCEN4_MASK                                  0x10
#define _IOCEN_IOCEN5_POSN                                  0x5
#define _IOCEN_IOCEN5_POSITION                              0x5
#define _IOCEN_IOCEN5_SIZE                                  0x1
#define _IOCEN_IOCEN5_LENGTH                                0x1
#define _IOCEN_IOCEN5_MASK                                  0x20
#define _IOCEN_IOCEN6_POSN                                  0x6
#define _IOCEN_IOCEN6_POSITION                              0x6
#define _IOCEN_IOCEN6_SIZE                                  0x1
#define _IOCEN_IOCEN6_LENGTH                                0x1
#define _IOCEN_IOCEN6_MASK                                  0x40
#define _IOCEN_IOCEN7_POSN                                  0x7
#define _IOCEN_IOCEN7_POSITION                              0x7
#define _IOCEN_IOCEN7_SIZE                                  0x1
#define _IOCEN_IOCEN7_LENGTH                                0x1
#define _IOCEN_IOCEN7_MASK                                  0x80

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0x1F6B);
#ifndef _LIB_BUILD
asm("IOCEF equ 01F6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCEF0                 :1;
        unsigned IOCEF1                 :1;
        unsigned IOCEF2                 :1;
        unsigned IOCEF3                 :1;
        unsigned IOCEF4                 :1;
        unsigned IOCEF5                 :1;
        unsigned IOCEF6                 :1;
        unsigned IOCEF7                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0x1F6B);
// bitfield macros
#define _IOCEF_IOCEF0_POSN                                  0x0
#define _IOCEF_IOCEF0_POSITION                              0x0
#define _IOCEF_IOCEF0_SIZE                                  0x1
#define _IOCEF_IOCEF0_LENGTH                                0x1
#define _IOCEF_IOCEF0_MASK                                  0x1
#define _IOCEF_IOCEF1_POSN                                  0x1
#define _IOCEF_IOCEF1_POSITION                              0x1
#define _IOCEF_IOCEF1_SIZE                                  0x1
#define _IOCEF_IOCEF1_LENGTH                                0x1
#define _IOCEF_IOCEF1_MASK                                  0x2
#define _IOCEF_IOCEF2_POSN                                  0x2
#define _IOCEF_IOCEF2_POSITION                              0x2
#define _IOCEF_IOCEF2_SIZE                                  0x1
#define _IOCEF_IOCEF2_LENGTH                                0x1
#define _IOCEF_IOCEF2_MASK                                  0x4
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8
#define _IOCEF_IOCEF4_POSN                                  0x4
#define _IOCEF_IOCEF4_POSITION                              0x4
#define _IOCEF_IOCEF4_SIZE                                  0x1
#define _IOCEF_IOCEF4_LENGTH                                0x1
#define _IOCEF_IOCEF4_MASK                                  0x10
#define _IOCEF_IOCEF5_POSN                                  0x5
#define _IOCEF_IOCEF5_POSITION                              0x5
#define _IOCEF_IOCEF5_SIZE                                  0x1
#define _IOCEF_IOCEF5_LENGTH                                0x1
#define _IOCEF_IOCEF5_MASK                                  0x20
#define _IOCEF_IOCEF6_POSN                                  0x6
#define _IOCEF_IOCEF6_POSITION                              0x6
#define _IOCEF_IOCEF6_SIZE                                  0x1
#define _IOCEF_IOCEF6_LENGTH                                0x1
#define _IOCEF_IOCEF6_MASK                                  0x40
#define _IOCEF_IOCEF7_POSN                                  0x7
#define _IOCEF_IOCEF7_POSITION                              0x7
#define _IOCEF_IOCEF7_SIZE                                  0x1
#define _IOCEF_IOCEF7_LENGTH                                0x1
#define _IOCEF_IOCEF7_MASK                                  0x80

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x1FE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 01FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C_SHAD                 :1;
        unsigned DC_SHAD                :1;
        unsigned Z_SHAD                 :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x1FE4);
// bitfield macros
#define _STATUS_SHAD_C_SHAD_POSN                            0x0
#define _STATUS_SHAD_C_SHAD_POSITION                        0x0
#define _STATUS_SHAD_C_SHAD_SIZE                            0x1
#define _STATUS_SHAD_C_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_C_SHAD_MASK                            0x1
#define _STATUS_SHAD_DC_SHAD_POSN                           0x1
#define _STATUS_SHAD_DC_SHAD_POSITION                       0x1
#define _STATUS_SHAD_DC_SHAD_SIZE                           0x1
#define _STATUS_SHAD_DC_SHAD_LENGTH                         0x1
#define _STATUS_SHAD_DC_SHAD_MASK                           0x2
#define _STATUS_SHAD_Z_SHAD_POSN                            0x2
#define _STATUS_SHAD_Z_SHAD_POSITION                        0x2
#define _STATUS_SHAD_Z_SHAD_SIZE                            0x1
#define _STATUS_SHAD_Z_SHAD_LENGTH                          0x1
#define _STATUS_SHAD_Z_SHAD_MASK                            0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x1FE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 01FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x1FE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x1FE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 01FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :5;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0x1FE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x5
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x5
#define _BSR_SHAD_BSR_SHAD_MASK                             0x1F

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x1FE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 01FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :7;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x1FE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x7
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x7
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0x7F

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 01FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x1FE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x1FE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 01FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x1FE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 01FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x1FEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x1FEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 01FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x1FEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x1FED);
#ifndef _LIB_BUILD
asm("STKPTR equ 01FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x1FED);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x1FEE);
#ifndef _LIB_BUILD
asm("TOSL equ 01FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x1FEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x1FEF);
#ifndef _LIB_BUILD
asm("TOSH equ 01FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :7;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x1FEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x7
#define _TOSH_TOSH_LENGTH                                   0x7
#define _TOSH_TOSH_MASK                                     0x7F

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// ADACCL<ACC0>
extern volatile __bit                   ACC0                __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(ADACCL,0)
// ADACCL<ACC1>
extern volatile __bit                   ACC1                __at(0x4B1);	// @ (0x96 * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(ADACCL,1)
// ADACCH<ACC10>
extern volatile __bit                   ACC10               __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(ADACCH,2)
// ADACCH<ACC11>
extern volatile __bit                   ACC11               __at(0x4BB);	// @ (0x97 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(ADACCH,3)
// ADACCH<ACC12>
extern volatile __bit                   ACC12               __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(ADACCH,4)
// ADACCH<ACC13>
extern volatile __bit                   ACC13               __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(ADACCH,5)
// ADACCH<ACC14>
extern volatile __bit                   ACC14               __at(0x4BE);	// @ (0x97 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(ADACCH,6)
// ADACCH<ACC15>
extern volatile __bit                   ACC15               __at(0x4BF);	// @ (0x97 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(ADACCH,7)
// ADACCU<ACC16>
extern volatile __bit                   ACC16               __at(0x4C0);	// @ (0x98 * 8 + 0)
#define                                 ACC16_bit           _BIT_ACCESS(ADACCU,0)
// ADACCU<ACC17>
extern volatile __bit                   ACC17               __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 ACC17_bit           _BIT_ACCESS(ADACCU,1)
// ADACCL<ACC2>
extern volatile __bit                   ACC2                __at(0x4B2);	// @ (0x96 * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(ADACCL,2)
// ADACCL<ACC3>
extern volatile __bit                   ACC3                __at(0x4B3);	// @ (0x96 * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(ADACCL,3)
// ADACCL<ACC4>
extern volatile __bit                   ACC4                __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(ADACCL,4)
// ADACCL<ACC5>
extern volatile __bit                   ACC5                __at(0x4B5);	// @ (0x96 * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(ADACCL,5)
// ADACCL<ACC6>
extern volatile __bit                   ACC6                __at(0x4B6);	// @ (0x96 * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(ADACCL,6)
// ADACCL<ACC7>
extern volatile __bit                   ACC7                __at(0x4B7);	// @ (0x96 * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(ADACCL,7)
// ADACCH<ACC8>
extern volatile __bit                   ACC8                __at(0x4B8);	// @ (0x97 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(ADACCH,0)
// ADACCH<ACC9>
extern volatile __bit                   ACC9                __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(ADACCH,1)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0xC8E);	// @ (0x191 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0xC97);	// @ (0x192 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// ADCON2<ACLR>
extern volatile __bit                   ACLR                __at(0x89B);	// @ (0x113 * 8 + 3)
#define                                 ACLR_bit            _BIT_ACCESS(ADCON2,3)
// ADACQL<ACQ0>
extern volatile __bit                   ACQ0                __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 ACQ0_bit            _BIT_ACCESS(ADACQL,0)
// ADACQL<ACQ1>
extern volatile __bit                   ACQ1                __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 ACQ1_bit            _BIT_ACCESS(ADACQL,1)
// ADACQH<ACQ10>
extern volatile __bit                   ACQ10               __at(0x86A);	// @ (0x10D * 8 + 2)
#define                                 ACQ10_bit           _BIT_ACCESS(ADACQH,2)
// ADACQH<ACQ11>
extern volatile __bit                   ACQ11               __at(0x86B);	// @ (0x10D * 8 + 3)
#define                                 ACQ11_bit           _BIT_ACCESS(ADACQH,3)
// ADACQH<ACQ12>
extern volatile __bit                   ACQ12               __at(0x86C);	// @ (0x10D * 8 + 4)
#define                                 ACQ12_bit           _BIT_ACCESS(ADACQH,4)
// ADACQL<ACQ2>
extern volatile __bit                   ACQ2                __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 ACQ2_bit            _BIT_ACCESS(ADACQL,2)
// ADACQL<ACQ3>
extern volatile __bit                   ACQ3                __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 ACQ3_bit            _BIT_ACCESS(ADACQL,3)
// ADACQL<ACQ4>
extern volatile __bit                   ACQ4                __at(0x864);	// @ (0x10C * 8 + 4)
#define                                 ACQ4_bit            _BIT_ACCESS(ADACQL,4)
// ADACQL<ACQ5>
extern volatile __bit                   ACQ5                __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 ACQ5_bit            _BIT_ACCESS(ADACQL,5)
// ADACQL<ACQ6>
extern volatile __bit                   ACQ6                __at(0x866);	// @ (0x10C * 8 + 6)
#define                                 ACQ6_bit            _BIT_ACCESS(ADACQL,6)
// ADACQL<ACQ7>
extern volatile __bit                   ACQ7                __at(0x867);	// @ (0x10C * 8 + 7)
#define                                 ACQ7_bit            _BIT_ACCESS(ADACQL,7)
// ADACQH<ACQ8>
extern volatile __bit                   ACQ8                __at(0x868);	// @ (0x10D * 8 + 0)
#define                                 ACQ8_bit            _BIT_ACCESS(ADACQH,0)
// ADACQH<ACQ9>
extern volatile __bit                   ACQ9                __at(0x869);	// @ (0x10D * 8 + 1)
#define                                 ACQ9_bit            _BIT_ACCESS(ADACQH,1)
// ADACT<ACT0>
extern volatile __bit                   ACT0                __at(0x8B8);	// @ (0x117 * 8 + 0)
#define                                 ACT0_bit            _BIT_ACCESS(ADACT,0)
// ADACT<ACT1>
extern volatile __bit                   ACT1                __at(0x8B9);	// @ (0x117 * 8 + 1)
#define                                 ACT1_bit            _BIT_ACCESS(ADACT,1)
// ADACT<ACT2>
extern volatile __bit                   ACT2                __at(0x8BA);	// @ (0x117 * 8 + 2)
#define                                 ACT2_bit            _BIT_ACCESS(ADACT,2)
// ADACT<ACT3>
extern volatile __bit                   ACT3                __at(0x8BB);	// @ (0x117 * 8 + 3)
#define                                 ACT3_bit            _BIT_ACCESS(ADACT,3)
// ADACT<ACT4>
extern volatile __bit                   ACT4                __at(0x8BC);	// @ (0x117 * 8 + 4)
#define                                 ACT4_bit            _BIT_ACCESS(ADACT,4)
// ACTCON<ACTEN>
extern volatile __bit                   ACTEN               __at(0x44A7);	// @ (0x894 * 8 + 7)
#define                                 ACTEN_bit           _BIT_ACCESS(ACTCON,7)
// ACTCON<ACTLOCK>
extern volatile __bit                   ACTLOCK             __at(0x44A3);	// @ (0x894 * 8 + 3)
#define                                 ACTLOCK_bit         _BIT_ACCESS(ACTCON,3)
// PMD0<ACTMD>
extern volatile __bit                   ACTMD               __at(0x3CB5);	// @ (0x796 * 8 + 5)
#define                                 ACTMD_bit           _BIT_ACCESS(PMD0,5)
// ACTCON<ACTORS>
extern volatile __bit                   ACTORS              __at(0x44A1);	// @ (0x894 * 8 + 1)
#define                                 ACTORS_bit          _BIT_ACCESS(ACTCON,1)
// ACTCON<ACTUD>
extern volatile __bit                   ACTUD               __at(0x44A6);	// @ (0x894 * 8 + 6)
#define                                 ACTUD_bit           _BIT_ACCESS(ACTCON,6)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x4B1);	// @ (0x96 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x4BB);	// @ (0x97 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x4BE);	// @ (0x97 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x4BF);	// @ (0x97 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCU<ADACC16>
extern volatile __bit                   ADACC16             __at(0x4C0);	// @ (0x98 * 8 + 0)
#define                                 ADACC16_bit         _BIT_ACCESS(ADACCU,0)
// ADACCU<ADACC17>
extern volatile __bit                   ADACC17             __at(0x4C1);	// @ (0x98 * 8 + 1)
#define                                 ADACC17_bit         _BIT_ACCESS(ADACCU,1)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x4B2);	// @ (0x96 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x4B3);	// @ (0x96 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x4B5);	// @ (0x96 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x4B6);	// @ (0x96 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x4B7);	// @ (0x96 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x4B8);	// @ (0x97 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x89B);	// @ (0x113 * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQL<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQL,0)
// ADACQL<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQL,1)
// ADACQH<ADACQ10>
extern volatile __bit                   ADACQ10             __at(0x86A);	// @ (0x10D * 8 + 2)
#define                                 ADACQ10_bit         _BIT_ACCESS(ADACQH,2)
// ADACQH<ADACQ11>
extern volatile __bit                   ADACQ11             __at(0x86B);	// @ (0x10D * 8 + 3)
#define                                 ADACQ11_bit         _BIT_ACCESS(ADACQH,3)
// ADACQH<ADACQ12>
extern volatile __bit                   ADACQ12             __at(0x86C);	// @ (0x10D * 8 + 4)
#define                                 ADACQ12_bit         _BIT_ACCESS(ADACQH,4)
// ADACQL<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQL,2)
// ADACQL<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQL,3)
// ADACQL<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x864);	// @ (0x10C * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQL,4)
// ADACQL<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQL,5)
// ADACQL<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x866);	// @ (0x10C * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQL,6)
// ADACQL<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x867);	// @ (0x10C * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQL,7)
// ADACQH<ADACQ8>
extern volatile __bit                   ADACQ8              __at(0x868);	// @ (0x10D * 8 + 0)
#define                                 ADACQ8_bit          _BIT_ACCESS(ADACQH,0)
// ADACQH<ADACQ9>
extern volatile __bit                   ADACQ9              __at(0x869);	// @ (0x10D * 8 + 1)
#define                                 ADACQ9_bit          _BIT_ACCESS(ADACQH,1)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x8B8);	// @ (0x117 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x8B9);	// @ (0x117 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x8BA);	// @ (0x117 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x8BB);	// @ (0x117 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x8BC);	// @ (0x117 * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACTPPS<ADACTPPS0>
extern volatile __bit                   ADACTPPS0           __at(0xF618);	// @ (0x1EC3 * 8 + 0)
#define                                 ADACTPPS0_bit       _BIT_ACCESS(ADACTPPS,0)
// ADACTPPS<ADACTPPS1>
extern volatile __bit                   ADACTPPS1           __at(0xF619);	// @ (0x1EC3 * 8 + 1)
#define                                 ADACTPPS1_bit       _BIT_ACCESS(ADACTPPS,1)
// ADACTPPS<ADACTPPS2>
extern volatile __bit                   ADACTPPS2           __at(0xF61A);	// @ (0x1EC3 * 8 + 2)
#define                                 ADACTPPS2_bit       _BIT_ACCESS(ADACTPPS,2)
// ADACTPPS<ADACTPPS3>
extern volatile __bit                   ADACTPPS3           __at(0xF61B);	// @ (0x1EC3 * 8 + 3)
#define                                 ADACTPPS3_bit       _BIT_ACCESS(ADACTPPS,3)
// ADACTPPS<ADACTPPS4>
extern volatile __bit                   ADACTPPS4           __at(0xF61C);	// @ (0x1EC3 * 8 + 4)
#define                                 ADACTPPS4_bit       _BIT_ACCESS(ADACTPPS,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x8AF);	// @ (0x115 * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x8A4);	// @ (0x114 * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x8A5);	// @ (0x114 * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x8A6);	// @ (0x114 * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x870);	// @ (0x10E * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x871);	// @ (0x10E * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x872);	// @ (0x10E * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x873);	// @ (0x10E * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x874);	// @ (0x10E * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x3CC5);	// @ (0x798 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,5)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x4CA);	// @ (0x99 * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x4CD);	// @ (0x99 * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x4CE);	// @ (0x99 * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x4CF);	// @ (0x99 * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x88E);	// @ (0x111 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCPCON0<ADCPON>
extern volatile __bit                   ADCPON              __at(0xFF);	// @ (0x1F * 8 + 7)
#define                                 ADCPON_bit          _BIT_ACCESS(ADCPCON0,7)
// ADCPCON0<ADCPRDY>
extern volatile __bit                   ADCPRDY             __at(0xF8);	// @ (0x1F * 8 + 0)
#define                                 ADCPRDY_bit         _BIT_ACCESS(ADCPCON0,0)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x89C);	// @ (0x113 * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x89D);	// @ (0x113 * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x89E);	// @ (0x113 * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x88C);	// @ (0x111 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0x8C0);	// @ (0x118 * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0x8C1);	// @ (0x118 * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0x8C2);	// @ (0x118 * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0x8C3);	// @ (0x118 * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0x8C4);	// @ (0x118 * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0x8C5);	// @ (0x118 * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x890);	// @ (0x112 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x481);	// @ (0x90 * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x48C);	// @ (0x91 * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x48D);	// @ (0x91 * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x485);	// @ (0x90 * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x486);	// @ (0x90 * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x4A1);	// @ (0x94 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x4AA);	// @ (0x95 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x4AB);	// @ (0x95 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x4AE);	// @ (0x95 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x4AF);	// @ (0x95 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x4A2);	// @ (0x94 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x4A3);	// @ (0x94 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x4A4);	// @ (0x94 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x4A6);	// @ (0x94 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x4A7);	// @ (0x94 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x4A8);	// @ (0x95 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x4A9);	// @ (0x95 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM>
extern volatile __bit                   ADFM                __at(0x88A);	// @ (0x111 * 8 + 2)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x4860);	// @ (0x90C * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x4861);	// @ (0x90C * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x895);	// @ (0x112 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x38B8);	// @ (0x717 * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,0)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x3868);	// @ (0x70D * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,0)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x896);	// @ (0x112 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x461);	// @ (0x8C * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x46A);	// @ (0x8D * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x46B);	// @ (0x8D * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x46C);	// @ (0x8D * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x46D);	// @ (0x8D * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x46E);	// @ (0x8D * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x46F);	// @ (0x8D * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x463);	// @ (0x8C * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x465);	// @ (0x8C * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x466);	// @ (0x8C * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x467);	// @ (0x8C * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x468);	// @ (0x8D * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x469);	// @ (0x8D * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x8AD);	// @ (0x115 * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x8AC);	// @ (0x115 * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x898);	// @ (0x113 * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x899);	// @ (0x113 * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x89A);	// @ (0x113 * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// SSP1CON2<ADMSK1>
extern volatile __bit                   ADMSK1              __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK1_bit          _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK2>
extern volatile __bit                   ADMSK2              __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK2_bit          _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK3>
extern volatile __bit                   ADMSK3              __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK3_bit          _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK4>
extern volatile __bit                   ADMSK4              __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK4_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0xC8C);	// @ (0x191 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK5>
extern volatile __bit                   ADMSK5              __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK5_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0xC8D);	// @ (0x191 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x448A);	// @ (0x891 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x88F);	// @ (0x111 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x4482);	// @ (0x890 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x4F8);	// @ (0x9F * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x4F9);	// @ (0x9F * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x4FA);	// @ (0x9F * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x4FB);	// @ (0x9F * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x4FC);	// @ (0x9F * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x4FD);	// @ (0x9F * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x897);	// @ (0x112 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPREL<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x878);	// @ (0x10F * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPREL,0)
// ADPREL<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x879);	// @ (0x10F * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPREL,1)
// ADPREH<ADPRE10>
extern volatile __bit                   ADPRE10             __at(0x882);	// @ (0x110 * 8 + 2)
#define                                 ADPRE10_bit         _BIT_ACCESS(ADPREH,2)
// ADPREH<ADPRE11>
extern volatile __bit                   ADPRE11             __at(0x883);	// @ (0x110 * 8 + 3)
#define                                 ADPRE11_bit         _BIT_ACCESS(ADPREH,3)
// ADPREH<ADPRE12>
extern volatile __bit                   ADPRE12             __at(0x884);	// @ (0x110 * 8 + 4)
#define                                 ADPRE12_bit         _BIT_ACCESS(ADPREH,4)
// ADPREL<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x87A);	// @ (0x10F * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPREL,2)
// ADPREL<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x87B);	// @ (0x10F * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPREL,3)
// ADPREL<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x87C);	// @ (0x10F * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPREL,4)
// ADPREL<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x87D);	// @ (0x10F * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPREL,5)
// ADPREL<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x87E);	// @ (0x10F * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPREL,6)
// ADPREL<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x87F);	// @ (0x10F * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPREL,7)
// ADPREH<ADPRE8>
extern volatile __bit                   ADPRE8              __at(0x880);	// @ (0x110 * 8 + 0)
#define                                 ADPRE8_bit          _BIT_ACCESS(ADPREH,0)
// ADPREH<ADPRE9>
extern volatile __bit                   ADPRE9              __at(0x881);	// @ (0x110 * 8 + 1)
#define                                 ADPRE9_bit          _BIT_ACCESS(ADPREH,1)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x8B0);	// @ (0x116 * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x8B1);	// @ (0x116 * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x4D8);	// @ (0x9B * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x4D9);	// @ (0x9B * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x4E2);	// @ (0x9C * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x4E3);	// @ (0x9C * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x4E4);	// @ (0x9C * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x4E5);	// @ (0x9C * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x4E6);	// @ (0x9C * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x4E7);	// @ (0x9C * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x4DA);	// @ (0x9B * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x4DB);	// @ (0x9B * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x4DC);	// @ (0x9B * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x4DD);	// @ (0x9B * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x4DE);	// @ (0x9B * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x4DF);	// @ (0x9B * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x89F);	// @ (0x113 * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0x4F2);	// @ (0x9E * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0x4F3);	// @ (0x9E * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0x4F4);	// @ (0x9E * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0x4F5);	// @ (0x9E * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0x4F6);	// @ (0x9E * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0x4F7);	// @ (0x9E * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0x4EF);	// @ (0x9D * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x4D0);	// @ (0x9A * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x4D1);	// @ (0x9A * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x4D2);	// @ (0x9A * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x4D3);	// @ (0x9A * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x4D5);	// @ (0x9A * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x4D6);	// @ (0x9A * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x4D7);	// @ (0x9A * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x8A3);	// @ (0x114 * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x8A8);	// @ (0x115 * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x8A9);	// @ (0x115 * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x8AA);	// @ (0x115 * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x490);	// @ (0x92 * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x491);	// @ (0x92 * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x49B);	// @ (0x93 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x49C);	// @ (0x93 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x49D);	// @ (0x93 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x49F);	// @ (0x93 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x492);	// @ (0x92 * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x493);	// @ (0x92 * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x494);	// @ (0x92 * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x495);	// @ (0x92 * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x496);	// @ (0x92 * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x497);	// @ (0x92 * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE1<ADTIE>
extern volatile __bit                   ADTIE               __at(0x38B9);	// @ (0x717 * 8 + 1)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ADTIF>
extern volatile __bit                   ADTIF               __at(0x3869);	// @ (0x70D * 8 + 1)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR1,1)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x8A0);	// @ (0x114 * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x8A1);	// @ (0x114 * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x8A2);	// @ (0x114 * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x47A);	// @ (0x8F * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x47B);	// @ (0x8F * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x47C);	// @ (0x8F * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x47D);	// @ (0x8F * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x47E);	// @ (0x8F * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x47F);	// @ (0x8F * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x476);	// @ (0x8E * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x477);	// @ (0x8E * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x478);	// @ (0x8F * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x479);	// @ (0x8F * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x8AE);	// @ (0x115 * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0xC91);	// @ (0x192 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ALRMCON<ALRMEN>
extern volatile __bit                   ALRMEN              __at(0x6077);	// @ (0xC0E * 8 + 7)
#define                                 ALRMEN_bit          _BIT_ACCESS(ALRMCON,7)
// ALRMDAY<ALRMHDAY0>
extern volatile __bit                   ALRMHDAY0           __at(0x60CC);	// @ (0xC19 * 8 + 4)
#define                                 ALRMHDAY0_bit       _BIT_ACCESS(ALRMDAY,4)
// ALRMDAY<ALRMHDAY1>
extern volatile __bit                   ALRMHDAY1           __at(0x60CD);	// @ (0xC19 * 8 + 5)
#define                                 ALRMHDAY1_bit       _BIT_ACCESS(ALRMDAY,5)
// ALRMHR<ALRMHHR0>
extern volatile __bit                   ALRMHHR0            __at(0x60D4);	// @ (0xC1A * 8 + 4)
#define                                 ALRMHHR0_bit        _BIT_ACCESS(ALRMHR,4)
// ALRMHR<ALRMHHR1>
extern volatile __bit                   ALRMHHR1            __at(0x60D5);	// @ (0xC1A * 8 + 5)
#define                                 ALRMHHR1_bit        _BIT_ACCESS(ALRMHR,5)
// ALRMMIN<ALRMHMIN0>
extern volatile __bit                   ALRMHMIN0           __at(0x60DC);	// @ (0xC1B * 8 + 4)
#define                                 ALRMHMIN0_bit       _BIT_ACCESS(ALRMMIN,4)
// ALRMMIN<ALRMHMIN1>
extern volatile __bit                   ALRMHMIN1           __at(0x60DD);	// @ (0xC1B * 8 + 5)
#define                                 ALRMHMIN1_bit       _BIT_ACCESS(ALRMMIN,5)
// ALRMMIN<ALRMHMIN2>
extern volatile __bit                   ALRMHMIN2           __at(0x60DE);	// @ (0xC1B * 8 + 6)
#define                                 ALRMHMIN2_bit       _BIT_ACCESS(ALRMMIN,6)
// ALRMMTH<ALRMHMONTH>
extern volatile __bit                   ALRMHMONTH          __at(0x60BC);	// @ (0xC17 * 8 + 4)
#define                                 ALRMHMONTH_bit      _BIT_ACCESS(ALRMMTH,4)
// ALRMSEC<ALRMHSEC0>
extern volatile __bit                   ALRMHSEC0           __at(0x60E4);	// @ (0xC1C * 8 + 4)
#define                                 ALRMHSEC0_bit       _BIT_ACCESS(ALRMSEC,4)
// ALRMSEC<ALRMHSEC1>
extern volatile __bit                   ALRMHSEC1           __at(0x60E5);	// @ (0xC1C * 8 + 5)
#define                                 ALRMHSEC1_bit       _BIT_ACCESS(ALRMSEC,5)
// ALRMSEC<ALRMHSEC2>
extern volatile __bit                   ALRMHSEC2           __at(0x60E6);	// @ (0xC1C * 8 + 6)
#define                                 ALRMHSEC2_bit       _BIT_ACCESS(ALRMSEC,6)
// ALRMDAY<ALRMLDAY0>
extern volatile __bit                   ALRMLDAY0           __at(0x60C8);	// @ (0xC19 * 8 + 0)
#define                                 ALRMLDAY0_bit       _BIT_ACCESS(ALRMDAY,0)
// ALRMDAY<ALRMLDAY1>
extern volatile __bit                   ALRMLDAY1           __at(0x60C9);	// @ (0xC19 * 8 + 1)
#define                                 ALRMLDAY1_bit       _BIT_ACCESS(ALRMDAY,1)
// ALRMDAY<ALRMLDAY2>
extern volatile __bit                   ALRMLDAY2           __at(0x60CA);	// @ (0xC19 * 8 + 2)
#define                                 ALRMLDAY2_bit       _BIT_ACCESS(ALRMDAY,2)
// ALRMDAY<ALRMLDAY3>
extern volatile __bit                   ALRMLDAY3           __at(0x60CB);	// @ (0xC19 * 8 + 3)
#define                                 ALRMLDAY3_bit       _BIT_ACCESS(ALRMDAY,3)
// ALRMHR<ALRMLHR0>
extern volatile __bit                   ALRMLHR0            __at(0x60D0);	// @ (0xC1A * 8 + 0)
#define                                 ALRMLHR0_bit        _BIT_ACCESS(ALRMHR,0)
// ALRMHR<ALRMLHR1>
extern volatile __bit                   ALRMLHR1            __at(0x60D1);	// @ (0xC1A * 8 + 1)
#define                                 ALRMLHR1_bit        _BIT_ACCESS(ALRMHR,1)
// ALRMHR<ALRMLHR2>
extern volatile __bit                   ALRMLHR2            __at(0x60D2);	// @ (0xC1A * 8 + 2)
#define                                 ALRMLHR2_bit        _BIT_ACCESS(ALRMHR,2)
// ALRMHR<ALRMLHR3>
extern volatile __bit                   ALRMLHR3            __at(0x60D3);	// @ (0xC1A * 8 + 3)
#define                                 ALRMLHR3_bit        _BIT_ACCESS(ALRMHR,3)
// ALRMMIN<ALRMLMIN0>
extern volatile __bit                   ALRMLMIN0           __at(0x60D8);	// @ (0xC1B * 8 + 0)
#define                                 ALRMLMIN0_bit       _BIT_ACCESS(ALRMMIN,0)
// ALRMMIN<ALRMLMIN1>
extern volatile __bit                   ALRMLMIN1           __at(0x60D9);	// @ (0xC1B * 8 + 1)
#define                                 ALRMLMIN1_bit       _BIT_ACCESS(ALRMMIN,1)
// ALRMMIN<ALRMLMIN2>
extern volatile __bit                   ALRMLMIN2           __at(0x60DA);	// @ (0xC1B * 8 + 2)
#define                                 ALRMLMIN2_bit       _BIT_ACCESS(ALRMMIN,2)
// ALRMMIN<ALRMLMIN3>
extern volatile __bit                   ALRMLMIN3           __at(0x60DB);	// @ (0xC1B * 8 + 3)
#define                                 ALRMLMIN3_bit       _BIT_ACCESS(ALRMMIN,3)
// ALRMMTH<ALRMLMONTH0>
extern volatile __bit                   ALRMLMONTH0         __at(0x60B8);	// @ (0xC17 * 8 + 0)
#define                                 ALRMLMONTH0_bit     _BIT_ACCESS(ALRMMTH,0)
// ALRMMTH<ALRMLMONTH1>
extern volatile __bit                   ALRMLMONTH1         __at(0x60B9);	// @ (0xC17 * 8 + 1)
#define                                 ALRMLMONTH1_bit     _BIT_ACCESS(ALRMMTH,1)
// ALRMMTH<ALRMLMONTH2>
extern volatile __bit                   ALRMLMONTH2         __at(0x60BA);	// @ (0xC17 * 8 + 2)
#define                                 ALRMLMONTH2_bit     _BIT_ACCESS(ALRMMTH,2)
// ALRMMTH<ALRMLMONTH3>
extern volatile __bit                   ALRMLMONTH3         __at(0x60BB);	// @ (0xC17 * 8 + 3)
#define                                 ALRMLMONTH3_bit     _BIT_ACCESS(ALRMMTH,3)
// ALRMSEC<ALRMLSEC0>
extern volatile __bit                   ALRMLSEC0           __at(0x60E0);	// @ (0xC1C * 8 + 0)
#define                                 ALRMLSEC0_bit       _BIT_ACCESS(ALRMSEC,0)
// ALRMSEC<ALRMLSEC1>
extern volatile __bit                   ALRMLSEC1           __at(0x60E1);	// @ (0xC1C * 8 + 1)
#define                                 ALRMLSEC1_bit       _BIT_ACCESS(ALRMSEC,1)
// ALRMSEC<ALRMLSEC2>
extern volatile __bit                   ALRMLSEC2           __at(0x60E2);	// @ (0xC1C * 8 + 2)
#define                                 ALRMLSEC2_bit       _BIT_ACCESS(ALRMSEC,2)
// ALRMSEC<ALRMLSEC3>
extern volatile __bit                   ALRMLSEC3           __at(0x60E3);	// @ (0xC1C * 8 + 3)
#define                                 ALRMLSEC3_bit       _BIT_ACCESS(ALRMSEC,3)
// ALRMWD<ALRMLWDAY0>
extern volatile __bit                   ALRMLWDAY0          __at(0x60C0);	// @ (0xC18 * 8 + 0)
#define                                 ALRMLWDAY0_bit      _BIT_ACCESS(ALRMWD,0)
// ALRMWD<ALRMLWDAY1>
extern volatile __bit                   ALRMLWDAY1          __at(0x60C1);	// @ (0xC18 * 8 + 1)
#define                                 ALRMLWDAY1_bit      _BIT_ACCESS(ALRMWD,1)
// ALRMWD<ALRMLWDAY2>
extern volatile __bit                   ALRMLWDAY2          __at(0x60C2);	// @ (0xC18 * 8 + 2)
#define                                 ALRMLWDAY2_bit      _BIT_ACCESS(ALRMWD,2)
// ALRMCON<AMASK0>
extern volatile __bit                   AMASK0              __at(0x6072);	// @ (0xC0E * 8 + 2)
#define                                 AMASK0_bit          _BIT_ACCESS(ALRMCON,2)
// ALRMCON<AMASK1>
extern volatile __bit                   AMASK1              __at(0x6073);	// @ (0xC0E * 8 + 3)
#define                                 AMASK1_bit          _BIT_ACCESS(ALRMCON,3)
// ALRMCON<AMASK2>
extern volatile __bit                   AMASK2              __at(0x6074);	// @ (0xC0E * 8 + 4)
#define                                 AMASK2_bit          _BIT_ACCESS(ALRMCON,4)
// ALRMCON<AMASK3>
extern volatile __bit                   AMASK3              __at(0x6075);	// @ (0xC0E * 8 + 5)
#define                                 AMASK3_bit          _BIT_ACCESS(ALRMCON,5)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xF9C0);	// @ (0x1F38 * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xF9C1);	// @ (0x1F38 * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xF9C2);	// @ (0x1F38 * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA3>
extern volatile __bit                   ANSA3               __at(0xF9C3);	// @ (0x1F38 * 8 + 3)
#define                                 ANSA3_bit           _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xF9C4);	// @ (0x1F38 * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSA6>
extern volatile __bit                   ANSA6               __at(0xF9C6);	// @ (0x1F38 * 8 + 6)
#define                                 ANSA6_bit           _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSA7>
extern volatile __bit                   ANSA7               __at(0xF9C7);	// @ (0x1F38 * 8 + 7)
#define                                 ANSA7_bit           _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSB0>
extern volatile __bit                   ANSB0               __at(0xFA18);	// @ (0x1F43 * 8 + 0)
#define                                 ANSB0_bit           _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSB1>
extern volatile __bit                   ANSB1               __at(0xFA19);	// @ (0x1F43 * 8 + 1)
#define                                 ANSB1_bit           _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSB2>
extern volatile __bit                   ANSB2               __at(0xFA1A);	// @ (0x1F43 * 8 + 2)
#define                                 ANSB2_bit           _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSB3>
extern volatile __bit                   ANSB3               __at(0xFA1B);	// @ (0x1F43 * 8 + 3)
#define                                 ANSB3_bit           _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSB4>
extern volatile __bit                   ANSB4               __at(0xFA1C);	// @ (0x1F43 * 8 + 4)
#define                                 ANSB4_bit           _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSB5>
extern volatile __bit                   ANSB5               __at(0xFA1D);	// @ (0x1F43 * 8 + 5)
#define                                 ANSB5_bit           _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSB6>
extern volatile __bit                   ANSB6               __at(0xFA1E);	// @ (0x1F43 * 8 + 6)
#define                                 ANSB6_bit           _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSB7>
extern volatile __bit                   ANSB7               __at(0xFA1F);	// @ (0x1F43 * 8 + 7)
#define                                 ANSB7_bit           _BIT_ACCESS(ANSELB,7)
// ANSELD<ANSD0>
extern volatile __bit                   ANSD0               __at(0xFAC8);	// @ (0x1F59 * 8 + 0)
#define                                 ANSD0_bit           _BIT_ACCESS(ANSELD,0)
// ANSELD<ANSD1>
extern volatile __bit                   ANSD1               __at(0xFAC9);	// @ (0x1F59 * 8 + 1)
#define                                 ANSD1_bit           _BIT_ACCESS(ANSELD,1)
// ANSELD<ANSD2>
extern volatile __bit                   ANSD2               __at(0xFACA);	// @ (0x1F59 * 8 + 2)
#define                                 ANSD2_bit           _BIT_ACCESS(ANSELD,2)
// ANSELD<ANSD3>
extern volatile __bit                   ANSD3               __at(0xFACB);	// @ (0x1F59 * 8 + 3)
#define                                 ANSD3_bit           _BIT_ACCESS(ANSELD,3)
// ANSELD<ANSD4>
extern volatile __bit                   ANSD4               __at(0xFACC);	// @ (0x1F59 * 8 + 4)
#define                                 ANSD4_bit           _BIT_ACCESS(ANSELD,4)
// ANSELD<ANSD5>
extern volatile __bit                   ANSD5               __at(0xFACD);	// @ (0x1F59 * 8 + 5)
#define                                 ANSD5_bit           _BIT_ACCESS(ANSELD,5)
// ANSELD<ANSD6>
extern volatile __bit                   ANSD6               __at(0xFACE);	// @ (0x1F59 * 8 + 6)
#define                                 ANSD6_bit           _BIT_ACCESS(ANSELD,6)
// ANSELD<ANSD7>
extern volatile __bit                   ANSD7               __at(0xFACF);	// @ (0x1F59 * 8 + 7)
#define                                 ANSD7_bit           _BIT_ACCESS(ANSELD,7)
// ANSELE<ANSE0>
extern volatile __bit                   ANSE0               __at(0xFB20);	// @ (0x1F64 * 8 + 0)
#define                                 ANSE0_bit           _BIT_ACCESS(ANSELE,0)
// ANSELE<ANSE1>
extern volatile __bit                   ANSE1               __at(0xFB21);	// @ (0x1F64 * 8 + 1)
#define                                 ANSE1_bit           _BIT_ACCESS(ANSELE,1)
// ANSELE<ANSE3>
extern volatile __bit                   ANSE3               __at(0xFB23);	// @ (0x1F64 * 8 + 3)
#define                                 ANSE3_bit           _BIT_ACCESS(ANSELE,3)
// ANSELE<ANSE4>
extern volatile __bit                   ANSE4               __at(0xFB24);	// @ (0x1F64 * 8 + 4)
#define                                 ANSE4_bit           _BIT_ACCESS(ANSELE,4)
// ANSELE<ANSE5>
extern volatile __bit                   ANSE5               __at(0xFB25);	// @ (0x1F64 * 8 + 5)
#define                                 ANSE5_bit           _BIT_ACCESS(ANSELE,5)
// ANSELE<ANSE6>
extern volatile __bit                   ANSE6               __at(0xFB26);	// @ (0x1F64 * 8 + 6)
#define                                 ANSE6_bit           _BIT_ACCESS(ANSELE,6)
// ANSELE<ANSE7>
extern volatile __bit                   ANSE7               __at(0xFB27);	// @ (0x1F64 * 8 + 7)
#define                                 ANSE7_bit           _BIT_ACCESS(ANSELE,7)
// ANSELH<ANSELH0>
extern volatile __bit                   ANSELH0             __at(0xF330);	// @ (0x1E66 * 8 + 0)
#define                                 ANSELH0_bit         _BIT_ACCESS(ANSELH,0)
// ANSELH<ANSELH1>
extern volatile __bit                   ANSELH1             __at(0xF331);	// @ (0x1E66 * 8 + 1)
#define                                 ANSELH1_bit         _BIT_ACCESS(ANSELH,1)
// ANSELH<ANSELH2>
extern volatile __bit                   ANSELH2             __at(0xF332);	// @ (0x1E66 * 8 + 2)
#define                                 ANSELH2_bit         _BIT_ACCESS(ANSELH,2)
// ANSELH<ANSELH3>
extern volatile __bit                   ANSELH3             __at(0xF333);	// @ (0x1E66 * 8 + 3)
#define                                 ANSELH3_bit         _BIT_ACCESS(ANSELH,3)
// ANSELF<ANSF0>
extern volatile __bit                   ANSF0               __at(0xF280);	// @ (0x1E50 * 8 + 0)
#define                                 ANSF0_bit           _BIT_ACCESS(ANSELF,0)
// ANSELF<ANSF1>
extern volatile __bit                   ANSF1               __at(0xF281);	// @ (0x1E50 * 8 + 1)
#define                                 ANSF1_bit           _BIT_ACCESS(ANSELF,1)
// ANSELF<ANSF2>
extern volatile __bit                   ANSF2               __at(0xF282);	// @ (0x1E50 * 8 + 2)
#define                                 ANSF2_bit           _BIT_ACCESS(ANSELF,2)
// ANSELF<ANSF3>
extern volatile __bit                   ANSF3               __at(0xF283);	// @ (0x1E50 * 8 + 3)
#define                                 ANSF3_bit           _BIT_ACCESS(ANSELF,3)
// ANSELF<ANSF4>
extern volatile __bit                   ANSF4               __at(0xF284);	// @ (0x1E50 * 8 + 4)
#define                                 ANSF4_bit           _BIT_ACCESS(ANSELF,4)
// ANSELF<ANSF5>
extern volatile __bit                   ANSF5               __at(0xF285);	// @ (0x1E50 * 8 + 5)
#define                                 ANSF5_bit           _BIT_ACCESS(ANSELF,5)
// ANSELF<ANSF6>
extern volatile __bit                   ANSF6               __at(0xF286);	// @ (0x1E50 * 8 + 6)
#define                                 ANSF6_bit           _BIT_ACCESS(ANSELF,6)
// ANSELF<ANSF7>
extern volatile __bit                   ANSF7               __at(0xF287);	// @ (0x1E50 * 8 + 7)
#define                                 ANSF7_bit           _BIT_ACCESS(ANSELF,7)
// ANSELG<ANSG0>
extern volatile __bit                   ANSG0               __at(0xF2D8);	// @ (0x1E5B * 8 + 0)
#define                                 ANSG0_bit           _BIT_ACCESS(ANSELG,0)
// ANSELG<ANSG1>
extern volatile __bit                   ANSG1               __at(0xF2D9);	// @ (0x1E5B * 8 + 1)
#define                                 ANSG1_bit           _BIT_ACCESS(ANSELG,1)
// ANSELG<ANSG2>
extern volatile __bit                   ANSG2               __at(0xF2DA);	// @ (0x1E5B * 8 + 2)
#define                                 ANSG2_bit           _BIT_ACCESS(ANSELG,2)
// ANSELG<ANSG3>
extern volatile __bit                   ANSG3               __at(0xF2DB);	// @ (0x1E5B * 8 + 3)
#define                                 ANSG3_bit           _BIT_ACCESS(ANSELG,3)
// ANSELG<ANSG4>
extern volatile __bit                   ANSG4               __at(0xF2DC);	// @ (0x1E5B * 8 + 4)
#define                                 ANSG4_bit           _BIT_ACCESS(ANSELG,4)
// ANSELG<ANSG6>
extern volatile __bit                   ANSG6               __at(0xF2DE);	// @ (0x1E5B * 8 + 6)
#define                                 ANSG6_bit           _BIT_ACCESS(ANSELG,6)
// ANSELG<ANSG7>
extern volatile __bit                   ANSG7               __at(0xF2DF);	// @ (0x1E5B * 8 + 7)
#define                                 ANSG7_bit           _BIT_ACCESS(ANSELG,7)
// ALRMRPT<ARPT0>
extern volatile __bit                   ARPT0               __at(0x6078);	// @ (0xC0F * 8 + 0)
#define                                 ARPT0_bit           _BIT_ACCESS(ALRMRPT,0)
// ALRMRPT<ARPT1>
extern volatile __bit                   ARPT1               __at(0x6079);	// @ (0xC0F * 8 + 1)
#define                                 ARPT1_bit           _BIT_ACCESS(ALRMRPT,1)
// ALRMRPT<ARPT2>
extern volatile __bit                   ARPT2               __at(0x607A);	// @ (0xC0F * 8 + 2)
#define                                 ARPT2_bit           _BIT_ACCESS(ALRMRPT,2)
// ALRMRPT<ARPT3>
extern volatile __bit                   ARPT3               __at(0x607B);	// @ (0xC0F * 8 + 3)
#define                                 ARPT3_bit           _BIT_ACCESS(ALRMRPT,3)
// ALRMRPT<ARPT4>
extern volatile __bit                   ARPT4               __at(0x607C);	// @ (0xC0F * 8 + 4)
#define                                 ARPT4_bit           _BIT_ACCESS(ALRMRPT,4)
// ALRMRPT<ARPT5>
extern volatile __bit                   ARPT5               __at(0x607D);	// @ (0xC0F * 8 + 5)
#define                                 ARPT5_bit           _BIT_ACCESS(ALRMRPT,5)
// ALRMRPT<ARPT6>
extern volatile __bit                   ARPT6               __at(0x607E);	// @ (0xC0F * 8 + 6)
#define                                 ARPT6_bit           _BIT_ACCESS(ALRMRPT,6)
// ALRMRPT<ARPT7>
extern volatile __bit                   ARPT7               __at(0x607F);	// @ (0xC0F * 8 + 7)
#define                                 ARPT7_bit           _BIT_ACCESS(ALRMRPT,7)
// SMT1STAT<AS>
extern volatile __bit                   AS                  __at(0x24D0);	// @ (0x49A * 8 + 0)
#define                                 AS_bit              _BIT_ACCESS(SMT1STAT,0)
// CWG1AS1<AS0E>
extern volatile __bit                   AS0E                __at(0x3098);	// @ (0x613 * 8 + 0)
#define                                 AS0E_bit            _BIT_ACCESS(CWG1AS1,0)
// CWG1AS1<AS1E>
extern volatile __bit                   AS1E                __at(0x3099);	// @ (0x613 * 8 + 1)
#define                                 AS1E_bit            _BIT_ACCESS(CWG1AS1,1)
// CWG1AS1<AS2E>
extern volatile __bit                   AS2E                __at(0x309A);	// @ (0x613 * 8 + 2)
#define                                 AS2E_bit            _BIT_ACCESS(CWG1AS1,2)
// CWG1AS1<AS3E>
extern volatile __bit                   AS3E                __at(0x309B);	// @ (0x613 * 8 + 3)
#define                                 AS3E_bit            _BIT_ACCESS(CWG1AS1,3)
// CWG1AS1<AS4E>
extern volatile __bit                   AS4E                __at(0x309C);	// @ (0x613 * 8 + 4)
#define                                 AS4E_bit            _BIT_ACCESS(CWG1AS1,4)
// PIE3<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x38C9);	// @ (0x719 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x3879);	// @ (0x70F * 8 + 1)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR3,1)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// LCDVCON1<BIAS0>
extern volatile __bit                   BIAS0               __at(0xE8A0);	// @ (0x1D14 * 8 + 0)
#define                                 BIAS0_bit           _BIT_ACCESS(LCDVCON1,0)
// LCDVCON1<BIAS1>
extern volatile __bit                   BIAS1               __at(0xE8A1);	// @ (0x1D14 * 8 + 1)
#define                                 BIAS1_bit           _BIT_ACCESS(LCDVCON1,1)
// LCDVCON1<BIAS2>
extern volatile __bit                   BIAS2               __at(0xE8A2);	// @ (0x1D14 * 8 + 2)
#define                                 BIAS2_bit           _BIT_ACCESS(LCDVCON1,2)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0xC94);	// @ (0x192 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// BSR<BSR5>
extern volatile __bit                   BSR5                __at(0x45);	// @ (0x8 * 8 + 5)
#define                                 BSR5_bit            _BIT_ACCESS(BSR,5)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x4C81);	// @ (0x990 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x38C0);	// @ (0x718 * 8 + 0)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,0)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x3870);	// @ (0x70E * 8 + 0)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,0)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x4C88);	// @ (0x991 * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x4C89);	// @ (0x991 * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// CM1NSEL<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x4C90);	// @ (0x992 * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NSEL,0)
// CM1NSEL<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x4C91);	// @ (0x992 * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NSEL,1)
// CM1NSEL<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x4C92);	// @ (0x992 * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NSEL,2)
// CM1CON0<C1ON>
extern volatile __bit                   C1ON                __at(0x4C87);	// @ (0x990 * 8 + 7)
#define                                 C1ON_bit            _BIT_ACCESS(CM1CON0,7)
// CM1PSEL<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x4C98);	// @ (0x993 * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PSEL,0)
// CM1PSEL<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x4C99);	// @ (0x993 * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PSEL,1)
// CM1PSEL<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x4C9A);	// @ (0x993 * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PSEL,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x4C84);	// @ (0x990 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x4C80);	// @ (0x990 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x10F0);	// @ (0x21E * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x10F1);	// @ (0x21E * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x4CA1);	// @ (0x994 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x38C1);	// @ (0x718 * 8 + 1)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,1)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x3871);	// @ (0x70E * 8 + 1)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x4CA8);	// @ (0x995 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x4CA9);	// @ (0x995 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// CM2NSEL<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x4CB0);	// @ (0x996 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NSEL,0)
// CM2NSEL<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x4CB1);	// @ (0x996 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NSEL,1)
// CM2NSEL<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x4CB2);	// @ (0x996 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NSEL,2)
// CM2CON0<C2ON>
extern volatile __bit                   C2ON                __at(0x4CA7);	// @ (0x994 * 8 + 7)
#define                                 C2ON_bit            _BIT_ACCESS(CM2CON0,7)
// CM2PSEL<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x4CB8);	// @ (0x997 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PSEL,0)
// CM2PSEL<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x4CB9);	// @ (0x997 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PSEL,1)
// CM2PSEL<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x4CBA);	// @ (0x997 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PSEL,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x4CA4);	// @ (0x994 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x4CA0);	// @ (0x994 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CCPTMRS0<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x10F2);	// @ (0x21E * 8 + 2)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS0,2)
// CCPTMRS0<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x10F3);	// @ (0x21E * 8 + 3)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS0,3)
// RTCCAL<CAL0>
extern volatile __bit                   CAL0                __at(0x6068);	// @ (0xC0D * 8 + 0)
#define                                 CAL0_bit            _BIT_ACCESS(RTCCAL,0)
// TMR1L<CAL01>
extern volatile __bit                   CAL01               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 CAL01_bit           _BIT_ACCESS(TMR1L,0)
// RTCCAL<CAL1>
extern volatile __bit                   CAL1                __at(0x6069);	// @ (0xC0D * 8 + 1)
#define                                 CAL1_bit            _BIT_ACCESS(RTCCAL,1)
// TMR1L<CAL11>
extern volatile __bit                   CAL11               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 CAL11_bit           _BIT_ACCESS(TMR1L,1)
// RTCCAL<CAL2>
extern volatile __bit                   CAL2                __at(0x606A);	// @ (0xC0D * 8 + 2)
#define                                 CAL2_bit            _BIT_ACCESS(RTCCAL,2)
// TMR1L<CAL21>
extern volatile __bit                   CAL21               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 CAL21_bit           _BIT_ACCESS(TMR1L,2)
// RTCCAL<CAL3>
extern volatile __bit                   CAL3                __at(0x606B);	// @ (0xC0D * 8 + 3)
#define                                 CAL3_bit            _BIT_ACCESS(RTCCAL,3)
// TMR1L<CAL31>
extern volatile __bit                   CAL31               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 CAL31_bit           _BIT_ACCESS(TMR1L,3)
// RTCCAL<CAL4>
extern volatile __bit                   CAL4                __at(0x606C);	// @ (0xC0D * 8 + 4)
#define                                 CAL4_bit            _BIT_ACCESS(RTCCAL,4)
// TMR1L<CAL41>
extern volatile __bit                   CAL41               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 CAL41_bit           _BIT_ACCESS(TMR1L,4)
// RTCCAL<CAL5>
extern volatile __bit                   CAL5                __at(0x606D);	// @ (0xC0D * 8 + 5)
#define                                 CAL5_bit            _BIT_ACCESS(RTCCAL,5)
// TMR1L<CAL51>
extern volatile __bit                   CAL51               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 CAL51_bit           _BIT_ACCESS(TMR1L,5)
// RTCCAL<CAL6>
extern volatile __bit                   CAL6                __at(0x606E);	// @ (0xC0D * 8 + 6)
#define                                 CAL6_bit            _BIT_ACCESS(RTCCAL,6)
// TMR1L<CAL61>
extern volatile __bit                   CAL61               __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 CAL61_bit           _BIT_ACCESS(TMR1L,6)
// RTCCAL<CAL7>
extern volatile __bit                   CAL7                __at(0x606F);	// @ (0xC0D * 8 + 7)
#define                                 CAL7_bit            _BIT_ACCESS(RTCCAL,7)
// TMR1L<CAL71>
extern volatile __bit                   CAL71               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 CAL71_bit           _BIT_ACCESS(TMR1L,7)
// ADCON3<CALC0>
extern volatile __bit                   CALC0               __at(0x8A4);	// @ (0x114 * 8 + 4)
#define                                 CALC0_bit           _BIT_ACCESS(ADCON3,4)
// ADCON3<CALC1>
extern volatile __bit                   CALC1               __at(0x8A5);	// @ (0x114 * 8 + 5)
#define                                 CALC1_bit           _BIT_ACCESS(ADCON3,5)
// ADCON3<CALC2>
extern volatile __bit                   CALC2               __at(0x8A6);	// @ (0x114 * 8 + 6)
#define                                 CALC2_bit           _BIT_ACCESS(ADCON3,6)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x1878);	// @ (0x30F * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x1879);	// @ (0x30F * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CAP<CCP1CTS3>
extern volatile __bit                   CCP1CTS3            __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 CCP1CTS3_bit        _BIT_ACCESS(CCP1CAP,3)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x1877);	// @ (0x30E * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE6<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x38E0);	// @ (0x71C * 8 + 0)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR6,0)
// PMD3<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x3CC8);	// @ (0x799 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD3,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x1873);	// @ (0x30E * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OE>
extern volatile __bit                   CCP1OE              __at(0x1876);	// @ (0x30E * 8 + 6)
#define                                 CCP1OE_bit          _BIT_ACCESS(CCP1CON,6)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0xF508);	// @ (0x1EA1 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0xF509);	// @ (0x1EA1 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0xF50A);	// @ (0x1EA1 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0xF50B);	// @ (0x1EA1 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0xF50C);	// @ (0x1EA1 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x1898);	// @ (0x313 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x1899);	// @ (0x313 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x189A);	// @ (0x313 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CAP<CCP2CTS3>
extern volatile __bit                   CCP2CTS3            __at(0x189B);	// @ (0x313 * 8 + 3)
#define                                 CCP2CTS3_bit        _BIT_ACCESS(CCP2CAP,3)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x1897);	// @ (0x312 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x1894);	// @ (0x312 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE6<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x38E1);	// @ (0x71C * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR6,1)
// PMD3<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x3CC9);	// @ (0x799 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD3,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x1890);	// @ (0x312 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x1891);	// @ (0x312 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x1892);	// @ (0x312 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x1893);	// @ (0x312 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OE>
extern volatile __bit                   CCP2OE              __at(0x1896);	// @ (0x312 * 8 + 6)
#define                                 CCP2OE_bit          _BIT_ACCESS(CCP2CON,6)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x1895);	// @ (0x312 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0xF510);	// @ (0x1EA2 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0xF511);	// @ (0x1EA2 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0xF512);	// @ (0x1EA2 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0xF513);	// @ (0x1EA2 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0xF514);	// @ (0x1EA2 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// PMD3<CCP3MD>
extern volatile __bit                   CCP3MD              __at(0x3CCA);	// @ (0x799 * 8 + 2)
#define                                 CCP3MD_bit          _BIT_ACCESS(PMD3,2)
// PMD3<CCP4MD>
extern volatile __bit                   CCP4MD              __at(0x3CCB);	// @ (0x799 * 8 + 3)
#define                                 CCP4MD_bit          _BIT_ACCESS(PMD3,3)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x4862);	// @ (0x90C * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x4863);	// @ (0x90C * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x4470);	// @ (0x88E * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x4471);	// @ (0x88E * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x4472);	// @ (0x88E * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x4473);	// @ (0x88E * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// ALRMCON<CHIME>
extern volatile __bit                   CHIME               __at(0x6076);	// @ (0xC0E * 8 + 6)
#define                                 CHIME_bit           _BIT_ACCESS(ALRMCON,6)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// PIE5<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x38DC);	// @ (0x71B * 8 + 4)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x388C);	// @ (0x711 * 8 + 4)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR5,4)
// PMD5<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x3CD9);	// @ (0x79B * 8 + 1)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD5,1)
// PIE5<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x38DD);	// @ (0x71B * 8 + 5)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE5,5)
// PIR5<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR5,5)
// PMD5<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x3CDA);	// @ (0x79B * 8 + 2)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD5,2)
// PIE5<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x38DE);	// @ (0x71B * 8 + 6)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE5,6)
// PIR5<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x388E);	// @ (0x711 * 8 + 6)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR5,6)
// PMD5<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x3CDB);	// @ (0x79B * 8 + 3)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD5,3)
// PIE5<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x38DF);	// @ (0x71B * 8 + 7)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE5,7)
// PIR5<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x388F);	// @ (0x711 * 8 + 7)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR5,7)
// PMD5<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x3CDC);	// @ (0x79B * 8 + 4)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD5,4)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0xF5D8);	// @ (0x1EBB * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0xF5D9);	// @ (0x1EBB * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0xF5DA);	// @ (0x1EBB * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0xF5DB);	// @ (0x1EBB * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0xF5DC);	// @ (0x1EBB * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0xF5E0);	// @ (0x1EBC * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0xF5E1);	// @ (0x1EBC * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0xF5E2);	// @ (0x1EBC * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0xF5E3);	// @ (0x1EBC * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0xF5E4);	// @ (0x1EBC * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0xF5E8);	// @ (0x1EBD * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0xF5E9);	// @ (0x1EBD * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0xF5EA);	// @ (0x1EBD * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0xF5EB);	// @ (0x1EBD * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0xF5EC);	// @ (0x1EBD * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0xF5F0);	// @ (0x1EBE * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0xF5F1);	// @ (0x1EBE * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0xF5F2);	// @ (0x1EBE * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0xF5F3);	// @ (0x1EBE * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0xF5F4);	// @ (0x1EBE * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// PMD2<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x3CC1);	// @ (0x798 * 8 + 1)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD2,1)
// PMD2<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x3CC2);	// @ (0x798 * 8 + 2)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD2,2)
// ADCNT<CNT0>
extern volatile __bit                   CNT0                __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 CNT0_bit            _BIT_ACCESS(ADCNT,0)
// ADCNT<CNT1>
extern volatile __bit                   CNT1                __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 CNT1_bit            _BIT_ACCESS(ADCNT,1)
// ADCNT<CNT2>
extern volatile __bit                   CNT2                __at(0x4CA);	// @ (0x99 * 8 + 2)
#define                                 CNT2_bit            _BIT_ACCESS(ADCNT,2)
// ADCNT<CNT3>
extern volatile __bit                   CNT3                __at(0x4CB);	// @ (0x99 * 8 + 3)
#define                                 CNT3_bit            _BIT_ACCESS(ADCNT,3)
// ADCNT<CNT4>
extern volatile __bit                   CNT4                __at(0x4CC);	// @ (0x99 * 8 + 4)
#define                                 CNT4_bit            _BIT_ACCESS(ADCNT,4)
// ADCNT<CNT5>
extern volatile __bit                   CNT5                __at(0x4CD);	// @ (0x99 * 8 + 5)
#define                                 CNT5_bit            _BIT_ACCESS(ADCNT,5)
// ADCNT<CNT6>
extern volatile __bit                   CNT6                __at(0x4CE);	// @ (0x99 * 8 + 6)
#define                                 CNT6_bit            _BIT_ACCESS(ADCNT,6)
// ADCNT<CNT7>
extern volatile __bit                   CNT7                __at(0x4CF);	// @ (0x99 * 8 + 7)
#define                                 CNT7_bit            _BIT_ACCESS(ADCNT,7)
// ADCON0<CONT>
extern volatile __bit                   CONT                __at(0x88E);	// @ (0x111 * 8 + 6)
#define                                 CONT_bit            _BIT_ACCESS(ADCON0,6)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x4474);	// @ (0x88E * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x4475);	// @ (0x88E * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x4476);	// @ (0x88E * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// SMT1CON0<CPOL>
extern volatile __bit                   CPOL                __at(0x24C2);	// @ (0x498 * 8 + 2)
#define                                 CPOL_bit            _BIT_ACCESS(SMT1CON0,2)
// SMT1CPRL<CPR0>
extern volatile __bit                   CPR0                __at(0x2478);	// @ (0x48F * 8 + 0)
#define                                 CPR0_bit            _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<CPR1>
extern volatile __bit                   CPR1                __at(0x2479);	// @ (0x48F * 8 + 1)
#define                                 CPR1_bit            _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<CPR10>
extern volatile __bit                   CPR10               __at(0x2482);	// @ (0x490 * 8 + 2)
#define                                 CPR10_bit           _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<CPR11>
extern volatile __bit                   CPR11               __at(0x2483);	// @ (0x490 * 8 + 3)
#define                                 CPR11_bit           _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<CPR12>
extern volatile __bit                   CPR12               __at(0x2484);	// @ (0x490 * 8 + 4)
#define                                 CPR12_bit           _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<CPR13>
extern volatile __bit                   CPR13               __at(0x2485);	// @ (0x490 * 8 + 5)
#define                                 CPR13_bit           _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<CPR14>
extern volatile __bit                   CPR14               __at(0x2486);	// @ (0x490 * 8 + 6)
#define                                 CPR14_bit           _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<CPR15>
extern volatile __bit                   CPR15               __at(0x2487);	// @ (0x490 * 8 + 7)
#define                                 CPR15_bit           _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<CPR16>
extern volatile __bit                   CPR16               __at(0x2488);	// @ (0x491 * 8 + 0)
#define                                 CPR16_bit           _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<CPR17>
extern volatile __bit                   CPR17               __at(0x2489);	// @ (0x491 * 8 + 1)
#define                                 CPR17_bit           _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<CPR18>
extern volatile __bit                   CPR18               __at(0x248A);	// @ (0x491 * 8 + 2)
#define                                 CPR18_bit           _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<CPR19>
extern volatile __bit                   CPR19               __at(0x248B);	// @ (0x491 * 8 + 3)
#define                                 CPR19_bit           _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<CPR2>
extern volatile __bit                   CPR2                __at(0x247A);	// @ (0x48F * 8 + 2)
#define                                 CPR2_bit            _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<CPR20>
extern volatile __bit                   CPR20               __at(0x248C);	// @ (0x491 * 8 + 4)
#define                                 CPR20_bit           _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<CPR21>
extern volatile __bit                   CPR21               __at(0x248D);	// @ (0x491 * 8 + 5)
#define                                 CPR21_bit           _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<CPR22>
extern volatile __bit                   CPR22               __at(0x248E);	// @ (0x491 * 8 + 6)
#define                                 CPR22_bit           _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<CPR23>
extern volatile __bit                   CPR23               __at(0x248F);	// @ (0x491 * 8 + 7)
#define                                 CPR23_bit           _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<CPR3>
extern volatile __bit                   CPR3                __at(0x247B);	// @ (0x48F * 8 + 3)
#define                                 CPR3_bit            _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<CPR4>
extern volatile __bit                   CPR4                __at(0x247C);	// @ (0x48F * 8 + 4)
#define                                 CPR4_bit            _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<CPR5>
extern volatile __bit                   CPR5                __at(0x247D);	// @ (0x48F * 8 + 5)
#define                                 CPR5_bit            _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<CPR6>
extern volatile __bit                   CPR6                __at(0x247E);	// @ (0x48F * 8 + 6)
#define                                 CPR6_bit            _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<CPR7>
extern volatile __bit                   CPR7                __at(0x247F);	// @ (0x48F * 8 + 7)
#define                                 CPR7_bit            _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<CPR8>
extern volatile __bit                   CPR8                __at(0x2480);	// @ (0x490 * 8 + 0)
#define                                 CPR8_bit            _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<CPR9>
extern volatile __bit                   CPR9                __at(0x2481);	// @ (0x490 * 8 + 1)
#define                                 CPR9_bit            _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<CPRUP>
extern volatile __bit                   CPRUP               __at(0x24D7);	// @ (0x49A * 8 + 7)
#define                                 CPRUP_bit           _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<CPW0>
extern volatile __bit                   CPW0                __at(0x2490);	// @ (0x492 * 8 + 0)
#define                                 CPW0_bit            _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<CPW1>
extern volatile __bit                   CPW1                __at(0x2491);	// @ (0x492 * 8 + 1)
#define                                 CPW1_bit            _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<CPW10>
extern volatile __bit                   CPW10               __at(0x249A);	// @ (0x493 * 8 + 2)
#define                                 CPW10_bit           _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<CPW11>
extern volatile __bit                   CPW11               __at(0x249B);	// @ (0x493 * 8 + 3)
#define                                 CPW11_bit           _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<CPW12>
extern volatile __bit                   CPW12               __at(0x249C);	// @ (0x493 * 8 + 4)
#define                                 CPW12_bit           _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<CPW13>
extern volatile __bit                   CPW13               __at(0x249D);	// @ (0x493 * 8 + 5)
#define                                 CPW13_bit           _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<CPW14>
extern volatile __bit                   CPW14               __at(0x249E);	// @ (0x493 * 8 + 6)
#define                                 CPW14_bit           _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<CPW15>
extern volatile __bit                   CPW15               __at(0x249F);	// @ (0x493 * 8 + 7)
#define                                 CPW15_bit           _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<CPW16>
extern volatile __bit                   CPW16               __at(0x24A0);	// @ (0x494 * 8 + 0)
#define                                 CPW16_bit           _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<CPW17>
extern volatile __bit                   CPW17               __at(0x24A1);	// @ (0x494 * 8 + 1)
#define                                 CPW17_bit           _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<CPW18>
extern volatile __bit                   CPW18               __at(0x24A2);	// @ (0x494 * 8 + 2)
#define                                 CPW18_bit           _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<CPW19>
extern volatile __bit                   CPW19               __at(0x24A3);	// @ (0x494 * 8 + 3)
#define                                 CPW19_bit           _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<CPW2>
extern volatile __bit                   CPW2                __at(0x2492);	// @ (0x492 * 8 + 2)
#define                                 CPW2_bit            _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<CPW20>
extern volatile __bit                   CPW20               __at(0x24A4);	// @ (0x494 * 8 + 4)
#define                                 CPW20_bit           _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<CPW21>
extern volatile __bit                   CPW21               __at(0x24A5);	// @ (0x494 * 8 + 5)
#define                                 CPW21_bit           _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<CPW22>
extern volatile __bit                   CPW22               __at(0x24A6);	// @ (0x494 * 8 + 6)
#define                                 CPW22_bit           _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<CPW23>
extern volatile __bit                   CPW23               __at(0x24A7);	// @ (0x494 * 8 + 7)
#define                                 CPW23_bit           _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<CPW3>
extern volatile __bit                   CPW3                __at(0x2493);	// @ (0x492 * 8 + 3)
#define                                 CPW3_bit            _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<CPW4>
extern volatile __bit                   CPW4                __at(0x2494);	// @ (0x492 * 8 + 4)
#define                                 CPW4_bit            _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<CPW5>
extern volatile __bit                   CPW5                __at(0x2495);	// @ (0x492 * 8 + 5)
#define                                 CPW5_bit            _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<CPW6>
extern volatile __bit                   CPW6                __at(0x2496);	// @ (0x492 * 8 + 6)
#define                                 CPW6_bit            _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<CPW7>
extern volatile __bit                   CPW7                __at(0x2497);	// @ (0x492 * 8 + 7)
#define                                 CPW7_bit            _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<CPW8>
extern volatile __bit                   CPW8                __at(0x2498);	// @ (0x493 * 8 + 0)
#define                                 CPW8_bit            _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<CPW9>
extern volatile __bit                   CPW9                __at(0x2499);	// @ (0x493 * 8 + 1)
#define                                 CPW9_bit            _BIT_ACCESS(SMT1CPWH,1)
// LCDVCON2<CPWDT>
extern volatile __bit                   CPWDT               __at(0xE8AF);	// @ (0x1D15 * 8 + 7)
#define                                 CPWDT_bit           _BIT_ACCESS(LCDVCON2,7)
// SMT1STAT<CPWUP>
extern volatile __bit                   CPWUP               __at(0x24D6);	// @ (0x49A * 8 + 6)
#define                                 CPWUP_bit           _BIT_ACCESS(SMT1STAT,6)
// PIE6<CRIE>
extern volatile __bit                   CRIE                __at(0x38E7);	// @ (0x71C * 8 + 7)
#define                                 CRIE_bit            _BIT_ACCESS(PIE6,7)
// PIR6<CRIF>
extern volatile __bit                   CRIF                __at(0x3897);	// @ (0x712 * 8 + 7)
#define                                 CRIF_bit            _BIT_ACCESS(PIR6,7)
// ADCON2<CRS0>
extern volatile __bit                   CRS0                __at(0x89C);	// @ (0x113 * 8 + 4)
#define                                 CRS0_bit            _BIT_ACCESS(ADCON2,4)
// ADCON2<CRS1>
extern volatile __bit                   CRS1                __at(0x89D);	// @ (0x113 * 8 + 5)
#define                                 CRS1_bit            _BIT_ACCESS(ADCON2,5)
// ADCON2<CRS2>
extern volatile __bit                   CRS2                __at(0x89E);	// @ (0x113 * 8 + 6)
#define                                 CRS2_bit            _BIT_ACCESS(ADCON2,6)
// ADCLK<CS4>
extern volatile __bit                   CS4                 __at(0x8C4);	// @ (0x118 * 8 + 4)
#define                                 CS4_bit             _BIT_ACCESS(ADCLK,4)
// ADCLK<CS5>
extern volatile __bit                   CS5                 __at(0x8C5);	// @ (0x118 * 8 + 5)
#define                                 CS5_bit             _BIT_ACCESS(ADCLK,5)
// SMT1CLK<CSEL0>
extern volatile __bit                   CSEL0               __at(0x24D8);	// @ (0x49B * 8 + 0)
#define                                 CSEL0_bit           _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<CSEL1>
extern volatile __bit                   CSEL1               __at(0x24D9);	// @ (0x49B * 8 + 1)
#define                                 CSEL1_bit           _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<CSEL2>
extern volatile __bit                   CSEL2               __at(0x24DA);	// @ (0x49B * 8 + 2)
#define                                 CSEL2_bit           _BIT_ACCESS(SMT1CLK,2)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x447F);	// @ (0x88F * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x38BE);	// @ (0x717 * 8 + 6)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,6)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x386E);	// @ (0x70D * 8 + 6)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,6)
// CWG1CLKCON<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x3060);	// @ (0x60C * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLKCON,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x3071);	// @ (0x60E * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x3072);	// @ (0x60E * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x3073);	// @ (0x60E * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x3074);	// @ (0x60E * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x3075);	// @ (0x60E * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE7<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x38E8);	// @ (0x71D * 8 + 0)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE7,0)
// PIR7<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x3898);	// @ (0x713 * 8 + 0)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR7,0)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1ISM<CWG1ISM0>
extern volatile __bit                   CWG1ISM0            __at(0x3068);	// @ (0x60D * 8 + 0)
#define                                 CWG1ISM0_bit        _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<CWG1ISM1>
extern volatile __bit                   CWG1ISM1            __at(0x3069);	// @ (0x60D * 8 + 1)
#define                                 CWG1ISM1_bit        _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<CWG1ISM2>
extern volatile __bit                   CWG1ISM2            __at(0x306A);	// @ (0x60D * 8 + 2)
#define                                 CWG1ISM2_bit        _BIT_ACCESS(CWG1ISM,2)
// CWG1ISM<CWG1ISM3>
extern volatile __bit                   CWG1ISM3            __at(0x306B);	// @ (0x60D * 8 + 3)
#define                                 CWG1ISM3_bit        _BIT_ACCESS(CWG1ISM,3)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x3CD0);	// @ (0x79A * 8 + 0)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,0)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x3080);	// @ (0x610 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x3081);	// @ (0x610 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x3082);	// @ (0x610 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x30A4);	// @ (0x614 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x30A5);	// @ (0x614 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1PPS<CWG1PPS0>
extern volatile __bit                   CWG1PPS0            __at(0xF588);	// @ (0x1EB1 * 8 + 0)
#define                                 CWG1PPS0_bit        _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1PPS1>
extern volatile __bit                   CWG1PPS1            __at(0xF589);	// @ (0x1EB1 * 8 + 1)
#define                                 CWG1PPS1_bit        _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1PPS2>
extern volatile __bit                   CWG1PPS2            __at(0xF58A);	// @ (0x1EB1 * 8 + 2)
#define                                 CWG1PPS2_bit        _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1PPS3>
extern volatile __bit                   CWG1PPS3            __at(0xF58B);	// @ (0x1EB1 * 8 + 3)
#define                                 CWG1PPS3_bit        _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1PPS4>
extern volatile __bit                   CWG1PPS4            __at(0xF58C);	// @ (0x1EB1 * 8 + 4)
#define                                 CWG1PPS4_bit        _BIT_ACCESS(CWG1PPS,4)
// CWG1AS0<CWG1REN>
extern volatile __bit                   CWG1REN             __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 CWG1REN_bit         _BIT_ACCESS(CWG1AS0,6)
// CWG1AS0<CWG1SHUTDOWN>
extern volatile __bit                   CWG1SHUTDOWN        __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 CWG1SHUTDOWN_bit    _BIT_ACCESS(CWG1AS0,7)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x30A3);	// @ (0x614 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// STATUS_SHAD<C_SHAD>
extern volatile __bit                   C_SHAD              __at(0xFF20);	// @ (0x1FE4 * 8 + 0)
#define                                 C_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,0)
// SSP1STAT<DA>
extern volatile __bit                   DA                  __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x4877);	// @ (0x90E * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1OE2>
extern volatile __bit                   DAC1OE2             __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 DAC1OE2_bit         _BIT_ACCESS(DAC1CON0,4)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x4878);	// @ (0x90F * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x4879);	// @ (0x90F * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x487A);	// @ (0x90F * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x487B);	// @ (0x90F * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x487C);	// @ (0x90F * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// PMD2<DACMD>
extern volatile __bit                   DACMD               __at(0x3CC6);	// @ (0x798 * 8 + 6)
#define                                 DACMD_bit           _BIT_ACCESS(PMD2,6)
// SSP1STAT<DATA_ADDRESS>
extern volatile __bit                   DATA_ADDRESS        __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS_bit    _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// DAY<DAYH0>
extern volatile __bit                   DAYH0               __at(0x609C);	// @ (0xC13 * 8 + 4)
#define                                 DAYH0_bit           _BIT_ACCESS(DAY,4)
// DAY<DAYH1>
extern volatile __bit                   DAYH1               __at(0x609D);	// @ (0xC13 * 8 + 5)
#define                                 DAYH1_bit           _BIT_ACCESS(DAY,5)
// DAY<DAYL0>
extern volatile __bit                   DAYL0               __at(0x6098);	// @ (0xC13 * 8 + 0)
#define                                 DAYL0_bit           _BIT_ACCESS(DAY,0)
// DAY<DAYL1>
extern volatile __bit                   DAYL1               __at(0x6099);	// @ (0xC13 * 8 + 1)
#define                                 DAYL1_bit           _BIT_ACCESS(DAY,1)
// DAY<DAYL2>
extern volatile __bit                   DAYL2               __at(0x609A);	// @ (0xC13 * 8 + 2)
#define                                 DAYL2_bit           _BIT_ACCESS(DAY,2)
// DAY<DAYL3>
extern volatile __bit                   DAYL3               __at(0x609B);	// @ (0xC13 * 8 + 3)
#define                                 DAYL3_bit           _BIT_ACCESS(DAY,3)
// CWG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0x3078);	// @ (0x60F * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0x3079);	// @ (0x60F * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0x307A);	// @ (0x60F * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0x307B);	// @ (0x60F * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0x307C);	// @ (0x60F * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0x307D);	// @ (0x60F * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0x3070);	// @ (0x60E * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0x3071);	// @ (0x60E * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0x3072);	// @ (0x60E * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0x3073);	// @ (0x60E * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0x3074);	// @ (0x60E * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0x3075);	// @ (0x60E * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(CWG1DBR,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// STATUS_SHAD<DC_SHAD>
extern volatile __bit                   DC_SHAD             __at(0xFF21);	// @ (0x1FE4 * 8 + 1)
#define                                 DC_SHAD_bit         _BIT_ACCESS(STATUS_SHAD,1)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0xC90);	// @ (0x192 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x4464);	// @ (0x88C * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x4460);	// @ (0x88C * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x4461);	// @ (0x88C * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x4462);	// @ (0x88C * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x4466);	// @ (0x88C * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// ADCON1<DSEN>
extern volatile __bit                   DSEN                __at(0x890);	// @ (0x112 * 8 + 0)
#define                                 DSEN_bit            _BIT_ACCESS(ADCON1,0)
// SSP1STAT<D_A>
extern volatile __bit                   D_A                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// LCDVCON1<EN5V>
extern volatile __bit                   EN5V                __at(0xE8A6);	// @ (0x1D14 * 8 + 6)
#define                                 EN5V_bit            _BIT_ACCESS(LCDVCON1,6)
// ADERRL<ERR0>
extern volatile __bit                   ERR0                __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(ADERRL,0)
// ADERRL<ERR1>
extern volatile __bit                   ERR1                __at(0x481);	// @ (0x90 * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(ADERRL,1)
// ADERRH<ERR10>
extern volatile __bit                   ERR10               __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(ADERRH,2)
// ADERRH<ERR11>
extern volatile __bit                   ERR11               __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(ADERRH,3)
// ADERRH<ERR12>
extern volatile __bit                   ERR12               __at(0x48C);	// @ (0x91 * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(ADERRH,4)
// ADERRH<ERR13>
extern volatile __bit                   ERR13               __at(0x48D);	// @ (0x91 * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(ADERRH,5)
// ADERRH<ERR14>
extern volatile __bit                   ERR14               __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(ADERRH,6)
// ADERRH<ERR15>
extern volatile __bit                   ERR15               __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(ADERRH,7)
// ADERRL<ERR2>
extern volatile __bit                   ERR2                __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(ADERRL,2)
// ADERRL<ERR3>
extern volatile __bit                   ERR3                __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(ADERRL,3)
// ADERRL<ERR4>
extern volatile __bit                   ERR4                __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(ADERRL,4)
// ADERRL<ERR5>
extern volatile __bit                   ERR5                __at(0x485);	// @ (0x90 * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(ADERRL,5)
// ADERRL<ERR6>
extern volatile __bit                   ERR6                __at(0x486);	// @ (0x90 * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(ADERRL,6)
// ADERRL<ERR7>
extern volatile __bit                   ERR7                __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(ADERRL,7)
// ADERRH<ERR8>
extern volatile __bit                   ERR8                __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(ADERRH,0)
// ADERRH<ERR9>
extern volatile __bit                   ERR9                __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(ADERRH,1)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x448F);	// @ (0x891 * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x4487);	// @ (0x890 * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// ADFLTRL<FLTR0>
extern volatile __bit                   FLTR0               __at(0x4A0);	// @ (0x94 * 8 + 0)
#define                                 FLTR0_bit           _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<FLTR1>
extern volatile __bit                   FLTR1               __at(0x4A1);	// @ (0x94 * 8 + 1)
#define                                 FLTR1_bit           _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<FLTR10>
extern volatile __bit                   FLTR10              __at(0x4AA);	// @ (0x95 * 8 + 2)
#define                                 FLTR10_bit          _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<FLTR11>
extern volatile __bit                   FLTR11              __at(0x4AB);	// @ (0x95 * 8 + 3)
#define                                 FLTR11_bit          _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<FLTR12>
extern volatile __bit                   FLTR12              __at(0x4AC);	// @ (0x95 * 8 + 4)
#define                                 FLTR12_bit          _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<FLTR13>
extern volatile __bit                   FLTR13              __at(0x4AD);	// @ (0x95 * 8 + 5)
#define                                 FLTR13_bit          _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<FLTR14>
extern volatile __bit                   FLTR14              __at(0x4AE);	// @ (0x95 * 8 + 6)
#define                                 FLTR14_bit          _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<FLTR15>
extern volatile __bit                   FLTR15              __at(0x4AF);	// @ (0x95 * 8 + 7)
#define                                 FLTR15_bit          _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<FLTR2>
extern volatile __bit                   FLTR2               __at(0x4A2);	// @ (0x94 * 8 + 2)
#define                                 FLTR2_bit           _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<FLTR3>
extern volatile __bit                   FLTR3               __at(0x4A3);	// @ (0x94 * 8 + 3)
#define                                 FLTR3_bit           _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<FLTR4>
extern volatile __bit                   FLTR4               __at(0x4A4);	// @ (0x94 * 8 + 4)
#define                                 FLTR4_bit           _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<FLTR5>
extern volatile __bit                   FLTR5               __at(0x4A5);	// @ (0x94 * 8 + 5)
#define                                 FLTR5_bit           _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<FLTR6>
extern volatile __bit                   FLTR6               __at(0x4A6);	// @ (0x94 * 8 + 6)
#define                                 FLTR6_bit           _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<FLTR7>
extern volatile __bit                   FLTR7               __at(0x4A7);	// @ (0x94 * 8 + 7)
#define                                 FLTR7_bit           _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<FLTR8>
extern volatile __bit                   FLTR8               __at(0x4A8);	// @ (0x95 * 8 + 0)
#define                                 FLTR8_bit           _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<FLTR9>
extern volatile __bit                   FLTR9               __at(0x4A9);	// @ (0x95 * 8 + 1)
#define                                 FLTR9_bit           _BIT_ACCESS(ADFLTRH,1)
// ADCON0<FM>
extern volatile __bit                   FM                  __at(0x88A);	// @ (0x111 * 8 + 2)
#define                                 FM_bit              _BIT_ACCESS(ADCON0,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x40F4);	// @ (0x81E * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x4867);	// @ (0x90C * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x3CB6);	// @ (0x796 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x4866);	// @ (0x90C * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x3087);	// @ (0x610 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// T1GCON<GE>
extern volatile __bit                   GE                  __at(0x107F);	// @ (0x20F * 8 + 7)
#define                                 GE_bit              _BIT_ACCESS(T1GCON,7)
// T1GCON<GGO_nDONE>
extern volatile __bit                   GGO_nDONE           __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 GGO_nDONE_bit       _BIT_ACCESS(T1GCON,3)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO>
extern volatile __bit                   GO                  __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 GO_bit              _BIT_ACCESS(ADCON0,0)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// T1GCON<GSPM>
extern volatile __bit                   GSPM                __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 GSPM_bit            _BIT_ACCESS(T1GCON,4)
// T1GATE<GSS0>
extern volatile __bit                   GSS0                __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 GSS0_bit            _BIT_ACCESS(T1GATE,0)
// T1GATE<GSS1>
extern volatile __bit                   GSS1                __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 GSS1_bit            _BIT_ACCESS(T1GATE,1)
// T1GATE<GSS2>
extern volatile __bit                   GSS2                __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 GSS2_bit            _BIT_ACCESS(T1GATE,2)
// T1GATE<GSS3>
extern volatile __bit                   GSS3                __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 GSS3_bit            _BIT_ACCESS(T1GATE,3)
// T1GATE<GSS4>
extern volatile __bit                   GSS4                __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 GSS4_bit            _BIT_ACCESS(T1GATE,4)
// T1GCON<GTM>
extern volatile __bit                   GTM                 __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 GTM_bit             _BIT_ACCESS(T1GCON,5)
// T1GCON<GVAL>
extern volatile __bit                   GVAL                __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 GVAL_bit            _BIT_ACCESS(T1GCON,2)
// RTCCON<HALFSEC>
extern volatile __bit                   HALFSEC             __at(0x6063);	// @ (0xC0C * 8 + 3)
#define                                 HALFSEC_bit         _BIT_ACCESS(RTCCON,3)
// OSCFRQ<HFFRQ0>
extern volatile __bit                   HFFRQ0              __at(0x4498);	// @ (0x893 * 8 + 0)
#define                                 HFFRQ0_bit          _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<HFFRQ1>
extern volatile __bit                   HFFRQ1              __at(0x4499);	// @ (0x893 * 8 + 1)
#define                                 HFFRQ1_bit          _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<HFFRQ2>
extern volatile __bit                   HFFRQ2              __at(0x449A);	// @ (0x893 * 8 + 2)
#define                                 HFFRQ2_bit          _BIT_ACCESS(OSCFRQ,2)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x448E);	// @ (0x891 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x4486);	// @ (0x890 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// OSCTUNE<HFTUN0>
extern volatile __bit                   HFTUN0              __at(0x4490);	// @ (0x892 * 8 + 0)
#define                                 HFTUN0_bit          _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<HFTUN1>
extern volatile __bit                   HFTUN1              __at(0x4491);	// @ (0x892 * 8 + 1)
#define                                 HFTUN1_bit          _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<HFTUN2>
extern volatile __bit                   HFTUN2              __at(0x4492);	// @ (0x892 * 8 + 2)
#define                                 HFTUN2_bit          _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<HFTUN3>
extern volatile __bit                   HFTUN3              __at(0x4493);	// @ (0x892 * 8 + 3)
#define                                 HFTUN3_bit          _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<HFTUN4>
extern volatile __bit                   HFTUN4              __at(0x4494);	// @ (0x892 * 8 + 4)
#define                                 HFTUN4_bit          _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<HFTUN5>
extern volatile __bit                   HFTUN5              __at(0x4495);	// @ (0x892 * 8 + 5)
#define                                 HFTUN5_bit          _BIT_ACCESS(OSCTUNE,5)
// HIDRVF<HIDF7>
extern volatile __bit                   HIDF7               __at(0xF2AF);	// @ (0x1E55 * 8 + 7)
#define                                 HIDF7_bit           _BIT_ACCESS(HIDRVF,7)
// HOURS<HRH0>
extern volatile __bit                   HRH0                __at(0x60A4);	// @ (0xC14 * 8 + 4)
#define                                 HRH0_bit            _BIT_ACCESS(HOURS,4)
// HOURS<HRH1>
extern volatile __bit                   HRH1                __at(0x60A5);	// @ (0xC14 * 8 + 5)
#define                                 HRH1_bit            _BIT_ACCESS(HOURS,5)
// HOURS<HRL0>
extern volatile __bit                   HRL0                __at(0x60A0);	// @ (0xC14 * 8 + 0)
#define                                 HRL0_bit            _BIT_ACCESS(HOURS,0)
// HOURS<HRL1>
extern volatile __bit                   HRL1                __at(0x60A1);	// @ (0xC14 * 8 + 1)
#define                                 HRL1_bit            _BIT_ACCESS(HOURS,1)
// HOURS<HRL2>
extern volatile __bit                   HRL2                __at(0x60A2);	// @ (0xC14 * 8 + 2)
#define                                 HRL2_bit            _BIT_ACCESS(HOURS,2)
// HOURS<HRL3>
extern volatile __bit                   HRL3                __at(0x60A3);	// @ (0xC14 * 8 + 3)
#define                                 HRL3_bit            _BIT_ACCESS(HOURS,3)
// SSP1STAT<I2C_DAT>
extern volatile __bit                   I2C_DAT             __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT_bit         _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_READ>
extern volatile __bit                   I2C_READ            __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_START>
extern volatile __bit                   I2C_START           __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START_bit       _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_STOP>
extern volatile __bit                   I2C_STOP            __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 I2C_STOP_bit        _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<I2C_STOP2>
extern volatile __bit                   I2C_STOP2           __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 I2C_STOP2_bit       _BIT_ACCESS(SSP1STAT,4)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x4467);	// @ (0x88C * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// CWG1CON1<IN>
extern volatile __bit                   IN                  __at(0x308D);	// @ (0x611 * 8 + 5)
#define                                 IN_bit              _BIT_ACCESS(CWG1CON1,5)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0xF9E0);	// @ (0x1F3C * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0xF9E1);	// @ (0x1F3C * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0xF9E2);	// @ (0x1F3C * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0xF9E3);	// @ (0x1F3C * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0xF9E4);	// @ (0x1F3C * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0xF9E5);	// @ (0x1F3C * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0xF9E6);	// @ (0x1F3C * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0xF9E7);	// @ (0x1F3C * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0xFA38);	// @ (0x1F47 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0xFA39);	// @ (0x1F47 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0xFA3A);	// @ (0x1F47 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0xFA3B);	// @ (0x1F47 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0xFA3C);	// @ (0x1F47 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0xFA3D);	// @ (0x1F47 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0xFA3E);	// @ (0x1F47 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0xFA3F);	// @ (0x1F47 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0xFA90);	// @ (0x1F52 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0xFA91);	// @ (0x1F52 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0xFA92);	// @ (0x1F52 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0xFA93);	// @ (0x1F52 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0xFA94);	// @ (0x1F52 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0xFA95);	// @ (0x1F52 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0xFA96);	// @ (0x1F52 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0xFA97);	// @ (0x1F52 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLD<INLVLD0>
extern volatile __bit                   INLVLD0             __at(0xFAE8);	// @ (0x1F5D * 8 + 0)
#define                                 INLVLD0_bit         _BIT_ACCESS(INLVLD,0)
// INLVLD<INLVLD1>
extern volatile __bit                   INLVLD1             __at(0xFAE9);	// @ (0x1F5D * 8 + 1)
#define                                 INLVLD1_bit         _BIT_ACCESS(INLVLD,1)
// INLVLD<INLVLD2>
extern volatile __bit                   INLVLD2             __at(0xFAEA);	// @ (0x1F5D * 8 + 2)
#define                                 INLVLD2_bit         _BIT_ACCESS(INLVLD,2)
// INLVLD<INLVLD3>
extern volatile __bit                   INLVLD3             __at(0xFAEB);	// @ (0x1F5D * 8 + 3)
#define                                 INLVLD3_bit         _BIT_ACCESS(INLVLD,3)
// INLVLD<INLVLD4>
extern volatile __bit                   INLVLD4             __at(0xFAEC);	// @ (0x1F5D * 8 + 4)
#define                                 INLVLD4_bit         _BIT_ACCESS(INLVLD,4)
// INLVLD<INLVLD5>
extern volatile __bit                   INLVLD5             __at(0xFAED);	// @ (0x1F5D * 8 + 5)
#define                                 INLVLD5_bit         _BIT_ACCESS(INLVLD,5)
// INLVLD<INLVLD6>
extern volatile __bit                   INLVLD6             __at(0xFAEE);	// @ (0x1F5D * 8 + 6)
#define                                 INLVLD6_bit         _BIT_ACCESS(INLVLD,6)
// INLVLD<INLVLD7>
extern volatile __bit                   INLVLD7             __at(0xFAEF);	// @ (0x1F5D * 8 + 7)
#define                                 INLVLD7_bit         _BIT_ACCESS(INLVLD,7)
// INLVLE<INLVLE0>
extern volatile __bit                   INLVLE0             __at(0xFB40);	// @ (0x1F68 * 8 + 0)
#define                                 INLVLE0_bit         _BIT_ACCESS(INLVLE,0)
// INLVLE<INLVLE1>
extern volatile __bit                   INLVLE1             __at(0xFB41);	// @ (0x1F68 * 8 + 1)
#define                                 INLVLE1_bit         _BIT_ACCESS(INLVLE,1)
// INLVLE<INLVLE3>
extern volatile __bit                   INLVLE3             __at(0xFB43);	// @ (0x1F68 * 8 + 3)
#define                                 INLVLE3_bit         _BIT_ACCESS(INLVLE,3)
// INLVLE<INLVLE4>
extern volatile __bit                   INLVLE4             __at(0xFB44);	// @ (0x1F68 * 8 + 4)
#define                                 INLVLE4_bit         _BIT_ACCESS(INLVLE,4)
// INLVLE<INLVLE5>
extern volatile __bit                   INLVLE5             __at(0xFB45);	// @ (0x1F68 * 8 + 5)
#define                                 INLVLE5_bit         _BIT_ACCESS(INLVLE,5)
// INLVLE<INLVLE6>
extern volatile __bit                   INLVLE6             __at(0xFB46);	// @ (0x1F68 * 8 + 6)
#define                                 INLVLE6_bit         _BIT_ACCESS(INLVLE,6)
// INLVLE<INLVLE7>
extern volatile __bit                   INLVLE7             __at(0xFB47);	// @ (0x1F68 * 8 + 7)
#define                                 INLVLE7_bit         _BIT_ACCESS(INLVLE,7)
// INLVLF<INLVLF0>
extern volatile __bit                   INLVLF0             __at(0xF2A0);	// @ (0x1E54 * 8 + 0)
#define                                 INLVLF0_bit         _BIT_ACCESS(INLVLF,0)
// INLVLF<INLVLF1>
extern volatile __bit                   INLVLF1             __at(0xF2A1);	// @ (0x1E54 * 8 + 1)
#define                                 INLVLF1_bit         _BIT_ACCESS(INLVLF,1)
// INLVLF<INLVLF2>
extern volatile __bit                   INLVLF2             __at(0xF2A2);	// @ (0x1E54 * 8 + 2)
#define                                 INLVLF2_bit         _BIT_ACCESS(INLVLF,2)
// INLVLF<INLVLF3>
extern volatile __bit                   INLVLF3             __at(0xF2A3);	// @ (0x1E54 * 8 + 3)
#define                                 INLVLF3_bit         _BIT_ACCESS(INLVLF,3)
// INLVLF<INLVLF4>
extern volatile __bit                   INLVLF4             __at(0xF2A4);	// @ (0x1E54 * 8 + 4)
#define                                 INLVLF4_bit         _BIT_ACCESS(INLVLF,4)
// INLVLF<INLVLF5>
extern volatile __bit                   INLVLF5             __at(0xF2A5);	// @ (0x1E54 * 8 + 5)
#define                                 INLVLF5_bit         _BIT_ACCESS(INLVLF,5)
// INLVLF<INLVLF6>
extern volatile __bit                   INLVLF6             __at(0xF2A6);	// @ (0x1E54 * 8 + 6)
#define                                 INLVLF6_bit         _BIT_ACCESS(INLVLF,6)
// INLVLF<INLVLF7>
extern volatile __bit                   INLVLF7             __at(0xF2A7);	// @ (0x1E54 * 8 + 7)
#define                                 INLVLF7_bit         _BIT_ACCESS(INLVLF,7)
// INLVLG<INLVLG0>
extern volatile __bit                   INLVLG0             __at(0xF2F8);	// @ (0x1E5F * 8 + 0)
#define                                 INLVLG0_bit         _BIT_ACCESS(INLVLG,0)
// INLVLG<INLVLG1>
extern volatile __bit                   INLVLG1             __at(0xF2F9);	// @ (0x1E5F * 8 + 1)
#define                                 INLVLG1_bit         _BIT_ACCESS(INLVLG,1)
// INLVLG<INLVLG2>
extern volatile __bit                   INLVLG2             __at(0xF2FA);	// @ (0x1E5F * 8 + 2)
#define                                 INLVLG2_bit         _BIT_ACCESS(INLVLG,2)
// INLVLG<INLVLG3>
extern volatile __bit                   INLVLG3             __at(0xF2FB);	// @ (0x1E5F * 8 + 3)
#define                                 INLVLG3_bit         _BIT_ACCESS(INLVLG,3)
// INLVLG<INLVLG4>
extern volatile __bit                   INLVLG4             __at(0xF2FC);	// @ (0x1E5F * 8 + 4)
#define                                 INLVLG4_bit         _BIT_ACCESS(INLVLG,4)
// INLVLG<INLVLG5>
extern volatile __bit                   INLVLG5             __at(0xF2FD);	// @ (0x1E5F * 8 + 5)
#define                                 INLVLG5_bit         _BIT_ACCESS(INLVLG,5)
// INLVLG<INLVLG6>
extern volatile __bit                   INLVLG6             __at(0xF2FE);	// @ (0x1E5F * 8 + 6)
#define                                 INLVLG6_bit         _BIT_ACCESS(INLVLG,6)
// INLVLG<INLVLG7>
extern volatile __bit                   INLVLG7             __at(0xF2FF);	// @ (0x1E5F * 8 + 7)
#define                                 INLVLG7_bit         _BIT_ACCESS(INLVLG,7)
// INLVLH<INLVLH0>
extern volatile __bit                   INLVLH0             __at(0xF350);	// @ (0x1E6A * 8 + 0)
#define                                 INLVLH0_bit         _BIT_ACCESS(INLVLH,0)
// INLVLH<INLVLH1>
extern volatile __bit                   INLVLH1             __at(0xF351);	// @ (0x1E6A * 8 + 1)
#define                                 INLVLH1_bit         _BIT_ACCESS(INLVLH,1)
// INLVLH<INLVLH2>
extern volatile __bit                   INLVLH2             __at(0xF352);	// @ (0x1E6A * 8 + 2)
#define                                 INLVLH2_bit         _BIT_ACCESS(INLVLH,2)
// INLVLH<INLVLH3>
extern volatile __bit                   INLVLH3             __at(0xF353);	// @ (0x1E6A * 8 + 3)
#define                                 INLVLH3_bit         _BIT_ACCESS(INLVLH,3)
// PIE0<INTE>
extern volatile __bit                   INTE                __at(0x38B0);	// @ (0x716 * 8 + 0)
#define                                 INTE_bit            _BIT_ACCESS(PIE0,0)
// INTCON<INTEDG>
extern volatile __bit                   INTEDG              __at(0x58);	// @ (0xB * 8 + 0)
#define                                 INTEDG_bit          _BIT_ACCESS(INTCON,0)
// PIR0<INTF>
extern volatile __bit                   INTF                __at(0x3860);	// @ (0x70C * 8 + 0)
#define                                 INTF_bit            _BIT_ACCESS(PIR0,0)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0xF480);	// @ (0x1E90 * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0xF481);	// @ (0x1E90 * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0xF482);	// @ (0x1E90 * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0xF483);	// @ (0x1E90 * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// INTPPS<INTPPS4>
extern volatile __bit                   INTPPS4             __at(0xF484);	// @ (0x1E90 * 8 + 4)
#define                                 INTPPS4_bit         _BIT_ACCESS(INTPPS,4)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0xFA50);	// @ (0x1F4A * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0xFA51);	// @ (0x1F4A * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0xFA52);	// @ (0x1F4A * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0xFA53);	// @ (0x1F4A * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0xFA54);	// @ (0x1F4A * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0xFA55);	// @ (0x1F4A * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0xFA56);	// @ (0x1F4A * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0xFA57);	// @ (0x1F4A * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0xFA48);	// @ (0x1F49 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0xFA49);	// @ (0x1F49 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0xFA4A);	// @ (0x1F49 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0xFA4B);	// @ (0x1F49 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0xFA4C);	// @ (0x1F49 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0xFA4D);	// @ (0x1F49 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0xFA4E);	// @ (0x1F49 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0xFA4F);	// @ (0x1F49 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0xFA40);	// @ (0x1F48 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0xFA41);	// @ (0x1F48 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0xFA42);	// @ (0x1F48 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0xFA43);	// @ (0x1F48 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0xFA44);	// @ (0x1F48 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0xFA45);	// @ (0x1F48 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0xFA46);	// @ (0x1F48 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0xFA47);	// @ (0x1F48 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0xFAA8);	// @ (0x1F55 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0xFAA9);	// @ (0x1F55 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0xFAAA);	// @ (0x1F55 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0xFAAB);	// @ (0x1F55 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0xFAAC);	// @ (0x1F55 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0xFAAD);	// @ (0x1F55 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0xFAAE);	// @ (0x1F55 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0xFAAF);	// @ (0x1F55 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0xFAA0);	// @ (0x1F54 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0xFAA1);	// @ (0x1F54 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0xFAA2);	// @ (0x1F54 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0xFAA3);	// @ (0x1F54 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0xFAA4);	// @ (0x1F54 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0xFAA5);	// @ (0x1F54 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0xFAA6);	// @ (0x1F54 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0xFAA7);	// @ (0x1F54 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0xFA98);	// @ (0x1F53 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0xFA99);	// @ (0x1F53 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0xFA9A);	// @ (0x1F53 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0xFA9B);	// @ (0x1F53 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0xFA9C);	// @ (0x1F53 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0xFA9D);	// @ (0x1F53 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0xFA9E);	// @ (0x1F53 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0xFA9F);	// @ (0x1F53 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF0>
extern volatile __bit                   IOCEF0              __at(0xFB58);	// @ (0x1F6B * 8 + 0)
#define                                 IOCEF0_bit          _BIT_ACCESS(IOCEF,0)
// IOCEF<IOCEF1>
extern volatile __bit                   IOCEF1              __at(0xFB59);	// @ (0x1F6B * 8 + 1)
#define                                 IOCEF1_bit          _BIT_ACCESS(IOCEF,1)
// IOCEF<IOCEF2>
extern volatile __bit                   IOCEF2              __at(0xFB5A);	// @ (0x1F6B * 8 + 2)
#define                                 IOCEF2_bit          _BIT_ACCESS(IOCEF,2)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0xFB5B);	// @ (0x1F6B * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEF<IOCEF4>
extern volatile __bit                   IOCEF4              __at(0xFB5C);	// @ (0x1F6B * 8 + 4)
#define                                 IOCEF4_bit          _BIT_ACCESS(IOCEF,4)
// IOCEF<IOCEF5>
extern volatile __bit                   IOCEF5              __at(0xFB5D);	// @ (0x1F6B * 8 + 5)
#define                                 IOCEF5_bit          _BIT_ACCESS(IOCEF,5)
// IOCEF<IOCEF6>
extern volatile __bit                   IOCEF6              __at(0xFB5E);	// @ (0x1F6B * 8 + 6)
#define                                 IOCEF6_bit          _BIT_ACCESS(IOCEF,6)
// IOCEF<IOCEF7>
extern volatile __bit                   IOCEF7              __at(0xFB5F);	// @ (0x1F6B * 8 + 7)
#define                                 IOCEF7_bit          _BIT_ACCESS(IOCEF,7)
// IOCEN<IOCEN0>
extern volatile __bit                   IOCEN0              __at(0xFB50);	// @ (0x1F6A * 8 + 0)
#define                                 IOCEN0_bit          _BIT_ACCESS(IOCEN,0)
// IOCEN<IOCEN1>
extern volatile __bit                   IOCEN1              __at(0xFB51);	// @ (0x1F6A * 8 + 1)
#define                                 IOCEN1_bit          _BIT_ACCESS(IOCEN,1)
// IOCEN<IOCEN2>
extern volatile __bit                   IOCEN2              __at(0xFB52);	// @ (0x1F6A * 8 + 2)
#define                                 IOCEN2_bit          _BIT_ACCESS(IOCEN,2)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0xFB53);	// @ (0x1F6A * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEN<IOCEN4>
extern volatile __bit                   IOCEN4              __at(0xFB54);	// @ (0x1F6A * 8 + 4)
#define                                 IOCEN4_bit          _BIT_ACCESS(IOCEN,4)
// IOCEN<IOCEN5>
extern volatile __bit                   IOCEN5              __at(0xFB55);	// @ (0x1F6A * 8 + 5)
#define                                 IOCEN5_bit          _BIT_ACCESS(IOCEN,5)
// IOCEN<IOCEN6>
extern volatile __bit                   IOCEN6              __at(0xFB56);	// @ (0x1F6A * 8 + 6)
#define                                 IOCEN6_bit          _BIT_ACCESS(IOCEN,6)
// IOCEN<IOCEN7>
extern volatile __bit                   IOCEN7              __at(0xFB57);	// @ (0x1F6A * 8 + 7)
#define                                 IOCEN7_bit          _BIT_ACCESS(IOCEN,7)
// IOCEP<IOCEP0>
extern volatile __bit                   IOCEP0              __at(0xFB48);	// @ (0x1F69 * 8 + 0)
#define                                 IOCEP0_bit          _BIT_ACCESS(IOCEP,0)
// IOCEP<IOCEP1>
extern volatile __bit                   IOCEP1              __at(0xFB49);	// @ (0x1F69 * 8 + 1)
#define                                 IOCEP1_bit          _BIT_ACCESS(IOCEP,1)
// IOCEP<IOCEP2>
extern volatile __bit                   IOCEP2              __at(0xFB4A);	// @ (0x1F69 * 8 + 2)
#define                                 IOCEP2_bit          _BIT_ACCESS(IOCEP,2)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0xFB4B);	// @ (0x1F69 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// IOCEP<IOCEP4>
extern volatile __bit                   IOCEP4              __at(0xFB4C);	// @ (0x1F69 * 8 + 4)
#define                                 IOCEP4_bit          _BIT_ACCESS(IOCEP,4)
// IOCEP<IOCEP5>
extern volatile __bit                   IOCEP5              __at(0xFB4D);	// @ (0x1F69 * 8 + 5)
#define                                 IOCEP5_bit          _BIT_ACCESS(IOCEP,5)
// IOCEP<IOCEP6>
extern volatile __bit                   IOCEP6              __at(0xFB4E);	// @ (0x1F69 * 8 + 6)
#define                                 IOCEP6_bit          _BIT_ACCESS(IOCEP,6)
// IOCEP<IOCEP7>
extern volatile __bit                   IOCEP7              __at(0xFB4F);	// @ (0x1F69 * 8 + 7)
#define                                 IOCEP7_bit          _BIT_ACCESS(IOCEP,7)
// IOCGF<IOCGF5>
extern volatile __bit                   IOCGF5              __at(0xF315);	// @ (0x1E62 * 8 + 5)
#define                                 IOCGF5_bit          _BIT_ACCESS(IOCGF,5)
// IOCGN<IOCGN5>
extern volatile __bit                   IOCGN5              __at(0xF30D);	// @ (0x1E61 * 8 + 5)
#define                                 IOCGN5_bit          _BIT_ACCESS(IOCGN,5)
// IOCGP<IOCGP5>
extern volatile __bit                   IOCGP5              __at(0xF305);	// @ (0x1E60 * 8 + 5)
#define                                 IOCGP5_bit          _BIT_ACCESS(IOCGP,5)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x38B4);	// @ (0x716 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x3864);	// @ (0x70C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x3CB0);	// @ (0x796 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// ADCON1<IPEN>
extern volatile __bit                   IPEN                __at(0x896);	// @ (0x112 * 8 + 6)
#define                                 IPEN_bit            _BIT_ACCESS(ADCON1,6)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0xC1);	// @ (0x18 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0xC3);	// @ (0x18 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0xC6);	// @ (0x18 * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0xC7);	// @ (0x18 * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0xC8);	// @ (0x19 * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0xC9);	// @ (0x19 * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0xCA);	// @ (0x19 * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0xCB);	// @ (0x19 * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0xCC);	// @ (0x19 * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0xCD);	// @ (0x19 * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0xCE);	// @ (0x19 * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0xCF);	// @ (0x19 * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0xD0);	// @ (0x1A * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0xD1);	// @ (0x1A * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0xD2);	// @ (0x1A * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0xD3);	// @ (0x1A * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0xD4);	// @ (0x1A * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0xD5);	// @ (0x1A * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0xD6);	// @ (0x1A * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0xD7);	// @ (0x1A * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATD<LATD0>
extern volatile __bit                   LATD0               __at(0xD8);	// @ (0x1B * 8 + 0)
#define                                 LATD0_bit           _BIT_ACCESS(LATD,0)
// LATD<LATD1>
extern volatile __bit                   LATD1               __at(0xD9);	// @ (0x1B * 8 + 1)
#define                                 LATD1_bit           _BIT_ACCESS(LATD,1)
// LATD<LATD2>
extern volatile __bit                   LATD2               __at(0xDA);	// @ (0x1B * 8 + 2)
#define                                 LATD2_bit           _BIT_ACCESS(LATD,2)
// LATD<LATD3>
extern volatile __bit                   LATD3               __at(0xDB);	// @ (0x1B * 8 + 3)
#define                                 LATD3_bit           _BIT_ACCESS(LATD,3)
// LATD<LATD4>
extern volatile __bit                   LATD4               __at(0xDC);	// @ (0x1B * 8 + 4)
#define                                 LATD4_bit           _BIT_ACCESS(LATD,4)
// LATD<LATD5>
extern volatile __bit                   LATD5               __at(0xDD);	// @ (0x1B * 8 + 5)
#define                                 LATD5_bit           _BIT_ACCESS(LATD,5)
// LATD<LATD6>
extern volatile __bit                   LATD6               __at(0xDE);	// @ (0x1B * 8 + 6)
#define                                 LATD6_bit           _BIT_ACCESS(LATD,6)
// LATD<LATD7>
extern volatile __bit                   LATD7               __at(0xDF);	// @ (0x1B * 8 + 7)
#define                                 LATD7_bit           _BIT_ACCESS(LATD,7)
// LATE<LATE0>
extern volatile __bit                   LATE0               __at(0xE0);	// @ (0x1C * 8 + 0)
#define                                 LATE0_bit           _BIT_ACCESS(LATE,0)
// LATE<LATE1>
extern volatile __bit                   LATE1               __at(0xE1);	// @ (0x1C * 8 + 1)
#define                                 LATE1_bit           _BIT_ACCESS(LATE,1)
// LATE<LATE3>
extern volatile __bit                   LATE3               __at(0xE3);	// @ (0x1C * 8 + 3)
#define                                 LATE3_bit           _BIT_ACCESS(LATE,3)
// LATE<LATE4>
extern volatile __bit                   LATE4               __at(0xE4);	// @ (0x1C * 8 + 4)
#define                                 LATE4_bit           _BIT_ACCESS(LATE,4)
// LATE<LATE5>
extern volatile __bit                   LATE5               __at(0xE5);	// @ (0x1C * 8 + 5)
#define                                 LATE5_bit           _BIT_ACCESS(LATE,5)
// LATE<LATE6>
extern volatile __bit                   LATE6               __at(0xE6);	// @ (0x1C * 8 + 6)
#define                                 LATE6_bit           _BIT_ACCESS(LATE,6)
// LATE<LATE7>
extern volatile __bit                   LATE7               __at(0xE7);	// @ (0x1C * 8 + 7)
#define                                 LATE7_bit           _BIT_ACCESS(LATE,7)
// LATF<LATF0>
extern volatile __bit                   LATF0               __at(0xE8);	// @ (0x1D * 8 + 0)
#define                                 LATF0_bit           _BIT_ACCESS(LATF,0)
// LATF<LATF1>
extern volatile __bit                   LATF1               __at(0xE9);	// @ (0x1D * 8 + 1)
#define                                 LATF1_bit           _BIT_ACCESS(LATF,1)
// LATF<LATF2>
extern volatile __bit                   LATF2               __at(0xEA);	// @ (0x1D * 8 + 2)
#define                                 LATF2_bit           _BIT_ACCESS(LATF,2)
// LATF<LATF3>
extern volatile __bit                   LATF3               __at(0xEB);	// @ (0x1D * 8 + 3)
#define                                 LATF3_bit           _BIT_ACCESS(LATF,3)
// LATF<LATF4>
extern volatile __bit                   LATF4               __at(0xEC);	// @ (0x1D * 8 + 4)
#define                                 LATF4_bit           _BIT_ACCESS(LATF,4)
// LATF<LATF5>
extern volatile __bit                   LATF5               __at(0xED);	// @ (0x1D * 8 + 5)
#define                                 LATF5_bit           _BIT_ACCESS(LATF,5)
// LATF<LATF6>
extern volatile __bit                   LATF6               __at(0xEE);	// @ (0x1D * 8 + 6)
#define                                 LATF6_bit           _BIT_ACCESS(LATF,6)
// LATF<LATF7>
extern volatile __bit                   LATF7               __at(0xEF);	// @ (0x1D * 8 + 7)
#define                                 LATF7_bit           _BIT_ACCESS(LATF,7)
// LATG<LATG0>
extern volatile __bit                   LATG0               __at(0x6480);	// @ (0xC90 * 8 + 0)
#define                                 LATG0_bit           _BIT_ACCESS(LATG,0)
// LATG<LATG1>
extern volatile __bit                   LATG1               __at(0x6481);	// @ (0xC90 * 8 + 1)
#define                                 LATG1_bit           _BIT_ACCESS(LATG,1)
// LATG<LATG2>
extern volatile __bit                   LATG2               __at(0x6482);	// @ (0xC90 * 8 + 2)
#define                                 LATG2_bit           _BIT_ACCESS(LATG,2)
// LATG<LATG3>
extern volatile __bit                   LATG3               __at(0x6483);	// @ (0xC90 * 8 + 3)
#define                                 LATG3_bit           _BIT_ACCESS(LATG,3)
// LATG<LATG4>
extern volatile __bit                   LATG4               __at(0x6484);	// @ (0xC90 * 8 + 4)
#define                                 LATG4_bit           _BIT_ACCESS(LATG,4)
// LATG<LATG6>
extern volatile __bit                   LATG6               __at(0x6486);	// @ (0xC90 * 8 + 6)
#define                                 LATG6_bit           _BIT_ACCESS(LATG,6)
// LATG<LATG7>
extern volatile __bit                   LATG7               __at(0x6487);	// @ (0xC90 * 8 + 7)
#define                                 LATG7_bit           _BIT_ACCESS(LATG,7)
// LATH<LATH0>
extern volatile __bit                   LATH0               __at(0x6488);	// @ (0xC91 * 8 + 0)
#define                                 LATH0_bit           _BIT_ACCESS(LATH,0)
// LATH<LATH1>
extern volatile __bit                   LATH1               __at(0x6489);	// @ (0xC91 * 8 + 1)
#define                                 LATH1_bit           _BIT_ACCESS(LATH,1)
// LATH<LATH2>
extern volatile __bit                   LATH2               __at(0x648A);	// @ (0xC91 * 8 + 2)
#define                                 LATH2_bit           _BIT_ACCESS(LATH,2)
// LATH<LATH3>
extern volatile __bit                   LATH3               __at(0x648B);	// @ (0xC91 * 8 + 3)
#define                                 LATH3_bit           _BIT_ACCESS(LATH,3)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0xF090);	// @ (0x1E12 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0xF091);	// @ (0x1E12 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0xF092);	// @ (0x1E12 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0xF093);	// @ (0x1E12 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0xF094);	// @ (0x1E12 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0xF095);	// @ (0x1E12 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0xF098);	// @ (0x1E13 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0xF099);	// @ (0x1E13 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0xF09A);	// @ (0x1E13 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0xF09B);	// @ (0x1E13 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0xF09C);	// @ (0x1E13 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0xF09D);	// @ (0x1E13 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0xF0A0);	// @ (0x1E14 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0xF0A1);	// @ (0x1E14 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0xF0A2);	// @ (0x1E14 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0xF0A3);	// @ (0x1E14 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0xF0A4);	// @ (0x1E14 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0xF0A5);	// @ (0x1E14 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0xF0A8);	// @ (0x1E15 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0xF0A9);	// @ (0x1E15 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0xF0AA);	// @ (0x1E15 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0xF0AB);	// @ (0x1E15 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0xF0AC);	// @ (0x1E15 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0xF0AD);	// @ (0x1E15 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0xF087);	// @ (0x1E10 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0xF0B0);	// @ (0x1E16 * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0xF0B1);	// @ (0x1E16 * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0xF0B2);	// @ (0x1E16 * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0xF0B3);	// @ (0x1E16 * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0xF0B4);	// @ (0x1E16 * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0xF0B5);	// @ (0x1E16 * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0xF0B6);	// @ (0x1E16 * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0xF0B7);	// @ (0x1E16 * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0xF088);	// @ (0x1E11 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0xF0B8);	// @ (0x1E17 * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0xF0B9);	// @ (0x1E17 * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0xF0BA);	// @ (0x1E17 * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0xF0BB);	// @ (0x1E17 * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0xF0BC);	// @ (0x1E17 * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0xF0BD);	// @ (0x1E17 * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0xF0BE);	// @ (0x1E17 * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0xF0BF);	// @ (0x1E17 * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0xF089);	// @ (0x1E11 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0xF0C0);	// @ (0x1E18 * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0xF0C1);	// @ (0x1E18 * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0xF0C2);	// @ (0x1E18 * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0xF0C3);	// @ (0x1E18 * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0xF0C4);	// @ (0x1E18 * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0xF0C5);	// @ (0x1E18 * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0xF0C6);	// @ (0x1E18 * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0xF0C7);	// @ (0x1E18 * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0xF08A);	// @ (0x1E11 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0xF0C8);	// @ (0x1E19 * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0xF0C9);	// @ (0x1E19 * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0xF0CA);	// @ (0x1E19 * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0xF0CB);	// @ (0x1E19 * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0xF0CC);	// @ (0x1E19 * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0xF0CD);	// @ (0x1E19 * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0xF0CE);	// @ (0x1E19 * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0xF0CF);	// @ (0x1E19 * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0xF08B);	// @ (0x1E11 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0xF083);	// @ (0x1E10 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0xF084);	// @ (0x1E10 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0xF080);	// @ (0x1E10 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0xF081);	// @ (0x1E10 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0xF082);	// @ (0x1E10 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0xF085);	// @ (0x1E10 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0xF08F);	// @ (0x1E11 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0xF0E0);	// @ (0x1E1C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0xF0E1);	// @ (0x1E1C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0xF0E2);	// @ (0x1E1C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0xF0E3);	// @ (0x1E1C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0xF0E4);	// @ (0x1E1C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0xF0E5);	// @ (0x1E1C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0xF0E8);	// @ (0x1E1D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0xF0E9);	// @ (0x1E1D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0xF0EA);	// @ (0x1E1D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0xF0EB);	// @ (0x1E1D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0xF0EC);	// @ (0x1E1D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0xF0ED);	// @ (0x1E1D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0xF0F0);	// @ (0x1E1E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0xF0F1);	// @ (0x1E1E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0xF0F2);	// @ (0x1E1E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0xF0F3);	// @ (0x1E1E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0xF0F4);	// @ (0x1E1E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0xF0F5);	// @ (0x1E1E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0xF0F8);	// @ (0x1E1F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0xF0F9);	// @ (0x1E1F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0xF0FA);	// @ (0x1E1F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0xF0FB);	// @ (0x1E1F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0xF0FC);	// @ (0x1E1F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0xF0FD);	// @ (0x1E1F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0xF0D7);	// @ (0x1E1A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0xF100);	// @ (0x1E20 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0xF101);	// @ (0x1E20 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0xF102);	// @ (0x1E20 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0xF103);	// @ (0x1E20 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0xF104);	// @ (0x1E20 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0xF105);	// @ (0x1E20 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0xF106);	// @ (0x1E20 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0xF107);	// @ (0x1E20 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0xF0D8);	// @ (0x1E1B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0xF108);	// @ (0x1E21 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0xF109);	// @ (0x1E21 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0xF10A);	// @ (0x1E21 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0xF10B);	// @ (0x1E21 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0xF10C);	// @ (0x1E21 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0xF10D);	// @ (0x1E21 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0xF10E);	// @ (0x1E21 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0xF10F);	// @ (0x1E21 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0xF0D9);	// @ (0x1E1B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0xF110);	// @ (0x1E22 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0xF111);	// @ (0x1E22 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0xF112);	// @ (0x1E22 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0xF113);	// @ (0x1E22 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0xF114);	// @ (0x1E22 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0xF115);	// @ (0x1E22 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0xF116);	// @ (0x1E22 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0xF117);	// @ (0x1E22 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0xF0DA);	// @ (0x1E1B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0xF118);	// @ (0x1E23 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0xF119);	// @ (0x1E23 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0xF11A);	// @ (0x1E23 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0xF11B);	// @ (0x1E23 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0xF11C);	// @ (0x1E23 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0xF11D);	// @ (0x1E23 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0xF11E);	// @ (0x1E23 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0xF11F);	// @ (0x1E23 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0xF0DB);	// @ (0x1E1B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0xF0D3);	// @ (0x1E1A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0xF0D4);	// @ (0x1E1A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0xF0D0);	// @ (0x1E1A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0xF0D1);	// @ (0x1E1A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0xF0D2);	// @ (0x1E1A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0xF0D5);	// @ (0x1E1A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0xF0DF);	// @ (0x1E1B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0xF130);	// @ (0x1E26 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0xF131);	// @ (0x1E26 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0xF132);	// @ (0x1E26 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0xF133);	// @ (0x1E26 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0xF134);	// @ (0x1E26 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL0<LC3D1S5>
extern volatile __bit                   LC3D1S5             __at(0xF135);	// @ (0x1E26 * 8 + 5)
#define                                 LC3D1S5_bit         _BIT_ACCESS(CLC3SEL0,5)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0xF138);	// @ (0x1E27 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0xF139);	// @ (0x1E27 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0xF13A);	// @ (0x1E27 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0xF13B);	// @ (0x1E27 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0xF13C);	// @ (0x1E27 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL1<LC3D2S5>
extern volatile __bit                   LC3D2S5             __at(0xF13D);	// @ (0x1E27 * 8 + 5)
#define                                 LC3D2S5_bit         _BIT_ACCESS(CLC3SEL1,5)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0xF140);	// @ (0x1E28 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0xF141);	// @ (0x1E28 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0xF142);	// @ (0x1E28 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0xF143);	// @ (0x1E28 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0xF144);	// @ (0x1E28 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL2<LC3D3S5>
extern volatile __bit                   LC3D3S5             __at(0xF145);	// @ (0x1E28 * 8 + 5)
#define                                 LC3D3S5_bit         _BIT_ACCESS(CLC3SEL2,5)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0xF148);	// @ (0x1E29 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0xF149);	// @ (0x1E29 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0xF14A);	// @ (0x1E29 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0xF14B);	// @ (0x1E29 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0xF14C);	// @ (0x1E29 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3SEL3<LC3D4S5>
extern volatile __bit                   LC3D4S5             __at(0xF14D);	// @ (0x1E29 * 8 + 5)
#define                                 LC3D4S5_bit         _BIT_ACCESS(CLC3SEL3,5)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0xF127);	// @ (0x1E24 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0xF150);	// @ (0x1E2A * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0xF151);	// @ (0x1E2A * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0xF152);	// @ (0x1E2A * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0xF153);	// @ (0x1E2A * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0xF154);	// @ (0x1E2A * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0xF155);	// @ (0x1E2A * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0xF156);	// @ (0x1E2A * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0xF157);	// @ (0x1E2A * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0xF128);	// @ (0x1E25 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0xF158);	// @ (0x1E2B * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0xF159);	// @ (0x1E2B * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0xF15A);	// @ (0x1E2B * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0xF15B);	// @ (0x1E2B * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0xF15C);	// @ (0x1E2B * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0xF15D);	// @ (0x1E2B * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0xF15E);	// @ (0x1E2B * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0xF15F);	// @ (0x1E2B * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0xF129);	// @ (0x1E25 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0xF160);	// @ (0x1E2C * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0xF161);	// @ (0x1E2C * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0xF162);	// @ (0x1E2C * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0xF163);	// @ (0x1E2C * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0xF164);	// @ (0x1E2C * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0xF165);	// @ (0x1E2C * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0xF166);	// @ (0x1E2C * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0xF167);	// @ (0x1E2C * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0xF12A);	// @ (0x1E25 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0xF168);	// @ (0x1E2D * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0xF169);	// @ (0x1E2D * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0xF16A);	// @ (0x1E2D * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0xF16B);	// @ (0x1E2D * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0xF16C);	// @ (0x1E2D * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0xF16D);	// @ (0x1E2D * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0xF16E);	// @ (0x1E2D * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0xF16F);	// @ (0x1E2D * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0xF12B);	// @ (0x1E25 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0xF123);	// @ (0x1E24 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0xF124);	// @ (0x1E24 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0xF120);	// @ (0x1E24 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0xF121);	// @ (0x1E24 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0xF122);	// @ (0x1E24 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0xF125);	// @ (0x1E24 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0xF12F);	// @ (0x1E25 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// CLC4SEL0<LC4D1S0>
extern volatile __bit                   LC4D1S0             __at(0xF180);	// @ (0x1E30 * 8 + 0)
#define                                 LC4D1S0_bit         _BIT_ACCESS(CLC4SEL0,0)
// CLC4SEL0<LC4D1S1>
extern volatile __bit                   LC4D1S1             __at(0xF181);	// @ (0x1E30 * 8 + 1)
#define                                 LC4D1S1_bit         _BIT_ACCESS(CLC4SEL0,1)
// CLC4SEL0<LC4D1S2>
extern volatile __bit                   LC4D1S2             __at(0xF182);	// @ (0x1E30 * 8 + 2)
#define                                 LC4D1S2_bit         _BIT_ACCESS(CLC4SEL0,2)
// CLC4SEL0<LC4D1S3>
extern volatile __bit                   LC4D1S3             __at(0xF183);	// @ (0x1E30 * 8 + 3)
#define                                 LC4D1S3_bit         _BIT_ACCESS(CLC4SEL0,3)
// CLC4SEL0<LC4D1S4>
extern volatile __bit                   LC4D1S4             __at(0xF184);	// @ (0x1E30 * 8 + 4)
#define                                 LC4D1S4_bit         _BIT_ACCESS(CLC4SEL0,4)
// CLC4SEL0<LC4D1S5>
extern volatile __bit                   LC4D1S5             __at(0xF185);	// @ (0x1E30 * 8 + 5)
#define                                 LC4D1S5_bit         _BIT_ACCESS(CLC4SEL0,5)
// CLC4SEL1<LC4D2S0>
extern volatile __bit                   LC4D2S0             __at(0xF188);	// @ (0x1E31 * 8 + 0)
#define                                 LC4D2S0_bit         _BIT_ACCESS(CLC4SEL1,0)
// CLC4SEL1<LC4D2S1>
extern volatile __bit                   LC4D2S1             __at(0xF189);	// @ (0x1E31 * 8 + 1)
#define                                 LC4D2S1_bit         _BIT_ACCESS(CLC4SEL1,1)
// CLC4SEL1<LC4D2S2>
extern volatile __bit                   LC4D2S2             __at(0xF18A);	// @ (0x1E31 * 8 + 2)
#define                                 LC4D2S2_bit         _BIT_ACCESS(CLC4SEL1,2)
// CLC4SEL1<LC4D2S3>
extern volatile __bit                   LC4D2S3             __at(0xF18B);	// @ (0x1E31 * 8 + 3)
#define                                 LC4D2S3_bit         _BIT_ACCESS(CLC4SEL1,3)
// CLC4SEL1<LC4D2S4>
extern volatile __bit                   LC4D2S4             __at(0xF18C);	// @ (0x1E31 * 8 + 4)
#define                                 LC4D2S4_bit         _BIT_ACCESS(CLC4SEL1,4)
// CLC4SEL1<LC4D2S5>
extern volatile __bit                   LC4D2S5             __at(0xF18D);	// @ (0x1E31 * 8 + 5)
#define                                 LC4D2S5_bit         _BIT_ACCESS(CLC4SEL1,5)
// CLC4SEL2<LC4D3S0>
extern volatile __bit                   LC4D3S0             __at(0xF190);	// @ (0x1E32 * 8 + 0)
#define                                 LC4D3S0_bit         _BIT_ACCESS(CLC4SEL2,0)
// CLC4SEL2<LC4D3S1>
extern volatile __bit                   LC4D3S1             __at(0xF191);	// @ (0x1E32 * 8 + 1)
#define                                 LC4D3S1_bit         _BIT_ACCESS(CLC4SEL2,1)
// CLC4SEL2<LC4D3S2>
extern volatile __bit                   LC4D3S2             __at(0xF192);	// @ (0x1E32 * 8 + 2)
#define                                 LC4D3S2_bit         _BIT_ACCESS(CLC4SEL2,2)
// CLC4SEL2<LC4D3S3>
extern volatile __bit                   LC4D3S3             __at(0xF193);	// @ (0x1E32 * 8 + 3)
#define                                 LC4D3S3_bit         _BIT_ACCESS(CLC4SEL2,3)
// CLC4SEL2<LC4D3S4>
extern volatile __bit                   LC4D3S4             __at(0xF194);	// @ (0x1E32 * 8 + 4)
#define                                 LC4D3S4_bit         _BIT_ACCESS(CLC4SEL2,4)
// CLC4SEL2<LC4D3S5>
extern volatile __bit                   LC4D3S5             __at(0xF195);	// @ (0x1E32 * 8 + 5)
#define                                 LC4D3S5_bit         _BIT_ACCESS(CLC4SEL2,5)
// CLC4SEL3<LC4D4S0>
extern volatile __bit                   LC4D4S0             __at(0xF198);	// @ (0x1E33 * 8 + 0)
#define                                 LC4D4S0_bit         _BIT_ACCESS(CLC4SEL3,0)
// CLC4SEL3<LC4D4S1>
extern volatile __bit                   LC4D4S1             __at(0xF199);	// @ (0x1E33 * 8 + 1)
#define                                 LC4D4S1_bit         _BIT_ACCESS(CLC4SEL3,1)
// CLC4SEL3<LC4D4S2>
extern volatile __bit                   LC4D4S2             __at(0xF19A);	// @ (0x1E33 * 8 + 2)
#define                                 LC4D4S2_bit         _BIT_ACCESS(CLC4SEL3,2)
// CLC4SEL3<LC4D4S3>
extern volatile __bit                   LC4D4S3             __at(0xF19B);	// @ (0x1E33 * 8 + 3)
#define                                 LC4D4S3_bit         _BIT_ACCESS(CLC4SEL3,3)
// CLC4SEL3<LC4D4S4>
extern volatile __bit                   LC4D4S4             __at(0xF19C);	// @ (0x1E33 * 8 + 4)
#define                                 LC4D4S4_bit         _BIT_ACCESS(CLC4SEL3,4)
// CLC4SEL3<LC4D4S5>
extern volatile __bit                   LC4D4S5             __at(0xF19D);	// @ (0x1E33 * 8 + 5)
#define                                 LC4D4S5_bit         _BIT_ACCESS(CLC4SEL3,5)
// CLC4CON<LC4EN>
extern volatile __bit                   LC4EN               __at(0xF177);	// @ (0x1E2E * 8 + 7)
#define                                 LC4EN_bit           _BIT_ACCESS(CLC4CON,7)
// CLC4GLS0<LC4G1D1N>
extern volatile __bit                   LC4G1D1N            __at(0xF1A0);	// @ (0x1E34 * 8 + 0)
#define                                 LC4G1D1N_bit        _BIT_ACCESS(CLC4GLS0,0)
// CLC4GLS0<LC4G1D1T>
extern volatile __bit                   LC4G1D1T            __at(0xF1A1);	// @ (0x1E34 * 8 + 1)
#define                                 LC4G1D1T_bit        _BIT_ACCESS(CLC4GLS0,1)
// CLC4GLS0<LC4G1D2N>
extern volatile __bit                   LC4G1D2N            __at(0xF1A2);	// @ (0x1E34 * 8 + 2)
#define                                 LC4G1D2N_bit        _BIT_ACCESS(CLC4GLS0,2)
// CLC4GLS0<LC4G1D2T>
extern volatile __bit                   LC4G1D2T            __at(0xF1A3);	// @ (0x1E34 * 8 + 3)
#define                                 LC4G1D2T_bit        _BIT_ACCESS(CLC4GLS0,3)
// CLC4GLS0<LC4G1D3N>
extern volatile __bit                   LC4G1D3N            __at(0xF1A4);	// @ (0x1E34 * 8 + 4)
#define                                 LC4G1D3N_bit        _BIT_ACCESS(CLC4GLS0,4)
// CLC4GLS0<LC4G1D3T>
extern volatile __bit                   LC4G1D3T            __at(0xF1A5);	// @ (0x1E34 * 8 + 5)
#define                                 LC4G1D3T_bit        _BIT_ACCESS(CLC4GLS0,5)
// CLC4GLS0<LC4G1D4N>
extern volatile __bit                   LC4G1D4N            __at(0xF1A6);	// @ (0x1E34 * 8 + 6)
#define                                 LC4G1D4N_bit        _BIT_ACCESS(CLC4GLS0,6)
// CLC4GLS0<LC4G1D4T>
extern volatile __bit                   LC4G1D4T            __at(0xF1A7);	// @ (0x1E34 * 8 + 7)
#define                                 LC4G1D4T_bit        _BIT_ACCESS(CLC4GLS0,7)
// CLC4POL<LC4G1POL>
extern volatile __bit                   LC4G1POL            __at(0xF178);	// @ (0x1E2F * 8 + 0)
#define                                 LC4G1POL_bit        _BIT_ACCESS(CLC4POL,0)
// CLC4GLS1<LC4G2D1N>
extern volatile __bit                   LC4G2D1N            __at(0xF1A8);	// @ (0x1E35 * 8 + 0)
#define                                 LC4G2D1N_bit        _BIT_ACCESS(CLC4GLS1,0)
// CLC4GLS1<LC4G2D1T>
extern volatile __bit                   LC4G2D1T            __at(0xF1A9);	// @ (0x1E35 * 8 + 1)
#define                                 LC4G2D1T_bit        _BIT_ACCESS(CLC4GLS1,1)
// CLC4GLS1<LC4G2D2N>
extern volatile __bit                   LC4G2D2N            __at(0xF1AA);	// @ (0x1E35 * 8 + 2)
#define                                 LC4G2D2N_bit        _BIT_ACCESS(CLC4GLS1,2)
// CLC4GLS1<LC4G2D2T>
extern volatile __bit                   LC4G2D2T            __at(0xF1AB);	// @ (0x1E35 * 8 + 3)
#define                                 LC4G2D2T_bit        _BIT_ACCESS(CLC4GLS1,3)
// CLC4GLS1<LC4G2D3N>
extern volatile __bit                   LC4G2D3N            __at(0xF1AC);	// @ (0x1E35 * 8 + 4)
#define                                 LC4G2D3N_bit        _BIT_ACCESS(CLC4GLS1,4)
// CLC4GLS1<LC4G2D3T>
extern volatile __bit                   LC4G2D3T            __at(0xF1AD);	// @ (0x1E35 * 8 + 5)
#define                                 LC4G2D3T_bit        _BIT_ACCESS(CLC4GLS1,5)
// CLC4GLS1<LC4G2D4N>
extern volatile __bit                   LC4G2D4N            __at(0xF1AE);	// @ (0x1E35 * 8 + 6)
#define                                 LC4G2D4N_bit        _BIT_ACCESS(CLC4GLS1,6)
// CLC4GLS1<LC4G2D4T>
extern volatile __bit                   LC4G2D4T            __at(0xF1AF);	// @ (0x1E35 * 8 + 7)
#define                                 LC4G2D4T_bit        _BIT_ACCESS(CLC4GLS1,7)
// CLC4POL<LC4G2POL>
extern volatile __bit                   LC4G2POL            __at(0xF179);	// @ (0x1E2F * 8 + 1)
#define                                 LC4G2POL_bit        _BIT_ACCESS(CLC4POL,1)
// CLC4GLS2<LC4G3D1N>
extern volatile __bit                   LC4G3D1N            __at(0xF1B0);	// @ (0x1E36 * 8 + 0)
#define                                 LC4G3D1N_bit        _BIT_ACCESS(CLC4GLS2,0)
// CLC4GLS2<LC4G3D1T>
extern volatile __bit                   LC4G3D1T            __at(0xF1B1);	// @ (0x1E36 * 8 + 1)
#define                                 LC4G3D1T_bit        _BIT_ACCESS(CLC4GLS2,1)
// CLC4GLS2<LC4G3D2N>
extern volatile __bit                   LC4G3D2N            __at(0xF1B2);	// @ (0x1E36 * 8 + 2)
#define                                 LC4G3D2N_bit        _BIT_ACCESS(CLC4GLS2,2)
// CLC4GLS2<LC4G3D2T>
extern volatile __bit                   LC4G3D2T            __at(0xF1B3);	// @ (0x1E36 * 8 + 3)
#define                                 LC4G3D2T_bit        _BIT_ACCESS(CLC4GLS2,3)
// CLC4GLS2<LC4G3D3N>
extern volatile __bit                   LC4G3D3N            __at(0xF1B4);	// @ (0x1E36 * 8 + 4)
#define                                 LC4G3D3N_bit        _BIT_ACCESS(CLC4GLS2,4)
// CLC4GLS2<LC4G3D3T>
extern volatile __bit                   LC4G3D3T            __at(0xF1B5);	// @ (0x1E36 * 8 + 5)
#define                                 LC4G3D3T_bit        _BIT_ACCESS(CLC4GLS2,5)
// CLC4GLS2<LC4G3D4N>
extern volatile __bit                   LC4G3D4N            __at(0xF1B6);	// @ (0x1E36 * 8 + 6)
#define                                 LC4G3D4N_bit        _BIT_ACCESS(CLC4GLS2,6)
// CLC4GLS2<LC4G3D4T>
extern volatile __bit                   LC4G3D4T            __at(0xF1B7);	// @ (0x1E36 * 8 + 7)
#define                                 LC4G3D4T_bit        _BIT_ACCESS(CLC4GLS2,7)
// CLC4POL<LC4G3POL>
extern volatile __bit                   LC4G3POL            __at(0xF17A);	// @ (0x1E2F * 8 + 2)
#define                                 LC4G3POL_bit        _BIT_ACCESS(CLC4POL,2)
// CLC4GLS3<LC4G4D1N>
extern volatile __bit                   LC4G4D1N            __at(0xF1B8);	// @ (0x1E37 * 8 + 0)
#define                                 LC4G4D1N_bit        _BIT_ACCESS(CLC4GLS3,0)
// CLC4GLS3<LC4G4D1T>
extern volatile __bit                   LC4G4D1T            __at(0xF1B9);	// @ (0x1E37 * 8 + 1)
#define                                 LC4G4D1T_bit        _BIT_ACCESS(CLC4GLS3,1)
// CLC4GLS3<LC4G4D2N>
extern volatile __bit                   LC4G4D2N            __at(0xF1BA);	// @ (0x1E37 * 8 + 2)
#define                                 LC4G4D2N_bit        _BIT_ACCESS(CLC4GLS3,2)
// CLC4GLS3<LC4G4D2T>
extern volatile __bit                   LC4G4D2T            __at(0xF1BB);	// @ (0x1E37 * 8 + 3)
#define                                 LC4G4D2T_bit        _BIT_ACCESS(CLC4GLS3,3)
// CLC4GLS3<LC4G4D3N>
extern volatile __bit                   LC4G4D3N            __at(0xF1BC);	// @ (0x1E37 * 8 + 4)
#define                                 LC4G4D3N_bit        _BIT_ACCESS(CLC4GLS3,4)
// CLC4GLS3<LC4G4D3T>
extern volatile __bit                   LC4G4D3T            __at(0xF1BD);	// @ (0x1E37 * 8 + 5)
#define                                 LC4G4D3T_bit        _BIT_ACCESS(CLC4GLS3,5)
// CLC4GLS3<LC4G4D4N>
extern volatile __bit                   LC4G4D4N            __at(0xF1BE);	// @ (0x1E37 * 8 + 6)
#define                                 LC4G4D4N_bit        _BIT_ACCESS(CLC4GLS3,6)
// CLC4GLS3<LC4G4D4T>
extern volatile __bit                   LC4G4D4T            __at(0xF1BF);	// @ (0x1E37 * 8 + 7)
#define                                 LC4G4D4T_bit        _BIT_ACCESS(CLC4GLS3,7)
// CLC4POL<LC4G4POL>
extern volatile __bit                   LC4G4POL            __at(0xF17B);	// @ (0x1E2F * 8 + 3)
#define                                 LC4G4POL_bit        _BIT_ACCESS(CLC4POL,3)
// CLC4CON<LC4INTN>
extern volatile __bit                   LC4INTN             __at(0xF173);	// @ (0x1E2E * 8 + 3)
#define                                 LC4INTN_bit         _BIT_ACCESS(CLC4CON,3)
// CLC4CON<LC4INTP>
extern volatile __bit                   LC4INTP             __at(0xF174);	// @ (0x1E2E * 8 + 4)
#define                                 LC4INTP_bit         _BIT_ACCESS(CLC4CON,4)
// CLC4CON<LC4MODE0>
extern volatile __bit                   LC4MODE0            __at(0xF170);	// @ (0x1E2E * 8 + 0)
#define                                 LC4MODE0_bit        _BIT_ACCESS(CLC4CON,0)
// CLC4CON<LC4MODE1>
extern volatile __bit                   LC4MODE1            __at(0xF171);	// @ (0x1E2E * 8 + 1)
#define                                 LC4MODE1_bit        _BIT_ACCESS(CLC4CON,1)
// CLC4CON<LC4MODE2>
extern volatile __bit                   LC4MODE2            __at(0xF172);	// @ (0x1E2E * 8 + 2)
#define                                 LC4MODE2_bit        _BIT_ACCESS(CLC4CON,2)
// CLC4CON<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0xF175);	// @ (0x1E2E * 8 + 5)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLC4CON,5)
// CLC4POL<LC4POL>
extern volatile __bit                   LC4POL              __at(0xF17F);	// @ (0x1E2F * 8 + 7)
#define                                 LC4POL_bit          _BIT_ACCESS(CLC4POL,7)
// LCDPS<LCDA>
extern volatile __bit                   LCDA                __at(0xE86D);	// @ (0x1D0D * 8 + 5)
#define                                 LCDA_bit            _BIT_ACCESS(LCDPS,5)
// LCDREF<LCDCST0>
extern volatile __bit                   LCDCST0             __at(0xE8B0);	// @ (0x1D16 * 8 + 0)
#define                                 LCDCST0_bit         _BIT_ACCESS(LCDREF,0)
// LCDREF<LCDCST1>
extern volatile __bit                   LCDCST1             __at(0xE8B1);	// @ (0x1D16 * 8 + 1)
#define                                 LCDCST1_bit         _BIT_ACCESS(LCDREF,1)
// LCDREF<LCDCST2>
extern volatile __bit                   LCDCST2             __at(0xE8B2);	// @ (0x1D16 * 8 + 2)
#define                                 LCDCST2_bit         _BIT_ACCESS(LCDREF,2)
// LCDCON<LCDEN>
extern volatile __bit                   LCDEN               __at(0xE867);	// @ (0x1D0C * 8 + 7)
#define                                 LCDEN_bit           _BIT_ACCESS(LCDCON,7)
// PIE8<LCDIE>
extern volatile __bit                   LCDIE               __at(0x38F7);	// @ (0x71E * 8 + 7)
#define                                 LCDIE_bit           _BIT_ACCESS(PIE8,7)
// PIR8<LCDIF>
extern volatile __bit                   LCDIF               __at(0x38A7);	// @ (0x714 * 8 + 7)
#define                                 LCDIF_bit           _BIT_ACCESS(PIR8,7)
// LCDRL<LCDIRI>
extern volatile __bit                   LCDIRI              __at(0xE8BB);	// @ (0x1D17 * 8 + 3)
#define                                 LCDIRI_bit          _BIT_ACCESS(LCDRL,3)
// PMD5<LCDMD>
extern volatile __bit                   LCDMD               __at(0x3CDD);	// @ (0x79B * 8 + 5)
#define                                 LCDMD_bit           _BIT_ACCESS(PMD5,5)
// LCDVCON2<LCDVSRC0>
extern volatile __bit                   LCDVSRC0            __at(0xE8A8);	// @ (0x1D15 * 8 + 0)
#define                                 LCDVSRC0_bit        _BIT_ACCESS(LCDVCON2,0)
// LCDVCON2<LCDVSRC1>
extern volatile __bit                   LCDVSRC1            __at(0xE8A9);	// @ (0x1D15 * 8 + 1)
#define                                 LCDVSRC1_bit        _BIT_ACCESS(LCDVCON2,1)
// LCDVCON2<LCDVSRC2>
extern volatile __bit                   LCDVSRC2            __at(0xE8AA);	// @ (0x1D15 * 8 + 2)
#define                                 LCDVSRC2_bit        _BIT_ACCESS(LCDVCON2,2)
// LCDVCON2<LCDVSRC3>
extern volatile __bit                   LCDVSRC3            __at(0xE8AB);	// @ (0x1D15 * 8 + 3)
#define                                 LCDVSRC3_bit        _BIT_ACCESS(LCDVCON2,3)
// CWG1CON0<LD>
extern volatile __bit                   LD                  __at(0x3086);	// @ (0x610 * 8 + 6)
#define                                 LD_bit              _BIT_ACCESS(CWG1CON0,6)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x448C);	// @ (0x891 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x4484);	// @ (0x890 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// LCDCON<LMUX0>
extern volatile __bit                   LMUX0               __at(0xE860);	// @ (0x1D0C * 8 + 0)
#define                                 LMUX0_bit           _BIT_ACCESS(LCDCON,0)
// LCDCON<LMUX1>
extern volatile __bit                   LMUX1               __at(0xE861);	// @ (0x1D0C * 8 + 1)
#define                                 LMUX1_bit           _BIT_ACCESS(LCDCON,1)
// LCDCON<LMUX2>
extern volatile __bit                   LMUX2               __at(0xE862);	// @ (0x1D0C * 8 + 2)
#define                                 LMUX2_bit           _BIT_ACCESS(LCDCON,2)
// LCDCON<LMUX3>
extern volatile __bit                   LMUX3               __at(0xE863);	// @ (0x1D0C * 8 + 3)
#define                                 LMUX3_bit           _BIT_ACCESS(LCDCON,3)
// LCDPS<LP0>
extern volatile __bit                   LP0                 __at(0xE868);	// @ (0x1D0D * 8 + 0)
#define                                 LP0_bit             _BIT_ACCESS(LCDPS,0)
// LCDPS<LP1>
extern volatile __bit                   LP1                 __at(0xE869);	// @ (0x1D0D * 8 + 1)
#define                                 LP1_bit             _BIT_ACCESS(LCDPS,1)
// LCDPS<LP2>
extern volatile __bit                   LP2                 __at(0xE86A);	// @ (0x1D0D * 8 + 2)
#define                                 LP2_bit             _BIT_ACCESS(LCDPS,2)
// LCDPS<LP3>
extern volatile __bit                   LP3                 __at(0xE86B);	// @ (0x1D0D * 8 + 3)
#define                                 LP3_bit             _BIT_ACCESS(LCDPS,3)
// LCDVCON1<LPEN>
extern volatile __bit                   LPEN                __at(0xE8A7);	// @ (0x1D14 * 8 + 7)
#define                                 LPEN_bit            _BIT_ACCESS(LCDVCON1,7)
// LCDRL<LRLAP0>
extern volatile __bit                   LRLAP0              __at(0xE8BE);	// @ (0x1D17 * 8 + 6)
#define                                 LRLAP0_bit          _BIT_ACCESS(LCDRL,6)
// LCDRL<LRLAP1>
extern volatile __bit                   LRLAP1              __at(0xE8BF);	// @ (0x1D17 * 8 + 7)
#define                                 LRLAP1_bit          _BIT_ACCESS(LCDRL,7)
// LCDRL<LRLAT0>
extern volatile __bit                   LRLAT0              __at(0xE8B8);	// @ (0x1D17 * 8 + 0)
#define                                 LRLAT0_bit          _BIT_ACCESS(LCDRL,0)
// LCDRL<LRLAT1>
extern volatile __bit                   LRLAT1              __at(0xE8B9);	// @ (0x1D17 * 8 + 1)
#define                                 LRLAT1_bit          _BIT_ACCESS(LCDRL,1)
// LCDRL<LRLAT2>
extern volatile __bit                   LRLAT2              __at(0xE8BA);	// @ (0x1D17 * 8 + 2)
#define                                 LRLAT2_bit          _BIT_ACCESS(LCDRL,2)
// LCDRL<LRLBP0>
extern volatile __bit                   LRLBP0              __at(0xE8BC);	// @ (0x1D17 * 8 + 4)
#define                                 LRLBP0_bit          _BIT_ACCESS(LCDRL,4)
// LCDRL<LRLBP1>
extern volatile __bit                   LRLBP1              __at(0xE8BD);	// @ (0x1D17 * 8 + 5)
#define                                 LRLBP1_bit          _BIT_ACCESS(LCDRL,5)
// CWG1AS0<LSAC0>
extern volatile __bit                   LSAC0               __at(0x3092);	// @ (0x612 * 8 + 2)
#define                                 LSAC0_bit           _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<LSAC1>
extern volatile __bit                   LSAC1               __at(0x3093);	// @ (0x612 * 8 + 3)
#define                                 LSAC1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSBD0>
extern volatile __bit                   LSBD0               __at(0x3094);	// @ (0x612 * 8 + 4)
#define                                 LSBD0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSBD1>
extern volatile __bit                   LSBD1               __at(0x3095);	// @ (0x612 * 8 + 5)
#define                                 LSBD1_bit           _BIT_ACCESS(CWG1AS0,5)
// ADLTHL<LTH0>
extern volatile __bit                   LTH0                __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 LTH0_bit            _BIT_ACCESS(ADLTHL,0)
// ADLTHL<LTH1>
extern volatile __bit                   LTH1                __at(0x461);	// @ (0x8C * 8 + 1)
#define                                 LTH1_bit            _BIT_ACCESS(ADLTHL,1)
// ADLTHH<LTH10>
extern volatile __bit                   LTH10               __at(0x46A);	// @ (0x8D * 8 + 2)
#define                                 LTH10_bit           _BIT_ACCESS(ADLTHH,2)
// ADLTHH<LTH11>
extern volatile __bit                   LTH11               __at(0x46B);	// @ (0x8D * 8 + 3)
#define                                 LTH11_bit           _BIT_ACCESS(ADLTHH,3)
// ADLTHH<LTH12>
extern volatile __bit                   LTH12               __at(0x46C);	// @ (0x8D * 8 + 4)
#define                                 LTH12_bit           _BIT_ACCESS(ADLTHH,4)
// ADLTHH<LTH13>
extern volatile __bit                   LTH13               __at(0x46D);	// @ (0x8D * 8 + 5)
#define                                 LTH13_bit           _BIT_ACCESS(ADLTHH,5)
// ADLTHH<LTH14>
extern volatile __bit                   LTH14               __at(0x46E);	// @ (0x8D * 8 + 6)
#define                                 LTH14_bit           _BIT_ACCESS(ADLTHH,6)
// ADLTHH<LTH15>
extern volatile __bit                   LTH15               __at(0x46F);	// @ (0x8D * 8 + 7)
#define                                 LTH15_bit           _BIT_ACCESS(ADLTHH,7)
// ADLTHL<LTH2>
extern volatile __bit                   LTH2                __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 LTH2_bit            _BIT_ACCESS(ADLTHL,2)
// ADLTHL<LTH3>
extern volatile __bit                   LTH3                __at(0x463);	// @ (0x8C * 8 + 3)
#define                                 LTH3_bit            _BIT_ACCESS(ADLTHL,3)
// ADLTHL<LTH4>
extern volatile __bit                   LTH4                __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 LTH4_bit            _BIT_ACCESS(ADLTHL,4)
// ADLTHL<LTH5>
extern volatile __bit                   LTH5                __at(0x465);	// @ (0x8C * 8 + 5)
#define                                 LTH5_bit            _BIT_ACCESS(ADLTHL,5)
// ADLTHL<LTH6>
extern volatile __bit                   LTH6                __at(0x466);	// @ (0x8C * 8 + 6)
#define                                 LTH6_bit            _BIT_ACCESS(ADLTHL,6)
// ADLTHL<LTH7>
extern volatile __bit                   LTH7                __at(0x467);	// @ (0x8C * 8 + 7)
#define                                 LTH7_bit            _BIT_ACCESS(ADLTHL,7)
// ADLTHH<LTH8>
extern volatile __bit                   LTH8                __at(0x468);	// @ (0x8D * 8 + 0)
#define                                 LTH8_bit            _BIT_ACCESS(ADLTHH,0)
// ADLTHH<LTH9>
extern volatile __bit                   LTH9                __at(0x469);	// @ (0x8D * 8 + 1)
#define                                 LTH9_bit            _BIT_ACCESS(ADLTHH,1)
// ADSTAT<LTHR>
extern volatile __bit                   LTHR                __at(0x8AD);	// @ (0x115 * 8 + 5)
#define                                 LTHR_bit            _BIT_ACCESS(ADSTAT,5)
// NVMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0x40F5);	// @ (0x81E * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(NVMCON1,5)
// ADSTAT<MATH>
extern volatile __bit                   MATH                __at(0x8AC);	// @ (0x115 * 8 + 4)
#define                                 MATH_bit            _BIT_ACCESS(ADSTAT,4)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x4C78);	// @ (0x98F * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x4C79);	// @ (0x98F * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// ADCON2<MD0>
extern volatile __bit                   MD0                 __at(0x898);	// @ (0x113 * 8 + 0)
#define                                 MD0_bit             _BIT_ACCESS(ADCON2,0)
// ADCON2<MD1>
extern volatile __bit                   MD1                 __at(0x899);	// @ (0x113 * 8 + 1)
#define                                 MD1_bit             _BIT_ACCESS(ADCON2,1)
// ADCON2<MD2>
extern volatile __bit                   MD2                 __at(0x89A);	// @ (0x113 * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(ADCON2,2)
// PCON1<MEMV>
extern volatile __bit                   MEMV                __at(0x40A1);	// @ (0x814 * 8 + 1)
#define                                 MEMV_bit            _BIT_ACCESS(PCON1,1)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x448D);	// @ (0x891 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x4485);	// @ (0x890 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// MINUTES<MINH0>
extern volatile __bit                   MINH0               __at(0x60AC);	// @ (0xC15 * 8 + 4)
#define                                 MINH0_bit           _BIT_ACCESS(MINUTES,4)
// MINUTES<MINH1>
extern volatile __bit                   MINH1               __at(0x60AD);	// @ (0xC15 * 8 + 5)
#define                                 MINH1_bit           _BIT_ACCESS(MINUTES,5)
// MINUTES<MINH2>
extern volatile __bit                   MINH2               __at(0x60AE);	// @ (0xC15 * 8 + 6)
#define                                 MINH2_bit           _BIT_ACCESS(MINUTES,6)
// MINUTES<MINL0>
extern volatile __bit                   MINL0               __at(0x60A8);	// @ (0xC15 * 8 + 0)
#define                                 MINL0_bit           _BIT_ACCESS(MINUTES,0)
// MINUTES<MINL1>
extern volatile __bit                   MINL1               __at(0x60A9);	// @ (0xC15 * 8 + 1)
#define                                 MINL1_bit           _BIT_ACCESS(MINUTES,1)
// MINUTES<MINL2>
extern volatile __bit                   MINL2               __at(0x60AA);	// @ (0xC15 * 8 + 2)
#define                                 MINL2_bit           _BIT_ACCESS(MINUTES,2)
// MINUTES<MINL3>
extern volatile __bit                   MINL3               __at(0x60AB);	// @ (0xC15 * 8 + 3)
#define                                 MINL3_bit           _BIT_ACCESS(MINUTES,3)
// CLCDATA<MLC1OUT>
extern volatile __bit                   MLC1OUT             __at(0xF078);	// @ (0x1E0F * 8 + 0)
#define                                 MLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// CLCDATA<MLC2OUT>
extern volatile __bit                   MLC2OUT             __at(0xF079);	// @ (0x1E0F * 8 + 1)
#define                                 MLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// CLCDATA<MLC3OUT>
extern volatile __bit                   MLC3OUT             __at(0xF07A);	// @ (0x1E0F * 8 + 2)
#define                                 MLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// CLCDATA<MLC4OUT>
extern volatile __bit                   MLC4OUT             __at(0xF07B);	// @ (0x1E0F * 8 + 3)
#define                                 MLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// MONTH<MONTHH>
extern volatile __bit                   MONTHH              __at(0x608C);	// @ (0xC11 * 8 + 4)
#define                                 MONTHH_bit          _BIT_ACCESS(MONTH,4)
// MONTH<MONTHL0>
extern volatile __bit                   MONTHL0             __at(0x6088);	// @ (0xC11 * 8 + 0)
#define                                 MONTHL0_bit         _BIT_ACCESS(MONTH,0)
// MONTH<MONTHL1>
extern volatile __bit                   MONTHL1             __at(0x6089);	// @ (0xC11 * 8 + 1)
#define                                 MONTHL1_bit         _BIT_ACCESS(MONTH,1)
// MONTH<MONTHL2>
extern volatile __bit                   MONTHL2             __at(0x608A);	// @ (0xC11 * 8 + 2)
#define                                 MONTHL2_bit         _BIT_ACCESS(MONTH,2)
// MONTH<MONTHL3>
extern volatile __bit                   MONTHL3             __at(0x608B);	// @ (0xC11 * 8 + 3)
#define                                 MONTHL3_bit         _BIT_ACCESS(MONTH,3)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0xC6B);	// @ (0x18D * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0xC6C);	// @ (0x18D * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0xC6D);	// @ (0x18D * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0xC6E);	// @ (0x18D * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0xC6F);	// @ (0x18D * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// PMD4<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x3CD4);	// @ (0x79A * 8 + 4)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD4,4)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x4468);	// @ (0x88D * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x4469);	// @ (0x88D * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x446A);	// @ (0x88D * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x446B);	// @ (0x88D * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x446C);	// @ (0x88D * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x446D);	// @ (0x88D * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x446E);	// @ (0x88D * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x447B);	// @ (0x88F * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x40D0);	// @ (0x81A * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x40D1);	// @ (0x81A * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0x40DA);	// @ (0x81B * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0x40DB);	// @ (0x81B * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0x40DC);	// @ (0x81B * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0x40DD);	// @ (0x81B * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0x40DE);	// @ (0x81B * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x40D2);	// @ (0x81A * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x40D3);	// @ (0x81A * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x40D4);	// @ (0x81A * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x40D5);	// @ (0x81A * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x40D6);	// @ (0x81A * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x40D7);	// @ (0x81A * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x40D8);	// @ (0x81B * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x40D9);	// @ (0x81B * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x40E0);	// @ (0x81C * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x40E1);	// @ (0x81C * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0x40EA);	// @ (0x81D * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0x40EB);	// @ (0x81D * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0x40EC);	// @ (0x81D * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0x40ED);	// @ (0x81D * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x40E2);	// @ (0x81C * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x40E3);	// @ (0x81C * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x40E4);	// @ (0x81C * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x40E5);	// @ (0x81C * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x40E6);	// @ (0x81C * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x40E7);	// @ (0x81C * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0x40E8);	// @ (0x81D * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0x40E9);	// @ (0x81D * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// PIE7<NVMIE>
extern volatile __bit                   NVMIE               __at(0x38ED);	// @ (0x71D * 8 + 5)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE7,5)
// PIR7<NVMIF>
extern volatile __bit                   NVMIF               __at(0x389D);	// @ (0x713 * 8 + 5)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR7,5)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x3CB2);	// @ (0x796 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREGS>
extern volatile __bit                   NVMREGS             __at(0x40F6);	// @ (0x81E * 8 + 6)
#define                                 NVMREGS_bit         _BIT_ACCESS(NVMCON1,6)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0xF9D0);	// @ (0x1F3A * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0xF9D1);	// @ (0x1F3A * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0xF9D2);	// @ (0x1F3A * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0xF9D3);	// @ (0x1F3A * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0xF9D4);	// @ (0x1F3A * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0xF9D6);	// @ (0x1F3A * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0xF9D7);	// @ (0x1F3A * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0xFA28);	// @ (0x1F45 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0xFA29);	// @ (0x1F45 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0xFA2A);	// @ (0x1F45 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0xFA2B);	// @ (0x1F45 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0xFA2C);	// @ (0x1F45 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0xFA2D);	// @ (0x1F45 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0xFA2E);	// @ (0x1F45 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0xFA2F);	// @ (0x1F45 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0xFA80);	// @ (0x1F50 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0xFA81);	// @ (0x1F50 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0xFA82);	// @ (0x1F50 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0xFA83);	// @ (0x1F50 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0xFA84);	// @ (0x1F50 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0xFA85);	// @ (0x1F50 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0xFA86);	// @ (0x1F50 * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0xFA87);	// @ (0x1F50 * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// ODCOND<ODCD0>
extern volatile __bit                   ODCD0               __at(0xFAD8);	// @ (0x1F5B * 8 + 0)
#define                                 ODCD0_bit           _BIT_ACCESS(ODCOND,0)
// ODCOND<ODCD1>
extern volatile __bit                   ODCD1               __at(0xFAD9);	// @ (0x1F5B * 8 + 1)
#define                                 ODCD1_bit           _BIT_ACCESS(ODCOND,1)
// ODCOND<ODCD2>
extern volatile __bit                   ODCD2               __at(0xFADA);	// @ (0x1F5B * 8 + 2)
#define                                 ODCD2_bit           _BIT_ACCESS(ODCOND,2)
// ODCOND<ODCD3>
extern volatile __bit                   ODCD3               __at(0xFADB);	// @ (0x1F5B * 8 + 3)
#define                                 ODCD3_bit           _BIT_ACCESS(ODCOND,3)
// ODCOND<ODCD4>
extern volatile __bit                   ODCD4               __at(0xFADC);	// @ (0x1F5B * 8 + 4)
#define                                 ODCD4_bit           _BIT_ACCESS(ODCOND,4)
// ODCOND<ODCD5>
extern volatile __bit                   ODCD5               __at(0xFADD);	// @ (0x1F5B * 8 + 5)
#define                                 ODCD5_bit           _BIT_ACCESS(ODCOND,5)
// ODCOND<ODCD6>
extern volatile __bit                   ODCD6               __at(0xFADE);	// @ (0x1F5B * 8 + 6)
#define                                 ODCD6_bit           _BIT_ACCESS(ODCOND,6)
// ODCOND<ODCD7>
extern volatile __bit                   ODCD7               __at(0xFADF);	// @ (0x1F5B * 8 + 7)
#define                                 ODCD7_bit           _BIT_ACCESS(ODCOND,7)
// ODCONE<ODCE0>
extern volatile __bit                   ODCE0               __at(0xFB30);	// @ (0x1F66 * 8 + 0)
#define                                 ODCE0_bit           _BIT_ACCESS(ODCONE,0)
// ODCONE<ODCE1>
extern volatile __bit                   ODCE1               __at(0xFB31);	// @ (0x1F66 * 8 + 1)
#define                                 ODCE1_bit           _BIT_ACCESS(ODCONE,1)
// ODCONE<ODCE3>
extern volatile __bit                   ODCE3               __at(0xFB33);	// @ (0x1F66 * 8 + 3)
#define                                 ODCE3_bit           _BIT_ACCESS(ODCONE,3)
// ODCONE<ODCE4>
extern volatile __bit                   ODCE4               __at(0xFB34);	// @ (0x1F66 * 8 + 4)
#define                                 ODCE4_bit           _BIT_ACCESS(ODCONE,4)
// ODCONE<ODCE5>
extern volatile __bit                   ODCE5               __at(0xFB35);	// @ (0x1F66 * 8 + 5)
#define                                 ODCE5_bit           _BIT_ACCESS(ODCONE,5)
// ODCONE<ODCE6>
extern volatile __bit                   ODCE6               __at(0xFB36);	// @ (0x1F66 * 8 + 6)
#define                                 ODCE6_bit           _BIT_ACCESS(ODCONE,6)
// ODCONE<ODCE7>
extern volatile __bit                   ODCE7               __at(0xFB37);	// @ (0x1F66 * 8 + 7)
#define                                 ODCE7_bit           _BIT_ACCESS(ODCONE,7)
// ODCONF<ODCF0>
extern volatile __bit                   ODCF0               __at(0xF290);	// @ (0x1E52 * 8 + 0)
#define                                 ODCF0_bit           _BIT_ACCESS(ODCONF,0)
// ODCONF<ODCF1>
extern volatile __bit                   ODCF1               __at(0xF291);	// @ (0x1E52 * 8 + 1)
#define                                 ODCF1_bit           _BIT_ACCESS(ODCONF,1)
// ODCONF<ODCF2>
extern volatile __bit                   ODCF2               __at(0xF292);	// @ (0x1E52 * 8 + 2)
#define                                 ODCF2_bit           _BIT_ACCESS(ODCONF,2)
// ODCONF<ODCF3>
extern volatile __bit                   ODCF3               __at(0xF293);	// @ (0x1E52 * 8 + 3)
#define                                 ODCF3_bit           _BIT_ACCESS(ODCONF,3)
// ODCONF<ODCF4>
extern volatile __bit                   ODCF4               __at(0xF294);	// @ (0x1E52 * 8 + 4)
#define                                 ODCF4_bit           _BIT_ACCESS(ODCONF,4)
// ODCONF<ODCF5>
extern volatile __bit                   ODCF5               __at(0xF295);	// @ (0x1E52 * 8 + 5)
#define                                 ODCF5_bit           _BIT_ACCESS(ODCONF,5)
// ODCONF<ODCF6>
extern volatile __bit                   ODCF6               __at(0xF296);	// @ (0x1E52 * 8 + 6)
#define                                 ODCF6_bit           _BIT_ACCESS(ODCONF,6)
// ODCONF<ODCF7>
extern volatile __bit                   ODCF7               __at(0xF297);	// @ (0x1E52 * 8 + 7)
#define                                 ODCF7_bit           _BIT_ACCESS(ODCONF,7)
// ODCONG<ODCG0>
extern volatile __bit                   ODCG0               __at(0xF2E8);	// @ (0x1E5D * 8 + 0)
#define                                 ODCG0_bit           _BIT_ACCESS(ODCONG,0)
// ODCONG<ODCG1>
extern volatile __bit                   ODCG1               __at(0xF2E9);	// @ (0x1E5D * 8 + 1)
#define                                 ODCG1_bit           _BIT_ACCESS(ODCONG,1)
// ODCONG<ODCG2>
extern volatile __bit                   ODCG2               __at(0xF2EA);	// @ (0x1E5D * 8 + 2)
#define                                 ODCG2_bit           _BIT_ACCESS(ODCONG,2)
// ODCONG<ODCG3>
extern volatile __bit                   ODCG3               __at(0xF2EB);	// @ (0x1E5D * 8 + 3)
#define                                 ODCG3_bit           _BIT_ACCESS(ODCONG,3)
// ODCONG<ODCG4>
extern volatile __bit                   ODCG4               __at(0xF2EC);	// @ (0x1E5D * 8 + 4)
#define                                 ODCG4_bit           _BIT_ACCESS(ODCONG,4)
// ODCONG<ODCG6>
extern volatile __bit                   ODCG6               __at(0xF2EE);	// @ (0x1E5D * 8 + 6)
#define                                 ODCG6_bit           _BIT_ACCESS(ODCONG,6)
// ODCONG<ODCG7>
extern volatile __bit                   ODCG7               __at(0xF2EF);	// @ (0x1E5D * 8 + 7)
#define                                 ODCG7_bit           _BIT_ACCESS(ODCONG,7)
// ODCONH<ODCH0>
extern volatile __bit                   ODCH0               __at(0xF340);	// @ (0x1E68 * 8 + 0)
#define                                 ODCH0_bit           _BIT_ACCESS(ODCONH,0)
// ODCONH<ODCH1>
extern volatile __bit                   ODCH1               __at(0xF341);	// @ (0x1E68 * 8 + 1)
#define                                 ODCH1_bit           _BIT_ACCESS(ODCONH,1)
// ODCONH<ODCH2>
extern volatile __bit                   ODCH2               __at(0xF342);	// @ (0x1E68 * 8 + 2)
#define                                 ODCH2_bit           _BIT_ACCESS(ODCONH,2)
// ODCONH<ODCH3>
extern volatile __bit                   ODCH3               __at(0xF343);	// @ (0x1E68 * 8 + 3)
#define                                 ODCH3_bit           _BIT_ACCESS(ODCONH,3)
// DAC1CON0<OE1>
extern volatile __bit                   OE1                 __at(0x4875);	// @ (0x90E * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<OE2>
extern volatile __bit                   OE2                 __at(0x4874);	// @ (0x90E * 8 + 4)
#define                                 OE2_bit             _BIT_ACCESS(DAC1CON0,4)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x447C);	// @ (0x88F * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE1<OSFIE>
extern volatile __bit                   OSFIE               __at(0x38BF);	// @ (0x717 * 8 + 7)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<OSFIF>
extern volatile __bit                   OSFIF               __at(0x386F);	// @ (0x70D * 8 + 7)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR1,7)
// ADSTAT<OV>
extern volatile __bit                   OV                  __at(0x8AF);	// @ (0x115 * 8 + 7)
#define                                 OV_bit              _BIT_ACCESS(ADSTAT,7)
// CWG1STR<OVRA>
extern volatile __bit                   OVRA                __at(0x30A4);	// @ (0x614 * 8 + 4)
#define                                 OVRA_bit            _BIT_ACCESS(CWG1STR,4)
// CWG1STR<OVRB>
extern volatile __bit                   OVRB                __at(0x30A5);	// @ (0x614 * 8 + 5)
#define                                 OVRB_bit            _BIT_ACCESS(CWG1STR,5)
// CWG1STR<OVRC>
extern volatile __bit                   OVRC                __at(0x30A6);	// @ (0x614 * 8 + 6)
#define                                 OVRC_bit            _BIT_ACCESS(CWG1STR,6)
// CWG1STR<OVRD>
extern volatile __bit                   OVRD                __at(0x30A7);	// @ (0x614 * 8 + 7)
#define                                 OVRD_bit            _BIT_ACCESS(CWG1STR,7)
// SSP1STAT<P2>
extern volatile __bit                   P2                  __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 P2_bit              _BIT_ACCESS(SSP1STAT,4)
// CCPTMRS0<P3TSEL0>
extern volatile __bit                   P3TSEL0             __at(0x10F4);	// @ (0x21E * 8 + 4)
#define                                 P3TSEL0_bit         _BIT_ACCESS(CCPTMRS0,4)
// CCPTMRS0<P3TSEL1>
extern volatile __bit                   P3TSEL1             __at(0x10F5);	// @ (0x21E * 8 + 5)
#define                                 P3TSEL1_bit         _BIT_ACCESS(CCPTMRS0,5)
// CCPTMRS0<P4TSEL0>
extern volatile __bit                   P4TSEL0             __at(0x10F6);	// @ (0x21E * 8 + 6)
#define                                 P4TSEL0_bit         _BIT_ACCESS(CCPTMRS0,6)
// CCPTMRS0<P4TSEL1>
extern volatile __bit                   P4TSEL1             __at(0x10F7);	// @ (0x21E * 8 + 7)
#define                                 P4TSEL1_bit         _BIT_ACCESS(CCPTMRS0,7)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0xC96);	// @ (0x192 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0xC8A);	// @ (0x191 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x4480);	// @ (0x890 * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// CWG1CON1<POLA>
extern volatile __bit                   POLA                __at(0x3088);	// @ (0x611 * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<POLB>
extern volatile __bit                   POLB                __at(0x3089);	// @ (0x611 * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<POLC>
extern volatile __bit                   POLC                __at(0x308A);	// @ (0x611 * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<POLD>
extern volatile __bit                   POLD                __at(0x308B);	// @ (0x611 * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(CWG1CON1,3)
// ADCON1<PPOL>
extern volatile __bit                   PPOL                __at(0x897);	// @ (0x112 * 8 + 7)
#define                                 PPOL_bit            _BIT_ACCESS(ADCON1,7)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0xF478);	// @ (0x1E8F * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// ADPREL<PRE0>
extern volatile __bit                   PRE0                __at(0x878);	// @ (0x10F * 8 + 0)
#define                                 PRE0_bit            _BIT_ACCESS(ADPREL,0)
// ADPREL<PRE1>
extern volatile __bit                   PRE1                __at(0x879);	// @ (0x10F * 8 + 1)
#define                                 PRE1_bit            _BIT_ACCESS(ADPREL,1)
// ADPREH<PRE10>
extern volatile __bit                   PRE10               __at(0x882);	// @ (0x110 * 8 + 2)
#define                                 PRE10_bit           _BIT_ACCESS(ADPREH,2)
// ADPREH<PRE11>
extern volatile __bit                   PRE11               __at(0x883);	// @ (0x110 * 8 + 3)
#define                                 PRE11_bit           _BIT_ACCESS(ADPREH,3)
// ADPREH<PRE12>
extern volatile __bit                   PRE12               __at(0x884);	// @ (0x110 * 8 + 4)
#define                                 PRE12_bit           _BIT_ACCESS(ADPREH,4)
// ADPREL<PRE2>
extern volatile __bit                   PRE2                __at(0x87A);	// @ (0x10F * 8 + 2)
#define                                 PRE2_bit            _BIT_ACCESS(ADPREL,2)
// ADPREL<PRE3>
extern volatile __bit                   PRE3                __at(0x87B);	// @ (0x10F * 8 + 3)
#define                                 PRE3_bit            _BIT_ACCESS(ADPREL,3)
// ADPREL<PRE4>
extern volatile __bit                   PRE4                __at(0x87C);	// @ (0x10F * 8 + 4)
#define                                 PRE4_bit            _BIT_ACCESS(ADPREL,4)
// ADPREL<PRE5>
extern volatile __bit                   PRE5                __at(0x87D);	// @ (0x10F * 8 + 5)
#define                                 PRE5_bit            _BIT_ACCESS(ADPREL,5)
// ADPREL<PRE6>
extern volatile __bit                   PRE6                __at(0x87E);	// @ (0x10F * 8 + 6)
#define                                 PRE6_bit            _BIT_ACCESS(ADPREL,6)
// ADPREL<PRE7>
extern volatile __bit                   PRE7                __at(0x87F);	// @ (0x10F * 8 + 7)
#define                                 PRE7_bit            _BIT_ACCESS(ADPREL,7)
// ADPREH<PRE8>
extern volatile __bit                   PRE8                __at(0x880);	// @ (0x110 * 8 + 0)
#define                                 PRE8_bit            _BIT_ACCESS(ADPREH,0)
// ADPREH<PRE9>
extern volatile __bit                   PRE9                __at(0x881);	// @ (0x110 * 8 + 1)
#define                                 PRE9_bit            _BIT_ACCESS(ADPREH,1)
// ADREF<PREF0>
extern volatile __bit                   PREF0               __at(0x8B0);	// @ (0x116 * 8 + 0)
#define                                 PREF0_bit           _BIT_ACCESS(ADREF,0)
// ADREF<PREF1>
extern volatile __bit                   PREF1               __at(0x8B1);	// @ (0x116 * 8 + 1)
#define                                 PREF1_bit           _BIT_ACCESS(ADREF,1)
// ADPREVL<PREV0>
extern volatile __bit                   PREV0               __at(0x4D8);	// @ (0x9B * 8 + 0)
#define                                 PREV0_bit           _BIT_ACCESS(ADPREVL,0)
// ADPREVL<PREV1>
extern volatile __bit                   PREV1               __at(0x4D9);	// @ (0x9B * 8 + 1)
#define                                 PREV1_bit           _BIT_ACCESS(ADPREVL,1)
// ADPREVH<PREV10>
extern volatile __bit                   PREV10              __at(0x4E2);	// @ (0x9C * 8 + 2)
#define                                 PREV10_bit          _BIT_ACCESS(ADPREVH,2)
// ADPREVH<PREV11>
extern volatile __bit                   PREV11              __at(0x4E3);	// @ (0x9C * 8 + 3)
#define                                 PREV11_bit          _BIT_ACCESS(ADPREVH,3)
// ADPREVH<PREV12>
extern volatile __bit                   PREV12              __at(0x4E4);	// @ (0x9C * 8 + 4)
#define                                 PREV12_bit          _BIT_ACCESS(ADPREVH,4)
// ADPREVH<PREV13>
extern volatile __bit                   PREV13              __at(0x4E5);	// @ (0x9C * 8 + 5)
#define                                 PREV13_bit          _BIT_ACCESS(ADPREVH,5)
// ADPREVH<PREV14>
extern volatile __bit                   PREV14              __at(0x4E6);	// @ (0x9C * 8 + 6)
#define                                 PREV14_bit          _BIT_ACCESS(ADPREVH,6)
// ADPREVH<PREV15>
extern volatile __bit                   PREV15              __at(0x4E7);	// @ (0x9C * 8 + 7)
#define                                 PREV15_bit          _BIT_ACCESS(ADPREVH,7)
// ADPREVL<PREV2>
extern volatile __bit                   PREV2               __at(0x4DA);	// @ (0x9B * 8 + 2)
#define                                 PREV2_bit           _BIT_ACCESS(ADPREVL,2)
// ADPREVL<PREV3>
extern volatile __bit                   PREV3               __at(0x4DB);	// @ (0x9B * 8 + 3)
#define                                 PREV3_bit           _BIT_ACCESS(ADPREVL,3)
// ADPREVL<PREV4>
extern volatile __bit                   PREV4               __at(0x4DC);	// @ (0x9B * 8 + 4)
#define                                 PREV4_bit           _BIT_ACCESS(ADPREVL,4)
// ADPREVL<PREV5>
extern volatile __bit                   PREV5               __at(0x4DD);	// @ (0x9B * 8 + 5)
#define                                 PREV5_bit           _BIT_ACCESS(ADPREVL,5)
// ADPREVL<PREV6>
extern volatile __bit                   PREV6               __at(0x4DE);	// @ (0x9B * 8 + 6)
#define                                 PREV6_bit           _BIT_ACCESS(ADPREVL,6)
// ADPREVL<PREV7>
extern volatile __bit                   PREV7               __at(0x4DF);	// @ (0x9B * 8 + 7)
#define                                 PREV7_bit           _BIT_ACCESS(ADPREVL,7)
// ADPREVH<PREV8>
extern volatile __bit                   PREV8               __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 PREV8_bit           _BIT_ACCESS(ADPREVH,0)
// ADPREVH<PREV9>
extern volatile __bit                   PREV9               __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 PREV9_bit           _BIT_ACCESS(ADPREVH,1)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// ADCON2<PSIS>
extern volatile __bit                   PSIS                __at(0x89F);	// @ (0x113 * 8 + 7)
#define                                 PSIS_bit            _BIT_ACCESS(ADCON2,7)
// DAC1CON0<PSS0>
extern volatile __bit                   PSS0                __at(0x4872);	// @ (0x90E * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<PSS1>
extern volatile __bit                   PSS1                __at(0x4873);	// @ (0x90E * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON0,3)
// PWM3DCL<PWM3DC0>
extern volatile __bit                   PWM3DC0             __at(0x18A6);	// @ (0x314 * 8 + 6)
#define                                 PWM3DC0_bit         _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWM3DC1>
extern volatile __bit                   PWM3DC1             __at(0x18A7);	// @ (0x314 * 8 + 7)
#define                                 PWM3DC1_bit         _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWM3DC2>
extern volatile __bit                   PWM3DC2             __at(0x18A8);	// @ (0x315 * 8 + 0)
#define                                 PWM3DC2_bit         _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWM3DC3>
extern volatile __bit                   PWM3DC3             __at(0x18A9);	// @ (0x315 * 8 + 1)
#define                                 PWM3DC3_bit         _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWM3DC4>
extern volatile __bit                   PWM3DC4             __at(0x18AA);	// @ (0x315 * 8 + 2)
#define                                 PWM3DC4_bit         _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWM3DC5>
extern volatile __bit                   PWM3DC5             __at(0x18AB);	// @ (0x315 * 8 + 3)
#define                                 PWM3DC5_bit         _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWM3DC6>
extern volatile __bit                   PWM3DC6             __at(0x18AC);	// @ (0x315 * 8 + 4)
#define                                 PWM3DC6_bit         _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWM3DC7>
extern volatile __bit                   PWM3DC7             __at(0x18AD);	// @ (0x315 * 8 + 5)
#define                                 PWM3DC7_bit         _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWM3DC8>
extern volatile __bit                   PWM3DC8             __at(0x18AE);	// @ (0x315 * 8 + 6)
#define                                 PWM3DC8_bit         _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWM3DC9>
extern volatile __bit                   PWM3DC9             __at(0x18AF);	// @ (0x315 * 8 + 7)
#define                                 PWM3DC9_bit         _BIT_ACCESS(PWM3DCH,7)
// PWM3CON<PWM3EN>
extern volatile __bit                   PWM3EN              __at(0x18B7);	// @ (0x316 * 8 + 7)
#define                                 PWM3EN_bit          _BIT_ACCESS(PWM3CON,7)
// PWM3CON<PWM3OUT>
extern volatile __bit                   PWM3OUT             __at(0x18B5);	// @ (0x316 * 8 + 5)
#define                                 PWM3OUT_bit         _BIT_ACCESS(PWM3CON,5)
// PWM3CON<PWM3POL>
extern volatile __bit                   PWM3POL             __at(0x18B4);	// @ (0x316 * 8 + 4)
#define                                 PWM3POL_bit         _BIT_ACCESS(PWM3CON,4)
// PWM4DCL<PWM4DC0>
extern volatile __bit                   PWM4DC0             __at(0x18C6);	// @ (0x318 * 8 + 6)
#define                                 PWM4DC0_bit         _BIT_ACCESS(PWM4DCL,6)
// PWM4DCL<PWM4DC1>
extern volatile __bit                   PWM4DC1             __at(0x18C7);	// @ (0x318 * 8 + 7)
#define                                 PWM4DC1_bit         _BIT_ACCESS(PWM4DCL,7)
// PWM4DCH<PWM4DC2>
extern volatile __bit                   PWM4DC2             __at(0x18C8);	// @ (0x319 * 8 + 0)
#define                                 PWM4DC2_bit         _BIT_ACCESS(PWM4DCH,0)
// PWM4DCH<PWM4DC3>
extern volatile __bit                   PWM4DC3             __at(0x18C9);	// @ (0x319 * 8 + 1)
#define                                 PWM4DC3_bit         _BIT_ACCESS(PWM4DCH,1)
// PWM4DCH<PWM4DC4>
extern volatile __bit                   PWM4DC4             __at(0x18CA);	// @ (0x319 * 8 + 2)
#define                                 PWM4DC4_bit         _BIT_ACCESS(PWM4DCH,2)
// PWM4DCH<PWM4DC5>
extern volatile __bit                   PWM4DC5             __at(0x18CB);	// @ (0x319 * 8 + 3)
#define                                 PWM4DC5_bit         _BIT_ACCESS(PWM4DCH,3)
// PWM4DCH<PWM4DC6>
extern volatile __bit                   PWM4DC6             __at(0x18CC);	// @ (0x319 * 8 + 4)
#define                                 PWM4DC6_bit         _BIT_ACCESS(PWM4DCH,4)
// PWM4DCH<PWM4DC7>
extern volatile __bit                   PWM4DC7             __at(0x18CD);	// @ (0x319 * 8 + 5)
#define                                 PWM4DC7_bit         _BIT_ACCESS(PWM4DCH,5)
// PWM4DCH<PWM4DC8>
extern volatile __bit                   PWM4DC8             __at(0x18CE);	// @ (0x319 * 8 + 6)
#define                                 PWM4DC8_bit         _BIT_ACCESS(PWM4DCH,6)
// PWM4DCH<PWM4DC9>
extern volatile __bit                   PWM4DC9             __at(0x18CF);	// @ (0x319 * 8 + 7)
#define                                 PWM4DC9_bit         _BIT_ACCESS(PWM4DCH,7)
// PWM4CON<PWM4EN>
extern volatile __bit                   PWM4EN              __at(0x18D7);	// @ (0x31A * 8 + 7)
#define                                 PWM4EN_bit          _BIT_ACCESS(PWM4CON,7)
// PWM4CON<PWM4OUT>
extern volatile __bit                   PWM4OUT             __at(0x18D5);	// @ (0x31A * 8 + 5)
#define                                 PWM4OUT_bit         _BIT_ACCESS(PWM4CON,5)
// PWM4CON<PWM4POL>
extern volatile __bit                   PWM4POL             __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 PWM4POL_bit         _BIT_ACCESS(PWM4CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0xF880);	// @ (0x1F10 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0xF881);	// @ (0x1F10 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0xF882);	// @ (0x1F10 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0xF883);	// @ (0x1F10 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0xF884);	// @ (0x1F10 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// RA0PPS<RA0PPS5>
extern volatile __bit                   RA0PPS5             __at(0xF885);	// @ (0x1F10 * 8 + 5)
#define                                 RA0PPS5_bit         _BIT_ACCESS(RA0PPS,5)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0xF888);	// @ (0x1F11 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0xF889);	// @ (0x1F11 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0xF88A);	// @ (0x1F11 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0xF88B);	// @ (0x1F11 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0xF88C);	// @ (0x1F11 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// RA1PPS<RA1PPS5>
extern volatile __bit                   RA1PPS5             __at(0xF88D);	// @ (0x1F11 * 8 + 5)
#define                                 RA1PPS5_bit         _BIT_ACCESS(RA1PPS,5)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0xF890);	// @ (0x1F12 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0xF891);	// @ (0x1F12 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0xF892);	// @ (0x1F12 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0xF893);	// @ (0x1F12 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0xF894);	// @ (0x1F12 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// RA2PPS<RA2PPS5>
extern volatile __bit                   RA2PPS5             __at(0xF895);	// @ (0x1F12 * 8 + 5)
#define                                 RA2PPS5_bit         _BIT_ACCESS(RA2PPS,5)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0xF898);	// @ (0x1F13 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0xF899);	// @ (0x1F13 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0xF89A);	// @ (0x1F13 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0xF89B);	// @ (0x1F13 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0xF89C);	// @ (0x1F13 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// RA3PPS<RA3PPS5>
extern volatile __bit                   RA3PPS5             __at(0xF89D);	// @ (0x1F13 * 8 + 5)
#define                                 RA3PPS5_bit         _BIT_ACCESS(RA3PPS,5)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0xF8A0);	// @ (0x1F14 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0xF8A1);	// @ (0x1F14 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0xF8A2);	// @ (0x1F14 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0xF8A3);	// @ (0x1F14 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0xF8A4);	// @ (0x1F14 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// RA4PPS<RA4PPS5>
extern volatile __bit                   RA4PPS5             __at(0xF8A5);	// @ (0x1F14 * 8 + 5)
#define                                 RA4PPS5_bit         _BIT_ACCESS(RA4PPS,5)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0xF8A8);	// @ (0x1F15 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0xF8A9);	// @ (0x1F15 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0xF8AA);	// @ (0x1F15 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0xF8AB);	// @ (0x1F15 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0xF8AC);	// @ (0x1F15 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// RA5PPS<RA5PPS5>
extern volatile __bit                   RA5PPS5             __at(0xF8AD);	// @ (0x1F15 * 8 + 5)
#define                                 RA5PPS5_bit         _BIT_ACCESS(RA5PPS,5)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x66);	// @ (0xC * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0xF8B0);	// @ (0x1F16 * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0xF8B1);	// @ (0x1F16 * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0xF8B2);	// @ (0x1F16 * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0xF8B3);	// @ (0x1F16 * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0xF8B4);	// @ (0x1F16 * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// RA6PPS<RA6PPS5>
extern volatile __bit                   RA6PPS5             __at(0xF8B5);	// @ (0x1F16 * 8 + 5)
#define                                 RA6PPS5_bit         _BIT_ACCESS(RA6PPS,5)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x67);	// @ (0xC * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0xF8B8);	// @ (0x1F17 * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0xF8B9);	// @ (0x1F17 * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0xF8BA);	// @ (0x1F17 * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0xF8BB);	// @ (0x1F17 * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0xF8BC);	// @ (0x1F17 * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// RA7PPS<RA7PPS5>
extern volatile __bit                   RA7PPS5             __at(0xF8BD);	// @ (0x1F17 * 8 + 5)
#define                                 RA7PPS5_bit         _BIT_ACCESS(RA7PPS,5)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x68);	// @ (0xD * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0xF8C0);	// @ (0x1F18 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0xF8C1);	// @ (0x1F18 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0xF8C2);	// @ (0x1F18 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0xF8C3);	// @ (0x1F18 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0xF8C4);	// @ (0x1F18 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// RB0PPS<RB0PPS5>
extern volatile __bit                   RB0PPS5             __at(0xF8C5);	// @ (0x1F18 * 8 + 5)
#define                                 RB0PPS5_bit         _BIT_ACCESS(RB0PPS,5)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x69);	// @ (0xD * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0xF8C8);	// @ (0x1F19 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0xF8C9);	// @ (0x1F19 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0xF8CA);	// @ (0x1F19 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0xF8CB);	// @ (0x1F19 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0xF8CC);	// @ (0x1F19 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// RB1PPS<RB1PPS5>
extern volatile __bit                   RB1PPS5             __at(0xF8CD);	// @ (0x1F19 * 8 + 5)
#define                                 RB1PPS5_bit         _BIT_ACCESS(RB1PPS,5)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x6A);	// @ (0xD * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0xF8D0);	// @ (0x1F1A * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0xF8D1);	// @ (0x1F1A * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0xF8D2);	// @ (0x1F1A * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0xF8D3);	// @ (0x1F1A * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0xF8D4);	// @ (0x1F1A * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// RB2PPS<RB2PPS5>
extern volatile __bit                   RB2PPS5             __at(0xF8D5);	// @ (0x1F1A * 8 + 5)
#define                                 RB2PPS5_bit         _BIT_ACCESS(RB2PPS,5)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x6B);	// @ (0xD * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0xF8D8);	// @ (0x1F1B * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0xF8D9);	// @ (0x1F1B * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0xF8DA);	// @ (0x1F1B * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0xF8DB);	// @ (0x1F1B * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0xF8DC);	// @ (0x1F1B * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// RB3PPS<RB3PPS5>
extern volatile __bit                   RB3PPS5             __at(0xF8DD);	// @ (0x1F1B * 8 + 5)
#define                                 RB3PPS5_bit         _BIT_ACCESS(RB3PPS,5)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x6C);	// @ (0xD * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0xF8E0);	// @ (0x1F1C * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0xF8E1);	// @ (0x1F1C * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0xF8E2);	// @ (0x1F1C * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0xF8E3);	// @ (0x1F1C * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0xF8E4);	// @ (0x1F1C * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// RB4PPS<RB4PPS5>
extern volatile __bit                   RB4PPS5             __at(0xF8E5);	// @ (0x1F1C * 8 + 5)
#define                                 RB4PPS5_bit         _BIT_ACCESS(RB4PPS,5)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x6D);	// @ (0xD * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0xF8E8);	// @ (0x1F1D * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0xF8E9);	// @ (0x1F1D * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0xF8EA);	// @ (0x1F1D * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0xF8EB);	// @ (0x1F1D * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0xF8EC);	// @ (0x1F1D * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// RB5PPS<RB5PPS5>
extern volatile __bit                   RB5PPS5             __at(0xF8ED);	// @ (0x1F1D * 8 + 5)
#define                                 RB5PPS5_bit         _BIT_ACCESS(RB5PPS,5)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x6E);	// @ (0xD * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0xF8F0);	// @ (0x1F1E * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0xF8F1);	// @ (0x1F1E * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0xF8F2);	// @ (0x1F1E * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0xF8F3);	// @ (0x1F1E * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0xF8F4);	// @ (0x1F1E * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// RB6PPS<RB6PPS5>
extern volatile __bit                   RB6PPS5             __at(0xF8F5);	// @ (0x1F1E * 8 + 5)
#define                                 RB6PPS5_bit         _BIT_ACCESS(RB6PPS,5)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x6F);	// @ (0xD * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0xF8F8);	// @ (0x1F1F * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0xF8F9);	// @ (0x1F1F * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0xF8FA);	// @ (0x1F1F * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0xF8FB);	// @ (0x1F1F * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0xF8FC);	// @ (0x1F1F * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// RB7PPS<RB7PPS5>
extern volatile __bit                   RB7PPS5             __at(0xF8FD);	// @ (0x1F1F * 8 + 5)
#define                                 RB7PPS5_bit         _BIT_ACCESS(RB7PPS,5)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0xF900);	// @ (0x1F20 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0xF901);	// @ (0x1F20 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0xF902);	// @ (0x1F20 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0xF903);	// @ (0x1F20 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0xF904);	// @ (0x1F20 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// RC0PPS<RC0PPS5>
extern volatile __bit                   RC0PPS5             __at(0xF905);	// @ (0x1F20 * 8 + 5)
#define                                 RC0PPS5_bit         _BIT_ACCESS(RC0PPS,5)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PIE3<RC1IE>
extern volatile __bit                   RC1IE               __at(0x38CD);	// @ (0x719 * 8 + 5)
#define                                 RC1IE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<RC1IF>
extern volatile __bit                   RC1IF               __at(0x387D);	// @ (0x70F * 8 + 5)
#define                                 RC1IF_bit           _BIT_ACCESS(PIR3,5)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0xF908);	// @ (0x1F21 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0xF909);	// @ (0x1F21 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0xF90A);	// @ (0x1F21 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0xF90B);	// @ (0x1F21 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0xF90C);	// @ (0x1F21 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// RC1PPS<RC1PPS5>
extern volatile __bit                   RC1PPS5             __at(0xF90D);	// @ (0x1F21 * 8 + 5)
#define                                 RC1PPS5_bit         _BIT_ACCESS(RC1PPS,5)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// PIE3<RC2IE>
extern volatile __bit                   RC2IE               __at(0x38CF);	// @ (0x719 * 8 + 7)
#define                                 RC2IE_bit           _BIT_ACCESS(PIE3,7)
// PIR3<RC2IF>
extern volatile __bit                   RC2IF               __at(0x387F);	// @ (0x70F * 8 + 7)
#define                                 RC2IF_bit           _BIT_ACCESS(PIR3,7)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0xF910);	// @ (0x1F22 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0xF911);	// @ (0x1F22 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0xF912);	// @ (0x1F22 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0xF913);	// @ (0x1F22 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0xF914);	// @ (0x1F22 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// RC2PPS<RC2PPS5>
extern volatile __bit                   RC2PPS5             __at(0xF915);	// @ (0x1F22 * 8 + 5)
#define                                 RC2PPS5_bit         _BIT_ACCESS(RC2PPS,5)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0xF918);	// @ (0x1F23 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0xF919);	// @ (0x1F23 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0xF91A);	// @ (0x1F23 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0xF91B);	// @ (0x1F23 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0xF91C);	// @ (0x1F23 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// RC3PPS<RC3PPS5>
extern volatile __bit                   RC3PPS5             __at(0xF91D);	// @ (0x1F23 * 8 + 5)
#define                                 RC3PPS5_bit         _BIT_ACCESS(RC3PPS,5)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0xF920);	// @ (0x1F24 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0xF921);	// @ (0x1F24 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0xF922);	// @ (0x1F24 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0xF923);	// @ (0x1F24 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0xF924);	// @ (0x1F24 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// RC4PPS<RC4PPS5>
extern volatile __bit                   RC4PPS5             __at(0xF925);	// @ (0x1F24 * 8 + 5)
#define                                 RC4PPS5_bit         _BIT_ACCESS(RC4PPS,5)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0xF928);	// @ (0x1F25 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0xF929);	// @ (0x1F25 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0xF92A);	// @ (0x1F25 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0xF92B);	// @ (0x1F25 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0xF92C);	// @ (0x1F25 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// RC5PPS<RC5PPS5>
extern volatile __bit                   RC5PPS5             __at(0xF92D);	// @ (0x1F25 * 8 + 5)
#define                                 RC5PPS5_bit         _BIT_ACCESS(RC5PPS,5)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x76);	// @ (0xE * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0xF930);	// @ (0x1F26 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0xF931);	// @ (0x1F26 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0xF932);	// @ (0x1F26 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0xF933);	// @ (0x1F26 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0xF934);	// @ (0x1F26 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// RC6PPS<RC6PPS5>
extern volatile __bit                   RC6PPS5             __at(0xF935);	// @ (0x1F26 * 8 + 5)
#define                                 RC6PPS5_bit         _BIT_ACCESS(RC6PPS,5)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x77);	// @ (0xE * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0xF938);	// @ (0x1F27 * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0xF939);	// @ (0x1F27 * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0xF93A);	// @ (0x1F27 * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0xF93B);	// @ (0x1F27 * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0xF93C);	// @ (0x1F27 * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// RC7PPS<RC7PPS5>
extern volatile __bit                   RC7PPS5             __at(0xF93D);	// @ (0x1F27 * 8 + 5)
#define                                 RC7PPS5_bit         _BIT_ACCESS(RC7PPS,5)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0xC8B);	// @ (0x191 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x40F0);	// @ (0x81E * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// PORTD<RD0>
extern volatile __bit                   RD0                 __at(0x78);	// @ (0xF * 8 + 0)
#define                                 RD0_bit             _BIT_ACCESS(PORTD,0)
// RD0PPS<RD0PPS0>
extern volatile __bit                   RD0PPS0             __at(0xF940);	// @ (0x1F28 * 8 + 0)
#define                                 RD0PPS0_bit         _BIT_ACCESS(RD0PPS,0)
// RD0PPS<RD0PPS1>
extern volatile __bit                   RD0PPS1             __at(0xF941);	// @ (0x1F28 * 8 + 1)
#define                                 RD0PPS1_bit         _BIT_ACCESS(RD0PPS,1)
// RD0PPS<RD0PPS2>
extern volatile __bit                   RD0PPS2             __at(0xF942);	// @ (0x1F28 * 8 + 2)
#define                                 RD0PPS2_bit         _BIT_ACCESS(RD0PPS,2)
// RD0PPS<RD0PPS3>
extern volatile __bit                   RD0PPS3             __at(0xF943);	// @ (0x1F28 * 8 + 3)
#define                                 RD0PPS3_bit         _BIT_ACCESS(RD0PPS,3)
// RD0PPS<RD0PPS4>
extern volatile __bit                   RD0PPS4             __at(0xF944);	// @ (0x1F28 * 8 + 4)
#define                                 RD0PPS4_bit         _BIT_ACCESS(RD0PPS,4)
// RD0PPS<RD0PPS5>
extern volatile __bit                   RD0PPS5             __at(0xF945);	// @ (0x1F28 * 8 + 5)
#define                                 RD0PPS5_bit         _BIT_ACCESS(RD0PPS,5)
// PORTD<RD1>
extern volatile __bit                   RD1                 __at(0x79);	// @ (0xF * 8 + 1)
#define                                 RD1_bit             _BIT_ACCESS(PORTD,1)
// T1CON<RD16>
extern volatile __bit                   RD16                __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RD16_bit            _BIT_ACCESS(T1CON,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// RD1PPS<RD1PPS0>
extern volatile __bit                   RD1PPS0             __at(0xF948);	// @ (0x1F29 * 8 + 0)
#define                                 RD1PPS0_bit         _BIT_ACCESS(RD1PPS,0)
// RD1PPS<RD1PPS1>
extern volatile __bit                   RD1PPS1             __at(0xF949);	// @ (0x1F29 * 8 + 1)
#define                                 RD1PPS1_bit         _BIT_ACCESS(RD1PPS,1)
// RD1PPS<RD1PPS2>
extern volatile __bit                   RD1PPS2             __at(0xF94A);	// @ (0x1F29 * 8 + 2)
#define                                 RD1PPS2_bit         _BIT_ACCESS(RD1PPS,2)
// RD1PPS<RD1PPS3>
extern volatile __bit                   RD1PPS3             __at(0xF94B);	// @ (0x1F29 * 8 + 3)
#define                                 RD1PPS3_bit         _BIT_ACCESS(RD1PPS,3)
// RD1PPS<RD1PPS4>
extern volatile __bit                   RD1PPS4             __at(0xF94C);	// @ (0x1F29 * 8 + 4)
#define                                 RD1PPS4_bit         _BIT_ACCESS(RD1PPS,4)
// RD1PPS<RD1PPS5>
extern volatile __bit                   RD1PPS5             __at(0xF94D);	// @ (0x1F29 * 8 + 5)
#define                                 RD1PPS5_bit         _BIT_ACCESS(RD1PPS,5)
// PORTD<RD2>
extern volatile __bit                   RD2                 __at(0x7A);	// @ (0xF * 8 + 2)
#define                                 RD2_bit             _BIT_ACCESS(PORTD,2)
// RD2PPS<RD2PPS0>
extern volatile __bit                   RD2PPS0             __at(0xF950);	// @ (0x1F2A * 8 + 0)
#define                                 RD2PPS0_bit         _BIT_ACCESS(RD2PPS,0)
// RD2PPS<RD2PPS1>
extern volatile __bit                   RD2PPS1             __at(0xF951);	// @ (0x1F2A * 8 + 1)
#define                                 RD2PPS1_bit         _BIT_ACCESS(RD2PPS,1)
// RD2PPS<RD2PPS2>
extern volatile __bit                   RD2PPS2             __at(0xF952);	// @ (0x1F2A * 8 + 2)
#define                                 RD2PPS2_bit         _BIT_ACCESS(RD2PPS,2)
// RD2PPS<RD2PPS3>
extern volatile __bit                   RD2PPS3             __at(0xF953);	// @ (0x1F2A * 8 + 3)
#define                                 RD2PPS3_bit         _BIT_ACCESS(RD2PPS,3)
// RD2PPS<RD2PPS4>
extern volatile __bit                   RD2PPS4             __at(0xF954);	// @ (0x1F2A * 8 + 4)
#define                                 RD2PPS4_bit         _BIT_ACCESS(RD2PPS,4)
// RD2PPS<RD2PPS5>
extern volatile __bit                   RD2PPS5             __at(0xF955);	// @ (0x1F2A * 8 + 5)
#define                                 RD2PPS5_bit         _BIT_ACCESS(RD2PPS,5)
// PORTD<RD3>
extern volatile __bit                   RD3                 __at(0x7B);	// @ (0xF * 8 + 3)
#define                                 RD3_bit             _BIT_ACCESS(PORTD,3)
// RD3PPS<RD3PPS0>
extern volatile __bit                   RD3PPS0             __at(0xF958);	// @ (0x1F2B * 8 + 0)
#define                                 RD3PPS0_bit         _BIT_ACCESS(RD3PPS,0)
// RD3PPS<RD3PPS1>
extern volatile __bit                   RD3PPS1             __at(0xF959);	// @ (0x1F2B * 8 + 1)
#define                                 RD3PPS1_bit         _BIT_ACCESS(RD3PPS,1)
// RD3PPS<RD3PPS2>
extern volatile __bit                   RD3PPS2             __at(0xF95A);	// @ (0x1F2B * 8 + 2)
#define                                 RD3PPS2_bit         _BIT_ACCESS(RD3PPS,2)
// RD3PPS<RD3PPS3>
extern volatile __bit                   RD3PPS3             __at(0xF95B);	// @ (0x1F2B * 8 + 3)
#define                                 RD3PPS3_bit         _BIT_ACCESS(RD3PPS,3)
// RD3PPS<RD3PPS4>
extern volatile __bit                   RD3PPS4             __at(0xF95C);	// @ (0x1F2B * 8 + 4)
#define                                 RD3PPS4_bit         _BIT_ACCESS(RD3PPS,4)
// RD3PPS<RD3PPS5>
extern volatile __bit                   RD3PPS5             __at(0xF95D);	// @ (0x1F2B * 8 + 5)
#define                                 RD3PPS5_bit         _BIT_ACCESS(RD3PPS,5)
// PORTD<RD4>
extern volatile __bit                   RD4                 __at(0x7C);	// @ (0xF * 8 + 4)
#define                                 RD4_bit             _BIT_ACCESS(PORTD,4)
// RD4PPS<RD4PPS0>
extern volatile __bit                   RD4PPS0             __at(0xF960);	// @ (0x1F2C * 8 + 0)
#define                                 RD4PPS0_bit         _BIT_ACCESS(RD4PPS,0)
// RD4PPS<RD4PPS1>
extern volatile __bit                   RD4PPS1             __at(0xF961);	// @ (0x1F2C * 8 + 1)
#define                                 RD4PPS1_bit         _BIT_ACCESS(RD4PPS,1)
// RD4PPS<RD4PPS2>
extern volatile __bit                   RD4PPS2             __at(0xF962);	// @ (0x1F2C * 8 + 2)
#define                                 RD4PPS2_bit         _BIT_ACCESS(RD4PPS,2)
// RD4PPS<RD4PPS3>
extern volatile __bit                   RD4PPS3             __at(0xF963);	// @ (0x1F2C * 8 + 3)
#define                                 RD4PPS3_bit         _BIT_ACCESS(RD4PPS,3)
// RD4PPS<RD4PPS4>
extern volatile __bit                   RD4PPS4             __at(0xF964);	// @ (0x1F2C * 8 + 4)
#define                                 RD4PPS4_bit         _BIT_ACCESS(RD4PPS,4)
// RD4PPS<RD4PPS5>
extern volatile __bit                   RD4PPS5             __at(0xF965);	// @ (0x1F2C * 8 + 5)
#define                                 RD4PPS5_bit         _BIT_ACCESS(RD4PPS,5)
// PORTD<RD5>
extern volatile __bit                   RD5                 __at(0x7D);	// @ (0xF * 8 + 5)
#define                                 RD5_bit             _BIT_ACCESS(PORTD,5)
// RD5PPS<RD5PPS0>
extern volatile __bit                   RD5PPS0             __at(0xF968);	// @ (0x1F2D * 8 + 0)
#define                                 RD5PPS0_bit         _BIT_ACCESS(RD5PPS,0)
// RD5PPS<RD5PPS1>
extern volatile __bit                   RD5PPS1             __at(0xF969);	// @ (0x1F2D * 8 + 1)
#define                                 RD5PPS1_bit         _BIT_ACCESS(RD5PPS,1)
// RD5PPS<RD5PPS2>
extern volatile __bit                   RD5PPS2             __at(0xF96A);	// @ (0x1F2D * 8 + 2)
#define                                 RD5PPS2_bit         _BIT_ACCESS(RD5PPS,2)
// RD5PPS<RD5PPS3>
extern volatile __bit                   RD5PPS3             __at(0xF96B);	// @ (0x1F2D * 8 + 3)
#define                                 RD5PPS3_bit         _BIT_ACCESS(RD5PPS,3)
// RD5PPS<RD5PPS4>
extern volatile __bit                   RD5PPS4             __at(0xF96C);	// @ (0x1F2D * 8 + 4)
#define                                 RD5PPS4_bit         _BIT_ACCESS(RD5PPS,4)
// RD5PPS<RD5PPS5>
extern volatile __bit                   RD5PPS5             __at(0xF96D);	// @ (0x1F2D * 8 + 5)
#define                                 RD5PPS5_bit         _BIT_ACCESS(RD5PPS,5)
// PORTD<RD6>
extern volatile __bit                   RD6                 __at(0x7E);	// @ (0xF * 8 + 6)
#define                                 RD6_bit             _BIT_ACCESS(PORTD,6)
// RD6PPS<RD6PPS0>
extern volatile __bit                   RD6PPS0             __at(0xF970);	// @ (0x1F2E * 8 + 0)
#define                                 RD6PPS0_bit         _BIT_ACCESS(RD6PPS,0)
// RD6PPS<RD6PPS1>
extern volatile __bit                   RD6PPS1             __at(0xF971);	// @ (0x1F2E * 8 + 1)
#define                                 RD6PPS1_bit         _BIT_ACCESS(RD6PPS,1)
// RD6PPS<RD6PPS2>
extern volatile __bit                   RD6PPS2             __at(0xF972);	// @ (0x1F2E * 8 + 2)
#define                                 RD6PPS2_bit         _BIT_ACCESS(RD6PPS,2)
// RD6PPS<RD6PPS3>
extern volatile __bit                   RD6PPS3             __at(0xF973);	// @ (0x1F2E * 8 + 3)
#define                                 RD6PPS3_bit         _BIT_ACCESS(RD6PPS,3)
// RD6PPS<RD6PPS4>
extern volatile __bit                   RD6PPS4             __at(0xF974);	// @ (0x1F2E * 8 + 4)
#define                                 RD6PPS4_bit         _BIT_ACCESS(RD6PPS,4)
// RD6PPS<RD6PPS5>
extern volatile __bit                   RD6PPS5             __at(0xF975);	// @ (0x1F2E * 8 + 5)
#define                                 RD6PPS5_bit         _BIT_ACCESS(RD6PPS,5)
// PORTD<RD7>
extern volatile __bit                   RD7                 __at(0x7F);	// @ (0xF * 8 + 7)
#define                                 RD7_bit             _BIT_ACCESS(PORTD,7)
// RD7PPS<RD7PPS0>
extern volatile __bit                   RD7PPS0             __at(0xF978);	// @ (0x1F2F * 8 + 0)
#define                                 RD7PPS0_bit         _BIT_ACCESS(RD7PPS,0)
// RD7PPS<RD7PPS1>
extern volatile __bit                   RD7PPS1             __at(0xF979);	// @ (0x1F2F * 8 + 1)
#define                                 RD7PPS1_bit         _BIT_ACCESS(RD7PPS,1)
// RD7PPS<RD7PPS2>
extern volatile __bit                   RD7PPS2             __at(0xF97A);	// @ (0x1F2F * 8 + 2)
#define                                 RD7PPS2_bit         _BIT_ACCESS(RD7PPS,2)
// RD7PPS<RD7PPS3>
extern volatile __bit                   RD7PPS3             __at(0xF97B);	// @ (0x1F2F * 8 + 3)
#define                                 RD7PPS3_bit         _BIT_ACCESS(RD7PPS,3)
// RD7PPS<RD7PPS4>
extern volatile __bit                   RD7PPS4             __at(0xF97C);	// @ (0x1F2F * 8 + 4)
#define                                 RD7PPS4_bit         _BIT_ACCESS(RD7PPS,4)
// RD7PPS<RD7PPS5>
extern volatile __bit                   RD7PPS5             __at(0xF97D);	// @ (0x1F2F * 8 + 5)
#define                                 RD7PPS5_bit         _BIT_ACCESS(RD7PPS,5)
// PORTE<RE0>
extern volatile __bit                   RE0                 __at(0x80);	// @ (0x10 * 8 + 0)
#define                                 RE0_bit             _BIT_ACCESS(PORTE,0)
// RE0PPS<RE0PPS0>
extern volatile __bit                   RE0PPS0             __at(0xF980);	// @ (0x1F30 * 8 + 0)
#define                                 RE0PPS0_bit         _BIT_ACCESS(RE0PPS,0)
// RE0PPS<RE0PPS1>
extern volatile __bit                   RE0PPS1             __at(0xF981);	// @ (0x1F30 * 8 + 1)
#define                                 RE0PPS1_bit         _BIT_ACCESS(RE0PPS,1)
// RE0PPS<RE0PPS2>
extern volatile __bit                   RE0PPS2             __at(0xF982);	// @ (0x1F30 * 8 + 2)
#define                                 RE0PPS2_bit         _BIT_ACCESS(RE0PPS,2)
// RE0PPS<RE0PPS3>
extern volatile __bit                   RE0PPS3             __at(0xF983);	// @ (0x1F30 * 8 + 3)
#define                                 RE0PPS3_bit         _BIT_ACCESS(RE0PPS,3)
// RE0PPS<RE0PPS4>
extern volatile __bit                   RE0PPS4             __at(0xF984);	// @ (0x1F30 * 8 + 4)
#define                                 RE0PPS4_bit         _BIT_ACCESS(RE0PPS,4)
// RE0PPS<RE0PPS5>
extern volatile __bit                   RE0PPS5             __at(0xF985);	// @ (0x1F30 * 8 + 5)
#define                                 RE0PPS5_bit         _BIT_ACCESS(RE0PPS,5)
// PORTE<RE1>
extern volatile __bit                   RE1                 __at(0x81);	// @ (0x10 * 8 + 1)
#define                                 RE1_bit             _BIT_ACCESS(PORTE,1)
// RE1PPS<RE1PPS0>
extern volatile __bit                   RE1PPS0             __at(0xF988);	// @ (0x1F31 * 8 + 0)
#define                                 RE1PPS0_bit         _BIT_ACCESS(RE1PPS,0)
// RE1PPS<RE1PPS1>
extern volatile __bit                   RE1PPS1             __at(0xF989);	// @ (0x1F31 * 8 + 1)
#define                                 RE1PPS1_bit         _BIT_ACCESS(RE1PPS,1)
// RE1PPS<RE1PPS2>
extern volatile __bit                   RE1PPS2             __at(0xF98A);	// @ (0x1F31 * 8 + 2)
#define                                 RE1PPS2_bit         _BIT_ACCESS(RE1PPS,2)
// RE1PPS<RE1PPS3>
extern volatile __bit                   RE1PPS3             __at(0xF98B);	// @ (0x1F31 * 8 + 3)
#define                                 RE1PPS3_bit         _BIT_ACCESS(RE1PPS,3)
// RE1PPS<RE1PPS4>
extern volatile __bit                   RE1PPS4             __at(0xF98C);	// @ (0x1F31 * 8 + 4)
#define                                 RE1PPS4_bit         _BIT_ACCESS(RE1PPS,4)
// RE1PPS<RE1PPS5>
extern volatile __bit                   RE1PPS5             __at(0xF98D);	// @ (0x1F31 * 8 + 5)
#define                                 RE1PPS5_bit         _BIT_ACCESS(RE1PPS,5)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x83);	// @ (0x10 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// RE3PPS<RE3PPS0>
extern volatile __bit                   RE3PPS0             __at(0xF998);	// @ (0x1F33 * 8 + 0)
#define                                 RE3PPS0_bit         _BIT_ACCESS(RE3PPS,0)
// RE3PPS<RE3PPS1>
extern volatile __bit                   RE3PPS1             __at(0xF999);	// @ (0x1F33 * 8 + 1)
#define                                 RE3PPS1_bit         _BIT_ACCESS(RE3PPS,1)
// RE3PPS<RE3PPS2>
extern volatile __bit                   RE3PPS2             __at(0xF99A);	// @ (0x1F33 * 8 + 2)
#define                                 RE3PPS2_bit         _BIT_ACCESS(RE3PPS,2)
// RE3PPS<RE3PPS3>
extern volatile __bit                   RE3PPS3             __at(0xF99B);	// @ (0x1F33 * 8 + 3)
#define                                 RE3PPS3_bit         _BIT_ACCESS(RE3PPS,3)
// RE3PPS<RE3PPS4>
extern volatile __bit                   RE3PPS4             __at(0xF99C);	// @ (0x1F33 * 8 + 4)
#define                                 RE3PPS4_bit         _BIT_ACCESS(RE3PPS,4)
// RE3PPS<RE3PPS5>
extern volatile __bit                   RE3PPS5             __at(0xF99D);	// @ (0x1F33 * 8 + 5)
#define                                 RE3PPS5_bit         _BIT_ACCESS(RE3PPS,5)
// PORTE<RE4>
extern volatile __bit                   RE4                 __at(0x84);	// @ (0x10 * 8 + 4)
#define                                 RE4_bit             _BIT_ACCESS(PORTE,4)
// RE4PPS<RE4PPS0>
extern volatile __bit                   RE4PPS0             __at(0xF9A0);	// @ (0x1F34 * 8 + 0)
#define                                 RE4PPS0_bit         _BIT_ACCESS(RE4PPS,0)
// RE4PPS<RE4PPS1>
extern volatile __bit                   RE4PPS1             __at(0xF9A1);	// @ (0x1F34 * 8 + 1)
#define                                 RE4PPS1_bit         _BIT_ACCESS(RE4PPS,1)
// RE4PPS<RE4PPS2>
extern volatile __bit                   RE4PPS2             __at(0xF9A2);	// @ (0x1F34 * 8 + 2)
#define                                 RE4PPS2_bit         _BIT_ACCESS(RE4PPS,2)
// RE4PPS<RE4PPS3>
extern volatile __bit                   RE4PPS3             __at(0xF9A3);	// @ (0x1F34 * 8 + 3)
#define                                 RE4PPS3_bit         _BIT_ACCESS(RE4PPS,3)
// RE4PPS<RE4PPS4>
extern volatile __bit                   RE4PPS4             __at(0xF9A4);	// @ (0x1F34 * 8 + 4)
#define                                 RE4PPS4_bit         _BIT_ACCESS(RE4PPS,4)
// RE4PPS<RE4PPS5>
extern volatile __bit                   RE4PPS5             __at(0xF9A5);	// @ (0x1F34 * 8 + 5)
#define                                 RE4PPS5_bit         _BIT_ACCESS(RE4PPS,5)
// PORTE<RE5>
extern volatile __bit                   RE5                 __at(0x85);	// @ (0x10 * 8 + 5)
#define                                 RE5_bit             _BIT_ACCESS(PORTE,5)
// RE5PPS<RE5PPS0>
extern volatile __bit                   RE5PPS0             __at(0xF9A8);	// @ (0x1F35 * 8 + 0)
#define                                 RE5PPS0_bit         _BIT_ACCESS(RE5PPS,0)
// RE5PPS<RE5PPS1>
extern volatile __bit                   RE5PPS1             __at(0xF9A9);	// @ (0x1F35 * 8 + 1)
#define                                 RE5PPS1_bit         _BIT_ACCESS(RE5PPS,1)
// RE5PPS<RE5PPS2>
extern volatile __bit                   RE5PPS2             __at(0xF9AA);	// @ (0x1F35 * 8 + 2)
#define                                 RE5PPS2_bit         _BIT_ACCESS(RE5PPS,2)
// RE5PPS<RE5PPS3>
extern volatile __bit                   RE5PPS3             __at(0xF9AB);	// @ (0x1F35 * 8 + 3)
#define                                 RE5PPS3_bit         _BIT_ACCESS(RE5PPS,3)
// RE5PPS<RE5PPS4>
extern volatile __bit                   RE5PPS4             __at(0xF9AC);	// @ (0x1F35 * 8 + 4)
#define                                 RE5PPS4_bit         _BIT_ACCESS(RE5PPS,4)
// RE5PPS<RE5PPS5>
extern volatile __bit                   RE5PPS5             __at(0xF9AD);	// @ (0x1F35 * 8 + 5)
#define                                 RE5PPS5_bit         _BIT_ACCESS(RE5PPS,5)
// PORTE<RE6>
extern volatile __bit                   RE6                 __at(0x86);	// @ (0x10 * 8 + 6)
#define                                 RE6_bit             _BIT_ACCESS(PORTE,6)
// RE6PPS<RE6PPS0>
extern volatile __bit                   RE6PPS0             __at(0xF9B0);	// @ (0x1F36 * 8 + 0)
#define                                 RE6PPS0_bit         _BIT_ACCESS(RE6PPS,0)
// RE6PPS<RE6PPS1>
extern volatile __bit                   RE6PPS1             __at(0xF9B1);	// @ (0x1F36 * 8 + 1)
#define                                 RE6PPS1_bit         _BIT_ACCESS(RE6PPS,1)
// RE6PPS<RE6PPS2>
extern volatile __bit                   RE6PPS2             __at(0xF9B2);	// @ (0x1F36 * 8 + 2)
#define                                 RE6PPS2_bit         _BIT_ACCESS(RE6PPS,2)
// RE6PPS<RE6PPS3>
extern volatile __bit                   RE6PPS3             __at(0xF9B3);	// @ (0x1F36 * 8 + 3)
#define                                 RE6PPS3_bit         _BIT_ACCESS(RE6PPS,3)
// RE6PPS<RE6PPS4>
extern volatile __bit                   RE6PPS4             __at(0xF9B4);	// @ (0x1F36 * 8 + 4)
#define                                 RE6PPS4_bit         _BIT_ACCESS(RE6PPS,4)
// RE6PPS<RE6PPS5>
extern volatile __bit                   RE6PPS5             __at(0xF9B5);	// @ (0x1F36 * 8 + 5)
#define                                 RE6PPS5_bit         _BIT_ACCESS(RE6PPS,5)
// PORTE<RE7>
extern volatile __bit                   RE7                 __at(0x87);	// @ (0x10 * 8 + 7)
#define                                 RE7_bit             _BIT_ACCESS(PORTE,7)
// RE7PPS<RE7PPS0>
extern volatile __bit                   RE7PPS0             __at(0xF9B8);	// @ (0x1F37 * 8 + 0)
#define                                 RE7PPS0_bit         _BIT_ACCESS(RE7PPS,0)
// RE7PPS<RE7PPS1>
extern volatile __bit                   RE7PPS1             __at(0xF9B9);	// @ (0x1F37 * 8 + 1)
#define                                 RE7PPS1_bit         _BIT_ACCESS(RE7PPS,1)
// RE7PPS<RE7PPS2>
extern volatile __bit                   RE7PPS2             __at(0xF9BA);	// @ (0x1F37 * 8 + 2)
#define                                 RE7PPS2_bit         _BIT_ACCESS(RE7PPS,2)
// RE7PPS<RE7PPS3>
extern volatile __bit                   RE7PPS3             __at(0xF9BB);	// @ (0x1F37 * 8 + 3)
#define                                 RE7PPS3_bit         _BIT_ACCESS(RE7PPS,3)
// RE7PPS<RE7PPS4>
extern volatile __bit                   RE7PPS4             __at(0xF9BC);	// @ (0x1F37 * 8 + 4)
#define                                 RE7PPS4_bit         _BIT_ACCESS(RE7PPS,4)
// RE7PPS<RE7PPS5>
extern volatile __bit                   RE7PPS5             __at(0xF9BD);	// @ (0x1F37 * 8 + 5)
#define                                 RE7PPS5_bit         _BIT_ACCESS(RE7PPS,5)
// SSP1STAT<READ_WRITE>
extern volatile __bit                   READ_WRITE          __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE_bit      _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// CWG1AS0<REN>
extern volatile __bit                   REN                 __at(0x3096);	// @ (0x612 * 8 + 6)
#define                                 REN_bit             _BIT_ACCESS(CWG1AS0,6)
// SMT1CON1<REPEAT>
extern volatile __bit                   REPEAT              __at(0x24CE);	// @ (0x499 * 8 + 6)
#define                                 REPEAT_bit          _BIT_ACCESS(SMT1CON1,6)
// ADRESL<RES0>
extern volatile __bit                   RES0                __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(ADRESL,0)
// ADRESL<RES1>
extern volatile __bit                   RES1                __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(ADRESL,1)
// ADRESH<RES10>
extern volatile __bit                   RES10               __at(0x4F2);	// @ (0x9E * 8 + 2)
#define                                 RES10_bit           _BIT_ACCESS(ADRESH,2)
// ADRESH<RES11>
extern volatile __bit                   RES11               __at(0x4F3);	// @ (0x9E * 8 + 3)
#define                                 RES11_bit           _BIT_ACCESS(ADRESH,3)
// ADRESH<RES12>
extern volatile __bit                   RES12               __at(0x4F4);	// @ (0x9E * 8 + 4)
#define                                 RES12_bit           _BIT_ACCESS(ADRESH,4)
// ADRESH<RES13>
extern volatile __bit                   RES13               __at(0x4F5);	// @ (0x9E * 8 + 5)
#define                                 RES13_bit           _BIT_ACCESS(ADRESH,5)
// ADRESH<RES14>
extern volatile __bit                   RES14               __at(0x4F6);	// @ (0x9E * 8 + 6)
#define                                 RES14_bit           _BIT_ACCESS(ADRESH,6)
// ADRESH<RES15>
extern volatile __bit                   RES15               __at(0x4F7);	// @ (0x9E * 8 + 7)
#define                                 RES15_bit           _BIT_ACCESS(ADRESH,7)
// ADRESL<RES2>
extern volatile __bit                   RES2                __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(ADRESL,2)
// ADRESL<RES3>
extern volatile __bit                   RES3                __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(ADRESL,3)
// ADRESL<RES4>
extern volatile __bit                   RES4                __at(0x4EC);	// @ (0x9D * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(ADRESL,4)
// ADRESL<RES5>
extern volatile __bit                   RES5                __at(0x4ED);	// @ (0x9D * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(ADRESL,5)
// ADRESL<RES6>
extern volatile __bit                   RES6                __at(0x4EE);	// @ (0x9D * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(ADRESL,6)
// ADRESL<RES7>
extern volatile __bit                   RES7                __at(0x4EF);	// @ (0x9D * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(ADRESL,7)
// ADRESH<RES8>
extern volatile __bit                   RES8                __at(0x4F0);	// @ (0x9E * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(ADRESH,0)
// ADRESH<RES9>
extern volatile __bit                   RES9                __at(0x4F1);	// @ (0x9E * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(ADRESH,1)
// PORTF<RF0>
extern volatile __bit                   RF0                 __at(0x88);	// @ (0x11 * 8 + 0)
#define                                 RF0_bit             _BIT_ACCESS(PORTF,0)
// RF0PPS<RF0PPS0>
extern volatile __bit                   RF0PPS0             __at(0xF1C0);	// @ (0x1E38 * 8 + 0)
#define                                 RF0PPS0_bit         _BIT_ACCESS(RF0PPS,0)
// RF0PPS<RF0PPS1>
extern volatile __bit                   RF0PPS1             __at(0xF1C1);	// @ (0x1E38 * 8 + 1)
#define                                 RF0PPS1_bit         _BIT_ACCESS(RF0PPS,1)
// RF0PPS<RF0PPS2>
extern volatile __bit                   RF0PPS2             __at(0xF1C2);	// @ (0x1E38 * 8 + 2)
#define                                 RF0PPS2_bit         _BIT_ACCESS(RF0PPS,2)
// RF0PPS<RF0PPS3>
extern volatile __bit                   RF0PPS3             __at(0xF1C3);	// @ (0x1E38 * 8 + 3)
#define                                 RF0PPS3_bit         _BIT_ACCESS(RF0PPS,3)
// RF0PPS<RF0PPS4>
extern volatile __bit                   RF0PPS4             __at(0xF1C4);	// @ (0x1E38 * 8 + 4)
#define                                 RF0PPS4_bit         _BIT_ACCESS(RF0PPS,4)
// RF0PPS<RF0PPS5>
extern volatile __bit                   RF0PPS5             __at(0xF1C5);	// @ (0x1E38 * 8 + 5)
#define                                 RF0PPS5_bit         _BIT_ACCESS(RF0PPS,5)
// PORTF<RF1>
extern volatile __bit                   RF1                 __at(0x89);	// @ (0x11 * 8 + 1)
#define                                 RF1_bit             _BIT_ACCESS(PORTF,1)
// RF1PPS<RF1PPS0>
extern volatile __bit                   RF1PPS0             __at(0xF1C8);	// @ (0x1E39 * 8 + 0)
#define                                 RF1PPS0_bit         _BIT_ACCESS(RF1PPS,0)
// RF1PPS<RF1PPS1>
extern volatile __bit                   RF1PPS1             __at(0xF1C9);	// @ (0x1E39 * 8 + 1)
#define                                 RF1PPS1_bit         _BIT_ACCESS(RF1PPS,1)
// RF1PPS<RF1PPS2>
extern volatile __bit                   RF1PPS2             __at(0xF1CA);	// @ (0x1E39 * 8 + 2)
#define                                 RF1PPS2_bit         _BIT_ACCESS(RF1PPS,2)
// RF1PPS<RF1PPS3>
extern volatile __bit                   RF1PPS3             __at(0xF1CB);	// @ (0x1E39 * 8 + 3)
#define                                 RF1PPS3_bit         _BIT_ACCESS(RF1PPS,3)
// RF1PPS<RF1PPS4>
extern volatile __bit                   RF1PPS4             __at(0xF1CC);	// @ (0x1E39 * 8 + 4)
#define                                 RF1PPS4_bit         _BIT_ACCESS(RF1PPS,4)
// RF1PPS<RF1PPS5>
extern volatile __bit                   RF1PPS5             __at(0xF1CD);	// @ (0x1E39 * 8 + 5)
#define                                 RF1PPS5_bit         _BIT_ACCESS(RF1PPS,5)
// PORTF<RF2>
extern volatile __bit                   RF2                 __at(0x8A);	// @ (0x11 * 8 + 2)
#define                                 RF2_bit             _BIT_ACCESS(PORTF,2)
// RF2PPS<RF2PPS0>
extern volatile __bit                   RF2PPS0             __at(0xF1D0);	// @ (0x1E3A * 8 + 0)
#define                                 RF2PPS0_bit         _BIT_ACCESS(RF2PPS,0)
// RF2PPS<RF2PPS1>
extern volatile __bit                   RF2PPS1             __at(0xF1D1);	// @ (0x1E3A * 8 + 1)
#define                                 RF2PPS1_bit         _BIT_ACCESS(RF2PPS,1)
// RF2PPS<RF2PPS2>
extern volatile __bit                   RF2PPS2             __at(0xF1D2);	// @ (0x1E3A * 8 + 2)
#define                                 RF2PPS2_bit         _BIT_ACCESS(RF2PPS,2)
// RF2PPS<RF2PPS3>
extern volatile __bit                   RF2PPS3             __at(0xF1D3);	// @ (0x1E3A * 8 + 3)
#define                                 RF2PPS3_bit         _BIT_ACCESS(RF2PPS,3)
// RF2PPS<RF2PPS4>
extern volatile __bit                   RF2PPS4             __at(0xF1D4);	// @ (0x1E3A * 8 + 4)
#define                                 RF2PPS4_bit         _BIT_ACCESS(RF2PPS,4)
// RF2PPS<RF2PPS5>
extern volatile __bit                   RF2PPS5             __at(0xF1D5);	// @ (0x1E3A * 8 + 5)
#define                                 RF2PPS5_bit         _BIT_ACCESS(RF2PPS,5)
// PORTF<RF3>
extern volatile __bit                   RF3                 __at(0x8B);	// @ (0x11 * 8 + 3)
#define                                 RF3_bit             _BIT_ACCESS(PORTF,3)
// RF3PPS<RF3PPS0>
extern volatile __bit                   RF3PPS0             __at(0xF1D8);	// @ (0x1E3B * 8 + 0)
#define                                 RF3PPS0_bit         _BIT_ACCESS(RF3PPS,0)
// RF3PPS<RF3PPS1>
extern volatile __bit                   RF3PPS1             __at(0xF1D9);	// @ (0x1E3B * 8 + 1)
#define                                 RF3PPS1_bit         _BIT_ACCESS(RF3PPS,1)
// RF3PPS<RF3PPS2>
extern volatile __bit                   RF3PPS2             __at(0xF1DA);	// @ (0x1E3B * 8 + 2)
#define                                 RF3PPS2_bit         _BIT_ACCESS(RF3PPS,2)
// RF3PPS<RF3PPS3>
extern volatile __bit                   RF3PPS3             __at(0xF1DB);	// @ (0x1E3B * 8 + 3)
#define                                 RF3PPS3_bit         _BIT_ACCESS(RF3PPS,3)
// RF3PPS<RF3PPS4>
extern volatile __bit                   RF3PPS4             __at(0xF1DC);	// @ (0x1E3B * 8 + 4)
#define                                 RF3PPS4_bit         _BIT_ACCESS(RF3PPS,4)
// RF3PPS<RF3PPS5>
extern volatile __bit                   RF3PPS5             __at(0xF1DD);	// @ (0x1E3B * 8 + 5)
#define                                 RF3PPS5_bit         _BIT_ACCESS(RF3PPS,5)
// PORTF<RF4>
extern volatile __bit                   RF4                 __at(0x8C);	// @ (0x11 * 8 + 4)
#define                                 RF4_bit             _BIT_ACCESS(PORTF,4)
// RF4PPS<RF4PPS0>
extern volatile __bit                   RF4PPS0             __at(0xF1E0);	// @ (0x1E3C * 8 + 0)
#define                                 RF4PPS0_bit         _BIT_ACCESS(RF4PPS,0)
// RF4PPS<RF4PPS1>
extern volatile __bit                   RF4PPS1             __at(0xF1E1);	// @ (0x1E3C * 8 + 1)
#define                                 RF4PPS1_bit         _BIT_ACCESS(RF4PPS,1)
// RF4PPS<RF4PPS2>
extern volatile __bit                   RF4PPS2             __at(0xF1E2);	// @ (0x1E3C * 8 + 2)
#define                                 RF4PPS2_bit         _BIT_ACCESS(RF4PPS,2)
// RF4PPS<RF4PPS3>
extern volatile __bit                   RF4PPS3             __at(0xF1E3);	// @ (0x1E3C * 8 + 3)
#define                                 RF4PPS3_bit         _BIT_ACCESS(RF4PPS,3)
// RF4PPS<RF4PPS4>
extern volatile __bit                   RF4PPS4             __at(0xF1E4);	// @ (0x1E3C * 8 + 4)
#define                                 RF4PPS4_bit         _BIT_ACCESS(RF4PPS,4)
// RF4PPS<RF4PPS5>
extern volatile __bit                   RF4PPS5             __at(0xF1E5);	// @ (0x1E3C * 8 + 5)
#define                                 RF4PPS5_bit         _BIT_ACCESS(RF4PPS,5)
// PORTF<RF5>
extern volatile __bit                   RF5                 __at(0x8D);	// @ (0x11 * 8 + 5)
#define                                 RF5_bit             _BIT_ACCESS(PORTF,5)
// RF5PPS<RF5PPS0>
extern volatile __bit                   RF5PPS0             __at(0xF1E8);	// @ (0x1E3D * 8 + 0)
#define                                 RF5PPS0_bit         _BIT_ACCESS(RF5PPS,0)
// RF5PPS<RF5PPS1>
extern volatile __bit                   RF5PPS1             __at(0xF1E9);	// @ (0x1E3D * 8 + 1)
#define                                 RF5PPS1_bit         _BIT_ACCESS(RF5PPS,1)
// RF5PPS<RF5PPS2>
extern volatile __bit                   RF5PPS2             __at(0xF1EA);	// @ (0x1E3D * 8 + 2)
#define                                 RF5PPS2_bit         _BIT_ACCESS(RF5PPS,2)
// RF5PPS<RF5PPS3>
extern volatile __bit                   RF5PPS3             __at(0xF1EB);	// @ (0x1E3D * 8 + 3)
#define                                 RF5PPS3_bit         _BIT_ACCESS(RF5PPS,3)
// RF5PPS<RF5PPS4>
extern volatile __bit                   RF5PPS4             __at(0xF1EC);	// @ (0x1E3D * 8 + 4)
#define                                 RF5PPS4_bit         _BIT_ACCESS(RF5PPS,4)
// RF5PPS<RF5PPS5>
extern volatile __bit                   RF5PPS5             __at(0xF1ED);	// @ (0x1E3D * 8 + 5)
#define                                 RF5PPS5_bit         _BIT_ACCESS(RF5PPS,5)
// PORTF<RF6>
extern volatile __bit                   RF6                 __at(0x8E);	// @ (0x11 * 8 + 6)
#define                                 RF6_bit             _BIT_ACCESS(PORTF,6)
// RF6PPS<RF6PPS0>
extern volatile __bit                   RF6PPS0             __at(0xF1F0);	// @ (0x1E3E * 8 + 0)
#define                                 RF6PPS0_bit         _BIT_ACCESS(RF6PPS,0)
// RF6PPS<RF6PPS1>
extern volatile __bit                   RF6PPS1             __at(0xF1F1);	// @ (0x1E3E * 8 + 1)
#define                                 RF6PPS1_bit         _BIT_ACCESS(RF6PPS,1)
// RF6PPS<RF6PPS2>
extern volatile __bit                   RF6PPS2             __at(0xF1F2);	// @ (0x1E3E * 8 + 2)
#define                                 RF6PPS2_bit         _BIT_ACCESS(RF6PPS,2)
// RF6PPS<RF6PPS3>
extern volatile __bit                   RF6PPS3             __at(0xF1F3);	// @ (0x1E3E * 8 + 3)
#define                                 RF6PPS3_bit         _BIT_ACCESS(RF6PPS,3)
// RF6PPS<RF6PPS4>
extern volatile __bit                   RF6PPS4             __at(0xF1F4);	// @ (0x1E3E * 8 + 4)
#define                                 RF6PPS4_bit         _BIT_ACCESS(RF6PPS,4)
// RF6PPS<RF6PPS5>
extern volatile __bit                   RF6PPS5             __at(0xF1F5);	// @ (0x1E3E * 8 + 5)
#define                                 RF6PPS5_bit         _BIT_ACCESS(RF6PPS,5)
// PORTF<RF7>
extern volatile __bit                   RF7                 __at(0x8F);	// @ (0x11 * 8 + 7)
#define                                 RF7_bit             _BIT_ACCESS(PORTF,7)
// RF7PPS<RF7PPS0>
extern volatile __bit                   RF7PPS0             __at(0xF1F8);	// @ (0x1E3F * 8 + 0)
#define                                 RF7PPS0_bit         _BIT_ACCESS(RF7PPS,0)
// RF7PPS<RF7PPS1>
extern volatile __bit                   RF7PPS1             __at(0xF1F9);	// @ (0x1E3F * 8 + 1)
#define                                 RF7PPS1_bit         _BIT_ACCESS(RF7PPS,1)
// RF7PPS<RF7PPS2>
extern volatile __bit                   RF7PPS2             __at(0xF1FA);	// @ (0x1E3F * 8 + 2)
#define                                 RF7PPS2_bit         _BIT_ACCESS(RF7PPS,2)
// RF7PPS<RF7PPS3>
extern volatile __bit                   RF7PPS3             __at(0xF1FB);	// @ (0x1E3F * 8 + 3)
#define                                 RF7PPS3_bit         _BIT_ACCESS(RF7PPS,3)
// RF7PPS<RF7PPS4>
extern volatile __bit                   RF7PPS4             __at(0xF1FC);	// @ (0x1E3F * 8 + 4)
#define                                 RF7PPS4_bit         _BIT_ACCESS(RF7PPS,4)
// RF7PPS<RF7PPS5>
extern volatile __bit                   RF7PPS5             __at(0xF1FD);	// @ (0x1E3F * 8 + 5)
#define                                 RF7PPS5_bit         _BIT_ACCESS(RF7PPS,5)
// PORTG<RG0>
extern volatile __bit                   RG0                 __at(0x6460);	// @ (0xC8C * 8 + 0)
#define                                 RG0_bit             _BIT_ACCESS(PORTG,0)
// RG0PPS<RG0PPS0>
extern volatile __bit                   RG0PPS0             __at(0xF200);	// @ (0x1E40 * 8 + 0)
#define                                 RG0PPS0_bit         _BIT_ACCESS(RG0PPS,0)
// RG0PPS<RG0PPS1>
extern volatile __bit                   RG0PPS1             __at(0xF201);	// @ (0x1E40 * 8 + 1)
#define                                 RG0PPS1_bit         _BIT_ACCESS(RG0PPS,1)
// RG0PPS<RG0PPS2>
extern volatile __bit                   RG0PPS2             __at(0xF202);	// @ (0x1E40 * 8 + 2)
#define                                 RG0PPS2_bit         _BIT_ACCESS(RG0PPS,2)
// RG0PPS<RG0PPS3>
extern volatile __bit                   RG0PPS3             __at(0xF203);	// @ (0x1E40 * 8 + 3)
#define                                 RG0PPS3_bit         _BIT_ACCESS(RG0PPS,3)
// RG0PPS<RG0PPS4>
extern volatile __bit                   RG0PPS4             __at(0xF204);	// @ (0x1E40 * 8 + 4)
#define                                 RG0PPS4_bit         _BIT_ACCESS(RG0PPS,4)
// RG0PPS<RG0PPS5>
extern volatile __bit                   RG0PPS5             __at(0xF205);	// @ (0x1E40 * 8 + 5)
#define                                 RG0PPS5_bit         _BIT_ACCESS(RG0PPS,5)
// PORTG<RG1>
extern volatile __bit                   RG1                 __at(0x6461);	// @ (0xC8C * 8 + 1)
#define                                 RG1_bit             _BIT_ACCESS(PORTG,1)
// RG1PPS<RG1PPS0>
extern volatile __bit                   RG1PPS0             __at(0xF208);	// @ (0x1E41 * 8 + 0)
#define                                 RG1PPS0_bit         _BIT_ACCESS(RG1PPS,0)
// RG1PPS<RG1PPS1>
extern volatile __bit                   RG1PPS1             __at(0xF209);	// @ (0x1E41 * 8 + 1)
#define                                 RG1PPS1_bit         _BIT_ACCESS(RG1PPS,1)
// RG1PPS<RG1PPS2>
extern volatile __bit                   RG1PPS2             __at(0xF20A);	// @ (0x1E41 * 8 + 2)
#define                                 RG1PPS2_bit         _BIT_ACCESS(RG1PPS,2)
// RG1PPS<RG1PPS3>
extern volatile __bit                   RG1PPS3             __at(0xF20B);	// @ (0x1E41 * 8 + 3)
#define                                 RG1PPS3_bit         _BIT_ACCESS(RG1PPS,3)
// RG1PPS<RG1PPS4>
extern volatile __bit                   RG1PPS4             __at(0xF20C);	// @ (0x1E41 * 8 + 4)
#define                                 RG1PPS4_bit         _BIT_ACCESS(RG1PPS,4)
// RG1PPS<RG1PPS5>
extern volatile __bit                   RG1PPS5             __at(0xF20D);	// @ (0x1E41 * 8 + 5)
#define                                 RG1PPS5_bit         _BIT_ACCESS(RG1PPS,5)
// PORTG<RG2>
extern volatile __bit                   RG2                 __at(0x6462);	// @ (0xC8C * 8 + 2)
#define                                 RG2_bit             _BIT_ACCESS(PORTG,2)
// RG2PPS<RG2PPS0>
extern volatile __bit                   RG2PPS0             __at(0xF210);	// @ (0x1E42 * 8 + 0)
#define                                 RG2PPS0_bit         _BIT_ACCESS(RG2PPS,0)
// RG2PPS<RG2PPS1>
extern volatile __bit                   RG2PPS1             __at(0xF211);	// @ (0x1E42 * 8 + 1)
#define                                 RG2PPS1_bit         _BIT_ACCESS(RG2PPS,1)
// RG2PPS<RG2PPS2>
extern volatile __bit                   RG2PPS2             __at(0xF212);	// @ (0x1E42 * 8 + 2)
#define                                 RG2PPS2_bit         _BIT_ACCESS(RG2PPS,2)
// RG2PPS<RG2PPS3>
extern volatile __bit                   RG2PPS3             __at(0xF213);	// @ (0x1E42 * 8 + 3)
#define                                 RG2PPS3_bit         _BIT_ACCESS(RG2PPS,3)
// RG2PPS<RG2PPS4>
extern volatile __bit                   RG2PPS4             __at(0xF214);	// @ (0x1E42 * 8 + 4)
#define                                 RG2PPS4_bit         _BIT_ACCESS(RG2PPS,4)
// RG2PPS<RG2PPS5>
extern volatile __bit                   RG2PPS5             __at(0xF215);	// @ (0x1E42 * 8 + 5)
#define                                 RG2PPS5_bit         _BIT_ACCESS(RG2PPS,5)
// PORTG<RG3>
extern volatile __bit                   RG3                 __at(0x6463);	// @ (0xC8C * 8 + 3)
#define                                 RG3_bit             _BIT_ACCESS(PORTG,3)
// RG3PPS<RG3PPS0>
extern volatile __bit                   RG3PPS0             __at(0xF218);	// @ (0x1E43 * 8 + 0)
#define                                 RG3PPS0_bit         _BIT_ACCESS(RG3PPS,0)
// RG3PPS<RG3PPS1>
extern volatile __bit                   RG3PPS1             __at(0xF219);	// @ (0x1E43 * 8 + 1)
#define                                 RG3PPS1_bit         _BIT_ACCESS(RG3PPS,1)
// RG3PPS<RG3PPS2>
extern volatile __bit                   RG3PPS2             __at(0xF21A);	// @ (0x1E43 * 8 + 2)
#define                                 RG3PPS2_bit         _BIT_ACCESS(RG3PPS,2)
// RG3PPS<RG3PPS3>
extern volatile __bit                   RG3PPS3             __at(0xF21B);	// @ (0x1E43 * 8 + 3)
#define                                 RG3PPS3_bit         _BIT_ACCESS(RG3PPS,3)
// RG3PPS<RG3PPS4>
extern volatile __bit                   RG3PPS4             __at(0xF21C);	// @ (0x1E43 * 8 + 4)
#define                                 RG3PPS4_bit         _BIT_ACCESS(RG3PPS,4)
// RG3PPS<RG3PPS5>
extern volatile __bit                   RG3PPS5             __at(0xF21D);	// @ (0x1E43 * 8 + 5)
#define                                 RG3PPS5_bit         _BIT_ACCESS(RG3PPS,5)
// PORTG<RG4>
extern volatile __bit                   RG4                 __at(0x6464);	// @ (0xC8C * 8 + 4)
#define                                 RG4_bit             _BIT_ACCESS(PORTG,4)
// RG4PPS<RG4PPS0>
extern volatile __bit                   RG4PPS0             __at(0xF220);	// @ (0x1E44 * 8 + 0)
#define                                 RG4PPS0_bit         _BIT_ACCESS(RG4PPS,0)
// RG4PPS<RG4PPS1>
extern volatile __bit                   RG4PPS1             __at(0xF221);	// @ (0x1E44 * 8 + 1)
#define                                 RG4PPS1_bit         _BIT_ACCESS(RG4PPS,1)
// RG4PPS<RG4PPS2>
extern volatile __bit                   RG4PPS2             __at(0xF222);	// @ (0x1E44 * 8 + 2)
#define                                 RG4PPS2_bit         _BIT_ACCESS(RG4PPS,2)
// RG4PPS<RG4PPS3>
extern volatile __bit                   RG4PPS3             __at(0xF223);	// @ (0x1E44 * 8 + 3)
#define                                 RG4PPS3_bit         _BIT_ACCESS(RG4PPS,3)
// RG4PPS<RG4PPS4>
extern volatile __bit                   RG4PPS4             __at(0xF224);	// @ (0x1E44 * 8 + 4)
#define                                 RG4PPS4_bit         _BIT_ACCESS(RG4PPS,4)
// RG4PPS<RG4PPS5>
extern volatile __bit                   RG4PPS5             __at(0xF225);	// @ (0x1E44 * 8 + 5)
#define                                 RG4PPS5_bit         _BIT_ACCESS(RG4PPS,5)
// PORTG<RG5>
extern volatile __bit                   RG5                 __at(0x6465);	// @ (0xC8C * 8 + 5)
#define                                 RG5_bit             _BIT_ACCESS(PORTG,5)
// PORTG<RG6>
extern volatile __bit                   RG6                 __at(0x6466);	// @ (0xC8C * 8 + 6)
#define                                 RG6_bit             _BIT_ACCESS(PORTG,6)
// RG6PPS<RG6PPS0>
extern volatile __bit                   RG6PPS0             __at(0xF230);	// @ (0x1E46 * 8 + 0)
#define                                 RG6PPS0_bit         _BIT_ACCESS(RG6PPS,0)
// RG6PPS<RG6PPS1>
extern volatile __bit                   RG6PPS1             __at(0xF231);	// @ (0x1E46 * 8 + 1)
#define                                 RG6PPS1_bit         _BIT_ACCESS(RG6PPS,1)
// RG6PPS<RG6PPS2>
extern volatile __bit                   RG6PPS2             __at(0xF232);	// @ (0x1E46 * 8 + 2)
#define                                 RG6PPS2_bit         _BIT_ACCESS(RG6PPS,2)
// RG6PPS<RG6PPS3>
extern volatile __bit                   RG6PPS3             __at(0xF233);	// @ (0x1E46 * 8 + 3)
#define                                 RG6PPS3_bit         _BIT_ACCESS(RG6PPS,3)
// RG6PPS<RG6PPS4>
extern volatile __bit                   RG6PPS4             __at(0xF234);	// @ (0x1E46 * 8 + 4)
#define                                 RG6PPS4_bit         _BIT_ACCESS(RG6PPS,4)
// RG6PPS<RG6PPS5>
extern volatile __bit                   RG6PPS5             __at(0xF235);	// @ (0x1E46 * 8 + 5)
#define                                 RG6PPS5_bit         _BIT_ACCESS(RG6PPS,5)
// PORTG<RG7>
extern volatile __bit                   RG7                 __at(0x6467);	// @ (0xC8C * 8 + 7)
#define                                 RG7_bit             _BIT_ACCESS(PORTG,7)
// RG7PPS<RG7PPS0>
extern volatile __bit                   RG7PPS0             __at(0xF238);	// @ (0x1E47 * 8 + 0)
#define                                 RG7PPS0_bit         _BIT_ACCESS(RG7PPS,0)
// RG7PPS<RG7PPS1>
extern volatile __bit                   RG7PPS1             __at(0xF239);	// @ (0x1E47 * 8 + 1)
#define                                 RG7PPS1_bit         _BIT_ACCESS(RG7PPS,1)
// RG7PPS<RG7PPS2>
extern volatile __bit                   RG7PPS2             __at(0xF23A);	// @ (0x1E47 * 8 + 2)
#define                                 RG7PPS2_bit         _BIT_ACCESS(RG7PPS,2)
// RG7PPS<RG7PPS3>
extern volatile __bit                   RG7PPS3             __at(0xF23B);	// @ (0x1E47 * 8 + 3)
#define                                 RG7PPS3_bit         _BIT_ACCESS(RG7PPS,3)
// RG7PPS<RG7PPS4>
extern volatile __bit                   RG7PPS4             __at(0xF23C);	// @ (0x1E47 * 8 + 4)
#define                                 RG7PPS4_bit         _BIT_ACCESS(RG7PPS,4)
// RG7PPS<RG7PPS5>
extern volatile __bit                   RG7PPS5             __at(0xF23D);	// @ (0x1E47 * 8 + 5)
#define                                 RG7PPS5_bit         _BIT_ACCESS(RG7PPS,5)
// PORTH<RH0>
extern volatile __bit                   RH0                 __at(0x6468);	// @ (0xC8D * 8 + 0)
#define                                 RH0_bit             _BIT_ACCESS(PORTH,0)
// RH0PPS<RH0PPS0>
extern volatile __bit                   RH0PPS0             __at(0xF240);	// @ (0x1E48 * 8 + 0)
#define                                 RH0PPS0_bit         _BIT_ACCESS(RH0PPS,0)
// RH0PPS<RH0PPS1>
extern volatile __bit                   RH0PPS1             __at(0xF241);	// @ (0x1E48 * 8 + 1)
#define                                 RH0PPS1_bit         _BIT_ACCESS(RH0PPS,1)
// RH0PPS<RH0PPS2>
extern volatile __bit                   RH0PPS2             __at(0xF242);	// @ (0x1E48 * 8 + 2)
#define                                 RH0PPS2_bit         _BIT_ACCESS(RH0PPS,2)
// RH0PPS<RH0PPS3>
extern volatile __bit                   RH0PPS3             __at(0xF243);	// @ (0x1E48 * 8 + 3)
#define                                 RH0PPS3_bit         _BIT_ACCESS(RH0PPS,3)
// RH0PPS<RH0PPS4>
extern volatile __bit                   RH0PPS4             __at(0xF244);	// @ (0x1E48 * 8 + 4)
#define                                 RH0PPS4_bit         _BIT_ACCESS(RH0PPS,4)
// RH0PPS<RH0PPS5>
extern volatile __bit                   RH0PPS5             __at(0xF245);	// @ (0x1E48 * 8 + 5)
#define                                 RH0PPS5_bit         _BIT_ACCESS(RH0PPS,5)
// PORTH<RH1>
extern volatile __bit                   RH1                 __at(0x6469);	// @ (0xC8D * 8 + 1)
#define                                 RH1_bit             _BIT_ACCESS(PORTH,1)
// RH1PPS<RH1PPS0>
extern volatile __bit                   RH1PPS0             __at(0xF248);	// @ (0x1E49 * 8 + 0)
#define                                 RH1PPS0_bit         _BIT_ACCESS(RH1PPS,0)
// RH1PPS<RH1PPS1>
extern volatile __bit                   RH1PPS1             __at(0xF249);	// @ (0x1E49 * 8 + 1)
#define                                 RH1PPS1_bit         _BIT_ACCESS(RH1PPS,1)
// RH1PPS<RH1PPS2>
extern volatile __bit                   RH1PPS2             __at(0xF24A);	// @ (0x1E49 * 8 + 2)
#define                                 RH1PPS2_bit         _BIT_ACCESS(RH1PPS,2)
// RH1PPS<RH1PPS3>
extern volatile __bit                   RH1PPS3             __at(0xF24B);	// @ (0x1E49 * 8 + 3)
#define                                 RH1PPS3_bit         _BIT_ACCESS(RH1PPS,3)
// RH1PPS<RH1PPS4>
extern volatile __bit                   RH1PPS4             __at(0xF24C);	// @ (0x1E49 * 8 + 4)
#define                                 RH1PPS4_bit         _BIT_ACCESS(RH1PPS,4)
// RH1PPS<RH1PPS5>
extern volatile __bit                   RH1PPS5             __at(0xF24D);	// @ (0x1E49 * 8 + 5)
#define                                 RH1PPS5_bit         _BIT_ACCESS(RH1PPS,5)
// PORTH<RH2>
extern volatile __bit                   RH2                 __at(0x646A);	// @ (0xC8D * 8 + 2)
#define                                 RH2_bit             _BIT_ACCESS(PORTH,2)
// RH2PPS<RH2PPS0>
extern volatile __bit                   RH2PPS0             __at(0xF250);	// @ (0x1E4A * 8 + 0)
#define                                 RH2PPS0_bit         _BIT_ACCESS(RH2PPS,0)
// RH2PPS<RH2PPS1>
extern volatile __bit                   RH2PPS1             __at(0xF251);	// @ (0x1E4A * 8 + 1)
#define                                 RH2PPS1_bit         _BIT_ACCESS(RH2PPS,1)
// RH2PPS<RH2PPS2>
extern volatile __bit                   RH2PPS2             __at(0xF252);	// @ (0x1E4A * 8 + 2)
#define                                 RH2PPS2_bit         _BIT_ACCESS(RH2PPS,2)
// RH2PPS<RH2PPS3>
extern volatile __bit                   RH2PPS3             __at(0xF253);	// @ (0x1E4A * 8 + 3)
#define                                 RH2PPS3_bit         _BIT_ACCESS(RH2PPS,3)
// RH2PPS<RH2PPS4>
extern volatile __bit                   RH2PPS4             __at(0xF254);	// @ (0x1E4A * 8 + 4)
#define                                 RH2PPS4_bit         _BIT_ACCESS(RH2PPS,4)
// RH2PPS<RH2PPS5>
extern volatile __bit                   RH2PPS5             __at(0xF255);	// @ (0x1E4A * 8 + 5)
#define                                 RH2PPS5_bit         _BIT_ACCESS(RH2PPS,5)
// PORTH<RH3>
extern volatile __bit                   RH3                 __at(0x646B);	// @ (0xC8D * 8 + 3)
#define                                 RH3_bit             _BIT_ACCESS(PORTH,3)
// RH3PPS<RH3PPS0>
extern volatile __bit                   RH3PPS0             __at(0xF258);	// @ (0x1E4B * 8 + 0)
#define                                 RH3PPS0_bit         _BIT_ACCESS(RH3PPS,0)
// RH3PPS<RH3PPS1>
extern volatile __bit                   RH3PPS1             __at(0xF259);	// @ (0x1E4B * 8 + 1)
#define                                 RH3PPS1_bit         _BIT_ACCESS(RH3PPS,1)
// RH3PPS<RH3PPS2>
extern volatile __bit                   RH3PPS2             __at(0xF25A);	// @ (0x1E4B * 8 + 2)
#define                                 RH3PPS2_bit         _BIT_ACCESS(RH3PPS,2)
// RH3PPS<RH3PPS3>
extern volatile __bit                   RH3PPS3             __at(0xF25B);	// @ (0x1E4B * 8 + 3)
#define                                 RH3PPS3_bit         _BIT_ACCESS(RH3PPS,3)
// RH3PPS<RH3PPS4>
extern volatile __bit                   RH3PPS4             __at(0xF25C);	// @ (0x1E4B * 8 + 4)
#define                                 RH3PPS4_bit         _BIT_ACCESS(RH3PPS,4)
// RH3PPS<RH3PPS5>
extern volatile __bit                   RH3PPS5             __at(0xF25D);	// @ (0x1E4B * 8 + 5)
#define                                 RH3PPS5_bit         _BIT_ACCESS(RH3PPS,5)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x4465);	// @ (0x88C * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// ADRPT<RPT0>
extern volatile __bit                   RPT0                __at(0x4D0);	// @ (0x9A * 8 + 0)
#define                                 RPT0_bit            _BIT_ACCESS(ADRPT,0)
// ADRPT<RPT1>
extern volatile __bit                   RPT1                __at(0x4D1);	// @ (0x9A * 8 + 1)
#define                                 RPT1_bit            _BIT_ACCESS(ADRPT,1)
// ADRPT<RPT2>
extern volatile __bit                   RPT2                __at(0x4D2);	// @ (0x9A * 8 + 2)
#define                                 RPT2_bit            _BIT_ACCESS(ADRPT,2)
// ADRPT<RPT3>
extern volatile __bit                   RPT3                __at(0x4D3);	// @ (0x9A * 8 + 3)
#define                                 RPT3_bit            _BIT_ACCESS(ADRPT,3)
// ADRPT<RPT4>
extern volatile __bit                   RPT4                __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 RPT4_bit            _BIT_ACCESS(ADRPT,4)
// ADRPT<RPT5>
extern volatile __bit                   RPT5                __at(0x4D5);	// @ (0x9A * 8 + 5)
#define                                 RPT5_bit            _BIT_ACCESS(ADRPT,5)
// ADRPT<RPT6>
extern volatile __bit                   RPT6                __at(0x4D6);	// @ (0x9A * 8 + 6)
#define                                 RPT6_bit            _BIT_ACCESS(ADRPT,6)
// ADRPT<RPT7>
extern volatile __bit                   RPT7                __at(0x4D7);	// @ (0x9A * 8 + 7)
#define                                 RPT7_bit            _BIT_ACCESS(ADRPT,7)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0xC89);	// @ (0x191 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SMT1STAT<RST>
extern volatile __bit                   RST                 __at(0x24D5);	// @ (0x49A * 8 + 5)
#define                                 RST_bit             _BIT_ACCESS(SMT1STAT,5)
// PIE8<RTCCIE>
extern volatile __bit                   RTCCIE              __at(0x38F6);	// @ (0x71E * 8 + 6)
#define                                 RTCCIE_bit          _BIT_ACCESS(PIE8,6)
// PIR8<RTCCIF>
extern volatile __bit                   RTCCIF              __at(0x38A6);	// @ (0x714 * 8 + 6)
#define                                 RTCCIF_bit          _BIT_ACCESS(PIR8,6)
// RTCCON<RTCCLKSEL0>
extern volatile __bit                   RTCCLKSEL0          __at(0x6060);	// @ (0xC0C * 8 + 0)
#define                                 RTCCLKSEL0_bit      _BIT_ACCESS(RTCCON,0)
// RTCCON<RTCCLKSEL1>
extern volatile __bit                   RTCCLKSEL1          __at(0x6061);	// @ (0xC0C * 8 + 1)
#define                                 RTCCLKSEL1_bit      _BIT_ACCESS(RTCCON,1)
// PMD2<RTCCMD>
extern volatile __bit                   RTCCMD              __at(0x3CC7);	// @ (0x798 * 8 + 7)
#define                                 RTCCMD_bit          _BIT_ACCESS(PMD2,7)
// RTCCON<RTCEN>
extern volatile __bit                   RTCEN               __at(0x6067);	// @ (0xC0C * 8 + 7)
#define                                 RTCEN_bit           _BIT_ACCESS(RTCCON,7)
// RTCCON<RTCSYNC>
extern volatile __bit                   RTCSYNC             __at(0x6064);	// @ (0xC0C * 8 + 4)
#define                                 RTCSYNC_bit         _BIT_ACCESS(RTCCON,4)
// RTCCON<RTCWREN>
extern volatile __bit                   RTCWREN             __at(0x6065);	// @ (0xC0C * 8 + 5)
#define                                 RTCWREN_bit         _BIT_ACCESS(RTCCON,5)
// SSP1STAT<RW>
extern volatile __bit                   RW                  __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// RX1PPS<RX1PPS0>
extern volatile __bit                   RX1PPS0             __at(0xF658);	// @ (0x1ECB * 8 + 0)
#define                                 RX1PPS0_bit         _BIT_ACCESS(RX1PPS,0)
// RX1PPS<RX1PPS1>
extern volatile __bit                   RX1PPS1             __at(0xF659);	// @ (0x1ECB * 8 + 1)
#define                                 RX1PPS1_bit         _BIT_ACCESS(RX1PPS,1)
// RX1PPS<RX1PPS2>
extern volatile __bit                   RX1PPS2             __at(0xF65A);	// @ (0x1ECB * 8 + 2)
#define                                 RX1PPS2_bit         _BIT_ACCESS(RX1PPS,2)
// RX1PPS<RX1PPS3>
extern volatile __bit                   RX1PPS3             __at(0xF65B);	// @ (0x1ECB * 8 + 3)
#define                                 RX1PPS3_bit         _BIT_ACCESS(RX1PPS,3)
// RX1PPS<RX1PPS4>
extern volatile __bit                   RX1PPS4             __at(0xF65C);	// @ (0x1ECB * 8 + 4)
#define                                 RX1PPS4_bit         _BIT_ACCESS(RX1PPS,4)
// RX2PPS<RX2PPS0>
extern volatile __bit                   RX2PPS0             __at(0xF668);	// @ (0x1ECD * 8 + 0)
#define                                 RX2PPS0_bit         _BIT_ACCESS(RX2PPS,0)
// RX2PPS<RX2PPS1>
extern volatile __bit                   RX2PPS1             __at(0xF669);	// @ (0x1ECD * 8 + 1)
#define                                 RX2PPS1_bit         _BIT_ACCESS(RX2PPS,1)
// RX2PPS<RX2PPS2>
extern volatile __bit                   RX2PPS2             __at(0xF66A);	// @ (0x1ECD * 8 + 2)
#define                                 RX2PPS2_bit         _BIT_ACCESS(RX2PPS,2)
// RX2PPS<RX2PPS3>
extern volatile __bit                   RX2PPS3             __at(0xF66B);	// @ (0x1ECD * 8 + 3)
#define                                 RX2PPS3_bit         _BIT_ACCESS(RX2PPS,3)
// RX2PPS<RX2PPS4>
extern volatile __bit                   RX2PPS4             __at(0xF66C);	// @ (0x1ECD * 8 + 4)
#define                                 RX2PPS4_bit         _BIT_ACCESS(RX2PPS,4)
// SSP1STAT<R_W>
extern volatile __bit                   R_W                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// LCDDATA0<S00C0>
extern volatile __bit                   S00C0               __at(0xE8C0);	// @ (0x1D18 * 8 + 0)
#define                                 S00C0_bit           _BIT_ACCESS(LCDDATA0,0)
// LCDDATA6<S00C1>
extern volatile __bit                   S00C1               __at(0xE8F0);	// @ (0x1D1E * 8 + 0)
#define                                 S00C1_bit           _BIT_ACCESS(LCDDATA6,0)
// LCDDATA12<S00C2>
extern volatile __bit                   S00C2               __at(0xE920);	// @ (0x1D24 * 8 + 0)
#define                                 S00C2_bit           _BIT_ACCESS(LCDDATA12,0)
// LCDDATA18<S00C3>
extern volatile __bit                   S00C3               __at(0xE950);	// @ (0x1D2A * 8 + 0)
#define                                 S00C3_bit           _BIT_ACCESS(LCDDATA18,0)
// LCDDATA24<S00C4>
extern volatile __bit                   S00C4               __at(0xE980);	// @ (0x1D30 * 8 + 0)
#define                                 S00C4_bit           _BIT_ACCESS(LCDDATA24,0)
// LCDDATA30<S00C5>
extern volatile __bit                   S00C5               __at(0xE9B0);	// @ (0x1D36 * 8 + 0)
#define                                 S00C5_bit           _BIT_ACCESS(LCDDATA30,0)
// LCDDATA36<S00C6>
extern volatile __bit                   S00C6               __at(0xE9E0);	// @ (0x1D3C * 8 + 0)
#define                                 S00C6_bit           _BIT_ACCESS(LCDDATA36,0)
// LCDDATA42<S00C7>
extern volatile __bit                   S00C7               __at(0xEA10);	// @ (0x1D42 * 8 + 0)
#define                                 S00C7_bit           _BIT_ACCESS(LCDDATA42,0)
// LCDDATA0<S01C0>
extern volatile __bit                   S01C0               __at(0xE8C1);	// @ (0x1D18 * 8 + 1)
#define                                 S01C0_bit           _BIT_ACCESS(LCDDATA0,1)
// LCDDATA6<S01C1>
extern volatile __bit                   S01C1               __at(0xE8F1);	// @ (0x1D1E * 8 + 1)
#define                                 S01C1_bit           _BIT_ACCESS(LCDDATA6,1)
// LCDDATA12<S01C2>
extern volatile __bit                   S01C2               __at(0xE921);	// @ (0x1D24 * 8 + 1)
#define                                 S01C2_bit           _BIT_ACCESS(LCDDATA12,1)
// LCDDATA18<S01C3>
extern volatile __bit                   S01C3               __at(0xE951);	// @ (0x1D2A * 8 + 1)
#define                                 S01C3_bit           _BIT_ACCESS(LCDDATA18,1)
// LCDDATA24<S01C4>
extern volatile __bit                   S01C4               __at(0xE981);	// @ (0x1D30 * 8 + 1)
#define                                 S01C4_bit           _BIT_ACCESS(LCDDATA24,1)
// LCDDATA30<S01C5>
extern volatile __bit                   S01C5               __at(0xE9B1);	// @ (0x1D36 * 8 + 1)
#define                                 S01C5_bit           _BIT_ACCESS(LCDDATA30,1)
// LCDDATA36<S01C6>
extern volatile __bit                   S01C6               __at(0xE9E1);	// @ (0x1D3C * 8 + 1)
#define                                 S01C6_bit           _BIT_ACCESS(LCDDATA36,1)
// LCDDATA42<S01C7>
extern volatile __bit                   S01C7               __at(0xEA11);	// @ (0x1D42 * 8 + 1)
#define                                 S01C7_bit           _BIT_ACCESS(LCDDATA42,1)
// LCDDATA0<S02C0>
extern volatile __bit                   S02C0               __at(0xE8C2);	// @ (0x1D18 * 8 + 2)
#define                                 S02C0_bit           _BIT_ACCESS(LCDDATA0,2)
// LCDDATA6<S02C1>
extern volatile __bit                   S02C1               __at(0xE8F2);	// @ (0x1D1E * 8 + 2)
#define                                 S02C1_bit           _BIT_ACCESS(LCDDATA6,2)
// LCDDATA12<S02C2>
extern volatile __bit                   S02C2               __at(0xE922);	// @ (0x1D24 * 8 + 2)
#define                                 S02C2_bit           _BIT_ACCESS(LCDDATA12,2)
// LCDDATA18<S02C3>
extern volatile __bit                   S02C3               __at(0xE952);	// @ (0x1D2A * 8 + 2)
#define                                 S02C3_bit           _BIT_ACCESS(LCDDATA18,2)
// LCDDATA24<S02C4>
extern volatile __bit                   S02C4               __at(0xE982);	// @ (0x1D30 * 8 + 2)
#define                                 S02C4_bit           _BIT_ACCESS(LCDDATA24,2)
// LCDDATA30<S02C5>
extern volatile __bit                   S02C5               __at(0xE9B2);	// @ (0x1D36 * 8 + 2)
#define                                 S02C5_bit           _BIT_ACCESS(LCDDATA30,2)
// LCDDATA36<S02C6>
extern volatile __bit                   S02C6               __at(0xE9E2);	// @ (0x1D3C * 8 + 2)
#define                                 S02C6_bit           _BIT_ACCESS(LCDDATA36,2)
// LCDDATA42<S02C7>
extern volatile __bit                   S02C7               __at(0xEA12);	// @ (0x1D42 * 8 + 2)
#define                                 S02C7_bit           _BIT_ACCESS(LCDDATA42,2)
// LCDDATA0<S03C0>
extern volatile __bit                   S03C0               __at(0xE8C3);	// @ (0x1D18 * 8 + 3)
#define                                 S03C0_bit           _BIT_ACCESS(LCDDATA0,3)
// LCDDATA6<S03C1>
extern volatile __bit                   S03C1               __at(0xE8F3);	// @ (0x1D1E * 8 + 3)
#define                                 S03C1_bit           _BIT_ACCESS(LCDDATA6,3)
// LCDDATA12<S03C2>
extern volatile __bit                   S03C2               __at(0xE923);	// @ (0x1D24 * 8 + 3)
#define                                 S03C2_bit           _BIT_ACCESS(LCDDATA12,3)
// LCDDATA18<S03C3>
extern volatile __bit                   S03C3               __at(0xE953);	// @ (0x1D2A * 8 + 3)
#define                                 S03C3_bit           _BIT_ACCESS(LCDDATA18,3)
// LCDDATA24<S03C4>
extern volatile __bit                   S03C4               __at(0xE983);	// @ (0x1D30 * 8 + 3)
#define                                 S03C4_bit           _BIT_ACCESS(LCDDATA24,3)
// LCDDATA30<S03C5>
extern volatile __bit                   S03C5               __at(0xE9B3);	// @ (0x1D36 * 8 + 3)
#define                                 S03C5_bit           _BIT_ACCESS(LCDDATA30,3)
// LCDDATA36<S03C6>
extern volatile __bit                   S03C6               __at(0xE9E3);	// @ (0x1D3C * 8 + 3)
#define                                 S03C6_bit           _BIT_ACCESS(LCDDATA36,3)
// LCDDATA42<S03C7>
extern volatile __bit                   S03C7               __at(0xEA13);	// @ (0x1D42 * 8 + 3)
#define                                 S03C7_bit           _BIT_ACCESS(LCDDATA42,3)
// LCDDATA0<S04C0>
extern volatile __bit                   S04C0               __at(0xE8C4);	// @ (0x1D18 * 8 + 4)
#define                                 S04C0_bit           _BIT_ACCESS(LCDDATA0,4)
// LCDDATA6<S04C1>
extern volatile __bit                   S04C1               __at(0xE8F4);	// @ (0x1D1E * 8 + 4)
#define                                 S04C1_bit           _BIT_ACCESS(LCDDATA6,4)
// LCDDATA12<S04C2>
extern volatile __bit                   S04C2               __at(0xE924);	// @ (0x1D24 * 8 + 4)
#define                                 S04C2_bit           _BIT_ACCESS(LCDDATA12,4)
// LCDDATA18<S04C3>
extern volatile __bit                   S04C3               __at(0xE954);	// @ (0x1D2A * 8 + 4)
#define                                 S04C3_bit           _BIT_ACCESS(LCDDATA18,4)
// LCDDATA24<S04C4>
extern volatile __bit                   S04C4               __at(0xE984);	// @ (0x1D30 * 8 + 4)
#define                                 S04C4_bit           _BIT_ACCESS(LCDDATA24,4)
// LCDDATA30<S04C5>
extern volatile __bit                   S04C5               __at(0xE9B4);	// @ (0x1D36 * 8 + 4)
#define                                 S04C5_bit           _BIT_ACCESS(LCDDATA30,4)
// LCDDATA36<S04C6>
extern volatile __bit                   S04C6               __at(0xE9E4);	// @ (0x1D3C * 8 + 4)
#define                                 S04C6_bit           _BIT_ACCESS(LCDDATA36,4)
// LCDDATA42<S04C7>
extern volatile __bit                   S04C7               __at(0xEA14);	// @ (0x1D42 * 8 + 4)
#define                                 S04C7_bit           _BIT_ACCESS(LCDDATA42,4)
// LCDDATA0<S05C0>
extern volatile __bit                   S05C0               __at(0xE8C5);	// @ (0x1D18 * 8 + 5)
#define                                 S05C0_bit           _BIT_ACCESS(LCDDATA0,5)
// LCDDATA6<S05C1>
extern volatile __bit                   S05C1               __at(0xE8F5);	// @ (0x1D1E * 8 + 5)
#define                                 S05C1_bit           _BIT_ACCESS(LCDDATA6,5)
// LCDDATA12<S05C2>
extern volatile __bit                   S05C2               __at(0xE925);	// @ (0x1D24 * 8 + 5)
#define                                 S05C2_bit           _BIT_ACCESS(LCDDATA12,5)
// LCDDATA18<S05C3>
extern volatile __bit                   S05C3               __at(0xE955);	// @ (0x1D2A * 8 + 5)
#define                                 S05C3_bit           _BIT_ACCESS(LCDDATA18,5)
// LCDDATA24<S05C4>
extern volatile __bit                   S05C4               __at(0xE985);	// @ (0x1D30 * 8 + 5)
#define                                 S05C4_bit           _BIT_ACCESS(LCDDATA24,5)
// LCDDATA30<S05C5>
extern volatile __bit                   S05C5               __at(0xE9B5);	// @ (0x1D36 * 8 + 5)
#define                                 S05C5_bit           _BIT_ACCESS(LCDDATA30,5)
// LCDDATA36<S05C6>
extern volatile __bit                   S05C6               __at(0xE9E5);	// @ (0x1D3C * 8 + 5)
#define                                 S05C6_bit           _BIT_ACCESS(LCDDATA36,5)
// LCDDATA42<S05C7>
extern volatile __bit                   S05C7               __at(0xEA15);	// @ (0x1D42 * 8 + 5)
#define                                 S05C7_bit           _BIT_ACCESS(LCDDATA42,5)
// LCDDATA0<S06C0>
extern volatile __bit                   S06C0               __at(0xE8C6);	// @ (0x1D18 * 8 + 6)
#define                                 S06C0_bit           _BIT_ACCESS(LCDDATA0,6)
// LCDDATA6<S06C1>
extern volatile __bit                   S06C1               __at(0xE8F6);	// @ (0x1D1E * 8 + 6)
#define                                 S06C1_bit           _BIT_ACCESS(LCDDATA6,6)
// LCDDATA12<S06C2>
extern volatile __bit                   S06C2               __at(0xE926);	// @ (0x1D24 * 8 + 6)
#define                                 S06C2_bit           _BIT_ACCESS(LCDDATA12,6)
// LCDDATA18<S06C3>
extern volatile __bit                   S06C3               __at(0xE956);	// @ (0x1D2A * 8 + 6)
#define                                 S06C3_bit           _BIT_ACCESS(LCDDATA18,6)
// LCDDATA24<S06C4>
extern volatile __bit                   S06C4               __at(0xE986);	// @ (0x1D30 * 8 + 6)
#define                                 S06C4_bit           _BIT_ACCESS(LCDDATA24,6)
// LCDDATA30<S06C5>
extern volatile __bit                   S06C5               __at(0xE9B6);	// @ (0x1D36 * 8 + 6)
#define                                 S06C5_bit           _BIT_ACCESS(LCDDATA30,6)
// LCDDATA36<S06C6>
extern volatile __bit                   S06C6               __at(0xE9E6);	// @ (0x1D3C * 8 + 6)
#define                                 S06C6_bit           _BIT_ACCESS(LCDDATA36,6)
// LCDDATA42<S06C7>
extern volatile __bit                   S06C7               __at(0xEA16);	// @ (0x1D42 * 8 + 6)
#define                                 S06C7_bit           _BIT_ACCESS(LCDDATA42,6)
// LCDDATA0<S07C0>
extern volatile __bit                   S07C0               __at(0xE8C7);	// @ (0x1D18 * 8 + 7)
#define                                 S07C0_bit           _BIT_ACCESS(LCDDATA0,7)
// LCDDATA6<S07C1>
extern volatile __bit                   S07C1               __at(0xE8F7);	// @ (0x1D1E * 8 + 7)
#define                                 S07C1_bit           _BIT_ACCESS(LCDDATA6,7)
// LCDDATA12<S07C2>
extern volatile __bit                   S07C2               __at(0xE927);	// @ (0x1D24 * 8 + 7)
#define                                 S07C2_bit           _BIT_ACCESS(LCDDATA12,7)
// LCDDATA18<S07C3>
extern volatile __bit                   S07C3               __at(0xE957);	// @ (0x1D2A * 8 + 7)
#define                                 S07C3_bit           _BIT_ACCESS(LCDDATA18,7)
// LCDDATA24<S07C4>
extern volatile __bit                   S07C4               __at(0xE987);	// @ (0x1D30 * 8 + 7)
#define                                 S07C4_bit           _BIT_ACCESS(LCDDATA24,7)
// LCDDATA30<S07C5>
extern volatile __bit                   S07C5               __at(0xE9B7);	// @ (0x1D36 * 8 + 7)
#define                                 S07C5_bit           _BIT_ACCESS(LCDDATA30,7)
// LCDDATA36<S07C6>
extern volatile __bit                   S07C6               __at(0xE9E7);	// @ (0x1D3C * 8 + 7)
#define                                 S07C6_bit           _BIT_ACCESS(LCDDATA36,7)
// LCDDATA42<S07C7>
extern volatile __bit                   S07C7               __at(0xEA17);	// @ (0x1D42 * 8 + 7)
#define                                 S07C7_bit           _BIT_ACCESS(LCDDATA42,7)
// LCDDATA1<S08C0>
extern volatile __bit                   S08C0               __at(0xE8C8);	// @ (0x1D19 * 8 + 0)
#define                                 S08C0_bit           _BIT_ACCESS(LCDDATA1,0)
// LCDDATA7<S08C1>
extern volatile __bit                   S08C1               __at(0xE8F8);	// @ (0x1D1F * 8 + 0)
#define                                 S08C1_bit           _BIT_ACCESS(LCDDATA7,0)
// LCDDATA13<S08C2>
extern volatile __bit                   S08C2               __at(0xE928);	// @ (0x1D25 * 8 + 0)
#define                                 S08C2_bit           _BIT_ACCESS(LCDDATA13,0)
// LCDDATA19<S08C3>
extern volatile __bit                   S08C3               __at(0xE958);	// @ (0x1D2B * 8 + 0)
#define                                 S08C3_bit           _BIT_ACCESS(LCDDATA19,0)
// LCDDATA25<S08C4>
extern volatile __bit                   S08C4               __at(0xE988);	// @ (0x1D31 * 8 + 0)
#define                                 S08C4_bit           _BIT_ACCESS(LCDDATA25,0)
// LCDDATA31<S08C5>
extern volatile __bit                   S08C5               __at(0xE9B8);	// @ (0x1D37 * 8 + 0)
#define                                 S08C5_bit           _BIT_ACCESS(LCDDATA31,0)
// LCDDATA37<S08C6>
extern volatile __bit                   S08C6               __at(0xE9E8);	// @ (0x1D3D * 8 + 0)
#define                                 S08C6_bit           _BIT_ACCESS(LCDDATA37,0)
// LCDDATA43<S08C7>
extern volatile __bit                   S08C7               __at(0xEA18);	// @ (0x1D43 * 8 + 0)
#define                                 S08C7_bit           _BIT_ACCESS(LCDDATA43,0)
// LCDDATA1<S09C0>
extern volatile __bit                   S09C0               __at(0xE8C9);	// @ (0x1D19 * 8 + 1)
#define                                 S09C0_bit           _BIT_ACCESS(LCDDATA1,1)
// LCDDATA7<S09C1>
extern volatile __bit                   S09C1               __at(0xE8F9);	// @ (0x1D1F * 8 + 1)
#define                                 S09C1_bit           _BIT_ACCESS(LCDDATA7,1)
// LCDDATA13<S09C2>
extern volatile __bit                   S09C2               __at(0xE929);	// @ (0x1D25 * 8 + 1)
#define                                 S09C2_bit           _BIT_ACCESS(LCDDATA13,1)
// LCDDATA19<S09C3>
extern volatile __bit                   S09C3               __at(0xE959);	// @ (0x1D2B * 8 + 1)
#define                                 S09C3_bit           _BIT_ACCESS(LCDDATA19,1)
// LCDDATA25<S09C4>
extern volatile __bit                   S09C4               __at(0xE989);	// @ (0x1D31 * 8 + 1)
#define                                 S09C4_bit           _BIT_ACCESS(LCDDATA25,1)
// LCDDATA31<S09C5>
extern volatile __bit                   S09C5               __at(0xE9B9);	// @ (0x1D37 * 8 + 1)
#define                                 S09C5_bit           _BIT_ACCESS(LCDDATA31,1)
// LCDDATA37<S09C6>
extern volatile __bit                   S09C6               __at(0xE9E9);	// @ (0x1D3D * 8 + 1)
#define                                 S09C6_bit           _BIT_ACCESS(LCDDATA37,1)
// LCDDATA43<S09C7>
extern volatile __bit                   S09C7               __at(0xEA19);	// @ (0x1D43 * 8 + 1)
#define                                 S09C7_bit           _BIT_ACCESS(LCDDATA43,1)
// LCDDATA1<S10C0>
extern volatile __bit                   S10C0               __at(0xE8CA);	// @ (0x1D19 * 8 + 2)
#define                                 S10C0_bit           _BIT_ACCESS(LCDDATA1,2)
// LCDDATA7<S10C1>
extern volatile __bit                   S10C1               __at(0xE8FA);	// @ (0x1D1F * 8 + 2)
#define                                 S10C1_bit           _BIT_ACCESS(LCDDATA7,2)
// LCDDATA13<S10C2>
extern volatile __bit                   S10C2               __at(0xE92A);	// @ (0x1D25 * 8 + 2)
#define                                 S10C2_bit           _BIT_ACCESS(LCDDATA13,2)
// LCDDATA19<S10C3>
extern volatile __bit                   S10C3               __at(0xE95A);	// @ (0x1D2B * 8 + 2)
#define                                 S10C3_bit           _BIT_ACCESS(LCDDATA19,2)
// LCDDATA25<S10C4>
extern volatile __bit                   S10C4               __at(0xE98A);	// @ (0x1D31 * 8 + 2)
#define                                 S10C4_bit           _BIT_ACCESS(LCDDATA25,2)
// LCDDATA31<S10C5>
extern volatile __bit                   S10C5               __at(0xE9BA);	// @ (0x1D37 * 8 + 2)
#define                                 S10C5_bit           _BIT_ACCESS(LCDDATA31,2)
// LCDDATA37<S10C6>
extern volatile __bit                   S10C6               __at(0xE9EA);	// @ (0x1D3D * 8 + 2)
#define                                 S10C6_bit           _BIT_ACCESS(LCDDATA37,2)
// LCDDATA43<S10C7>
extern volatile __bit                   S10C7               __at(0xEA1A);	// @ (0x1D43 * 8 + 2)
#define                                 S10C7_bit           _BIT_ACCESS(LCDDATA43,2)
// LCDDATA1<S11C0>
extern volatile __bit                   S11C0               __at(0xE8CB);	// @ (0x1D19 * 8 + 3)
#define                                 S11C0_bit           _BIT_ACCESS(LCDDATA1,3)
// LCDDATA7<S11C1>
extern volatile __bit                   S11C1               __at(0xE8FB);	// @ (0x1D1F * 8 + 3)
#define                                 S11C1_bit           _BIT_ACCESS(LCDDATA7,3)
// LCDDATA13<S11C2>
extern volatile __bit                   S11C2               __at(0xE92B);	// @ (0x1D25 * 8 + 3)
#define                                 S11C2_bit           _BIT_ACCESS(LCDDATA13,3)
// LCDDATA19<S11C3>
extern volatile __bit                   S11C3               __at(0xE95B);	// @ (0x1D2B * 8 + 3)
#define                                 S11C3_bit           _BIT_ACCESS(LCDDATA19,3)
// LCDDATA25<S11C4>
extern volatile __bit                   S11C4               __at(0xE98B);	// @ (0x1D31 * 8 + 3)
#define                                 S11C4_bit           _BIT_ACCESS(LCDDATA25,3)
// LCDDATA31<S11C5>
extern volatile __bit                   S11C5               __at(0xE9BB);	// @ (0x1D37 * 8 + 3)
#define                                 S11C5_bit           _BIT_ACCESS(LCDDATA31,3)
// LCDDATA37<S11C6>
extern volatile __bit                   S11C6               __at(0xE9EB);	// @ (0x1D3D * 8 + 3)
#define                                 S11C6_bit           _BIT_ACCESS(LCDDATA37,3)
// LCDDATA43<S11C7>
extern volatile __bit                   S11C7               __at(0xEA1B);	// @ (0x1D43 * 8 + 3)
#define                                 S11C7_bit           _BIT_ACCESS(LCDDATA43,3)
// LCDDATA1<S12C0>
extern volatile __bit                   S12C0               __at(0xE8CC);	// @ (0x1D19 * 8 + 4)
#define                                 S12C0_bit           _BIT_ACCESS(LCDDATA1,4)
// LCDDATA7<S12C1>
extern volatile __bit                   S12C1               __at(0xE8FC);	// @ (0x1D1F * 8 + 4)
#define                                 S12C1_bit           _BIT_ACCESS(LCDDATA7,4)
// LCDDATA13<S12C2>
extern volatile __bit                   S12C2               __at(0xE92C);	// @ (0x1D25 * 8 + 4)
#define                                 S12C2_bit           _BIT_ACCESS(LCDDATA13,4)
// LCDDATA19<S12C3>
extern volatile __bit                   S12C3               __at(0xE95C);	// @ (0x1D2B * 8 + 4)
#define                                 S12C3_bit           _BIT_ACCESS(LCDDATA19,4)
// LCDDATA25<S12C4>
extern volatile __bit                   S12C4               __at(0xE98C);	// @ (0x1D31 * 8 + 4)
#define                                 S12C4_bit           _BIT_ACCESS(LCDDATA25,4)
// LCDDATA31<S12C5>
extern volatile __bit                   S12C5               __at(0xE9BC);	// @ (0x1D37 * 8 + 4)
#define                                 S12C5_bit           _BIT_ACCESS(LCDDATA31,4)
// LCDDATA37<S12C6>
extern volatile __bit                   S12C6               __at(0xE9EC);	// @ (0x1D3D * 8 + 4)
#define                                 S12C6_bit           _BIT_ACCESS(LCDDATA37,4)
// LCDDATA43<S12C7>
extern volatile __bit                   S12C7               __at(0xEA1C);	// @ (0x1D43 * 8 + 4)
#define                                 S12C7_bit           _BIT_ACCESS(LCDDATA43,4)
// LCDDATA1<S13C0>
extern volatile __bit                   S13C0               __at(0xE8CD);	// @ (0x1D19 * 8 + 5)
#define                                 S13C0_bit           _BIT_ACCESS(LCDDATA1,5)
// LCDDATA7<S13C1>
extern volatile __bit                   S13C1               __at(0xE8FD);	// @ (0x1D1F * 8 + 5)
#define                                 S13C1_bit           _BIT_ACCESS(LCDDATA7,5)
// LCDDATA13<S13C2>
extern volatile __bit                   S13C2               __at(0xE92D);	// @ (0x1D25 * 8 + 5)
#define                                 S13C2_bit           _BIT_ACCESS(LCDDATA13,5)
// LCDDATA19<S13C3>
extern volatile __bit                   S13C3               __at(0xE95D);	// @ (0x1D2B * 8 + 5)
#define                                 S13C3_bit           _BIT_ACCESS(LCDDATA19,5)
// LCDDATA25<S13C4>
extern volatile __bit                   S13C4               __at(0xE98D);	// @ (0x1D31 * 8 + 5)
#define                                 S13C4_bit           _BIT_ACCESS(LCDDATA25,5)
// LCDDATA31<S13C5>
extern volatile __bit                   S13C5               __at(0xE9BD);	// @ (0x1D37 * 8 + 5)
#define                                 S13C5_bit           _BIT_ACCESS(LCDDATA31,5)
// LCDDATA37<S13C6>
extern volatile __bit                   S13C6               __at(0xE9ED);	// @ (0x1D3D * 8 + 5)
#define                                 S13C6_bit           _BIT_ACCESS(LCDDATA37,5)
// LCDDATA43<S13C7>
extern volatile __bit                   S13C7               __at(0xEA1D);	// @ (0x1D43 * 8 + 5)
#define                                 S13C7_bit           _BIT_ACCESS(LCDDATA43,5)
// LCDDATA1<S14C0>
extern volatile __bit                   S14C0               __at(0xE8CE);	// @ (0x1D19 * 8 + 6)
#define                                 S14C0_bit           _BIT_ACCESS(LCDDATA1,6)
// LCDDATA7<S14C1>
extern volatile __bit                   S14C1               __at(0xE8FE);	// @ (0x1D1F * 8 + 6)
#define                                 S14C1_bit           _BIT_ACCESS(LCDDATA7,6)
// LCDDATA13<S14C2>
extern volatile __bit                   S14C2               __at(0xE92E);	// @ (0x1D25 * 8 + 6)
#define                                 S14C2_bit           _BIT_ACCESS(LCDDATA13,6)
// LCDDATA19<S14C3>
extern volatile __bit                   S14C3               __at(0xE95E);	// @ (0x1D2B * 8 + 6)
#define                                 S14C3_bit           _BIT_ACCESS(LCDDATA19,6)
// LCDDATA25<S14C4>
extern volatile __bit                   S14C4               __at(0xE98E);	// @ (0x1D31 * 8 + 6)
#define                                 S14C4_bit           _BIT_ACCESS(LCDDATA25,6)
// LCDDATA31<S14C5>
extern volatile __bit                   S14C5               __at(0xE9BE);	// @ (0x1D37 * 8 + 6)
#define                                 S14C5_bit           _BIT_ACCESS(LCDDATA31,6)
// LCDDATA37<S14C6>
extern volatile __bit                   S14C6               __at(0xE9EE);	// @ (0x1D3D * 8 + 6)
#define                                 S14C6_bit           _BIT_ACCESS(LCDDATA37,6)
// LCDDATA43<S14C7>
extern volatile __bit                   S14C7               __at(0xEA1E);	// @ (0x1D43 * 8 + 6)
#define                                 S14C7_bit           _BIT_ACCESS(LCDDATA43,6)
// LCDDATA1<S15C0>
extern volatile __bit                   S15C0               __at(0xE8CF);	// @ (0x1D19 * 8 + 7)
#define                                 S15C0_bit           _BIT_ACCESS(LCDDATA1,7)
// LCDDATA7<S15C1>
extern volatile __bit                   S15C1               __at(0xE8FF);	// @ (0x1D1F * 8 + 7)
#define                                 S15C1_bit           _BIT_ACCESS(LCDDATA7,7)
// LCDDATA13<S15C2>
extern volatile __bit                   S15C2               __at(0xE92F);	// @ (0x1D25 * 8 + 7)
#define                                 S15C2_bit           _BIT_ACCESS(LCDDATA13,7)
// LCDDATA19<S15C3>
extern volatile __bit                   S15C3               __at(0xE95F);	// @ (0x1D2B * 8 + 7)
#define                                 S15C3_bit           _BIT_ACCESS(LCDDATA19,7)
// LCDDATA25<S15C4>
extern volatile __bit                   S15C4               __at(0xE98F);	// @ (0x1D31 * 8 + 7)
#define                                 S15C4_bit           _BIT_ACCESS(LCDDATA25,7)
// LCDDATA31<S15C5>
extern volatile __bit                   S15C5               __at(0xE9BF);	// @ (0x1D37 * 8 + 7)
#define                                 S15C5_bit           _BIT_ACCESS(LCDDATA31,7)
// LCDDATA37<S15C6>
extern volatile __bit                   S15C6               __at(0xE9EF);	// @ (0x1D3D * 8 + 7)
#define                                 S15C6_bit           _BIT_ACCESS(LCDDATA37,7)
// LCDDATA43<S15C7>
extern volatile __bit                   S15C7               __at(0xEA1F);	// @ (0x1D43 * 8 + 7)
#define                                 S15C7_bit           _BIT_ACCESS(LCDDATA43,7)
// LCDDATA2<S16C0>
extern volatile __bit                   S16C0               __at(0xE8D0);	// @ (0x1D1A * 8 + 0)
#define                                 S16C0_bit           _BIT_ACCESS(LCDDATA2,0)
// LCDDATA8<S16C1>
extern volatile __bit                   S16C1               __at(0xE900);	// @ (0x1D20 * 8 + 0)
#define                                 S16C1_bit           _BIT_ACCESS(LCDDATA8,0)
// LCDDATA14<S16C2>
extern volatile __bit                   S16C2               __at(0xE930);	// @ (0x1D26 * 8 + 0)
#define                                 S16C2_bit           _BIT_ACCESS(LCDDATA14,0)
// LCDDATA20<S16C3>
extern volatile __bit                   S16C3               __at(0xE960);	// @ (0x1D2C * 8 + 0)
#define                                 S16C3_bit           _BIT_ACCESS(LCDDATA20,0)
// LCDDATA26<S16C4>
extern volatile __bit                   S16C4               __at(0xE990);	// @ (0x1D32 * 8 + 0)
#define                                 S16C4_bit           _BIT_ACCESS(LCDDATA26,0)
// LCDDATA32<S16C5>
extern volatile __bit                   S16C5               __at(0xE9C0);	// @ (0x1D38 * 8 + 0)
#define                                 S16C5_bit           _BIT_ACCESS(LCDDATA32,0)
// LCDDATA38<S16C6>
extern volatile __bit                   S16C6               __at(0xE9F0);	// @ (0x1D3E * 8 + 0)
#define                                 S16C6_bit           _BIT_ACCESS(LCDDATA38,0)
// LCDDATA44<S16C7>
extern volatile __bit                   S16C7               __at(0xEA20);	// @ (0x1D44 * 8 + 0)
#define                                 S16C7_bit           _BIT_ACCESS(LCDDATA44,0)
// LCDDATA2<S17C0>
extern volatile __bit                   S17C0               __at(0xE8D1);	// @ (0x1D1A * 8 + 1)
#define                                 S17C0_bit           _BIT_ACCESS(LCDDATA2,1)
// LCDDATA8<S17C1>
extern volatile __bit                   S17C1               __at(0xE901);	// @ (0x1D20 * 8 + 1)
#define                                 S17C1_bit           _BIT_ACCESS(LCDDATA8,1)
// LCDDATA14<S17C2>
extern volatile __bit                   S17C2               __at(0xE931);	// @ (0x1D26 * 8 + 1)
#define                                 S17C2_bit           _BIT_ACCESS(LCDDATA14,1)
// LCDDATA20<S17C3>
extern volatile __bit                   S17C3               __at(0xE961);	// @ (0x1D2C * 8 + 1)
#define                                 S17C3_bit           _BIT_ACCESS(LCDDATA20,1)
// LCDDATA26<S17C4>
extern volatile __bit                   S17C4               __at(0xE991);	// @ (0x1D32 * 8 + 1)
#define                                 S17C4_bit           _BIT_ACCESS(LCDDATA26,1)
// LCDDATA32<S17C5>
extern volatile __bit                   S17C5               __at(0xE9C1);	// @ (0x1D38 * 8 + 1)
#define                                 S17C5_bit           _BIT_ACCESS(LCDDATA32,1)
// LCDDATA38<S17C6>
extern volatile __bit                   S17C6               __at(0xE9F1);	// @ (0x1D3E * 8 + 1)
#define                                 S17C6_bit           _BIT_ACCESS(LCDDATA38,1)
// LCDDATA44<S17C7>
extern volatile __bit                   S17C7               __at(0xEA21);	// @ (0x1D44 * 8 + 1)
#define                                 S17C7_bit           _BIT_ACCESS(LCDDATA44,1)
// LCDDATA2<S18C0>
extern volatile __bit                   S18C0               __at(0xE8D2);	// @ (0x1D1A * 8 + 2)
#define                                 S18C0_bit           _BIT_ACCESS(LCDDATA2,2)
// LCDDATA8<S18C1>
extern volatile __bit                   S18C1               __at(0xE902);	// @ (0x1D20 * 8 + 2)
#define                                 S18C1_bit           _BIT_ACCESS(LCDDATA8,2)
// LCDDATA14<S18C2>
extern volatile __bit                   S18C2               __at(0xE932);	// @ (0x1D26 * 8 + 2)
#define                                 S18C2_bit           _BIT_ACCESS(LCDDATA14,2)
// LCDDATA20<S18C3>
extern volatile __bit                   S18C3               __at(0xE962);	// @ (0x1D2C * 8 + 2)
#define                                 S18C3_bit           _BIT_ACCESS(LCDDATA20,2)
// LCDDATA26<S18C4>
extern volatile __bit                   S18C4               __at(0xE992);	// @ (0x1D32 * 8 + 2)
#define                                 S18C4_bit           _BIT_ACCESS(LCDDATA26,2)
// LCDDATA32<S18C5>
extern volatile __bit                   S18C5               __at(0xE9C2);	// @ (0x1D38 * 8 + 2)
#define                                 S18C5_bit           _BIT_ACCESS(LCDDATA32,2)
// LCDDATA38<S18C6>
extern volatile __bit                   S18C6               __at(0xE9F2);	// @ (0x1D3E * 8 + 2)
#define                                 S18C6_bit           _BIT_ACCESS(LCDDATA38,2)
// LCDDATA44<S18C7>
extern volatile __bit                   S18C7               __at(0xEA22);	// @ (0x1D44 * 8 + 2)
#define                                 S18C7_bit           _BIT_ACCESS(LCDDATA44,2)
// LCDDATA2<S19C0>
extern volatile __bit                   S19C0               __at(0xE8D3);	// @ (0x1D1A * 8 + 3)
#define                                 S19C0_bit           _BIT_ACCESS(LCDDATA2,3)
// LCDDATA8<S19C1>
extern volatile __bit                   S19C1               __at(0xE903);	// @ (0x1D20 * 8 + 3)
#define                                 S19C1_bit           _BIT_ACCESS(LCDDATA8,3)
// LCDDATA14<S19C2>
extern volatile __bit                   S19C2               __at(0xE933);	// @ (0x1D26 * 8 + 3)
#define                                 S19C2_bit           _BIT_ACCESS(LCDDATA14,3)
// LCDDATA20<S19C3>
extern volatile __bit                   S19C3               __at(0xE963);	// @ (0x1D2C * 8 + 3)
#define                                 S19C3_bit           _BIT_ACCESS(LCDDATA20,3)
// LCDDATA26<S19C4>
extern volatile __bit                   S19C4               __at(0xE993);	// @ (0x1D32 * 8 + 3)
#define                                 S19C4_bit           _BIT_ACCESS(LCDDATA26,3)
// LCDDATA32<S19C5>
extern volatile __bit                   S19C5               __at(0xE9C3);	// @ (0x1D38 * 8 + 3)
#define                                 S19C5_bit           _BIT_ACCESS(LCDDATA32,3)
// LCDDATA38<S19C6>
extern volatile __bit                   S19C6               __at(0xE9F3);	// @ (0x1D3E * 8 + 3)
#define                                 S19C6_bit           _BIT_ACCESS(LCDDATA38,3)
// LCDDATA44<S19C7>
extern volatile __bit                   S19C7               __at(0xEA23);	// @ (0x1D44 * 8 + 3)
#define                                 S19C7_bit           _BIT_ACCESS(LCDDATA44,3)
// SSP1STAT<S2>
extern volatile __bit                   S2                  __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 S2_bit              _BIT_ACCESS(SSP1STAT,3)
// LCDDATA2<S20C0>
extern volatile __bit                   S20C0               __at(0xE8D4);	// @ (0x1D1A * 8 + 4)
#define                                 S20C0_bit           _BIT_ACCESS(LCDDATA2,4)
// LCDDATA8<S20C1>
extern volatile __bit                   S20C1               __at(0xE904);	// @ (0x1D20 * 8 + 4)
#define                                 S20C1_bit           _BIT_ACCESS(LCDDATA8,4)
// LCDDATA14<S20C2>
extern volatile __bit                   S20C2               __at(0xE934);	// @ (0x1D26 * 8 + 4)
#define                                 S20C2_bit           _BIT_ACCESS(LCDDATA14,4)
// LCDDATA20<S20C3>
extern volatile __bit                   S20C3               __at(0xE964);	// @ (0x1D2C * 8 + 4)
#define                                 S20C3_bit           _BIT_ACCESS(LCDDATA20,4)
// LCDDATA26<S20C4>
extern volatile __bit                   S20C4               __at(0xE994);	// @ (0x1D32 * 8 + 4)
#define                                 S20C4_bit           _BIT_ACCESS(LCDDATA26,4)
// LCDDATA32<S20C5>
extern volatile __bit                   S20C5               __at(0xE9C4);	// @ (0x1D38 * 8 + 4)
#define                                 S20C5_bit           _BIT_ACCESS(LCDDATA32,4)
// LCDDATA38<S20C6>
extern volatile __bit                   S20C6               __at(0xE9F4);	// @ (0x1D3E * 8 + 4)
#define                                 S20C6_bit           _BIT_ACCESS(LCDDATA38,4)
// LCDDATA44<S20C7>
extern volatile __bit                   S20C7               __at(0xEA24);	// @ (0x1D44 * 8 + 4)
#define                                 S20C7_bit           _BIT_ACCESS(LCDDATA44,4)
// LCDDATA2<S21C0>
extern volatile __bit                   S21C0               __at(0xE8D5);	// @ (0x1D1A * 8 + 5)
#define                                 S21C0_bit           _BIT_ACCESS(LCDDATA2,5)
// LCDDATA8<S21C1>
extern volatile __bit                   S21C1               __at(0xE905);	// @ (0x1D20 * 8 + 5)
#define                                 S21C1_bit           _BIT_ACCESS(LCDDATA8,5)
// LCDDATA14<S21C2>
extern volatile __bit                   S21C2               __at(0xE935);	// @ (0x1D26 * 8 + 5)
#define                                 S21C2_bit           _BIT_ACCESS(LCDDATA14,5)
// LCDDATA20<S21C3>
extern volatile __bit                   S21C3               __at(0xE965);	// @ (0x1D2C * 8 + 5)
#define                                 S21C3_bit           _BIT_ACCESS(LCDDATA20,5)
// LCDDATA26<S21C4>
extern volatile __bit                   S21C4               __at(0xE995);	// @ (0x1D32 * 8 + 5)
#define                                 S21C4_bit           _BIT_ACCESS(LCDDATA26,5)
// LCDDATA32<S21C5>
extern volatile __bit                   S21C5               __at(0xE9C5);	// @ (0x1D38 * 8 + 5)
#define                                 S21C5_bit           _BIT_ACCESS(LCDDATA32,5)
// LCDDATA38<S21C6>
extern volatile __bit                   S21C6               __at(0xE9F5);	// @ (0x1D3E * 8 + 5)
#define                                 S21C6_bit           _BIT_ACCESS(LCDDATA38,5)
// LCDDATA44<S21C7>
extern volatile __bit                   S21C7               __at(0xEA25);	// @ (0x1D44 * 8 + 5)
#define                                 S21C7_bit           _BIT_ACCESS(LCDDATA44,5)
// LCDDATA2<S22C0>
extern volatile __bit                   S22C0               __at(0xE8D6);	// @ (0x1D1A * 8 + 6)
#define                                 S22C0_bit           _BIT_ACCESS(LCDDATA2,6)
// LCDDATA8<S22C1>
extern volatile __bit                   S22C1               __at(0xE906);	// @ (0x1D20 * 8 + 6)
#define                                 S22C1_bit           _BIT_ACCESS(LCDDATA8,6)
// LCDDATA14<S22C2>
extern volatile __bit                   S22C2               __at(0xE936);	// @ (0x1D26 * 8 + 6)
#define                                 S22C2_bit           _BIT_ACCESS(LCDDATA14,6)
// LCDDATA20<S22C3>
extern volatile __bit                   S22C3               __at(0xE966);	// @ (0x1D2C * 8 + 6)
#define                                 S22C3_bit           _BIT_ACCESS(LCDDATA20,6)
// LCDDATA26<S22C4>
extern volatile __bit                   S22C4               __at(0xE996);	// @ (0x1D32 * 8 + 6)
#define                                 S22C4_bit           _BIT_ACCESS(LCDDATA26,6)
// LCDDATA32<S22C5>
extern volatile __bit                   S22C5               __at(0xE9C6);	// @ (0x1D38 * 8 + 6)
#define                                 S22C5_bit           _BIT_ACCESS(LCDDATA32,6)
// LCDDATA38<S22C6>
extern volatile __bit                   S22C6               __at(0xE9F6);	// @ (0x1D3E * 8 + 6)
#define                                 S22C6_bit           _BIT_ACCESS(LCDDATA38,6)
// LCDDATA44<S22C7>
extern volatile __bit                   S22C7               __at(0xEA26);	// @ (0x1D44 * 8 + 6)
#define                                 S22C7_bit           _BIT_ACCESS(LCDDATA44,6)
// LCDDATA2<S23C0>
extern volatile __bit                   S23C0               __at(0xE8D7);	// @ (0x1D1A * 8 + 7)
#define                                 S23C0_bit           _BIT_ACCESS(LCDDATA2,7)
// LCDDATA8<S23C1>
extern volatile __bit                   S23C1               __at(0xE907);	// @ (0x1D20 * 8 + 7)
#define                                 S23C1_bit           _BIT_ACCESS(LCDDATA8,7)
// LCDDATA14<S23C2>
extern volatile __bit                   S23C2               __at(0xE937);	// @ (0x1D26 * 8 + 7)
#define                                 S23C2_bit           _BIT_ACCESS(LCDDATA14,7)
// LCDDATA20<S23C3>
extern volatile __bit                   S23C3               __at(0xE967);	// @ (0x1D2C * 8 + 7)
#define                                 S23C3_bit           _BIT_ACCESS(LCDDATA20,7)
// LCDDATA26<S23C4>
extern volatile __bit                   S23C4               __at(0xE997);	// @ (0x1D32 * 8 + 7)
#define                                 S23C4_bit           _BIT_ACCESS(LCDDATA26,7)
// LCDDATA32<S23C5>
extern volatile __bit                   S23C5               __at(0xE9C7);	// @ (0x1D38 * 8 + 7)
#define                                 S23C5_bit           _BIT_ACCESS(LCDDATA32,7)
// LCDDATA38<S23C6>
extern volatile __bit                   S23C6               __at(0xE9F7);	// @ (0x1D3E * 8 + 7)
#define                                 S23C6_bit           _BIT_ACCESS(LCDDATA38,7)
// LCDDATA44<S23C7>
extern volatile __bit                   S23C7               __at(0xEA27);	// @ (0x1D44 * 8 + 7)
#define                                 S23C7_bit           _BIT_ACCESS(LCDDATA44,7)
// LCDDATA3<S24C0>
extern volatile __bit                   S24C0               __at(0xE8D8);	// @ (0x1D1B * 8 + 0)
#define                                 S24C0_bit           _BIT_ACCESS(LCDDATA3,0)
// LCDDATA9<S24C1>
extern volatile __bit                   S24C1               __at(0xE908);	// @ (0x1D21 * 8 + 0)
#define                                 S24C1_bit           _BIT_ACCESS(LCDDATA9,0)
// LCDDATA15<S24C2>
extern volatile __bit                   S24C2               __at(0xE938);	// @ (0x1D27 * 8 + 0)
#define                                 S24C2_bit           _BIT_ACCESS(LCDDATA15,0)
// LCDDATA21<S24C3>
extern volatile __bit                   S24C3               __at(0xE968);	// @ (0x1D2D * 8 + 0)
#define                                 S24C3_bit           _BIT_ACCESS(LCDDATA21,0)
// LCDDATA27<S24C4>
extern volatile __bit                   S24C4               __at(0xE998);	// @ (0x1D33 * 8 + 0)
#define                                 S24C4_bit           _BIT_ACCESS(LCDDATA27,0)
// LCDDATA33<S24C5>
extern volatile __bit                   S24C5               __at(0xE9C8);	// @ (0x1D39 * 8 + 0)
#define                                 S24C5_bit           _BIT_ACCESS(LCDDATA33,0)
// LCDDATA39<S24C6>
extern volatile __bit                   S24C6               __at(0xE9F8);	// @ (0x1D3F * 8 + 0)
#define                                 S24C6_bit           _BIT_ACCESS(LCDDATA39,0)
// LCDDATA45<S24C7>
extern volatile __bit                   S24C7               __at(0xEA28);	// @ (0x1D45 * 8 + 0)
#define                                 S24C7_bit           _BIT_ACCESS(LCDDATA45,0)
// LCDDATA3<S25C0>
extern volatile __bit                   S25C0               __at(0xE8D9);	// @ (0x1D1B * 8 + 1)
#define                                 S25C0_bit           _BIT_ACCESS(LCDDATA3,1)
// LCDDATA9<S25C1>
extern volatile __bit                   S25C1               __at(0xE909);	// @ (0x1D21 * 8 + 1)
#define                                 S25C1_bit           _BIT_ACCESS(LCDDATA9,1)
// LCDDATA15<S25C2>
extern volatile __bit                   S25C2               __at(0xE939);	// @ (0x1D27 * 8 + 1)
#define                                 S25C2_bit           _BIT_ACCESS(LCDDATA15,1)
// LCDDATA21<S25C3>
extern volatile __bit                   S25C3               __at(0xE969);	// @ (0x1D2D * 8 + 1)
#define                                 S25C3_bit           _BIT_ACCESS(LCDDATA21,1)
// LCDDATA27<S25C4>
extern volatile __bit                   S25C4               __at(0xE999);	// @ (0x1D33 * 8 + 1)
#define                                 S25C4_bit           _BIT_ACCESS(LCDDATA27,1)
// LCDDATA33<S25C5>
extern volatile __bit                   S25C5               __at(0xE9C9);	// @ (0x1D39 * 8 + 1)
#define                                 S25C5_bit           _BIT_ACCESS(LCDDATA33,1)
// LCDDATA39<S25C6>
extern volatile __bit                   S25C6               __at(0xE9F9);	// @ (0x1D3F * 8 + 1)
#define                                 S25C6_bit           _BIT_ACCESS(LCDDATA39,1)
// LCDDATA45<S25C7>
extern volatile __bit                   S25C7               __at(0xEA29);	// @ (0x1D45 * 8 + 1)
#define                                 S25C7_bit           _BIT_ACCESS(LCDDATA45,1)
// LCDDATA3<S26C0>
extern volatile __bit                   S26C0               __at(0xE8DA);	// @ (0x1D1B * 8 + 2)
#define                                 S26C0_bit           _BIT_ACCESS(LCDDATA3,2)
// LCDDATA9<S26C1>
extern volatile __bit                   S26C1               __at(0xE90A);	// @ (0x1D21 * 8 + 2)
#define                                 S26C1_bit           _BIT_ACCESS(LCDDATA9,2)
// LCDDATA15<S26C2>
extern volatile __bit                   S26C2               __at(0xE93A);	// @ (0x1D27 * 8 + 2)
#define                                 S26C2_bit           _BIT_ACCESS(LCDDATA15,2)
// LCDDATA21<S26C3>
extern volatile __bit                   S26C3               __at(0xE96A);	// @ (0x1D2D * 8 + 2)
#define                                 S26C3_bit           _BIT_ACCESS(LCDDATA21,2)
// LCDDATA27<S26C4>
extern volatile __bit                   S26C4               __at(0xE99A);	// @ (0x1D33 * 8 + 2)
#define                                 S26C4_bit           _BIT_ACCESS(LCDDATA27,2)
// LCDDATA33<S26C5>
extern volatile __bit                   S26C5               __at(0xE9CA);	// @ (0x1D39 * 8 + 2)
#define                                 S26C5_bit           _BIT_ACCESS(LCDDATA33,2)
// LCDDATA39<S26C6>
extern volatile __bit                   S26C6               __at(0xE9FA);	// @ (0x1D3F * 8 + 2)
#define                                 S26C6_bit           _BIT_ACCESS(LCDDATA39,2)
// LCDDATA45<S26C7>
extern volatile __bit                   S26C7               __at(0xEA2A);	// @ (0x1D45 * 8 + 2)
#define                                 S26C7_bit           _BIT_ACCESS(LCDDATA45,2)
// LCDDATA3<S27C0>
extern volatile __bit                   S27C0               __at(0xE8DB);	// @ (0x1D1B * 8 + 3)
#define                                 S27C0_bit           _BIT_ACCESS(LCDDATA3,3)
// LCDDATA9<S27C1>
extern volatile __bit                   S27C1               __at(0xE90B);	// @ (0x1D21 * 8 + 3)
#define                                 S27C1_bit           _BIT_ACCESS(LCDDATA9,3)
// LCDDATA15<S27C2>
extern volatile __bit                   S27C2               __at(0xE93B);	// @ (0x1D27 * 8 + 3)
#define                                 S27C2_bit           _BIT_ACCESS(LCDDATA15,3)
// LCDDATA21<S27C3>
extern volatile __bit                   S27C3               __at(0xE96B);	// @ (0x1D2D * 8 + 3)
#define                                 S27C3_bit           _BIT_ACCESS(LCDDATA21,3)
// LCDDATA27<S27C4>
extern volatile __bit                   S27C4               __at(0xE99B);	// @ (0x1D33 * 8 + 3)
#define                                 S27C4_bit           _BIT_ACCESS(LCDDATA27,3)
// LCDDATA33<S27C5>
extern volatile __bit                   S27C5               __at(0xE9CB);	// @ (0x1D39 * 8 + 3)
#define                                 S27C5_bit           _BIT_ACCESS(LCDDATA33,3)
// LCDDATA39<S27C6>
extern volatile __bit                   S27C6               __at(0xE9FB);	// @ (0x1D3F * 8 + 3)
#define                                 S27C6_bit           _BIT_ACCESS(LCDDATA39,3)
// LCDDATA45<S27C7>
extern volatile __bit                   S27C7               __at(0xEA2B);	// @ (0x1D45 * 8 + 3)
#define                                 S27C7_bit           _BIT_ACCESS(LCDDATA45,3)
// LCDDATA3<S28C0>
extern volatile __bit                   S28C0               __at(0xE8DC);	// @ (0x1D1B * 8 + 4)
#define                                 S28C0_bit           _BIT_ACCESS(LCDDATA3,4)
// LCDDATA9<S28C1>
extern volatile __bit                   S28C1               __at(0xE90C);	// @ (0x1D21 * 8 + 4)
#define                                 S28C1_bit           _BIT_ACCESS(LCDDATA9,4)
// LCDDATA15<S28C2>
extern volatile __bit                   S28C2               __at(0xE93C);	// @ (0x1D27 * 8 + 4)
#define                                 S28C2_bit           _BIT_ACCESS(LCDDATA15,4)
// LCDDATA21<S28C3>
extern volatile __bit                   S28C3               __at(0xE96C);	// @ (0x1D2D * 8 + 4)
#define                                 S28C3_bit           _BIT_ACCESS(LCDDATA21,4)
// LCDDATA27<S28C4>
extern volatile __bit                   S28C4               __at(0xE99C);	// @ (0x1D33 * 8 + 4)
#define                                 S28C4_bit           _BIT_ACCESS(LCDDATA27,4)
// LCDDATA33<S28C5>
extern volatile __bit                   S28C5               __at(0xE9CC);	// @ (0x1D39 * 8 + 4)
#define                                 S28C5_bit           _BIT_ACCESS(LCDDATA33,4)
// LCDDATA39<S28C6>
extern volatile __bit                   S28C6               __at(0xE9FC);	// @ (0x1D3F * 8 + 4)
#define                                 S28C6_bit           _BIT_ACCESS(LCDDATA39,4)
// LCDDATA45<S28C7>
extern volatile __bit                   S28C7               __at(0xEA2C);	// @ (0x1D45 * 8 + 4)
#define                                 S28C7_bit           _BIT_ACCESS(LCDDATA45,4)
// LCDDATA3<S29C0>
extern volatile __bit                   S29C0               __at(0xE8DD);	// @ (0x1D1B * 8 + 5)
#define                                 S29C0_bit           _BIT_ACCESS(LCDDATA3,5)
// LCDDATA9<S29C1>
extern volatile __bit                   S29C1               __at(0xE90D);	// @ (0x1D21 * 8 + 5)
#define                                 S29C1_bit           _BIT_ACCESS(LCDDATA9,5)
// LCDDATA15<S29C2>
extern volatile __bit                   S29C2               __at(0xE93D);	// @ (0x1D27 * 8 + 5)
#define                                 S29C2_bit           _BIT_ACCESS(LCDDATA15,5)
// LCDDATA21<S29C3>
extern volatile __bit                   S29C3               __at(0xE96D);	// @ (0x1D2D * 8 + 5)
#define                                 S29C3_bit           _BIT_ACCESS(LCDDATA21,5)
// LCDDATA27<S29C4>
extern volatile __bit                   S29C4               __at(0xE99D);	// @ (0x1D33 * 8 + 5)
#define                                 S29C4_bit           _BIT_ACCESS(LCDDATA27,5)
// LCDDATA33<S29C5>
extern volatile __bit                   S29C5               __at(0xE9CD);	// @ (0x1D39 * 8 + 5)
#define                                 S29C5_bit           _BIT_ACCESS(LCDDATA33,5)
// LCDDATA39<S29C6>
extern volatile __bit                   S29C6               __at(0xE9FD);	// @ (0x1D3F * 8 + 5)
#define                                 S29C6_bit           _BIT_ACCESS(LCDDATA39,5)
// LCDDATA45<S29C7>
extern volatile __bit                   S29C7               __at(0xEA2D);	// @ (0x1D45 * 8 + 5)
#define                                 S29C7_bit           _BIT_ACCESS(LCDDATA45,5)
// LCDDATA3<S30C0>
extern volatile __bit                   S30C0               __at(0xE8DE);	// @ (0x1D1B * 8 + 6)
#define                                 S30C0_bit           _BIT_ACCESS(LCDDATA3,6)
// LCDDATA9<S30C1>
extern volatile __bit                   S30C1               __at(0xE90E);	// @ (0x1D21 * 8 + 6)
#define                                 S30C1_bit           _BIT_ACCESS(LCDDATA9,6)
// LCDDATA15<S30C2>
extern volatile __bit                   S30C2               __at(0xE93E);	// @ (0x1D27 * 8 + 6)
#define                                 S30C2_bit           _BIT_ACCESS(LCDDATA15,6)
// LCDDATA21<S30C3>
extern volatile __bit                   S30C3               __at(0xE96E);	// @ (0x1D2D * 8 + 6)
#define                                 S30C3_bit           _BIT_ACCESS(LCDDATA21,6)
// LCDDATA27<S30C4>
extern volatile __bit                   S30C4               __at(0xE99E);	// @ (0x1D33 * 8 + 6)
#define                                 S30C4_bit           _BIT_ACCESS(LCDDATA27,6)
// LCDDATA33<S30C5>
extern volatile __bit                   S30C5               __at(0xE9CE);	// @ (0x1D39 * 8 + 6)
#define                                 S30C5_bit           _BIT_ACCESS(LCDDATA33,6)
// LCDDATA39<S30C6>
extern volatile __bit                   S30C6               __at(0xE9FE);	// @ (0x1D3F * 8 + 6)
#define                                 S30C6_bit           _BIT_ACCESS(LCDDATA39,6)
// LCDDATA45<S30C7>
extern volatile __bit                   S30C7               __at(0xEA2E);	// @ (0x1D45 * 8 + 6)
#define                                 S30C7_bit           _BIT_ACCESS(LCDDATA45,6)
// LCDDATA3<S31C0>
extern volatile __bit                   S31C0               __at(0xE8DF);	// @ (0x1D1B * 8 + 7)
#define                                 S31C0_bit           _BIT_ACCESS(LCDDATA3,7)
// LCDDATA9<S31C1>
extern volatile __bit                   S31C1               __at(0xE90F);	// @ (0x1D21 * 8 + 7)
#define                                 S31C1_bit           _BIT_ACCESS(LCDDATA9,7)
// LCDDATA15<S31C2>
extern volatile __bit                   S31C2               __at(0xE93F);	// @ (0x1D27 * 8 + 7)
#define                                 S31C2_bit           _BIT_ACCESS(LCDDATA15,7)
// LCDDATA21<S31C3>
extern volatile __bit                   S31C3               __at(0xE96F);	// @ (0x1D2D * 8 + 7)
#define                                 S31C3_bit           _BIT_ACCESS(LCDDATA21,7)
// LCDDATA27<S31C4>
extern volatile __bit                   S31C4               __at(0xE99F);	// @ (0x1D33 * 8 + 7)
#define                                 S31C4_bit           _BIT_ACCESS(LCDDATA27,7)
// LCDDATA33<S31C5>
extern volatile __bit                   S31C5               __at(0xE9CF);	// @ (0x1D39 * 8 + 7)
#define                                 S31C5_bit           _BIT_ACCESS(LCDDATA33,7)
// LCDDATA39<S31C6>
extern volatile __bit                   S31C6               __at(0xE9FF);	// @ (0x1D3F * 8 + 7)
#define                                 S31C6_bit           _BIT_ACCESS(LCDDATA39,7)
// LCDDATA45<S31C7>
extern volatile __bit                   S31C7               __at(0xEA2F);	// @ (0x1D45 * 8 + 7)
#define                                 S31C7_bit           _BIT_ACCESS(LCDDATA45,7)
// LCDDATA4<S32C0>
extern volatile __bit                   S32C0               __at(0xE8E0);	// @ (0x1D1C * 8 + 0)
#define                                 S32C0_bit           _BIT_ACCESS(LCDDATA4,0)
// LCDDATA10<S32C1>
extern volatile __bit                   S32C1               __at(0xE910);	// @ (0x1D22 * 8 + 0)
#define                                 S32C1_bit           _BIT_ACCESS(LCDDATA10,0)
// LCDDATA16<S32C2>
extern volatile __bit                   S32C2               __at(0xE940);	// @ (0x1D28 * 8 + 0)
#define                                 S32C2_bit           _BIT_ACCESS(LCDDATA16,0)
// LCDDATA22<S32C3>
extern volatile __bit                   S32C3               __at(0xE970);	// @ (0x1D2E * 8 + 0)
#define                                 S32C3_bit           _BIT_ACCESS(LCDDATA22,0)
// LCDDATA28<S32C4>
extern volatile __bit                   S32C4               __at(0xE9A0);	// @ (0x1D34 * 8 + 0)
#define                                 S32C4_bit           _BIT_ACCESS(LCDDATA28,0)
// LCDDATA34<S32C5>
extern volatile __bit                   S32C5               __at(0xE9D0);	// @ (0x1D3A * 8 + 0)
#define                                 S32C5_bit           _BIT_ACCESS(LCDDATA34,0)
// LCDDATA40<S32C6>
extern volatile __bit                   S32C6               __at(0xEA00);	// @ (0x1D40 * 8 + 0)
#define                                 S32C6_bit           _BIT_ACCESS(LCDDATA40,0)
// LCDDATA46<S32C7>
extern volatile __bit                   S32C7               __at(0xEA30);	// @ (0x1D46 * 8 + 0)
#define                                 S32C7_bit           _BIT_ACCESS(LCDDATA46,0)
// LCDDATA4<S33C0>
extern volatile __bit                   S33C0               __at(0xE8E1);	// @ (0x1D1C * 8 + 1)
#define                                 S33C0_bit           _BIT_ACCESS(LCDDATA4,1)
// LCDDATA10<S33C1>
extern volatile __bit                   S33C1               __at(0xE911);	// @ (0x1D22 * 8 + 1)
#define                                 S33C1_bit           _BIT_ACCESS(LCDDATA10,1)
// LCDDATA16<S33C2>
extern volatile __bit                   S33C2               __at(0xE941);	// @ (0x1D28 * 8 + 1)
#define                                 S33C2_bit           _BIT_ACCESS(LCDDATA16,1)
// LCDDATA22<S33C3>
extern volatile __bit                   S33C3               __at(0xE971);	// @ (0x1D2E * 8 + 1)
#define                                 S33C3_bit           _BIT_ACCESS(LCDDATA22,1)
// LCDDATA28<S33C4>
extern volatile __bit                   S33C4               __at(0xE9A1);	// @ (0x1D34 * 8 + 1)
#define                                 S33C4_bit           _BIT_ACCESS(LCDDATA28,1)
// LCDDATA34<S33C5>
extern volatile __bit                   S33C5               __at(0xE9D1);	// @ (0x1D3A * 8 + 1)
#define                                 S33C5_bit           _BIT_ACCESS(LCDDATA34,1)
// LCDDATA40<S33C6>
extern volatile __bit                   S33C6               __at(0xEA01);	// @ (0x1D40 * 8 + 1)
#define                                 S33C6_bit           _BIT_ACCESS(LCDDATA40,1)
// LCDDATA46<S33C7>
extern volatile __bit                   S33C7               __at(0xEA31);	// @ (0x1D46 * 8 + 1)
#define                                 S33C7_bit           _BIT_ACCESS(LCDDATA46,1)
// LCDDATA4<S34C0>
extern volatile __bit                   S34C0               __at(0xE8E2);	// @ (0x1D1C * 8 + 2)
#define                                 S34C0_bit           _BIT_ACCESS(LCDDATA4,2)
// LCDDATA10<S34C1>
extern volatile __bit                   S34C1               __at(0xE912);	// @ (0x1D22 * 8 + 2)
#define                                 S34C1_bit           _BIT_ACCESS(LCDDATA10,2)
// LCDDATA16<S34C2>
extern volatile __bit                   S34C2               __at(0xE942);	// @ (0x1D28 * 8 + 2)
#define                                 S34C2_bit           _BIT_ACCESS(LCDDATA16,2)
// LCDDATA22<S34C3>
extern volatile __bit                   S34C3               __at(0xE972);	// @ (0x1D2E * 8 + 2)
#define                                 S34C3_bit           _BIT_ACCESS(LCDDATA22,2)
// LCDDATA28<S34C4>
extern volatile __bit                   S34C4               __at(0xE9A2);	// @ (0x1D34 * 8 + 2)
#define                                 S34C4_bit           _BIT_ACCESS(LCDDATA28,2)
// LCDDATA34<S34C5>
extern volatile __bit                   S34C5               __at(0xE9D2);	// @ (0x1D3A * 8 + 2)
#define                                 S34C5_bit           _BIT_ACCESS(LCDDATA34,2)
// LCDDATA40<S34C6>
extern volatile __bit                   S34C6               __at(0xEA02);	// @ (0x1D40 * 8 + 2)
#define                                 S34C6_bit           _BIT_ACCESS(LCDDATA40,2)
// LCDDATA46<S34C7>
extern volatile __bit                   S34C7               __at(0xEA32);	// @ (0x1D46 * 8 + 2)
#define                                 S34C7_bit           _BIT_ACCESS(LCDDATA46,2)
// LCDDATA4<S35C0>
extern volatile __bit                   S35C0               __at(0xE8E3);	// @ (0x1D1C * 8 + 3)
#define                                 S35C0_bit           _BIT_ACCESS(LCDDATA4,3)
// LCDDATA10<S35C1>
extern volatile __bit                   S35C1               __at(0xE913);	// @ (0x1D22 * 8 + 3)
#define                                 S35C1_bit           _BIT_ACCESS(LCDDATA10,3)
// LCDDATA16<S35C2>
extern volatile __bit                   S35C2               __at(0xE943);	// @ (0x1D28 * 8 + 3)
#define                                 S35C2_bit           _BIT_ACCESS(LCDDATA16,3)
// LCDDATA22<S35C3>
extern volatile __bit                   S35C3               __at(0xE973);	// @ (0x1D2E * 8 + 3)
#define                                 S35C3_bit           _BIT_ACCESS(LCDDATA22,3)
// LCDDATA28<S35C4>
extern volatile __bit                   S35C4               __at(0xE9A3);	// @ (0x1D34 * 8 + 3)
#define                                 S35C4_bit           _BIT_ACCESS(LCDDATA28,3)
// LCDDATA34<S35C5>
extern volatile __bit                   S35C5               __at(0xE9D3);	// @ (0x1D3A * 8 + 3)
#define                                 S35C5_bit           _BIT_ACCESS(LCDDATA34,3)
// LCDDATA40<S35C6>
extern volatile __bit                   S35C6               __at(0xEA03);	// @ (0x1D40 * 8 + 3)
#define                                 S35C6_bit           _BIT_ACCESS(LCDDATA40,3)
// LCDDATA46<S35C7>
extern volatile __bit                   S35C7               __at(0xEA33);	// @ (0x1D46 * 8 + 3)
#define                                 S35C7_bit           _BIT_ACCESS(LCDDATA46,3)
// LCDDATA4<S36C0>
extern volatile __bit                   S36C0               __at(0xE8E4);	// @ (0x1D1C * 8 + 4)
#define                                 S36C0_bit           _BIT_ACCESS(LCDDATA4,4)
// LCDDATA10<S36C1>
extern volatile __bit                   S36C1               __at(0xE914);	// @ (0x1D22 * 8 + 4)
#define                                 S36C1_bit           _BIT_ACCESS(LCDDATA10,4)
// LCDDATA16<S36C2>
extern volatile __bit                   S36C2               __at(0xE944);	// @ (0x1D28 * 8 + 4)
#define                                 S36C2_bit           _BIT_ACCESS(LCDDATA16,4)
// LCDDATA22<S36C3>
extern volatile __bit                   S36C3               __at(0xE974);	// @ (0x1D2E * 8 + 4)
#define                                 S36C3_bit           _BIT_ACCESS(LCDDATA22,4)
// LCDDATA28<S36C4>
extern volatile __bit                   S36C4               __at(0xE9A4);	// @ (0x1D34 * 8 + 4)
#define                                 S36C4_bit           _BIT_ACCESS(LCDDATA28,4)
// LCDDATA34<S36C5>
extern volatile __bit                   S36C5               __at(0xE9D4);	// @ (0x1D3A * 8 + 4)
#define                                 S36C5_bit           _BIT_ACCESS(LCDDATA34,4)
// LCDDATA40<S36C6>
extern volatile __bit                   S36C6               __at(0xEA04);	// @ (0x1D40 * 8 + 4)
#define                                 S36C6_bit           _BIT_ACCESS(LCDDATA40,4)
// LCDDATA46<S36C7>
extern volatile __bit                   S36C7               __at(0xEA34);	// @ (0x1D46 * 8 + 4)
#define                                 S36C7_bit           _BIT_ACCESS(LCDDATA46,4)
// LCDDATA4<S37C0>
extern volatile __bit                   S37C0               __at(0xE8E5);	// @ (0x1D1C * 8 + 5)
#define                                 S37C0_bit           _BIT_ACCESS(LCDDATA4,5)
// LCDDATA10<S37C1>
extern volatile __bit                   S37C1               __at(0xE915);	// @ (0x1D22 * 8 + 5)
#define                                 S37C1_bit           _BIT_ACCESS(LCDDATA10,5)
// LCDDATA16<S37C2>
extern volatile __bit                   S37C2               __at(0xE945);	// @ (0x1D28 * 8 + 5)
#define                                 S37C2_bit           _BIT_ACCESS(LCDDATA16,5)
// LCDDATA22<S37C3>
extern volatile __bit                   S37C3               __at(0xE975);	// @ (0x1D2E * 8 + 5)
#define                                 S37C3_bit           _BIT_ACCESS(LCDDATA22,5)
// LCDDATA28<S37C4>
extern volatile __bit                   S37C4               __at(0xE9A5);	// @ (0x1D34 * 8 + 5)
#define                                 S37C4_bit           _BIT_ACCESS(LCDDATA28,5)
// LCDDATA34<S37C5>
extern volatile __bit                   S37C5               __at(0xE9D5);	// @ (0x1D3A * 8 + 5)
#define                                 S37C5_bit           _BIT_ACCESS(LCDDATA34,5)
// LCDDATA40<S37C6>
extern volatile __bit                   S37C6               __at(0xEA05);	// @ (0x1D40 * 8 + 5)
#define                                 S37C6_bit           _BIT_ACCESS(LCDDATA40,5)
// LCDDATA46<S37C7>
extern volatile __bit                   S37C7               __at(0xEA35);	// @ (0x1D46 * 8 + 5)
#define                                 S37C7_bit           _BIT_ACCESS(LCDDATA46,5)
// LCDDATA4<S38C0>
extern volatile __bit                   S38C0               __at(0xE8E6);	// @ (0x1D1C * 8 + 6)
#define                                 S38C0_bit           _BIT_ACCESS(LCDDATA4,6)
// LCDDATA10<S38C1>
extern volatile __bit                   S38C1               __at(0xE916);	// @ (0x1D22 * 8 + 6)
#define                                 S38C1_bit           _BIT_ACCESS(LCDDATA10,6)
// LCDDATA16<S38C2>
extern volatile __bit                   S38C2               __at(0xE946);	// @ (0x1D28 * 8 + 6)
#define                                 S38C2_bit           _BIT_ACCESS(LCDDATA16,6)
// LCDDATA22<S38C3>
extern volatile __bit                   S38C3               __at(0xE976);	// @ (0x1D2E * 8 + 6)
#define                                 S38C3_bit           _BIT_ACCESS(LCDDATA22,6)
// LCDDATA28<S38C4>
extern volatile __bit                   S38C4               __at(0xE9A6);	// @ (0x1D34 * 8 + 6)
#define                                 S38C4_bit           _BIT_ACCESS(LCDDATA28,6)
// LCDDATA34<S38C5>
extern volatile __bit                   S38C5               __at(0xE9D6);	// @ (0x1D3A * 8 + 6)
#define                                 S38C5_bit           _BIT_ACCESS(LCDDATA34,6)
// LCDDATA40<S38C6>
extern volatile __bit                   S38C6               __at(0xEA06);	// @ (0x1D40 * 8 + 6)
#define                                 S38C6_bit           _BIT_ACCESS(LCDDATA40,6)
// LCDDATA46<S38C7>
extern volatile __bit                   S38C7               __at(0xEA36);	// @ (0x1D46 * 8 + 6)
#define                                 S38C7_bit           _BIT_ACCESS(LCDDATA46,6)
// LCDDATA4<S39C0>
extern volatile __bit                   S39C0               __at(0xE8E7);	// @ (0x1D1C * 8 + 7)
#define                                 S39C0_bit           _BIT_ACCESS(LCDDATA4,7)
// LCDDATA10<S39C1>
extern volatile __bit                   S39C1               __at(0xE917);	// @ (0x1D22 * 8 + 7)
#define                                 S39C1_bit           _BIT_ACCESS(LCDDATA10,7)
// LCDDATA16<S39C2>
extern volatile __bit                   S39C2               __at(0xE947);	// @ (0x1D28 * 8 + 7)
#define                                 S39C2_bit           _BIT_ACCESS(LCDDATA16,7)
// LCDDATA22<S39C3>
extern volatile __bit                   S39C3               __at(0xE977);	// @ (0x1D2E * 8 + 7)
#define                                 S39C3_bit           _BIT_ACCESS(LCDDATA22,7)
// LCDDATA28<S39C4>
extern volatile __bit                   S39C4               __at(0xE9A7);	// @ (0x1D34 * 8 + 7)
#define                                 S39C4_bit           _BIT_ACCESS(LCDDATA28,7)
// LCDDATA34<S39C5>
extern volatile __bit                   S39C5               __at(0xE9D7);	// @ (0x1D3A * 8 + 7)
#define                                 S39C5_bit           _BIT_ACCESS(LCDDATA34,7)
// LCDDATA40<S39C6>
extern volatile __bit                   S39C6               __at(0xEA07);	// @ (0x1D40 * 8 + 7)
#define                                 S39C6_bit           _BIT_ACCESS(LCDDATA40,7)
// LCDDATA46<S39C7>
extern volatile __bit                   S39C7               __at(0xEA37);	// @ (0x1D46 * 8 + 7)
#define                                 S39C7_bit           _BIT_ACCESS(LCDDATA46,7)
// LCDDATA5<S40C0>
extern volatile __bit                   S40C0               __at(0xE8E8);	// @ (0x1D1D * 8 + 0)
#define                                 S40C0_bit           _BIT_ACCESS(LCDDATA5,0)
// LCDDATA11<S40C1>
extern volatile __bit                   S40C1               __at(0xE918);	// @ (0x1D23 * 8 + 0)
#define                                 S40C1_bit           _BIT_ACCESS(LCDDATA11,0)
// LCDDATA17<S40C2>
extern volatile __bit                   S40C2               __at(0xE948);	// @ (0x1D29 * 8 + 0)
#define                                 S40C2_bit           _BIT_ACCESS(LCDDATA17,0)
// LCDDATA23<S40C3>
extern volatile __bit                   S40C3               __at(0xE978);	// @ (0x1D2F * 8 + 0)
#define                                 S40C3_bit           _BIT_ACCESS(LCDDATA23,0)
// LCDDATA29<S40C4>
extern volatile __bit                   S40C4               __at(0xE9A8);	// @ (0x1D35 * 8 + 0)
#define                                 S40C4_bit           _BIT_ACCESS(LCDDATA29,0)
// LCDDATA35<S40C5>
extern volatile __bit                   S40C5               __at(0xE9D8);	// @ (0x1D3B * 8 + 0)
#define                                 S40C5_bit           _BIT_ACCESS(LCDDATA35,0)
// LCDDATA41<S40C6>
extern volatile __bit                   S40C6               __at(0xEA08);	// @ (0x1D41 * 8 + 0)
#define                                 S40C6_bit           _BIT_ACCESS(LCDDATA41,0)
// LCDDATA47<S40C7>
extern volatile __bit                   S40C7               __at(0xEA38);	// @ (0x1D47 * 8 + 0)
#define                                 S40C7_bit           _BIT_ACCESS(LCDDATA47,0)
// LCDDATA5<S41C0>
extern volatile __bit                   S41C0               __at(0xE8E9);	// @ (0x1D1D * 8 + 1)
#define                                 S41C0_bit           _BIT_ACCESS(LCDDATA5,1)
// LCDDATA11<S41C1>
extern volatile __bit                   S41C1               __at(0xE919);	// @ (0x1D23 * 8 + 1)
#define                                 S41C1_bit           _BIT_ACCESS(LCDDATA11,1)
// LCDDATA17<S41C2>
extern volatile __bit                   S41C2               __at(0xE949);	// @ (0x1D29 * 8 + 1)
#define                                 S41C2_bit           _BIT_ACCESS(LCDDATA17,1)
// LCDDATA23<S41C3>
extern volatile __bit                   S41C3               __at(0xE979);	// @ (0x1D2F * 8 + 1)
#define                                 S41C3_bit           _BIT_ACCESS(LCDDATA23,1)
// LCDDATA29<S41C4>
extern volatile __bit                   S41C4               __at(0xE9A9);	// @ (0x1D35 * 8 + 1)
#define                                 S41C4_bit           _BIT_ACCESS(LCDDATA29,1)
// LCDDATA35<S41C5>
extern volatile __bit                   S41C5               __at(0xE9D9);	// @ (0x1D3B * 8 + 1)
#define                                 S41C5_bit           _BIT_ACCESS(LCDDATA35,1)
// LCDDATA41<S41C6>
extern volatile __bit                   S41C6               __at(0xEA09);	// @ (0x1D41 * 8 + 1)
#define                                 S41C6_bit           _BIT_ACCESS(LCDDATA41,1)
// LCDDATA47<S41C7>
extern volatile __bit                   S41C7               __at(0xEA39);	// @ (0x1D47 * 8 + 1)
#define                                 S41C7_bit           _BIT_ACCESS(LCDDATA47,1)
// LCDDATA5<S42C0>
extern volatile __bit                   S42C0               __at(0xE8EA);	// @ (0x1D1D * 8 + 2)
#define                                 S42C0_bit           _BIT_ACCESS(LCDDATA5,2)
// LCDDATA11<S42C1>
extern volatile __bit                   S42C1               __at(0xE91A);	// @ (0x1D23 * 8 + 2)
#define                                 S42C1_bit           _BIT_ACCESS(LCDDATA11,2)
// LCDDATA17<S42C2>
extern volatile __bit                   S42C2               __at(0xE94A);	// @ (0x1D29 * 8 + 2)
#define                                 S42C2_bit           _BIT_ACCESS(LCDDATA17,2)
// LCDDATA23<S42C3>
extern volatile __bit                   S42C3               __at(0xE97A);	// @ (0x1D2F * 8 + 2)
#define                                 S42C3_bit           _BIT_ACCESS(LCDDATA23,2)
// LCDDATA29<S42C4>
extern volatile __bit                   S42C4               __at(0xE9AA);	// @ (0x1D35 * 8 + 2)
#define                                 S42C4_bit           _BIT_ACCESS(LCDDATA29,2)
// LCDDATA35<S42C5>
extern volatile __bit                   S42C5               __at(0xE9DA);	// @ (0x1D3B * 8 + 2)
#define                                 S42C5_bit           _BIT_ACCESS(LCDDATA35,2)
// LCDDATA41<S42C6>
extern volatile __bit                   S42C6               __at(0xEA0A);	// @ (0x1D41 * 8 + 2)
#define                                 S42C6_bit           _BIT_ACCESS(LCDDATA41,2)
// LCDDATA47<S42C7>
extern volatile __bit                   S42C7               __at(0xEA3A);	// @ (0x1D47 * 8 + 2)
#define                                 S42C7_bit           _BIT_ACCESS(LCDDATA47,2)
// LCDDATA5<S43C0>
extern volatile __bit                   S43C0               __at(0xE8EB);	// @ (0x1D1D * 8 + 3)
#define                                 S43C0_bit           _BIT_ACCESS(LCDDATA5,3)
// LCDDATA11<S43C1>
extern volatile __bit                   S43C1               __at(0xE91B);	// @ (0x1D23 * 8 + 3)
#define                                 S43C1_bit           _BIT_ACCESS(LCDDATA11,3)
// LCDDATA17<S43C2>
extern volatile __bit                   S43C2               __at(0xE94B);	// @ (0x1D29 * 8 + 3)
#define                                 S43C2_bit           _BIT_ACCESS(LCDDATA17,3)
// LCDDATA23<S43C3>
extern volatile __bit                   S43C3               __at(0xE97B);	// @ (0x1D2F * 8 + 3)
#define                                 S43C3_bit           _BIT_ACCESS(LCDDATA23,3)
// LCDDATA29<S43C4>
extern volatile __bit                   S43C4               __at(0xE9AB);	// @ (0x1D35 * 8 + 3)
#define                                 S43C4_bit           _BIT_ACCESS(LCDDATA29,3)
// LCDDATA35<S43C5>
extern volatile __bit                   S43C5               __at(0xE9DB);	// @ (0x1D3B * 8 + 3)
#define                                 S43C5_bit           _BIT_ACCESS(LCDDATA35,3)
// LCDDATA41<S43C6>
extern volatile __bit                   S43C6               __at(0xEA0B);	// @ (0x1D41 * 8 + 3)
#define                                 S43C6_bit           _BIT_ACCESS(LCDDATA41,3)
// LCDDATA47<S43C7>
extern volatile __bit                   S43C7               __at(0xEA3B);	// @ (0x1D47 * 8 + 3)
#define                                 S43C7_bit           _BIT_ACCESS(LCDDATA47,3)
// LCDDATA5<S44C0>
extern volatile __bit                   S44C0               __at(0xE8EC);	// @ (0x1D1D * 8 + 4)
#define                                 S44C0_bit           _BIT_ACCESS(LCDDATA5,4)
// LCDDATA11<S44C1>
extern volatile __bit                   S44C1               __at(0xE91C);	// @ (0x1D23 * 8 + 4)
#define                                 S44C1_bit           _BIT_ACCESS(LCDDATA11,4)
// LCDDATA17<S44C2>
extern volatile __bit                   S44C2               __at(0xE94C);	// @ (0x1D29 * 8 + 4)
#define                                 S44C2_bit           _BIT_ACCESS(LCDDATA17,4)
// LCDDATA23<S44C3>
extern volatile __bit                   S44C3               __at(0xE97C);	// @ (0x1D2F * 8 + 4)
#define                                 S44C3_bit           _BIT_ACCESS(LCDDATA23,4)
// LCDDATA29<S44C4>
extern volatile __bit                   S44C4               __at(0xE9AC);	// @ (0x1D35 * 8 + 4)
#define                                 S44C4_bit           _BIT_ACCESS(LCDDATA29,4)
// LCDDATA35<S44C5>
extern volatile __bit                   S44C5               __at(0xE9DC);	// @ (0x1D3B * 8 + 4)
#define                                 S44C5_bit           _BIT_ACCESS(LCDDATA35,4)
// LCDDATA41<S44C6>
extern volatile __bit                   S44C6               __at(0xEA0C);	// @ (0x1D41 * 8 + 4)
#define                                 S44C6_bit           _BIT_ACCESS(LCDDATA41,4)
// LCDDATA47<S44C7>
extern volatile __bit                   S44C7               __at(0xEA3C);	// @ (0x1D47 * 8 + 4)
#define                                 S44C7_bit           _BIT_ACCESS(LCDDATA47,4)
// LCDDATA5<S45C0>
extern volatile __bit                   S45C0               __at(0xE8ED);	// @ (0x1D1D * 8 + 5)
#define                                 S45C0_bit           _BIT_ACCESS(LCDDATA5,5)
// LCDDATA11<S45C1>
extern volatile __bit                   S45C1               __at(0xE91D);	// @ (0x1D23 * 8 + 5)
#define                                 S45C1_bit           _BIT_ACCESS(LCDDATA11,5)
// LCDDATA17<S45C2>
extern volatile __bit                   S45C2               __at(0xE94D);	// @ (0x1D29 * 8 + 5)
#define                                 S45C2_bit           _BIT_ACCESS(LCDDATA17,5)
// LCDDATA23<S45C3>
extern volatile __bit                   S45C3               __at(0xE97D);	// @ (0x1D2F * 8 + 5)
#define                                 S45C3_bit           _BIT_ACCESS(LCDDATA23,5)
// LCDDATA29<S45C4>
extern volatile __bit                   S45C4               __at(0xE9AD);	// @ (0x1D35 * 8 + 5)
#define                                 S45C4_bit           _BIT_ACCESS(LCDDATA29,5)
// LCDDATA35<S45C5>
extern volatile __bit                   S45C5               __at(0xE9DD);	// @ (0x1D3B * 8 + 5)
#define                                 S45C5_bit           _BIT_ACCESS(LCDDATA35,5)
// LCDDATA41<S45C6>
extern volatile __bit                   S45C6               __at(0xEA0D);	// @ (0x1D41 * 8 + 5)
#define                                 S45C6_bit           _BIT_ACCESS(LCDDATA41,5)
// LCDDATA47<S45C7>
extern volatile __bit                   S45C7               __at(0xEA3D);	// @ (0x1D47 * 8 + 5)
#define                                 S45C7_bit           _BIT_ACCESS(LCDDATA47,5)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0xC92);	// @ (0x192 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x408F);	// @ (0x811 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0xC95);	// @ (0x192 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0xC93);	// @ (0x192 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// LCDSE0<SE00>
extern volatile __bit                   SE00                __at(0xE870);	// @ (0x1D0E * 8 + 0)
#define                                 SE00_bit            _BIT_ACCESS(LCDSE0,0)
// LCDSE0<SE01>
extern volatile __bit                   SE01                __at(0xE871);	// @ (0x1D0E * 8 + 1)
#define                                 SE01_bit            _BIT_ACCESS(LCDSE0,1)
// LCDSE0<SE02>
extern volatile __bit                   SE02                __at(0xE872);	// @ (0x1D0E * 8 + 2)
#define                                 SE02_bit            _BIT_ACCESS(LCDSE0,2)
// LCDSE0<SE03>
extern volatile __bit                   SE03                __at(0xE873);	// @ (0x1D0E * 8 + 3)
#define                                 SE03_bit            _BIT_ACCESS(LCDSE0,3)
// LCDSE0<SE04>
extern volatile __bit                   SE04                __at(0xE874);	// @ (0x1D0E * 8 + 4)
#define                                 SE04_bit            _BIT_ACCESS(LCDSE0,4)
// LCDSE0<SE05>
extern volatile __bit                   SE05                __at(0xE875);	// @ (0x1D0E * 8 + 5)
#define                                 SE05_bit            _BIT_ACCESS(LCDSE0,5)
// LCDSE0<SE06>
extern volatile __bit                   SE06                __at(0xE876);	// @ (0x1D0E * 8 + 6)
#define                                 SE06_bit            _BIT_ACCESS(LCDSE0,6)
// LCDSE0<SE07>
extern volatile __bit                   SE07                __at(0xE877);	// @ (0x1D0E * 8 + 7)
#define                                 SE07_bit            _BIT_ACCESS(LCDSE0,7)
// LCDSE1<SE08>
extern volatile __bit                   SE08                __at(0xE878);	// @ (0x1D0F * 8 + 0)
#define                                 SE08_bit            _BIT_ACCESS(LCDSE1,0)
// LCDSE1<SE09>
extern volatile __bit                   SE09                __at(0xE879);	// @ (0x1D0F * 8 + 1)
#define                                 SE09_bit            _BIT_ACCESS(LCDSE1,1)
// LCDSE1<SE10>
extern volatile __bit                   SE10                __at(0xE87A);	// @ (0x1D0F * 8 + 2)
#define                                 SE10_bit            _BIT_ACCESS(LCDSE1,2)
// LCDSE1<SE11>
extern volatile __bit                   SE11                __at(0xE87B);	// @ (0x1D0F * 8 + 3)
#define                                 SE11_bit            _BIT_ACCESS(LCDSE1,3)
// LCDSE1<SE12>
extern volatile __bit                   SE12                __at(0xE87C);	// @ (0x1D0F * 8 + 4)
#define                                 SE12_bit            _BIT_ACCESS(LCDSE1,4)
// LCDSE1<SE13>
extern volatile __bit                   SE13                __at(0xE87D);	// @ (0x1D0F * 8 + 5)
#define                                 SE13_bit            _BIT_ACCESS(LCDSE1,5)
// LCDSE1<SE14>
extern volatile __bit                   SE14                __at(0xE87E);	// @ (0x1D0F * 8 + 6)
#define                                 SE14_bit            _BIT_ACCESS(LCDSE1,6)
// LCDSE1<SE15>
extern volatile __bit                   SE15                __at(0xE87F);	// @ (0x1D0F * 8 + 7)
#define                                 SE15_bit            _BIT_ACCESS(LCDSE1,7)
// LCDSE2<SE16>
extern volatile __bit                   SE16                __at(0xE880);	// @ (0x1D10 * 8 + 0)
#define                                 SE16_bit            _BIT_ACCESS(LCDSE2,0)
// LCDSE2<SE17>
extern volatile __bit                   SE17                __at(0xE881);	// @ (0x1D10 * 8 + 1)
#define                                 SE17_bit            _BIT_ACCESS(LCDSE2,1)
// LCDSE2<SE18>
extern volatile __bit                   SE18                __at(0xE882);	// @ (0x1D10 * 8 + 2)
#define                                 SE18_bit            _BIT_ACCESS(LCDSE2,2)
// LCDSE2<SE19>
extern volatile __bit                   SE19                __at(0xE883);	// @ (0x1D10 * 8 + 3)
#define                                 SE19_bit            _BIT_ACCESS(LCDSE2,3)
// LCDSE2<SE20>
extern volatile __bit                   SE20                __at(0xE884);	// @ (0x1D10 * 8 + 4)
#define                                 SE20_bit            _BIT_ACCESS(LCDSE2,4)
// LCDSE2<SE21>
extern volatile __bit                   SE21                __at(0xE885);	// @ (0x1D10 * 8 + 5)
#define                                 SE21_bit            _BIT_ACCESS(LCDSE2,5)
// LCDSE2<SE22>
extern volatile __bit                   SE22                __at(0xE886);	// @ (0x1D10 * 8 + 6)
#define                                 SE22_bit            _BIT_ACCESS(LCDSE2,6)
// LCDSE2<SE23>
extern volatile __bit                   SE23                __at(0xE887);	// @ (0x1D10 * 8 + 7)
#define                                 SE23_bit            _BIT_ACCESS(LCDSE2,7)
// LCDSE3<SE24>
extern volatile __bit                   SE24                __at(0xE888);	// @ (0x1D11 * 8 + 0)
#define                                 SE24_bit            _BIT_ACCESS(LCDSE3,0)
// LCDSE3<SE25>
extern volatile __bit                   SE25                __at(0xE889);	// @ (0x1D11 * 8 + 1)
#define                                 SE25_bit            _BIT_ACCESS(LCDSE3,1)
// LCDSE3<SE26>
extern volatile __bit                   SE26                __at(0xE88A);	// @ (0x1D11 * 8 + 2)
#define                                 SE26_bit            _BIT_ACCESS(LCDSE3,2)
// LCDSE3<SE27>
extern volatile __bit                   SE27                __at(0xE88B);	// @ (0x1D11 * 8 + 3)
#define                                 SE27_bit            _BIT_ACCESS(LCDSE3,3)
// LCDSE3<SE28>
extern volatile __bit                   SE28                __at(0xE88C);	// @ (0x1D11 * 8 + 4)
#define                                 SE28_bit            _BIT_ACCESS(LCDSE3,4)
// LCDSE3<SE29>
extern volatile __bit                   SE29                __at(0xE88D);	// @ (0x1D11 * 8 + 5)
#define                                 SE29_bit            _BIT_ACCESS(LCDSE3,5)
// LCDSE3<SE30>
extern volatile __bit                   SE30                __at(0xE88E);	// @ (0x1D11 * 8 + 6)
#define                                 SE30_bit            _BIT_ACCESS(LCDSE3,6)
// LCDSE3<SE31>
extern volatile __bit                   SE31                __at(0xE88F);	// @ (0x1D11 * 8 + 7)
#define                                 SE31_bit            _BIT_ACCESS(LCDSE3,7)
// LCDSE4<SE32>
extern volatile __bit                   SE32                __at(0xE890);	// @ (0x1D12 * 8 + 0)
#define                                 SE32_bit            _BIT_ACCESS(LCDSE4,0)
// LCDSE4<SE33>
extern volatile __bit                   SE33                __at(0xE891);	// @ (0x1D12 * 8 + 1)
#define                                 SE33_bit            _BIT_ACCESS(LCDSE4,1)
// LCDSE4<SE34>
extern volatile __bit                   SE34                __at(0xE892);	// @ (0x1D12 * 8 + 2)
#define                                 SE34_bit            _BIT_ACCESS(LCDSE4,2)
// LCDSE4<SE35>
extern volatile __bit                   SE35                __at(0xE893);	// @ (0x1D12 * 8 + 3)
#define                                 SE35_bit            _BIT_ACCESS(LCDSE4,3)
// LCDSE4<SE36>
extern volatile __bit                   SE36                __at(0xE894);	// @ (0x1D12 * 8 + 4)
#define                                 SE36_bit            _BIT_ACCESS(LCDSE4,4)
// LCDSE4<SE37>
extern volatile __bit                   SE37                __at(0xE895);	// @ (0x1D12 * 8 + 5)
#define                                 SE37_bit            _BIT_ACCESS(LCDSE4,5)
// LCDSE4<SE38>
extern volatile __bit                   SE38                __at(0xE896);	// @ (0x1D12 * 8 + 6)
#define                                 SE38_bit            _BIT_ACCESS(LCDSE4,6)
// LCDSE4<SE39>
extern volatile __bit                   SE39                __at(0xE897);	// @ (0x1D12 * 8 + 7)
#define                                 SE39_bit            _BIT_ACCESS(LCDSE4,7)
// LCDSE5<SE40>
extern volatile __bit                   SE40                __at(0xE898);	// @ (0x1D13 * 8 + 0)
#define                                 SE40_bit            _BIT_ACCESS(LCDSE5,0)
// LCDSE5<SE41>
extern volatile __bit                   SE41                __at(0xE899);	// @ (0x1D13 * 8 + 1)
#define                                 SE41_bit            _BIT_ACCESS(LCDSE5,1)
// LCDSE5<SE42>
extern volatile __bit                   SE42                __at(0xE89A);	// @ (0x1D13 * 8 + 2)
#define                                 SE42_bit            _BIT_ACCESS(LCDSE5,2)
// LCDSE5<SE43>
extern volatile __bit                   SE43                __at(0xE89B);	// @ (0x1D13 * 8 + 3)
#define                                 SE43_bit            _BIT_ACCESS(LCDSE5,3)
// LCDSE5<SE44>
extern volatile __bit                   SE44                __at(0xE89C);	// @ (0x1D13 * 8 + 4)
#define                                 SE44_bit            _BIT_ACCESS(LCDSE5,4)
// LCDSE5<SE45>
extern volatile __bit                   SE45                __at(0xE89D);	// @ (0x1D13 * 8 + 5)
#define                                 SE45_bit            _BIT_ACCESS(LCDSE5,5)
// LCDSE5<SE46>
extern volatile __bit                   SE46                __at(0xE89E);	// @ (0x1D13 * 8 + 6)
#define                                 SE46_bit            _BIT_ACCESS(LCDSE5,6)
// LCDSE5<SE47>
extern volatile __bit                   SE47                __at(0xE89F);	// @ (0x1D13 * 8 + 7)
#define                                 SE47_bit            _BIT_ACCESS(LCDSE5,7)
// SECONDS<SECH0>
extern volatile __bit                   SECH0               __at(0x60B4);	// @ (0xC16 * 8 + 4)
#define                                 SECH0_bit           _BIT_ACCESS(SECONDS,4)
// SECONDS<SECH1>
extern volatile __bit                   SECH1               __at(0x60B5);	// @ (0xC16 * 8 + 5)
#define                                 SECH1_bit           _BIT_ACCESS(SECONDS,5)
// SECONDS<SECH2>
extern volatile __bit                   SECH2               __at(0x60B6);	// @ (0xC16 * 8 + 6)
#define                                 SECH2_bit           _BIT_ACCESS(SECONDS,6)
// SECONDS<SECL0>
extern volatile __bit                   SECL0               __at(0x60B0);	// @ (0xC16 * 8 + 0)
#define                                 SECL0_bit           _BIT_ACCESS(SECONDS,0)
// SECONDS<SECL1>
extern volatile __bit                   SECL1               __at(0x60B1);	// @ (0xC16 * 8 + 1)
#define                                 SECL1_bit           _BIT_ACCESS(SECONDS,1)
// SECONDS<SECL2>
extern volatile __bit                   SECL2               __at(0x60B2);	// @ (0xC16 * 8 + 2)
#define                                 SECL2_bit           _BIT_ACCESS(SECONDS,2)
// SECONDS<SECL3>
extern volatile __bit                   SECL3               __at(0x60B3);	// @ (0xC16 * 8 + 3)
#define                                 SECL3_bit           _BIT_ACCESS(SECONDS,3)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// CWG1AS0<SHUTDOWN>
extern volatile __bit                   SHUTDOWN            __at(0x3097);	// @ (0x612 * 8 + 7)
#define                                 SHUTDOWN_bit        _BIT_ACCESS(CWG1AS0,7)
// LCDCON<SLPEN>
extern volatile __bit                   SLPEN               __at(0xE866);	// @ (0x1D0C * 8 + 6)
#define                                 SLPEN_bit           _BIT_ACCESS(LCDCON,6)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0xF9D8);	// @ (0x1F3B * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0xF9D9);	// @ (0x1F3B * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0xF9DA);	// @ (0x1F3B * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0xF9DB);	// @ (0x1F3B * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0xF9DC);	// @ (0x1F3B * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0xF9DE);	// @ (0x1F3B * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0xF9DF);	// @ (0x1F3B * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0xFA30);	// @ (0x1F46 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0xFA31);	// @ (0x1F46 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0xFA32);	// @ (0x1F46 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0xFA33);	// @ (0x1F46 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0xFA34);	// @ (0x1F46 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0xFA35);	// @ (0x1F46 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0xFA36);	// @ (0x1F46 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0xFA37);	// @ (0x1F46 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0xFA88);	// @ (0x1F51 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0xFA89);	// @ (0x1F51 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0xFA8A);	// @ (0x1F51 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0xFA8B);	// @ (0x1F51 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0xFA8C);	// @ (0x1F51 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0xFA8D);	// @ (0x1F51 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0xFA8E);	// @ (0x1F51 * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0xFA8F);	// @ (0x1F51 * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// SLRCOND<SLRD0>
extern volatile __bit                   SLRD0               __at(0xFAE0);	// @ (0x1F5C * 8 + 0)
#define                                 SLRD0_bit           _BIT_ACCESS(SLRCOND,0)
// SLRCOND<SLRD1>
extern volatile __bit                   SLRD1               __at(0xFAE1);	// @ (0x1F5C * 8 + 1)
#define                                 SLRD1_bit           _BIT_ACCESS(SLRCOND,1)
// SLRCOND<SLRD2>
extern volatile __bit                   SLRD2               __at(0xFAE2);	// @ (0x1F5C * 8 + 2)
#define                                 SLRD2_bit           _BIT_ACCESS(SLRCOND,2)
// SLRCOND<SLRD3>
extern volatile __bit                   SLRD3               __at(0xFAE3);	// @ (0x1F5C * 8 + 3)
#define                                 SLRD3_bit           _BIT_ACCESS(SLRCOND,3)
// SLRCOND<SLRD4>
extern volatile __bit                   SLRD4               __at(0xFAE4);	// @ (0x1F5C * 8 + 4)
#define                                 SLRD4_bit           _BIT_ACCESS(SLRCOND,4)
// SLRCOND<SLRD5>
extern volatile __bit                   SLRD5               __at(0xFAE5);	// @ (0x1F5C * 8 + 5)
#define                                 SLRD5_bit           _BIT_ACCESS(SLRCOND,5)
// SLRCOND<SLRD6>
extern volatile __bit                   SLRD6               __at(0xFAE6);	// @ (0x1F5C * 8 + 6)
#define                                 SLRD6_bit           _BIT_ACCESS(SLRCOND,6)
// SLRCOND<SLRD7>
extern volatile __bit                   SLRD7               __at(0xFAE7);	// @ (0x1F5C * 8 + 7)
#define                                 SLRD7_bit           _BIT_ACCESS(SLRCOND,7)
// SLRCONE<SLRE0>
extern volatile __bit                   SLRE0               __at(0xFB38);	// @ (0x1F67 * 8 + 0)
#define                                 SLRE0_bit           _BIT_ACCESS(SLRCONE,0)
// SLRCONE<SLRE1>
extern volatile __bit                   SLRE1               __at(0xFB39);	// @ (0x1F67 * 8 + 1)
#define                                 SLRE1_bit           _BIT_ACCESS(SLRCONE,1)
// SLRCONE<SLRE3>
extern volatile __bit                   SLRE3               __at(0xFB3B);	// @ (0x1F67 * 8 + 3)
#define                                 SLRE3_bit           _BIT_ACCESS(SLRCONE,3)
// SLRCONE<SLRE4>
extern volatile __bit                   SLRE4               __at(0xFB3C);	// @ (0x1F67 * 8 + 4)
#define                                 SLRE4_bit           _BIT_ACCESS(SLRCONE,4)
// SLRCONE<SLRE5>
extern volatile __bit                   SLRE5               __at(0xFB3D);	// @ (0x1F67 * 8 + 5)
#define                                 SLRE5_bit           _BIT_ACCESS(SLRCONE,5)
// SLRCONE<SLRE6>
extern volatile __bit                   SLRE6               __at(0xFB3E);	// @ (0x1F67 * 8 + 6)
#define                                 SLRE6_bit           _BIT_ACCESS(SLRCONE,6)
// SLRCONE<SLRE7>
extern volatile __bit                   SLRE7               __at(0xFB3F);	// @ (0x1F67 * 8 + 7)
#define                                 SLRE7_bit           _BIT_ACCESS(SLRCONE,7)
// SLRCONF<SLRF0>
extern volatile __bit                   SLRF0               __at(0xF298);	// @ (0x1E53 * 8 + 0)
#define                                 SLRF0_bit           _BIT_ACCESS(SLRCONF,0)
// SLRCONF<SLRF1>
extern volatile __bit                   SLRF1               __at(0xF299);	// @ (0x1E53 * 8 + 1)
#define                                 SLRF1_bit           _BIT_ACCESS(SLRCONF,1)
// SLRCONF<SLRF2>
extern volatile __bit                   SLRF2               __at(0xF29A);	// @ (0x1E53 * 8 + 2)
#define                                 SLRF2_bit           _BIT_ACCESS(SLRCONF,2)
// SLRCONF<SLRF3>
extern volatile __bit                   SLRF3               __at(0xF29B);	// @ (0x1E53 * 8 + 3)
#define                                 SLRF3_bit           _BIT_ACCESS(SLRCONF,3)
// SLRCONF<SLRF4>
extern volatile __bit                   SLRF4               __at(0xF29C);	// @ (0x1E53 * 8 + 4)
#define                                 SLRF4_bit           _BIT_ACCESS(SLRCONF,4)
// SLRCONF<SLRF5>
extern volatile __bit                   SLRF5               __at(0xF29D);	// @ (0x1E53 * 8 + 5)
#define                                 SLRF5_bit           _BIT_ACCESS(SLRCONF,5)
// SLRCONF<SLRF6>
extern volatile __bit                   SLRF6               __at(0xF29E);	// @ (0x1E53 * 8 + 6)
#define                                 SLRF6_bit           _BIT_ACCESS(SLRCONF,6)
// SLRCONF<SLRF7>
extern volatile __bit                   SLRF7               __at(0xF29F);	// @ (0x1E53 * 8 + 7)
#define                                 SLRF7_bit           _BIT_ACCESS(SLRCONF,7)
// SLRCONG<SLRG0>
extern volatile __bit                   SLRG0               __at(0xF2F0);	// @ (0x1E5E * 8 + 0)
#define                                 SLRG0_bit           _BIT_ACCESS(SLRCONG,0)
// SLRCONG<SLRG1>
extern volatile __bit                   SLRG1               __at(0xF2F1);	// @ (0x1E5E * 8 + 1)
#define                                 SLRG1_bit           _BIT_ACCESS(SLRCONG,1)
// SLRCONG<SLRG2>
extern volatile __bit                   SLRG2               __at(0xF2F2);	// @ (0x1E5E * 8 + 2)
#define                                 SLRG2_bit           _BIT_ACCESS(SLRCONG,2)
// SLRCONG<SLRG3>
extern volatile __bit                   SLRG3               __at(0xF2F3);	// @ (0x1E5E * 8 + 3)
#define                                 SLRG3_bit           _BIT_ACCESS(SLRCONG,3)
// SLRCONG<SLRG4>
extern volatile __bit                   SLRG4               __at(0xF2F4);	// @ (0x1E5E * 8 + 4)
#define                                 SLRG4_bit           _BIT_ACCESS(SLRCONG,4)
// SLRCONG<SLRG6>
extern volatile __bit                   SLRG6               __at(0xF2F6);	// @ (0x1E5E * 8 + 6)
#define                                 SLRG6_bit           _BIT_ACCESS(SLRCONG,6)
// SLRCONG<SLRG7>
extern volatile __bit                   SLRG7               __at(0xF2F7);	// @ (0x1E5E * 8 + 7)
#define                                 SLRG7_bit           _BIT_ACCESS(SLRCONG,7)
// SLRCONH<SLRH0>
extern volatile __bit                   SLRH0               __at(0xF348);	// @ (0x1E69 * 8 + 0)
#define                                 SLRH0_bit           _BIT_ACCESS(SLRCONH,0)
// SLRCONH<SLRH1>
extern volatile __bit                   SLRH1               __at(0xF349);	// @ (0x1E69 * 8 + 1)
#define                                 SLRH1_bit           _BIT_ACCESS(SLRCONH,1)
// SLRCONH<SLRH2>
extern volatile __bit                   SLRH2               __at(0xF34A);	// @ (0x1E69 * 8 + 2)
#define                                 SLRH2_bit           _BIT_ACCESS(SLRCONH,2)
// SLRCONH<SLRH3>
extern volatile __bit                   SLRH3               __at(0xF34B);	// @ (0x1E69 * 8 + 3)
#define                                 SLRH3_bit           _BIT_ACCESS(SLRCONH,3)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// SMT1STAT<SMT1AS>
extern volatile __bit                   SMT1AS              __at(0x24D0);	// @ (0x49A * 8 + 0)
#define                                 SMT1AS_bit          _BIT_ACCESS(SMT1STAT,0)
// SMT1CPRH<SMT1CPR10>
extern volatile __bit                   SMT1CPR10           __at(0x2482);	// @ (0x490 * 8 + 2)
#define                                 SMT1CPR10_bit       _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<SMT1CPR11>
extern volatile __bit                   SMT1CPR11           __at(0x2483);	// @ (0x490 * 8 + 3)
#define                                 SMT1CPR11_bit       _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<SMT1CPR12>
extern volatile __bit                   SMT1CPR12           __at(0x2484);	// @ (0x490 * 8 + 4)
#define                                 SMT1CPR12_bit       _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<SMT1CPR13>
extern volatile __bit                   SMT1CPR13           __at(0x2485);	// @ (0x490 * 8 + 5)
#define                                 SMT1CPR13_bit       _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<SMT1CPR14>
extern volatile __bit                   SMT1CPR14           __at(0x2486);	// @ (0x490 * 8 + 6)
#define                                 SMT1CPR14_bit       _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<SMT1CPR15>
extern volatile __bit                   SMT1CPR15           __at(0x2487);	// @ (0x490 * 8 + 7)
#define                                 SMT1CPR15_bit       _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<SMT1CPR16>
extern volatile __bit                   SMT1CPR16           __at(0x2488);	// @ (0x491 * 8 + 0)
#define                                 SMT1CPR16_bit       _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<SMT1CPR17>
extern volatile __bit                   SMT1CPR17           __at(0x2489);	// @ (0x491 * 8 + 1)
#define                                 SMT1CPR17_bit       _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<SMT1CPR18>
extern volatile __bit                   SMT1CPR18           __at(0x248A);	// @ (0x491 * 8 + 2)
#define                                 SMT1CPR18_bit       _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<SMT1CPR19>
extern volatile __bit                   SMT1CPR19           __at(0x248B);	// @ (0x491 * 8 + 3)
#define                                 SMT1CPR19_bit       _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRU<SMT1CPR20>
extern volatile __bit                   SMT1CPR20           __at(0x248C);	// @ (0x491 * 8 + 4)
#define                                 SMT1CPR20_bit       _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<SMT1CPR21>
extern volatile __bit                   SMT1CPR21           __at(0x248D);	// @ (0x491 * 8 + 5)
#define                                 SMT1CPR21_bit       _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<SMT1CPR22>
extern volatile __bit                   SMT1CPR22           __at(0x248E);	// @ (0x491 * 8 + 6)
#define                                 SMT1CPR22_bit       _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<SMT1CPR23>
extern volatile __bit                   SMT1CPR23           __at(0x248F);	// @ (0x491 * 8 + 7)
#define                                 SMT1CPR23_bit       _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRH<SMT1CPR8>
extern volatile __bit                   SMT1CPR8            __at(0x2480);	// @ (0x490 * 8 + 0)
#define                                 SMT1CPR8_bit        _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<SMT1CPR9>
extern volatile __bit                   SMT1CPR9            __at(0x2481);	// @ (0x490 * 8 + 1)
#define                                 SMT1CPR9_bit        _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<SMT1CPRUP>
extern volatile __bit                   SMT1CPRUP           __at(0x24D7);	// @ (0x49A * 8 + 7)
#define                                 SMT1CPRUP_bit       _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<SMT1CPW0>
extern volatile __bit                   SMT1CPW0            __at(0x2490);	// @ (0x492 * 8 + 0)
#define                                 SMT1CPW0_bit        _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<SMT1CPW1>
extern volatile __bit                   SMT1CPW1            __at(0x2491);	// @ (0x492 * 8 + 1)
#define                                 SMT1CPW1_bit        _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<SMT1CPW10>
extern volatile __bit                   SMT1CPW10           __at(0x249A);	// @ (0x493 * 8 + 2)
#define                                 SMT1CPW10_bit       _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<SMT1CPW11>
extern volatile __bit                   SMT1CPW11           __at(0x249B);	// @ (0x493 * 8 + 3)
#define                                 SMT1CPW11_bit       _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<SMT1CPW12>
extern volatile __bit                   SMT1CPW12           __at(0x249C);	// @ (0x493 * 8 + 4)
#define                                 SMT1CPW12_bit       _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<SMT1CPW13>
extern volatile __bit                   SMT1CPW13           __at(0x249D);	// @ (0x493 * 8 + 5)
#define                                 SMT1CPW13_bit       _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<SMT1CPW14>
extern volatile __bit                   SMT1CPW14           __at(0x249E);	// @ (0x493 * 8 + 6)
#define                                 SMT1CPW14_bit       _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<SMT1CPW15>
extern volatile __bit                   SMT1CPW15           __at(0x249F);	// @ (0x493 * 8 + 7)
#define                                 SMT1CPW15_bit       _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<SMT1CPW16>
extern volatile __bit                   SMT1CPW16           __at(0x24A0);	// @ (0x494 * 8 + 0)
#define                                 SMT1CPW16_bit       _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<SMT1CPW17>
extern volatile __bit                   SMT1CPW17           __at(0x24A1);	// @ (0x494 * 8 + 1)
#define                                 SMT1CPW17_bit       _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<SMT1CPW18>
extern volatile __bit                   SMT1CPW18           __at(0x24A2);	// @ (0x494 * 8 + 2)
#define                                 SMT1CPW18_bit       _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<SMT1CPW19>
extern volatile __bit                   SMT1CPW19           __at(0x24A3);	// @ (0x494 * 8 + 3)
#define                                 SMT1CPW19_bit       _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<SMT1CPW2>
extern volatile __bit                   SMT1CPW2            __at(0x2492);	// @ (0x492 * 8 + 2)
#define                                 SMT1CPW2_bit        _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<SMT1CPW20>
extern volatile __bit                   SMT1CPW20           __at(0x24A4);	// @ (0x494 * 8 + 4)
#define                                 SMT1CPW20_bit       _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<SMT1CPW21>
extern volatile __bit                   SMT1CPW21           __at(0x24A5);	// @ (0x494 * 8 + 5)
#define                                 SMT1CPW21_bit       _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<SMT1CPW22>
extern volatile __bit                   SMT1CPW22           __at(0x24A6);	// @ (0x494 * 8 + 6)
#define                                 SMT1CPW22_bit       _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<SMT1CPW23>
extern volatile __bit                   SMT1CPW23           __at(0x24A7);	// @ (0x494 * 8 + 7)
#define                                 SMT1CPW23_bit       _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<SMT1CPW3>
extern volatile __bit                   SMT1CPW3            __at(0x2493);	// @ (0x492 * 8 + 3)
#define                                 SMT1CPW3_bit        _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<SMT1CPW4>
extern volatile __bit                   SMT1CPW4            __at(0x2494);	// @ (0x492 * 8 + 4)
#define                                 SMT1CPW4_bit        _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<SMT1CPW5>
extern volatile __bit                   SMT1CPW5            __at(0x2495);	// @ (0x492 * 8 + 5)
#define                                 SMT1CPW5_bit        _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<SMT1CPW6>
extern volatile __bit                   SMT1CPW6            __at(0x2496);	// @ (0x492 * 8 + 6)
#define                                 SMT1CPW6_bit        _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<SMT1CPW7>
extern volatile __bit                   SMT1CPW7            __at(0x2497);	// @ (0x492 * 8 + 7)
#define                                 SMT1CPW7_bit        _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<SMT1CPW8>
extern volatile __bit                   SMT1CPW8            __at(0x2498);	// @ (0x493 * 8 + 0)
#define                                 SMT1CPW8_bit        _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<SMT1CPW9>
extern volatile __bit                   SMT1CPW9            __at(0x2499);	// @ (0x493 * 8 + 1)
#define                                 SMT1CPW9_bit        _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<SMT1CPWUP>
extern volatile __bit                   SMT1CPWUP           __at(0x24D6);	// @ (0x49A * 8 + 6)
#define                                 SMT1CPWUP_bit       _BIT_ACCESS(SMT1STAT,6)
// SMT1CLK<SMT1CSEL0>
extern volatile __bit                   SMT1CSEL0           __at(0x24D8);	// @ (0x49B * 8 + 0)
#define                                 SMT1CSEL0_bit       _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<SMT1CSEL1>
extern volatile __bit                   SMT1CSEL1           __at(0x24D9);	// @ (0x49B * 8 + 1)
#define                                 SMT1CSEL1_bit       _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<SMT1CSEL2>
extern volatile __bit                   SMT1CSEL2           __at(0x24DA);	// @ (0x49B * 8 + 2)
#define                                 SMT1CSEL2_bit       _BIT_ACCESS(SMT1CLK,2)
// SMT1CON0<SMT1EN>
extern volatile __bit                   SMT1EN              __at(0x24C7);	// @ (0x498 * 8 + 7)
#define                                 SMT1EN_bit          _BIT_ACCESS(SMT1CON0,7)
// SMT1CON1<SMT1GO>
extern volatile __bit                   SMT1GO              __at(0x24CF);	// @ (0x499 * 8 + 7)
#define                                 SMT1GO_bit          _BIT_ACCESS(SMT1CON1,7)
// PIE8<SMT1IE>
extern volatile __bit                   SMT1IE              __at(0x38F0);	// @ (0x71E * 8 + 0)
#define                                 SMT1IE_bit          _BIT_ACCESS(PIE8,0)
// PIR8<SMT1IF>
extern volatile __bit                   SMT1IF              __at(0x38A0);	// @ (0x714 * 8 + 0)
#define                                 SMT1IF_bit          _BIT_ACCESS(PIR8,0)
// PMD5<SMT1MD>
extern volatile __bit                   SMT1MD              __at(0x3CDE);	// @ (0x79B * 8 + 6)
#define                                 SMT1MD_bit          _BIT_ACCESS(PMD5,6)
// SMT1PRL<SMT1PR0>
extern volatile __bit                   SMT1PR0             __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 SMT1PR0_bit         _BIT_ACCESS(SMT1PRL,0)
// SMT1PRL<SMT1PR1>
extern volatile __bit                   SMT1PR1             __at(0x24A9);	// @ (0x495 * 8 + 1)
#define                                 SMT1PR1_bit         _BIT_ACCESS(SMT1PRL,1)
// SMT1PRH<SMT1PR10>
extern volatile __bit                   SMT1PR10            __at(0x24B2);	// @ (0x496 * 8 + 2)
#define                                 SMT1PR10_bit        _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<SMT1PR11>
extern volatile __bit                   SMT1PR11            __at(0x24B3);	// @ (0x496 * 8 + 3)
#define                                 SMT1PR11_bit        _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<SMT1PR12>
extern volatile __bit                   SMT1PR12            __at(0x24B4);	// @ (0x496 * 8 + 4)
#define                                 SMT1PR12_bit        _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<SMT1PR13>
extern volatile __bit                   SMT1PR13            __at(0x24B5);	// @ (0x496 * 8 + 5)
#define                                 SMT1PR13_bit        _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<SMT1PR14>
extern volatile __bit                   SMT1PR14            __at(0x24B6);	// @ (0x496 * 8 + 6)
#define                                 SMT1PR14_bit        _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<SMT1PR15>
extern volatile __bit                   SMT1PR15            __at(0x24B7);	// @ (0x496 * 8 + 7)
#define                                 SMT1PR15_bit        _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<SMT1PR16>
extern volatile __bit                   SMT1PR16            __at(0x24B8);	// @ (0x497 * 8 + 0)
#define                                 SMT1PR16_bit        _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<SMT1PR17>
extern volatile __bit                   SMT1PR17            __at(0x24B9);	// @ (0x497 * 8 + 1)
#define                                 SMT1PR17_bit        _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<SMT1PR18>
extern volatile __bit                   SMT1PR18            __at(0x24BA);	// @ (0x497 * 8 + 2)
#define                                 SMT1PR18_bit        _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<SMT1PR19>
extern volatile __bit                   SMT1PR19            __at(0x24BB);	// @ (0x497 * 8 + 3)
#define                                 SMT1PR19_bit        _BIT_ACCESS(SMT1PRU,3)
// SMT1PRL<SMT1PR2>
extern volatile __bit                   SMT1PR2             __at(0x24AA);	// @ (0x495 * 8 + 2)
#define                                 SMT1PR2_bit         _BIT_ACCESS(SMT1PRL,2)
// SMT1PRU<SMT1PR20>
extern volatile __bit                   SMT1PR20            __at(0x24BC);	// @ (0x497 * 8 + 4)
#define                                 SMT1PR20_bit        _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<SMT1PR21>
extern volatile __bit                   SMT1PR21            __at(0x24BD);	// @ (0x497 * 8 + 5)
#define                                 SMT1PR21_bit        _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<SMT1PR22>
extern volatile __bit                   SMT1PR22            __at(0x24BE);	// @ (0x497 * 8 + 6)
#define                                 SMT1PR22_bit        _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<SMT1PR23>
extern volatile __bit                   SMT1PR23            __at(0x24BF);	// @ (0x497 * 8 + 7)
#define                                 SMT1PR23_bit        _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<SMT1PR3>
extern volatile __bit                   SMT1PR3             __at(0x24AB);	// @ (0x495 * 8 + 3)
#define                                 SMT1PR3_bit         _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<SMT1PR4>
extern volatile __bit                   SMT1PR4             __at(0x24AC);	// @ (0x495 * 8 + 4)
#define                                 SMT1PR4_bit         _BIT_ACCESS(SMT1PRL,4)
// SMT1PRL<SMT1PR5>
extern volatile __bit                   SMT1PR5             __at(0x24AD);	// @ (0x495 * 8 + 5)
#define                                 SMT1PR5_bit         _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<SMT1PR6>
extern volatile __bit                   SMT1PR6             __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 SMT1PR6_bit         _BIT_ACCESS(SMT1PRL,6)
// SMT1PRL<SMT1PR7>
extern volatile __bit                   SMT1PR7             __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 SMT1PR7_bit         _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<SMT1PR8>
extern volatile __bit                   SMT1PR8             __at(0x24B0);	// @ (0x496 * 8 + 0)
#define                                 SMT1PR8_bit         _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<SMT1PR9>
extern volatile __bit                   SMT1PR9             __at(0x24B1);	// @ (0x496 * 8 + 1)
#define                                 SMT1PR9_bit         _BIT_ACCESS(SMT1PRH,1)
// PIE8<SMT1PRAIE>
extern volatile __bit                   SMT1PRAIE           __at(0x38F1);	// @ (0x71E * 8 + 1)
#define                                 SMT1PRAIE_bit       _BIT_ACCESS(PIE8,1)
// PIR8<SMT1PRAIF>
extern volatile __bit                   SMT1PRAIF           __at(0x38A1);	// @ (0x714 * 8 + 1)
#define                                 SMT1PRAIF_bit       _BIT_ACCESS(PIR8,1)
// SMT1CON0<SMT1PS0>
extern volatile __bit                   SMT1PS0             __at(0x24C0);	// @ (0x498 * 8 + 0)
#define                                 SMT1PS0_bit         _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<SMT1PS1>
extern volatile __bit                   SMT1PS1             __at(0x24C1);	// @ (0x498 * 8 + 1)
#define                                 SMT1PS1_bit         _BIT_ACCESS(SMT1CON0,1)
// PIE8<SMT1PWAIE>
extern volatile __bit                   SMT1PWAIE           __at(0x38F2);	// @ (0x71E * 8 + 2)
#define                                 SMT1PWAIE_bit       _BIT_ACCESS(PIE8,2)
// PIR8<SMT1PWAIF>
extern volatile __bit                   SMT1PWAIF           __at(0x38A2);	// @ (0x714 * 8 + 2)
#define                                 SMT1PWAIF_bit       _BIT_ACCESS(PIR8,2)
// SMT1STAT<SMT1RESET>
extern volatile __bit                   SMT1RESET           __at(0x24D5);	// @ (0x49A * 8 + 5)
#define                                 SMT1RESET_bit       _BIT_ACCESS(SMT1STAT,5)
// SMT1SIGPPS<SMT1SIGPPS0>
extern volatile __bit                   SMT1SIGPPS0         __at(0xF550);	// @ (0x1EAA * 8 + 0)
#define                                 SMT1SIGPPS0_bit     _BIT_ACCESS(SMT1SIGPPS,0)
// SMT1SIGPPS<SMT1SIGPPS1>
extern volatile __bit                   SMT1SIGPPS1         __at(0xF551);	// @ (0x1EAA * 8 + 1)
#define                                 SMT1SIGPPS1_bit     _BIT_ACCESS(SMT1SIGPPS,1)
// SMT1SIGPPS<SMT1SIGPPS2>
extern volatile __bit                   SMT1SIGPPS2         __at(0xF552);	// @ (0x1EAA * 8 + 2)
#define                                 SMT1SIGPPS2_bit     _BIT_ACCESS(SMT1SIGPPS,2)
// SMT1SIGPPS<SMT1SIGPPS3>
extern volatile __bit                   SMT1SIGPPS3         __at(0xF553);	// @ (0x1EAA * 8 + 3)
#define                                 SMT1SIGPPS3_bit     _BIT_ACCESS(SMT1SIGPPS,3)
// SMT1SIGPPS<SMT1SIGPPS4>
extern volatile __bit                   SMT1SIGPPS4         __at(0xF554);	// @ (0x1EAA * 8 + 4)
#define                                 SMT1SIGPPS4_bit     _BIT_ACCESS(SMT1SIGPPS,4)
// SMT1SIG<SMT1SSEL0>
extern volatile __bit                   SMT1SSEL0           __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 SMT1SSEL0_bit       _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SMT1SSEL1>
extern volatile __bit                   SMT1SSEL1           __at(0x24E1);	// @ (0x49C * 8 + 1)
#define                                 SMT1SSEL1_bit       _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SMT1SSEL2>
extern volatile __bit                   SMT1SSEL2           __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 SMT1SSEL2_bit       _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SMT1SSEL3>
extern volatile __bit                   SMT1SSEL3           __at(0x24E3);	// @ (0x49C * 8 + 3)
#define                                 SMT1SSEL3_bit       _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SMT1SSEL4>
extern volatile __bit                   SMT1SSEL4           __at(0x24E4);	// @ (0x49C * 8 + 4)
#define                                 SMT1SSEL4_bit       _BIT_ACCESS(SMT1SIG,4)
// SMT1TMRL<SMT1TMR0>
extern volatile __bit                   SMT1TMR0            __at(0x2460);	// @ (0x48C * 8 + 0)
#define                                 SMT1TMR0_bit        _BIT_ACCESS(SMT1TMRL,0)
// SMT1TMRL<SMT1TMR1>
extern volatile __bit                   SMT1TMR1            __at(0x2461);	// @ (0x48C * 8 + 1)
#define                                 SMT1TMR1_bit        _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<SMT1TMR10>
extern volatile __bit                   SMT1TMR10           __at(0x246A);	// @ (0x48D * 8 + 2)
#define                                 SMT1TMR10_bit       _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<SMT1TMR11>
extern volatile __bit                   SMT1TMR11           __at(0x246B);	// @ (0x48D * 8 + 3)
#define                                 SMT1TMR11_bit       _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<SMT1TMR12>
extern volatile __bit                   SMT1TMR12           __at(0x246C);	// @ (0x48D * 8 + 4)
#define                                 SMT1TMR12_bit       _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<SMT1TMR13>
extern volatile __bit                   SMT1TMR13           __at(0x246D);	// @ (0x48D * 8 + 5)
#define                                 SMT1TMR13_bit       _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<SMT1TMR14>
extern volatile __bit                   SMT1TMR14           __at(0x246E);	// @ (0x48D * 8 + 6)
#define                                 SMT1TMR14_bit       _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<SMT1TMR15>
extern volatile __bit                   SMT1TMR15           __at(0x246F);	// @ (0x48D * 8 + 7)
#define                                 SMT1TMR15_bit       _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<SMT1TMR16>
extern volatile __bit                   SMT1TMR16           __at(0x2470);	// @ (0x48E * 8 + 0)
#define                                 SMT1TMR16_bit       _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<SMT1TMR17>
extern volatile __bit                   SMT1TMR17           __at(0x2471);	// @ (0x48E * 8 + 1)
#define                                 SMT1TMR17_bit       _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<SMT1TMR18>
extern volatile __bit                   SMT1TMR18           __at(0x2472);	// @ (0x48E * 8 + 2)
#define                                 SMT1TMR18_bit       _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<SMT1TMR19>
extern volatile __bit                   SMT1TMR19           __at(0x2473);	// @ (0x48E * 8 + 3)
#define                                 SMT1TMR19_bit       _BIT_ACCESS(SMT1TMRU,3)
// SMT1TMRL<SMT1TMR2>
extern volatile __bit                   SMT1TMR2            __at(0x2462);	// @ (0x48C * 8 + 2)
#define                                 SMT1TMR2_bit        _BIT_ACCESS(SMT1TMRL,2)
// SMT1TMRU<SMT1TMR20>
extern volatile __bit                   SMT1TMR20           __at(0x2474);	// @ (0x48E * 8 + 4)
#define                                 SMT1TMR20_bit       _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<SMT1TMR21>
extern volatile __bit                   SMT1TMR21           __at(0x2475);	// @ (0x48E * 8 + 5)
#define                                 SMT1TMR21_bit       _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<SMT1TMR22>
extern volatile __bit                   SMT1TMR22           __at(0x2476);	// @ (0x48E * 8 + 6)
#define                                 SMT1TMR22_bit       _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<SMT1TMR23>
extern volatile __bit                   SMT1TMR23           __at(0x2477);	// @ (0x48E * 8 + 7)
#define                                 SMT1TMR23_bit       _BIT_ACCESS(SMT1TMRU,7)
// SMT1TMRL<SMT1TMR3>
extern volatile __bit                   SMT1TMR3            __at(0x2463);	// @ (0x48C * 8 + 3)
#define                                 SMT1TMR3_bit        _BIT_ACCESS(SMT1TMRL,3)
// SMT1TMRL<SMT1TMR4>
extern volatile __bit                   SMT1TMR4            __at(0x2464);	// @ (0x48C * 8 + 4)
#define                                 SMT1TMR4_bit        _BIT_ACCESS(SMT1TMRL,4)
// SMT1TMRL<SMT1TMR5>
extern volatile __bit                   SMT1TMR5            __at(0x2465);	// @ (0x48C * 8 + 5)
#define                                 SMT1TMR5_bit        _BIT_ACCESS(SMT1TMRL,5)
// SMT1TMRL<SMT1TMR6>
extern volatile __bit                   SMT1TMR6            __at(0x2466);	// @ (0x48C * 8 + 6)
#define                                 SMT1TMR6_bit        _BIT_ACCESS(SMT1TMRL,6)
// SMT1TMRL<SMT1TMR7>
extern volatile __bit                   SMT1TMR7            __at(0x2467);	// @ (0x48C * 8 + 7)
#define                                 SMT1TMR7_bit        _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<SMT1TMR8>
extern volatile __bit                   SMT1TMR8            __at(0x2468);	// @ (0x48D * 8 + 0)
#define                                 SMT1TMR8_bit        _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<SMT1TMR9>
extern volatile __bit                   SMT1TMR9            __at(0x2469);	// @ (0x48D * 8 + 1)
#define                                 SMT1TMR9_bit        _BIT_ACCESS(SMT1TMRH,1)
// SMT1STAT<SMT1TS>
extern volatile __bit                   SMT1TS              __at(0x24D2);	// @ (0x49A * 8 + 2)
#define                                 SMT1TS_bit          _BIT_ACCESS(SMT1STAT,2)
// SMT1WINPPS<SMT1WINPPS0>
extern volatile __bit                   SMT1WINPPS0         __at(0xF548);	// @ (0x1EA9 * 8 + 0)
#define                                 SMT1WINPPS0_bit     _BIT_ACCESS(SMT1WINPPS,0)
// SMT1WINPPS<SMT1WINPPS1>
extern volatile __bit                   SMT1WINPPS1         __at(0xF549);	// @ (0x1EA9 * 8 + 1)
#define                                 SMT1WINPPS1_bit     _BIT_ACCESS(SMT1WINPPS,1)
// SMT1WINPPS<SMT1WINPPS2>
extern volatile __bit                   SMT1WINPPS2         __at(0xF54A);	// @ (0x1EA9 * 8 + 2)
#define                                 SMT1WINPPS2_bit     _BIT_ACCESS(SMT1WINPPS,2)
// SMT1WINPPS<SMT1WINPPS3>
extern volatile __bit                   SMT1WINPPS3         __at(0xF54B);	// @ (0x1EA9 * 8 + 3)
#define                                 SMT1WINPPS3_bit     _BIT_ACCESS(SMT1WINPPS,3)
// SMT1WINPPS<SMT1WINPPS4>
extern volatile __bit                   SMT1WINPPS4         __at(0xF54C);	// @ (0x1EA9 * 8 + 4)
#define                                 SMT1WINPPS4_bit     _BIT_ACCESS(SMT1WINPPS,4)
// SMT1STAT<SMT1WS>
extern volatile __bit                   SMT1WS              __at(0x24D1);	// @ (0x49A * 8 + 1)
#define                                 SMT1WS_bit          _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<SMT1WSEL0>
extern volatile __bit                   SMT1WSEL0           __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 SMT1WSEL0_bit       _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<SMT1WSEL1>
extern volatile __bit                   SMT1WSEL1           __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 SMT1WSEL1_bit       _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<SMT1WSEL2>
extern volatile __bit                   SMT1WSEL2           __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 SMT1WSEL2_bit       _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<SMT1WSEL3>
extern volatile __bit                   SMT1WSEL3           __at(0x24EB);	// @ (0x49D * 8 + 3)
#define                                 SMT1WSEL3_bit       _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<SMT1WSEL4>
extern volatile __bit                   SMT1WSEL4           __at(0x24EC);	// @ (0x49D * 8 + 4)
#define                                 SMT1WSEL4_bit       _BIT_ACCESS(SMT1WIN,4)
// ADCON3<SOI>
extern volatile __bit                   SOI                 __at(0x8A3);	// @ (0x114 * 8 + 3)
#define                                 SOI_bit             _BIT_ACCESS(ADCON3,3)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x4483);	// @ (0x890 * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x448B);	// @ (0x891 * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x447E);	// @ (0x88F * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// SMT1CON0<SPOL>
extern volatile __bit                   SPOL                __at(0x24C3);	// @ (0x498 * 8 + 3)
#define                                 SPOL_bit            _BIT_ACCESS(SMT1CON0,3)
// SMT1SIG<SSEL0>
extern volatile __bit                   SSEL0               __at(0x24E0);	// @ (0x49C * 8 + 0)
#define                                 SSEL0_bit           _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SSEL1>
extern volatile __bit                   SSEL1               __at(0x24E1);	// @ (0x49C * 8 + 1)
#define                                 SSEL1_bit           _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SSEL2>
extern volatile __bit                   SSEL2               __at(0x24E2);	// @ (0x49C * 8 + 2)
#define                                 SSEL2_bit           _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SSEL3>
extern volatile __bit                   SSEL3               __at(0x24E3);	// @ (0x49C * 8 + 3)
#define                                 SSEL3_bit           _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SSEL4>
extern volatile __bit                   SSEL4               __at(0x24E4);	// @ (0x49C * 8 + 4)
#define                                 SSEL4_bit           _BIT_ACCESS(SMT1SIG,4)
// SSP1CLKPPS<SSP1CLKPPS0>
extern volatile __bit                   SSP1CLKPPS0         __at(0xF628);	// @ (0x1EC5 * 8 + 0)
#define                                 SSP1CLKPPS0_bit     _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSP1CLKPPS1>
extern volatile __bit                   SSP1CLKPPS1         __at(0xF629);	// @ (0x1EC5 * 8 + 1)
#define                                 SSP1CLKPPS1_bit     _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSP1CLKPPS2>
extern volatile __bit                   SSP1CLKPPS2         __at(0xF62A);	// @ (0x1EC5 * 8 + 2)
#define                                 SSP1CLKPPS2_bit     _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSP1CLKPPS3>
extern volatile __bit                   SSP1CLKPPS3         __at(0xF62B);	// @ (0x1EC5 * 8 + 3)
#define                                 SSP1CLKPPS3_bit     _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSP1CLKPPS4>
extern volatile __bit                   SSP1CLKPPS4         __at(0xF62C);	// @ (0x1EC5 * 8 + 4)
#define                                 SSP1CLKPPS4_bit     _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1DATPPS<SSP1DATPPS0>
extern volatile __bit                   SSP1DATPPS0         __at(0xF630);	// @ (0x1EC6 * 8 + 0)
#define                                 SSP1DATPPS0_bit     _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSP1DATPPS1>
extern volatile __bit                   SSP1DATPPS1         __at(0xF631);	// @ (0x1EC6 * 8 + 1)
#define                                 SSP1DATPPS1_bit     _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSP1DATPPS2>
extern volatile __bit                   SSP1DATPPS2         __at(0xF632);	// @ (0x1EC6 * 8 + 2)
#define                                 SSP1DATPPS2_bit     _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSP1DATPPS3>
extern volatile __bit                   SSP1DATPPS3         __at(0xF633);	// @ (0x1EC6 * 8 + 3)
#define                                 SSP1DATPPS3_bit     _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSP1DATPPS4>
extern volatile __bit                   SSP1DATPPS4         __at(0xF634);	// @ (0x1EC6 * 8 + 4)
#define                                 SSP1DATPPS4_bit     _BIT_ACCESS(SSP1DATPPS,4)
// PIE3<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x38C8);	// @ (0x719 * 8 + 0)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x3878);	// @ (0x70F * 8 + 0)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR3,0)
// SSP1SSPPS<SSP1SSPPS0>
extern volatile __bit                   SSP1SSPPS0          __at(0xF638);	// @ (0x1EC7 * 8 + 0)
#define                                 SSP1SSPPS0_bit      _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSP1SSPPS1>
extern volatile __bit                   SSP1SSPPS1          __at(0xF639);	// @ (0x1EC7 * 8 + 1)
#define                                 SSP1SSPPS1_bit      _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSP1SSPPS2>
extern volatile __bit                   SSP1SSPPS2          __at(0xF63A);	// @ (0x1EC7 * 8 + 2)
#define                                 SSP1SSPPS2_bit      _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSP1SSPPS3>
extern volatile __bit                   SSP1SSPPS3          __at(0xF63B);	// @ (0x1EC7 * 8 + 3)
#define                                 SSP1SSPPS3_bit      _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSP1SSPPS4>
extern volatile __bit                   SSP1SSPPS4          __at(0xF63C);	// @ (0x1EC7 * 8 + 4)
#define                                 SSP1SSPPS4_bit      _BIT_ACCESS(SSP1SSPPS,4)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP1STAT<START>
extern volatile __bit                   START               __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START_bit           _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// ADSTAT<STAT0>
extern volatile __bit                   STAT0               __at(0x8A8);	// @ (0x115 * 8 + 0)
#define                                 STAT0_bit           _BIT_ACCESS(ADSTAT,0)
// ADSTAT<STAT1>
extern volatile __bit                   STAT1               __at(0x8A9);	// @ (0x115 * 8 + 1)
#define                                 STAT1_bit           _BIT_ACCESS(ADSTAT,1)
// ADSTAT<STAT2>
extern volatile __bit                   STAT2               __at(0x8AA);	// @ (0x115 * 8 + 2)
#define                                 STAT2_bit           _BIT_ACCESS(ADSTAT,2)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x409F);	// @ (0x813 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x409E);	// @ (0x813 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP>
extern volatile __bit                   STOP                __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP_bit            _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// SMT1CON0<STP>
extern volatile __bit                   STP                 __at(0x24C5);	// @ (0x498 * 8 + 5)
#define                                 STP_bit             _BIT_ACCESS(SMT1CON0,5)
// ADSTPTL<STPT0>
extern volatile __bit                   STPT0               __at(0x490);	// @ (0x92 * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<STPT1>
extern volatile __bit                   STPT1               __at(0x491);	// @ (0x92 * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<STPT10>
extern volatile __bit                   STPT10              __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<STPT11>
extern volatile __bit                   STPT11              __at(0x49B);	// @ (0x93 * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<STPT12>
extern volatile __bit                   STPT12              __at(0x49C);	// @ (0x93 * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<STPT13>
extern volatile __bit                   STPT13              __at(0x49D);	// @ (0x93 * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<STPT15>
extern volatile __bit                   STPT15              __at(0x49E);	// @ (0x93 * 8 + 6)
#define                                 STPT15_bit          _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<STPT16>
extern volatile __bit                   STPT16              __at(0x49F);	// @ (0x93 * 8 + 7)
#define                                 STPT16_bit          _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<STPT2>
extern volatile __bit                   STPT2               __at(0x492);	// @ (0x92 * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<STPT3>
extern volatile __bit                   STPT3               __at(0x493);	// @ (0x92 * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<STPT4>
extern volatile __bit                   STPT4               __at(0x494);	// @ (0x92 * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<STPT5>
extern volatile __bit                   STPT5               __at(0x495);	// @ (0x92 * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<STPT6>
extern volatile __bit                   STPT6               __at(0x496);	// @ (0x92 * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<STPT7>
extern volatile __bit                   STPT7               __at(0x497);	// @ (0x92 * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<STPT8>
extern volatile __bit                   STPT8               __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<STPT9>
extern volatile __bit                   STPT9               __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(ADSTPTH,1)
// CWG1STR<STRA>
extern volatile __bit                   STRA                __at(0x30A0);	// @ (0x614 * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(CWG1STR,0)
// CWG1STR<STRB>
extern volatile __bit                   STRB                __at(0x30A1);	// @ (0x614 * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(CWG1STR,1)
// CWG1STR<STRC>
extern volatile __bit                   STRC                __at(0x30A2);	// @ (0x614 * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(CWG1STR,2)
// CWG1STR<STRD>
extern volatile __bit                   STRD                __at(0x30A3);	// @ (0x614 * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(CWG1STR,3)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x3CB7);	// @ (0x796 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x2CF4);	// @ (0x59E * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x2CFC);	// @ (0x59F * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0xF488);	// @ (0x1E91 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0xF489);	// @ (0x1E91 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0xF48A);	// @ (0x1E91 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0xF48B);	// @ (0x1E91 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0xF48C);	// @ (0x1E91 * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x2CF8);	// @ (0x59F * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x2CF9);	// @ (0x59F * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x2CFA);	// @ (0x59F * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x2CFB);	// @ (0x59F * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x2CFD);	// @ (0x59F * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x2CFE);	// @ (0x59F * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x2CFF);	// @ (0x59F * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x2CF7);	// @ (0x59E * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0OE>
extern volatile __bit                   T0OE                __at(0x2CF6);	// @ (0x59E * 8 + 6)
#define                                 T0OE_bit            _BIT_ACCESS(T0CON0,6)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x2CF5);	// @ (0x59E * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0x2CF0);	// @ (0x59E * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0x2CF1);	// @ (0x59E * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0x2CF2);	// @ (0x59E * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0x2CF3);	// @ (0x59E * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x2CE9);	// @ (0x59D * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x2CEA);	// @ (0x59D * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x2CEB);	// @ (0x59D * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x2CEC);	// @ (0x59D * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x2CED);	// @ (0x59D * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x2CEE);	// @ (0x59D * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x2CEF);	// @ (0x59D * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T0CON1<T0PS0>
extern volatile __bit                   T0PS0               __at(0x2CF8);	// @ (0x59F * 8 + 0)
#define                                 T0PS0_bit           _BIT_ACCESS(T0CON1,0)
// T0CON1<T0PS1>
extern volatile __bit                   T0PS1               __at(0x2CF9);	// @ (0x59F * 8 + 1)
#define                                 T0PS1_bit           _BIT_ACCESS(T0CON1,1)
// T0CON1<T0PS2>
extern volatile __bit                   T0PS2               __at(0x2CFA);	// @ (0x59F * 8 + 2)
#define                                 T0PS2_bit           _BIT_ACCESS(T0CON1,2)
// T0CON1<T0PS3>
extern volatile __bit                   T0PS3               __at(0x2CFB);	// @ (0x59F * 8 + 3)
#define                                 T0PS3_bit           _BIT_ACCESS(T0CON1,3)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0xF490);	// @ (0x1E92 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0xF491);	// @ (0x1E92 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0xF492);	// @ (0x1E92 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0xF493);	// @ (0x1E92 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0xF494);	// @ (0x1E92 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1074);	// @ (0x20E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1075);	// @ (0x20E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1088);	// @ (0x211 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1089);	// @ (0x211 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x108A);	// @ (0x211 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x108B);	// @ (0x211 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x107F);	// @ (0x20F * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x107B);	// @ (0x20F * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x107E);	// @ (0x20F * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0xF498);	// @ (0x1E93 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0xF499);	// @ (0x1E93 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0xF49A);	// @ (0x1E93 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0xF49B);	// @ (0x1E93 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0xF49C);	// @ (0x1E93 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x107C);	// @ (0x20F * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1080);	// @ (0x210 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1081);	// @ (0x210 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1082);	// @ (0x210 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1083);	// @ (0x210 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1084);	// @ (0x210 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x107D);	// @ (0x20F * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x107A);	// @ (0x20F * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x1071);	// @ (0x20E * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x147E);	// @ (0x28F * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1476);	// @ (0x28E * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x147D);	// @ (0x28F * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1480);	// @ (0x290 * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1481);	// @ (0x290 * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1482);	// @ (0x290 * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1483);	// @ (0x290 * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0xF4E0);	// @ (0x1E9C * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0xF4E1);	// @ (0x1E9C * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0xF4E2);	// @ (0x1E9C * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0xF4E3);	// @ (0x1E9C * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0xF4E4);	// @ (0x1E9C * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1478);	// @ (0x28F * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1479);	// @ (0x28F * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x147A);	// @ (0x28F * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x147B);	// @ (0x28F * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x147C);	// @ (0x28F * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1488);	// @ (0x291 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1489);	// @ (0x291 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x148A);	// @ (0x291 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x148B);	// @ (0x291 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x14AE);	// @ (0x295 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x14A4);	// @ (0x294 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x14A5);	// @ (0x294 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x14A6);	// @ (0x294 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x14AD);	// @ (0x295 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x14B0);	// @ (0x296 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x14B1);	// @ (0x296 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x14B2);	// @ (0x296 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x14B3);	// @ (0x296 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4INPPS<T4INPPS0>
extern volatile __bit                   T4INPPS0            __at(0xF4E8);	// @ (0x1E9D * 8 + 0)
#define                                 T4INPPS0_bit        _BIT_ACCESS(T4INPPS,0)
// T4INPPS<T4INPPS1>
extern volatile __bit                   T4INPPS1            __at(0xF4E9);	// @ (0x1E9D * 8 + 1)
#define                                 T4INPPS1_bit        _BIT_ACCESS(T4INPPS,1)
// T4INPPS<T4INPPS2>
extern volatile __bit                   T4INPPS2            __at(0xF4EA);	// @ (0x1E9D * 8 + 2)
#define                                 T4INPPS2_bit        _BIT_ACCESS(T4INPPS,2)
// T4INPPS<T4INPPS3>
extern volatile __bit                   T4INPPS3            __at(0xF4EB);	// @ (0x1E9D * 8 + 3)
#define                                 T4INPPS3_bit        _BIT_ACCESS(T4INPPS,3)
// T4INPPS<T4INPPS4>
extern volatile __bit                   T4INPPS4            __at(0xF4EC);	// @ (0x1E9D * 8 + 4)
#define                                 T4INPPS4_bit        _BIT_ACCESS(T4INPPS,4)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x14A8);	// @ (0x295 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x14A9);	// @ (0x295 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x14AA);	// @ (0x295 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x14AB);	// @ (0x295 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x14AC);	// @ (0x295 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x14A7);	// @ (0x294 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x14A0);	// @ (0x294 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x14A1);	// @ (0x294 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x14A2);	// @ (0x294 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x14A3);	// @ (0x294 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x14AF);	// @ (0x295 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x14B8);	// @ (0x297 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x14B9);	// @ (0x297 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x14BA);	// @ (0x297 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x14BB);	// @ (0x297 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// ADCON3<TMD0>
extern volatile __bit                   TMD0                __at(0x8A0);	// @ (0x114 * 8 + 0)
#define                                 TMD0_bit            _BIT_ACCESS(ADCON3,0)
// ADCON3<TMD1>
extern volatile __bit                   TMD1                __at(0x8A1);	// @ (0x114 * 8 + 1)
#define                                 TMD1_bit            _BIT_ACCESS(ADCON3,1)
// ADCON3<TMD2>
extern volatile __bit                   TMD2                __at(0x8A2);	// @ (0x114 * 8 + 2)
#define                                 TMD2_bit            _BIT_ACCESS(ADCON3,2)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x2CE8);	// @ (0x59D * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x2CE9);	// @ (0x59D * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x2CEA);	// @ (0x59D * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x2CEB);	// @ (0x59D * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x2CEC);	// @ (0x59D * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x2CED);	// @ (0x59D * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x2CEE);	// @ (0x59D * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x2CEF);	// @ (0x59D * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x38B5);	// @ (0x716 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x3865);	// @ (0x70C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x2CE0);	// @ (0x59C * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x2CE1);	// @ (0x59C * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x2CE2);	// @ (0x59C * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x2CE3);	// @ (0x59C * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x2CE4);	// @ (0x59C * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x2CE5);	// @ (0x59C * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x2CE6);	// @ (0x59C * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x2CE7);	// @ (0x59C * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x3CB8);	// @ (0x797 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// TMR1L<TMR10>
extern volatile __bit                   TMR10               __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR10_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR11>
extern volatile __bit                   TMR11               __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// TMR1L<TMR12>
extern volatile __bit                   TMR12               __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR12_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR13>
extern volatile __bit                   TMR13               __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR13_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR14>
extern volatile __bit                   TMR14               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR14_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR15>
extern volatile __bit                   TMR15               __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR15_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR16>
extern volatile __bit                   TMR16               __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR16_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR17>
extern volatile __bit                   TMR17               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR17_bit           _BIT_ACCESS(TMR1L,7)
// TMR1H<TMR18>
extern volatile __bit                   TMR18               __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR18_bit           _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR19>
extern volatile __bit                   TMR19               __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR19_bit           _BIT_ACCESS(TMR1H,1)
// PIE5<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x38D8);	// @ (0x71B * 8 + 0)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR5,0)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x106B);	// @ (0x20D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x106C);	// @ (0x20D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x106E);	// @ (0x20D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x106F);	// @ (0x20D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE4<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x38D0);	// @ (0x71A * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x3880);	// @ (0x710 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR4,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x3CB9);	// @ (0x797 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x1070);	// @ (0x20E * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x38D1);	// @ (0x71A * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x3881);	// @ (0x710 * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,1)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x3CBA);	// @ (0x797 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1477);	// @ (0x28E * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// PIE4<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x38D3);	// @ (0x71A * 8 + 3)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x3883);	// @ (0x710 * 8 + 3)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR4,3)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x3CBC);	// @ (0x797 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x14A7);	// @ (0x294 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x93);	// @ (0x12 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x96);	// @ (0x12 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x97);	// @ (0x12 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x98);	// @ (0x13 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x99);	// @ (0x13 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x9A);	// @ (0x13 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x9B);	// @ (0x13 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x9C);	// @ (0x13 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x9D);	// @ (0x13 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x9E);	// @ (0x13 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x9F);	// @ (0x13 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0xA0);	// @ (0x14 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0xA1);	// @ (0x14 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0xA2);	// @ (0x14 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0xA3);	// @ (0x14 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0xA4);	// @ (0x14 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0xA5);	// @ (0x14 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0xA6);	// @ (0x14 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0xA7);	// @ (0x14 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TRISD<TRISD0>
extern volatile __bit                   TRISD0              __at(0xA8);	// @ (0x15 * 8 + 0)
#define                                 TRISD0_bit          _BIT_ACCESS(TRISD,0)
// TRISD<TRISD1>
extern volatile __bit                   TRISD1              __at(0xA9);	// @ (0x15 * 8 + 1)
#define                                 TRISD1_bit          _BIT_ACCESS(TRISD,1)
// TRISD<TRISD2>
extern volatile __bit                   TRISD2              __at(0xAA);	// @ (0x15 * 8 + 2)
#define                                 TRISD2_bit          _BIT_ACCESS(TRISD,2)
// TRISD<TRISD3>
extern volatile __bit                   TRISD3              __at(0xAB);	// @ (0x15 * 8 + 3)
#define                                 TRISD3_bit          _BIT_ACCESS(TRISD,3)
// TRISD<TRISD4>
extern volatile __bit                   TRISD4              __at(0xAC);	// @ (0x15 * 8 + 4)
#define                                 TRISD4_bit          _BIT_ACCESS(TRISD,4)
// TRISD<TRISD5>
extern volatile __bit                   TRISD5              __at(0xAD);	// @ (0x15 * 8 + 5)
#define                                 TRISD5_bit          _BIT_ACCESS(TRISD,5)
// TRISD<TRISD6>
extern volatile __bit                   TRISD6              __at(0xAE);	// @ (0x15 * 8 + 6)
#define                                 TRISD6_bit          _BIT_ACCESS(TRISD,6)
// TRISD<TRISD7>
extern volatile __bit                   TRISD7              __at(0xAF);	// @ (0x15 * 8 + 7)
#define                                 TRISD7_bit          _BIT_ACCESS(TRISD,7)
// TRISE<TRISE0>
extern volatile __bit                   TRISE0              __at(0xB0);	// @ (0x16 * 8 + 0)
#define                                 TRISE0_bit          _BIT_ACCESS(TRISE,0)
// TRISE<TRISE1>
extern volatile __bit                   TRISE1              __at(0xB1);	// @ (0x16 * 8 + 1)
#define                                 TRISE1_bit          _BIT_ACCESS(TRISE,1)
// TRISE<TRISE3>
extern volatile __bit                   TRISE3              __at(0xB3);	// @ (0x16 * 8 + 3)
#define                                 TRISE3_bit          _BIT_ACCESS(TRISE,3)
// TRISE<TRISE4>
extern volatile __bit                   TRISE4              __at(0xB4);	// @ (0x16 * 8 + 4)
#define                                 TRISE4_bit          _BIT_ACCESS(TRISE,4)
// TRISE<TRISE5>
extern volatile __bit                   TRISE5              __at(0xB5);	// @ (0x16 * 8 + 5)
#define                                 TRISE5_bit          _BIT_ACCESS(TRISE,5)
// TRISE<TRISE6>
extern volatile __bit                   TRISE6              __at(0xB6);	// @ (0x16 * 8 + 6)
#define                                 TRISE6_bit          _BIT_ACCESS(TRISE,6)
// TRISE<TRISE7>
extern volatile __bit                   TRISE7              __at(0xB7);	// @ (0x16 * 8 + 7)
#define                                 TRISE7_bit          _BIT_ACCESS(TRISE,7)
// TRISF<TRISF0>
extern volatile __bit                   TRISF0              __at(0xB8);	// @ (0x17 * 8 + 0)
#define                                 TRISF0_bit          _BIT_ACCESS(TRISF,0)
// TRISF<TRISF1>
extern volatile __bit                   TRISF1              __at(0xB9);	// @ (0x17 * 8 + 1)
#define                                 TRISF1_bit          _BIT_ACCESS(TRISF,1)
// TRISF<TRISF2>
extern volatile __bit                   TRISF2              __at(0xBA);	// @ (0x17 * 8 + 2)
#define                                 TRISF2_bit          _BIT_ACCESS(TRISF,2)
// TRISF<TRISF3>
extern volatile __bit                   TRISF3              __at(0xBB);	// @ (0x17 * 8 + 3)
#define                                 TRISF3_bit          _BIT_ACCESS(TRISF,3)
// TRISF<TRISF4>
extern volatile __bit                   TRISF4              __at(0xBC);	// @ (0x17 * 8 + 4)
#define                                 TRISF4_bit          _BIT_ACCESS(TRISF,4)
// TRISF<TRISF5>
extern volatile __bit                   TRISF5              __at(0xBD);	// @ (0x17 * 8 + 5)
#define                                 TRISF5_bit          _BIT_ACCESS(TRISF,5)
// TRISF<TRISF6>
extern volatile __bit                   TRISF6              __at(0xBE);	// @ (0x17 * 8 + 6)
#define                                 TRISF6_bit          _BIT_ACCESS(TRISF,6)
// TRISF<TRISF7>
extern volatile __bit                   TRISF7              __at(0xBF);	// @ (0x17 * 8 + 7)
#define                                 TRISF7_bit          _BIT_ACCESS(TRISF,7)
// TRISG<TRISG0>
extern volatile __bit                   TRISG0              __at(0x6470);	// @ (0xC8E * 8 + 0)
#define                                 TRISG0_bit          _BIT_ACCESS(TRISG,0)
// TRISG<TRISG1>
extern volatile __bit                   TRISG1              __at(0x6471);	// @ (0xC8E * 8 + 1)
#define                                 TRISG1_bit          _BIT_ACCESS(TRISG,1)
// TRISG<TRISG2>
extern volatile __bit                   TRISG2              __at(0x6472);	// @ (0xC8E * 8 + 2)
#define                                 TRISG2_bit          _BIT_ACCESS(TRISG,2)
// TRISG<TRISG3>
extern volatile __bit                   TRISG3              __at(0x6473);	// @ (0xC8E * 8 + 3)
#define                                 TRISG3_bit          _BIT_ACCESS(TRISG,3)
// TRISG<TRISG4>
extern volatile __bit                   TRISG4              __at(0x6474);	// @ (0xC8E * 8 + 4)
#define                                 TRISG4_bit          _BIT_ACCESS(TRISG,4)
// TRISG<TRISG6>
extern volatile __bit                   TRISG6              __at(0x6476);	// @ (0xC8E * 8 + 6)
#define                                 TRISG6_bit          _BIT_ACCESS(TRISG,6)
// TRISG<TRISG7>
extern volatile __bit                   TRISG7              __at(0x6477);	// @ (0xC8E * 8 + 7)
#define                                 TRISG7_bit          _BIT_ACCESS(TRISG,7)
// TRISH<TRISH0>
extern volatile __bit                   TRISH0              __at(0x6478);	// @ (0xC8F * 8 + 0)
#define                                 TRISH0_bit          _BIT_ACCESS(TRISH,0)
// TRISH<TRISH1>
extern volatile __bit                   TRISH1              __at(0x6479);	// @ (0xC8F * 8 + 1)
#define                                 TRISH1_bit          _BIT_ACCESS(TRISH,1)
// TRISH<TRISH2>
extern volatile __bit                   TRISH2              __at(0x647A);	// @ (0xC8F * 8 + 2)
#define                                 TRISH2_bit          _BIT_ACCESS(TRISH,2)
// TRISH<TRISH3>
extern volatile __bit                   TRISH3              __at(0x647B);	// @ (0xC8F * 8 + 3)
#define                                 TRISH3_bit          _BIT_ACCESS(TRISH,3)
// SMT1STAT<TS>
extern volatile __bit                   TS                  __at(0x24D2);	// @ (0x49A * 8 + 2)
#define                                 TS_bit              _BIT_ACCESS(SMT1STAT,2)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x4865);	// @ (0x90C * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x4864);	// @ (0x90C * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// PIE3<TX1IE>
extern volatile __bit                   TX1IE               __at(0x38CC);	// @ (0x719 * 8 + 4)
#define                                 TX1IE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<TX1IF>
extern volatile __bit                   TX1IF               __at(0x387C);	// @ (0x70F * 8 + 4)
#define                                 TX1IF_bit           _BIT_ACCESS(PIR3,4)
// TX1PPS<TX1PPS0>
extern volatile __bit                   TX1PPS0             __at(0xF660);	// @ (0x1ECC * 8 + 0)
#define                                 TX1PPS0_bit         _BIT_ACCESS(TX1PPS,0)
// TX1PPS<TX1PPS1>
extern volatile __bit                   TX1PPS1             __at(0xF661);	// @ (0x1ECC * 8 + 1)
#define                                 TX1PPS1_bit         _BIT_ACCESS(TX1PPS,1)
// TX1PPS<TX1PPS2>
extern volatile __bit                   TX1PPS2             __at(0xF662);	// @ (0x1ECC * 8 + 2)
#define                                 TX1PPS2_bit         _BIT_ACCESS(TX1PPS,2)
// TX1PPS<TX1PPS3>
extern volatile __bit                   TX1PPS3             __at(0xF663);	// @ (0x1ECC * 8 + 3)
#define                                 TX1PPS3_bit         _BIT_ACCESS(TX1PPS,3)
// TX1PPS<TX1PPS4>
extern volatile __bit                   TX1PPS4             __at(0xF664);	// @ (0x1ECC * 8 + 4)
#define                                 TX1PPS4_bit         _BIT_ACCESS(TX1PPS,4)
// PIE3<TX2IE>
extern volatile __bit                   TX2IE               __at(0x38CE);	// @ (0x719 * 8 + 6)
#define                                 TX2IE_bit           _BIT_ACCESS(PIE3,6)
// PIR3<TX2IF>
extern volatile __bit                   TX2IF               __at(0x387E);	// @ (0x70F * 8 + 6)
#define                                 TX2IF_bit           _BIT_ACCESS(PIR3,6)
// TX2PPS<TX2PPS0>
extern volatile __bit                   TX2PPS0             __at(0xF670);	// @ (0x1ECE * 8 + 0)
#define                                 TX2PPS0_bit         _BIT_ACCESS(TX2PPS,0)
// TX2PPS<TX2PPS1>
extern volatile __bit                   TX2PPS1             __at(0xF671);	// @ (0x1ECE * 8 + 1)
#define                                 TX2PPS1_bit         _BIT_ACCESS(TX2PPS,1)
// TX2PPS<TX2PPS2>
extern volatile __bit                   TX2PPS2             __at(0xF672);	// @ (0x1ECE * 8 + 2)
#define                                 TX2PPS2_bit         _BIT_ACCESS(TX2PPS,2)
// TX2PPS<TX2PPS3>
extern volatile __bit                   TX2PPS3             __at(0xF673);	// @ (0x1ECE * 8 + 3)
#define                                 TX2PPS3_bit         _BIT_ACCESS(TX2PPS,3)
// TX2PPS<TX2PPS4>
extern volatile __bit                   TX2PPS4             __at(0xF674);	// @ (0x1ECE * 8 + 4)
#define                                 TX2PPS4_bit         _BIT_ACCESS(TX2PPS,4)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// PMD4<UART1MD>
extern volatile __bit                   UART1MD             __at(0x3CD6);	// @ (0x79A * 8 + 6)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD4,6)
// PMD4<UART2MD>
extern volatile __bit                   UART2MD             __at(0x3CD7);	// @ (0x79A * 8 + 7)
#define                                 UART2MD_bit         _BIT_ACCESS(PMD4,7)
// ADUTHL<UTH0>
extern volatile __bit                   UTH0                __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 UTH0_bit            _BIT_ACCESS(ADUTHL,0)
// ADUTHL<UTH1>
extern volatile __bit                   UTH1                __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 UTH1_bit            _BIT_ACCESS(ADUTHL,1)
// ADUTHH<UTH10>
extern volatile __bit                   UTH10               __at(0x47A);	// @ (0x8F * 8 + 2)
#define                                 UTH10_bit           _BIT_ACCESS(ADUTHH,2)
// ADUTHH<UTH11>
extern volatile __bit                   UTH11               __at(0x47B);	// @ (0x8F * 8 + 3)
#define                                 UTH11_bit           _BIT_ACCESS(ADUTHH,3)
// ADUTHH<UTH12>
extern volatile __bit                   UTH12               __at(0x47C);	// @ (0x8F * 8 + 4)
#define                                 UTH12_bit           _BIT_ACCESS(ADUTHH,4)
// ADUTHH<UTH13>
extern volatile __bit                   UTH13               __at(0x47D);	// @ (0x8F * 8 + 5)
#define                                 UTH13_bit           _BIT_ACCESS(ADUTHH,5)
// ADUTHH<UTH14>
extern volatile __bit                   UTH14               __at(0x47E);	// @ (0x8F * 8 + 6)
#define                                 UTH14_bit           _BIT_ACCESS(ADUTHH,6)
// ADUTHH<UTH15>
extern volatile __bit                   UTH15               __at(0x47F);	// @ (0x8F * 8 + 7)
#define                                 UTH15_bit           _BIT_ACCESS(ADUTHH,7)
// ADUTHL<UTH2>
extern volatile __bit                   UTH2                __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 UTH2_bit            _BIT_ACCESS(ADUTHL,2)
// ADUTHL<UTH3>
extern volatile __bit                   UTH3                __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 UTH3_bit            _BIT_ACCESS(ADUTHL,3)
// ADUTHL<UTH4>
extern volatile __bit                   UTH4                __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 UTH4_bit            _BIT_ACCESS(ADUTHL,4)
// ADUTHL<UTH5>
extern volatile __bit                   UTH5                __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 UTH5_bit            _BIT_ACCESS(ADUTHL,5)
// ADUTHL<UTH6>
extern volatile __bit                   UTH6                __at(0x476);	// @ (0x8E * 8 + 6)
#define                                 UTH6_bit            _BIT_ACCESS(ADUTHL,6)
// ADUTHL<UTH7>
extern volatile __bit                   UTH7                __at(0x477);	// @ (0x8E * 8 + 7)
#define                                 UTH7_bit            _BIT_ACCESS(ADUTHL,7)
// ADUTHH<UTH8>
extern volatile __bit                   UTH8                __at(0x478);	// @ (0x8F * 8 + 0)
#define                                 UTH8_bit            _BIT_ACCESS(ADUTHH,0)
// ADUTHH<UTH9>
extern volatile __bit                   UTH9                __at(0x479);	// @ (0x8F * 8 + 1)
#define                                 UTH9_bit            _BIT_ACCESS(ADUTHH,1)
// ADSTAT<UTHR>
extern volatile __bit                   UTHR                __at(0x8AE);	// @ (0x115 * 8 + 6)
#define                                 UTHR_bit            _BIT_ACCESS(ADSTAT,6)
// VB0GPR<VB0GPR0>
extern volatile __bit                   VB0GPR0             __at(0x7460);	// @ (0xE8C * 8 + 0)
#define                                 VB0GPR0_bit         _BIT_ACCESS(VB0GPR,0)
// VB0GPR<VB0GPR1>
extern volatile __bit                   VB0GPR1             __at(0x7461);	// @ (0xE8C * 8 + 1)
#define                                 VB0GPR1_bit         _BIT_ACCESS(VB0GPR,1)
// VB0GPR<VB0GPR2>
extern volatile __bit                   VB0GPR2             __at(0x7462);	// @ (0xE8C * 8 + 2)
#define                                 VB0GPR2_bit         _BIT_ACCESS(VB0GPR,2)
// VB0GPR<VB0GPR3>
extern volatile __bit                   VB0GPR3             __at(0x7463);	// @ (0xE8C * 8 + 3)
#define                                 VB0GPR3_bit         _BIT_ACCESS(VB0GPR,3)
// VB0GPR<VB0GPR4>
extern volatile __bit                   VB0GPR4             __at(0x7464);	// @ (0xE8C * 8 + 4)
#define                                 VB0GPR4_bit         _BIT_ACCESS(VB0GPR,4)
// VB0GPR<VB0GPR5>
extern volatile __bit                   VB0GPR5             __at(0x7465);	// @ (0xE8C * 8 + 5)
#define                                 VB0GPR5_bit         _BIT_ACCESS(VB0GPR,5)
// VB0GPR<VB0GPR6>
extern volatile __bit                   VB0GPR6             __at(0x7466);	// @ (0xE8C * 8 + 6)
#define                                 VB0GPR6_bit         _BIT_ACCESS(VB0GPR,6)
// VB0GPR<VB0GPR7>
extern volatile __bit                   VB0GPR7             __at(0x7467);	// @ (0xE8C * 8 + 7)
#define                                 VB0GPR7_bit         _BIT_ACCESS(VB0GPR,7)
// VB1GPR<VB1GPR0>
extern volatile __bit                   VB1GPR0             __at(0x7468);	// @ (0xE8D * 8 + 0)
#define                                 VB1GPR0_bit         _BIT_ACCESS(VB1GPR,0)
// VB1GPR<VB1GPR1>
extern volatile __bit                   VB1GPR1             __at(0x7469);	// @ (0xE8D * 8 + 1)
#define                                 VB1GPR1_bit         _BIT_ACCESS(VB1GPR,1)
// VB1GPR<VB1GPR2>
extern volatile __bit                   VB1GPR2             __at(0x746A);	// @ (0xE8D * 8 + 2)
#define                                 VB1GPR2_bit         _BIT_ACCESS(VB1GPR,2)
// VB1GPR<VB1GPR3>
extern volatile __bit                   VB1GPR3             __at(0x746B);	// @ (0xE8D * 8 + 3)
#define                                 VB1GPR3_bit         _BIT_ACCESS(VB1GPR,3)
// VB1GPR<VB1GPR4>
extern volatile __bit                   VB1GPR4             __at(0x746C);	// @ (0xE8D * 8 + 4)
#define                                 VB1GPR4_bit         _BIT_ACCESS(VB1GPR,4)
// VB1GPR<VB1GPR5>
extern volatile __bit                   VB1GPR5             __at(0x746D);	// @ (0xE8D * 8 + 5)
#define                                 VB1GPR5_bit         _BIT_ACCESS(VB1GPR,5)
// VB1GPR<VB1GPR6>
extern volatile __bit                   VB1GPR6             __at(0x746E);	// @ (0xE8D * 8 + 6)
#define                                 VB1GPR6_bit         _BIT_ACCESS(VB1GPR,6)
// VB1GPR<VB1GPR7>
extern volatile __bit                   VB1GPR7             __at(0x746F);	// @ (0xE8D * 8 + 7)
#define                                 VB1GPR7_bit         _BIT_ACCESS(VB1GPR,7)
// VB2GPR<VB2GPR0>
extern volatile __bit                   VB2GPR0             __at(0x7470);	// @ (0xE8E * 8 + 0)
#define                                 VB2GPR0_bit         _BIT_ACCESS(VB2GPR,0)
// VB2GPR<VB2GPR1>
extern volatile __bit                   VB2GPR1             __at(0x7471);	// @ (0xE8E * 8 + 1)
#define                                 VB2GPR1_bit         _BIT_ACCESS(VB2GPR,1)
// VB2GPR<VB2GPR2>
extern volatile __bit                   VB2GPR2             __at(0x7472);	// @ (0xE8E * 8 + 2)
#define                                 VB2GPR2_bit         _BIT_ACCESS(VB2GPR,2)
// VB2GPR<VB2GPR3>
extern volatile __bit                   VB2GPR3             __at(0x7473);	// @ (0xE8E * 8 + 3)
#define                                 VB2GPR3_bit         _BIT_ACCESS(VB2GPR,3)
// VB2GPR<VB2GPR4>
extern volatile __bit                   VB2GPR4             __at(0x7474);	// @ (0xE8E * 8 + 4)
#define                                 VB2GPR4_bit         _BIT_ACCESS(VB2GPR,4)
// VB2GPR<VB2GPR5>
extern volatile __bit                   VB2GPR5             __at(0x7475);	// @ (0xE8E * 8 + 5)
#define                                 VB2GPR5_bit         _BIT_ACCESS(VB2GPR,5)
// VB2GPR<VB2GPR6>
extern volatile __bit                   VB2GPR6             __at(0x7476);	// @ (0xE8E * 8 + 6)
#define                                 VB2GPR6_bit         _BIT_ACCESS(VB2GPR,6)
// VB2GPR<VB2GPR7>
extern volatile __bit                   VB2GPR7             __at(0x7477);	// @ (0xE8E * 8 + 7)
#define                                 VB2GPR7_bit         _BIT_ACCESS(VB2GPR,7)
// VB3GPR<VB3GPR0>
extern volatile __bit                   VB3GPR0             __at(0x7478);	// @ (0xE8F * 8 + 0)
#define                                 VB3GPR0_bit         _BIT_ACCESS(VB3GPR,0)
// VB3GPR<VB3GPR1>
extern volatile __bit                   VB3GPR1             __at(0x7479);	// @ (0xE8F * 8 + 1)
#define                                 VB3GPR1_bit         _BIT_ACCESS(VB3GPR,1)
// VB3GPR<VB3GPR2>
extern volatile __bit                   VB3GPR2             __at(0x747A);	// @ (0xE8F * 8 + 2)
#define                                 VB3GPR2_bit         _BIT_ACCESS(VB3GPR,2)
// VB3GPR<VB3GPR3>
extern volatile __bit                   VB3GPR3             __at(0x747B);	// @ (0xE8F * 8 + 3)
#define                                 VB3GPR3_bit         _BIT_ACCESS(VB3GPR,3)
// VB3GPR<VB3GPR4>
extern volatile __bit                   VB3GPR4             __at(0x747C);	// @ (0xE8F * 8 + 4)
#define                                 VB3GPR4_bit         _BIT_ACCESS(VB3GPR,4)
// VB3GPR<VB3GPR5>
extern volatile __bit                   VB3GPR5             __at(0x747D);	// @ (0xE8F * 8 + 5)
#define                                 VB3GPR5_bit         _BIT_ACCESS(VB3GPR,5)
// VB3GPR<VB3GPR6>
extern volatile __bit                   VB3GPR6             __at(0x747E);	// @ (0xE8F * 8 + 6)
#define                                 VB3GPR6_bit         _BIT_ACCESS(VB3GPR,6)
// VB3GPR<VB3GPR7>
extern volatile __bit                   VB3GPR7             __at(0x747F);	// @ (0xE8F * 8 + 7)
#define                                 VB3GPR7_bit         _BIT_ACCESS(VB3GPR,7)
// PCON1<VBATBOR>
extern volatile __bit                   VBATBOR             __at(0x40A0);	// @ (0x814 * 8 + 0)
#define                                 VBATBOR_bit         _BIT_ACCESS(PCON1,0)
// LCDPS<WA>
extern volatile __bit                   WA                  __at(0xE86C);	// @ (0x1D0D * 8 + 4)
#define                                 WA_bit              _BIT_ACCESS(LCDPS,4)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// WEEKDAY<WDAY0>
extern volatile __bit                   WDAY0               __at(0x6090);	// @ (0xC12 * 8 + 0)
#define                                 WDAY0_bit           _BIT_ACCESS(WEEKDAY,0)
// WEEKDAY<WDAY1>
extern volatile __bit                   WDAY1               __at(0x6091);	// @ (0xC12 * 8 + 1)
#define                                 WDAY1_bit           _BIT_ACCESS(WEEKDAY,1)
// WEEKDAY<WDAY2>
extern volatile __bit                   WDAY2               __at(0x6092);	// @ (0xC12 * 8 + 2)
#define                                 WDAY2_bit           _BIT_ACCESS(WEEKDAY,2)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x406C);	// @ (0x80D * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x406D);	// @ (0x80D * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x406E);	// @ (0x80D * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x4063);	// @ (0x80C * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x4065);	// @ (0x80C * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x407B);	// @ (0x80F * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x407C);	// @ (0x80F * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x407D);	// @ (0x80F * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x407E);	// @ (0x80F * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x407F);	// @ (0x80F * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x4073);	// @ (0x80E * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x4074);	// @ (0x80E * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x4075);	// @ (0x80E * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x4076);	// @ (0x80E * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x4077);	// @ (0x80E * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x4083);	// @ (0x810 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x4085);	// @ (0x810 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x4086);	// @ (0x810 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// LCDCON<WERR>
extern volatile __bit                   WERR                __at(0xE865);	// @ (0x1D0C * 8 + 5)
#define                                 WERR_bit            _BIT_ACCESS(LCDCON,5)
// LCDPS<WFT>
extern volatile __bit                   WFT                 __at(0xE86F);	// @ (0x1D0D * 8 + 7)
#define                                 WFT_bit             _BIT_ACCESS(LCDPS,7)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x406A);	// @ (0x80D * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// SMT1CON0<WPOL>
extern volatile __bit                   WPOL                __at(0x24C4);	// @ (0x498 * 8 + 4)
#define                                 WPOL_bit            _BIT_ACCESS(SMT1CON0,4)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0xF9C8);	// @ (0x1F39 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0xF9C9);	// @ (0x1F39 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0xF9CA);	// @ (0x1F39 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0xF9CB);	// @ (0x1F39 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0xF9CC);	// @ (0x1F39 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0xF9CD);	// @ (0x1F39 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0xF9CE);	// @ (0x1F39 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0xF9CF);	// @ (0x1F39 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0xFA20);	// @ (0x1F44 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0xFA21);	// @ (0x1F44 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0xFA22);	// @ (0x1F44 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0xFA23);	// @ (0x1F44 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0xFA24);	// @ (0x1F44 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0xFA25);	// @ (0x1F44 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0xFA26);	// @ (0x1F44 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0xFA27);	// @ (0x1F44 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0xFA78);	// @ (0x1F4F * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0xFA79);	// @ (0x1F4F * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0xFA7A);	// @ (0x1F4F * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0xFA7B);	// @ (0x1F4F * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0xFA7C);	// @ (0x1F4F * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0xFA7D);	// @ (0x1F4F * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0xFA7E);	// @ (0x1F4F * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0xFA7F);	// @ (0x1F4F * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUD<WPUD0>
extern volatile __bit                   WPUD0               __at(0xFAD0);	// @ (0x1F5A * 8 + 0)
#define                                 WPUD0_bit           _BIT_ACCESS(WPUD,0)
// WPUD<WPUD1>
extern volatile __bit                   WPUD1               __at(0xFAD1);	// @ (0x1F5A * 8 + 1)
#define                                 WPUD1_bit           _BIT_ACCESS(WPUD,1)
// WPUD<WPUD2>
extern volatile __bit                   WPUD2               __at(0xFAD2);	// @ (0x1F5A * 8 + 2)
#define                                 WPUD2_bit           _BIT_ACCESS(WPUD,2)
// WPUD<WPUD3>
extern volatile __bit                   WPUD3               __at(0xFAD3);	// @ (0x1F5A * 8 + 3)
#define                                 WPUD3_bit           _BIT_ACCESS(WPUD,3)
// WPUD<WPUD4>
extern volatile __bit                   WPUD4               __at(0xFAD4);	// @ (0x1F5A * 8 + 4)
#define                                 WPUD4_bit           _BIT_ACCESS(WPUD,4)
// WPUD<WPUD5>
extern volatile __bit                   WPUD5               __at(0xFAD5);	// @ (0x1F5A * 8 + 5)
#define                                 WPUD5_bit           _BIT_ACCESS(WPUD,5)
// WPUD<WPUD6>
extern volatile __bit                   WPUD6               __at(0xFAD6);	// @ (0x1F5A * 8 + 6)
#define                                 WPUD6_bit           _BIT_ACCESS(WPUD,6)
// WPUD<WPUD7>
extern volatile __bit                   WPUD7               __at(0xFAD7);	// @ (0x1F5A * 8 + 7)
#define                                 WPUD7_bit           _BIT_ACCESS(WPUD,7)
// WPUE<WPUE0>
extern volatile __bit                   WPUE0               __at(0xFB28);	// @ (0x1F65 * 8 + 0)
#define                                 WPUE0_bit           _BIT_ACCESS(WPUE,0)
// WPUE<WPUE1>
extern volatile __bit                   WPUE1               __at(0xFB29);	// @ (0x1F65 * 8 + 1)
#define                                 WPUE1_bit           _BIT_ACCESS(WPUE,1)
// WPUE<WPUE3>
extern volatile __bit                   WPUE3               __at(0xFB2B);	// @ (0x1F65 * 8 + 3)
#define                                 WPUE3_bit           _BIT_ACCESS(WPUE,3)
// WPUE<WPUE4>
extern volatile __bit                   WPUE4               __at(0xFB2C);	// @ (0x1F65 * 8 + 4)
#define                                 WPUE4_bit           _BIT_ACCESS(WPUE,4)
// WPUE<WPUE5>
extern volatile __bit                   WPUE5               __at(0xFB2D);	// @ (0x1F65 * 8 + 5)
#define                                 WPUE5_bit           _BIT_ACCESS(WPUE,5)
// WPUE<WPUE6>
extern volatile __bit                   WPUE6               __at(0xFB2E);	// @ (0x1F65 * 8 + 6)
#define                                 WPUE6_bit           _BIT_ACCESS(WPUE,6)
// WPUE<WPUE7>
extern volatile __bit                   WPUE7               __at(0xFB2F);	// @ (0x1F65 * 8 + 7)
#define                                 WPUE7_bit           _BIT_ACCESS(WPUE,7)
// WPUF<WPUF0>
extern volatile __bit                   WPUF0               __at(0xF288);	// @ (0x1E51 * 8 + 0)
#define                                 WPUF0_bit           _BIT_ACCESS(WPUF,0)
// WPUF<WPUF1>
extern volatile __bit                   WPUF1               __at(0xF289);	// @ (0x1E51 * 8 + 1)
#define                                 WPUF1_bit           _BIT_ACCESS(WPUF,1)
// WPUF<WPUF2>
extern volatile __bit                   WPUF2               __at(0xF28A);	// @ (0x1E51 * 8 + 2)
#define                                 WPUF2_bit           _BIT_ACCESS(WPUF,2)
// WPUF<WPUF3>
extern volatile __bit                   WPUF3               __at(0xF28B);	// @ (0x1E51 * 8 + 3)
#define                                 WPUF3_bit           _BIT_ACCESS(WPUF,3)
// WPUF<WPUF4>
extern volatile __bit                   WPUF4               __at(0xF28C);	// @ (0x1E51 * 8 + 4)
#define                                 WPUF4_bit           _BIT_ACCESS(WPUF,4)
// WPUF<WPUF5>
extern volatile __bit                   WPUF5               __at(0xF28D);	// @ (0x1E51 * 8 + 5)
#define                                 WPUF5_bit           _BIT_ACCESS(WPUF,5)
// WPUF<WPUF6>
extern volatile __bit                   WPUF6               __at(0xF28E);	// @ (0x1E51 * 8 + 6)
#define                                 WPUF6_bit           _BIT_ACCESS(WPUF,6)
// WPUF<WPUF7>
extern volatile __bit                   WPUF7               __at(0xF28F);	// @ (0x1E51 * 8 + 7)
#define                                 WPUF7_bit           _BIT_ACCESS(WPUF,7)
// WPUG<WPUG0>
extern volatile __bit                   WPUG0               __at(0xF2E0);	// @ (0x1E5C * 8 + 0)
#define                                 WPUG0_bit           _BIT_ACCESS(WPUG,0)
// WPUG<WPUG1>
extern volatile __bit                   WPUG1               __at(0xF2E1);	// @ (0x1E5C * 8 + 1)
#define                                 WPUG1_bit           _BIT_ACCESS(WPUG,1)
// WPUG<WPUG2>
extern volatile __bit                   WPUG2               __at(0xF2E2);	// @ (0x1E5C * 8 + 2)
#define                                 WPUG2_bit           _BIT_ACCESS(WPUG,2)
// WPUG<WPUG3>
extern volatile __bit                   WPUG3               __at(0xF2E3);	// @ (0x1E5C * 8 + 3)
#define                                 WPUG3_bit           _BIT_ACCESS(WPUG,3)
// WPUG<WPUG4>
extern volatile __bit                   WPUG4               __at(0xF2E4);	// @ (0x1E5C * 8 + 4)
#define                                 WPUG4_bit           _BIT_ACCESS(WPUG,4)
// WPUG<WPUG5>
extern volatile __bit                   WPUG5               __at(0xF2E5);	// @ (0x1E5C * 8 + 5)
#define                                 WPUG5_bit           _BIT_ACCESS(WPUG,5)
// WPUG<WPUG6>
extern volatile __bit                   WPUG6               __at(0xF2E6);	// @ (0x1E5C * 8 + 6)
#define                                 WPUG6_bit           _BIT_ACCESS(WPUG,6)
// WPUG<WPUG7>
extern volatile __bit                   WPUG7               __at(0xF2E7);	// @ (0x1E5C * 8 + 7)
#define                                 WPUG7_bit           _BIT_ACCESS(WPUG,7)
// WPUH<WPUH0>
extern volatile __bit                   WPUH0               __at(0xF338);	// @ (0x1E67 * 8 + 0)
#define                                 WPUH0_bit           _BIT_ACCESS(WPUH,0)
// WPUH<WPUH1>
extern volatile __bit                   WPUH1               __at(0xF339);	// @ (0x1E67 * 8 + 1)
#define                                 WPUH1_bit           _BIT_ACCESS(WPUH,1)
// WPUH<WPUH2>
extern volatile __bit                   WPUH2               __at(0xF33A);	// @ (0x1E67 * 8 + 2)
#define                                 WPUH2_bit           _BIT_ACCESS(WPUH,2)
// WPUH<WPUH3>
extern volatile __bit                   WPUH3               __at(0xF33B);	// @ (0x1E67 * 8 + 3)
#define                                 WPUH3_bit           _BIT_ACCESS(WPUH,3)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x40F1);	// @ (0x81E * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x40F2);	// @ (0x81E * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x40F3);	// @ (0x81E * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// SMT1STAT<WS>
extern volatile __bit                   WS                  __at(0x24D1);	// @ (0x49A * 8 + 1)
#define                                 WS_bit              _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<WSEL0>
extern volatile __bit                   WSEL0               __at(0x24E8);	// @ (0x49D * 8 + 0)
#define                                 WSEL0_bit           _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<WSEL1>
extern volatile __bit                   WSEL1               __at(0x24E9);	// @ (0x49D * 8 + 1)
#define                                 WSEL1_bit           _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<WSEL2>
extern volatile __bit                   WSEL2               __at(0x24EA);	// @ (0x49D * 8 + 2)
#define                                 WSEL2_bit           _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<WSEL3>
extern volatile __bit                   WSEL3               __at(0x24EB);	// @ (0x49D * 8 + 3)
#define                                 WSEL3_bit           _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<WSEL4>
extern volatile __bit                   WSEL4               __at(0x24EC);	// @ (0x49D * 8 + 4)
#define                                 WSEL4_bit           _BIT_ACCESS(SMT1WIN,4)
// YEAR<YEARH0>
extern volatile __bit                   YEARH0              __at(0x6084);	// @ (0xC10 * 8 + 4)
#define                                 YEARH0_bit          _BIT_ACCESS(YEAR,4)
// YEAR<YEARH1>
extern volatile __bit                   YEARH1              __at(0x6085);	// @ (0xC10 * 8 + 5)
#define                                 YEARH1_bit          _BIT_ACCESS(YEAR,5)
// YEAR<YEARH2>
extern volatile __bit                   YEARH2              __at(0x6086);	// @ (0xC10 * 8 + 6)
#define                                 YEARH2_bit          _BIT_ACCESS(YEAR,6)
// YEAR<YEARH3>
extern volatile __bit                   YEARH3              __at(0x6087);	// @ (0xC10 * 8 + 7)
#define                                 YEARH3_bit          _BIT_ACCESS(YEAR,7)
// YEAR<YEARL0>
extern volatile __bit                   YEARL0              __at(0x6080);	// @ (0xC10 * 8 + 0)
#define                                 YEARL0_bit          _BIT_ACCESS(YEAR,0)
// YEAR<YEARL1>
extern volatile __bit                   YEARL1              __at(0x6081);	// @ (0xC10 * 8 + 1)
#define                                 YEARL1_bit          _BIT_ACCESS(YEAR,1)
// YEAR<YEARL2>
extern volatile __bit                   YEARL2              __at(0x6082);	// @ (0xC10 * 8 + 2)
#define                                 YEARL2_bit          _BIT_ACCESS(YEAR,2)
// YEAR<YEARL3>
extern volatile __bit                   YEARL3              __at(0x6083);	// @ (0xC10 * 8 + 3)
#define                                 YEARL3_bit          _BIT_ACCESS(YEAR,3)
// PIE2<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x38C6);	// @ (0x718 * 8 + 6)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE2,6)
// PIR2<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x3876);	// @ (0x70E * 8 + 6)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR2,6)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x48F8);	// @ (0x91F * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x48F9);	// @ (0x91F * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// PMD2<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x3CC0);	// @ (0x798 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD2,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x48FD);	// @ (0x91F * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x48FC);	// @ (0x91F * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x48FF);	// @ (0x91F * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// STATUS_SHAD<Z_SHAD>
extern volatile __bit                   Z_SHAD              __at(0xFF22);	// @ (0x1FE4 * 8 + 2)
#define                                 Z_SHAD_bit          _BIT_ACCESS(STATUS_SHAD,2)
// SSP1STAT<nA>
extern volatile __bit                   nA                  __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nA2>
extern volatile __bit                   nA2                 __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nA2_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS>
extern volatile __bit                   nADDRESS            __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x409A);	// @ (0x813 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x409B);	// @ (0x813 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x409C);	// @ (0x813 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nSYNC>
extern volatile __bit                   nSYNC               __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 nSYNC_bit           _BIT_ACCESS(T1CON,2)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x1072);	// @ (0x20E * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// SSP1STAT<nW>
extern volatile __bit                   nW                  __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nW2>
extern volatile __bit                   nW2                 __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nW2_bit             _BIT_ACCESS(SSP1STAT,2)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x409D);	// @ (0x813 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE>
extern volatile __bit                   nWRITE              __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE_bit          _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)

#endif // _PIC16LF19195_H_
